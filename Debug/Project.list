
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014754  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c58  08014904  08014904  00024904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801755c  0801755c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801755c  0801755c  0002755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017564  08017564  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017564  08017564  00027564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017568  08017568  00027568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801756c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00008fa0  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000901c  2000901c  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ca9  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000564b  00000000  00000000  00051d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  000573a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001780  00000000  00000000  00058ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fdb9  00000000  00000000  0005a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000295f4  00000000  00000000  0008a0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef075  00000000  00000000  000b36d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a274a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006cac  00000000  00000000  001a279c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080148ec 	.word	0x080148ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080148ec 	.word	0x080148ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SPI_RxCpltCallback>:
static void MX_SPI4_Init(void);
static void MX_UART4_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	flag = 1;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_SPI_RxCpltCallback+0x1c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000501 	.word	0x20000501

080005b4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000501 	.word	0x20000501

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_UART_RxCpltCallback+0x1c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000501 	.word	0x20000501

080005f4 <udp_transmit>:
void udp_transmit(struct udp_pcb *upcb, int len, char mem[100])
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
//  prepare variables
	ip_addr_t addr = upcb->remote_ip;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	617b      	str	r3, [r7, #20]
	u16_t port = upcb->remote_port;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	8a9b      	ldrh	r3, [r3, #20]
 800060a:	83fb      	strh	r3, [r7, #30]
//	prepare buffer
	struct pbuf *txBuf;
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29b      	uxth	r3, r3
 8000610:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000614:	4619      	mov	r1, r3
 8000616:	2036      	movs	r0, #54	; 0x36
 8000618:	f009 fe0c 	bl	800a234 <pbuf_alloc>
 800061c:	61b8      	str	r0, [r7, #24]
	pbuf_take(txBuf, mem, len);
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	b29b      	uxth	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f00a fb54 	bl	800acd4 <pbuf_take>
//	send data
	udp_connect(upcb, &addr, port);
 800062c:	8bfa      	ldrh	r2, [r7, #30]
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f010 faeb 	bl	8010c10 <udp_connect>
	udp_send(upcb, txBuf);
 800063a:	69b9      	ldr	r1, [r7, #24]
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f010 f875 	bl	801072c <udp_send>
	udp_disconnect(upcb);
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f010 fb52 	bl	8010cec <udp_disconnect>
//	release buffer
	pbuf_free(txBuf);
 8000648:	69b8      	ldr	r0, [r7, #24]
 800064a:	f00a f8d7 	bl	800a7fc <pbuf_free>
}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 f960 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f8d8 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fafc 	bl	8000c60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f000 faa4 	bl	8000bb4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800066c:	f000 fa4e 	bl	8000b0c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000670:	f008 f936 	bl	80088e0 <MX_LWIP_Init>
  MX_I2C1_Init();
 8000674:	f000 f938 	bl	80008e8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000678:	f000 f976 	bl	8000968 <MX_I2C2_Init>
  MX_SPI2_Init();
 800067c:	f000 f9b4 	bl	80009e8 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000680:	f000 f9e4 	bl	8000a4c <MX_SPI4_Init>
  MX_UART4_Init();
 8000684:	f000 fa18 	bl	8000ab8 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8000688:	f000 fa6a 	bl	8000b60 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 800068c:	f001 f8c6 	bl	800181c <udpServer_init>
  HAL_UART_Transmit(&huart3, "start\n\r", 6, 20);
 8000690:	2314      	movs	r3, #20
 8000692:	2206      	movs	r2, #6
 8000694:	4949      	ldr	r1, [pc, #292]	; (80007bc <main+0x164>)
 8000696:	484a      	ldr	r0, [pc, #296]	; (80007c0 <main+0x168>)
 8000698:	f006 fe8d 	bl	80073b6 <HAL_UART_Transmit>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 800069c:	4849      	ldr	r0, [pc, #292]	; (80007c4 <main+0x16c>)
 800069e:	f008 fd1d 	bl	80090dc <ethernetif_input>
	  sys_check_timeouts();
 80006a2:	f00f fe3f 	bl	8010324 <sys_check_timeouts>
	  if(received)
 80006a6:	4b48      	ldr	r3, [pc, #288]	; (80007c8 <main+0x170>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d06b      	beq.n	8000786 <main+0x12e>
	  {
		  protocol = mem[0];
 80006ae:	4b47      	ldr	r3, [pc, #284]	; (80007cc <main+0x174>)
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	4b47      	ldr	r3, [pc, #284]	; (80007d0 <main+0x178>)
 80006b4:	701a      	strb	r2, [r3, #0]
//		  SPI send and receive
		  if(mem[0] == '1')
 80006b6:	4b45      	ldr	r3, [pc, #276]	; (80007cc <main+0x174>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b31      	cmp	r3, #49	; 0x31
 80006bc:	d11d      	bne.n	80006fa <main+0xa2>
		  {
			  HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)send, len);
 80006be:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <main+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	4944      	ldr	r1, [pc, #272]	; (80007d8 <main+0x180>)
 80006c8:	4844      	ldr	r0, [pc, #272]	; (80007dc <main+0x184>)
 80006ca:	f006 f8a3 	bl	8006814 <HAL_SPI_Receive_DMA>
			  HAL_SPI_Transmit_DMA(&hspi4, (uint8_t *)&mem[1], len);
 80006ce:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <main+0x17c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4942      	ldr	r1, [pc, #264]	; (80007e0 <main+0x188>)
 80006d8:	4842      	ldr	r0, [pc, #264]	; (80007e4 <main+0x18c>)
 80006da:	f005 ffe5 	bl	80066a8 <HAL_SPI_Transmit_DMA>
			  while(flag == 0);
 80006de:	bf00      	nop
 80006e0:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <main+0x190>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0fb      	beq.n	80006e0 <main+0x88>
			  UDPlen = sprintf(header, "SPI- %s\n\r", send);
 80006e8:	4a3b      	ldr	r2, [pc, #236]	; (80007d8 <main+0x180>)
 80006ea:	4940      	ldr	r1, [pc, #256]	; (80007ec <main+0x194>)
 80006ec:	4840      	ldr	r0, [pc, #256]	; (80007f0 <main+0x198>)
 80006ee:	f012 ff4f 	bl	8013590 <siprintf>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a3f      	ldr	r2, [pc, #252]	; (80007f4 <main+0x19c>)
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	e042      	b.n	8000780 <main+0x128>
		  }
//		  I2C send and receive
		  else if(protocol == '2')
 80006fa:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <main+0x178>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b32      	cmp	r3, #50	; 0x32
 8000700:	d11d      	bne.n	800073e <main+0xe6>
		  {
			  HAL_I2C_Master_Transmit_DMA(&hi2c1, 20, (uint8_t *)&mem[1], len);
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <main+0x17c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	b29b      	uxth	r3, r3
 8000708:	4a35      	ldr	r2, [pc, #212]	; (80007e0 <main+0x188>)
 800070a:	2114      	movs	r1, #20
 800070c:	483a      	ldr	r0, [pc, #232]	; (80007f8 <main+0x1a0>)
 800070e:	f003 fb69 	bl	8003de4 <HAL_I2C_Master_Transmit_DMA>
			  HAL_I2C_Slave_Receive_DMA(&hi2c2, (uint8_t *)send, len);
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <main+0x17c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	492f      	ldr	r1, [pc, #188]	; (80007d8 <main+0x180>)
 800071c:	4837      	ldr	r0, [pc, #220]	; (80007fc <main+0x1a4>)
 800071e:	f003 fc91 	bl	8004044 <HAL_I2C_Slave_Receive_DMA>
			  while(flag == 0);
 8000722:	bf00      	nop
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <main+0x190>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0fb      	beq.n	8000724 <main+0xcc>
			  UDPlen = sprintf(header, "I2C- %s\n\r", send);
 800072c:	4a2a      	ldr	r2, [pc, #168]	; (80007d8 <main+0x180>)
 800072e:	4934      	ldr	r1, [pc, #208]	; (8000800 <main+0x1a8>)
 8000730:	482f      	ldr	r0, [pc, #188]	; (80007f0 <main+0x198>)
 8000732:	f012 ff2d 	bl	8013590 <siprintf>
 8000736:	4603      	mov	r3, r0
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <main+0x19c>)
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	e020      	b.n	8000780 <main+0x128>
		  }
//		  UART send and receive
		  else if(protocol == '3')
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <main+0x178>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b33      	cmp	r3, #51	; 0x33
 8000744:	d11c      	bne.n	8000780 <main+0x128>
		  {
			  HAL_UART_Receive_DMA(&huart6, (uint8_t *)send, len);
 8000746:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <main+0x17c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	4922      	ldr	r1, [pc, #136]	; (80007d8 <main+0x180>)
 8000750:	482c      	ldr	r0, [pc, #176]	; (8000804 <main+0x1ac>)
 8000752:	f006 ff41 	bl	80075d8 <HAL_UART_Receive_DMA>
			  HAL_UART_Transmit_DMA(&huart4, (uint8_t *)&mem[1], len);
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <main+0x17c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b29b      	uxth	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	4920      	ldr	r1, [pc, #128]	; (80007e0 <main+0x188>)
 8000760:	4829      	ldr	r0, [pc, #164]	; (8000808 <main+0x1b0>)
 8000762:	f006 febb 	bl	80074dc <HAL_UART_Transmit_DMA>
			  while(flag == 0);
 8000766:	bf00      	nop
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <main+0x190>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0fb      	beq.n	8000768 <main+0x110>
			  UDPlen = sprintf(header, "UART - %s\n\r", send);
 8000770:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <main+0x180>)
 8000772:	4926      	ldr	r1, [pc, #152]	; (800080c <main+0x1b4>)
 8000774:	481e      	ldr	r0, [pc, #120]	; (80007f0 <main+0x198>)
 8000776:	f012 ff0b 	bl	8013590 <siprintf>
 800077a:	4603      	mov	r3, r0
 800077c:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <main+0x19c>)
 800077e:	6013      	str	r3, [r2, #0]
		  }
		  received = 0;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <main+0x170>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
	  }
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if(flag)
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <main+0x190>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d086      	beq.n	800069c <main+0x44>
	  {
//		  HAL_UART_Transmit(&huart3, send, 15, 20);
		  header[UDPlen + 1] = 3;
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <main+0x19c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <main+0x198>)
 8000796:	2103      	movs	r1, #3
 8000798:	54d1      	strb	r1, [r2, r3]
		  udp_transmit(udp_info, UDPlen, header);
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <main+0x1b8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <main+0x19c>)
 80007a0:	6811      	ldr	r1, [r2, #0]
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <main+0x198>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff25 	bl	80005f4 <udp_transmit>
		  flag = 0;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <main+0x190>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
//		  reset memory back to 0
//		  memset(mem, 0, 101);
		  memset(send, 0, 100);
 80007b0:	2264      	movs	r2, #100	; 0x64
 80007b2:	2100      	movs	r1, #0
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <main+0x180>)
 80007b6:	f012 fe8d 	bl	80134d4 <memset>
	  ethernetif_input(&gnetif);
 80007ba:	e76f      	b.n	800069c <main+0x44>
 80007bc:	08014904 	.word	0x08014904
 80007c0:	200003b4 	.word	0x200003b4
 80007c4:	2000064c 	.word	0x2000064c
 80007c8:	20000500 	.word	0x20000500
 80007cc:	20000568 	.word	0x20000568
 80007d0:	20000000 	.word	0x20000000
 80007d4:	2000063c 	.word	0x2000063c
 80007d8:	20000504 	.word	0x20000504
 80007dc:	20000200 	.word	0x20000200
 80007e0:	20000569 	.word	0x20000569
 80007e4:	20000258 	.word	0x20000258
 80007e8:	20000501 	.word	0x20000501
 80007ec:	0801490c 	.word	0x0801490c
 80007f0:	200005d0 	.word	0x200005d0
 80007f4:	20000640 	.word	0x20000640
 80007f8:	20000098 	.word	0x20000098
 80007fc:	200000ec 	.word	0x200000ec
 8000800:	08014918 	.word	0x08014918
 8000804:	200003f8 	.word	0x200003f8
 8000808:	20000370 	.word	0x20000370
 800080c:	08014924 	.word	0x08014924
 8000810:	200004fc 	.word	0x200004fc

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f012 fe56 	bl	80134d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <SystemClock_Config+0xcc>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SystemClock_Config+0xcc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <SystemClock_Config+0xd0>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <SystemClock_Config+0xd0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000874:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000888:	23a8      	movs	r3, #168	; 0xa8
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000890:	2307      	movs	r3, #7
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f005 f9e3 	bl	8005c64 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 fab8 	bl	8000e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2105      	movs	r1, #5
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 fc44 	bl	8006154 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008d2:	f000 faa1 	bl	8000e18 <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3750      	adds	r7, #80	; 0x50
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_I2C1_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <MX_I2C1_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_I2C1_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <MX_I2C1_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_I2C1_Init+0x74>)
 8000906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_I2C1_Init+0x74>)
 8000926:	f003 f919 	bl	8003b5c <HAL_I2C_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000930:	f000 fa72 	bl	8000e18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <MX_I2C1_Init+0x74>)
 8000938:	f005 f919 	bl	8005b6e <HAL_I2CEx_ConfigAnalogFilter>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000942:	f000 fa69 	bl	8000e18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_I2C1_Init+0x74>)
 800094a:	f005 f94c 	bl	8005be6 <HAL_I2CEx_ConfigDigitalFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000954:	f000 fa60 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000098 	.word	0x20000098
 8000960:	40005400 	.word	0x40005400
 8000964:	000186a0 	.word	0x000186a0

08000968 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_I2C2_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <MX_I2C2_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_I2C2_Init+0x74>)
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <MX_I2C2_Init+0x7c>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_I2C2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 20;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_I2C2_Init+0x74>)
 8000980:	2214      	movs	r2, #20
 8000982:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_I2C2_Init+0x74>)
 8000986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_I2C2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_I2C2_Init+0x74>)
 80009a6:	f003 f8d9 	bl	8003b5c <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 fa32 	bl	8000e18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <MX_I2C2_Init+0x74>)
 80009b8:	f005 f8d9 	bl	8005b6e <HAL_I2CEx_ConfigAnalogFilter>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80009c2:	f000 fa29 	bl	8000e18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_I2C2_Init+0x74>)
 80009ca:	f005 f90c 	bl	8005be6 <HAL_I2CEx_ConfigDigitalFilter>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80009d4:	f000 fa20 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000ec 	.word	0x200000ec
 80009e0:	40005800 	.word	0x40005800
 80009e4:	000186a0 	.word	0x000186a0

080009e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_SPI2_Init+0x5c>)
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <MX_SPI2_Init+0x60>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI2_Init+0x5c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_SPI2_Init+0x5c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a2a:	220a      	movs	r2, #10
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_SPI2_Init+0x5c>)
 8000a30:	f005 fdb0 	bl	8006594 <HAL_SPI_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000a3a:	f000 f9ed 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000200 	.word	0x20000200
 8000a48:	40003800 	.word	0x40003800

08000a4c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <MX_SPI4_Init+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a7c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_SPI4_Init+0x64>)
 8000a9e:	f005 fd79 	bl	8006594 <HAL_SPI_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000aa8:	f000 f9b6 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000258 	.word	0x20000258
 8000ab4:	40013400 	.word	0x40013400

08000ab8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_UART4_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_UART4_Init+0x4c>)
 8000af0:	f006 fc14 	bl	800731c <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f98d 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000370 	.word	0x20000370
 8000b08:	40004c00 	.word	0x40004c00

08000b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART3_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b44:	f006 fbea 	bl	800731c <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f963 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200003b4 	.word	0x200003b4
 8000b5c:	40004800 	.word	0x40004800

08000b60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_USART6_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b98:	f006 fbc0 	bl	800731c <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f000 f939 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200003f8 	.word	0x200003f8
 8000bb0:	40011400 	.word	0x40011400

08000bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_DMA_Init+0xa8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <MX_DMA_Init+0xa8>)
 8000bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_DMA_Init+0xa8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_DMA_Init+0xa8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <MX_DMA_Init+0xa8>)
 8000be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_DMA_Init+0xa8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	200d      	movs	r0, #13
 8000bf8:	f001 f803 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bfc:	200d      	movs	r0, #13
 8000bfe:	f001 f81c 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	200e      	movs	r0, #14
 8000c08:	f000 fffb 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c0c:	200e      	movs	r0, #14
 8000c0e:	f001 f814 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 fff3 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c1c:	200f      	movs	r0, #15
 8000c1e:	f001 f80c 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2011      	movs	r0, #17
 8000c28:	f000 ffeb 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c2c:	2011      	movs	r0, #17
 8000c2e:	f001 f804 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2039      	movs	r0, #57	; 0x39
 8000c38:	f000 ffe3 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c3c:	2039      	movs	r0, #57	; 0x39
 8000c3e:	f000 fffc 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	203a      	movs	r0, #58	; 0x3a
 8000c48:	f000 ffdb 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c4c:	203a      	movs	r0, #58	; 0x3a
 8000c4e:	f000 fff4 	bl	8001c3a <HAL_NVIC_EnableIRQ>

}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	4b62      	ldr	r3, [pc, #392]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a61      	ldr	r2, [pc, #388]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000c80:	f043 0310 	orr.w	r3, r3, #16
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b5f      	ldr	r3, [pc, #380]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	4b5b      	ldr	r3, [pc, #364]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a5a      	ldr	r2, [pc, #360]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b58      	ldr	r3, [pc, #352]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b54      	ldr	r3, [pc, #336]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a53      	ldr	r2, [pc, #332]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b51      	ldr	r3, [pc, #324]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a37      	ldr	r2, [pc, #220]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_GPIO_Init+0x1a4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d40:	4831      	ldr	r0, [pc, #196]	; (8000e08 <MX_GPIO_Init+0x1a8>)
 8000d42:	f002 fef1 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	4830      	ldr	r0, [pc, #192]	; (8000e0c <MX_GPIO_Init+0x1ac>)
 8000d4c:	f002 feec 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	482a      	ldr	r0, [pc, #168]	; (8000e10 <MX_GPIO_Init+0x1b0>)
 8000d68:	f002 fd32 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d6c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4820      	ldr	r0, [pc, #128]	; (8000e08 <MX_GPIO_Init+0x1a8>)
 8000d86:	f002 fd23 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481a      	ldr	r0, [pc, #104]	; (8000e0c <MX_GPIO_Init+0x1ac>)
 8000da2:	f002 fd15 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4814      	ldr	r0, [pc, #80]	; (8000e0c <MX_GPIO_Init+0x1ac>)
 8000dba:	f002 fd09 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dbe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <MX_GPIO_Init+0x1b4>)
 8000ddc:	f002 fcf8 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_GPIO_Init+0x1b4>)
 8000df6:	f002 fceb 	bl	80037d0 <HAL_GPIO_Init>

}
 8000dfa:	bf00      	nop
 8000dfc:	3730      	adds	r7, #48	; 0x30
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40021800 	.word	0x40021800
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020000 	.word	0x40020000

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a69      	ldr	r2, [pc, #420]	; (8001038 <HAL_I2C_MspInit+0x1c4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d163      	bne.n	8000f5e <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	4b68      	ldr	r3, [pc, #416]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a67      	ldr	r2, [pc, #412]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b65      	ldr	r3, [pc, #404]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb8:	2312      	movs	r3, #18
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	485c      	ldr	r0, [pc, #368]	; (8001040 <HAL_I2C_MspInit+0x1cc>)
 8000ed0:	f002 fc7e 	bl	80037d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	4b58      	ldr	r3, [pc, #352]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a57      	ldr	r2, [pc, #348]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000ede:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b55      	ldr	r3, [pc, #340]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000ef0:	4b54      	ldr	r3, [pc, #336]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000ef2:	4a55      	ldr	r2, [pc, #340]	; (8001048 <HAL_I2C_MspInit+0x1d4>)
 8000ef4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ef6:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efe:	4b51      	ldr	r3, [pc, #324]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f10:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f12:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f18:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2a:	4b46      	ldr	r3, [pc, #280]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f30:	4844      	ldr	r0, [pc, #272]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f32:	f000 fe9d 	bl	8001c70 <HAL_DMA_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000f3c:	f7ff ff6c 	bl	8000e18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a40      	ldr	r2, [pc, #256]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
 8000f46:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <HAL_I2C_MspInit+0x1d0>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	201f      	movs	r0, #31
 8000f52:	f000 fe56 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f56:	201f      	movs	r0, #31
 8000f58:	f000 fe6f 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f5c:	e067      	b.n	800102e <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a3a      	ldr	r2, [pc, #232]	; (800104c <HAL_I2C_MspInit+0x1d8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d162      	bne.n	800102e <HAL_I2C_MspInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a32      	ldr	r2, [pc, #200]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8a:	2312      	movs	r3, #18
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f96:	2304      	movs	r3, #4
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4827      	ldr	r0, [pc, #156]	; (8001040 <HAL_I2C_MspInit+0x1cc>)
 8000fa2:	f002 fc15 	bl	80037d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_I2C_MspInit+0x1c8>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000fc4:	4a23      	ldr	r2, [pc, #140]	; (8001054 <HAL_I2C_MspInit+0x1e0>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000fca:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000fce:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001002:	4813      	ldr	r0, [pc, #76]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8001004:	f000 fe34 	bl	8001c70 <HAL_DMA_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 800100e:	f7ff ff03 	bl	8000e18 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_I2C_MspInit+0x1dc>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2021      	movs	r0, #33	; 0x21
 8001024:	f000 fded 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001028:	2021      	movs	r0, #33	; 0x21
 800102a:	f000 fe06 	bl	8001c3a <HAL_NVIC_EnableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3730      	adds	r7, #48	; 0x30
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40005400 	.word	0x40005400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020400 	.word	0x40020400
 8001044:	20000140 	.word	0x20000140
 8001048:	400260a0 	.word	0x400260a0
 800104c:	40005800 	.word	0x40005800
 8001050:	200001a0 	.word	0x200001a0
 8001054:	40026040 	.word	0x40026040

08001058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08e      	sub	sp, #56	; 0x38
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a86      	ldr	r2, [pc, #536]	; (8001290 <HAL_SPI_MspInit+0x238>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f040 809f 	bne.w	80011ba <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
 8001080:	4b84      	ldr	r3, [pc, #528]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a83      	ldr	r2, [pc, #524]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b81      	ldr	r3, [pc, #516]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	623b      	str	r3, [r7, #32]
 8001096:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	4b7d      	ldr	r3, [pc, #500]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a7c      	ldr	r2, [pc, #496]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b7a      	ldr	r3, [pc, #488]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4a75      	ldr	r2, [pc, #468]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	6313      	str	r3, [r2, #48]	; 0x30
 80010c4:	4b73      	ldr	r3, [pc, #460]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a6e      	ldr	r2, [pc, #440]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
 80010e0:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ec:	230c      	movs	r3, #12
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010fc:	2305      	movs	r3, #5
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4864      	ldr	r0, [pc, #400]	; (8001298 <HAL_SPI_MspInit+0x240>)
 8001108:	f002 fb62 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111e:	2305      	movs	r3, #5
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	485c      	ldr	r0, [pc, #368]	; (800129c <HAL_SPI_MspInit+0x244>)
 800112a:	f002 fb51 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800112e:	2308      	movs	r3, #8
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800113e:	2305      	movs	r3, #5
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4855      	ldr	r0, [pc, #340]	; (80012a0 <HAL_SPI_MspInit+0x248>)
 800114a:	f002 fb41 	bl	80037d0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800114e:	4b55      	ldr	r3, [pc, #340]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 8001150:	4a55      	ldr	r2, [pc, #340]	; (80012a8 <HAL_SPI_MspInit+0x250>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b4f      	ldr	r3, [pc, #316]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 8001168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800118c:	4845      	ldr	r0, [pc, #276]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 800118e:	f000 fd6f 	bl	8001c70 <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 8001198:	f7ff fe3e 	bl	8000e18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a41      	ldr	r2, [pc, #260]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 80011a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80011a2:	4a40      	ldr	r2, [pc, #256]	; (80012a4 <HAL_SPI_MspInit+0x24c>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2024      	movs	r0, #36	; 0x24
 80011ae:	f000 fd28 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80011b2:	2024      	movs	r0, #36	; 0x24
 80011b4:	f000 fd41 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80011b8:	e066      	b.n	8001288 <HAL_SPI_MspInit+0x230>
  else if(hspi->Instance==SPI4)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a3b      	ldr	r2, [pc, #236]	; (80012ac <HAL_SPI_MspInit+0x254>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d161      	bne.n	8001288 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	4a31      	ldr	r2, [pc, #196]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80011ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011d2:	6453      	str	r3, [r2, #68]	; 0x44
 80011d4:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a2a      	ldr	r2, [pc, #168]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_SPI_MspInit+0x23c>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011fc:	2374      	movs	r3, #116	; 0x74
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800120c:	2305      	movs	r3, #5
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4826      	ldr	r0, [pc, #152]	; (80012b0 <HAL_SPI_MspInit+0x258>)
 8001218:	f002 fada 	bl	80037d0 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_SPI_MspInit+0x260>)
 8001220:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001228:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 800122c:	2240      	movs	r2, #64	; 0x40
 800122e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800125c:	4815      	ldr	r0, [pc, #84]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 800125e:	f000 fd07 	bl	8001c70 <HAL_DMA_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001268:	f7ff fdd6 	bl	8000e18 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001270:	649a      	str	r2, [r3, #72]	; 0x48
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_SPI_MspInit+0x25c>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2054      	movs	r0, #84	; 0x54
 800127e:	f000 fcc0 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001282:	2054      	movs	r0, #84	; 0x54
 8001284:	f000 fcd9 	bl	8001c3a <HAL_NVIC_EnableIRQ>
}
 8001288:	bf00      	nop
 800128a:	3738      	adds	r7, #56	; 0x38
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40003800 	.word	0x40003800
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	200002b0 	.word	0x200002b0
 80012a8:	40026058 	.word	0x40026058
 80012ac:	40013400 	.word	0x40013400
 80012b0:	40021000 	.word	0x40021000
 80012b4:	20000310 	.word	0x20000310
 80012b8:	40026428 	.word	0x40026428

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a82      	ldr	r2, [pc, #520]	; (80014e4 <HAL_UART_MspInit+0x228>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d163      	bne.n	80013a6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	4b81      	ldr	r3, [pc, #516]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a80      	ldr	r2, [pc, #512]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80012e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b7e      	ldr	r3, [pc, #504]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	4b7a      	ldr	r3, [pc, #488]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a79      	ldr	r2, [pc, #484]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b77      	ldr	r3, [pc, #476]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001316:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001328:	2308      	movs	r3, #8
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	486e      	ldr	r0, [pc, #440]	; (80014ec <HAL_UART_MspInit+0x230>)
 8001334:	f002 fa4c 	bl	80037d0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001338:	4b6d      	ldr	r3, [pc, #436]	; (80014f0 <HAL_UART_MspInit+0x234>)
 800133a:	4a6e      	ldr	r2, [pc, #440]	; (80014f4 <HAL_UART_MspInit+0x238>)
 800133c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800133e:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <HAL_UART_MspInit+0x234>)
 8001340:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001344:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001346:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <HAL_UART_MspInit+0x234>)
 8001348:	2240      	movs	r2, #64	; 0x40
 800134a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800134c:	4b68      	ldr	r3, [pc, #416]	; (80014f0 <HAL_UART_MspInit+0x234>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001352:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <HAL_UART_MspInit+0x234>)
 8001354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001358:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800135a:	4b65      	ldr	r3, [pc, #404]	; (80014f0 <HAL_UART_MspInit+0x234>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001360:	4b63      	ldr	r3, [pc, #396]	; (80014f0 <HAL_UART_MspInit+0x234>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001366:	4b62      	ldr	r3, [pc, #392]	; (80014f0 <HAL_UART_MspInit+0x234>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800136c:	4b60      	ldr	r3, [pc, #384]	; (80014f0 <HAL_UART_MspInit+0x234>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_UART_MspInit+0x234>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001378:	485d      	ldr	r0, [pc, #372]	; (80014f0 <HAL_UART_MspInit+0x234>)
 800137a:	f000 fc79 	bl	8001c70 <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001384:	f7ff fd48 	bl	8000e18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a59      	ldr	r2, [pc, #356]	; (80014f0 <HAL_UART_MspInit+0x234>)
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <HAL_UART_MspInit+0x234>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2034      	movs	r0, #52	; 0x34
 800139a:	f000 fc32 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800139e:	2034      	movs	r0, #52	; 0x34
 80013a0:	f000 fc4b 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013a4:	e099      	b.n	80014da <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a53      	ldr	r2, [pc, #332]	; (80014f8 <HAL_UART_MspInit+0x23c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d12d      	bne.n	800140c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80013ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013be:	6413      	str	r3, [r2, #64]	; 0x40
 80013c0:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a44      	ldr	r2, [pc, #272]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013fa:	2307      	movs	r3, #7
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	483d      	ldr	r0, [pc, #244]	; (80014fc <HAL_UART_MspInit+0x240>)
 8001406:	f002 f9e3 	bl	80037d0 <HAL_GPIO_Init>
}
 800140a:	e066      	b.n	80014da <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a3b      	ldr	r2, [pc, #236]	; (8001500 <HAL_UART_MspInit+0x244>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d161      	bne.n	80014da <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_UART_MspInit+0x22c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144e:	23c0      	movs	r3, #192	; 0xc0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800145e:	2308      	movs	r3, #8
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	4820      	ldr	r0, [pc, #128]	; (80014ec <HAL_UART_MspInit+0x230>)
 800146a:	f002 f9b1 	bl	80037d0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_UART_MspInit+0x248>)
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_UART_MspInit+0x24c>)
 8001472:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_UART_MspInit+0x248>)
 8001476:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800147a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_UART_MspInit+0x248>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_UART_MspInit+0x248>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_UART_MspInit+0x248>)
 800148a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_UART_MspInit+0x248>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_UART_MspInit+0x248>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_UART_MspInit+0x248>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_UART_MspInit+0x248>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_UART_MspInit+0x248>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80014ae:	4815      	ldr	r0, [pc, #84]	; (8001504 <HAL_UART_MspInit+0x248>)
 80014b0:	f000 fbde 	bl	8001c70 <HAL_DMA_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_UART_MspInit+0x202>
      Error_Handler();
 80014ba:	f7ff fcad 	bl	8000e18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_UART_MspInit+0x248>)
 80014c2:	639a      	str	r2, [r3, #56]	; 0x38
 80014c4:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_UART_MspInit+0x248>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2047      	movs	r0, #71	; 0x47
 80014d0:	f000 fb97 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014d4:	2047      	movs	r0, #71	; 0x47
 80014d6:	f000 fbb0 	bl	8001c3a <HAL_NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3738      	adds	r7, #56	; 0x38
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40004c00 	.word	0x40004c00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020800 	.word	0x40020800
 80014f0:	2000043c 	.word	0x2000043c
 80014f4:	40026070 	.word	0x40026070
 80014f8:	40004800 	.word	0x40004800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40011400 	.word	0x40011400
 8001504:	2000049c 	.word	0x2000049c
 8001508:	40026440 	.word	0x40026440

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 fa34 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <DMA1_Stream2_IRQHandler+0x10>)
 8001566:	f000 fd1b 	bl	8001fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200001a0 	.word	0x200001a0

08001574 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <DMA1_Stream3_IRQHandler+0x10>)
 800157a:	f000 fd11 	bl	8001fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200002b0 	.word	0x200002b0

08001588 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA1_Stream4_IRQHandler+0x10>)
 800158e:	f000 fd07 	bl	8001fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000043c 	.word	0x2000043c

0800159c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <DMA1_Stream6_IRQHandler+0x10>)
 80015a2:	f000 fcfd 	bl	8001fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000140 	.word	0x20000140

080015b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <I2C1_EV_IRQHandler+0x10>)
 80015b6:	f002 fe17 	bl	80041e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000098 	.word	0x20000098

080015c4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <I2C2_EV_IRQHandler+0x10>)
 80015ca:	f002 fe0d 	bl	80041e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000ec 	.word	0x200000ec

080015d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <SPI2_IRQHandler+0x10>)
 80015de:	f005 fae3 	bl	8006ba8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000200 	.word	0x20000200

080015ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <UART4_IRQHandler+0x10>)
 80015f2:	f006 f821 	bl	8007638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000370 	.word	0x20000370

08001600 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA2_Stream1_IRQHandler+0x10>)
 8001606:	f000 fccb 	bl	8001fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000310 	.word	0x20000310

08001614 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA2_Stream2_IRQHandler+0x10>)
 800161a:	f000 fcc1 	bl	8001fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000049c 	.word	0x2000049c

08001628 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <ETH_IRQHandler+0x10>)
 800162e:	f001 fb17 	bl	8002c60 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20003738 	.word	0x20003738

0800163c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <USART6_IRQHandler+0x10>)
 8001642:	f005 fff9 	bl	8007638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200003f8 	.word	0x200003f8

08001650 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <SPI4_IRQHandler+0x10>)
 8001656:	f005 faa7 	bl	8006ba8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000258 	.word	0x20000258

08001664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_kill>:

int _kill(int pid, int sig)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <_kill+0x20>)
 8001680:	2216      	movs	r2, #22
 8001682:	601a      	str	r2, [r3, #0]
	return -1;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	2000900c 	.word	0x2000900c

08001698 <_exit>:

void _exit (int status)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffe5 	bl	8001674 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016aa:	e7fe      	b.n	80016aa <_exit+0x12>

080016ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e00a      	b.n	80016d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016be:	f3af 8000 	nop.w
 80016c2:	4601      	mov	r1, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	b2ca      	uxtb	r2, r1
 80016cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf0      	blt.n	80016be <_read+0x12>
	}

return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e009      	b.n	800170c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf1      	blt.n	80016f8 <_write+0x12>
	}
	return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d205      	bcs.n	80017c4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <_sbrk+0x6c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20030000 	.word	0x20030000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	20000644 	.word	0x20000644
 80017f0:	20009020 	.word	0x20009020
 80017f4:	2000900c 	.word	0x2000900c

080017f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <SystemInit+0x20>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <SystemInit+0x20>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8001822:	f00f faed 	bl	8010e00 <udp_new>
 8001826:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 132);
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <udpServer_init+0x44>)
 800182a:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 50014);  // 7 is the server UDP port
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	f24c 325e 	movw	r2, #50014	; 0xc35e
 8001832:	4619      	mov	r1, r3
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f00f f963 	bl	8010b00 <udp_bind>
 800183a:	4603      	mov	r3, r0
 800183c:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 800183e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <udpServer_init+0x36>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8001846:	2200      	movs	r2, #0
 8001848:	4906      	ldr	r1, [pc, #24]	; (8001864 <udpServer_init+0x48>)
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f00f fa76 	bl	8010d3c <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8001850:	e002      	b.n	8001858 <udpServer_init+0x3c>
	   udp_remove(upcb);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f00f fa92 	bl	8010d7c <udp_remove>
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	8400a8c0 	.word	0x8400a8c0
 8001864:	08001869 	.word	0x08001869

08001868 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
	extern struct udp_pcb *udp_info;
	extern char mem[100];
	extern char received;
	extern int len;
	/* save data for later use */
	received = 1;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <udp_receive_callback+0x54>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
	len = p->len - 1;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	895b      	ldrh	r3, [r3, #10]
 8001880:	3b01      	subs	r3, #1
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <udp_receive_callback+0x58>)
 8001884:	6013      	str	r3, [r2, #0]
	udp_info = upcb;
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <udp_receive_callback+0x5c>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6013      	str	r3, [r2, #0]
	udp_info->remote_ip = *addr;
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <udp_receive_callback+0x5c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	605a      	str	r2, [r3, #4]
	udp_info->remote_port = port;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <udp_receive_callback+0x5c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	8b3a      	ldrh	r2, [r7, #24]
 800189c:	829a      	strh	r2, [r3, #20]

	/* save the data for later use */
	memcpy(mem,(char*)p->payload,p->len);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	895b      	ldrh	r3, [r3, #10]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4807      	ldr	r0, [pc, #28]	; (80018c8 <udp_receive_callback+0x60>)
 80018aa:	f011 fdeb 	bl	8013484 <memcpy>
	/* free p buffer */
	pbuf_free(p);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f008 ffa4 	bl	800a7fc <pbuf_free>
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000500 	.word	0x20000500
 80018c0:	2000063c 	.word	0x2000063c
 80018c4:	200004fc 	.word	0x200004fc
 80018c8:	20000568 	.word	0x20000568

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d0:	480d      	ldr	r0, [pc, #52]	; (8001908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d2:	490e      	ldr	r1, [pc, #56]	; (800190c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018e8:	4c0b      	ldr	r4, [pc, #44]	; (8001918 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018f6:	f7ff ff7f 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f011 fd8f 	bl	801341c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7fe feab 	bl	8000658 <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001904:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001910:	0801756c 	.word	0x0801756c
  ldr r2, =_sbss
 8001914:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001918:	2000901c 	.word	0x2000901c

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <HAL_Init+0x40>)
 800192a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_Init+0x40>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_Init+0x40>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f94f 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fa66 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f967 	bl	8001c56 <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f92f 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000004 	.word	0x20000004
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	20000008 	.word	0x20000008

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	20000648 	.word	0x20000648

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000648 	.word	0x20000648

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000000c 	.word	0x2000000c

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff29 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff3e 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff8e 	bl	8001b40 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5d 	bl	8001aec <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff31 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa2 	bl	8001ba8 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff feb6 	bl	80019ec <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e099      	b.n	8001dc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cac:	e00f      	b.n	8001cce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cae:	f7ff fe9d 	bl	80019ec <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d908      	bls.n	8001cce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e078      	b.n	8001dc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e8      	bne.n	8001cae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_DMA_Init+0x158>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4313      	orrs	r3, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f023 0307 	bic.w	r3, r3, #7
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d117      	bne.n	8001d92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00e      	beq.n	8001d92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fb1b 	bl	80023b0 <DMA_CheckFifoParam>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e016      	b.n	8001dc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fad2 	bl	8002344 <DMA_CalcBaseAndBitshift>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	223f      	movs	r2, #63	; 0x3f
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	f010803f 	.word	0xf010803f

08001dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_DMA_Start_IT+0x26>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e040      	b.n	8001e74 <HAL_DMA_Start_IT+0xa8>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d12f      	bne.n	8001e66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fa64 	bl	80022e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	223f      	movs	r2, #63	; 0x3f
 8001e26:	409a      	lsls	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0216 	orr.w	r2, r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0208 	orr.w	r2, r2, #8
 8001e52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e005      	b.n	8001e72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e8a:	f7ff fdaf 	bl	80019ec <HAL_GetTick>
 8001e8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e052      	b.n	8001f54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0216 	bic.w	r2, r2, #22
 8001ebc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ecc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <HAL_DMA_Abort+0x62>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0208 	bic.w	r2, r2, #8
 8001eec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efe:	e013      	b.n	8001f28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f00:	f7ff fd74 	bl	80019ec <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d90c      	bls.n	8001f28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e015      	b.n	8001f54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1e4      	bne.n	8001f00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	223f      	movs	r2, #63	; 0x3f
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d004      	beq.n	8001f7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00c      	b.n	8001f94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fac:	4b8e      	ldr	r3, [pc, #568]	; (80021e8 <HAL_DMA_IRQHandler+0x248>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a8e      	ldr	r2, [pc, #568]	; (80021ec <HAL_DMA_IRQHandler+0x24c>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0a9b      	lsrs	r3, r3, #10
 8001fb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	2208      	movs	r2, #8
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01a      	beq.n	800200c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0204 	bic.w	r2, r2, #4
 8001ff2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	2201      	movs	r2, #1
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	2201      	movs	r2, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f043 0202 	orr.w	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	2204      	movs	r2, #4
 8002048:	409a      	lsls	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d012      	beq.n	8002078 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	2204      	movs	r2, #4
 8002066:	409a      	lsls	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f043 0204 	orr.w	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2210      	movs	r2, #16
 800207e:	409a      	lsls	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d043      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d03c      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2210      	movs	r2, #16
 800209c:	409a      	lsls	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d018      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d108      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d024      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
 80020ce:	e01f      	b.n	8002110 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01b      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
 80020e0:	e016      	b.n	8002110 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0208 	bic.w	r2, r2, #8
 80020fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002114:	2220      	movs	r2, #32
 8002116:	409a      	lsls	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 808f 	beq.w	8002240 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8087 	beq.w	8002240 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	2220      	movs	r2, #32
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b05      	cmp	r3, #5
 8002148:	d136      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0216 	bic.w	r2, r2, #22
 8002158:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002168:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <HAL_DMA_IRQHandler+0x1da>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0208 	bic.w	r2, r2, #8
 8002188:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	223f      	movs	r2, #63	; 0x3f
 8002190:	409a      	lsls	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d07e      	beq.n	80022ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
        }
        return;
 80021b6:	e079      	b.n	80022ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01d      	beq.n	8002202 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10d      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d031      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
 80021e4:	e02c      	b.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
 80021e6:	bf00      	nop
 80021e8:	20000004 	.word	0x20000004
 80021ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d023      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
 8002200:	e01e      	b.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10f      	bne.n	8002230 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0210 	bic.w	r2, r2, #16
 800221e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	2b00      	cmp	r3, #0
 8002246:	d032      	beq.n	80022ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d022      	beq.n	800229a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2205      	movs	r2, #5
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3301      	adds	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	d307      	bcc.n	8002288 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f2      	bne.n	800226c <HAL_DMA_IRQHandler+0x2cc>
 8002286:	e000      	b.n	800228a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002288:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e000      	b.n	80022ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80022ac:	bf00      	nop
    }
  }
}
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c2:	b2db      	uxtb	r3, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002304:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	d108      	bne.n	8002328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002326:	e007      	b.n	8002338 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3b10      	subs	r3, #16
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800235e:	4a13      	ldr	r2, [pc, #76]	; (80023ac <DMA_CalcBaseAndBitshift+0x68>)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d909      	bls.n	8002386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	1d1a      	adds	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	659a      	str	r2, [r3, #88]	; 0x58
 8002384:	e007      	b.n	8002396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	aaaaaaab 	.word	0xaaaaaaab
 80023ac:	08017328 	.word	0x08017328

080023b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11f      	bne.n	800240a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d856      	bhi.n	800247e <DMA_CheckFifoParam+0xce>
 80023d0:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <DMA_CheckFifoParam+0x28>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	080023e9 	.word	0x080023e9
 80023dc:	080023fb 	.word	0x080023fb
 80023e0:	080023e9 	.word	0x080023e9
 80023e4:	0800247f 	.word	0x0800247f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d046      	beq.n	8002482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f8:	e043      	b.n	8002482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002402:	d140      	bne.n	8002486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002408:	e03d      	b.n	8002486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002412:	d121      	bne.n	8002458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d837      	bhi.n	800248a <DMA_CheckFifoParam+0xda>
 800241a:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <DMA_CheckFifoParam+0x70>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	08002431 	.word	0x08002431
 8002424:	08002437 	.word	0x08002437
 8002428:	08002431 	.word	0x08002431
 800242c:	08002449 	.word	0x08002449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      break;
 8002434:	e030      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d025      	beq.n	800248e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002446:	e022      	b.n	800248e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002450:	d11f      	bne.n	8002492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002456:	e01c      	b.n	8002492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d903      	bls.n	8002466 <DMA_CheckFifoParam+0xb6>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d003      	beq.n	800246c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002464:	e018      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
      break;
 800246a:	e015      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00e      	beq.n	8002496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e00b      	b.n	8002496 <DMA_CheckFifoParam+0xe6>
      break;
 800247e:	bf00      	nop
 8002480:	e00a      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e008      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
 8002488:	e006      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 800248a:	bf00      	nop
 800248c:	e004      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
 8002490:	e002      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;   
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
    }
  } 
  
  return status; 
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop

080024a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80024b8:	4ba1      	ldr	r3, [pc, #644]	; (8002740 <HAL_ETH_Init+0x298>)
 80024ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e182      	b.n	80027d4 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f006 fb2e 	bl	8008b44 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	4b95      	ldr	r3, [pc, #596]	; (8002744 <HAL_ETH_Init+0x29c>)
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	4a94      	ldr	r2, [pc, #592]	; (8002744 <HAL_ETH_Init+0x29c>)
 80024f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f6:	6453      	str	r3, [r2, #68]	; 0x44
 80024f8:	4b92      	ldr	r3, [pc, #584]	; (8002744 <HAL_ETH_Init+0x29c>)
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002504:	4b90      	ldr	r3, [pc, #576]	; (8002748 <HAL_ETH_Init+0x2a0>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a8f      	ldr	r2, [pc, #572]	; (8002748 <HAL_ETH_Init+0x2a0>)
 800250a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800250e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002510:	4b8d      	ldr	r3, [pc, #564]	; (8002748 <HAL_ETH_Init+0x2a0>)
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	498b      	ldr	r1, [pc, #556]	; (8002748 <HAL_ETH_Init+0x2a0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002534:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002536:	f7ff fa59 	bl	80019ec <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800253c:	e011      	b.n	8002562 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800253e:	f7ff fa55 	bl	80019ec <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800254c:	d909      	bls.n	8002562 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2203      	movs	r2, #3
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e138      	b.n	80027d4 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e4      	bne.n	800253e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f023 031c 	bic.w	r3, r3, #28
 8002582:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002584:	f003 ffd2 	bl	800652c <HAL_RCC_GetHCLKFreq>
 8002588:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4a6f      	ldr	r2, [pc, #444]	; (800274c <HAL_ETH_Init+0x2a4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d908      	bls.n	80025a4 <HAL_ETH_Init+0xfc>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4a6e      	ldr	r2, [pc, #440]	; (8002750 <HAL_ETH_Init+0x2a8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d804      	bhi.n	80025a4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f043 0308 	orr.w	r3, r3, #8
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e027      	b.n	80025f4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4a6a      	ldr	r2, [pc, #424]	; (8002750 <HAL_ETH_Init+0x2a8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d908      	bls.n	80025be <HAL_ETH_Init+0x116>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4a64      	ldr	r2, [pc, #400]	; (8002740 <HAL_ETH_Init+0x298>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d204      	bcs.n	80025be <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f043 030c 	orr.w	r3, r3, #12
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	e01a      	b.n	80025f4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4a5f      	ldr	r2, [pc, #380]	; (8002740 <HAL_ETH_Init+0x298>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d303      	bcc.n	80025ce <HAL_ETH_Init+0x126>
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4a62      	ldr	r2, [pc, #392]	; (8002754 <HAL_ETH_Init+0x2ac>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d911      	bls.n	80025f2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4a60      	ldr	r2, [pc, #384]	; (8002754 <HAL_ETH_Init+0x2ac>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d908      	bls.n	80025e8 <HAL_ETH_Init+0x140>
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4a5f      	ldr	r2, [pc, #380]	; (8002758 <HAL_ETH_Init+0x2b0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d804      	bhi.n	80025e8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e005      	b.n	80025f4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	e000      	b.n	80025f4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025f2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80025fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fc16 	bl	8002e34 <HAL_ETH_WritePHYRegister>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002612:	6939      	ldr	r1, [r7, #16]
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fdcb 	bl	80031b0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0d6      	b.n	80027d4 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002626:	20ff      	movs	r0, #255	; 0xff
 8002628:	f7ff f9ec 	bl	8001a04 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a4 	beq.w	800277e <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002636:	f7ff f9d9 	bl	80019ec <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	461a      	mov	r2, r3
 8002642:	2101      	movs	r1, #1
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fb8d 	bl	8002d64 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800264a:	f7ff f9cf 	bl	80019ec <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d90f      	bls.n	800267c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002660:	6939      	ldr	r1, [r7, #16]
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fda4 	bl	80031b0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0ab      	b.n	80027d4 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0da      	beq.n	800263c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800268a:	2100      	movs	r1, #0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fbd1 	bl	8002e34 <HAL_ETH_WritePHYRegister>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800269c:	6939      	ldr	r1, [r7, #16]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fd86 	bl	80031b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80026ac:	2301      	movs	r3, #1
 80026ae:	e091      	b.n	80027d4 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80026b0:	f7ff f99c 	bl	80019ec <HAL_GetTick>
 80026b4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	461a      	mov	r2, r3
 80026bc:	2101      	movs	r1, #1
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fb50 	bl	8002d64 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80026c4:	f7ff f992 	bl	80019ec <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d90f      	bls.n	80026f6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026da:	6939      	ldr	r1, [r7, #16]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fd67 	bl	80031b0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e06e      	b.n	80027d4 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0da      	beq.n	80026b6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	461a      	mov	r2, r3
 8002706:	2110      	movs	r1, #16
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fb2b 	bl	8002d64 <HAL_ETH_ReadPHYRegister>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002718:	6939      	ldr	r1, [r7, #16]
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fd48 	bl	80031b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002728:	2301      	movs	r3, #1
 800272a:	e053      	b.n	80027d4 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d012      	beq.n	800275c <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	e010      	b.n	8002762 <HAL_ETH_Init+0x2ba>
 8002740:	03938700 	.word	0x03938700
 8002744:	40023800 	.word	0x40023800
 8002748:	40013800 	.word	0x40013800
 800274c:	01312cff 	.word	0x01312cff
 8002750:	02160ebf 	.word	0x02160ebf
 8002754:	05f5e0ff 	.word	0x05f5e0ff
 8002758:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	e026      	b.n	80027c2 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	e021      	b.n	80027c2 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800278e:	4313      	orrs	r3, r2
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	2100      	movs	r1, #0
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fb4c 	bl	8002e34 <HAL_ETH_WritePHYRegister>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027a6:	6939      	ldr	r1, [r7, #16]
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fd01 	bl	80031b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00c      	b.n	80027d4 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80027ba:	f640 70ff 	movw	r0, #4095	; 0xfff
 80027be:	f7ff f921 	bl	8001a04 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80027c2:	6939      	ldr	r1, [r7, #16]
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fcf3 	bl	80031b0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_ETH_DMATxDescListInit+0x20>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e051      	b.n	80028a0 <HAL_ETH_DMATxDescListInit+0xc4>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e030      	b.n	800287a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015b      	lsls	r3, r3, #5
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	4413      	add	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002828:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	461a      	mov	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	3b01      	subs	r3, #1
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d208      	bcs.n	800286e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	015b      	lsls	r3, r3, #5
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	4413      	add	r3, r2
 8002866:	461a      	mov	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	e002      	b.n	8002874 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3301      	adds	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d3ca      	bcc.n	8002818 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800288c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_ETH_DMARxDescListInit+0x20>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e055      	b.n	8002978 <HAL_ETH_DMARxDescListInit+0xcc>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e034      	b.n	8002952 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	4413      	add	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028f8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002900:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	461a      	mov	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	3b01      	subs	r3, #1
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	d208      	bcs.n	8002946 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3301      	adds	r3, #1
 8002938:	015b      	lsls	r3, r3, #5
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	4413      	add	r3, r2
 800293e:	461a      	mov	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	e002      	b.n	800294c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3c6      	bcc.n	80028e8 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002964:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_ETH_TransmitFrame+0x24>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e0cc      	b.n	8002b42 <HAL_ETH_TransmitFrame+0x1be>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0b7      	b.n	8002b42 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da09      	bge.n	80029f0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2212      	movs	r2, #18
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0a8      	b.n	8002b42 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d915      	bls.n	8002a26 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_ETH_TransmitFrame+0x1cc>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a9b      	lsrs	r3, r3, #10
 8002a04:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a0e:	0a9b      	lsrs	r3, r3, #10
 8002a10:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e001      	b.n	8002a2a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002a26:	2301      	movs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d11c      	bne.n	8002a6a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002a3e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a4a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a5a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	461a      	mov	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a68:	e04b      	b.n	8002b02 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e044      	b.n	8002afa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a7e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a94:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a9e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d116      	bne.n	8002ad8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ab8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <HAL_ETH_TransmitFrame+0x1d0>)
 8002abe:	fb03 f202 	mul.w	r2, r3, r2
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002aca:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002ad6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ae6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	461a      	mov	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	3301      	adds	r3, #1
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3b6      	bcc.n	8002a70 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2304      	movs	r3, #4
 8002b20:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	ac02b00b 	.word	0xac02b00b
 8002b54:	fffffa0c 	.word	0xfffffa0c

08002b58 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ETH_GetReceivedFrame+0x1a>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e070      	b.n	8002c54 <HAL_ETH_GetReceivedFrame+0xfc>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db5a      	blt.n	8002c42 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d030      	beq.n	8002bfc <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d103      	bne.n	8002bb4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002bc8:	3b04      	subs	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	461a      	mov	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e02b      	b.n	8002c54 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d010      	beq.n	8002c2c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	461a      	mov	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
 8002c2a:	e00a      	b.n	8002c42 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d112      	bne.n	8002ca0 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f85e 	bl	8002d3c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2340      	movs	r3, #64	; 0x40
 8002c8c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c9e:	e01a      	b.n	8002cd6 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d111      	bne.n	8002cd6 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f838 	bl	8002d28 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce4:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf8:	d112      	bne.n	8002d20 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f828 	bl	8002d50 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0e:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b82      	cmp	r3, #130	; 0x82
 8002d84:	d101      	bne.n	8002d8a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
 8002d88:	e050      	b.n	8002e2c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2282      	movs	r2, #130	; 0x82
 8002d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 031c 	and.w	r3, r3, #28
 8002da0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8a1b      	ldrh	r3, [r3, #16]
 8002da6:	02db      	lsls	r3, r3, #11
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002db0:	897b      	ldrh	r3, [r7, #10]
 8002db2:	019b      	lsls	r3, r3, #6
 8002db4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 0302 	bic.w	r3, r3, #2
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd6:	f7fe fe09 	bl	80019ec <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ddc:	e015      	b.n	8002e0a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002dde:	f7fe fe05 	bl	80019ec <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d309      	bcc.n	8002e02 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e014      	b.n	8002e2c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e4      	bne.n	8002dde <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b42      	cmp	r3, #66	; 0x42
 8002e54:	d101      	bne.n	8002e5a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	e04e      	b.n	8002ef8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2242      	movs	r2, #66	; 0x42
 8002e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f003 031c 	and.w	r3, r3, #28
 8002e70:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8a1b      	ldrh	r3, [r3, #16]
 8002e76:	02db      	lsls	r3, r3, #11
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002e80:	897b      	ldrh	r3, [r7, #10]
 8002e82:	019b      	lsls	r3, r3, #6
 8002e84:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb0:	f7fe fd9c 	bl	80019ec <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002eb6:	e015      	b.n	8002ee4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002eb8:	f7fe fd98 	bl	80019ec <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d309      	bcc.n	8002edc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e00d      	b.n	8002ef8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e4      	bne.n	8002eb8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_ETH_Start+0x16>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e01f      	b.n	8002f56 <HAL_ETH_Start+0x56>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fb40 	bl	80035ac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fb77 	bl	8003620 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fc06 	bl	8003744 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fbab 	bl	8003694 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fbd4 	bl	80036ec <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_ETH_Stop+0x16>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e01f      	b.n	8002fb4 <HAL_ETH_Stop+0x56>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fb9b 	bl	80036c0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fbc4 	bl	8003718 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb62 	bl	800365a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fbd4 	bl	8003744 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb22 	bl	80035e6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ETH_ConfigMAC+0x1c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0e4      	b.n	80031a2 <HAL_ETH_ConfigMAC+0x1e6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80b1 	beq.w	8003152 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_ETH_ConfigMAC+0x1f0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003008:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800300e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003014:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800301a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003020:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003026:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800302c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003032:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003038:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800303e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003044:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800304a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003062:	2001      	movs	r0, #1
 8003064:	f7fe fcce 	bl	8001a04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003078:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800307e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003084:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800308a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003090:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003096:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80030a2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80030a4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ae:	2001      	movs	r0, #1
 80030b0:	f7fe fca8 	bl	8001a04 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030c4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030ce:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80030de:	4013      	ands	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030ec:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80030f2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80030f8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80030fe:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003104:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800311c:	2001      	movs	r0, #1
 800311e:	f7fe fc71 	bl	8001a04 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003142:	2001      	movs	r0, #1
 8003144:	f7fe fc5e 	bl	8001a04 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	61da      	str	r2, [r3, #28]
 8003150:	e01e      	b.n	8003190 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003160:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003182:	2001      	movs	r0, #1
 8003184:	f7fe fc3e 	bl	8001a04 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	ff20810f 	.word	0xff20810f

080031b0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0b0      	sub	sp, #192	; 0xc0
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031cc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80031da:	2300      	movs	r3, #0
 80031dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80031de:	2300      	movs	r3, #0
 80031e0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80031f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031fa:	663b      	str	r3, [r7, #96]	; 0x60
 80031fc:	e001      	b.n	8003202 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80031fe:	2300      	movs	r3, #0
 8003200:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003206:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800320c:	2300      	movs	r3, #0
 800320e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800321c:	2340      	movs	r3, #64	; 0x40
 800321e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003274:	2300      	movs	r3, #0
 8003276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003284:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003288:	4baa      	ldr	r3, [pc, #680]	; (8003534 <ETH_MACDMAConfig+0x384>)
 800328a:	4013      	ands	r3, r2
 800328c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003290:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003294:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003298:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800329a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800329c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80032a2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80032a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80032a6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80032a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80032aa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80032b0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80032b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80032b4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80032b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80032b8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80032ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80032bc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80032be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80032c0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80032c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80032c4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80032c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7fe fb8d 	bl	8001a04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032f2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80032f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032f8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80032fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80032fc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80032fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003302:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003308:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800330a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800330e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003314:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003318:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003320:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003322:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800332e:	2001      	movs	r0, #1
 8003330:	f7fe fb68 	bl	8001a04 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800333c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003346:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003350:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800335c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003360:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003364:	4013      	ands	r3, r2
 8003366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800336a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800336e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003374:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800337a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800337c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003380:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003386:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800338c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800338e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033a0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f7fe fb29 	bl	8001a04 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033ba:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033bc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80033c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f7fe fb14 	bl	8001a04 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033e4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80033ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ee:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80033f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033f8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800340a:	2304      	movs	r3, #4
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800340e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003418:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800341a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800341e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800342a:	2300      	movs	r3, #0
 800342c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800342e:	2300      	movs	r3, #0
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003440:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003444:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <ETH_MACDMAConfig+0x388>)
 8003446:	4013      	ands	r3, r2
 8003448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800344c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800344e:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003450:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003452:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003454:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003456:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003458:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800345a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800345c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800345e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003460:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003462:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003464:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003468:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800346c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800346e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003480:	461a      	mov	r2, r3
 8003482:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003486:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003496:	2001      	movs	r0, #1
 8003498:	f7fe fab4 	bl	8001a04 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a4:	461a      	mov	r2, r3
 80034a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034aa:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034b0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80034b4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034b8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80034bc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80034be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80034c2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80034c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80034c6:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034d4:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e4:	2001      	movs	r0, #1
 80034e6:	f7fe fa8d 	bl	8001a04 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f2:	461a      	mov	r2, r3
 80034f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034f8:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d10d      	bne.n	800351e <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003518:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800351c:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	461a      	mov	r2, r3
 8003524:	2100      	movs	r1, #0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f808 	bl	800353c <ETH_MACAddressConfig>
}
 800352c:	bf00      	nop
 800352e:	37c0      	adds	r7, #192	; 0xc0
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	ff20810f 	.word	0xff20810f
 8003538:	f8de3f23 	.word	0xf8de3f23

0800353c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3305      	adds	r3, #5
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	3204      	adds	r2, #4
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <ETH_MACAddressConfig+0x68>)
 800355e:	4413      	add	r3, r2
 8003560:	461a      	mov	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3303      	adds	r3, #3
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	061a      	lsls	r2, r3, #24
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3302      	adds	r3, #2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3301      	adds	r3, #1
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	4313      	orrs	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <ETH_MACAddressConfig+0x6c>)
 800358e:	4413      	add	r3, r2
 8003590:	461a      	mov	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6013      	str	r3, [r2, #0]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40028040 	.word	0x40028040
 80035a8:	40028044 	.word	0x40028044

080035ac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035d0:	2001      	movs	r0, #1
 80035d2:	f000 f8dd 	bl	8003790 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0208 	bic.w	r2, r2, #8
 8003600:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800360a:	2001      	movs	r0, #1
 800360c:	f000 f8c0 	bl	8003790 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0204 	orr.w	r2, r2, #4
 800363a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003644:	2001      	movs	r0, #1
 8003646:	f000 f8a3 	bl	8003790 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0204 	bic.w	r2, r2, #4
 8003674:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800367e:	2001      	movs	r0, #1
 8003680:	f000 f886 	bl	8003790 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036b2:	6193      	str	r3, [r2, #24]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036de:	6193      	str	r3, [r2, #24]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800370a:	6193      	str	r3, [r2, #24]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	f023 0302 	bic.w	r3, r3, #2
 8003732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003736:	6193      	str	r3, [r2, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003766:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003774:	2001      	movs	r0, #1
 8003776:	f000 f80b 	bl	8003790 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003784:	6193      	str	r3, [r2, #24]
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <ETH_Delay+0x38>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <ETH_Delay+0x3c>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	0a5b      	lsrs	r3, r3, #9
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80037ac:	bf00      	nop
  } 
  while (Delay --);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	60fa      	str	r2, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f9      	bne.n	80037ac <ETH_Delay+0x1c>
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000004 	.word	0x20000004
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	e177      	b.n	8003adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037ec:	2201      	movs	r2, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	f040 8166 	bne.w	8003ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d005      	beq.n	8003822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381e:	2b02      	cmp	r3, #2
 8003820:	d130      	bne.n	8003884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003858:	2201      	movs	r2, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 0201 	and.w	r2, r3, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b03      	cmp	r3, #3
 800388e:	d017      	beq.n	80038c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d123      	bne.n	8003914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3208      	adds	r2, #8
 80038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	220f      	movs	r2, #15
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	08da      	lsrs	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	69b9      	ldr	r1, [r7, #24]
 8003910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0203 	and.w	r2, r3, #3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80c0 	beq.w	8003ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_GPIO_Init+0x324>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_GPIO_Init+0x324>)
 8003960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003964:	6453      	str	r3, [r2, #68]	; 0x44
 8003966:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_GPIO_Init+0x324>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003972:	4a61      	ldr	r2, [pc, #388]	; (8003af8 <HAL_GPIO_Init+0x328>)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	3302      	adds	r3, #2
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	220f      	movs	r2, #15
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a58      	ldr	r2, [pc, #352]	; (8003afc <HAL_GPIO_Init+0x32c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d037      	beq.n	8003a0e <HAL_GPIO_Init+0x23e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a57      	ldr	r2, [pc, #348]	; (8003b00 <HAL_GPIO_Init+0x330>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d031      	beq.n	8003a0a <HAL_GPIO_Init+0x23a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a56      	ldr	r2, [pc, #344]	; (8003b04 <HAL_GPIO_Init+0x334>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02b      	beq.n	8003a06 <HAL_GPIO_Init+0x236>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a55      	ldr	r2, [pc, #340]	; (8003b08 <HAL_GPIO_Init+0x338>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d025      	beq.n	8003a02 <HAL_GPIO_Init+0x232>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a54      	ldr	r2, [pc, #336]	; (8003b0c <HAL_GPIO_Init+0x33c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01f      	beq.n	80039fe <HAL_GPIO_Init+0x22e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a53      	ldr	r2, [pc, #332]	; (8003b10 <HAL_GPIO_Init+0x340>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d019      	beq.n	80039fa <HAL_GPIO_Init+0x22a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_GPIO_Init+0x344>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_GPIO_Init+0x226>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a51      	ldr	r2, [pc, #324]	; (8003b18 <HAL_GPIO_Init+0x348>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00d      	beq.n	80039f2 <HAL_GPIO_Init+0x222>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a50      	ldr	r2, [pc, #320]	; (8003b1c <HAL_GPIO_Init+0x34c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <HAL_GPIO_Init+0x21e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4f      	ldr	r2, [pc, #316]	; (8003b20 <HAL_GPIO_Init+0x350>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_GPIO_Init+0x21a>
 80039e6:	2309      	movs	r3, #9
 80039e8:	e012      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039ea:	230a      	movs	r3, #10
 80039ec:	e010      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039ee:	2308      	movs	r3, #8
 80039f0:	e00e      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e00c      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039f6:	2306      	movs	r3, #6
 80039f8:	e00a      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039fa:	2305      	movs	r3, #5
 80039fc:	e008      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039fe:	2304      	movs	r3, #4
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a02:	2303      	movs	r3, #3
 8003a04:	e004      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	f002 0203 	and.w	r2, r2, #3
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a20:	4935      	ldr	r1, [pc, #212]	; (8003af8 <HAL_GPIO_Init+0x328>)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a52:	4a34      	ldr	r2, [pc, #208]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a7c:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a82:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa6:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	f67f ae84 	bls.w	80037ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40013800 	.word	0x40013800
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40020400 	.word	0x40020400
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020c00 	.word	0x40020c00
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40021400 	.word	0x40021400
 8003b14:	40021800 	.word	0x40021800
 8003b18:	40021c00 	.word	0x40021c00
 8003b1c:	40022000 	.word	0x40022000
 8003b20:	40022400 	.word	0x40022400
 8003b24:	40013c00 	.word	0x40013c00

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e12b      	b.n	8003dc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd f976 	bl	8000e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f002 fcc0 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4a81      	ldr	r2, [pc, #516]	; (8003dd0 <HAL_I2C_Init+0x274>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d807      	bhi.n	8003be0 <HAL_I2C_Init+0x84>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a80      	ldr	r2, [pc, #512]	; (8003dd4 <HAL_I2C_Init+0x278>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bf94      	ite	ls
 8003bd8:	2301      	movls	r3, #1
 8003bda:	2300      	movhi	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e006      	b.n	8003bee <HAL_I2C_Init+0x92>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a7d      	ldr	r2, [pc, #500]	; (8003dd8 <HAL_I2C_Init+0x27c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0e7      	b.n	8003dc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a78      	ldr	r2, [pc, #480]	; (8003ddc <HAL_I2C_Init+0x280>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	0c9b      	lsrs	r3, r3, #18
 8003c00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a6a      	ldr	r2, [pc, #424]	; (8003dd0 <HAL_I2C_Init+0x274>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d802      	bhi.n	8003c30 <HAL_I2C_Init+0xd4>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	e009      	b.n	8003c44 <HAL_I2C_Init+0xe8>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	4a69      	ldr	r2, [pc, #420]	; (8003de0 <HAL_I2C_Init+0x284>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	3301      	adds	r3, #1
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	495c      	ldr	r1, [pc, #368]	; (8003dd0 <HAL_I2C_Init+0x274>)
 8003c60:	428b      	cmp	r3, r1
 8003c62:	d819      	bhi.n	8003c98 <HAL_I2C_Init+0x13c>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e59      	subs	r1, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c78:	400b      	ands	r3, r1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_I2C_Init+0x138>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1e59      	subs	r1, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c92:	e051      	b.n	8003d38 <HAL_I2C_Init+0x1dc>
 8003c94:	2304      	movs	r3, #4
 8003c96:	e04f      	b.n	8003d38 <HAL_I2C_Init+0x1dc>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d111      	bne.n	8003cc4 <HAL_I2C_Init+0x168>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1e58      	subs	r0, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	440b      	add	r3, r1
 8003cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e012      	b.n	8003cea <HAL_I2C_Init+0x18e>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e58      	subs	r0, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	0099      	lsls	r1, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_I2C_Init+0x196>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e022      	b.n	8003d38 <HAL_I2C_Init+0x1dc>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10e      	bne.n	8003d18 <HAL_I2C_Init+0x1bc>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1e58      	subs	r0, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	440b      	add	r3, r1
 8003d08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d16:	e00f      	b.n	8003d38 <HAL_I2C_Init+0x1dc>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1e58      	subs	r0, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	0099      	lsls	r1, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	6809      	ldr	r1, [r1, #0]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6911      	ldr	r1, [r2, #16]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68d2      	ldr	r2, [r2, #12]
 8003d72:	4311      	orrs	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	000186a0 	.word	0x000186a0
 8003dd4:	001e847f 	.word	0x001e847f
 8003dd8:	003d08ff 	.word	0x003d08ff
 8003ddc:	431bde83 	.word	0x431bde83
 8003de0:	10624dd3 	.word	0x10624dd3

08003de4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	460b      	mov	r3, r1
 8003df2:	817b      	strh	r3, [r7, #10]
 8003df4:	4613      	mov	r3, r2
 8003df6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	f040 810d 	bne.w	8004024 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e0a:	4b89      	ldr	r3, [pc, #548]	; (8004030 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	4a88      	ldr	r2, [pc, #544]	; (8004034 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a1a      	lsrs	r2, r3, #8
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009a      	lsls	r2, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d116      	bne.n	8003e5e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e0e3      	b.n	8004026 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d0db      	beq.n	8003e24 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_I2C_Master_Transmit_DMA+0x96>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e0d5      	b.n	8004026 <HAL_I2C_Master_Transmit_DMA+0x242>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d007      	beq.n	8003ea0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2221      	movs	r2, #33	; 0x21
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2210      	movs	r2, #16
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	893a      	ldrh	r2, [r7, #8]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a56      	ldr	r2, [pc, #344]	; (8004038 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003ee2:	897a      	ldrh	r2, [r7, #10]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d07b      	beq.n	8003fe8 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d02a      	beq.n	8003f4e <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	4a4f      	ldr	r2, [pc, #316]	; (800403c <HAL_I2C_Master_Transmit_DMA+0x258>)
 8003efe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	4a4e      	ldr	r2, [pc, #312]	; (8004040 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8003f06:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	2200      	movs	r2, #0
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	2200      	movs	r2, #0
 8003f26:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	4619      	mov	r1, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3310      	adds	r3, #16
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	f7fd ff45 	bl	8001dcc <HAL_DMA_Start_IT>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d139      	bne.n	8003fc0 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8003f4c:	e013      	b.n	8003f76 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e057      	b.n	8004026 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f8c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e02f      	b.n	8004020 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	f043 0210 	orr.w	r2, r3, #16
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e01e      	b.n	8004026 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004006:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800401e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000004 	.word	0x20000004
 8004034:	14f8b589 	.word	0x14f8b589
 8004038:	ffff0000 	.word	0xffff0000
 800403c:	08005761 	.word	0x08005761
 8004040:	0800590b 	.word	0x0800590b

08004044 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b20      	cmp	r3, #32
 800405c:	f040 80b8 	bne.w	80041d0 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_I2C_Slave_Receive_DMA+0x28>
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0b0      	b.n	80041d2 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_I2C_Slave_Receive_DMA+0x3a>
 800407a:	2302      	movs	r3, #2
 800407c:	e0a9      	b.n	80041d2 <HAL_I2C_Slave_Receive_DMA+0x18e>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d007      	beq.n	80040a4 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2222      	movs	r2, #34	; 0x22
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a3e      	ldr	r2, [pc, #248]	; (80041dc <HAL_I2C_Slave_Receive_DMA+0x198>)
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d02a      	beq.n	8004144 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	4a3b      	ldr	r2, [pc, #236]	; (80041e0 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 80040f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	4a3a      	ldr	r2, [pc, #232]	; (80041e4 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 80040fc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	2200      	movs	r2, #0
 800410c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	2200      	movs	r2, #0
 8004114:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	2200      	movs	r2, #0
 800411c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3310      	adds	r3, #16
 8004128:	4619      	mov	r1, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	f7fd fe4a 	bl	8001dcc <HAL_DMA_Start_IT>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d132      	bne.n	80041a8 <HAL_I2C_Slave_Receive_DMA+0x164>
 8004142:	e013      	b.n	800416c <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2228      	movs	r2, #40	; 0x28
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e032      	b.n	80041d2 <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800417a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004192:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a2:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e014      	b.n	80041d2 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f043 0210 	orr.w	r2, r3, #16
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	ffff0000 	.word	0xffff0000
 80041e0:	08005761 	.word	0x08005761
 80041e4:	0800590b 	.word	0x0800590b

080041e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004208:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b10      	cmp	r3, #16
 8004216:	d003      	beq.n	8004220 <HAL_I2C_EV_IRQHandler+0x38>
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	f040 80c1 	bne.w	80043a2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <HAL_I2C_EV_IRQHandler+0x6e>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004240:	d003      	beq.n	800424a <HAL_I2C_EV_IRQHandler+0x62>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004248:	d101      	bne.n	800424e <HAL_I2C_EV_IRQHandler+0x66>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_I2C_EV_IRQHandler+0x68>
 800424e:	2300      	movs	r3, #0
 8004250:	2b01      	cmp	r3, #1
 8004252:	f000 8132 	beq.w	80044ba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00c      	beq.n	800427a <HAL_I2C_EV_IRQHandler+0x92>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	0a5b      	lsrs	r3, r3, #9
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d006      	beq.n	800427a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f001 fc63 	bl	8005b38 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fcc8 	bl	8004c08 <I2C_Master_SB>
 8004278:	e092      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	08db      	lsrs	r3, r3, #3
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <HAL_I2C_EV_IRQHandler+0xb2>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	0a5b      	lsrs	r3, r3, #9
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fd3e 	bl	8004d14 <I2C_Master_ADD10>
 8004298:	e082      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_I2C_EV_IRQHandler+0xd2>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	0a5b      	lsrs	r3, r3, #9
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fd58 	bl	8004d68 <I2C_Master_ADDR>
 80042b8:	e072      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d03b      	beq.n	800433e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d4:	f000 80f3 	beq.w	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	09db      	lsrs	r3, r3, #7
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <HAL_I2C_EV_IRQHandler+0x11c>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	0a9b      	lsrs	r3, r3, #10
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HAL_I2C_EV_IRQHandler+0x11c>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f942 	bl	8004586 <I2C_MasterTransmit_TXE>
 8004302:	e04d      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80d6 	beq.w	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	0a5b      	lsrs	r3, r3, #9
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80cf 	beq.w	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004320:	7bbb      	ldrb	r3, [r7, #14]
 8004322:	2b21      	cmp	r3, #33	; 0x21
 8004324:	d103      	bne.n	800432e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f9c9 	bl	80046be <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800432c:	e0c7      	b.n	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	f040 80c4 	bne.w	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa37 	bl	80047aa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800433c:	e0bf      	b.n	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434c:	f000 80b7 	beq.w	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00f      	beq.n	800437c <HAL_I2C_EV_IRQHandler+0x194>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	0a9b      	lsrs	r3, r3, #10
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <HAL_I2C_EV_IRQHandler+0x194>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 faac 	bl	80048d2 <I2C_MasterReceive_RXNE>
 800437a:	e011      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 809a 	beq.w	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	0a5b      	lsrs	r3, r3, #9
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8093 	beq.w	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fb4b 	bl	8004a34 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800439e:	e08e      	b.n	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
 80043a0:	e08d      	b.n	80044be <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e007      	b.n	80043c4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0x20e>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	0a5b      	lsrs	r3, r3, #9
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00c      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80043ec:	69b9      	ldr	r1, [r7, #24]
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ff09 	bl	8005206 <I2C_Slave_ADDR>
 80043f4:	e066      	b.n	80044c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_I2C_EV_IRQHandler+0x22e>
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	0a5b      	lsrs	r3, r3, #9
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 ff44 	bl	800529c <I2C_Slave_STOPF>
 8004414:	e056      	b.n	80044c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004416:	7bbb      	ldrb	r3, [r7, #14]
 8004418:	2b21      	cmp	r3, #33	; 0x21
 800441a:	d002      	beq.n	8004422 <HAL_I2C_EV_IRQHandler+0x23a>
 800441c:	7bbb      	ldrb	r3, [r7, #14]
 800441e:	2b29      	cmp	r3, #41	; 0x29
 8004420:	d125      	bne.n	800446e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	09db      	lsrs	r3, r3, #7
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00f      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x266>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	0a9b      	lsrs	r3, r3, #10
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x266>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fe1f 	bl	800508a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800444c:	e039      	b.n	80044c2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	089b      	lsrs	r3, r3, #2
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d033      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0x2da>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	0a5b      	lsrs	r3, r3, #9
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02d      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fe4c 	bl	8005104 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800446c:	e029      	b.n	80044c2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00f      	beq.n	800449a <HAL_I2C_EV_IRQHandler+0x2b2>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	0a9b      	lsrs	r3, r3, #10
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	089b      	lsrs	r3, r3, #2
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fe57 	bl	8005146 <I2C_SlaveReceive_RXNE>
 8004498:	e014      	b.n	80044c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00e      	beq.n	80044c4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	0a5b      	lsrs	r3, r3, #9
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fe85 	bl	80051c2 <I2C_SlaveReceive_BTF>
 80044b8:	e004      	b.n	80044c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80044ba:	bf00      	nop
 80044bc:	e002      	b.n	80044c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	70fb      	strb	r3, [r7, #3]
 8004512:	4613      	mov	r3, r2
 8004514:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d150      	bne.n	800464e <I2C_MasterTransmit_TXE+0xc8>
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b21      	cmp	r3, #33	; 0x21
 80045b0:	d14d      	bne.n	800464e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d01d      	beq.n	80045f4 <I2C_MasterTransmit_TXE+0x6e>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d01a      	beq.n	80045f4 <I2C_MasterTransmit_TXE+0x6e>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045c4:	d016      	beq.n	80045f4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045d4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2211      	movs	r2, #17
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff ff6c 	bl	80044ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045f2:	e060      	b.n	80046b6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004602:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004612:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d107      	bne.n	800463e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff ff7d 	bl	8004536 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800463c:	e03b      	b.n	80046b6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff ff3f 	bl	80044ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800464c:	e033      	b.n	80046b6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b21      	cmp	r3, #33	; 0x21
 8004652:	d005      	beq.n	8004660 <I2C_MasterTransmit_TXE+0xda>
 8004654:	7bbb      	ldrb	r3, [r7, #14]
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d12d      	bne.n	80046b6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b22      	cmp	r3, #34	; 0x22
 800465e:	d12a      	bne.n	80046b6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004678:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800467a:	e01c      	b.n	80046b6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d103      	bne.n	8004690 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f88e 	bl	80047aa <I2C_MemoryTransmit_TXE_BTF>
}
 800468e:	e012      	b.n	80046b6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046b4:	e7ff      	b.n	80046b6 <I2C_MasterTransmit_TXE+0x130>
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b21      	cmp	r3, #33	; 0x21
 80046d6:	d164      	bne.n	80047a2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	781a      	ldrb	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004706:	e04c      	b.n	80047a2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b08      	cmp	r3, #8
 800470c:	d01d      	beq.n	800474a <I2C_MasterTransmit_BTF+0x8c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b20      	cmp	r3, #32
 8004712:	d01a      	beq.n	800474a <I2C_MasterTransmit_BTF+0x8c>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800471a:	d016      	beq.n	800474a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800472a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2211      	movs	r2, #17
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fec1 	bl	80044ca <HAL_I2C_MasterTxCpltCallback>
}
 8004748:	e02b      	b.n	80047a2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004758:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004768:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d107      	bne.n	8004794 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fed2 	bl	8004536 <HAL_I2C_MemTxCpltCallback>
}
 8004792:	e006      	b.n	80047a2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fe94 	bl	80044ca <HAL_I2C_MasterTxCpltCallback>
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d11d      	bne.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10b      	bne.n	80047e2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	1c9a      	adds	r2, r3, #2
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80047e0:	e073      	b.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	121b      	asrs	r3, r3, #8
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047fc:	e065      	b.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004802:	2b01      	cmp	r3, #1
 8004804:	d10b      	bne.n	800481e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480a:	b2da      	uxtb	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800481c:	e055      	b.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004822:	2b02      	cmp	r3, #2
 8004824:	d151      	bne.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b22      	cmp	r3, #34	; 0x22
 800482a:	d10d      	bne.n	8004848 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004846:	e040      	b.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d015      	beq.n	800487e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	2b21      	cmp	r3, #33	; 0x21
 8004856:	d112      	bne.n	800487e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800487c:	e025      	b.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d120      	bne.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b21      	cmp	r3, #33	; 0x21
 800488c:	d11d      	bne.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800489c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fe36 	bl	8004536 <HAL_I2C_MemTxCpltCallback>
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b22      	cmp	r3, #34	; 0x22
 80048e4:	f040 80a2 	bne.w	8004a2c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d921      	bls.n	800493a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b03      	cmp	r3, #3
 8004924:	f040 8082 	bne.w	8004a2c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004936:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004938:	e078      	b.n	8004a2c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	2b02      	cmp	r3, #2
 8004940:	d074      	beq.n	8004a2c <I2C_MasterReceive_RXNE+0x15a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <I2C_MasterReceive_RXNE+0x7c>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d16e      	bne.n	8004a2c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f001 f8c0 	bl	8005ad4 <I2C_WaitOnSTOPRequestThroughIT>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d142      	bne.n	80049e0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004968:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004978:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b40      	cmp	r3, #64	; 0x40
 80049b2:	d10a      	bne.n	80049ca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fdc1 	bl	800454a <HAL_I2C_MemRxCpltCallback>
}
 80049c8:	e030      	b.n	8004a2c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2212      	movs	r2, #18
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fd80 	bl	80044de <HAL_I2C_MasterRxCpltCallback>
}
 80049de:	e025      	b.n	8004a2c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fd99 	bl	800455e <HAL_I2C_ErrorCallback>
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d11b      	bne.n	8004a84 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a82:	e0bd      	b.n	8004c00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d129      	bne.n	8004ae2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d00a      	beq.n	8004aba <I2C_MasterReceive_BTF+0x86>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d007      	beq.n	8004aba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ae0:	e08e      	b.n	8004c00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d176      	bne.n	8004bda <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d002      	beq.n	8004af8 <I2C_MasterReceive_BTF+0xc4>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d108      	bne.n	8004b0a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e019      	b.n	8004b3e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d002      	beq.n	8004b16 <I2C_MasterReceive_BTF+0xe2>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d108      	bne.n	8004b28 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e00a      	b.n	8004b3e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d007      	beq.n	8004b3e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d10a      	bne.n	8004bc4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fcc4 	bl	800454a <HAL_I2C_MemRxCpltCallback>
}
 8004bc2:	e01d      	b.n	8004c00 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2212      	movs	r2, #18
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fc83 	bl	80044de <HAL_I2C_MasterRxCpltCallback>
}
 8004bd8:	e012      	b.n	8004c00 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d117      	bne.n	8004c4c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c34:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c36:	e067      	b.n	8004d08 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	611a      	str	r2, [r3, #16]
}
 8004c4a:	e05d      	b.n	8004d08 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c54:	d133      	bne.n	8004cbe <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b21      	cmp	r3, #33	; 0x21
 8004c60:	d109      	bne.n	8004c76 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c72:	611a      	str	r2, [r3, #16]
 8004c74:	e008      	b.n	8004c88 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <I2C_Master_SB+0x92>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d032      	beq.n	8004d08 <I2C_Master_SB+0x100>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d02d      	beq.n	8004d08 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cba:	605a      	str	r2, [r3, #4]
}
 8004cbc:	e024      	b.n	8004d08 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10e      	bne.n	8004ce4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	11db      	asrs	r3, r3, #7
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f003 0306 	and.w	r3, r3, #6
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f063 030f 	orn	r3, r3, #15
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]
}
 8004ce2:	e011      	b.n	8004d08 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10d      	bne.n	8004d08 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	11db      	asrs	r3, r3, #7
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 0306 	and.w	r3, r3, #6
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f063 030e 	orn	r3, r3, #14
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <I2C_Master_ADD10+0x26>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d108      	bne.n	8004d4c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <I2C_Master_ADD10+0x48>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5a:	605a      	str	r2, [r3, #4]
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b091      	sub	sp, #68	; 0x44
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b22      	cmp	r3, #34	; 0x22
 8004d90:	f040 8169 	bne.w	8005066 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10f      	bne.n	8004dbc <I2C_Master_ADDR+0x54>
 8004d9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d10b      	bne.n	8004dbc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da4:	2300      	movs	r3, #0
 8004da6:	633b      	str	r3, [r7, #48]	; 0x30
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	633b      	str	r3, [r7, #48]	; 0x30
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	e160      	b.n	800507e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d11d      	bne.n	8004e00 <I2C_Master_ADDR+0x98>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dcc:	d118      	bne.n	8004e00 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	651a      	str	r2, [r3, #80]	; 0x50
 8004dfe:	e13e      	b.n	800507e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d113      	bne.n	8004e32 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e115      	b.n	800505e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	f040 808a 	bne.w	8004f52 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e44:	d137      	bne.n	8004eb6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e54:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e64:	d113      	bne.n	8004e8e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e74:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e76:	2300      	movs	r3, #0
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	e0e7      	b.n	800505e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e8e:	2300      	movs	r3, #0
 8004e90:	623b      	str	r3, [r7, #32]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e0d3      	b.n	800505e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d02e      	beq.n	8004f1a <I2C_Master_ADDR+0x1b2>
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d02b      	beq.n	8004f1a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	2b12      	cmp	r3, #18
 8004ec6:	d102      	bne.n	8004ece <I2C_Master_ADDR+0x166>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d125      	bne.n	8004f1a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d00e      	beq.n	8004ef2 <I2C_Master_ADDR+0x18a>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d00b      	beq.n	8004ef2 <I2C_Master_ADDR+0x18a>
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d008      	beq.n	8004ef2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e007      	b.n	8004f02 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f00:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	e0a1      	b.n	800505e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f28:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e085      	b.n	800505e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d14d      	bne.n	8004ff8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d016      	beq.n	8004f90 <I2C_Master_ADDR+0x228>
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d013      	beq.n	8004f90 <I2C_Master_ADDR+0x228>
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	2b10      	cmp	r3, #16
 8004f6c:	d010      	beq.n	8004f90 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e007      	b.n	8004fa0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f9e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fae:	d117      	bne.n	8004fe0 <I2C_Master_ADDR+0x278>
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fb6:	d00b      	beq.n	8004fd0 <I2C_Master_ADDR+0x268>
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d008      	beq.n	8004fd0 <I2C_Master_ADDR+0x268>
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d005      	beq.n	8004fd0 <I2C_Master_ADDR+0x268>
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d002      	beq.n	8004fd0 <I2C_Master_ADDR+0x268>
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d107      	bne.n	8004fe0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fde:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	e032      	b.n	800505e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005006:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d117      	bne.n	8005048 <I2C_Master_ADDR+0x2e0>
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800501e:	d00b      	beq.n	8005038 <I2C_Master_ADDR+0x2d0>
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	2b01      	cmp	r3, #1
 8005024:	d008      	beq.n	8005038 <I2C_Master_ADDR+0x2d0>
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	2b08      	cmp	r3, #8
 800502a:	d005      	beq.n	8005038 <I2C_Master_ADDR+0x2d0>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	2b10      	cmp	r3, #16
 8005030:	d002      	beq.n	8005038 <I2C_Master_ADDR+0x2d0>
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b20      	cmp	r3, #32
 8005036:	d107      	bne.n	8005048 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005046:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005064:	e00b      	b.n	800507e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	e7ff      	b.n	800507e <I2C_Master_ADDR+0x316>
 800507e:	bf00      	nop
 8005080:	3744      	adds	r7, #68	; 0x44
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d02b      	beq.n	80050fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d114      	bne.n	80050fc <I2C_SlaveTransmit_TXE+0x72>
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b29      	cmp	r3, #41	; 0x29
 80050d6:	d111      	bne.n	80050fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2221      	movs	r2, #33	; 0x21
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2228      	movs	r2, #40	; 0x28
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff f9fb 	bl	80044f2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d011      	beq.n	800513a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	781a      	ldrb	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d02c      	beq.n	80051ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d114      	bne.n	80051ba <I2C_SlaveReceive_RXNE+0x74>
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b2a      	cmp	r3, #42	; 0x2a
 8005194:	d111      	bne.n	80051ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2222      	movs	r2, #34	; 0x22
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2228      	movs	r2, #40	; 0x28
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7fb f9fd 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d012      	beq.n	80051fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005220:	2b28      	cmp	r3, #40	; 0x28
 8005222:	d127      	bne.n	8005274 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005232:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	09db      	lsrs	r3, r3, #7
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	81bb      	strh	r3, [r7, #12]
 8005256:	e002      	b.n	800525e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005266:	89ba      	ldrh	r2, [r7, #12]
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff f94a 	bl	8004506 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005272:	e00e      	b.n	8005292 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005274:	2300      	movs	r3, #0
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80052bc:	2300      	movs	r3, #0
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f8:	d172      	bne.n	80053e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	2b22      	cmp	r3, #34	; 0x22
 80052fe:	d002      	beq.n	8005306 <I2C_Slave_STOPF+0x6a>
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b2a      	cmp	r3, #42	; 0x2a
 8005304:	d135      	bne.n	8005372 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f043 0204 	orr.w	r2, r3, #4
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005338:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc ffb8 	bl	80022b4 <HAL_DMA_GetState>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d049      	beq.n	80053de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	4a69      	ldr	r2, [pc, #420]	; (80054f4 <I2C_Slave_STOPF+0x258>)
 8005350:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	4618      	mov	r0, r3
 8005358:	f7fc fe00 	bl	8001f5c <HAL_DMA_Abort_IT>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d03d      	beq.n	80053de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800536c:	4610      	mov	r0, r2
 800536e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005370:	e035      	b.n	80053de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f043 0204 	orr.w	r2, r3, #4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fc ff82 	bl	80022b4 <HAL_DMA_GetState>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d014      	beq.n	80053e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	4a4e      	ldr	r2, [pc, #312]	; (80054f4 <I2C_Slave_STOPF+0x258>)
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fc fdca 	bl	8001f5c <HAL_DMA_Abort_IT>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
 80053dc:	e000      	b.n	80053e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d03e      	beq.n	8005468 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d112      	bne.n	800541e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d112      	bne.n	8005452 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f043 0204 	orr.w	r2, r3, #4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f843 	bl	80054fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005476:	e039      	b.n	80054ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	2b2a      	cmp	r3, #42	; 0x2a
 800547c:	d109      	bne.n	8005492 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2228      	movs	r2, #40	; 0x28
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fb f891 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b28      	cmp	r3, #40	; 0x28
 800549c:	d111      	bne.n	80054c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <I2C_Slave_STOPF+0x25c>)
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff f831 	bl	8004522 <HAL_I2C_ListenCpltCallback>
}
 80054c0:	e014      	b.n	80054ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	2b22      	cmp	r3, #34	; 0x22
 80054c8:	d002      	beq.n	80054d0 <I2C_Slave_STOPF+0x234>
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b22      	cmp	r3, #34	; 0x22
 80054ce:	d10d      	bne.n	80054ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fb f864 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	08005985 	.word	0x08005985
 80054f8:	ffff0000 	.word	0xffff0000

080054fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005512:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005514:	7bbb      	ldrb	r3, [r7, #14]
 8005516:	2b10      	cmp	r3, #16
 8005518:	d002      	beq.n	8005520 <I2C_ITError+0x24>
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d10a      	bne.n	8005536 <I2C_ITError+0x3a>
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b22      	cmp	r3, #34	; 0x22
 8005524:	d107      	bne.n	8005536 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005534:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800553c:	2b28      	cmp	r3, #40	; 0x28
 800553e:	d107      	bne.n	8005550 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2228      	movs	r2, #40	; 0x28
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800554e:	e015      	b.n	800557c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800555a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555e:	d00a      	beq.n	8005576 <I2C_ITError+0x7a>
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b60      	cmp	r3, #96	; 0x60
 8005564:	d007      	beq.n	8005576 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558a:	d162      	bne.n	8005652 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800559a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d020      	beq.n	80055ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	4a6a      	ldr	r2, [pc, #424]	; (8005758 <I2C_ITError+0x25c>)
 80055b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fc fcd0 	bl	8001f5c <HAL_DMA_Abort_IT>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8089 	beq.w	80056d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055e6:	4610      	mov	r0, r2
 80055e8:	4798      	blx	r3
 80055ea:	e074      	b.n	80056d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	4a59      	ldr	r2, [pc, #356]	; (8005758 <I2C_ITError+0x25c>)
 80055f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fc fcaf 	bl	8001f5c <HAL_DMA_Abort_IT>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d068      	beq.n	80056d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d10b      	bne.n	800562a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
 8005650:	e041      	b.n	80056d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b60      	cmp	r3, #96	; 0x60
 800565c:	d125      	bne.n	80056aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b40      	cmp	r3, #64	; 0x40
 8005678:	d10b      	bne.n	8005692 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fe ff65 	bl	8004572 <HAL_I2C_AbortCpltCallback>
 80056a8:	e015      	b.n	80056d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d10b      	bne.n	80056d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7fe ff44 	bl	800455e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10e      	bne.n	8005704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005712:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b04      	cmp	r3, #4
 8005726:	d113      	bne.n	8005750 <I2C_ITError+0x254>
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b28      	cmp	r3, #40	; 0x28
 800572c:	d110      	bne.n	8005750 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a0a      	ldr	r2, [pc, #40]	; (800575c <I2C_ITError+0x260>)
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fe fee9 	bl	8004522 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	08005985 	.word	0x08005985
 800575c:	ffff0000 	.word	0xffff0000

08005760 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800577c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005792:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a0:	2200      	movs	r2, #0
 80057a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	2200      	movs	r2, #0
 80057b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80057b4:	7cfb      	ldrb	r3, [r7, #19]
 80057b6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80057ba:	2b21      	cmp	r3, #33	; 0x21
 80057bc:	d007      	beq.n	80057ce <I2C_DMAXferCplt+0x6e>
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80057c4:	2b22      	cmp	r3, #34	; 0x22
 80057c6:	d131      	bne.n	800582c <I2C_DMAXferCplt+0xcc>
 80057c8:	7cbb      	ldrb	r3, [r7, #18]
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d12e      	bne.n	800582c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057dc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	2b29      	cmp	r3, #41	; 0x29
 80057e8:	d10a      	bne.n	8005800 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2221      	movs	r2, #33	; 0x21
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2228      	movs	r2, #40	; 0x28
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057f8:	6978      	ldr	r0, [r7, #20]
 80057fa:	f7fe fe7a 	bl	80044f2 <HAL_I2C_SlaveTxCpltCallback>
 80057fe:	e00c      	b.n	800581a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005800:	7cfb      	ldrb	r3, [r7, #19]
 8005802:	2b2a      	cmp	r3, #42	; 0x2a
 8005804:	d109      	bne.n	800581a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2222      	movs	r2, #34	; 0x22
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2228      	movs	r2, #40	; 0x28
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005814:	6978      	ldr	r0, [r7, #20]
 8005816:	f7fa fecd 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005828:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800582a:	e06a      	b.n	8005902 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d064      	beq.n	8005902 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	d107      	bne.n	8005852 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005850:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005860:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005868:	d009      	beq.n	800587e <I2C_DMAXferCplt+0x11e>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b08      	cmp	r3, #8
 800586e:	d006      	beq.n	800587e <I2C_DMAXferCplt+0x11e>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005876:	d002      	beq.n	800587e <I2C_DMAXferCplt+0x11e>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b20      	cmp	r3, #32
 800587c:	d107      	bne.n	800588e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800589c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ac:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80058bc:	6978      	ldr	r0, [r7, #20]
 80058be:	f7fe fe4e 	bl	800455e <HAL_I2C_ErrorCallback>
}
 80058c2:	e01e      	b.n	8005902 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d10a      	bne.n	80058ee <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	f7fe fe2f 	bl	800454a <HAL_I2C_MemRxCpltCallback>
}
 80058ec:	e009      	b.n	8005902 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2212      	movs	r2, #18
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80058fc:	6978      	ldr	r0, [r7, #20]
 80058fe:	f7fe fdee 	bl	80044de <HAL_I2C_MasterRxCpltCallback>
}
 8005902:	bf00      	nop
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	2200      	movs	r2, #0
 8005926:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	2200      	movs	r2, #0
 8005936:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fc fcc9 	bl	80022d0 <HAL_DMA_GetError>
 800593e:	4603      	mov	r3, r0
 8005940:	2b02      	cmp	r3, #2
 8005942:	d01b      	beq.n	800597c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005952:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f043 0210 	orr.w	r2, r3, #16
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7fe fdf1 	bl	800455e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800599e:	4b4b      	ldr	r3, [pc, #300]	; (8005acc <I2C_DMAAbort+0x148>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	4a4a      	ldr	r2, [pc, #296]	; (8005ad0 <I2C_DMAAbort+0x14c>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	0a1a      	lsrs	r2, r3, #8
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00da      	lsls	r2, r3, #3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80059ca:	e00a      	b.n	80059e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e0:	d0ea      	beq.n	80059b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	2200      	movs	r2, #0
 80059f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	2200      	movs	r2, #0
 8005a00:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2200      	movs	r2, #0
 8005a16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	2200      	movs	r2, #0
 8005a26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	2200      	movs	r2, #0
 8005a36:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b60      	cmp	r3, #96	; 0x60
 8005a52:	d10e      	bne.n	8005a72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a6a:	6978      	ldr	r0, [r7, #20]
 8005a6c:	f7fe fd81 	bl	8004572 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a70:	e027      	b.n	8005ac2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a72:	7cfb      	ldrb	r3, [r7, #19]
 8005a74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a78:	2b28      	cmp	r3, #40	; 0x28
 8005a7a:	d117      	bne.n	8005aac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2228      	movs	r2, #40	; 0x28
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005aaa:	e007      	b.n	8005abc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005abc:	6978      	ldr	r0, [r7, #20]
 8005abe:	f7fe fd4e 	bl	800455e <HAL_I2C_ErrorCallback>
}
 8005ac2:	bf00      	nop
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000004 	.word	0x20000004
 8005ad0:	14f8b589 	.word	0x14f8b589

08005ad4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ae0:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	0a1a      	lsrs	r2, r3, #8
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d107      	bne.n	8005b12 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e008      	b.n	8005b24 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b20:	d0e9      	beq.n	8005af6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000004 	.word	0x20000004
 8005b34:	14f8b589 	.word	0x14f8b589

08005b38 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b48:	d103      	bne.n	8005b52 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b50:	e007      	b.n	8005b62 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b5a:	d102      	bne.n	8005b62 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2208      	movs	r2, #8
 8005b60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d129      	bne.n	8005bd8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2224      	movs	r2, #36	; 0x24
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0210 	bic.w	r2, r2, #16
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d12a      	bne.n	8005c56 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2224      	movs	r2, #36	; 0x24
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005c20:	89fb      	ldrh	r3, [r7, #14]
 8005c22:	f023 030f 	bic.w	r3, r3, #15
 8005c26:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	89fa      	ldrh	r2, [r7, #14]
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e267      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d075      	beq.n	8005d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c82:	4b88      	ldr	r3, [pc, #544]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 030c 	and.w	r3, r3, #12
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c8e:	4b85      	ldr	r3, [pc, #532]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d112      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c9a:	4b82      	ldr	r3, [pc, #520]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca8:	4b7e      	ldr	r3, [pc, #504]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05b      	beq.n	8005d6c <HAL_RCC_OscConfig+0x108>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d157      	bne.n	8005d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e242      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x74>
 8005cca:	4b76      	ldr	r3, [pc, #472]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a75      	ldr	r2, [pc, #468]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e01d      	b.n	8005d14 <HAL_RCC_OscConfig+0xb0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x98>
 8005ce2:	4b70      	ldr	r3, [pc, #448]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6f      	ldr	r2, [pc, #444]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6c      	ldr	r2, [pc, #432]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e00b      	b.n	8005d14 <HAL_RCC_OscConfig+0xb0>
 8005cfc:	4b69      	ldr	r3, [pc, #420]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a68      	ldr	r2, [pc, #416]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4b66      	ldr	r3, [pc, #408]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a65      	ldr	r2, [pc, #404]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fb fe66 	bl	80019ec <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d24:	f7fb fe62 	bl	80019ec <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b64      	cmp	r3, #100	; 0x64
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e207      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	4b5b      	ldr	r3, [pc, #364]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0xc0>
 8005d42:	e014      	b.n	8005d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7fb fe52 	bl	80019ec <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d4c:	f7fb fe4e 	bl	80019ec <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b64      	cmp	r3, #100	; 0x64
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e1f3      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	4b51      	ldr	r3, [pc, #324]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0xe8>
 8005d6a:	e000      	b.n	8005d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d063      	beq.n	8005e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d86:	4b47      	ldr	r3, [pc, #284]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d11c      	bne.n	8005dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d92:	4b44      	ldr	r3, [pc, #272]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d116      	bne.n	8005dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9e:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_RCC_OscConfig+0x152>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e1c7      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db6:	4b3b      	ldr	r3, [pc, #236]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4937      	ldr	r1, [pc, #220]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dca:	e03a      	b.n	8005e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d020      	beq.n	8005e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd4:	4b34      	ldr	r3, [pc, #208]	; (8005ea8 <HAL_RCC_OscConfig+0x244>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7fb fe07 	bl	80019ec <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de2:	f7fb fe03 	bl	80019ec <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e1a8      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e00:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4925      	ldr	r1, [pc, #148]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]
 8005e14:	e015      	b.n	8005e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e16:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <HAL_RCC_OscConfig+0x244>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fb fde6 	bl	80019ec <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e24:	f7fb fde2 	bl	80019ec <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e187      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d036      	beq.n	8005ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d016      	beq.n	8005e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e56:	4b15      	ldr	r3, [pc, #84]	; (8005eac <HAL_RCC_OscConfig+0x248>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fb fdc6 	bl	80019ec <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e64:	f7fb fdc2 	bl	80019ec <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e167      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0x200>
 8005e82:	e01b      	b.n	8005ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <HAL_RCC_OscConfig+0x248>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8a:	f7fb fdaf 	bl	80019ec <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e90:	e00e      	b.n	8005eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e92:	f7fb fdab 	bl	80019ec <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d907      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e150      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	42470000 	.word	0x42470000
 8005eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb0:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1ea      	bne.n	8005e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8097 	beq.w	8005ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ece:	4b81      	ldr	r3, [pc, #516]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10f      	bne.n	8005efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	4b7d      	ldr	r3, [pc, #500]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	4a7c      	ldr	r2, [pc, #496]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eea:	4b7a      	ldr	r3, [pc, #488]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005efa:	4b77      	ldr	r3, [pc, #476]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d118      	bne.n	8005f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f06:	4b74      	ldr	r3, [pc, #464]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a73      	ldr	r2, [pc, #460]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f12:	f7fb fd6b 	bl	80019ec <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1a:	f7fb fd67 	bl	80019ec <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e10c      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	4b6a      	ldr	r3, [pc, #424]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d106      	bne.n	8005f4e <HAL_RCC_OscConfig+0x2ea>
 8005f40:	4b64      	ldr	r3, [pc, #400]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a63      	ldr	r2, [pc, #396]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4c:	e01c      	b.n	8005f88 <HAL_RCC_OscConfig+0x324>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d10c      	bne.n	8005f70 <HAL_RCC_OscConfig+0x30c>
 8005f56:	4b5f      	ldr	r3, [pc, #380]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	4a5e      	ldr	r2, [pc, #376]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	f043 0304 	orr.w	r3, r3, #4
 8005f60:	6713      	str	r3, [r2, #112]	; 0x70
 8005f62:	4b5c      	ldr	r3, [pc, #368]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	4a5b      	ldr	r2, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCC_OscConfig+0x324>
 8005f70:	4b58      	ldr	r3, [pc, #352]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7c:	4b55      	ldr	r3, [pc, #340]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f82:	f023 0304 	bic.w	r3, r3, #4
 8005f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d015      	beq.n	8005fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fb fd2c 	bl	80019ec <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f98:	f7fb fd28 	bl	80019ec <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0cb      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fae:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0ee      	beq.n	8005f98 <HAL_RCC_OscConfig+0x334>
 8005fba:	e014      	b.n	8005fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbc:	f7fb fd16 	bl	80019ec <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fb fd12 	bl	80019ec <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0b5      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fda:	4b3e      	ldr	r3, [pc, #248]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1ee      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d105      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fec:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	4a38      	ldr	r2, [pc, #224]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80a1 	beq.w	8006144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006002:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
 800600a:	2b08      	cmp	r3, #8
 800600c:	d05c      	beq.n	80060c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d141      	bne.n	800609a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006016:	4b31      	ldr	r3, [pc, #196]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601c:	f7fb fce6 	bl	80019ec <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006024:	f7fb fce2 	bl	80019ec <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e087      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006036:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	3b01      	subs	r3, #1
 800605c:	041b      	lsls	r3, r3, #16
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	061b      	lsls	r3, r3, #24
 8006066:	491b      	ldr	r1, [pc, #108]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006068:	4313      	orrs	r3, r2
 800606a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fb fcbb 	bl	80019ec <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607a:	f7fb fcb7 	bl	80019ec <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e05c      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x416>
 8006098:	e054      	b.n	8006144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fb fca4 	bl	80019ec <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fb fca0 	bl	80019ec <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e045      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0x444>
 80060c6:	e03d      	b.n	8006144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d107      	bne.n	80060e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e038      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40007000 	.word	0x40007000
 80060dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060e0:	4b1b      	ldr	r3, [pc, #108]	; (8006150 <HAL_RCC_OscConfig+0x4ec>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d028      	beq.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d121      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006106:	429a      	cmp	r2, r3
 8006108:	d11a      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006110:	4013      	ands	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006118:	4293      	cmp	r3, r2
 800611a:	d111      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	3b01      	subs	r3, #1
 800612a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d107      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023800 	.word	0x40023800

08006154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0cc      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006168:	4b68      	ldr	r3, [pc, #416]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d90c      	bls.n	8006190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b65      	ldr	r3, [pc, #404]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b63      	ldr	r3, [pc, #396]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0b8      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d020      	beq.n	80061de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a8:	4b59      	ldr	r3, [pc, #356]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	4a58      	ldr	r2, [pc, #352]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c0:	4b53      	ldr	r3, [pc, #332]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4a52      	ldr	r2, [pc, #328]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061cc:	4b50      	ldr	r3, [pc, #320]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	494d      	ldr	r1, [pc, #308]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d044      	beq.n	8006274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d107      	bne.n	8006202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	4b47      	ldr	r3, [pc, #284]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d119      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e07f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d003      	beq.n	8006212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800620e:	2b03      	cmp	r3, #3
 8006210:	d107      	bne.n	8006222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006212:	4b3f      	ldr	r3, [pc, #252]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e06f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006222:	4b3b      	ldr	r3, [pc, #236]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e067      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006232:	4b37      	ldr	r3, [pc, #220]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f023 0203 	bic.w	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4934      	ldr	r1, [pc, #208]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	4313      	orrs	r3, r2
 8006242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006244:	f7fb fbd2 	bl	80019ec <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	e00a      	b.n	8006262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fb fbce 	bl	80019ec <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e04f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	4b2b      	ldr	r3, [pc, #172]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 020c 	and.w	r2, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	429a      	cmp	r2, r3
 8006272:	d1eb      	bne.n	800624c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006274:	4b25      	ldr	r3, [pc, #148]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d20c      	bcs.n	800629c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b22      	ldr	r3, [pc, #136]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d001      	beq.n	800629c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e032      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4916      	ldr	r1, [pc, #88]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	490e      	ldr	r1, [pc, #56]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062da:	f000 f821 	bl	8006320 <HAL_RCC_GetSysClockFreq>
 80062de:	4602      	mov	r2, r0
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	490a      	ldr	r1, [pc, #40]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 80062ec:	5ccb      	ldrb	r3, [r1, r3]
 80062ee:	fa22 f303 	lsr.w	r3, r2, r3
 80062f2:	4a09      	ldr	r2, [pc, #36]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <HAL_RCC_ClockConfig+0x1c8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fb fb32 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40023c00 	.word	0x40023c00
 8006310:	40023800 	.word	0x40023800
 8006314:	08017310 	.word	0x08017310
 8006318:	20000004 	.word	0x20000004
 800631c:	20000008 	.word	0x20000008

08006320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006324:	b094      	sub	sp, #80	; 0x50
 8006326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	647b      	str	r3, [r7, #68]	; 0x44
 800632c:	2300      	movs	r3, #0
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006330:	2300      	movs	r3, #0
 8006332:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006338:	4b79      	ldr	r3, [pc, #484]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 030c 	and.w	r3, r3, #12
 8006340:	2b08      	cmp	r3, #8
 8006342:	d00d      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x40>
 8006344:	2b08      	cmp	r3, #8
 8006346:	f200 80e1 	bhi.w	800650c <HAL_RCC_GetSysClockFreq+0x1ec>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x34>
 800634e:	2b04      	cmp	r3, #4
 8006350:	d003      	beq.n	800635a <HAL_RCC_GetSysClockFreq+0x3a>
 8006352:	e0db      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006354:	4b73      	ldr	r3, [pc, #460]	; (8006524 <HAL_RCC_GetSysClockFreq+0x204>)
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006358:	e0db      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800635a:	4b73      	ldr	r3, [pc, #460]	; (8006528 <HAL_RCC_GetSysClockFreq+0x208>)
 800635c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800635e:	e0d8      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006360:	4b6f      	ldr	r3, [pc, #444]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006368:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800636a:	4b6d      	ldr	r3, [pc, #436]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d063      	beq.n	800643e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006376:	4b6a      	ldr	r3, [pc, #424]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	099b      	lsrs	r3, r3, #6
 800637c:	2200      	movs	r2, #0
 800637e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006380:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006388:	633b      	str	r3, [r7, #48]	; 0x30
 800638a:	2300      	movs	r3, #0
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
 800638e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	f04f 0000 	mov.w	r0, #0
 800639a:	f04f 0100 	mov.w	r1, #0
 800639e:	0159      	lsls	r1, r3, #5
 80063a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a4:	0150      	lsls	r0, r2, #5
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4621      	mov	r1, r4
 80063ac:	1a51      	subs	r1, r2, r1
 80063ae:	6139      	str	r1, [r7, #16]
 80063b0:	4629      	mov	r1, r5
 80063b2:	eb63 0301 	sbc.w	r3, r3, r1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c4:	4659      	mov	r1, fp
 80063c6:	018b      	lsls	r3, r1, #6
 80063c8:	4651      	mov	r1, sl
 80063ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063ce:	4651      	mov	r1, sl
 80063d0:	018a      	lsls	r2, r1, #6
 80063d2:	4651      	mov	r1, sl
 80063d4:	ebb2 0801 	subs.w	r8, r2, r1
 80063d8:	4659      	mov	r1, fp
 80063da:	eb63 0901 	sbc.w	r9, r3, r1
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f2:	4690      	mov	r8, r2
 80063f4:	4699      	mov	r9, r3
 80063f6:	4623      	mov	r3, r4
 80063f8:	eb18 0303 	adds.w	r3, r8, r3
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	462b      	mov	r3, r5
 8006400:	eb49 0303 	adc.w	r3, r9, r3
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006412:	4629      	mov	r1, r5
 8006414:	024b      	lsls	r3, r1, #9
 8006416:	4621      	mov	r1, r4
 8006418:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800641c:	4621      	mov	r1, r4
 800641e:	024a      	lsls	r2, r1, #9
 8006420:	4610      	mov	r0, r2
 8006422:	4619      	mov	r1, r3
 8006424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006426:	2200      	movs	r2, #0
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
 800642a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800642c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006430:	f7f9 ff2e 	bl	8000290 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4613      	mov	r3, r2
 800643a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643c:	e058      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800643e:	4b38      	ldr	r3, [pc, #224]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	099b      	lsrs	r3, r3, #6
 8006444:	2200      	movs	r2, #0
 8006446:	4618      	mov	r0, r3
 8006448:	4611      	mov	r1, r2
 800644a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800644e:	623b      	str	r3, [r7, #32]
 8006450:	2300      	movs	r3, #0
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
 8006454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	f04f 0000 	mov.w	r0, #0
 8006460:	f04f 0100 	mov.w	r1, #0
 8006464:	0159      	lsls	r1, r3, #5
 8006466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800646a:	0150      	lsls	r0, r2, #5
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4641      	mov	r1, r8
 8006472:	ebb2 0a01 	subs.w	sl, r2, r1
 8006476:	4649      	mov	r1, r9
 8006478:	eb63 0b01 	sbc.w	fp, r3, r1
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800648c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006490:	ebb2 040a 	subs.w	r4, r2, sl
 8006494:	eb63 050b 	sbc.w	r5, r3, fp
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	00eb      	lsls	r3, r5, #3
 80064a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064a6:	00e2      	lsls	r2, r4, #3
 80064a8:	4614      	mov	r4, r2
 80064aa:	461d      	mov	r5, r3
 80064ac:	4643      	mov	r3, r8
 80064ae:	18e3      	adds	r3, r4, r3
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	464b      	mov	r3, r9
 80064b4:	eb45 0303 	adc.w	r3, r5, r3
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064c6:	4629      	mov	r1, r5
 80064c8:	028b      	lsls	r3, r1, #10
 80064ca:	4621      	mov	r1, r4
 80064cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064d0:	4621      	mov	r1, r4
 80064d2:	028a      	lsls	r2, r1, #10
 80064d4:	4610      	mov	r0, r2
 80064d6:	4619      	mov	r1, r3
 80064d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064da:	2200      	movs	r2, #0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	61fa      	str	r2, [r7, #28]
 80064e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e4:	f7f9 fed4 	bl	8000290 <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4613      	mov	r3, r2
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	3301      	adds	r3, #1
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800650a:	e002      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_RCC_GetSysClockFreq+0x204>)
 800650e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006514:	4618      	mov	r0, r3
 8006516:	3750      	adds	r7, #80	; 0x50
 8006518:	46bd      	mov	sp, r7
 800651a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800651e:	bf00      	nop
 8006520:	40023800 	.word	0x40023800
 8006524:	00f42400 	.word	0x00f42400
 8006528:	007a1200 	.word	0x007a1200

0800652c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006530:	4b03      	ldr	r3, [pc, #12]	; (8006540 <HAL_RCC_GetHCLKFreq+0x14>)
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000004 	.word	0x20000004

08006544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006548:	f7ff fff0 	bl	800652c <HAL_RCC_GetHCLKFreq>
 800654c:	4602      	mov	r2, r0
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	0a9b      	lsrs	r3, r3, #10
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	4903      	ldr	r1, [pc, #12]	; (8006568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800655a:	5ccb      	ldrb	r3, [r1, r3]
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006560:	4618      	mov	r0, r3
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40023800 	.word	0x40023800
 8006568:	08017320 	.word	0x08017320

0800656c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006570:	f7ff ffdc 	bl	800652c <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	0b5b      	lsrs	r3, r3, #13
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4903      	ldr	r1, [pc, #12]	; (8006590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006588:	4618      	mov	r0, r3
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40023800 	.word	0x40023800
 8006590:	08017320 	.word	0x08017320

08006594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e07b      	b.n	800669e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d108      	bne.n	80065c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b6:	d009      	beq.n	80065cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	61da      	str	r2, [r3, #28]
 80065be:	e005      	b.n	80065cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fa fd36 	bl	8001058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006602:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006650:	ea42 0103 	orr.w	r1, r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	f003 0104 	and.w	r1, r3, #4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0210 	and.w	r2, r3, #16
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800668c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_SPI_Transmit_DMA+0x20>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e09b      	b.n	8006800 <HAL_SPI_Transmit_DMA+0x158>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d002      	beq.n	80066e2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80066dc:	2302      	movs	r3, #2
 80066de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066e0:	e089      	b.n	80067f6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_SPI_Transmit_DMA+0x46>
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066f2:	e080      	b.n	80067f6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2203      	movs	r2, #3
 80066f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	88fa      	ldrh	r2, [r7, #6]
 8006712:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673a:	d10f      	bne.n	800675c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800674a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800675a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006760:	4a29      	ldr	r2, [pc, #164]	; (8006808 <HAL_SPI_Transmit_DMA+0x160>)
 8006762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006768:	4a28      	ldr	r2, [pc, #160]	; (800680c <HAL_SPI_Transmit_DMA+0x164>)
 800676a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006770:	4a27      	ldr	r2, [pc, #156]	; (8006810 <HAL_SPI_Transmit_DMA+0x168>)
 8006772:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006778:	2200      	movs	r2, #0
 800677a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	4619      	mov	r1, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006792:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006794:	f7fb fb1a 	bl	8001dcc <HAL_DMA_Start_IT>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00c      	beq.n	80067b8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	f043 0210 	orr.w	r2, r3, #16
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80067b6:	e01e      	b.n	80067f6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d007      	beq.n	80067d6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0220 	orr.w	r2, r2, #32
 80067e4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0202 	orr.w	r2, r2, #2
 80067f4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	08007001 	.word	0x08007001
 800680c:	08006e21 	.word	0x08006e21
 8006810:	08007055 	.word	0x08007055

08006814 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d110      	bne.n	8006850 <HAL_SPI_Receive_DMA+0x3c>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006836:	d10b      	bne.n	8006850 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2204      	movs	r2, #4
 800683c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f8ac 	bl	80069a4 <HAL_SPI_TransmitReceive_DMA>
 800684c:	4603      	mov	r3, r0
 800684e:	e09f      	b.n	8006990 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_SPI_Receive_DMA+0x4a>
 800685a:	2302      	movs	r3, #2
 800685c:	e098      	b.n	8006990 <HAL_SPI_Receive_DMA+0x17c>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b01      	cmp	r3, #1
 8006870:	d002      	beq.n	8006878 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006872:	2302      	movs	r3, #2
 8006874:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006876:	e086      	b.n	8006986 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_SPI_Receive_DMA+0x70>
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006888:	e07d      	b.n	8006986 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2204      	movs	r2, #4
 800688e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ca:	d10f      	bne.n	80068ec <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f0:	4a29      	ldr	r2, [pc, #164]	; (8006998 <HAL_SPI_Receive_DMA+0x184>)
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f8:	4a28      	ldr	r2, [pc, #160]	; (800699c <HAL_SPI_Receive_DMA+0x188>)
 80068fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006900:	4a27      	ldr	r2, [pc, #156]	; (80069a0 <HAL_SPI_Receive_DMA+0x18c>)
 8006902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006908:	2200      	movs	r2, #0
 800690a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	4619      	mov	r1, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006922:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006924:	f7fb fa52 	bl	8001dcc <HAL_DMA_Start_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	f043 0210 	orr.w	r2, r3, #16
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006946:	e01e      	b.n	8006986 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	d007      	beq.n	8006966 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006964:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0220 	orr.w	r2, r2, #32
 8006974:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	0800701d 	.word	0x0800701d
 800699c:	08006ec9 	.word	0x08006ec9
 80069a0:	08007055 	.word	0x08007055

080069a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e0e3      	b.n	8006b8c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80069da:	7dbb      	ldrb	r3, [r7, #22]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d00d      	beq.n	80069fc <HAL_SPI_TransmitReceive_DMA+0x58>
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e6:	d106      	bne.n	80069f6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80069f0:	7dbb      	ldrb	r3, [r7, #22]
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d002      	beq.n	80069fc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
 80069f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069fa:	e0c2      	b.n	8006b82 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006a08:	887b      	ldrh	r3, [r7, #2]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a12:	e0b6      	b.n	8006b82 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d003      	beq.n	8006a28 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2205      	movs	r2, #5
 8006a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	887a      	ldrh	r2, [r7, #2]
 8006a38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	887a      	ldrh	r2, [r7, #2]
 8006a3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	887a      	ldrh	r2, [r7, #2]
 8006a4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	887a      	ldrh	r2, [r7, #2]
 8006a50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d108      	bne.n	8006a7c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6e:	4a49      	ldr	r2, [pc, #292]	; (8006b94 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a76:	4a48      	ldr	r2, [pc, #288]	; (8006b98 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006a78:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a7a:	e007      	b.n	8006a8c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a80:	4a46      	ldr	r2, [pc, #280]	; (8006b9c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a88:	4a45      	ldr	r2, [pc, #276]	; (8006ba0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8006a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a90:	4a44      	ldr	r2, [pc, #272]	; (8006ba4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8006a92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a98:	2200      	movs	r2, #0
 8006a9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ab4:	f7fb f98a 	bl	8001dcc <HAL_DMA_Start_IT>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00c      	beq.n	8006ad8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	f043 0210 	orr.w	r2, r3, #16
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006ad6:	e054      	b.n	8006b82 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aec:	2200      	movs	r2, #0
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af4:	2200      	movs	r2, #0
 8006af6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afc:	2200      	movs	r2, #0
 8006afe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b04:	2200      	movs	r2, #0
 8006b06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	4619      	mov	r1, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b20:	f7fb f954 	bl	8001dcc <HAL_DMA_Start_IT>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00c      	beq.n	8006b44 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2e:	f043 0210 	orr.w	r2, r3, #16
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006b42:	e01e      	b.n	8006b82 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d007      	beq.n	8006b62 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b60:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0220 	orr.w	r2, r2, #32
 8006b70:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0202 	orr.w	r2, r2, #2
 8006b80:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	0800701d 	.word	0x0800701d
 8006b98:	08006ec9 	.word	0x08006ec9
 8006b9c:	08007039 	.word	0x08007039
 8006ba0:	08006f71 	.word	0x08006f71
 8006ba4:	08007055 	.word	0x08007055

08006ba8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	099b      	lsrs	r3, r3, #6
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10f      	bne.n	8006bec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	099b      	lsrs	r3, r3, #6
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
    return;
 8006bea:	e0d7      	b.n	8006d9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <HAL_SPI_IRQHandler+0x66>
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	09db      	lsrs	r3, r3, #7
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
    return;
 8006c0c:	e0c6      	b.n	8006d9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10c      	bne.n	8006c34 <HAL_SPI_IRQHandler+0x8c>
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	099b      	lsrs	r3, r3, #6
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	0a1b      	lsrs	r3, r3, #8
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80b4 	beq.w	8006d9c <HAL_SPI_IRQHandler+0x1f4>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80ad 	beq.w	8006d9c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	099b      	lsrs	r3, r3, #6
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d023      	beq.n	8006c96 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d011      	beq.n	8006c7e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	f043 0204 	orr.w	r2, r3, #4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	e00b      	b.n	8006c96 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	693b      	ldr	r3, [r7, #16]
        return;
 8006c94:	e082      	b.n	8006d9c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d014      	beq.n	8006ccc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	f043 0201 	orr.w	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	0a1b      	lsrs	r3, r3, #8
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00c      	beq.n	8006cf2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cdc:	f043 0208 	orr.w	r2, r3, #8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60bb      	str	r3, [r7, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	60bb      	str	r3, [r7, #8]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d04f      	beq.n	8006d9a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d08:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d104      	bne.n	8006d26 <HAL_SPI_IRQHandler+0x17e>
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d034      	beq.n	8006d90 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0203 	bic.w	r2, r2, #3
 8006d34:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d011      	beq.n	8006d62 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <HAL_SPI_IRQHandler+0x1fc>)
 8006d44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fb f906 	bl	8001f5c <HAL_DMA_Abort_IT>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d016      	beq.n	8006d98 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6e:	4a0d      	ldr	r2, [pc, #52]	; (8006da4 <HAL_SPI_IRQHandler+0x1fc>)
 8006d70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fb f8f0 	bl	8001f5c <HAL_DMA_Abort_IT>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006d8e:	e003      	b.n	8006d98 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f83b 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d96:	e000      	b.n	8006d9a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006d98:	bf00      	nop
    return;
 8006d9a:	bf00      	nop
  }
}
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	08007095 	.word	0x08007095

08006da8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e2e:	f7fa fddd 	bl	80019ec <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e42:	d03b      	beq.n	8006ebc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0220 	bic.w	r2, r2, #32
 8006e52:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0202 	bic.w	r2, r2, #2
 8006e62:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	2164      	movs	r1, #100	; 0x64
 8006e68:	6978      	ldr	r0, [r7, #20]
 8006e6a:	f000 fa15 	bl	8007298 <SPI_EndRxTxTransaction>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e78:	f043 0220 	orr.w	r2, r3, #32
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006eb4:	6978      	ldr	r0, [r7, #20]
 8006eb6:	f7ff ffa9 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006eba:	e002      	b.n	8006ec2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006ebc:	6978      	ldr	r0, [r7, #20]
 8006ebe:	f7ff ff73 	bl	8006da8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed6:	f7fa fd89 	bl	80019ec <HAL_GetTick>
 8006eda:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eea:	d03b      	beq.n	8006f64 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0220 	bic.w	r2, r2, #32
 8006efa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10d      	bne.n	8006f20 <SPI_DMAReceiveCplt+0x58>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f0c:	d108      	bne.n	8006f20 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0203 	bic.w	r2, r2, #3
 8006f1c:	605a      	str	r2, [r3, #4]
 8006f1e:	e007      	b.n	8006f30 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	2164      	movs	r1, #100	; 0x64
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f949 	bl	80071cc <SPI_EndRxTransaction>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff ff55 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f62:	e002      	b.n	8006f6a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7f9 fb15 	bl	8000594 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f7e:	f7fa fd35 	bl	80019ec <HAL_GetTick>
 8006f82:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f92:	d02f      	beq.n	8006ff4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0220 	bic.w	r2, r2, #32
 8006fa2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	2164      	movs	r1, #100	; 0x64
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f975 	bl	8007298 <SPI_EndRxTxTransaction>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb8:	f043 0220 	orr.w	r2, r3, #32
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0203 	bic.w	r2, r2, #3
 8006fce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7ff ff0d 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ff2:	e002      	b.n	8006ffa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fee1 	bl	8006dbc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff fede 	bl	8006dd0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007014:	bf00      	nop
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7ff feda 	bl	8006de4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007030:	bf00      	nop
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff fed6 	bl	8006df8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0203 	bic.w	r2, r2, #3
 8007070:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007076:	f043 0210 	orr.w	r2, r3, #16
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff fec0 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff feac 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070cc:	f7fa fc8e 	bl	80019ec <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4413      	add	r3, r2
 80070da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070dc:	f7fa fc86 	bl	80019ec <HAL_GetTick>
 80070e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070e2:	4b39      	ldr	r3, [pc, #228]	; (80071c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	015b      	lsls	r3, r3, #5
 80070e8:	0d1b      	lsrs	r3, r3, #20
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	fb02 f303 	mul.w	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070f2:	e054      	b.n	800719e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d050      	beq.n	800719e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070fc:	f7fa fc76 	bl	80019ec <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	69fa      	ldr	r2, [r7, #28]
 8007108:	429a      	cmp	r2, r3
 800710a:	d902      	bls.n	8007112 <SPI_WaitFlagStateUntilTimeout+0x56>
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d13d      	bne.n	800718e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007120:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800712a:	d111      	bne.n	8007150 <SPI_WaitFlagStateUntilTimeout+0x94>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007134:	d004      	beq.n	8007140 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713e:	d107      	bne.n	8007150 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800714e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007158:	d10f      	bne.n	800717a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007178:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e017      	b.n	80071be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3b01      	subs	r3, #1
 800719c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4013      	ands	r3, r2
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	bf0c      	ite	eq
 80071ae:	2301      	moveq	r3, #1
 80071b0:	2300      	movne	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d19b      	bne.n	80070f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3720      	adds	r7, #32
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000004 	.word	0x20000004

080071cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071e0:	d111      	bne.n	8007206 <SPI_EndRxTransaction+0x3a>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ea:	d004      	beq.n	80071f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f4:	d107      	bne.n	8007206 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007204:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800720e:	d12a      	bne.n	8007266 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007218:	d012      	beq.n	8007240 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2200      	movs	r2, #0
 8007222:	2180      	movs	r1, #128	; 0x80
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff ff49 	bl	80070bc <SPI_WaitFlagStateUntilTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d02d      	beq.n	800728c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e026      	b.n	800728e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	2101      	movs	r1, #1
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff ff36 	bl	80070bc <SPI_WaitFlagStateUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01a      	beq.n	800728c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	f043 0220 	orr.w	r2, r3, #32
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e013      	b.n	800728e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2200      	movs	r2, #0
 800726e:	2101      	movs	r1, #1
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff ff23 	bl	80070bc <SPI_WaitFlagStateUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	f043 0220 	orr.w	r2, r3, #32
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e000      	b.n	800728e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <SPI_EndRxTxTransaction+0x7c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <SPI_EndRxTxTransaction+0x80>)
 80072aa:	fba2 2303 	umull	r2, r3, r2, r3
 80072ae:	0d5b      	lsrs	r3, r3, #21
 80072b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072b4:	fb02 f303 	mul.w	r3, r2, r3
 80072b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072c2:	d112      	bne.n	80072ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	2180      	movs	r1, #128	; 0x80
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff fef4 	bl	80070bc <SPI_WaitFlagStateUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d016      	beq.n	8007308 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072de:	f043 0220 	orr.w	r2, r3, #32
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e00f      	b.n	800730a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007300:	2b80      	cmp	r3, #128	; 0x80
 8007302:	d0f2      	beq.n	80072ea <SPI_EndRxTxTransaction+0x52>
 8007304:	e000      	b.n	8007308 <SPI_EndRxTxTransaction+0x70>
        break;
 8007306:	bf00      	nop
  }

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000004 	.word	0x20000004
 8007318:	165e9f81 	.word	0x165e9f81

0800731c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e03f      	b.n	80073ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7f9 ffba 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2224      	movs	r2, #36	; 0x24
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800735e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f849 	bl	80083f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695a      	ldr	r2, [r3, #20]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b08a      	sub	sp, #40	; 0x28
 80073ba:	af02      	add	r7, sp, #8
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	603b      	str	r3, [r7, #0]
 80073c2:	4613      	mov	r3, r2
 80073c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d17c      	bne.n	80074d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_UART_Transmit+0x2c>
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e075      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_UART_Transmit+0x3e>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e06e      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2221      	movs	r2, #33	; 0x21
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800740a:	f7fa faef 	bl	80019ec <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	88fa      	ldrh	r2, [r7, #6]
 800741a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007424:	d108      	bne.n	8007438 <HAL_UART_Transmit+0x82>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	e003      	b.n	8007440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007448:	e02a      	b.n	80074a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2200      	movs	r2, #0
 8007452:	2180      	movs	r1, #128	; 0x80
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fd04 	bl	8007e62 <UART_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e036      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	3302      	adds	r3, #2
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	e007      	b.n	8007492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	781a      	ldrb	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1cf      	bne.n	800744a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	2140      	movs	r1, #64	; 0x40
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 fcd4 	bl	8007e62 <UART_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e006      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e000      	b.n	80074d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08c      	sub	sp, #48	; 0x30
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d165      	bne.n	80075c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <HAL_UART_Transmit_DMA+0x26>
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e05e      	b.n	80075c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_UART_Transmit_DMA+0x38>
 8007510:	2302      	movs	r3, #2
 8007512:	e057      	b.n	80075c4 <HAL_UART_Transmit_DMA+0xe8>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	88fa      	ldrh	r2, [r7, #6]
 8007526:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	88fa      	ldrh	r2, [r7, #6]
 800752c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2221      	movs	r2, #33	; 0x21
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007540:	4a22      	ldr	r2, [pc, #136]	; (80075cc <HAL_UART_Transmit_DMA+0xf0>)
 8007542:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	4a21      	ldr	r2, [pc, #132]	; (80075d0 <HAL_UART_Transmit_DMA+0xf4>)
 800754a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007550:	4a20      	ldr	r2, [pc, #128]	; (80075d4 <HAL_UART_Transmit_DMA+0xf8>)
 8007552:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007558:	2200      	movs	r2, #0
 800755a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800755c:	f107 0308 	add.w	r3, r7, #8
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	6819      	ldr	r1, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3304      	adds	r3, #4
 8007570:	461a      	mov	r2, r3
 8007572:	88fb      	ldrh	r3, [r7, #6]
 8007574:	f7fa fc2a 	bl	8001dcc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007580:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3314      	adds	r3, #20
 8007590:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	617b      	str	r3, [r7, #20]
   return(result);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3314      	adds	r3, #20
 80075a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075aa:	627a      	str	r2, [r7, #36]	; 0x24
 80075ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6a39      	ldr	r1, [r7, #32]
 80075b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e5      	bne.n	800758a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	e000      	b.n	80075c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3730      	adds	r7, #48	; 0x30
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	08007bbd 	.word	0x08007bbd
 80075d0:	08007c57 	.word	0x08007c57
 80075d4:	08007dcf 	.word	0x08007dcf

080075d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d11d      	bne.n	800762e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_UART_Receive_DMA+0x26>
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e016      	b.n	8007630 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_UART_Receive_DMA+0x38>
 800760c:	2302      	movs	r3, #2
 800760e:	e00f      	b.n	8007630 <HAL_UART_Receive_DMA+0x58>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	461a      	mov	r2, r3
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fc8b 	bl	8007f40 <UART_Start_Receive_DMA>
 800762a:	4603      	mov	r3, r0
 800762c:	e000      	b.n	8007630 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800762e:	2302      	movs	r3, #2
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b0ba      	sub	sp, #232	; 0xe8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800765e:	2300      	movs	r3, #0
 8007660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007664:	2300      	movs	r3, #0
 8007666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10f      	bne.n	800769e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800767e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <HAL_UART_IRQHandler+0x66>
 800768a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fdf3 	bl	8008282 <UART_Receive_IT>
      return;
 800769c:	e256      	b.n	8007b4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800769e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 80de 	beq.w	8007864 <HAL_UART_IRQHandler+0x22c>
 80076a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 80d1 	beq.w	8007864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <HAL_UART_IRQHandler+0xae>
 80076ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f043 0201 	orr.w	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <HAL_UART_IRQHandler+0xd2>
 80076f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f043 0202 	orr.w	r2, r3, #2
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800770a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <HAL_UART_IRQHandler+0xf6>
 8007716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f043 0204 	orr.w	r2, r3, #4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800772e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d011      	beq.n	800775e <HAL_UART_IRQHandler+0x126>
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	f043 0208 	orr.w	r2, r3, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 81ed 	beq.w	8007b42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <HAL_UART_IRQHandler+0x14e>
 8007774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fd7e 	bl	8008282 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	bf0c      	ite	eq
 8007794:	2301      	moveq	r3, #1
 8007796:	2300      	movne	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <HAL_UART_IRQHandler+0x17a>
 80077aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d04f      	beq.n	8007852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fc86 	bl	80080c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d141      	bne.n	800784a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3314      	adds	r3, #20
 80077cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3314      	adds	r3, #20
 80077ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800780a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1d9      	bne.n	80077c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	2b00      	cmp	r3, #0
 8007818:	d013      	beq.n	8007842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	4a7d      	ldr	r2, [pc, #500]	; (8007a14 <HAL_UART_IRQHandler+0x3dc>)
 8007820:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa fb98 	bl	8001f5c <HAL_DMA_Abort_IT>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d016      	beq.n	8007860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007840:	e00e      	b.n	8007860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9a4 	bl	8007b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007848:	e00a      	b.n	8007860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9a0 	bl	8007b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007850:	e006      	b.n	8007860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f99c 	bl	8007b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800785e:	e170      	b.n	8007b42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	bf00      	nop
    return;
 8007862:	e16e      	b.n	8007b42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 814a 	bne.w	8007b02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007872:	f003 0310 	and.w	r3, r3, #16
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8143 	beq.w	8007b02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 813c 	beq.w	8007b02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	f040 80b4 	bne.w	8007a18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8140 	beq.w	8007b46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ce:	429a      	cmp	r2, r3
 80078d0:	f080 8139 	bcs.w	8007b46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e6:	f000 8088 	beq.w	80079fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	330c      	adds	r3, #12
 8007912:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007916:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800791a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800792e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1d9      	bne.n	80078ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3314      	adds	r3, #20
 800793c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3314      	adds	r3, #20
 8007956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800795a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800795e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800796c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e1      	bne.n	8007936 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3314      	adds	r3, #20
 8007978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3314      	adds	r3, #20
 8007992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800799c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e3      	bne.n	8007972 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ca:	f023 0310 	bic.w	r3, r3, #16
 80079ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80079de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e3      	bne.n	80079b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fa fa41 	bl	8001e7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f8ca 	bl	8007ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a10:	e099      	b.n	8007b46 <HAL_UART_IRQHandler+0x50e>
 8007a12:	bf00      	nop
 8007a14:	0800818b 	.word	0x0800818b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 808b 	beq.w	8007b4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8086 	beq.w	8007b4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	330c      	adds	r3, #12
 8007a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a62:	647a      	str	r2, [r7, #68]	; 0x44
 8007a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e3      	bne.n	8007a3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	623b      	str	r3, [r7, #32]
   return(result);
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3314      	adds	r3, #20
 8007a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e3      	bne.n	8007a76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0310 	bic.w	r3, r3, #16
 8007ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ae0:	61fa      	str	r2, [r7, #28]
 8007ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	69b9      	ldr	r1, [r7, #24]
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	617b      	str	r3, [r7, #20]
   return(result);
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e3      	bne.n	8007abc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f852 	bl	8007ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b00:	e023      	b.n	8007b4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d009      	beq.n	8007b22 <HAL_UART_IRQHandler+0x4ea>
 8007b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fb49 	bl	80081b2 <UART_Transmit_IT>
    return;
 8007b20:	e014      	b.n	8007b4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00e      	beq.n	8007b4c <HAL_UART_IRQHandler+0x514>
 8007b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d008      	beq.n	8007b4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fb89 	bl	8008252 <UART_EndTransmit_IT>
    return;
 8007b40:	e004      	b.n	8007b4c <HAL_UART_IRQHandler+0x514>
    return;
 8007b42:	bf00      	nop
 8007b44:	e002      	b.n	8007b4c <HAL_UART_IRQHandler+0x514>
      return;
 8007b46:	bf00      	nop
 8007b48:	e000      	b.n	8007b4c <HAL_UART_IRQHandler+0x514>
      return;
 8007b4a:	bf00      	nop
  }
}
 8007b4c:	37e8      	adds	r7, #232	; 0xe8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop

08007b54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b090      	sub	sp, #64	; 0x40
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d137      	bne.n	8007c48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bda:	2200      	movs	r2, #0
 8007bdc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3314      	adds	r3, #20
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	623b      	str	r3, [r7, #32]
   return(result);
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3314      	adds	r3, #20
 8007bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	330c      	adds	r3, #12
 8007c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c32:	61fa      	str	r2, [r7, #28]
 8007c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	69b9      	ldr	r1, [r7, #24]
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e5      	bne.n	8007c12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c46:	e002      	b.n	8007c4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c4a:	f7ff ff83 	bl	8007b54 <HAL_UART_TxCpltCallback>
}
 8007c4e:	bf00      	nop
 8007c50:	3740      	adds	r7, #64	; 0x40
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff ff7f 	bl	8007b68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b09c      	sub	sp, #112	; 0x70
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d172      	bne.n	8007d74 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c90:	2200      	movs	r2, #0
 8007c92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	330c      	adds	r3, #12
 8007c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e5      	bne.n	8007c94 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cda:	f023 0301 	bic.w	r3, r3, #1
 8007cde:	667b      	str	r3, [r7, #100]	; 0x64
 8007ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ce8:	647a      	str	r2, [r7, #68]	; 0x44
 8007cea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3314      	adds	r3, #20
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d12:	663b      	str	r3, [r7, #96]	; 0x60
 8007d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d1c:	633a      	str	r2, [r7, #48]	; 0x30
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e5      	bne.n	8007cfc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d119      	bne.n	8007d74 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0310 	bic.w	r3, r3, #16
 8007d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d60:	61fa      	str	r2, [r7, #28]
 8007d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	69b9      	ldr	r1, [r7, #24]
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e5      	bne.n	8007d40 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d106      	bne.n	8007d8a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d80:	4619      	mov	r1, r3
 8007d82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d84:	f7ff ff0e 	bl	8007ba4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d88:	e002      	b.n	8007d90 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007d8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d8c:	f7f8 fc22 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8007d90:	bf00      	nop
 8007d92:	3770      	adds	r7, #112	; 0x70
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d108      	bne.n	8007dc0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007db2:	085b      	lsrs	r3, r3, #1
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	4619      	mov	r1, r3
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff fef3 	bl	8007ba4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dbe:	e002      	b.n	8007dc6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f7ff fedb 	bl	8007b7c <HAL_UART_RxHalfCpltCallback>
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dea:	2b80      	cmp	r3, #128	; 0x80
 8007dec:	bf0c      	ite	eq
 8007dee:	2301      	moveq	r3, #1
 8007df0:	2300      	movne	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b21      	cmp	r3, #33	; 0x21
 8007e00:	d108      	bne.n	8007e14 <UART_DMAError+0x46>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007e0e:	68b8      	ldr	r0, [r7, #8]
 8007e10:	f000 f930 	bl	8008074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b40      	cmp	r3, #64	; 0x40
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b22      	cmp	r3, #34	; 0x22
 8007e34:	d108      	bne.n	8007e48 <UART_DMAError+0x7a>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007e42:	68b8      	ldr	r0, [r7, #8]
 8007e44:	f000 f93e 	bl	80080c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	f043 0210 	orr.w	r2, r3, #16
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e54:	68b8      	ldr	r0, [r7, #8]
 8007e56:	f7ff fe9b 	bl	8007b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b090      	sub	sp, #64	; 0x40
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e72:	e050      	b.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d04c      	beq.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e82:	f7f9 fdb3 	bl	80019ec <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d241      	bcs.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	330c      	adds	r3, #12
 8007e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	330c      	adds	r3, #12
 8007eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eb2:	637a      	str	r2, [r7, #52]	; 0x34
 8007eb4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e5      	bne.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3314      	adds	r3, #20
 8007ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3314      	adds	r3, #20
 8007ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ee6:	623a      	str	r2, [r7, #32]
 8007ee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	69f9      	ldr	r1, [r7, #28]
 8007eec:	6a3a      	ldr	r2, [r7, #32]
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e5      	bne.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e00f      	b.n	8007f36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	bf0c      	ite	eq
 8007f26:	2301      	moveq	r3, #1
 8007f28:	2300      	movne	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d09f      	beq.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3740      	adds	r7, #64	; 0x40
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b098      	sub	sp, #96	; 0x60
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	88fa      	ldrh	r2, [r7, #6]
 8007f58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2222      	movs	r2, #34	; 0x22
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	4a3e      	ldr	r2, [pc, #248]	; (8008068 <UART_Start_Receive_DMA+0x128>)
 8007f6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	4a3d      	ldr	r2, [pc, #244]	; (800806c <UART_Start_Receive_DMA+0x12c>)
 8007f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	4a3c      	ldr	r2, [pc, #240]	; (8008070 <UART_Start_Receive_DMA+0x130>)
 8007f7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	2200      	movs	r2, #0
 8007f86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007f88:	f107 0308 	add.w	r3, r7, #8
 8007f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	f7f9 ff14 	bl	8001dcc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	613b      	str	r3, [r7, #16]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	330c      	adds	r3, #12
 8007fc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330c      	adds	r3, #12
 8007fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fe2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e5      	bne.n	8007fc2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3314      	adds	r3, #20
 8007ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	657b      	str	r3, [r7, #84]	; 0x54
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3314      	adds	r3, #20
 8008014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008016:	63ba      	str	r2, [r7, #56]	; 0x38
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800801c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e5      	bne.n	8007ff6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3314      	adds	r3, #20
 8008030:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	617b      	str	r3, [r7, #20]
   return(result);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008040:	653b      	str	r3, [r7, #80]	; 0x50
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3314      	adds	r3, #20
 8008048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800804a:	627a      	str	r2, [r7, #36]	; 0x24
 800804c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	6a39      	ldr	r1, [r7, #32]
 8008050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	61fb      	str	r3, [r7, #28]
   return(result);
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e5      	bne.n	800802a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3760      	adds	r7, #96	; 0x60
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	08007c73 	.word	0x08007c73
 800806c:	08007d99 	.word	0x08007d99
 8008070:	08007dcf 	.word	0x08007dcf

08008074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008074:	b480      	push	{r7}
 8008076:	b089      	sub	sp, #36	; 0x24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	330c      	adds	r3, #12
 8008082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	60bb      	str	r3, [r7, #8]
   return(result);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	330c      	adds	r3, #12
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	61ba      	str	r2, [r7, #24]
 800809e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6979      	ldr	r1, [r7, #20]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	613b      	str	r3, [r7, #16]
   return(result);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e5      	bne.n	800807c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80080b8:	bf00      	nop
 80080ba:	3724      	adds	r7, #36	; 0x24
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b095      	sub	sp, #84	; 0x54
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	330c      	adds	r3, #12
 80080d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	e853 3f00 	ldrex	r3, [r3]
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	330c      	adds	r3, #12
 80080ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080ec:	643a      	str	r2, [r7, #64]	; 0x40
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e5      	bne.n	80080cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3314      	adds	r3, #20
 8008106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f023 0301 	bic.w	r3, r3, #1
 8008116:	64bb      	str	r3, [r7, #72]	; 0x48
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3314      	adds	r3, #20
 800811e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e5      	bne.n	8008100 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008138:	2b01      	cmp	r3, #1
 800813a:	d119      	bne.n	8008170 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	330c      	adds	r3, #12
 8008142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	60bb      	str	r3, [r7, #8]
   return(result);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f023 0310 	bic.w	r3, r3, #16
 8008152:	647b      	str	r3, [r7, #68]	; 0x44
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	330c      	adds	r3, #12
 800815a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800815c:	61ba      	str	r2, [r7, #24]
 800815e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6979      	ldr	r1, [r7, #20]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	613b      	str	r3, [r7, #16]
   return(result);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e5      	bne.n	800813c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800817e:	bf00      	nop
 8008180:	3754      	adds	r7, #84	; 0x54
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff fcf3 	bl	8007b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b21      	cmp	r3, #33	; 0x21
 80081c4:	d13e      	bne.n	8008244 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d114      	bne.n	80081fa <UART_Transmit_IT+0x48>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d110      	bne.n	80081fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	1c9a      	adds	r2, r3, #2
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	621a      	str	r2, [r3, #32]
 80081f8:	e008      	b.n	800820c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	1c59      	adds	r1, r3, #1
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6211      	str	r1, [r2, #32]
 8008204:	781a      	ldrb	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29b      	uxth	r3, r3
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	4619      	mov	r1, r3
 800821a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10f      	bne.n	8008240 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800822e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800823e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e000      	b.n	8008246 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008244:	2302      	movs	r3, #2
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008268:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fc6e 	bl	8007b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b08c      	sub	sp, #48	; 0x30
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b22      	cmp	r3, #34	; 0x22
 8008294:	f040 80ab 	bne.w	80083ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a0:	d117      	bne.n	80082d2 <UART_Receive_IT+0x50>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d113      	bne.n	80082d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ca:	1c9a      	adds	r2, r3, #2
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	629a      	str	r2, [r3, #40]	; 0x28
 80082d0:	e026      	b.n	8008320 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082e4:	d007      	beq.n	80082f6 <UART_Receive_IT+0x74>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <UART_Receive_IT+0x82>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	e008      	b.n	8008316 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008310:	b2da      	uxtb	r2, r3
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29b      	uxth	r3, r3
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4619      	mov	r1, r3
 800832e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008330:	2b00      	cmp	r3, #0
 8008332:	d15a      	bne.n	80083ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0220 	bic.w	r2, r2, #32
 8008342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695a      	ldr	r2, [r3, #20]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0201 	bic.w	r2, r2, #1
 8008362:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	2b01      	cmp	r3, #1
 8008372:	d135      	bne.n	80083e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	330c      	adds	r3, #12
 8008380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	613b      	str	r3, [r7, #16]
   return(result);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f023 0310 	bic.w	r3, r3, #16
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839a:	623a      	str	r2, [r7, #32]
 800839c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	69f9      	ldr	r1, [r7, #28]
 80083a0:	6a3a      	ldr	r2, [r7, #32]
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e5      	bne.n	800837a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0310 	and.w	r3, r3, #16
 80083b8:	2b10      	cmp	r3, #16
 80083ba:	d10a      	bne.n	80083d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff fbe3 	bl	8007ba4 <HAL_UARTEx_RxEventCallback>
 80083de:	e002      	b.n	80083e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7f8 f8f7 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e002      	b.n	80083f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e000      	b.n	80083f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80083ee:	2302      	movs	r3, #2
  }
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3730      	adds	r7, #48	; 0x30
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083fc:	b0c0      	sub	sp, #256	; 0x100
 80083fe:	af00      	add	r7, sp, #0
 8008400:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008414:	68d9      	ldr	r1, [r3, #12]
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	ea40 0301 	orr.w	r3, r0, r1
 8008420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	431a      	orrs	r2, r3
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	431a      	orrs	r2, r3
 8008438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008450:	f021 010c 	bic.w	r1, r1, #12
 8008454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800845e:	430b      	orrs	r3, r1
 8008460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800846e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008472:	6999      	ldr	r1, [r3, #24]
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	ea40 0301 	orr.w	r3, r0, r1
 800847e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b8f      	ldr	r3, [pc, #572]	; (80086c4 <UART_SetConfig+0x2cc>)
 8008488:	429a      	cmp	r2, r3
 800848a:	d005      	beq.n	8008498 <UART_SetConfig+0xa0>
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	4b8d      	ldr	r3, [pc, #564]	; (80086c8 <UART_SetConfig+0x2d0>)
 8008494:	429a      	cmp	r2, r3
 8008496:	d104      	bne.n	80084a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008498:	f7fe f868 	bl	800656c <HAL_RCC_GetPCLK2Freq>
 800849c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80084a0:	e003      	b.n	80084aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084a2:	f7fe f84f 	bl	8006544 <HAL_RCC_GetPCLK1Freq>
 80084a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b4:	f040 810c 	bne.w	80086d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80084c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80084ca:	4622      	mov	r2, r4
 80084cc:	462b      	mov	r3, r5
 80084ce:	1891      	adds	r1, r2, r2
 80084d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80084d2:	415b      	adcs	r3, r3
 80084d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084da:	4621      	mov	r1, r4
 80084dc:	eb12 0801 	adds.w	r8, r2, r1
 80084e0:	4629      	mov	r1, r5
 80084e2:	eb43 0901 	adc.w	r9, r3, r1
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084fa:	4690      	mov	r8, r2
 80084fc:	4699      	mov	r9, r3
 80084fe:	4623      	mov	r3, r4
 8008500:	eb18 0303 	adds.w	r3, r8, r3
 8008504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008508:	462b      	mov	r3, r5
 800850a:	eb49 0303 	adc.w	r3, r9, r3
 800850e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800851e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008526:	460b      	mov	r3, r1
 8008528:	18db      	adds	r3, r3, r3
 800852a:	653b      	str	r3, [r7, #80]	; 0x50
 800852c:	4613      	mov	r3, r2
 800852e:	eb42 0303 	adc.w	r3, r2, r3
 8008532:	657b      	str	r3, [r7, #84]	; 0x54
 8008534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800853c:	f7f7 fea8 	bl	8000290 <__aeabi_uldivmod>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4b61      	ldr	r3, [pc, #388]	; (80086cc <UART_SetConfig+0x2d4>)
 8008546:	fba3 2302 	umull	r2, r3, r3, r2
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	011c      	lsls	r4, r3, #4
 800854e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008552:	2200      	movs	r2, #0
 8008554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008558:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800855c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008560:	4642      	mov	r2, r8
 8008562:	464b      	mov	r3, r9
 8008564:	1891      	adds	r1, r2, r2
 8008566:	64b9      	str	r1, [r7, #72]	; 0x48
 8008568:	415b      	adcs	r3, r3
 800856a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800856c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008570:	4641      	mov	r1, r8
 8008572:	eb12 0a01 	adds.w	sl, r2, r1
 8008576:	4649      	mov	r1, r9
 8008578:	eb43 0b01 	adc.w	fp, r3, r1
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800858c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008590:	4692      	mov	sl, r2
 8008592:	469b      	mov	fp, r3
 8008594:	4643      	mov	r3, r8
 8008596:	eb1a 0303 	adds.w	r3, sl, r3
 800859a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800859e:	464b      	mov	r3, r9
 80085a0:	eb4b 0303 	adc.w	r3, fp, r3
 80085a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80085b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80085bc:	460b      	mov	r3, r1
 80085be:	18db      	adds	r3, r3, r3
 80085c0:	643b      	str	r3, [r7, #64]	; 0x40
 80085c2:	4613      	mov	r3, r2
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80085d2:	f7f7 fe5d 	bl	8000290 <__aeabi_uldivmod>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	4b3b      	ldr	r3, [pc, #236]	; (80086cc <UART_SetConfig+0x2d4>)
 80085de:	fba3 2301 	umull	r2, r3, r3, r1
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	2264      	movs	r2, #100	; 0x64
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
 80085ea:	1acb      	subs	r3, r1, r3
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80085f2:	4b36      	ldr	r3, [pc, #216]	; (80086cc <UART_SetConfig+0x2d4>)
 80085f4:	fba3 2302 	umull	r2, r3, r3, r2
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008600:	441c      	add	r4, r3
 8008602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008606:	2200      	movs	r2, #0
 8008608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800860c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	1891      	adds	r1, r2, r2
 800861a:	63b9      	str	r1, [r7, #56]	; 0x38
 800861c:	415b      	adcs	r3, r3
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008624:	4641      	mov	r1, r8
 8008626:	1851      	adds	r1, r2, r1
 8008628:	6339      	str	r1, [r7, #48]	; 0x30
 800862a:	4649      	mov	r1, r9
 800862c:	414b      	adcs	r3, r1
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800863c:	4659      	mov	r1, fp
 800863e:	00cb      	lsls	r3, r1, #3
 8008640:	4651      	mov	r1, sl
 8008642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008646:	4651      	mov	r1, sl
 8008648:	00ca      	lsls	r2, r1, #3
 800864a:	4610      	mov	r0, r2
 800864c:	4619      	mov	r1, r3
 800864e:	4603      	mov	r3, r0
 8008650:	4642      	mov	r2, r8
 8008652:	189b      	adds	r3, r3, r2
 8008654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008658:	464b      	mov	r3, r9
 800865a:	460a      	mov	r2, r1
 800865c:	eb42 0303 	adc.w	r3, r2, r3
 8008660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008670:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008678:	460b      	mov	r3, r1
 800867a:	18db      	adds	r3, r3, r3
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
 800867e:	4613      	mov	r3, r2
 8008680:	eb42 0303 	adc.w	r3, r2, r3
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800868a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800868e:	f7f7 fdff 	bl	8000290 <__aeabi_uldivmod>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <UART_SetConfig+0x2d4>)
 8008698:	fba3 1302 	umull	r1, r3, r3, r2
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	2164      	movs	r1, #100	; 0x64
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	3332      	adds	r3, #50	; 0x32
 80086aa:	4a08      	ldr	r2, [pc, #32]	; (80086cc <UART_SetConfig+0x2d4>)
 80086ac:	fba2 2303 	umull	r2, r3, r2, r3
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	f003 0207 	and.w	r2, r3, #7
 80086b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4422      	add	r2, r4
 80086be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086c0:	e105      	b.n	80088ce <UART_SetConfig+0x4d6>
 80086c2:	bf00      	nop
 80086c4:	40011000 	.word	0x40011000
 80086c8:	40011400 	.word	0x40011400
 80086cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80086e2:	4642      	mov	r2, r8
 80086e4:	464b      	mov	r3, r9
 80086e6:	1891      	adds	r1, r2, r2
 80086e8:	6239      	str	r1, [r7, #32]
 80086ea:	415b      	adcs	r3, r3
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
 80086ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086f2:	4641      	mov	r1, r8
 80086f4:	1854      	adds	r4, r2, r1
 80086f6:	4649      	mov	r1, r9
 80086f8:	eb43 0501 	adc.w	r5, r3, r1
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	f04f 0300 	mov.w	r3, #0
 8008704:	00eb      	lsls	r3, r5, #3
 8008706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800870a:	00e2      	lsls	r2, r4, #3
 800870c:	4614      	mov	r4, r2
 800870e:	461d      	mov	r5, r3
 8008710:	4643      	mov	r3, r8
 8008712:	18e3      	adds	r3, r4, r3
 8008714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008718:	464b      	mov	r3, r9
 800871a:	eb45 0303 	adc.w	r3, r5, r3
 800871e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800872e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008732:	f04f 0200 	mov.w	r2, #0
 8008736:	f04f 0300 	mov.w	r3, #0
 800873a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800873e:	4629      	mov	r1, r5
 8008740:	008b      	lsls	r3, r1, #2
 8008742:	4621      	mov	r1, r4
 8008744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008748:	4621      	mov	r1, r4
 800874a:	008a      	lsls	r2, r1, #2
 800874c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008750:	f7f7 fd9e 	bl	8000290 <__aeabi_uldivmod>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4b60      	ldr	r3, [pc, #384]	; (80088dc <UART_SetConfig+0x4e4>)
 800875a:	fba3 2302 	umull	r2, r3, r3, r2
 800875e:	095b      	lsrs	r3, r3, #5
 8008760:	011c      	lsls	r4, r3, #4
 8008762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008766:	2200      	movs	r2, #0
 8008768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800876c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008774:	4642      	mov	r2, r8
 8008776:	464b      	mov	r3, r9
 8008778:	1891      	adds	r1, r2, r2
 800877a:	61b9      	str	r1, [r7, #24]
 800877c:	415b      	adcs	r3, r3
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008784:	4641      	mov	r1, r8
 8008786:	1851      	adds	r1, r2, r1
 8008788:	6139      	str	r1, [r7, #16]
 800878a:	4649      	mov	r1, r9
 800878c:	414b      	adcs	r3, r1
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800879c:	4659      	mov	r1, fp
 800879e:	00cb      	lsls	r3, r1, #3
 80087a0:	4651      	mov	r1, sl
 80087a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087a6:	4651      	mov	r1, sl
 80087a8:	00ca      	lsls	r2, r1, #3
 80087aa:	4610      	mov	r0, r2
 80087ac:	4619      	mov	r1, r3
 80087ae:	4603      	mov	r3, r0
 80087b0:	4642      	mov	r2, r8
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087b8:	464b      	mov	r3, r9
 80087ba:	460a      	mov	r2, r1
 80087bc:	eb42 0303 	adc.w	r3, r2, r3
 80087c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80087ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80087dc:	4649      	mov	r1, r9
 80087de:	008b      	lsls	r3, r1, #2
 80087e0:	4641      	mov	r1, r8
 80087e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087e6:	4641      	mov	r1, r8
 80087e8:	008a      	lsls	r2, r1, #2
 80087ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80087ee:	f7f7 fd4f 	bl	8000290 <__aeabi_uldivmod>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4b39      	ldr	r3, [pc, #228]	; (80088dc <UART_SetConfig+0x4e4>)
 80087f8:	fba3 1302 	umull	r1, r3, r3, r2
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	2164      	movs	r1, #100	; 0x64
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	3332      	adds	r3, #50	; 0x32
 800880a:	4a34      	ldr	r2, [pc, #208]	; (80088dc <UART_SetConfig+0x4e4>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	095b      	lsrs	r3, r3, #5
 8008812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008816:	441c      	add	r4, r3
 8008818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800881c:	2200      	movs	r2, #0
 800881e:	673b      	str	r3, [r7, #112]	; 0x70
 8008820:	677a      	str	r2, [r7, #116]	; 0x74
 8008822:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008826:	4642      	mov	r2, r8
 8008828:	464b      	mov	r3, r9
 800882a:	1891      	adds	r1, r2, r2
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	415b      	adcs	r3, r3
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008836:	4641      	mov	r1, r8
 8008838:	1851      	adds	r1, r2, r1
 800883a:	6039      	str	r1, [r7, #0]
 800883c:	4649      	mov	r1, r9
 800883e:	414b      	adcs	r3, r1
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	f04f 0300 	mov.w	r3, #0
 800884a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800884e:	4659      	mov	r1, fp
 8008850:	00cb      	lsls	r3, r1, #3
 8008852:	4651      	mov	r1, sl
 8008854:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008858:	4651      	mov	r1, sl
 800885a:	00ca      	lsls	r2, r1, #3
 800885c:	4610      	mov	r0, r2
 800885e:	4619      	mov	r1, r3
 8008860:	4603      	mov	r3, r0
 8008862:	4642      	mov	r2, r8
 8008864:	189b      	adds	r3, r3, r2
 8008866:	66bb      	str	r3, [r7, #104]	; 0x68
 8008868:	464b      	mov	r3, r9
 800886a:	460a      	mov	r2, r1
 800886c:	eb42 0303 	adc.w	r3, r2, r3
 8008870:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	663b      	str	r3, [r7, #96]	; 0x60
 800887c:	667a      	str	r2, [r7, #100]	; 0x64
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800888a:	4649      	mov	r1, r9
 800888c:	008b      	lsls	r3, r1, #2
 800888e:	4641      	mov	r1, r8
 8008890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008894:	4641      	mov	r1, r8
 8008896:	008a      	lsls	r2, r1, #2
 8008898:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800889c:	f7f7 fcf8 	bl	8000290 <__aeabi_uldivmod>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <UART_SetConfig+0x4e4>)
 80088a6:	fba3 1302 	umull	r1, r3, r3, r2
 80088aa:	095b      	lsrs	r3, r3, #5
 80088ac:	2164      	movs	r1, #100	; 0x64
 80088ae:	fb01 f303 	mul.w	r3, r1, r3
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	3332      	adds	r3, #50	; 0x32
 80088b8:	4a08      	ldr	r2, [pc, #32]	; (80088dc <UART_SetConfig+0x4e4>)
 80088ba:	fba2 2303 	umull	r2, r3, r2, r3
 80088be:	095b      	lsrs	r3, r3, #5
 80088c0:	f003 020f 	and.w	r2, r3, #15
 80088c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4422      	add	r2, r4
 80088cc:	609a      	str	r2, [r3, #8]
}
 80088ce:	bf00      	nop
 80088d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80088d4:	46bd      	mov	sp, r7
 80088d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088da:	bf00      	nop
 80088dc:	51eb851f 	.word	0x51eb851f

080088e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80088e6:	4b8d      	ldr	r3, [pc, #564]	; (8008b1c <MX_LWIP_Init+0x23c>)
 80088e8:	22c0      	movs	r2, #192	; 0xc0
 80088ea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80088ec:	4b8b      	ldr	r3, [pc, #556]	; (8008b1c <MX_LWIP_Init+0x23c>)
 80088ee:	22a8      	movs	r2, #168	; 0xa8
 80088f0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80088f2:	4b8a      	ldr	r3, [pc, #552]	; (8008b1c <MX_LWIP_Init+0x23c>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 132;
 80088f8:	4b88      	ldr	r3, [pc, #544]	; (8008b1c <MX_LWIP_Init+0x23c>)
 80088fa:	2284      	movs	r2, #132	; 0x84
 80088fc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80088fe:	4b88      	ldr	r3, [pc, #544]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008900:	22ff      	movs	r2, #255	; 0xff
 8008902:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008904:	4b86      	ldr	r3, [pc, #536]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008906:	22ff      	movs	r2, #255	; 0xff
 8008908:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800890a:	4b85      	ldr	r3, [pc, #532]	; (8008b20 <MX_LWIP_Init+0x240>)
 800890c:	22ff      	movs	r2, #255	; 0xff
 800890e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008910:	4b83      	ldr	r3, [pc, #524]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008912:	2200      	movs	r2, #0
 8008914:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008916:	4b83      	ldr	r3, [pc, #524]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008918:	22c0      	movs	r2, #192	; 0xc0
 800891a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800891c:	4b81      	ldr	r3, [pc, #516]	; (8008b24 <MX_LWIP_Init+0x244>)
 800891e:	22a8      	movs	r2, #168	; 0xa8
 8008920:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008922:	4b80      	ldr	r3, [pc, #512]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008924:	2200      	movs	r2, #0
 8008926:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008928:	4b7e      	ldr	r3, [pc, #504]	; (8008b24 <MX_LWIP_Init+0x244>)
 800892a:	2201      	movs	r2, #1
 800892c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800892e:	f000 fcdf 	bl	80092f0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008932:	4b7a      	ldr	r3, [pc, #488]	; (8008b1c <MX_LWIP_Init+0x23c>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	061a      	lsls	r2, r3, #24
 8008938:	4b78      	ldr	r3, [pc, #480]	; (8008b1c <MX_LWIP_Init+0x23c>)
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	041b      	lsls	r3, r3, #16
 800893e:	431a      	orrs	r2, r3
 8008940:	4b76      	ldr	r3, [pc, #472]	; (8008b1c <MX_LWIP_Init+0x23c>)
 8008942:	789b      	ldrb	r3, [r3, #2]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	4313      	orrs	r3, r2
 8008948:	4a74      	ldr	r2, [pc, #464]	; (8008b1c <MX_LWIP_Init+0x23c>)
 800894a:	78d2      	ldrb	r2, [r2, #3]
 800894c:	4313      	orrs	r3, r2
 800894e:	061a      	lsls	r2, r3, #24
 8008950:	4b72      	ldr	r3, [pc, #456]	; (8008b1c <MX_LWIP_Init+0x23c>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	0619      	lsls	r1, r3, #24
 8008956:	4b71      	ldr	r3, [pc, #452]	; (8008b1c <MX_LWIP_Init+0x23c>)
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	041b      	lsls	r3, r3, #16
 800895c:	4319      	orrs	r1, r3
 800895e:	4b6f      	ldr	r3, [pc, #444]	; (8008b1c <MX_LWIP_Init+0x23c>)
 8008960:	789b      	ldrb	r3, [r3, #2]
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	430b      	orrs	r3, r1
 8008966:	496d      	ldr	r1, [pc, #436]	; (8008b1c <MX_LWIP_Init+0x23c>)
 8008968:	78c9      	ldrb	r1, [r1, #3]
 800896a:	430b      	orrs	r3, r1
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008972:	431a      	orrs	r2, r3
 8008974:	4b69      	ldr	r3, [pc, #420]	; (8008b1c <MX_LWIP_Init+0x23c>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	0619      	lsls	r1, r3, #24
 800897a:	4b68      	ldr	r3, [pc, #416]	; (8008b1c <MX_LWIP_Init+0x23c>)
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	041b      	lsls	r3, r3, #16
 8008980:	4319      	orrs	r1, r3
 8008982:	4b66      	ldr	r3, [pc, #408]	; (8008b1c <MX_LWIP_Init+0x23c>)
 8008984:	789b      	ldrb	r3, [r3, #2]
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	430b      	orrs	r3, r1
 800898a:	4964      	ldr	r1, [pc, #400]	; (8008b1c <MX_LWIP_Init+0x23c>)
 800898c:	78c9      	ldrb	r1, [r1, #3]
 800898e:	430b      	orrs	r3, r1
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008996:	431a      	orrs	r2, r3
 8008998:	4b60      	ldr	r3, [pc, #384]	; (8008b1c <MX_LWIP_Init+0x23c>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	0619      	lsls	r1, r3, #24
 800899e:	4b5f      	ldr	r3, [pc, #380]	; (8008b1c <MX_LWIP_Init+0x23c>)
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	041b      	lsls	r3, r3, #16
 80089a4:	4319      	orrs	r1, r3
 80089a6:	4b5d      	ldr	r3, [pc, #372]	; (8008b1c <MX_LWIP_Init+0x23c>)
 80089a8:	789b      	ldrb	r3, [r3, #2]
 80089aa:	021b      	lsls	r3, r3, #8
 80089ac:	430b      	orrs	r3, r1
 80089ae:	495b      	ldr	r1, [pc, #364]	; (8008b1c <MX_LWIP_Init+0x23c>)
 80089b0:	78c9      	ldrb	r1, [r1, #3]
 80089b2:	430b      	orrs	r3, r1
 80089b4:	0e1b      	lsrs	r3, r3, #24
 80089b6:	4313      	orrs	r3, r2
 80089b8:	4a5b      	ldr	r2, [pc, #364]	; (8008b28 <MX_LWIP_Init+0x248>)
 80089ba:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80089bc:	4b58      	ldr	r3, [pc, #352]	; (8008b20 <MX_LWIP_Init+0x240>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	061a      	lsls	r2, r3, #24
 80089c2:	4b57      	ldr	r3, [pc, #348]	; (8008b20 <MX_LWIP_Init+0x240>)
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	041b      	lsls	r3, r3, #16
 80089c8:	431a      	orrs	r2, r3
 80089ca:	4b55      	ldr	r3, [pc, #340]	; (8008b20 <MX_LWIP_Init+0x240>)
 80089cc:	789b      	ldrb	r3, [r3, #2]
 80089ce:	021b      	lsls	r3, r3, #8
 80089d0:	4313      	orrs	r3, r2
 80089d2:	4a53      	ldr	r2, [pc, #332]	; (8008b20 <MX_LWIP_Init+0x240>)
 80089d4:	78d2      	ldrb	r2, [r2, #3]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	061a      	lsls	r2, r3, #24
 80089da:	4b51      	ldr	r3, [pc, #324]	; (8008b20 <MX_LWIP_Init+0x240>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	0619      	lsls	r1, r3, #24
 80089e0:	4b4f      	ldr	r3, [pc, #316]	; (8008b20 <MX_LWIP_Init+0x240>)
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	041b      	lsls	r3, r3, #16
 80089e6:	4319      	orrs	r1, r3
 80089e8:	4b4d      	ldr	r3, [pc, #308]	; (8008b20 <MX_LWIP_Init+0x240>)
 80089ea:	789b      	ldrb	r3, [r3, #2]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	430b      	orrs	r3, r1
 80089f0:	494b      	ldr	r1, [pc, #300]	; (8008b20 <MX_LWIP_Init+0x240>)
 80089f2:	78c9      	ldrb	r1, [r1, #3]
 80089f4:	430b      	orrs	r3, r1
 80089f6:	021b      	lsls	r3, r3, #8
 80089f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089fc:	431a      	orrs	r2, r3
 80089fe:	4b48      	ldr	r3, [pc, #288]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	0619      	lsls	r1, r3, #24
 8008a04:	4b46      	ldr	r3, [pc, #280]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	041b      	lsls	r3, r3, #16
 8008a0a:	4319      	orrs	r1, r3
 8008a0c:	4b44      	ldr	r3, [pc, #272]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008a0e:	789b      	ldrb	r3, [r3, #2]
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	430b      	orrs	r3, r1
 8008a14:	4942      	ldr	r1, [pc, #264]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008a16:	78c9      	ldrb	r1, [r1, #3]
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a20:	431a      	orrs	r2, r3
 8008a22:	4b3f      	ldr	r3, [pc, #252]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	0619      	lsls	r1, r3, #24
 8008a28:	4b3d      	ldr	r3, [pc, #244]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	041b      	lsls	r3, r3, #16
 8008a2e:	4319      	orrs	r1, r3
 8008a30:	4b3b      	ldr	r3, [pc, #236]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008a32:	789b      	ldrb	r3, [r3, #2]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	430b      	orrs	r3, r1
 8008a38:	4939      	ldr	r1, [pc, #228]	; (8008b20 <MX_LWIP_Init+0x240>)
 8008a3a:	78c9      	ldrb	r1, [r1, #3]
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	0e1b      	lsrs	r3, r3, #24
 8008a40:	4313      	orrs	r3, r2
 8008a42:	4a3a      	ldr	r2, [pc, #232]	; (8008b2c <MX_LWIP_Init+0x24c>)
 8008a44:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008a46:	4b37      	ldr	r3, [pc, #220]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	061a      	lsls	r2, r3, #24
 8008a4c:	4b35      	ldr	r3, [pc, #212]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a4e:	785b      	ldrb	r3, [r3, #1]
 8008a50:	041b      	lsls	r3, r3, #16
 8008a52:	431a      	orrs	r2, r3
 8008a54:	4b33      	ldr	r3, [pc, #204]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a56:	789b      	ldrb	r3, [r3, #2]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	4a31      	ldr	r2, [pc, #196]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a5e:	78d2      	ldrb	r2, [r2, #3]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	061a      	lsls	r2, r3, #24
 8008a64:	4b2f      	ldr	r3, [pc, #188]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	0619      	lsls	r1, r3, #24
 8008a6a:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	041b      	lsls	r3, r3, #16
 8008a70:	4319      	orrs	r1, r3
 8008a72:	4b2c      	ldr	r3, [pc, #176]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a74:	789b      	ldrb	r3, [r3, #2]
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	492a      	ldr	r1, [pc, #168]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a7c:	78c9      	ldrb	r1, [r1, #3]
 8008a7e:	430b      	orrs	r3, r1
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a86:	431a      	orrs	r2, r3
 8008a88:	4b26      	ldr	r3, [pc, #152]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	0619      	lsls	r1, r3, #24
 8008a8e:	4b25      	ldr	r3, [pc, #148]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a90:	785b      	ldrb	r3, [r3, #1]
 8008a92:	041b      	lsls	r3, r3, #16
 8008a94:	4319      	orrs	r1, r3
 8008a96:	4b23      	ldr	r3, [pc, #140]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008a98:	789b      	ldrb	r3, [r3, #2]
 8008a9a:	021b      	lsls	r3, r3, #8
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	4921      	ldr	r1, [pc, #132]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008aa0:	78c9      	ldrb	r1, [r1, #3]
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	0a1b      	lsrs	r3, r3, #8
 8008aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	4b1d      	ldr	r3, [pc, #116]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	0619      	lsls	r1, r3, #24
 8008ab2:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	041b      	lsls	r3, r3, #16
 8008ab8:	4319      	orrs	r1, r3
 8008aba:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008abc:	789b      	ldrb	r3, [r3, #2]
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	4918      	ldr	r1, [pc, #96]	; (8008b24 <MX_LWIP_Init+0x244>)
 8008ac4:	78c9      	ldrb	r1, [r1, #3]
 8008ac6:	430b      	orrs	r3, r1
 8008ac8:	0e1b      	lsrs	r3, r3, #24
 8008aca:	4313      	orrs	r3, r2
 8008acc:	4a18      	ldr	r2, [pc, #96]	; (8008b30 <MX_LWIP_Init+0x250>)
 8008ace:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008ad0:	4b18      	ldr	r3, [pc, #96]	; (8008b34 <MX_LWIP_Init+0x254>)
 8008ad2:	9302      	str	r3, [sp, #8]
 8008ad4:	4b18      	ldr	r3, [pc, #96]	; (8008b38 <MX_LWIP_Init+0x258>)
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <MX_LWIP_Init+0x250>)
 8008ade:	4a13      	ldr	r2, [pc, #76]	; (8008b2c <MX_LWIP_Init+0x24c>)
 8008ae0:	4911      	ldr	r1, [pc, #68]	; (8008b28 <MX_LWIP_Init+0x248>)
 8008ae2:	4816      	ldr	r0, [pc, #88]	; (8008b3c <MX_LWIP_Init+0x25c>)
 8008ae4:	f001 f8aa 	bl	8009c3c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008ae8:	4814      	ldr	r0, [pc, #80]	; (8008b3c <MX_LWIP_Init+0x25c>)
 8008aea:	f001 fa59 	bl	8009fa0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <MX_LWIP_Init+0x25c>)
 8008af0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008af4:	089b      	lsrs	r3, r3, #2
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008b00:	480e      	ldr	r0, [pc, #56]	; (8008b3c <MX_LWIP_Init+0x25c>)
 8008b02:	f001 fa5d 	bl	8009fc0 <netif_set_up>
 8008b06:	e002      	b.n	8008b0e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008b08:	480c      	ldr	r0, [pc, #48]	; (8008b3c <MX_LWIP_Init+0x25c>)
 8008b0a:	f001 fac5 	bl	800a098 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8008b0e:	490c      	ldr	r1, [pc, #48]	; (8008b40 <MX_LWIP_Init+0x260>)
 8008b10:	480a      	ldr	r0, [pc, #40]	; (8008b3c <MX_LWIP_Init+0x25c>)
 8008b12:	f001 faf3 	bl	800a0fc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008b16:	bf00      	nop
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	2000068c 	.word	0x2000068c
 8008b20:	20000690 	.word	0x20000690
 8008b24:	20000694 	.word	0x20000694
 8008b28:	20000680 	.word	0x20000680
 8008b2c:	20000684 	.word	0x20000684
 8008b30:	20000688 	.word	0x20000688
 8008b34:	08013271 	.word	0x08013271
 8008b38:	0800911d 	.word	0x0800911d
 8008b3c:	2000064c 	.word	0x2000064c
 8008b40:	08009189 	.word	0x08009189

08008b44 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08e      	sub	sp, #56	; 0x38
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	605a      	str	r2, [r3, #4]
 8008b56:	609a      	str	r2, [r3, #8]
 8008b58:	60da      	str	r2, [r3, #12]
 8008b5a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a59      	ldr	r2, [pc, #356]	; (8008cc8 <HAL_ETH_MspInit+0x184>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	f040 80ac 	bne.w	8008cc0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008b68:	2300      	movs	r3, #0
 8008b6a:	623b      	str	r3, [r7, #32]
 8008b6c:	4b57      	ldr	r3, [pc, #348]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b70:	4a56      	ldr	r2, [pc, #344]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b76:	6313      	str	r3, [r2, #48]	; 0x30
 8008b78:	4b54      	ldr	r3, [pc, #336]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b80:	623b      	str	r3, [r7, #32]
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	2300      	movs	r3, #0
 8008b86:	61fb      	str	r3, [r7, #28]
 8008b88:	4b50      	ldr	r3, [pc, #320]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8c:	4a4f      	ldr	r2, [pc, #316]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008b8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b92:	6313      	str	r3, [r2, #48]	; 0x30
 8008b94:	4b4d      	ldr	r3, [pc, #308]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b9c:	61fb      	str	r3, [r7, #28]
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	61bb      	str	r3, [r7, #24]
 8008ba4:	4b49      	ldr	r3, [pc, #292]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	4a48      	ldr	r2, [pc, #288]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008baa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bae:	6313      	str	r3, [r2, #48]	; 0x30
 8008bb0:	4b46      	ldr	r3, [pc, #280]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	4b42      	ldr	r3, [pc, #264]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	4a41      	ldr	r2, [pc, #260]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008bc6:	f043 0304 	orr.w	r3, r3, #4
 8008bca:	6313      	str	r3, [r2, #48]	; 0x30
 8008bcc:	4b3f      	ldr	r3, [pc, #252]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	617b      	str	r3, [r7, #20]
 8008bd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bd8:	2300      	movs	r3, #0
 8008bda:	613b      	str	r3, [r7, #16]
 8008bdc:	4b3b      	ldr	r3, [pc, #236]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be0:	4a3a      	ldr	r2, [pc, #232]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008be2:	f043 0301 	orr.w	r3, r3, #1
 8008be6:	6313      	str	r3, [r2, #48]	; 0x30
 8008be8:	4b38      	ldr	r3, [pc, #224]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	4b34      	ldr	r3, [pc, #208]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	4a33      	ldr	r2, [pc, #204]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008bfe:	f043 0302 	orr.w	r3, r3, #2
 8008c02:	6313      	str	r3, [r2, #48]	; 0x30
 8008c04:	4b31      	ldr	r3, [pc, #196]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c10:	2300      	movs	r3, #0
 8008c12:	60bb      	str	r3, [r7, #8]
 8008c14:	4b2d      	ldr	r3, [pc, #180]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	4a2c      	ldr	r2, [pc, #176]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8008c20:	4b2a      	ldr	r3, [pc, #168]	; (8008ccc <HAL_ETH_MspInit+0x188>)
 8008c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c28:	60bb      	str	r3, [r7, #8]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008c2c:	2332      	movs	r3, #50	; 0x32
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c30:	2302      	movs	r3, #2
 8008c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c3c:	230b      	movs	r3, #11
 8008c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c44:	4619      	mov	r1, r3
 8008c46:	4822      	ldr	r0, [pc, #136]	; (8008cd0 <HAL_ETH_MspInit+0x18c>)
 8008c48:	f7fa fdc2 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008c4c:	2386      	movs	r3, #134	; 0x86
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c50:	2302      	movs	r3, #2
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c5c:	230b      	movs	r3, #11
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c64:	4619      	mov	r1, r3
 8008c66:	481b      	ldr	r0, [pc, #108]	; (8008cd4 <HAL_ETH_MspInit+0x190>)
 8008c68:	f7fa fdb2 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8008c6c:	f242 0301 	movw	r3, #8193	; 0x2001
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c72:	2302      	movs	r3, #2
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c7e:	230b      	movs	r3, #11
 8008c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c86:	4619      	mov	r1, r3
 8008c88:	4813      	ldr	r0, [pc, #76]	; (8008cd8 <HAL_ETH_MspInit+0x194>)
 8008c8a:	f7fa fda1 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008c8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c94:	2302      	movs	r3, #2
 8008c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ca0:	230b      	movs	r3, #11
 8008ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ca8:	4619      	mov	r1, r3
 8008caa:	480c      	ldr	r0, [pc, #48]	; (8008cdc <HAL_ETH_MspInit+0x198>)
 8008cac:	f7fa fd90 	bl	80037d0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	203d      	movs	r0, #61	; 0x3d
 8008cb6:	f7f8 ffa4 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008cba:	203d      	movs	r0, #61	; 0x3d
 8008cbc:	f7f8 ffbd 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008cc0:	bf00      	nop
 8008cc2:	3738      	adds	r7, #56	; 0x38
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	40028000 	.word	0x40028000
 8008ccc:	40023800 	.word	0x40023800
 8008cd0:	40020800 	.word	0x40020800
 8008cd4:	40020000 	.word	0x40020000
 8008cd8:	40020400 	.word	0x40020400
 8008cdc:	40021800 	.word	0x40021800

08008ce0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008cec:	4b4d      	ldr	r3, [pc, #308]	; (8008e24 <low_level_init+0x144>)
 8008cee:	4a4e      	ldr	r2, [pc, #312]	; (8008e28 <low_level_init+0x148>)
 8008cf0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008cf2:	4b4c      	ldr	r3, [pc, #304]	; (8008e24 <low_level_init+0x144>)
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008cf8:	4b4a      	ldr	r3, [pc, #296]	; (8008e24 <low_level_init+0x144>)
 8008cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008cfe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008d00:	4b48      	ldr	r3, [pc, #288]	; (8008e24 <low_level_init+0x144>)
 8008d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d06:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008d08:	4b46      	ldr	r3, [pc, #280]	; (8008e24 <low_level_init+0x144>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008d12:	2380      	movs	r3, #128	; 0x80
 8008d14:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008d16:	23e1      	movs	r3, #225	; 0xe1
 8008d18:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008d22:	2300      	movs	r3, #0
 8008d24:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008d26:	4a3f      	ldr	r2, [pc, #252]	; (8008e24 <low_level_init+0x144>)
 8008d28:	f107 0308 	add.w	r3, r7, #8
 8008d2c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008d2e:	4b3d      	ldr	r3, [pc, #244]	; (8008e24 <low_level_init+0x144>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008d34:	4b3b      	ldr	r3, [pc, #236]	; (8008e24 <low_level_init+0x144>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008d3a:	4b3a      	ldr	r3, [pc, #232]	; (8008e24 <low_level_init+0x144>)
 8008d3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008d40:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008d42:	4838      	ldr	r0, [pc, #224]	; (8008e24 <low_level_init+0x144>)
 8008d44:	f7f9 fbb0 	bl	80024a8 <HAL_ETH_Init>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d108      	bne.n	8008d64 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d58:	f043 0304 	orr.w	r3, r3, #4
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008d64:	2304      	movs	r3, #4
 8008d66:	4a31      	ldr	r2, [pc, #196]	; (8008e2c <low_level_init+0x14c>)
 8008d68:	4931      	ldr	r1, [pc, #196]	; (8008e30 <low_level_init+0x150>)
 8008d6a:	482e      	ldr	r0, [pc, #184]	; (8008e24 <low_level_init+0x144>)
 8008d6c:	f7f9 fd36 	bl	80027dc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008d70:	2304      	movs	r3, #4
 8008d72:	4a30      	ldr	r2, [pc, #192]	; (8008e34 <low_level_init+0x154>)
 8008d74:	4930      	ldr	r1, [pc, #192]	; (8008e38 <low_level_init+0x158>)
 8008d76:	482b      	ldr	r0, [pc, #172]	; (8008e24 <low_level_init+0x144>)
 8008d78:	f7f9 fd98 	bl	80028ac <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2206      	movs	r2, #6
 8008d80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008d84:	4b27      	ldr	r3, [pc, #156]	; (8008e24 <low_level_init+0x144>)
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008d90:	4b24      	ldr	r3, [pc, #144]	; (8008e24 <low_level_init+0x144>)
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	785a      	ldrb	r2, [r3, #1]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008d9c:	4b21      	ldr	r3, [pc, #132]	; (8008e24 <low_level_init+0x144>)
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	789a      	ldrb	r2, [r3, #2]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008da8:	4b1e      	ldr	r3, [pc, #120]	; (8008e24 <low_level_init+0x144>)
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	78da      	ldrb	r2, [r3, #3]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008db4:	4b1b      	ldr	r3, [pc, #108]	; (8008e24 <low_level_init+0x144>)
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	791a      	ldrb	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008dc0:	4b18      	ldr	r3, [pc, #96]	; (8008e24 <low_level_init+0x144>)
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	795a      	ldrb	r2, [r3, #5]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008dd2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008dda:	f043 030a 	orr.w	r3, r3, #10
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008de6:	480f      	ldr	r0, [pc, #60]	; (8008e24 <low_level_init+0x144>)
 8008de8:	f7fa f88a 	bl	8002f00 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008dec:	f107 0310 	add.w	r3, r7, #16
 8008df0:	461a      	mov	r2, r3
 8008df2:	211d      	movs	r1, #29
 8008df4:	480b      	ldr	r0, [pc, #44]	; (8008e24 <low_level_init+0x144>)
 8008df6:	f7f9 ffb5 	bl	8002d64 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f043 030b 	orr.w	r3, r3, #11
 8008e00:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	461a      	mov	r2, r3
 8008e06:	211d      	movs	r1, #29
 8008e08:	4806      	ldr	r0, [pc, #24]	; (8008e24 <low_level_init+0x144>)
 8008e0a:	f7fa f813 	bl	8002e34 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008e0e:	f107 0310 	add.w	r3, r7, #16
 8008e12:	461a      	mov	r2, r3
 8008e14:	211d      	movs	r1, #29
 8008e16:	4803      	ldr	r0, [pc, #12]	; (8008e24 <low_level_init+0x144>)
 8008e18:	f7f9 ffa4 	bl	8002d64 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008e1c:	bf00      	nop
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20003738 	.word	0x20003738
 8008e28:	40028000 	.word	0x40028000
 8008e2c:	20001f68 	.word	0x20001f68
 8008e30:	20000718 	.word	0x20000718
 8008e34:	20000798 	.word	0x20000798
 8008e38:	20000698 	.word	0x20000698

08008e3c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	; 0x28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008e46:	4b4b      	ldr	r3, [pc, #300]	; (8008f74 <low_level_output+0x138>)
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008e5e:	4b45      	ldr	r3, [pc, #276]	; (8008f74 <low_level_output+0x138>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	623b      	str	r3, [r7, #32]
 8008e6c:	e05a      	b.n	8008f24 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da03      	bge.n	8008e7e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008e76:	23f8      	movs	r3, #248	; 0xf8
 8008e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008e7c:	e05c      	b.n	8008f38 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	895b      	ldrh	r3, [r3, #10]
 8008e82:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008e88:	e02f      	b.n	8008eea <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	18d0      	adds	r0, r2, r3
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	18d1      	adds	r1, r2, r3
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f00a faef 	bl	8013484 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da03      	bge.n	8008ebc <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008eb4:	23f8      	movs	r3, #248	; 0xf8
 8008eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008eba:	e03d      	b.n	8008f38 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008ecc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008ed8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008ee4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d8c8      	bhi.n	8008e8a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	18d0      	adds	r0, r2, r3
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	4413      	add	r3, r2
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	f00a fabb 	bl	8013484 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	623b      	str	r3, [r7, #32]
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1a1      	bne.n	8008e6e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008f2a:	6979      	ldr	r1, [r7, #20]
 8008f2c:	4811      	ldr	r0, [pc, #68]	; (8008f74 <low_level_output+0x138>)
 8008f2e:	f7f9 fd29 	bl	8002984 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008f38:	4b0e      	ldr	r3, [pc, #56]	; (8008f74 <low_level_output+0x138>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <low_level_output+0x138>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f52:	461a      	mov	r2, r3
 8008f54:	2320      	movs	r3, #32
 8008f56:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008f58:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <low_level_output+0x138>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f60:	461a      	mov	r2, r3
 8008f62:	2300      	movs	r3, #0
 8008f64:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8008f66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3728      	adds	r7, #40	; 0x28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20003738 	.word	0x20003738

08008f78 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08c      	sub	sp, #48	; 0x30
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008f9c:	484e      	ldr	r0, [pc, #312]	; (80090d8 <low_level_input+0x160>)
 8008f9e:	f7f9 fddb 	bl	8002b58 <HAL_ETH_GetReceivedFrame>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <low_level_input+0x34>

    return NULL;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e091      	b.n	80090d0 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008fac:	4b4a      	ldr	r3, [pc, #296]	; (80090d8 <low_level_input+0x160>)
 8008fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008fb2:	4b49      	ldr	r3, [pc, #292]	; (80090d8 <low_level_input+0x160>)
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008fb8:	89fb      	ldrh	r3, [r7, #14]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d007      	beq.n	8008fce <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008fbe:	89fb      	ldrh	r3, [r7, #14]
 8008fc0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	f001 f934 	bl	800a234 <pbuf_alloc>
 8008fcc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d04b      	beq.n	800906c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008fd4:	4b40      	ldr	r3, [pc, #256]	; (80090d8 <low_level_input+0x160>)
 8008fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fe2:	e040      	b.n	8009066 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	895b      	ldrh	r3, [r3, #10]
 8008fe8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008fee:	e021      	b.n	8009034 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	18d0      	adds	r0, r2, r3
 8008ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	18d1      	adds	r1, r2, r3
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009004:	3304      	adds	r3, #4
 8009006:	461a      	mov	r2, r3
 8009008:	f00a fa3c 	bl	8013484 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009018:	69fa      	ldr	r2, [r7, #28]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4413      	add	r3, r2
 800901e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009022:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800902e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800903e:	4293      	cmp	r3, r2
 8009040:	d8d6      	bhi.n	8008ff0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	18d0      	adds	r0, r2, r3
 800904a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	4413      	add	r3, r2
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	4619      	mov	r1, r3
 8009054:	f00a fa16 	bl	8013484 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	4413      	add	r3, r2
 800905e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1bb      	bne.n	8008fe4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800906c:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <low_level_input+0x160>)
 800906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009070:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	e00b      	b.n	8009090 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	3301      	adds	r3, #1
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <low_level_input+0x160>)
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	429a      	cmp	r2, r3
 8009098:	d3ee      	bcc.n	8009078 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800909a:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <low_level_input+0x160>)
 800909c:	2200      	movs	r2, #0
 800909e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80090a0:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <low_level_input+0x160>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00d      	beq.n	80090ce <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <low_level_input+0x160>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ba:	461a      	mov	r2, r3
 80090bc:	2380      	movs	r3, #128	; 0x80
 80090be:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80090c0:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <low_level_input+0x160>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c8:	461a      	mov	r2, r3
 80090ca:	2300      	movs	r3, #0
 80090cc:	6093      	str	r3, [r2, #8]
  }
  return p;
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3730      	adds	r7, #48	; 0x30
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20003738 	.word	0x20003738

080090dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff ff47 	bl	8008f78 <low_level_input>
 80090ea:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d010      	beq.n	8009114 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	4798      	blx	r3
 80090fc:	4603      	mov	r3, r0
 80090fe:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8009100:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d006      	beq.n	8009116 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f001 fb77 	bl	800a7fc <pbuf_free>
    p = NULL;
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e000      	b.n	8009116 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009114:	bf00      	nop
  }
}
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <ethernetif_init+0x1c>
 800912a:	4b0e      	ldr	r3, [pc, #56]	; (8009164 <ethernetif_init+0x48>)
 800912c:	f240 2219 	movw	r2, #537	; 0x219
 8009130:	490d      	ldr	r1, [pc, #52]	; (8009168 <ethernetif_init+0x4c>)
 8009132:	480e      	ldr	r0, [pc, #56]	; (800916c <ethernetif_init+0x50>)
 8009134:	f00a f9d6 	bl	80134e4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2273      	movs	r2, #115	; 0x73
 800913c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2274      	movs	r2, #116	; 0x74
 8009144:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a09      	ldr	r2, [pc, #36]	; (8009170 <ethernetif_init+0x54>)
 800914c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a08      	ldr	r2, [pc, #32]	; (8009174 <ethernetif_init+0x58>)
 8009152:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff fdc3 	bl	8008ce0 <low_level_init>

  return ERR_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	08014930 	.word	0x08014930
 8009168:	0801494c 	.word	0x0801494c
 800916c:	0801495c 	.word	0x0801495c
 8009170:	08011729 	.word	0x08011729
 8009174:	08008e3d 	.word	0x08008e3d

08009178 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800917c:	f7f8 fc36 	bl	80019ec <HAL_GetTick>
 8009180:	4603      	mov	r3, r0
}
 8009182:	4618      	mov	r0, r3
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800919e:	089b      	lsrs	r3, r3, #2
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d05d      	beq.n	8009266 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80091aa:	4b34      	ldr	r3, [pc, #208]	; (800927c <ethernetif_update_config+0xf4>)
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d03f      	beq.n	8009232 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80091b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80091b6:	2100      	movs	r1, #0
 80091b8:	4830      	ldr	r0, [pc, #192]	; (800927c <ethernetif_update_config+0xf4>)
 80091ba:	f7f9 fe3b 	bl	8002e34 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80091be:	f7f8 fc15 	bl	80019ec <HAL_GetTick>
 80091c2:	4603      	mov	r3, r0
 80091c4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80091c6:	f107 0308 	add.w	r3, r7, #8
 80091ca:	461a      	mov	r2, r3
 80091cc:	2101      	movs	r1, #1
 80091ce:	482b      	ldr	r0, [pc, #172]	; (800927c <ethernetif_update_config+0xf4>)
 80091d0:	f7f9 fdc8 	bl	8002d64 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80091d4:	f7f8 fc0a 	bl	80019ec <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091e2:	d828      	bhi.n	8009236 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f003 0320 	and.w	r3, r3, #32
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0eb      	beq.n	80091c6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80091ee:	f107 0308 	add.w	r3, r7, #8
 80091f2:	461a      	mov	r2, r3
 80091f4:	2110      	movs	r1, #16
 80091f6:	4821      	ldr	r0, [pc, #132]	; (800927c <ethernetif_update_config+0xf4>)
 80091f8:	f7f9 fdb4 	bl	8002d64 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009206:	4b1d      	ldr	r3, [pc, #116]	; (800927c <ethernetif_update_config+0xf4>)
 8009208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800920c:	60da      	str	r2, [r3, #12]
 800920e:	e002      	b.n	8009216 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009210:	4b1a      	ldr	r3, [pc, #104]	; (800927c <ethernetif_update_config+0xf4>)
 8009212:	2200      	movs	r2, #0
 8009214:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009220:	4b16      	ldr	r3, [pc, #88]	; (800927c <ethernetif_update_config+0xf4>)
 8009222:	2200      	movs	r2, #0
 8009224:	609a      	str	r2, [r3, #8]
 8009226:	e016      	b.n	8009256 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8009228:	4b14      	ldr	r3, [pc, #80]	; (800927c <ethernetif_update_config+0xf4>)
 800922a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800922e:	609a      	str	r2, [r3, #8]
 8009230:	e011      	b.n	8009256 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009232:	bf00      	nop
 8009234:	e000      	b.n	8009238 <ethernetif_update_config+0xb0>
          goto error;
 8009236:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009238:	4b10      	ldr	r3, [pc, #64]	; (800927c <ethernetif_update_config+0xf4>)
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	08db      	lsrs	r3, r3, #3
 800923e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009240:	4b0e      	ldr	r3, [pc, #56]	; (800927c <ethernetif_update_config+0xf4>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	085b      	lsrs	r3, r3, #1
 8009246:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009248:	4313      	orrs	r3, r2
 800924a:	b29b      	uxth	r3, r3
 800924c:	461a      	mov	r2, r3
 800924e:	2100      	movs	r1, #0
 8009250:	480a      	ldr	r0, [pc, #40]	; (800927c <ethernetif_update_config+0xf4>)
 8009252:	f7f9 fdef 	bl	8002e34 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009256:	2100      	movs	r1, #0
 8009258:	4808      	ldr	r0, [pc, #32]	; (800927c <ethernetif_update_config+0xf4>)
 800925a:	f7f9 feaf 	bl	8002fbc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800925e:	4807      	ldr	r0, [pc, #28]	; (800927c <ethernetif_update_config+0xf4>)
 8009260:	f7f9 fe4e 	bl	8002f00 <HAL_ETH_Start>
 8009264:	e002      	b.n	800926c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009266:	4805      	ldr	r0, [pc, #20]	; (800927c <ethernetif_update_config+0xf4>)
 8009268:	f7f9 fe79 	bl	8002f5e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f807 	bl	8009280 <ethernetif_notify_conn_changed>
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20003738 	.word	0x20003738

08009280 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	b21a      	sxth	r2, r3
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	b21b      	sxth	r3, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	b21b      	sxth	r3, r3
 80092b0:	b29b      	uxth	r3, r3
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	061a      	lsls	r2, r3, #24
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	0a1b      	lsrs	r3, r3, #8
 80092d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80092dc:	431a      	orrs	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	0e1b      	lsrs	r3, r3, #24
 80092e2:	4313      	orrs	r3, r2
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80092fa:	f000 f8d5 	bl	80094a8 <mem_init>
  memp_init();
 80092fe:	f000 fbdb 	bl	8009ab8 <memp_init>
  pbuf_init();
  netif_init();
 8009302:	f000 fc93 	bl	8009c2c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009306:	f007 f84f 	bl	80103a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800930a:	f001 fda7 	bl	800ae5c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800930e:	f006 ffc1 	bl	8010294 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <ptr_to_mem+0x20>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	88fb      	ldrh	r3, [r7, #6]
 800932c:	4413      	add	r3, r2
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20005fac 	.word	0x20005fac

08009340 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009348:	4b05      	ldr	r3, [pc, #20]	; (8009360 <mem_to_ptr+0x20>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	b29b      	uxth	r3, r3
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20005fac 	.word	0x20005fac

08009364 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009364:	b590      	push	{r4, r7, lr}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800936c:	4b45      	ldr	r3, [pc, #276]	; (8009484 <plug_holes+0x120>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	429a      	cmp	r2, r3
 8009374:	d206      	bcs.n	8009384 <plug_holes+0x20>
 8009376:	4b44      	ldr	r3, [pc, #272]	; (8009488 <plug_holes+0x124>)
 8009378:	f240 12df 	movw	r2, #479	; 0x1df
 800937c:	4943      	ldr	r1, [pc, #268]	; (800948c <plug_holes+0x128>)
 800937e:	4844      	ldr	r0, [pc, #272]	; (8009490 <plug_holes+0x12c>)
 8009380:	f00a f8b0 	bl	80134e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009384:	4b43      	ldr	r3, [pc, #268]	; (8009494 <plug_holes+0x130>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	429a      	cmp	r2, r3
 800938c:	d306      	bcc.n	800939c <plug_holes+0x38>
 800938e:	4b3e      	ldr	r3, [pc, #248]	; (8009488 <plug_holes+0x124>)
 8009390:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009394:	4940      	ldr	r1, [pc, #256]	; (8009498 <plug_holes+0x134>)
 8009396:	483e      	ldr	r0, [pc, #248]	; (8009490 <plug_holes+0x12c>)
 8009398:	f00a f8a4 	bl	80134e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	791b      	ldrb	r3, [r3, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d006      	beq.n	80093b2 <plug_holes+0x4e>
 80093a4:	4b38      	ldr	r3, [pc, #224]	; (8009488 <plug_holes+0x124>)
 80093a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80093aa:	493c      	ldr	r1, [pc, #240]	; (800949c <plug_holes+0x138>)
 80093ac:	4838      	ldr	r0, [pc, #224]	; (8009490 <plug_holes+0x12c>)
 80093ae:	f00a f899 	bl	80134e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80093ba:	d906      	bls.n	80093ca <plug_holes+0x66>
 80093bc:	4b32      	ldr	r3, [pc, #200]	; (8009488 <plug_holes+0x124>)
 80093be:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80093c2:	4937      	ldr	r1, [pc, #220]	; (80094a0 <plug_holes+0x13c>)
 80093c4:	4832      	ldr	r0, [pc, #200]	; (8009490 <plug_holes+0x12c>)
 80093c6:	f00a f88d 	bl	80134e4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff ffa4 	bl	800931c <ptr_to_mem>
 80093d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d024      	beq.n	8009428 <plug_holes+0xc4>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	791b      	ldrb	r3, [r3, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d120      	bne.n	8009428 <plug_holes+0xc4>
 80093e6:	4b2b      	ldr	r3, [pc, #172]	; (8009494 <plug_holes+0x130>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d01b      	beq.n	8009428 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80093f0:	4b2c      	ldr	r3, [pc, #176]	; (80094a4 <plug_holes+0x140>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d102      	bne.n	8009400 <plug_holes+0x9c>
      lfree = mem;
 80093fa:	4a2a      	ldr	r2, [pc, #168]	; (80094a4 <plug_holes+0x140>)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	881a      	ldrh	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	881b      	ldrh	r3, [r3, #0]
 800940c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009410:	d00a      	beq.n	8009428 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff ff80 	bl	800931c <ptr_to_mem>
 800941c:	4604      	mov	r4, r0
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff ff8e 	bl	8009340 <mem_to_ptr>
 8009424:	4603      	mov	r3, r0
 8009426:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	885b      	ldrh	r3, [r3, #2]
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff ff75 	bl	800931c <ptr_to_mem>
 8009432:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	429a      	cmp	r2, r3
 800943a:	d01f      	beq.n	800947c <plug_holes+0x118>
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	791b      	ldrb	r3, [r3, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d11b      	bne.n	800947c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009444:	4b17      	ldr	r3, [pc, #92]	; (80094a4 <plug_holes+0x140>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	429a      	cmp	r2, r3
 800944c:	d102      	bne.n	8009454 <plug_holes+0xf0>
      lfree = pmem;
 800944e:	4a15      	ldr	r2, [pc, #84]	; (80094a4 <plug_holes+0x140>)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	881a      	ldrh	r2, [r3, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009464:	d00a      	beq.n	800947c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff ff56 	bl	800931c <ptr_to_mem>
 8009470:	4604      	mov	r4, r0
 8009472:	68b8      	ldr	r0, [r7, #8]
 8009474:	f7ff ff64 	bl	8009340 <mem_to_ptr>
 8009478:	4603      	mov	r3, r0
 800947a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800947c:	bf00      	nop
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	bd90      	pop	{r4, r7, pc}
 8009484:	20005fac 	.word	0x20005fac
 8009488:	08014984 	.word	0x08014984
 800948c:	080149b4 	.word	0x080149b4
 8009490:	080149cc 	.word	0x080149cc
 8009494:	20005fb0 	.word	0x20005fb0
 8009498:	080149f4 	.word	0x080149f4
 800949c:	08014a10 	.word	0x08014a10
 80094a0:	08014a2c 	.word	0x08014a2c
 80094a4:	20005fb4 	.word	0x20005fb4

080094a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80094ae:	4b18      	ldr	r3, [pc, #96]	; (8009510 <mem_init+0x68>)
 80094b0:	3303      	adds	r3, #3
 80094b2:	f023 0303 	bic.w	r3, r3, #3
 80094b6:	461a      	mov	r2, r3
 80094b8:	4b16      	ldr	r3, [pc, #88]	; (8009514 <mem_init+0x6c>)
 80094ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80094bc:	4b15      	ldr	r3, [pc, #84]	; (8009514 <mem_init+0x6c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80094c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80094d6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80094da:	f7ff ff1f 	bl	800931c <ptr_to_mem>
 80094de:	4603      	mov	r3, r0
 80094e0:	4a0d      	ldr	r2, [pc, #52]	; (8009518 <mem_init+0x70>)
 80094e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80094e4:	4b0c      	ldr	r3, [pc, #48]	; (8009518 <mem_init+0x70>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2201      	movs	r2, #1
 80094ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <mem_init+0x70>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80094f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80094f6:	4b08      	ldr	r3, [pc, #32]	; (8009518 <mem_init+0x70>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80094fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009500:	4b04      	ldr	r3, [pc, #16]	; (8009514 <mem_init+0x6c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a05      	ldr	r2, [pc, #20]	; (800951c <mem_init+0x74>)
 8009506:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20003798 	.word	0x20003798
 8009514:	20005fac 	.word	0x20005fac
 8009518:	20005fb0 	.word	0x20005fb0
 800951c:	20005fb4 	.word	0x20005fb4

08009520 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff ff09 	bl	8009340 <mem_to_ptr>
 800952e:	4603      	mov	r3, r0
 8009530:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff fef0 	bl	800931c <ptr_to_mem>
 800953c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	4618      	mov	r0, r3
 8009544:	f7ff feea 	bl	800931c <ptr_to_mem>
 8009548:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009552:	d818      	bhi.n	8009586 <mem_link_valid+0x66>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	885b      	ldrh	r3, [r3, #2]
 8009558:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800955c:	d813      	bhi.n	8009586 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009562:	8afa      	ldrh	r2, [r7, #22]
 8009564:	429a      	cmp	r2, r3
 8009566:	d004      	beq.n	8009572 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	8afa      	ldrh	r2, [r7, #22]
 800956e:	429a      	cmp	r2, r3
 8009570:	d109      	bne.n	8009586 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009572:	4b08      	ldr	r3, [pc, #32]	; (8009594 <mem_link_valid+0x74>)
 8009574:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	429a      	cmp	r2, r3
 800957a:	d006      	beq.n	800958a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	885b      	ldrh	r3, [r3, #2]
 8009580:	8afa      	ldrh	r2, [r7, #22]
 8009582:	429a      	cmp	r2, r3
 8009584:	d001      	beq.n	800958a <mem_link_valid+0x6a>
    return 0;
 8009586:	2300      	movs	r3, #0
 8009588:	e000      	b.n	800958c <mem_link_valid+0x6c>
  }
  return 1;
 800958a:	2301      	movs	r3, #1
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20005fb0 	.word	0x20005fb0

08009598 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d04c      	beq.n	8009640 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f003 0303 	and.w	r3, r3, #3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80095b0:	4b25      	ldr	r3, [pc, #148]	; (8009648 <mem_free+0xb0>)
 80095b2:	f240 2273 	movw	r2, #627	; 0x273
 80095b6:	4925      	ldr	r1, [pc, #148]	; (800964c <mem_free+0xb4>)
 80095b8:	4825      	ldr	r0, [pc, #148]	; (8009650 <mem_free+0xb8>)
 80095ba:	f009 ff93 	bl	80134e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80095be:	e040      	b.n	8009642 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3b08      	subs	r3, #8
 80095c4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80095c6:	4b23      	ldr	r3, [pc, #140]	; (8009654 <mem_free+0xbc>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d306      	bcc.n	80095de <mem_free+0x46>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f103 020c 	add.w	r2, r3, #12
 80095d6:	4b20      	ldr	r3, [pc, #128]	; (8009658 <mem_free+0xc0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d907      	bls.n	80095ee <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80095de:	4b1a      	ldr	r3, [pc, #104]	; (8009648 <mem_free+0xb0>)
 80095e0:	f240 227f 	movw	r2, #639	; 0x27f
 80095e4:	491d      	ldr	r1, [pc, #116]	; (800965c <mem_free+0xc4>)
 80095e6:	481a      	ldr	r0, [pc, #104]	; (8009650 <mem_free+0xb8>)
 80095e8:	f009 ff7c 	bl	80134e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80095ec:	e029      	b.n	8009642 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	791b      	ldrb	r3, [r3, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d107      	bne.n	8009606 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80095f6:	4b14      	ldr	r3, [pc, #80]	; (8009648 <mem_free+0xb0>)
 80095f8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80095fc:	4918      	ldr	r1, [pc, #96]	; (8009660 <mem_free+0xc8>)
 80095fe:	4814      	ldr	r0, [pc, #80]	; (8009650 <mem_free+0xb8>)
 8009600:	f009 ff70 	bl	80134e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009604:	e01d      	b.n	8009642 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff ff8a 	bl	8009520 <mem_link_valid>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d107      	bne.n	8009622 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009612:	4b0d      	ldr	r3, [pc, #52]	; (8009648 <mem_free+0xb0>)
 8009614:	f240 2295 	movw	r2, #661	; 0x295
 8009618:	4912      	ldr	r1, [pc, #72]	; (8009664 <mem_free+0xcc>)
 800961a:	480d      	ldr	r0, [pc, #52]	; (8009650 <mem_free+0xb8>)
 800961c:	f009 ff62 	bl	80134e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009620:	e00f      	b.n	8009642 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009628:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <mem_free+0xd0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	429a      	cmp	r2, r3
 8009630:	d202      	bcs.n	8009638 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009632:	4a0d      	ldr	r2, [pc, #52]	; (8009668 <mem_free+0xd0>)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f7ff fe93 	bl	8009364 <plug_holes>
 800963e:	e000      	b.n	8009642 <mem_free+0xaa>
    return;
 8009640:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	08014984 	.word	0x08014984
 800964c:	08014a58 	.word	0x08014a58
 8009650:	080149cc 	.word	0x080149cc
 8009654:	20005fac 	.word	0x20005fac
 8009658:	20005fb0 	.word	0x20005fb0
 800965c:	08014a7c 	.word	0x08014a7c
 8009660:	08014a98 	.word	0x08014a98
 8009664:	08014ac0 	.word	0x08014ac0
 8009668:	20005fb4 	.word	0x20005fb4

0800966c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009678:	887b      	ldrh	r3, [r7, #2]
 800967a:	3303      	adds	r3, #3
 800967c:	b29b      	uxth	r3, r3
 800967e:	f023 0303 	bic.w	r3, r3, #3
 8009682:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009684:	8bfb      	ldrh	r3, [r7, #30]
 8009686:	2b0b      	cmp	r3, #11
 8009688:	d801      	bhi.n	800968e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800968a:	230c      	movs	r3, #12
 800968c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800968e:	8bfb      	ldrh	r3, [r7, #30]
 8009690:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009694:	d803      	bhi.n	800969e <mem_trim+0x32>
 8009696:	8bfa      	ldrh	r2, [r7, #30]
 8009698:	887b      	ldrh	r3, [r7, #2]
 800969a:	429a      	cmp	r2, r3
 800969c:	d201      	bcs.n	80096a2 <mem_trim+0x36>
    return NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	e0cc      	b.n	800983c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80096a2:	4b68      	ldr	r3, [pc, #416]	; (8009844 <mem_trim+0x1d8>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d304      	bcc.n	80096b6 <mem_trim+0x4a>
 80096ac:	4b66      	ldr	r3, [pc, #408]	; (8009848 <mem_trim+0x1dc>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d306      	bcc.n	80096c4 <mem_trim+0x58>
 80096b6:	4b65      	ldr	r3, [pc, #404]	; (800984c <mem_trim+0x1e0>)
 80096b8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80096bc:	4964      	ldr	r1, [pc, #400]	; (8009850 <mem_trim+0x1e4>)
 80096be:	4865      	ldr	r0, [pc, #404]	; (8009854 <mem_trim+0x1e8>)
 80096c0:	f009 ff10 	bl	80134e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80096c4:	4b5f      	ldr	r3, [pc, #380]	; (8009844 <mem_trim+0x1d8>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d304      	bcc.n	80096d8 <mem_trim+0x6c>
 80096ce:	4b5e      	ldr	r3, [pc, #376]	; (8009848 <mem_trim+0x1dc>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d301      	bcc.n	80096dc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	e0af      	b.n	800983c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3b08      	subs	r3, #8
 80096e0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80096e2:	69b8      	ldr	r0, [r7, #24]
 80096e4:	f7ff fe2c 	bl	8009340 <mem_to_ptr>
 80096e8:	4603      	mov	r3, r0
 80096ea:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	881a      	ldrh	r2, [r3, #0]
 80096f0:	8afb      	ldrh	r3, [r7, #22]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b08      	subs	r3, #8
 80096f8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80096fa:	8bfa      	ldrh	r2, [r7, #30]
 80096fc:	8abb      	ldrh	r3, [r7, #20]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d906      	bls.n	8009710 <mem_trim+0xa4>
 8009702:	4b52      	ldr	r3, [pc, #328]	; (800984c <mem_trim+0x1e0>)
 8009704:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009708:	4953      	ldr	r1, [pc, #332]	; (8009858 <mem_trim+0x1ec>)
 800970a:	4852      	ldr	r0, [pc, #328]	; (8009854 <mem_trim+0x1e8>)
 800970c:	f009 feea 	bl	80134e4 <iprintf>
  if (newsize > size) {
 8009710:	8bfa      	ldrh	r2, [r7, #30]
 8009712:	8abb      	ldrh	r3, [r7, #20]
 8009714:	429a      	cmp	r2, r3
 8009716:	d901      	bls.n	800971c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009718:	2300      	movs	r3, #0
 800971a:	e08f      	b.n	800983c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800971c:	8bfa      	ldrh	r2, [r7, #30]
 800971e:	8abb      	ldrh	r3, [r7, #20]
 8009720:	429a      	cmp	r2, r3
 8009722:	d101      	bne.n	8009728 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	e089      	b.n	800983c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	4618      	mov	r0, r3
 800972e:	f7ff fdf5 	bl	800931c <ptr_to_mem>
 8009732:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	791b      	ldrb	r3, [r3, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d13f      	bne.n	80097bc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009744:	d106      	bne.n	8009754 <mem_trim+0xe8>
 8009746:	4b41      	ldr	r3, [pc, #260]	; (800984c <mem_trim+0x1e0>)
 8009748:	f240 22f5 	movw	r2, #757	; 0x2f5
 800974c:	4943      	ldr	r1, [pc, #268]	; (800985c <mem_trim+0x1f0>)
 800974e:	4841      	ldr	r0, [pc, #260]	; (8009854 <mem_trim+0x1e8>)
 8009750:	f009 fec8 	bl	80134e4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800975a:	8afa      	ldrh	r2, [r7, #22]
 800975c:	8bfb      	ldrh	r3, [r7, #30]
 800975e:	4413      	add	r3, r2
 8009760:	b29b      	uxth	r3, r3
 8009762:	3308      	adds	r3, #8
 8009764:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009766:	4b3e      	ldr	r3, [pc, #248]	; (8009860 <mem_trim+0x1f4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	429a      	cmp	r2, r3
 800976e:	d106      	bne.n	800977e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009770:	89fb      	ldrh	r3, [r7, #14]
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fdd2 	bl	800931c <ptr_to_mem>
 8009778:	4603      	mov	r3, r0
 800977a:	4a39      	ldr	r2, [pc, #228]	; (8009860 <mem_trim+0x1f4>)
 800977c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800977e:	89fb      	ldrh	r3, [r7, #14]
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff fdcb 	bl	800931c <ptr_to_mem>
 8009786:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	2200      	movs	r2, #0
 800978c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	89ba      	ldrh	r2, [r7, #12]
 8009792:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	8afa      	ldrh	r2, [r7, #22]
 8009798:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	89fa      	ldrh	r2, [r7, #14]
 800979e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80097a8:	d047      	beq.n	800983a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fdb4 	bl	800931c <ptr_to_mem>
 80097b4:	4602      	mov	r2, r0
 80097b6:	89fb      	ldrh	r3, [r7, #14]
 80097b8:	8053      	strh	r3, [r2, #2]
 80097ba:	e03e      	b.n	800983a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80097bc:	8bfb      	ldrh	r3, [r7, #30]
 80097be:	f103 0214 	add.w	r2, r3, #20
 80097c2:	8abb      	ldrh	r3, [r7, #20]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d838      	bhi.n	800983a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80097c8:	8afa      	ldrh	r2, [r7, #22]
 80097ca:	8bfb      	ldrh	r3, [r7, #30]
 80097cc:	4413      	add	r3, r2
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	3308      	adds	r3, #8
 80097d2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80097dc:	d106      	bne.n	80097ec <mem_trim+0x180>
 80097de:	4b1b      	ldr	r3, [pc, #108]	; (800984c <mem_trim+0x1e0>)
 80097e0:	f240 3216 	movw	r2, #790	; 0x316
 80097e4:	491d      	ldr	r1, [pc, #116]	; (800985c <mem_trim+0x1f0>)
 80097e6:	481b      	ldr	r0, [pc, #108]	; (8009854 <mem_trim+0x1e8>)
 80097e8:	f009 fe7c 	bl	80134e4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80097ec:	89fb      	ldrh	r3, [r7, #14]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff fd94 	bl	800931c <ptr_to_mem>
 80097f4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80097f6:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <mem_trim+0x1f4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d202      	bcs.n	8009806 <mem_trim+0x19a>
      lfree = mem2;
 8009800:	4a17      	ldr	r2, [pc, #92]	; (8009860 <mem_trim+0x1f4>)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2200      	movs	r2, #0
 800980a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	881a      	ldrh	r2, [r3, #0]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	8afa      	ldrh	r2, [r7, #22]
 8009818:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	89fa      	ldrh	r2, [r7, #14]
 800981e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009828:	d007      	beq.n	800983a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff fd74 	bl	800931c <ptr_to_mem>
 8009834:	4602      	mov	r2, r0
 8009836:	89fb      	ldrh	r3, [r7, #14]
 8009838:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800983a:	687b      	ldr	r3, [r7, #4]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3720      	adds	r7, #32
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20005fac 	.word	0x20005fac
 8009848:	20005fb0 	.word	0x20005fb0
 800984c:	08014984 	.word	0x08014984
 8009850:	08014af4 	.word	0x08014af4
 8009854:	080149cc 	.word	0x080149cc
 8009858:	08014b0c 	.word	0x08014b0c
 800985c:	08014b2c 	.word	0x08014b2c
 8009860:	20005fb4 	.word	0x20005fb4

08009864 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <mem_malloc+0x14>
    return NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	e0d9      	b.n	8009a2c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	3303      	adds	r3, #3
 800987c:	b29b      	uxth	r3, r3
 800987e:	f023 0303 	bic.w	r3, r3, #3
 8009882:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009884:	8bbb      	ldrh	r3, [r7, #28]
 8009886:	2b0b      	cmp	r3, #11
 8009888:	d801      	bhi.n	800988e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800988a:	230c      	movs	r3, #12
 800988c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800988e:	8bbb      	ldrh	r3, [r7, #28]
 8009890:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009894:	d803      	bhi.n	800989e <mem_malloc+0x3a>
 8009896:	8bba      	ldrh	r2, [r7, #28]
 8009898:	88fb      	ldrh	r3, [r7, #6]
 800989a:	429a      	cmp	r2, r3
 800989c:	d201      	bcs.n	80098a2 <mem_malloc+0x3e>
    return NULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	e0c4      	b.n	8009a2c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098a2:	4b64      	ldr	r3, [pc, #400]	; (8009a34 <mem_malloc+0x1d0>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fd4a 	bl	8009340 <mem_to_ptr>
 80098ac:	4603      	mov	r3, r0
 80098ae:	83fb      	strh	r3, [r7, #30]
 80098b0:	e0b4      	b.n	8009a1c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80098b2:	8bfb      	ldrh	r3, [r7, #30]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff fd31 	bl	800931c <ptr_to_mem>
 80098ba:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	791b      	ldrb	r3, [r3, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 80a4 	bne.w	8009a0e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	8bfb      	ldrh	r3, [r7, #30]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	f1a3 0208 	sub.w	r2, r3, #8
 80098d4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80098d6:	429a      	cmp	r2, r3
 80098d8:	f0c0 8099 	bcc.w	8009a0e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	8bfb      	ldrh	r3, [r7, #30]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	f1a3 0208 	sub.w	r2, r3, #8
 80098ea:	8bbb      	ldrh	r3, [r7, #28]
 80098ec:	3314      	adds	r3, #20
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d333      	bcc.n	800995a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80098f2:	8bfa      	ldrh	r2, [r7, #30]
 80098f4:	8bbb      	ldrh	r3, [r7, #28]
 80098f6:	4413      	add	r3, r2
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3308      	adds	r3, #8
 80098fc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80098fe:	8a7b      	ldrh	r3, [r7, #18]
 8009900:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009904:	d106      	bne.n	8009914 <mem_malloc+0xb0>
 8009906:	4b4c      	ldr	r3, [pc, #304]	; (8009a38 <mem_malloc+0x1d4>)
 8009908:	f240 3287 	movw	r2, #903	; 0x387
 800990c:	494b      	ldr	r1, [pc, #300]	; (8009a3c <mem_malloc+0x1d8>)
 800990e:	484c      	ldr	r0, [pc, #304]	; (8009a40 <mem_malloc+0x1dc>)
 8009910:	f009 fde8 	bl	80134e4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009914:	8a7b      	ldrh	r3, [r7, #18]
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff fd00 	bl	800931c <ptr_to_mem>
 800991c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	881a      	ldrh	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8bfa      	ldrh	r2, [r7, #30]
 8009930:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	8a7a      	ldrh	r2, [r7, #18]
 8009936:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2201      	movs	r2, #1
 800993c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009946:	d00b      	beq.n	8009960 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff fce5 	bl	800931c <ptr_to_mem>
 8009952:	4602      	mov	r2, r0
 8009954:	8a7b      	ldrh	r3, [r7, #18]
 8009956:	8053      	strh	r3, [r2, #2]
 8009958:	e002      	b.n	8009960 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2201      	movs	r2, #1
 800995e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009960:	4b34      	ldr	r3, [pc, #208]	; (8009a34 <mem_malloc+0x1d0>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	429a      	cmp	r2, r3
 8009968:	d127      	bne.n	80099ba <mem_malloc+0x156>
          struct mem *cur = lfree;
 800996a:	4b32      	ldr	r3, [pc, #200]	; (8009a34 <mem_malloc+0x1d0>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009970:	e005      	b.n	800997e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fcd0 	bl	800931c <ptr_to_mem>
 800997c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	791b      	ldrb	r3, [r3, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d004      	beq.n	8009990 <mem_malloc+0x12c>
 8009986:	4b2f      	ldr	r3, [pc, #188]	; (8009a44 <mem_malloc+0x1e0>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	429a      	cmp	r2, r3
 800998e:	d1f0      	bne.n	8009972 <mem_malloc+0x10e>
          }
          lfree = cur;
 8009990:	4a28      	ldr	r2, [pc, #160]	; (8009a34 <mem_malloc+0x1d0>)
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009996:	4b27      	ldr	r3, [pc, #156]	; (8009a34 <mem_malloc+0x1d0>)
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <mem_malloc+0x1e0>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d00b      	beq.n	80099ba <mem_malloc+0x156>
 80099a2:	4b24      	ldr	r3, [pc, #144]	; (8009a34 <mem_malloc+0x1d0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	791b      	ldrb	r3, [r3, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d006      	beq.n	80099ba <mem_malloc+0x156>
 80099ac:	4b22      	ldr	r3, [pc, #136]	; (8009a38 <mem_malloc+0x1d4>)
 80099ae:	f240 32b5 	movw	r2, #949	; 0x3b5
 80099b2:	4925      	ldr	r1, [pc, #148]	; (8009a48 <mem_malloc+0x1e4>)
 80099b4:	4822      	ldr	r0, [pc, #136]	; (8009a40 <mem_malloc+0x1dc>)
 80099b6:	f009 fd95 	bl	80134e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80099ba:	8bba      	ldrh	r2, [r7, #28]
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4413      	add	r3, r2
 80099c0:	3308      	adds	r3, #8
 80099c2:	4a20      	ldr	r2, [pc, #128]	; (8009a44 <mem_malloc+0x1e0>)
 80099c4:	6812      	ldr	r2, [r2, #0]
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d906      	bls.n	80099d8 <mem_malloc+0x174>
 80099ca:	4b1b      	ldr	r3, [pc, #108]	; (8009a38 <mem_malloc+0x1d4>)
 80099cc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80099d0:	491e      	ldr	r1, [pc, #120]	; (8009a4c <mem_malloc+0x1e8>)
 80099d2:	481b      	ldr	r0, [pc, #108]	; (8009a40 <mem_malloc+0x1dc>)
 80099d4:	f009 fd86 	bl	80134e4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d006      	beq.n	80099f0 <mem_malloc+0x18c>
 80099e2:	4b15      	ldr	r3, [pc, #84]	; (8009a38 <mem_malloc+0x1d4>)
 80099e4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80099e8:	4919      	ldr	r1, [pc, #100]	; (8009a50 <mem_malloc+0x1ec>)
 80099ea:	4815      	ldr	r0, [pc, #84]	; (8009a40 <mem_malloc+0x1dc>)
 80099ec:	f009 fd7a 	bl	80134e4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f003 0303 	and.w	r3, r3, #3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d006      	beq.n	8009a08 <mem_malloc+0x1a4>
 80099fa:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <mem_malloc+0x1d4>)
 80099fc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009a00:	4914      	ldr	r1, [pc, #80]	; (8009a54 <mem_malloc+0x1f0>)
 8009a02:	480f      	ldr	r0, [pc, #60]	; (8009a40 <mem_malloc+0x1dc>)
 8009a04:	f009 fd6e 	bl	80134e4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	e00e      	b.n	8009a2c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009a0e:	8bfb      	ldrh	r3, [r7, #30]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fc83 	bl	800931c <ptr_to_mem>
 8009a16:	4603      	mov	r3, r0
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009a1c:	8bfa      	ldrh	r2, [r7, #30]
 8009a1e:	8bbb      	ldrh	r3, [r7, #28]
 8009a20:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8009a24:	429a      	cmp	r2, r3
 8009a26:	f4ff af44 	bcc.w	80098b2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3720      	adds	r7, #32
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20005fb4 	.word	0x20005fb4
 8009a38:	08014984 	.word	0x08014984
 8009a3c:	08014b2c 	.word	0x08014b2c
 8009a40:	080149cc 	.word	0x080149cc
 8009a44:	20005fb0 	.word	0x20005fb0
 8009a48:	08014b40 	.word	0x08014b40
 8009a4c:	08014b5c 	.word	0x08014b5c
 8009a50:	08014b8c 	.word	0x08014b8c
 8009a54:	08014bbc 	.word	0x08014bbc

08009a58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	2200      	movs	r2, #0
 8009a66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	3303      	adds	r3, #3
 8009a6e:	f023 0303 	bic.w	r3, r3, #3
 8009a72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009a74:	2300      	movs	r3, #0
 8009a76:	60fb      	str	r3, [r7, #12]
 8009a78:	e011      	b.n	8009a9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	4413      	add	r3, r2
 8009a96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	885b      	ldrh	r3, [r3, #2]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	dbe7      	blt.n	8009a7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009abe:	2300      	movs	r3, #0
 8009ac0:	80fb      	strh	r3, [r7, #6]
 8009ac2:	e009      	b.n	8009ad8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009ac4:	88fb      	ldrh	r3, [r7, #6]
 8009ac6:	4a08      	ldr	r2, [pc, #32]	; (8009ae8 <memp_init+0x30>)
 8009ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff ffc3 	bl	8009a58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	80fb      	strh	r3, [r7, #6]
 8009ad8:	88fb      	ldrh	r3, [r7, #6]
 8009ada:	2b08      	cmp	r3, #8
 8009adc:	d9f2      	bls.n	8009ac4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	0801739c 	.word	0x0801739c

08009aec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d012      	beq.n	8009b28 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	6812      	ldr	r2, [r2, #0]
 8009b0a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d006      	beq.n	8009b24 <do_memp_malloc_pool+0x38>
 8009b16:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <do_memp_malloc_pool+0x48>)
 8009b18:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009b1c:	4906      	ldr	r1, [pc, #24]	; (8009b38 <do_memp_malloc_pool+0x4c>)
 8009b1e:	4807      	ldr	r0, [pc, #28]	; (8009b3c <do_memp_malloc_pool+0x50>)
 8009b20:	f009 fce0 	bl	80134e4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	e000      	b.n	8009b2a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	08014be0 	.word	0x08014be0
 8009b38:	08014c10 	.word	0x08014c10
 8009b3c:	08014c34 	.word	0x08014c34

08009b40 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	2b08      	cmp	r3, #8
 8009b4e:	d908      	bls.n	8009b62 <memp_malloc+0x22>
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <memp_malloc+0x3c>)
 8009b52:	f240 1257 	movw	r2, #343	; 0x157
 8009b56:	490a      	ldr	r1, [pc, #40]	; (8009b80 <memp_malloc+0x40>)
 8009b58:	480a      	ldr	r0, [pc, #40]	; (8009b84 <memp_malloc+0x44>)
 8009b5a:	f009 fcc3 	bl	80134e4 <iprintf>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e008      	b.n	8009b74 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	4a08      	ldr	r2, [pc, #32]	; (8009b88 <memp_malloc+0x48>)
 8009b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff ffbe 	bl	8009aec <do_memp_malloc_pool>
 8009b70:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009b72:	68fb      	ldr	r3, [r7, #12]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	08014be0 	.word	0x08014be0
 8009b80:	08014c70 	.word	0x08014c70
 8009b84:	08014c34 	.word	0x08014c34
 8009b88:	0801739c 	.word	0x0801739c

08009b8c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d006      	beq.n	8009bae <do_memp_free_pool+0x22>
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <do_memp_free_pool+0x40>)
 8009ba2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009ba6:	490a      	ldr	r1, [pc, #40]	; (8009bd0 <do_memp_free_pool+0x44>)
 8009ba8:	480a      	ldr	r0, [pc, #40]	; (8009bd4 <do_memp_free_pool+0x48>)
 8009baa:	f009 fc9b 	bl	80134e4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009bc4:	bf00      	nop
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	08014be0 	.word	0x08014be0
 8009bd0:	08014c90 	.word	0x08014c90
 8009bd4:	08014c34 	.word	0x08014c34

08009bd8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b08      	cmp	r3, #8
 8009be8:	d907      	bls.n	8009bfa <memp_free+0x22>
 8009bea:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <memp_free+0x44>)
 8009bec:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009bf0:	490b      	ldr	r1, [pc, #44]	; (8009c20 <memp_free+0x48>)
 8009bf2:	480c      	ldr	r0, [pc, #48]	; (8009c24 <memp_free+0x4c>)
 8009bf4:	f009 fc76 	bl	80134e4 <iprintf>
 8009bf8:	e00c      	b.n	8009c14 <memp_free+0x3c>

  if (mem == NULL) {
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d008      	beq.n	8009c12 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	4a09      	ldr	r2, [pc, #36]	; (8009c28 <memp_free+0x50>)
 8009c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff ffbe 	bl	8009b8c <do_memp_free_pool>
 8009c10:	e000      	b.n	8009c14 <memp_free+0x3c>
    return;
 8009c12:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	08014be0 	.word	0x08014be0
 8009c20:	08014cb0 	.word	0x08014cb0
 8009c24:	08014c34 	.word	0x08014c34
 8009c28:	0801739c 	.word	0x0801739c

08009c2c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009c30:	bf00      	nop
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
	...

08009c3c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d108      	bne.n	8009c62 <netif_add+0x26>
 8009c50:	4b57      	ldr	r3, [pc, #348]	; (8009db0 <netif_add+0x174>)
 8009c52:	f240 1227 	movw	r2, #295	; 0x127
 8009c56:	4957      	ldr	r1, [pc, #348]	; (8009db4 <netif_add+0x178>)
 8009c58:	4857      	ldr	r0, [pc, #348]	; (8009db8 <netif_add+0x17c>)
 8009c5a:	f009 fc43 	bl	80134e4 <iprintf>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e0a2      	b.n	8009da8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d108      	bne.n	8009c7a <netif_add+0x3e>
 8009c68:	4b51      	ldr	r3, [pc, #324]	; (8009db0 <netif_add+0x174>)
 8009c6a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009c6e:	4953      	ldr	r1, [pc, #332]	; (8009dbc <netif_add+0x180>)
 8009c70:	4851      	ldr	r0, [pc, #324]	; (8009db8 <netif_add+0x17c>)
 8009c72:	f009 fc37 	bl	80134e4 <iprintf>
 8009c76:	2300      	movs	r3, #0
 8009c78:	e096      	b.n	8009da8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009c80:	4b4f      	ldr	r3, [pc, #316]	; (8009dc0 <netif_add+0x184>)
 8009c82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009c8a:	4b4d      	ldr	r3, [pc, #308]	; (8009dc0 <netif_add+0x184>)
 8009c8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009c94:	4b4a      	ldr	r3, [pc, #296]	; (8009dc0 <netif_add+0x184>)
 8009c96:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4a45      	ldr	r2, [pc, #276]	; (8009dc4 <netif_add+0x188>)
 8009cae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6a3a      	ldr	r2, [r7, #32]
 8009cc8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009cca:	4b3f      	ldr	r3, [pc, #252]	; (8009dc8 <netif_add+0x18c>)
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cd8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f913 	bl	8009f0c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	4798      	blx	r3
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <netif_add+0xba>
    return NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e058      	b.n	8009da8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cfc:	2bff      	cmp	r3, #255	; 0xff
 8009cfe:	d103      	bne.n	8009d08 <netif_add+0xcc>
        netif->num = 0;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009d0c:	4b2f      	ldr	r3, [pc, #188]	; (8009dcc <netif_add+0x190>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	e02b      	b.n	8009d6c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d106      	bne.n	8009d2a <netif_add+0xee>
 8009d1c:	4b24      	ldr	r3, [pc, #144]	; (8009db0 <netif_add+0x174>)
 8009d1e:	f240 128b 	movw	r2, #395	; 0x18b
 8009d22:	492b      	ldr	r1, [pc, #172]	; (8009dd0 <netif_add+0x194>)
 8009d24:	4824      	ldr	r0, [pc, #144]	; (8009db8 <netif_add+0x17c>)
 8009d26:	f009 fbdd 	bl	80134e4 <iprintf>
        num_netifs++;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	2bff      	cmp	r3, #255	; 0xff
 8009d34:	dd06      	ble.n	8009d44 <netif_add+0x108>
 8009d36:	4b1e      	ldr	r3, [pc, #120]	; (8009db0 <netif_add+0x174>)
 8009d38:	f240 128d 	movw	r2, #397	; 0x18d
 8009d3c:	4925      	ldr	r1, [pc, #148]	; (8009dd4 <netif_add+0x198>)
 8009d3e:	481e      	ldr	r0, [pc, #120]	; (8009db8 <netif_add+0x17c>)
 8009d40:	f009 fbd0 	bl	80134e4 <iprintf>
        if (netif2->num == netif->num) {
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d108      	bne.n	8009d66 <netif_add+0x12a>
          netif->num++;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009d64:	e005      	b.n	8009d72 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1d0      	bne.n	8009d14 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1be      	bne.n	8009cf6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d7e:	2bfe      	cmp	r3, #254	; 0xfe
 8009d80:	d103      	bne.n	8009d8a <netif_add+0x14e>
    netif_num = 0;
 8009d82:	4b11      	ldr	r3, [pc, #68]	; (8009dc8 <netif_add+0x18c>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	701a      	strb	r2, [r3, #0]
 8009d88:	e006      	b.n	8009d98 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d90:	3301      	adds	r3, #1
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	4b0c      	ldr	r3, [pc, #48]	; (8009dc8 <netif_add+0x18c>)
 8009d96:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009d98:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <netif_add+0x190>)
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009da0:	4a0a      	ldr	r2, [pc, #40]	; (8009dcc <netif_add+0x190>)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009da6:	68fb      	ldr	r3, [r7, #12]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3718      	adds	r7, #24
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	08014ccc 	.word	0x08014ccc
 8009db4:	08014d60 	.word	0x08014d60
 8009db8:	08014d1c 	.word	0x08014d1c
 8009dbc:	08014d7c 	.word	0x08014d7c
 8009dc0:	08017400 	.word	0x08017400
 8009dc4:	0800a11f 	.word	0x0800a11f
 8009dc8:	20008eac 	.word	0x20008eac
 8009dcc:	20008ea4 	.word	0x20008ea4
 8009dd0:	08014da0 	.word	0x08014da0
 8009dd4:	08014db4 	.word	0x08014db4

08009dd8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f002 fb81 	bl	800c4ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f007 f81f 	bl	8010e30 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009df2:	bf00      	nop
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
	...

08009dfc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <netif_do_set_ipaddr+0x20>
 8009e0e:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <netif_do_set_ipaddr+0x88>)
 8009e10:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009e14:	491c      	ldr	r1, [pc, #112]	; (8009e88 <netif_do_set_ipaddr+0x8c>)
 8009e16:	481d      	ldr	r0, [pc, #116]	; (8009e8c <netif_do_set_ipaddr+0x90>)
 8009e18:	f009 fb64 	bl	80134e4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d106      	bne.n	8009e30 <netif_do_set_ipaddr+0x34>
 8009e22:	4b18      	ldr	r3, [pc, #96]	; (8009e84 <netif_do_set_ipaddr+0x88>)
 8009e24:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009e28:	4917      	ldr	r1, [pc, #92]	; (8009e88 <netif_do_set_ipaddr+0x8c>)
 8009e2a:	4818      	ldr	r0, [pc, #96]	; (8009e8c <netif_do_set_ipaddr+0x90>)
 8009e2c:	f009 fb5a 	bl	80134e4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3304      	adds	r3, #4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d01c      	beq.n	8009e78 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	3304      	adds	r3, #4
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009e4e:	f107 0314 	add.w	r3, r7, #20
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff ffbf 	bl	8009dd8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <netif_do_set_ipaddr+0x6a>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	e000      	b.n	8009e68 <netif_do_set_ipaddr+0x6c>
 8009e66:	2300      	movs	r3, #0
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f8d2 	bl	800a018 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009e74:	2301      	movs	r3, #1
 8009e76:	e000      	b.n	8009e7a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	08014ccc 	.word	0x08014ccc
 8009e88:	08014de4 	.word	0x08014de4
 8009e8c:	08014d1c 	.word	0x08014d1c

08009e90 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d00a      	beq.n	8009ec0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <netif_do_set_netmask+0x26>
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	e000      	b.n	8009eb8 <netif_do_set_netmask+0x28>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e000      	b.n	8009ec2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d00a      	beq.n	8009efe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <netif_do_set_gw+0x26>
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	e000      	b.n	8009ef6 <netif_do_set_gw+0x28>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009f28:	4b1c      	ldr	r3, [pc, #112]	; (8009f9c <netif_set_addr+0x90>)
 8009f2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009f32:	4b1a      	ldr	r3, [pc, #104]	; (8009f9c <netif_set_addr+0x90>)
 8009f34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009f3c:	4b17      	ldr	r3, [pc, #92]	; (8009f9c <netif_set_addr+0x90>)
 8009f3e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <netif_set_addr+0x42>
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <netif_set_addr+0x46>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <netif_set_addr+0x48>
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d006      	beq.n	8009f6a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009f5c:	f107 0310 	add.w	r3, r7, #16
 8009f60:	461a      	mov	r2, r3
 8009f62:	68b9      	ldr	r1, [r7, #8]
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f7ff ff49 	bl	8009dfc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7ff ff8e 	bl	8009e90 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009f74:	69ba      	ldr	r2, [r7, #24]
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff ffa8 	bl	8009ece <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d106      	bne.n	8009f92 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009f84:	f107 0310 	add.w	r3, r7, #16
 8009f88:	461a      	mov	r2, r3
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff ff35 	bl	8009dfc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009f92:	bf00      	nop
 8009f94:	3720      	adds	r7, #32
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	08017400 	.word	0x08017400

08009fa0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009fa8:	4a04      	ldr	r2, [pc, #16]	; (8009fbc <netif_set_default+0x1c>)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009fae:	bf00      	nop
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	20008ea8 	.word	0x20008ea8

08009fc0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d107      	bne.n	8009fde <netif_set_up+0x1e>
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <netif_set_up+0x4c>)
 8009fd0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009fd4:	490e      	ldr	r1, [pc, #56]	; (800a010 <netif_set_up+0x50>)
 8009fd6:	480f      	ldr	r0, [pc, #60]	; (800a014 <netif_set_up+0x54>)
 8009fd8:	f009 fa84 	bl	80134e4 <iprintf>
 8009fdc:	e013      	b.n	800a006 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10c      	bne.n	800a006 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ff2:	f043 0301 	orr.w	r3, r3, #1
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009ffe:	2103      	movs	r1, #3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f809 	bl	800a018 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	08014ccc 	.word	0x08014ccc
 800a010:	08014e54 	.word	0x08014e54
 800a014:	08014d1c 	.word	0x08014d1c

0800a018 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d106      	bne.n	800a038 <netif_issue_reports+0x20>
 800a02a:	4b18      	ldr	r3, [pc, #96]	; (800a08c <netif_issue_reports+0x74>)
 800a02c:	f240 326d 	movw	r2, #877	; 0x36d
 800a030:	4917      	ldr	r1, [pc, #92]	; (800a090 <netif_issue_reports+0x78>)
 800a032:	4818      	ldr	r0, [pc, #96]	; (800a094 <netif_issue_reports+0x7c>)
 800a034:	f009 fa56 	bl	80134e4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01e      	beq.n	800a084 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a04c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a050:	2b00      	cmp	r3, #0
 800a052:	d017      	beq.n	800a084 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d013      	beq.n	800a086 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3304      	adds	r3, #4
 800a062:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00e      	beq.n	800a086 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3304      	adds	r3, #4
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f007 fe41 	bl	8011d04 <etharp_request>
 800a082:	e000      	b.n	800a086 <netif_issue_reports+0x6e>
    return;
 800a084:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	08014ccc 	.word	0x08014ccc
 800a090:	08014e70 	.word	0x08014e70
 800a094:	08014d1c 	.word	0x08014d1c

0800a098 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <netif_set_down+0x1e>
 800a0a6:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <netif_set_down+0x58>)
 800a0a8:	f240 329b 	movw	r2, #923	; 0x39b
 800a0ac:	4911      	ldr	r1, [pc, #68]	; (800a0f4 <netif_set_down+0x5c>)
 800a0ae:	4812      	ldr	r0, [pc, #72]	; (800a0f8 <netif_set_down+0x60>)
 800a0b0:	f009 fa18 	bl	80134e4 <iprintf>
 800a0b4:	e019      	b.n	800a0ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d012      	beq.n	800a0ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0ca:	f023 0301 	bic.w	r3, r3, #1
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0dc:	f003 0308 	and.w	r3, r3, #8
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f007 f9cb 	bl	8011480 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	08014ccc 	.word	0x08014ccc
 800a0f4:	08014e94 	.word	0x08014e94
 800a0f8:	08014d1c 	.word	0x08014d1c

0800a0fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	61da      	str	r2, [r3, #28]
  }
}
 800a112:	bf00      	nop
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a11e:	b480      	push	{r7}
 800a120:	b085      	sub	sp, #20
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a12a:	f06f 030b 	mvn.w	r3, #11
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
	...

0800a13c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d013      	beq.n	800a174 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a14c:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <netif_get_by_index+0x48>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	60fb      	str	r3, [r7, #12]
 800a152:	e00c      	b.n	800a16e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a15a:	3301      	adds	r3, #1
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	79fa      	ldrb	r2, [r7, #7]
 800a160:	429a      	cmp	r2, r3
 800a162:	d101      	bne.n	800a168 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	e006      	b.n	800a176 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	60fb      	str	r3, [r7, #12]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1ef      	bne.n	800a154 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20008ea4 	.word	0x20008ea4

0800a188 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a18e:	4b0c      	ldr	r3, [pc, #48]	; (800a1c0 <pbuf_free_ooseq+0x38>)
 800a190:	2200      	movs	r2, #0
 800a192:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a194:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <pbuf_free_ooseq+0x3c>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	607b      	str	r3, [r7, #4]
 800a19a:	e00a      	b.n	800a1b2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f002 f9df 	bl	800c568 <tcp_free_ooseq>
      return;
 800a1aa:	e005      	b.n	800a1b8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	607b      	str	r3, [r7, #4]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1f1      	bne.n	800a19c <pbuf_free_ooseq+0x14>
    }
  }
}
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20008ead 	.word	0x20008ead
 800a1c4:	20008ebc 	.word	0x20008ebc

0800a1c8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a1cc:	4b03      	ldr	r3, [pc, #12]	; (800a1dc <pbuf_pool_is_empty+0x14>)
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a1d2:	bf00      	nop
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	20008ead 	.word	0x20008ead

0800a1e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	80fb      	strh	r3, [r7, #6]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	88ba      	ldrh	r2, [r7, #4]
 800a20c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a20e:	8b3b      	ldrh	r3, [r7, #24]
 800a210:	b2da      	uxtb	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	7f3a      	ldrb	r2, [r7, #28]
 800a21a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2201      	movs	r2, #1
 800a220:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	73da      	strb	r2, [r3, #15]
}
 800a228:	bf00      	nop
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08c      	sub	sp, #48	; 0x30
 800a238:	af02      	add	r7, sp, #8
 800a23a:	4603      	mov	r3, r0
 800a23c:	71fb      	strb	r3, [r7, #7]
 800a23e:	460b      	mov	r3, r1
 800a240:	80bb      	strh	r3, [r7, #4]
 800a242:	4613      	mov	r3, r2
 800a244:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a246:	79fb      	ldrb	r3, [r7, #7]
 800a248:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a24a:	887b      	ldrh	r3, [r7, #2]
 800a24c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a250:	d07f      	beq.n	800a352 <pbuf_alloc+0x11e>
 800a252:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a256:	f300 80c8 	bgt.w	800a3ea <pbuf_alloc+0x1b6>
 800a25a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a25e:	d010      	beq.n	800a282 <pbuf_alloc+0x4e>
 800a260:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a264:	f300 80c1 	bgt.w	800a3ea <pbuf_alloc+0x1b6>
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d002      	beq.n	800a272 <pbuf_alloc+0x3e>
 800a26c:	2b41      	cmp	r3, #65	; 0x41
 800a26e:	f040 80bc 	bne.w	800a3ea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a272:	887a      	ldrh	r2, [r7, #2]
 800a274:	88bb      	ldrh	r3, [r7, #4]
 800a276:	4619      	mov	r1, r3
 800a278:	2000      	movs	r0, #0
 800a27a:	f000 f8d1 	bl	800a420 <pbuf_alloc_reference>
 800a27e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a280:	e0bd      	b.n	800a3fe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a282:	2300      	movs	r3, #0
 800a284:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a286:	2300      	movs	r3, #0
 800a288:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a28a:	88bb      	ldrh	r3, [r7, #4]
 800a28c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a28e:	2008      	movs	r0, #8
 800a290:	f7ff fc56 	bl	8009b40 <memp_malloc>
 800a294:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d109      	bne.n	800a2b0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a29c:	f7ff ff94 	bl	800a1c8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <pbuf_alloc+0x78>
            pbuf_free(p);
 800a2a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2a8:	f000 faa8 	bl	800a7fc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	e0a7      	b.n	800a400 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a2b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2b2:	3303      	adds	r3, #3
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f023 0303 	bic.w	r3, r3, #3
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	8b7a      	ldrh	r2, [r7, #26]
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	bf28      	it	cs
 800a2c8:	4613      	movcs	r3, r2
 800a2ca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a2cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2ce:	3310      	adds	r3, #16
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3303      	adds	r3, #3
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	4618      	mov	r0, r3
 800a2dc:	89f9      	ldrh	r1, [r7, #14]
 800a2de:	8b7a      	ldrh	r2, [r7, #26]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	887b      	ldrh	r3, [r7, #2]
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	6938      	ldr	r0, [r7, #16]
 800a2ee:	f7ff ff77 	bl	800a1e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f003 0303 	and.w	r3, r3, #3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d006      	beq.n	800a30c <pbuf_alloc+0xd8>
 800a2fe:	4b42      	ldr	r3, [pc, #264]	; (800a408 <pbuf_alloc+0x1d4>)
 800a300:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a304:	4941      	ldr	r1, [pc, #260]	; (800a40c <pbuf_alloc+0x1d8>)
 800a306:	4842      	ldr	r0, [pc, #264]	; (800a410 <pbuf_alloc+0x1dc>)
 800a308:	f009 f8ec 	bl	80134e4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a30c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a30e:	3303      	adds	r3, #3
 800a310:	f023 0303 	bic.w	r3, r3, #3
 800a314:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a318:	d106      	bne.n	800a328 <pbuf_alloc+0xf4>
 800a31a:	4b3b      	ldr	r3, [pc, #236]	; (800a408 <pbuf_alloc+0x1d4>)
 800a31c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a320:	493c      	ldr	r1, [pc, #240]	; (800a414 <pbuf_alloc+0x1e0>)
 800a322:	483b      	ldr	r0, [pc, #236]	; (800a410 <pbuf_alloc+0x1dc>)
 800a324:	f009 f8de 	bl	80134e4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
 800a332:	e002      	b.n	800a33a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a33e:	8b7a      	ldrh	r2, [r7, #26]
 800a340:	89fb      	ldrh	r3, [r7, #14]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a34a:	8b7b      	ldrh	r3, [r7, #26]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d19e      	bne.n	800a28e <pbuf_alloc+0x5a>
      break;
 800a350:	e055      	b.n	800a3fe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a354:	3303      	adds	r3, #3
 800a356:	b29b      	uxth	r3, r3
 800a358:	f023 0303 	bic.w	r3, r3, #3
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	88bb      	ldrh	r3, [r7, #4]
 800a360:	3303      	adds	r3, #3
 800a362:	b29b      	uxth	r3, r3
 800a364:	f023 0303 	bic.w	r3, r3, #3
 800a368:	b29b      	uxth	r3, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a36e:	8b3b      	ldrh	r3, [r7, #24]
 800a370:	3310      	adds	r3, #16
 800a372:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a374:	8b3a      	ldrh	r2, [r7, #24]
 800a376:	88bb      	ldrh	r3, [r7, #4]
 800a378:	3303      	adds	r3, #3
 800a37a:	f023 0303 	bic.w	r3, r3, #3
 800a37e:	429a      	cmp	r2, r3
 800a380:	d306      	bcc.n	800a390 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a382:	8afa      	ldrh	r2, [r7, #22]
 800a384:	88bb      	ldrh	r3, [r7, #4]
 800a386:	3303      	adds	r3, #3
 800a388:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d201      	bcs.n	800a394 <pbuf_alloc+0x160>
        return NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	e035      	b.n	800a400 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a394:	8afb      	ldrh	r3, [r7, #22]
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff fa64 	bl	8009864 <mem_malloc>
 800a39c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <pbuf_alloc+0x174>
        return NULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	e02b      	b.n	800a400 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a3a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3aa:	3310      	adds	r3, #16
 800a3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ae:	4413      	add	r3, r2
 800a3b0:	3303      	adds	r3, #3
 800a3b2:	f023 0303 	bic.w	r3, r3, #3
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	88b9      	ldrh	r1, [r7, #4]
 800a3ba:	88ba      	ldrh	r2, [r7, #4]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	887b      	ldrh	r3, [r7, #2]
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4601      	mov	r1, r0
 800a3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3ca:	f7ff ff09 	bl	800a1e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d010      	beq.n	800a3fc <pbuf_alloc+0x1c8>
 800a3da:	4b0b      	ldr	r3, [pc, #44]	; (800a408 <pbuf_alloc+0x1d4>)
 800a3dc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a3e0:	490d      	ldr	r1, [pc, #52]	; (800a418 <pbuf_alloc+0x1e4>)
 800a3e2:	480b      	ldr	r0, [pc, #44]	; (800a410 <pbuf_alloc+0x1dc>)
 800a3e4:	f009 f87e 	bl	80134e4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a3e8:	e008      	b.n	800a3fc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a3ea:	4b07      	ldr	r3, [pc, #28]	; (800a408 <pbuf_alloc+0x1d4>)
 800a3ec:	f240 1227 	movw	r2, #295	; 0x127
 800a3f0:	490a      	ldr	r1, [pc, #40]	; (800a41c <pbuf_alloc+0x1e8>)
 800a3f2:	4807      	ldr	r0, [pc, #28]	; (800a410 <pbuf_alloc+0x1dc>)
 800a3f4:	f009 f876 	bl	80134e4 <iprintf>
      return NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e001      	b.n	800a400 <pbuf_alloc+0x1cc>
      break;
 800a3fc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a400:	4618      	mov	r0, r3
 800a402:	3728      	adds	r7, #40	; 0x28
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	08014efc 	.word	0x08014efc
 800a40c:	08014f2c 	.word	0x08014f2c
 800a410:	08014f5c 	.word	0x08014f5c
 800a414:	08014f84 	.word	0x08014f84
 800a418:	08014fb8 	.word	0x08014fb8
 800a41c:	08014fe4 	.word	0x08014fe4

0800a420 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af02      	add	r7, sp, #8
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	807b      	strh	r3, [r7, #2]
 800a42c:	4613      	mov	r3, r2
 800a42e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a430:	883b      	ldrh	r3, [r7, #0]
 800a432:	2b41      	cmp	r3, #65	; 0x41
 800a434:	d009      	beq.n	800a44a <pbuf_alloc_reference+0x2a>
 800a436:	883b      	ldrh	r3, [r7, #0]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d006      	beq.n	800a44a <pbuf_alloc_reference+0x2a>
 800a43c:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <pbuf_alloc_reference+0x5c>)
 800a43e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a442:	490f      	ldr	r1, [pc, #60]	; (800a480 <pbuf_alloc_reference+0x60>)
 800a444:	480f      	ldr	r0, [pc, #60]	; (800a484 <pbuf_alloc_reference+0x64>)
 800a446:	f009 f84d 	bl	80134e4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a44a:	2007      	movs	r0, #7
 800a44c:	f7ff fb78 	bl	8009b40 <memp_malloc>
 800a450:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a458:	2300      	movs	r3, #0
 800a45a:	e00b      	b.n	800a474 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a45c:	8879      	ldrh	r1, [r7, #2]
 800a45e:	887a      	ldrh	r2, [r7, #2]
 800a460:	2300      	movs	r3, #0
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	883b      	ldrh	r3, [r7, #0]
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	460b      	mov	r3, r1
 800a46a:	6879      	ldr	r1, [r7, #4]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f7ff feb7 	bl	800a1e0 <pbuf_init_alloced_pbuf>
  return p;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	08014efc 	.word	0x08014efc
 800a480:	08015000 	.word	0x08015000
 800a484:	08014f5c 	.word	0x08014f5c

0800a488 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af02      	add	r7, sp, #8
 800a48e:	607b      	str	r3, [r7, #4]
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
 800a494:	460b      	mov	r3, r1
 800a496:	81bb      	strh	r3, [r7, #12]
 800a498:	4613      	mov	r3, r2
 800a49a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a4a0:	8a7b      	ldrh	r3, [r7, #18]
 800a4a2:	3303      	adds	r3, #3
 800a4a4:	f023 0203 	bic.w	r2, r3, #3
 800a4a8:	89bb      	ldrh	r3, [r7, #12]
 800a4aa:	441a      	add	r2, r3
 800a4ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d901      	bls.n	800a4b6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e018      	b.n	800a4e8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d007      	beq.n	800a4cc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a4bc:	8a7b      	ldrh	r3, [r7, #18]
 800a4be:	3303      	adds	r3, #3
 800a4c0:	f023 0303 	bic.w	r3, r3, #3
 800a4c4:	6a3a      	ldr	r2, [r7, #32]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]
 800a4ca:	e001      	b.n	800a4d0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	89b9      	ldrh	r1, [r7, #12]
 800a4d4:	89ba      	ldrh	r2, [r7, #12]
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	897b      	ldrh	r3, [r7, #10]
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	f7ff fe7d 	bl	800a1e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a4e6:	687b      	ldr	r3, [r7, #4]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <pbuf_realloc+0x20>
 800a502:	4b3a      	ldr	r3, [pc, #232]	; (800a5ec <pbuf_realloc+0xfc>)
 800a504:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a508:	4939      	ldr	r1, [pc, #228]	; (800a5f0 <pbuf_realloc+0x100>)
 800a50a:	483a      	ldr	r0, [pc, #232]	; (800a5f4 <pbuf_realloc+0x104>)
 800a50c:	f008 ffea 	bl	80134e4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	891b      	ldrh	r3, [r3, #8]
 800a514:	887a      	ldrh	r2, [r7, #2]
 800a516:	429a      	cmp	r2, r3
 800a518:	d263      	bcs.n	800a5e2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	891a      	ldrh	r2, [r3, #8]
 800a51e:	887b      	ldrh	r3, [r7, #2]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a524:	887b      	ldrh	r3, [r7, #2]
 800a526:	817b      	strh	r3, [r7, #10]
  q = p;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a52c:	e018      	b.n	800a560 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	895b      	ldrh	r3, [r3, #10]
 800a532:	897a      	ldrh	r2, [r7, #10]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	891a      	ldrh	r2, [r3, #8]
 800a53c:	893b      	ldrh	r3, [r7, #8]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	b29a      	uxth	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d106      	bne.n	800a560 <pbuf_realloc+0x70>
 800a552:	4b26      	ldr	r3, [pc, #152]	; (800a5ec <pbuf_realloc+0xfc>)
 800a554:	f240 12af 	movw	r2, #431	; 0x1af
 800a558:	4927      	ldr	r1, [pc, #156]	; (800a5f8 <pbuf_realloc+0x108>)
 800a55a:	4826      	ldr	r0, [pc, #152]	; (800a5f4 <pbuf_realloc+0x104>)
 800a55c:	f008 ffc2 	bl	80134e4 <iprintf>
  while (rem_len > q->len) {
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	895b      	ldrh	r3, [r3, #10]
 800a564:	897a      	ldrh	r2, [r7, #10]
 800a566:	429a      	cmp	r2, r3
 800a568:	d8e1      	bhi.n	800a52e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	7b1b      	ldrb	r3, [r3, #12]
 800a56e:	f003 030f 	and.w	r3, r3, #15
 800a572:	2b00      	cmp	r3, #0
 800a574:	d121      	bne.n	800a5ba <pbuf_realloc+0xca>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	895b      	ldrh	r3, [r3, #10]
 800a57a:	897a      	ldrh	r2, [r7, #10]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d01c      	beq.n	800a5ba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	7b5b      	ldrb	r3, [r3, #13]
 800a584:	f003 0302 	and.w	r3, r3, #2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d116      	bne.n	800a5ba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	b29a      	uxth	r2, r3
 800a596:	897b      	ldrh	r3, [r7, #10]
 800a598:	4413      	add	r3, r2
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4619      	mov	r1, r3
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f7ff f864 	bl	800966c <mem_trim>
 800a5a4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d106      	bne.n	800a5ba <pbuf_realloc+0xca>
 800a5ac:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <pbuf_realloc+0xfc>)
 800a5ae:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a5b2:	4912      	ldr	r1, [pc, #72]	; (800a5fc <pbuf_realloc+0x10c>)
 800a5b4:	480f      	ldr	r0, [pc, #60]	; (800a5f4 <pbuf_realloc+0x104>)
 800a5b6:	f008 ff95 	bl	80134e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	897a      	ldrh	r2, [r7, #10]
 800a5be:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	895a      	ldrh	r2, [r3, #10]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d004      	beq.n	800a5da <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 f911 	bl	800a7fc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	e000      	b.n	800a5e4 <pbuf_realloc+0xf4>
    return;
 800a5e2:	bf00      	nop

}
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	08014efc 	.word	0x08014efc
 800a5f0:	08015014 	.word	0x08015014
 800a5f4:	08014f5c 	.word	0x08014f5c
 800a5f8:	0801502c 	.word	0x0801502c
 800a5fc:	08015044 	.word	0x08015044

0800a600 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	4613      	mov	r3, r2
 800a60c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d106      	bne.n	800a622 <pbuf_add_header_impl+0x22>
 800a614:	4b2b      	ldr	r3, [pc, #172]	; (800a6c4 <pbuf_add_header_impl+0xc4>)
 800a616:	f240 12df 	movw	r2, #479	; 0x1df
 800a61a:	492b      	ldr	r1, [pc, #172]	; (800a6c8 <pbuf_add_header_impl+0xc8>)
 800a61c:	482b      	ldr	r0, [pc, #172]	; (800a6cc <pbuf_add_header_impl+0xcc>)
 800a61e:	f008 ff61 	bl	80134e4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d003      	beq.n	800a630 <pbuf_add_header_impl+0x30>
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a62e:	d301      	bcc.n	800a634 <pbuf_add_header_impl+0x34>
    return 1;
 800a630:	2301      	movs	r3, #1
 800a632:	e043      	b.n	800a6bc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <pbuf_add_header_impl+0x3e>
    return 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	e03e      	b.n	800a6bc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	891a      	ldrh	r2, [r3, #8]
 800a646:	8a7b      	ldrh	r3, [r7, #18]
 800a648:	4413      	add	r3, r2
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	8a7a      	ldrh	r2, [r7, #18]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d901      	bls.n	800a656 <pbuf_add_header_impl+0x56>
    return 1;
 800a652:	2301      	movs	r3, #1
 800a654:	e032      	b.n	800a6bc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	7b1b      	ldrb	r3, [r3, #12]
 800a65a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a65c:	8a3b      	ldrh	r3, [r7, #16]
 800a65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00c      	beq.n	800a680 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	425b      	negs	r3, r3
 800a66e:	4413      	add	r3, r2
 800a670:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3310      	adds	r3, #16
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d20d      	bcs.n	800a698 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e01d      	b.n	800a6bc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d006      	beq.n	800a694 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	425b      	negs	r3, r3
 800a68e:	4413      	add	r3, r2
 800a690:	617b      	str	r3, [r7, #20]
 800a692:	e001      	b.n	800a698 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a694:	2301      	movs	r3, #1
 800a696:	e011      	b.n	800a6bc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	895a      	ldrh	r2, [r3, #10]
 800a6a2:	8a7b      	ldrh	r3, [r7, #18]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	891a      	ldrh	r2, [r3, #8]
 800a6b0:	8a7b      	ldrh	r3, [r7, #18]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	811a      	strh	r2, [r3, #8]


  return 0;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3718      	adds	r7, #24
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	08014efc 	.word	0x08014efc
 800a6c8:	08015060 	.word	0x08015060
 800a6cc:	08014f5c 	.word	0x08014f5c

0800a6d0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a6da:	2200      	movs	r2, #0
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff ff8e 	bl	800a600 <pbuf_add_header_impl>
 800a6e4:	4603      	mov	r3, r0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <pbuf_remove_header+0x1e>
 800a700:	4b20      	ldr	r3, [pc, #128]	; (800a784 <pbuf_remove_header+0x94>)
 800a702:	f240 224b 	movw	r2, #587	; 0x24b
 800a706:	4920      	ldr	r1, [pc, #128]	; (800a788 <pbuf_remove_header+0x98>)
 800a708:	4820      	ldr	r0, [pc, #128]	; (800a78c <pbuf_remove_header+0x9c>)
 800a70a:	f008 feeb 	bl	80134e4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <pbuf_remove_header+0x2c>
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a71a:	d301      	bcc.n	800a720 <pbuf_remove_header+0x30>
    return 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e02c      	b.n	800a77a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <pbuf_remove_header+0x3a>
    return 0;
 800a726:	2300      	movs	r3, #0
 800a728:	e027      	b.n	800a77a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	895b      	ldrh	r3, [r3, #10]
 800a732:	89fa      	ldrh	r2, [r7, #14]
 800a734:	429a      	cmp	r2, r3
 800a736:	d908      	bls.n	800a74a <pbuf_remove_header+0x5a>
 800a738:	4b12      	ldr	r3, [pc, #72]	; (800a784 <pbuf_remove_header+0x94>)
 800a73a:	f240 2255 	movw	r2, #597	; 0x255
 800a73e:	4914      	ldr	r1, [pc, #80]	; (800a790 <pbuf_remove_header+0xa0>)
 800a740:	4812      	ldr	r0, [pc, #72]	; (800a78c <pbuf_remove_header+0x9c>)
 800a742:	f008 fecf 	bl	80134e4 <iprintf>
 800a746:	2301      	movs	r3, #1
 800a748:	e017      	b.n	800a77a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	441a      	add	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	895a      	ldrh	r2, [r3, #10]
 800a760:	89fb      	ldrh	r3, [r7, #14]
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	b29a      	uxth	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	891a      	ldrh	r2, [r3, #8]
 800a76e:	89fb      	ldrh	r3, [r7, #14]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	b29a      	uxth	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	08014efc 	.word	0x08014efc
 800a788:	08015060 	.word	0x08015060
 800a78c:	08014f5c 	.word	0x08014f5c
 800a790:	0801506c 	.word	0x0801506c

0800a794 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	807b      	strh	r3, [r7, #2]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a7a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	da08      	bge.n	800a7be <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a7ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7b0:	425b      	negs	r3, r3
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff ff9b 	bl	800a6f0 <pbuf_remove_header>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	e007      	b.n	800a7ce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a7be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7c2:	787a      	ldrb	r2, [r7, #1]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7ff ff1a 	bl	800a600 <pbuf_add_header_impl>
 800a7cc:	4603      	mov	r3, r0
  }
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a7e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff ffd2 	bl	800a794 <pbuf_header_impl>
 800a7f0:	4603      	mov	r3, r0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10b      	bne.n	800a822 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d106      	bne.n	800a81e <pbuf_free+0x22>
 800a810:	4b38      	ldr	r3, [pc, #224]	; (800a8f4 <pbuf_free+0xf8>)
 800a812:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a816:	4938      	ldr	r1, [pc, #224]	; (800a8f8 <pbuf_free+0xfc>)
 800a818:	4838      	ldr	r0, [pc, #224]	; (800a8fc <pbuf_free+0x100>)
 800a81a:	f008 fe63 	bl	80134e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	e063      	b.n	800a8ea <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a826:	e05c      	b.n	800a8e2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	7b9b      	ldrb	r3, [r3, #14]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d106      	bne.n	800a83e <pbuf_free+0x42>
 800a830:	4b30      	ldr	r3, [pc, #192]	; (800a8f4 <pbuf_free+0xf8>)
 800a832:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a836:	4932      	ldr	r1, [pc, #200]	; (800a900 <pbuf_free+0x104>)
 800a838:	4830      	ldr	r0, [pc, #192]	; (800a8fc <pbuf_free+0x100>)
 800a83a:	f008 fe53 	bl	80134e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7b9b      	ldrb	r3, [r3, #14]
 800a842:	3b01      	subs	r3, #1
 800a844:	b2da      	uxtb	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	739a      	strb	r2, [r3, #14]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	7b9b      	ldrb	r3, [r3, #14]
 800a84e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a850:	7dbb      	ldrb	r3, [r7, #22]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d143      	bne.n	800a8de <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	7b1b      	ldrb	r3, [r3, #12]
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	7b5b      	ldrb	r3, [r3, #13]
 800a86a:	f003 0302 	and.w	r3, r3, #2
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d011      	beq.n	800a896 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d106      	bne.n	800a88c <pbuf_free+0x90>
 800a87e:	4b1d      	ldr	r3, [pc, #116]	; (800a8f4 <pbuf_free+0xf8>)
 800a880:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a884:	491f      	ldr	r1, [pc, #124]	; (800a904 <pbuf_free+0x108>)
 800a886:	481d      	ldr	r0, [pc, #116]	; (800a8fc <pbuf_free+0x100>)
 800a888:	f008 fe2c 	bl	80134e4 <iprintf>
        pc->custom_free_function(p);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	4798      	blx	r3
 800a894:	e01d      	b.n	800a8d2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a896:	7bfb      	ldrb	r3, [r7, #15]
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d104      	bne.n	800a8a6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a89c:	6879      	ldr	r1, [r7, #4]
 800a89e:	2008      	movs	r0, #8
 800a8a0:	f7ff f99a 	bl	8009bd8 <memp_free>
 800a8a4:	e015      	b.n	800a8d2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d104      	bne.n	800a8b6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a8ac:	6879      	ldr	r1, [r7, #4]
 800a8ae:	2007      	movs	r0, #7
 800a8b0:	f7ff f992 	bl	8009bd8 <memp_free>
 800a8b4:	e00d      	b.n	800a8d2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d103      	bne.n	800a8c4 <pbuf_free+0xc8>
          mem_free(p);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7fe fe6b 	bl	8009598 <mem_free>
 800a8c2:	e006      	b.n	800a8d2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a8c4:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <pbuf_free+0xf8>)
 800a8c6:	f240 320f 	movw	r2, #783	; 0x30f
 800a8ca:	490f      	ldr	r1, [pc, #60]	; (800a908 <pbuf_free+0x10c>)
 800a8cc:	480b      	ldr	r0, [pc, #44]	; (800a8fc <pbuf_free+0x100>)
 800a8ce:	f008 fe09 	bl	80134e4 <iprintf>
        }
      }
      count++;
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	607b      	str	r3, [r7, #4]
 800a8dc:	e001      	b.n	800a8e2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d19f      	bne.n	800a828 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	08014efc 	.word	0x08014efc
 800a8f8:	08015060 	.word	0x08015060
 800a8fc:	08014f5c 	.word	0x08014f5c
 800a900:	0801508c 	.word	0x0801508c
 800a904:	080150a4 	.word	0x080150a4
 800a908:	080150c8 	.word	0x080150c8

0800a90c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a918:	e005      	b.n	800a926 <pbuf_clen+0x1a>
    ++len;
 800a91a:	89fb      	ldrh	r3, [r7, #14]
 800a91c:	3301      	adds	r3, #1
 800a91e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1f6      	bne.n	800a91a <pbuf_clen+0xe>
  }
  return len;
 800a92c:	89fb      	ldrh	r3, [r7, #14]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
	...

0800a93c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d010      	beq.n	800a96c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	7b9b      	ldrb	r3, [r3, #14]
 800a94e:	3301      	adds	r3, #1
 800a950:	b2da      	uxtb	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	7b9b      	ldrb	r3, [r3, #14]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <pbuf_ref+0x30>
 800a95e:	4b05      	ldr	r3, [pc, #20]	; (800a974 <pbuf_ref+0x38>)
 800a960:	f240 3242 	movw	r2, #834	; 0x342
 800a964:	4904      	ldr	r1, [pc, #16]	; (800a978 <pbuf_ref+0x3c>)
 800a966:	4805      	ldr	r0, [pc, #20]	; (800a97c <pbuf_ref+0x40>)
 800a968:	f008 fdbc 	bl	80134e4 <iprintf>
  }
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	08014efc 	.word	0x08014efc
 800a978:	080150dc 	.word	0x080150dc
 800a97c:	08014f5c 	.word	0x08014f5c

0800a980 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <pbuf_cat+0x16>
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d107      	bne.n	800a9a6 <pbuf_cat+0x26>
 800a996:	4b20      	ldr	r3, [pc, #128]	; (800aa18 <pbuf_cat+0x98>)
 800a998:	f240 3259 	movw	r2, #857	; 0x359
 800a99c:	491f      	ldr	r1, [pc, #124]	; (800aa1c <pbuf_cat+0x9c>)
 800a99e:	4820      	ldr	r0, [pc, #128]	; (800aa20 <pbuf_cat+0xa0>)
 800a9a0:	f008 fda0 	bl	80134e4 <iprintf>
 800a9a4:	e034      	b.n	800aa10 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	e00a      	b.n	800a9c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	891a      	ldrh	r2, [r3, #8]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	891b      	ldrh	r3, [r3, #8]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	60fb      	str	r3, [r7, #12]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1f0      	bne.n	800a9ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	891a      	ldrh	r2, [r3, #8]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	895b      	ldrh	r3, [r3, #10]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d006      	beq.n	800a9e4 <pbuf_cat+0x64>
 800a9d6:	4b10      	ldr	r3, [pc, #64]	; (800aa18 <pbuf_cat+0x98>)
 800a9d8:	f240 3262 	movw	r2, #866	; 0x362
 800a9dc:	4911      	ldr	r1, [pc, #68]	; (800aa24 <pbuf_cat+0xa4>)
 800a9de:	4810      	ldr	r0, [pc, #64]	; (800aa20 <pbuf_cat+0xa0>)
 800a9e0:	f008 fd80 	bl	80134e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d006      	beq.n	800a9fa <pbuf_cat+0x7a>
 800a9ec:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <pbuf_cat+0x98>)
 800a9ee:	f240 3263 	movw	r2, #867	; 0x363
 800a9f2:	490d      	ldr	r1, [pc, #52]	; (800aa28 <pbuf_cat+0xa8>)
 800a9f4:	480a      	ldr	r0, [pc, #40]	; (800aa20 <pbuf_cat+0xa0>)
 800a9f6:	f008 fd75 	bl	80134e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	891a      	ldrh	r2, [r3, #8]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	891b      	ldrh	r3, [r3, #8]
 800aa02:	4413      	add	r3, r2
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	08014efc 	.word	0x08014efc
 800aa1c:	080150f0 	.word	0x080150f0
 800aa20:	08014f5c 	.word	0x08014f5c
 800aa24:	08015128 	.word	0x08015128
 800aa28:	08015158 	.word	0x08015158

0800aa2c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7ff ffa1 	bl	800a980 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800aa3e:	6838      	ldr	r0, [r7, #0]
 800aa40:	f7ff ff7c 	bl	800a93c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800aa56:	2300      	movs	r3, #0
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d008      	beq.n	800aa76 <pbuf_copy+0x2a>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d005      	beq.n	800aa76 <pbuf_copy+0x2a>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	891a      	ldrh	r2, [r3, #8]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	891b      	ldrh	r3, [r3, #8]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d209      	bcs.n	800aa8a <pbuf_copy+0x3e>
 800aa76:	4b57      	ldr	r3, [pc, #348]	; (800abd4 <pbuf_copy+0x188>)
 800aa78:	f240 32c9 	movw	r2, #969	; 0x3c9
 800aa7c:	4956      	ldr	r1, [pc, #344]	; (800abd8 <pbuf_copy+0x18c>)
 800aa7e:	4857      	ldr	r0, [pc, #348]	; (800abdc <pbuf_copy+0x190>)
 800aa80:	f008 fd30 	bl	80134e4 <iprintf>
 800aa84:	f06f 030f 	mvn.w	r3, #15
 800aa88:	e09f      	b.n	800abca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	895b      	ldrh	r3, [r3, #10]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	1ad2      	subs	r2, r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	895b      	ldrh	r3, [r3, #10]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	1acb      	subs	r3, r1, r3
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d306      	bcc.n	800aab0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	895b      	ldrh	r3, [r3, #10]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	e005      	b.n	800aabc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	895b      	ldrh	r3, [r3, #10]
 800aab4:	461a      	mov	r2, r3
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	18d0      	adds	r0, r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	4413      	add	r3, r2
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4619      	mov	r1, r3
 800aad0:	f008 fcd8 	bl	8013484 <memcpy>
    offset_to += len;
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4413      	add	r3, r2
 800aada:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4413      	add	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	895b      	ldrh	r3, [r3, #10]
 800aae8:	461a      	mov	r2, r3
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d906      	bls.n	800aafe <pbuf_copy+0xb2>
 800aaf0:	4b38      	ldr	r3, [pc, #224]	; (800abd4 <pbuf_copy+0x188>)
 800aaf2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800aaf6:	493a      	ldr	r1, [pc, #232]	; (800abe0 <pbuf_copy+0x194>)
 800aaf8:	4838      	ldr	r0, [pc, #224]	; (800abdc <pbuf_copy+0x190>)
 800aafa:	f008 fcf3 	bl	80134e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	895b      	ldrh	r3, [r3, #10]
 800ab02:	461a      	mov	r2, r3
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d906      	bls.n	800ab18 <pbuf_copy+0xcc>
 800ab0a:	4b32      	ldr	r3, [pc, #200]	; (800abd4 <pbuf_copy+0x188>)
 800ab0c:	f240 32da 	movw	r2, #986	; 0x3da
 800ab10:	4934      	ldr	r1, [pc, #208]	; (800abe4 <pbuf_copy+0x198>)
 800ab12:	4832      	ldr	r0, [pc, #200]	; (800abdc <pbuf_copy+0x190>)
 800ab14:	f008 fce6 	bl	80134e4 <iprintf>
    if (offset_from >= p_from->len) {
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	895b      	ldrh	r3, [r3, #10]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d304      	bcc.n	800ab2e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	895b      	ldrh	r3, [r3, #10]
 800ab32:	461a      	mov	r2, r3
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d114      	bne.n	800ab64 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10c      	bne.n	800ab64 <pbuf_copy+0x118>
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <pbuf_copy+0x118>
 800ab50:	4b20      	ldr	r3, [pc, #128]	; (800abd4 <pbuf_copy+0x188>)
 800ab52:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ab56:	4924      	ldr	r1, [pc, #144]	; (800abe8 <pbuf_copy+0x19c>)
 800ab58:	4820      	ldr	r0, [pc, #128]	; (800abdc <pbuf_copy+0x190>)
 800ab5a:	f008 fcc3 	bl	80134e4 <iprintf>
 800ab5e:	f06f 030f 	mvn.w	r3, #15
 800ab62:	e032      	b.n	800abca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d013      	beq.n	800ab92 <pbuf_copy+0x146>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	895a      	ldrh	r2, [r3, #10]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	891b      	ldrh	r3, [r3, #8]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d10d      	bne.n	800ab92 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d009      	beq.n	800ab92 <pbuf_copy+0x146>
 800ab7e:	4b15      	ldr	r3, [pc, #84]	; (800abd4 <pbuf_copy+0x188>)
 800ab80:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ab84:	4919      	ldr	r1, [pc, #100]	; (800abec <pbuf_copy+0x1a0>)
 800ab86:	4815      	ldr	r0, [pc, #84]	; (800abdc <pbuf_copy+0x190>)
 800ab88:	f008 fcac 	bl	80134e4 <iprintf>
 800ab8c:	f06f 0305 	mvn.w	r3, #5
 800ab90:	e01b      	b.n	800abca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d013      	beq.n	800abc0 <pbuf_copy+0x174>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	895a      	ldrh	r2, [r3, #10]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	891b      	ldrh	r3, [r3, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d10d      	bne.n	800abc0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d009      	beq.n	800abc0 <pbuf_copy+0x174>
 800abac:	4b09      	ldr	r3, [pc, #36]	; (800abd4 <pbuf_copy+0x188>)
 800abae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800abb2:	490e      	ldr	r1, [pc, #56]	; (800abec <pbuf_copy+0x1a0>)
 800abb4:	4809      	ldr	r0, [pc, #36]	; (800abdc <pbuf_copy+0x190>)
 800abb6:	f008 fc95 	bl	80134e4 <iprintf>
 800abba:	f06f 0305 	mvn.w	r3, #5
 800abbe:	e004      	b.n	800abca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f47f af61 	bne.w	800aa8a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	08014efc 	.word	0x08014efc
 800abd8:	080151a4 	.word	0x080151a4
 800abdc:	08014f5c 	.word	0x08014f5c
 800abe0:	080151d4 	.word	0x080151d4
 800abe4:	080151ec 	.word	0x080151ec
 800abe8:	08015208 	.word	0x08015208
 800abec:	08015218 	.word	0x08015218

0800abf0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4611      	mov	r1, r2
 800abfc:	461a      	mov	r2, r3
 800abfe:	460b      	mov	r3, r1
 800ac00:	80fb      	strh	r3, [r7, #6]
 800ac02:	4613      	mov	r3, r2
 800ac04:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ac06:	2300      	movs	r3, #0
 800ac08:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d108      	bne.n	800ac26 <pbuf_copy_partial+0x36>
 800ac14:	4b2b      	ldr	r3, [pc, #172]	; (800acc4 <pbuf_copy_partial+0xd4>)
 800ac16:	f240 420a 	movw	r2, #1034	; 0x40a
 800ac1a:	492b      	ldr	r1, [pc, #172]	; (800acc8 <pbuf_copy_partial+0xd8>)
 800ac1c:	482b      	ldr	r0, [pc, #172]	; (800accc <pbuf_copy_partial+0xdc>)
 800ac1e:	f008 fc61 	bl	80134e4 <iprintf>
 800ac22:	2300      	movs	r3, #0
 800ac24:	e04a      	b.n	800acbc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d108      	bne.n	800ac3e <pbuf_copy_partial+0x4e>
 800ac2c:	4b25      	ldr	r3, [pc, #148]	; (800acc4 <pbuf_copy_partial+0xd4>)
 800ac2e:	f240 420b 	movw	r2, #1035	; 0x40b
 800ac32:	4927      	ldr	r1, [pc, #156]	; (800acd0 <pbuf_copy_partial+0xe0>)
 800ac34:	4825      	ldr	r0, [pc, #148]	; (800accc <pbuf_copy_partial+0xdc>)
 800ac36:	f008 fc55 	bl	80134e4 <iprintf>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	e03e      	b.n	800acbc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	61fb      	str	r3, [r7, #28]
 800ac42:	e034      	b.n	800acae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ac44:	88bb      	ldrh	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <pbuf_copy_partial+0x70>
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	895b      	ldrh	r3, [r3, #10]
 800ac4e:	88ba      	ldrh	r2, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d305      	bcc.n	800ac60 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	895b      	ldrh	r3, [r3, #10]
 800ac58:	88ba      	ldrh	r2, [r7, #4]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	80bb      	strh	r3, [r7, #4]
 800ac5e:	e023      	b.n	800aca8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	895a      	ldrh	r2, [r3, #10]
 800ac64:	88bb      	ldrh	r3, [r7, #4]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ac6a:	8b3a      	ldrh	r2, [r7, #24]
 800ac6c:	88fb      	ldrh	r3, [r7, #6]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d901      	bls.n	800ac76 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ac76:	8b7b      	ldrh	r3, [r7, #26]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	18d0      	adds	r0, r2, r3
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	88bb      	ldrh	r3, [r7, #4]
 800ac82:	4413      	add	r3, r2
 800ac84:	8b3a      	ldrh	r2, [r7, #24]
 800ac86:	4619      	mov	r1, r3
 800ac88:	f008 fbfc 	bl	8013484 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ac8c:	8afa      	ldrh	r2, [r7, #22]
 800ac8e:	8b3b      	ldrh	r3, [r7, #24]
 800ac90:	4413      	add	r3, r2
 800ac92:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ac94:	8b7a      	ldrh	r2, [r7, #26]
 800ac96:	8b3b      	ldrh	r3, [r7, #24]
 800ac98:	4413      	add	r3, r2
 800ac9a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ac9c:	88fa      	ldrh	r2, [r7, #6]
 800ac9e:	8b3b      	ldrh	r3, [r7, #24]
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	88fb      	ldrh	r3, [r7, #6]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <pbuf_copy_partial+0xca>
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1c4      	bne.n	800ac44 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800acba:	8afb      	ldrh	r3, [r7, #22]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3720      	adds	r7, #32
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	08014efc 	.word	0x08014efc
 800acc8:	08015244 	.word	0x08015244
 800accc:	08014f5c 	.word	0x08014f5c
 800acd0:	08015264 	.word	0x08015264

0800acd4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	4613      	mov	r3, r2
 800ace0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ace2:	88fb      	ldrh	r3, [r7, #6]
 800ace4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d109      	bne.n	800ad04 <pbuf_take+0x30>
 800acf0:	4b3a      	ldr	r3, [pc, #232]	; (800addc <pbuf_take+0x108>)
 800acf2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800acf6:	493a      	ldr	r1, [pc, #232]	; (800ade0 <pbuf_take+0x10c>)
 800acf8:	483a      	ldr	r0, [pc, #232]	; (800ade4 <pbuf_take+0x110>)
 800acfa:	f008 fbf3 	bl	80134e4 <iprintf>
 800acfe:	f06f 030f 	mvn.w	r3, #15
 800ad02:	e067      	b.n	800add4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d109      	bne.n	800ad1e <pbuf_take+0x4a>
 800ad0a:	4b34      	ldr	r3, [pc, #208]	; (800addc <pbuf_take+0x108>)
 800ad0c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800ad10:	4935      	ldr	r1, [pc, #212]	; (800ade8 <pbuf_take+0x114>)
 800ad12:	4834      	ldr	r0, [pc, #208]	; (800ade4 <pbuf_take+0x110>)
 800ad14:	f008 fbe6 	bl	80134e4 <iprintf>
 800ad18:	f06f 030f 	mvn.w	r3, #15
 800ad1c:	e05a      	b.n	800add4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	891b      	ldrh	r3, [r3, #8]
 800ad22:	88fa      	ldrh	r2, [r7, #6]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d909      	bls.n	800ad3c <pbuf_take+0x68>
 800ad28:	4b2c      	ldr	r3, [pc, #176]	; (800addc <pbuf_take+0x108>)
 800ad2a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800ad2e:	492f      	ldr	r1, [pc, #188]	; (800adec <pbuf_take+0x118>)
 800ad30:	482c      	ldr	r0, [pc, #176]	; (800ade4 <pbuf_take+0x110>)
 800ad32:	f008 fbd7 	bl	80134e4 <iprintf>
 800ad36:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3a:	e04b      	b.n	800add4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <pbuf_take+0x7e>
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d004      	beq.n	800ad52 <pbuf_take+0x7e>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	891b      	ldrh	r3, [r3, #8]
 800ad4c:	88fa      	ldrh	r2, [r7, #6]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d902      	bls.n	800ad58 <pbuf_take+0x84>
    return ERR_ARG;
 800ad52:	f06f 030f 	mvn.w	r3, #15
 800ad56:	e03d      	b.n	800add4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	e028      	b.n	800adb0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d106      	bne.n	800ad72 <pbuf_take+0x9e>
 800ad64:	4b1d      	ldr	r3, [pc, #116]	; (800addc <pbuf_take+0x108>)
 800ad66:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ad6a:	4921      	ldr	r1, [pc, #132]	; (800adf0 <pbuf_take+0x11c>)
 800ad6c:	481d      	ldr	r0, [pc, #116]	; (800ade4 <pbuf_take+0x110>)
 800ad6e:	f008 fbb9 	bl	80134e4 <iprintf>
    buf_copy_len = total_copy_len;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	895b      	ldrh	r3, [r3, #10]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d902      	bls.n	800ad88 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	895b      	ldrh	r3, [r3, #10]
 800ad86:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	6858      	ldr	r0, [r3, #4]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	4413      	add	r3, r2
 800ad92:	69ba      	ldr	r2, [r7, #24]
 800ad94:	4619      	mov	r1, r3
 800ad96:	f008 fb75 	bl	8013484 <memcpy>
    total_copy_len -= buf_copy_len;
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	4413      	add	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	61fb      	str	r3, [r7, #28]
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1d3      	bne.n	800ad5e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d103      	bne.n	800adc4 <pbuf_take+0xf0>
 800adbc:	88fb      	ldrh	r3, [r7, #6]
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d006      	beq.n	800add2 <pbuf_take+0xfe>
 800adc4:	4b05      	ldr	r3, [pc, #20]	; (800addc <pbuf_take+0x108>)
 800adc6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800adca:	490a      	ldr	r1, [pc, #40]	; (800adf4 <pbuf_take+0x120>)
 800adcc:	4805      	ldr	r0, [pc, #20]	; (800ade4 <pbuf_take+0x110>)
 800adce:	f008 fb89 	bl	80134e4 <iprintf>
  return ERR_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3720      	adds	r7, #32
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	08014efc 	.word	0x08014efc
 800ade0:	080152d4 	.word	0x080152d4
 800ade4:	08014f5c 	.word	0x08014f5c
 800ade8:	080152ec 	.word	0x080152ec
 800adec:	08015308 	.word	0x08015308
 800adf0:	08015328 	.word	0x08015328
 800adf4:	08015340 	.word	0x08015340

0800adf8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	603a      	str	r2, [r7, #0]
 800ae02:	71fb      	strb	r3, [r7, #7]
 800ae04:	460b      	mov	r3, r1
 800ae06:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	8919      	ldrh	r1, [r3, #8]
 800ae0c:	88ba      	ldrh	r2, [r7, #4]
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fa0f 	bl	800a234 <pbuf_alloc>
 800ae16:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <pbuf_clone+0x2a>
    return NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e011      	b.n	800ae46 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f7ff fe11 	bl	800aa4c <pbuf_copy>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ae2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d006      	beq.n	800ae44 <pbuf_clone+0x4c>
 800ae36:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <pbuf_clone+0x58>)
 800ae38:	f240 5224 	movw	r2, #1316	; 0x524
 800ae3c:	4905      	ldr	r1, [pc, #20]	; (800ae54 <pbuf_clone+0x5c>)
 800ae3e:	4806      	ldr	r0, [pc, #24]	; (800ae58 <pbuf_clone+0x60>)
 800ae40:	f008 fb50 	bl	80134e4 <iprintf>
  return q;
 800ae44:	68fb      	ldr	r3, [r7, #12]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	08014efc 	.word	0x08014efc
 800ae54:	08015370 	.word	0x08015370
 800ae58:	08014f5c 	.word	0x08014f5c

0800ae5c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ae60:	f008 fb58 	bl	8013514 <rand>
 800ae64:	4603      	mov	r3, r0
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	4b01      	ldr	r3, [pc, #4]	; (800ae7c <tcp_init+0x20>)
 800ae76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ae78:	bf00      	nop
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	2000000e 	.word	0x2000000e

0800ae80 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	7d1b      	ldrb	r3, [r3, #20]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d105      	bne.n	800ae9c <tcp_free+0x1c>
 800ae90:	4b06      	ldr	r3, [pc, #24]	; (800aeac <tcp_free+0x2c>)
 800ae92:	22d4      	movs	r2, #212	; 0xd4
 800ae94:	4906      	ldr	r1, [pc, #24]	; (800aeb0 <tcp_free+0x30>)
 800ae96:	4807      	ldr	r0, [pc, #28]	; (800aeb4 <tcp_free+0x34>)
 800ae98:	f008 fb24 	bl	80134e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	2001      	movs	r0, #1
 800aea0:	f7fe fe9a 	bl	8009bd8 <memp_free>
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	080153fc 	.word	0x080153fc
 800aeb0:	0801542c 	.word	0x0801542c
 800aeb4:	08015440 	.word	0x08015440

0800aeb8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7d1b      	ldrb	r3, [r3, #20]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d105      	bne.n	800aed4 <tcp_free_listen+0x1c>
 800aec8:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <tcp_free_listen+0x2c>)
 800aeca:	22df      	movs	r2, #223	; 0xdf
 800aecc:	4906      	ldr	r1, [pc, #24]	; (800aee8 <tcp_free_listen+0x30>)
 800aece:	4807      	ldr	r0, [pc, #28]	; (800aeec <tcp_free_listen+0x34>)
 800aed0:	f008 fb08 	bl	80134e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	2002      	movs	r0, #2
 800aed8:	f7fe fe7e 	bl	8009bd8 <memp_free>
}
 800aedc:	bf00      	nop
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	080153fc 	.word	0x080153fc
 800aee8:	08015468 	.word	0x08015468
 800aeec:	08015440 	.word	0x08015440

0800aef0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aef4:	f000 fea2 	bl	800bc3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aef8:	4b07      	ldr	r3, [pc, #28]	; (800af18 <tcp_tmr+0x28>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	3301      	adds	r3, #1
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <tcp_tmr+0x28>)
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	4b04      	ldr	r3, [pc, #16]	; (800af18 <tcp_tmr+0x28>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800af10:	f000 fb54 	bl	800b5bc <tcp_slowtmr>
  }
}
 800af14:	bf00      	nop
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20008ec5 	.word	0x20008ec5

0800af1c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d105      	bne.n	800af38 <tcp_remove_listener+0x1c>
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <tcp_remove_listener+0x48>)
 800af2e:	22ff      	movs	r2, #255	; 0xff
 800af30:	490d      	ldr	r1, [pc, #52]	; (800af68 <tcp_remove_listener+0x4c>)
 800af32:	480e      	ldr	r0, [pc, #56]	; (800af6c <tcp_remove_listener+0x50>)
 800af34:	f008 fad6 	bl	80134e4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e00a      	b.n	800af54 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	d102      	bne.n	800af4e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1f1      	bne.n	800af3e <tcp_remove_listener+0x22>
    }
  }
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	080153fc 	.word	0x080153fc
 800af68:	08015484 	.word	0x08015484
 800af6c:	08015440 	.word	0x08015440

0800af70 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d106      	bne.n	800af8c <tcp_listen_closed+0x1c>
 800af7e:	4b14      	ldr	r3, [pc, #80]	; (800afd0 <tcp_listen_closed+0x60>)
 800af80:	f240 1211 	movw	r2, #273	; 0x111
 800af84:	4913      	ldr	r1, [pc, #76]	; (800afd4 <tcp_listen_closed+0x64>)
 800af86:	4814      	ldr	r0, [pc, #80]	; (800afd8 <tcp_listen_closed+0x68>)
 800af88:	f008 faac 	bl	80134e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7d1b      	ldrb	r3, [r3, #20]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d006      	beq.n	800afa2 <tcp_listen_closed+0x32>
 800af94:	4b0e      	ldr	r3, [pc, #56]	; (800afd0 <tcp_listen_closed+0x60>)
 800af96:	f44f 7289 	mov.w	r2, #274	; 0x112
 800af9a:	4910      	ldr	r1, [pc, #64]	; (800afdc <tcp_listen_closed+0x6c>)
 800af9c:	480e      	ldr	r0, [pc, #56]	; (800afd8 <tcp_listen_closed+0x68>)
 800af9e:	f008 faa1 	bl	80134e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800afa2:	2301      	movs	r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	e00b      	b.n	800afc0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800afa8:	4a0d      	ldr	r2, [pc, #52]	; (800afe0 <tcp_listen_closed+0x70>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff ffb1 	bl	800af1c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d9f0      	bls.n	800afa8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800afc6:	bf00      	nop
 800afc8:	bf00      	nop
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	080153fc 	.word	0x080153fc
 800afd4:	080154ac 	.word	0x080154ac
 800afd8:	08015440 	.word	0x08015440
 800afdc:	080154b8 	.word	0x080154b8
 800afe0:	080173d8 	.word	0x080173d8

0800afe4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800afe4:	b5b0      	push	{r4, r5, r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af04      	add	r7, sp, #16
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d106      	bne.n	800b004 <tcp_close_shutdown+0x20>
 800aff6:	4b63      	ldr	r3, [pc, #396]	; (800b184 <tcp_close_shutdown+0x1a0>)
 800aff8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800affc:	4962      	ldr	r1, [pc, #392]	; (800b188 <tcp_close_shutdown+0x1a4>)
 800affe:	4863      	ldr	r0, [pc, #396]	; (800b18c <tcp_close_shutdown+0x1a8>)
 800b000:	f008 fa70 	bl	80134e4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d066      	beq.n	800b0d8 <tcp_close_shutdown+0xf4>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	7d1b      	ldrb	r3, [r3, #20]
 800b00e:	2b04      	cmp	r3, #4
 800b010:	d003      	beq.n	800b01a <tcp_close_shutdown+0x36>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	7d1b      	ldrb	r3, [r3, #20]
 800b016:	2b07      	cmp	r3, #7
 800b018:	d15e      	bne.n	800b0d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d104      	bne.n	800b02c <tcp_close_shutdown+0x48>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b026:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b02a:	d055      	beq.n	800b0d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	8b5b      	ldrh	r3, [r3, #26]
 800b030:	f003 0310 	and.w	r3, r3, #16
 800b034:	2b00      	cmp	r3, #0
 800b036:	d106      	bne.n	800b046 <tcp_close_shutdown+0x62>
 800b038:	4b52      	ldr	r3, [pc, #328]	; (800b184 <tcp_close_shutdown+0x1a0>)
 800b03a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b03e:	4954      	ldr	r1, [pc, #336]	; (800b190 <tcp_close_shutdown+0x1ac>)
 800b040:	4852      	ldr	r0, [pc, #328]	; (800b18c <tcp_close_shutdown+0x1a8>)
 800b042:	f008 fa4f 	bl	80134e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b04e:	687d      	ldr	r5, [r7, #4]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3304      	adds	r3, #4
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	8ad2      	ldrh	r2, [r2, #22]
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	8b09      	ldrh	r1, [r1, #24]
 800b05c:	9102      	str	r1, [sp, #8]
 800b05e:	9201      	str	r2, [sp, #4]
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	462b      	mov	r3, r5
 800b064:	4622      	mov	r2, r4
 800b066:	4601      	mov	r1, r0
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f004 fe91 	bl	800fd90 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 f8c6 	bl	800c200 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b074:	4b47      	ldr	r3, [pc, #284]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d105      	bne.n	800b08a <tcp_close_shutdown+0xa6>
 800b07e:	4b45      	ldr	r3, [pc, #276]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	4a43      	ldr	r2, [pc, #268]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	e013      	b.n	800b0b2 <tcp_close_shutdown+0xce>
 800b08a:	4b42      	ldr	r3, [pc, #264]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	e00c      	b.n	800b0ac <tcp_close_shutdown+0xc8>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d104      	bne.n	800b0a6 <tcp_close_shutdown+0xc2>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68da      	ldr	r2, [r3, #12]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	60da      	str	r2, [r3, #12]
 800b0a4:	e005      	b.n	800b0b2 <tcp_close_shutdown+0xce>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1ef      	bne.n	800b092 <tcp_close_shutdown+0xae>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	60da      	str	r2, [r3, #12]
 800b0b8:	4b37      	ldr	r3, [pc, #220]	; (800b198 <tcp_close_shutdown+0x1b4>)
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b0be:	4b37      	ldr	r3, [pc, #220]	; (800b19c <tcp_close_shutdown+0x1b8>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d102      	bne.n	800b0ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b0c8:	f003 fd5e 	bl	800eb88 <tcp_trigger_input_pcb_close>
 800b0cc:	e002      	b.n	800b0d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff fed6 	bl	800ae80 <tcp_free>
      }
      return ERR_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e050      	b.n	800b17a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7d1b      	ldrb	r3, [r3, #20]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d03b      	beq.n	800b158 <tcp_close_shutdown+0x174>
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	dc44      	bgt.n	800b16e <tcp_close_shutdown+0x18a>
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <tcp_close_shutdown+0x10a>
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d02a      	beq.n	800b142 <tcp_close_shutdown+0x15e>
 800b0ec:	e03f      	b.n	800b16e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	8adb      	ldrh	r3, [r3, #22]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d021      	beq.n	800b13a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b0f6:	4b2a      	ldr	r3, [pc, #168]	; (800b1a0 <tcp_close_shutdown+0x1bc>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d105      	bne.n	800b10c <tcp_close_shutdown+0x128>
 800b100:	4b27      	ldr	r3, [pc, #156]	; (800b1a0 <tcp_close_shutdown+0x1bc>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	4a26      	ldr	r2, [pc, #152]	; (800b1a0 <tcp_close_shutdown+0x1bc>)
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	e013      	b.n	800b134 <tcp_close_shutdown+0x150>
 800b10c:	4b24      	ldr	r3, [pc, #144]	; (800b1a0 <tcp_close_shutdown+0x1bc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	60bb      	str	r3, [r7, #8]
 800b112:	e00c      	b.n	800b12e <tcp_close_shutdown+0x14a>
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d104      	bne.n	800b128 <tcp_close_shutdown+0x144>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	60da      	str	r2, [r3, #12]
 800b126:	e005      	b.n	800b134 <tcp_close_shutdown+0x150>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	60bb      	str	r3, [r7, #8]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1ef      	bne.n	800b114 <tcp_close_shutdown+0x130>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fea0 	bl	800ae80 <tcp_free>
      break;
 800b140:	e01a      	b.n	800b178 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff ff14 	bl	800af70 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	4816      	ldr	r0, [pc, #88]	; (800b1a4 <tcp_close_shutdown+0x1c0>)
 800b14c:	f001 f8a8 	bl	800c2a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff feb1 	bl	800aeb8 <tcp_free_listen>
      break;
 800b156:	e00f      	b.n	800b178 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	480e      	ldr	r0, [pc, #56]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b15c:	f001 f8a0 	bl	800c2a0 <tcp_pcb_remove>
 800b160:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <tcp_close_shutdown+0x1b4>)
 800b162:	2201      	movs	r2, #1
 800b164:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fe8a 	bl	800ae80 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b16c:	e004      	b.n	800b178 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f81a 	bl	800b1a8 <tcp_close_shutdown_fin>
 800b174:	4603      	mov	r3, r0
 800b176:	e000      	b.n	800b17a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bdb0      	pop	{r4, r5, r7, pc}
 800b182:	bf00      	nop
 800b184:	080153fc 	.word	0x080153fc
 800b188:	080154d0 	.word	0x080154d0
 800b18c:	08015440 	.word	0x08015440
 800b190:	080154f0 	.word	0x080154f0
 800b194:	20008ebc 	.word	0x20008ebc
 800b198:	20008ec4 	.word	0x20008ec4
 800b19c:	20008efc 	.word	0x20008efc
 800b1a0:	20008eb4 	.word	0x20008eb4
 800b1a4:	20008eb8 	.word	0x20008eb8

0800b1a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <tcp_close_shutdown_fin+0x1c>
 800b1b6:	4b2e      	ldr	r3, [pc, #184]	; (800b270 <tcp_close_shutdown_fin+0xc8>)
 800b1b8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b1bc:	492d      	ldr	r1, [pc, #180]	; (800b274 <tcp_close_shutdown_fin+0xcc>)
 800b1be:	482e      	ldr	r0, [pc, #184]	; (800b278 <tcp_close_shutdown_fin+0xd0>)
 800b1c0:	f008 f990 	bl	80134e4 <iprintf>

  switch (pcb->state) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	7d1b      	ldrb	r3, [r3, #20]
 800b1c8:	2b07      	cmp	r3, #7
 800b1ca:	d020      	beq.n	800b20e <tcp_close_shutdown_fin+0x66>
 800b1cc:	2b07      	cmp	r3, #7
 800b1ce:	dc2b      	bgt.n	800b228 <tcp_close_shutdown_fin+0x80>
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d002      	beq.n	800b1da <tcp_close_shutdown_fin+0x32>
 800b1d4:	2b04      	cmp	r3, #4
 800b1d6:	d00d      	beq.n	800b1f4 <tcp_close_shutdown_fin+0x4c>
 800b1d8:	e026      	b.n	800b228 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f003 fee6 	bl	800efac <tcp_send_fin>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d11f      	bne.n	800b22c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2205      	movs	r2, #5
 800b1f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b1f2:	e01b      	b.n	800b22c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f003 fed9 	bl	800efac <tcp_send_fin>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d114      	bne.n	800b230 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2205      	movs	r2, #5
 800b20a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b20c:	e010      	b.n	800b230 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f003 fecc 	bl	800efac <tcp_send_fin>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d109      	bne.n	800b234 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2209      	movs	r2, #9
 800b224:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b226:	e005      	b.n	800b234 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	e01c      	b.n	800b266 <tcp_close_shutdown_fin+0xbe>
      break;
 800b22c:	bf00      	nop
 800b22e:	e002      	b.n	800b236 <tcp_close_shutdown_fin+0x8e>
      break;
 800b230:	bf00      	nop
 800b232:	e000      	b.n	800b236 <tcp_close_shutdown_fin+0x8e>
      break;
 800b234:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d103      	bne.n	800b246 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f003 fff2 	bl	800f228 <tcp_output>
 800b244:	e00d      	b.n	800b262 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24e:	d108      	bne.n	800b262 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	8b5b      	ldrh	r3, [r3, #26]
 800b254:	f043 0308 	orr.w	r3, r3, #8
 800b258:	b29a      	uxth	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	e001      	b.n	800b266 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	080153fc 	.word	0x080153fc
 800b274:	080154ac 	.word	0x080154ac
 800b278:	08015440 	.word	0x08015440

0800b27c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <tcp_close+0x22>
 800b28a:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <tcp_close+0x4c>)
 800b28c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b290:	490e      	ldr	r1, [pc, #56]	; (800b2cc <tcp_close+0x50>)
 800b292:	480f      	ldr	r0, [pc, #60]	; (800b2d0 <tcp_close+0x54>)
 800b294:	f008 f926 	bl	80134e4 <iprintf>
 800b298:	f06f 030f 	mvn.w	r3, #15
 800b29c:	e00f      	b.n	800b2be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7d1b      	ldrb	r3, [r3, #20]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d006      	beq.n	800b2b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	8b5b      	ldrh	r3, [r3, #26]
 800b2aa:	f043 0310 	orr.w	r3, r3, #16
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7ff fe94 	bl	800afe4 <tcp_close_shutdown>
 800b2bc:	4603      	mov	r3, r0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	080153fc 	.word	0x080153fc
 800b2cc:	0801550c 	.word	0x0801550c
 800b2d0:	08015440 	.word	0x08015440

0800b2d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08e      	sub	sp, #56	; 0x38
 800b2d8:	af04      	add	r7, sp, #16
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d107      	bne.n	800b2f4 <tcp_abandon+0x20>
 800b2e4:	4b52      	ldr	r3, [pc, #328]	; (800b430 <tcp_abandon+0x15c>)
 800b2e6:	f240 223d 	movw	r2, #573	; 0x23d
 800b2ea:	4952      	ldr	r1, [pc, #328]	; (800b434 <tcp_abandon+0x160>)
 800b2ec:	4852      	ldr	r0, [pc, #328]	; (800b438 <tcp_abandon+0x164>)
 800b2ee:	f008 f8f9 	bl	80134e4 <iprintf>
 800b2f2:	e099      	b.n	800b428 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7d1b      	ldrb	r3, [r3, #20]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d106      	bne.n	800b30a <tcp_abandon+0x36>
 800b2fc:	4b4c      	ldr	r3, [pc, #304]	; (800b430 <tcp_abandon+0x15c>)
 800b2fe:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b302:	494e      	ldr	r1, [pc, #312]	; (800b43c <tcp_abandon+0x168>)
 800b304:	484c      	ldr	r0, [pc, #304]	; (800b438 <tcp_abandon+0x164>)
 800b306:	f008 f8ed 	bl	80134e4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7d1b      	ldrb	r3, [r3, #20]
 800b30e:	2b0a      	cmp	r3, #10
 800b310:	d107      	bne.n	800b322 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	484a      	ldr	r0, [pc, #296]	; (800b440 <tcp_abandon+0x16c>)
 800b316:	f000 ffc3 	bl	800c2a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7ff fdb0 	bl	800ae80 <tcp_free>
 800b320:	e082      	b.n	800b428 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b32e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7d1b      	ldrb	r3, [r3, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d126      	bne.n	800b39a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	8adb      	ldrh	r3, [r3, #22]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d02e      	beq.n	800b3b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b354:	4b3b      	ldr	r3, [pc, #236]	; (800b444 <tcp_abandon+0x170>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d105      	bne.n	800b36a <tcp_abandon+0x96>
 800b35e:	4b39      	ldr	r3, [pc, #228]	; (800b444 <tcp_abandon+0x170>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	4a37      	ldr	r2, [pc, #220]	; (800b444 <tcp_abandon+0x170>)
 800b366:	6013      	str	r3, [r2, #0]
 800b368:	e013      	b.n	800b392 <tcp_abandon+0xbe>
 800b36a:	4b36      	ldr	r3, [pc, #216]	; (800b444 <tcp_abandon+0x170>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	61fb      	str	r3, [r7, #28]
 800b370:	e00c      	b.n	800b38c <tcp_abandon+0xb8>
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d104      	bne.n	800b386 <tcp_abandon+0xb2>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	60da      	str	r2, [r3, #12]
 800b384:	e005      	b.n	800b392 <tcp_abandon+0xbe>
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	61fb      	str	r3, [r7, #28]
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1ef      	bne.n	800b372 <tcp_abandon+0x9e>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	60da      	str	r2, [r3, #12]
 800b398:	e00b      	b.n	800b3b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8adb      	ldrh	r3, [r3, #22]
 800b3a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	4828      	ldr	r0, [pc, #160]	; (800b448 <tcp_abandon+0x174>)
 800b3a8:	f000 ff7a 	bl	800c2a0 <tcp_pcb_remove>
 800b3ac:	4b27      	ldr	r3, [pc, #156]	; (800b44c <tcp_abandon+0x178>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fd1c 	bl	800bdfc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 fd13 	bl	800bdfc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 fd0a 	bl	800bdfc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00e      	beq.n	800b40c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	8b12      	ldrh	r2, [r2, #24]
 800b3f8:	9202      	str	r2, [sp, #8]
 800b3fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b3fc:	9201      	str	r2, [sp, #4]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	460b      	mov	r3, r1
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	69b9      	ldr	r1, [r7, #24]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f004 fcc2 	bl	800fd90 <tcp_rst>
    }
    last_state = pcb->state;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7d1b      	ldrb	r3, [r3, #20]
 800b410:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff fd34 	bl	800ae80 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d004      	beq.n	800b428 <tcp_abandon+0x154>
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f06f 010c 	mvn.w	r1, #12
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	4798      	blx	r3
  }
}
 800b428:	3728      	adds	r7, #40	; 0x28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	080153fc 	.word	0x080153fc
 800b434:	08015540 	.word	0x08015540
 800b438:	08015440 	.word	0x08015440
 800b43c:	0801555c 	.word	0x0801555c
 800b440:	20008ec0 	.word	0x20008ec0
 800b444:	20008eb4 	.word	0x20008eb4
 800b448:	20008ebc 	.word	0x20008ebc
 800b44c:	20008ec4 	.word	0x20008ec4

0800b450 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b458:	2101      	movs	r1, #1
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff ff3a 	bl	800b2d4 <tcp_abandon>
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <tcp_update_rcv_ann_wnd+0x1c>
 800b476:	4b25      	ldr	r3, [pc, #148]	; (800b50c <tcp_update_rcv_ann_wnd+0xa4>)
 800b478:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b47c:	4924      	ldr	r1, [pc, #144]	; (800b510 <tcp_update_rcv_ann_wnd+0xa8>)
 800b47e:	4825      	ldr	r0, [pc, #148]	; (800b514 <tcp_update_rcv_ann_wnd+0xac>)
 800b480:	f008 f830 	bl	80134e4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b48c:	4413      	add	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b498:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b49c:	bf28      	it	cs
 800b49e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b4a2:	b292      	uxth	r2, r2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	db08      	blt.n	800b4c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	e020      	b.n	800b502 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	dd03      	ble.n	800b4d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4d4:	e014      	b.n	800b500 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e8:	d306      	bcc.n	800b4f8 <tcp_update_rcv_ann_wnd+0x90>
 800b4ea:	4b08      	ldr	r3, [pc, #32]	; (800b50c <tcp_update_rcv_ann_wnd+0xa4>)
 800b4ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b4f0:	4909      	ldr	r1, [pc, #36]	; (800b518 <tcp_update_rcv_ann_wnd+0xb0>)
 800b4f2:	4808      	ldr	r0, [pc, #32]	; (800b514 <tcp_update_rcv_ann_wnd+0xac>)
 800b4f4:	f007 fff6 	bl	80134e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b500:	2300      	movs	r3, #0
  }
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	080153fc 	.word	0x080153fc
 800b510:	08015658 	.word	0x08015658
 800b514:	08015440 	.word	0x08015440
 800b518:	0801567c 	.word	0x0801567c

0800b51c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d107      	bne.n	800b53e <tcp_recved+0x22>
 800b52e:	4b1f      	ldr	r3, [pc, #124]	; (800b5ac <tcp_recved+0x90>)
 800b530:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b534:	491e      	ldr	r1, [pc, #120]	; (800b5b0 <tcp_recved+0x94>)
 800b536:	481f      	ldr	r0, [pc, #124]	; (800b5b4 <tcp_recved+0x98>)
 800b538:	f007 ffd4 	bl	80134e4 <iprintf>
 800b53c:	e032      	b.n	800b5a4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	7d1b      	ldrb	r3, [r3, #20]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d106      	bne.n	800b554 <tcp_recved+0x38>
 800b546:	4b19      	ldr	r3, [pc, #100]	; (800b5ac <tcp_recved+0x90>)
 800b548:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b54c:	491a      	ldr	r1, [pc, #104]	; (800b5b8 <tcp_recved+0x9c>)
 800b54e:	4819      	ldr	r0, [pc, #100]	; (800b5b4 <tcp_recved+0x98>)
 800b550:	f007 ffc8 	bl	80134e4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b558:	887b      	ldrh	r3, [r7, #2]
 800b55a:	4413      	add	r3, r2
 800b55c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b55e:	89fb      	ldrh	r3, [r7, #14]
 800b560:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b564:	d804      	bhi.n	800b570 <tcp_recved+0x54>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b56a:	89fa      	ldrh	r2, [r7, #14]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d204      	bcs.n	800b57a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b576:	851a      	strh	r2, [r3, #40]	; 0x28
 800b578:	e002      	b.n	800b580 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	89fa      	ldrh	r2, [r7, #14]
 800b57e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff ff71 	bl	800b468 <tcp_update_rcv_ann_wnd>
 800b586:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b58e:	d309      	bcc.n	800b5a4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8b5b      	ldrh	r3, [r3, #26]
 800b594:	f043 0302 	orr.w	r3, r3, #2
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f003 fe42 	bl	800f228 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	080153fc 	.word	0x080153fc
 800b5b0:	08015698 	.word	0x08015698
 800b5b4:	08015440 	.word	0x08015440
 800b5b8:	080156b0 	.word	0x080156b0

0800b5bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b5bc:	b5b0      	push	{r4, r5, r7, lr}
 800b5be:	b090      	sub	sp, #64	; 0x40
 800b5c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b5c8:	4b94      	ldr	r3, [pc, #592]	; (800b81c <tcp_slowtmr+0x260>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	4a93      	ldr	r2, [pc, #588]	; (800b81c <tcp_slowtmr+0x260>)
 800b5d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b5d2:	4b93      	ldr	r3, [pc, #588]	; (800b820 <tcp_slowtmr+0x264>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	4b91      	ldr	r3, [pc, #580]	; (800b820 <tcp_slowtmr+0x264>)
 800b5dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b5e2:	4b90      	ldr	r3, [pc, #576]	; (800b824 <tcp_slowtmr+0x268>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b5e8:	e29f      	b.n	800bb2a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	7d1b      	ldrb	r3, [r3, #20]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d106      	bne.n	800b600 <tcp_slowtmr+0x44>
 800b5f2:	4b8d      	ldr	r3, [pc, #564]	; (800b828 <tcp_slowtmr+0x26c>)
 800b5f4:	f240 42be 	movw	r2, #1214	; 0x4be
 800b5f8:	498c      	ldr	r1, [pc, #560]	; (800b82c <tcp_slowtmr+0x270>)
 800b5fa:	488d      	ldr	r0, [pc, #564]	; (800b830 <tcp_slowtmr+0x274>)
 800b5fc:	f007 ff72 	bl	80134e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b602:	7d1b      	ldrb	r3, [r3, #20]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d106      	bne.n	800b616 <tcp_slowtmr+0x5a>
 800b608:	4b87      	ldr	r3, [pc, #540]	; (800b828 <tcp_slowtmr+0x26c>)
 800b60a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b60e:	4989      	ldr	r1, [pc, #548]	; (800b834 <tcp_slowtmr+0x278>)
 800b610:	4887      	ldr	r0, [pc, #540]	; (800b830 <tcp_slowtmr+0x274>)
 800b612:	f007 ff67 	bl	80134e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	7d1b      	ldrb	r3, [r3, #20]
 800b61a:	2b0a      	cmp	r3, #10
 800b61c:	d106      	bne.n	800b62c <tcp_slowtmr+0x70>
 800b61e:	4b82      	ldr	r3, [pc, #520]	; (800b828 <tcp_slowtmr+0x26c>)
 800b620:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b624:	4984      	ldr	r1, [pc, #528]	; (800b838 <tcp_slowtmr+0x27c>)
 800b626:	4882      	ldr	r0, [pc, #520]	; (800b830 <tcp_slowtmr+0x274>)
 800b628:	f007 ff5c 	bl	80134e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62e:	7f9a      	ldrb	r2, [r3, #30]
 800b630:	4b7b      	ldr	r3, [pc, #492]	; (800b820 <tcp_slowtmr+0x264>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	429a      	cmp	r2, r3
 800b636:	d105      	bne.n	800b644 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b642:	e272      	b.n	800bb2a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b644:	4b76      	ldr	r3, [pc, #472]	; (800b820 <tcp_slowtmr+0x264>)
 800b646:	781a      	ldrb	r2, [r3, #0]
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	7d1b      	ldrb	r3, [r3, #20]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d10a      	bne.n	800b676 <tcp_slowtmr+0xba>
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b666:	2b05      	cmp	r3, #5
 800b668:	d905      	bls.n	800b676 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b66a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b66e:	3301      	adds	r3, #1
 800b670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b674:	e11e      	b.n	800b8b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b67c:	2b0b      	cmp	r3, #11
 800b67e:	d905      	bls.n	800b68c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b684:	3301      	adds	r3, #1
 800b686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b68a:	e113      	b.n	800b8b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b692:	2b00      	cmp	r3, #0
 800b694:	d075      	beq.n	800b782 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d006      	beq.n	800b6ac <tcp_slowtmr+0xf0>
 800b69e:	4b62      	ldr	r3, [pc, #392]	; (800b828 <tcp_slowtmr+0x26c>)
 800b6a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b6a4:	4965      	ldr	r1, [pc, #404]	; (800b83c <tcp_slowtmr+0x280>)
 800b6a6:	4862      	ldr	r0, [pc, #392]	; (800b830 <tcp_slowtmr+0x274>)
 800b6a8:	f007 ff1c 	bl	80134e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d106      	bne.n	800b6c2 <tcp_slowtmr+0x106>
 800b6b4:	4b5c      	ldr	r3, [pc, #368]	; (800b828 <tcp_slowtmr+0x26c>)
 800b6b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b6ba:	4961      	ldr	r1, [pc, #388]	; (800b840 <tcp_slowtmr+0x284>)
 800b6bc:	485c      	ldr	r0, [pc, #368]	; (800b830 <tcp_slowtmr+0x274>)
 800b6be:	f007 ff11 	bl	80134e4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b6c8:	2b0b      	cmp	r3, #11
 800b6ca:	d905      	bls.n	800b6d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6d6:	e0ed      	b.n	800b8b4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	4a58      	ldr	r2, [pc, #352]	; (800b844 <tcp_slowtmr+0x288>)
 800b6e2:	5cd3      	ldrb	r3, [r2, r3]
 800b6e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b6ec:	7c7a      	ldrb	r2, [r7, #17]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d907      	bls.n	800b702 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b708:	7c7a      	ldrb	r2, [r7, #17]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	f200 80d2 	bhi.w	800b8b4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b710:	2301      	movs	r3, #1
 800b712:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d108      	bne.n	800b730 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b720:	f004 fc2a 	bl	800ff78 <tcp_zero_window_probe>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d014      	beq.n	800b754 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b72a:	2300      	movs	r3, #0
 800b72c:	623b      	str	r3, [r7, #32]
 800b72e:	e011      	b.n	800b754 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b736:	4619      	mov	r1, r3
 800b738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b73a:	f003 faef 	bl	800ed1c <tcp_split_unsent_seg>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d107      	bne.n	800b754 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b746:	f003 fd6f 	bl	800f228 <tcp_output>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 80ac 	beq.w	800b8b4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b76a:	2b06      	cmp	r3, #6
 800b76c:	f200 80a2 	bhi.w	800b8b4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b776:	3301      	adds	r3, #1
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b780:	e098      	b.n	800b8b4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b788:	2b00      	cmp	r3, #0
 800b78a:	db0f      	blt.n	800b7ac <tcp_slowtmr+0x1f0>
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b792:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b796:	4293      	cmp	r3, r2
 800b798:	d008      	beq.n	800b7ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	b21a      	sxth	r2, r3
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	db7b      	blt.n	800b8b4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b7bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7be:	f004 f825 	bl	800f80c <tcp_rexmit_rto_prepare>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d007      	beq.n	800b7d8 <tcp_slowtmr+0x21c>
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d171      	bne.n	800b8b4 <tcp_slowtmr+0x2f8>
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d06d      	beq.n	800b8b4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	7d1b      	ldrb	r3, [r3, #20]
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d03a      	beq.n	800b856 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7e6:	2b0c      	cmp	r3, #12
 800b7e8:	bf28      	it	cs
 800b7ea:	230c      	movcs	r3, #12
 800b7ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b7f4:	10db      	asrs	r3, r3, #3
 800b7f6:	b21b      	sxth	r3, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b800:	4413      	add	r3, r2
 800b802:	7efa      	ldrb	r2, [r7, #27]
 800b804:	4910      	ldr	r1, [pc, #64]	; (800b848 <tcp_slowtmr+0x28c>)
 800b806:	5c8a      	ldrb	r2, [r1, r2]
 800b808:	4093      	lsls	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b812:	4293      	cmp	r3, r2
 800b814:	dc1a      	bgt.n	800b84c <tcp_slowtmr+0x290>
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	b21a      	sxth	r2, r3
 800b81a:	e019      	b.n	800b850 <tcp_slowtmr+0x294>
 800b81c:	20008eb0 	.word	0x20008eb0
 800b820:	20008ec6 	.word	0x20008ec6
 800b824:	20008ebc 	.word	0x20008ebc
 800b828:	080153fc 	.word	0x080153fc
 800b82c:	08015740 	.word	0x08015740
 800b830:	08015440 	.word	0x08015440
 800b834:	0801576c 	.word	0x0801576c
 800b838:	08015798 	.word	0x08015798
 800b83c:	080157c8 	.word	0x080157c8
 800b840:	080157fc 	.word	0x080157fc
 800b844:	080173d0 	.word	0x080173d0
 800b848:	080173c0 	.word	0x080173c0
 800b84c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	2200      	movs	r2, #0
 800b85a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b864:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b868:	4293      	cmp	r3, r2
 800b86a:	bf28      	it	cs
 800b86c:	4613      	movcs	r3, r2
 800b86e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b870:	8a7b      	ldrh	r3, [r7, #18]
 800b872:	085b      	lsrs	r3, r3, #1
 800b874:	b29a      	uxth	r2, r3
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	b29b      	uxth	r3, r3
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d206      	bcs.n	800b89c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	b29a      	uxth	r2, r3
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8b0:	f004 f81c 	bl	800f8ec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	7d1b      	ldrb	r3, [r3, #20]
 800b8b8:	2b06      	cmp	r3, #6
 800b8ba:	d111      	bne.n	800b8e0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	8b5b      	ldrh	r3, [r3, #26]
 800b8c0:	f003 0310 	and.w	r3, r3, #16
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00b      	beq.n	800b8e0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8c8:	4b9d      	ldr	r3, [pc, #628]	; (800bb40 <tcp_slowtmr+0x584>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ce:	6a1b      	ldr	r3, [r3, #32]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	2b28      	cmp	r3, #40	; 0x28
 800b8d4:	d904      	bls.n	800b8e0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8da:	3301      	adds	r3, #1
 800b8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e2:	7a5b      	ldrb	r3, [r3, #9]
 800b8e4:	f003 0308 	and.w	r3, r3, #8
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d04c      	beq.n	800b986 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b8f0:	2b04      	cmp	r3, #4
 800b8f2:	d003      	beq.n	800b8fc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b8f8:	2b07      	cmp	r3, #7
 800b8fa:	d144      	bne.n	800b986 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8fc:	4b90      	ldr	r3, [pc, #576]	; (800bb40 <tcp_slowtmr+0x584>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b90c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b910:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b914:	498b      	ldr	r1, [pc, #556]	; (800bb44 <tcp_slowtmr+0x588>)
 800b916:	fba1 1303 	umull	r1, r3, r1, r3
 800b91a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d90a      	bls.n	800b936 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b924:	3301      	adds	r3, #1
 800b926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b92a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b92e:	3301      	adds	r3, #1
 800b930:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b934:	e027      	b.n	800b986 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b936:	4b82      	ldr	r3, [pc, #520]	; (800bb40 <tcp_slowtmr+0x584>)
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b942:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b948:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b94c:	4618      	mov	r0, r3
 800b94e:	4b7e      	ldr	r3, [pc, #504]	; (800bb48 <tcp_slowtmr+0x58c>)
 800b950:	fb00 f303 	mul.w	r3, r0, r3
 800b954:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b956:	497b      	ldr	r1, [pc, #492]	; (800bb44 <tcp_slowtmr+0x588>)
 800b958:	fba1 1303 	umull	r1, r3, r1, r3
 800b95c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b95e:	429a      	cmp	r2, r3
 800b960:	d911      	bls.n	800b986 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b964:	f004 fac8 	bl	800fef8 <tcp_keepalive>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b96e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b972:	2b00      	cmp	r3, #0
 800b974:	d107      	bne.n	800b986 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b978:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b97c:	3301      	adds	r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d011      	beq.n	800b9b2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b98e:	4b6c      	ldr	r3, [pc, #432]	; (800bb40 <tcp_slowtmr+0x584>)
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	1ad2      	subs	r2, r2, r3
 800b998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b99e:	4619      	mov	r1, r3
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	440b      	add	r3, r1
 800b9a6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d302      	bcc.n	800b9b2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9ae:	f000 fddb 	bl	800c568 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b4:	7d1b      	ldrb	r3, [r3, #20]
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d10b      	bne.n	800b9d2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b9ba:	4b61      	ldr	r3, [pc, #388]	; (800bb40 <tcp_slowtmr+0x584>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	2b28      	cmp	r3, #40	; 0x28
 800b9c6:	d904      	bls.n	800b9d2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d4:	7d1b      	ldrb	r3, [r3, #20]
 800b9d6:	2b09      	cmp	r3, #9
 800b9d8:	d10b      	bne.n	800b9f2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b9da:	4b59      	ldr	r3, [pc, #356]	; (800bb40 <tcp_slowtmr+0x584>)
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	2bf0      	cmp	r3, #240	; 0xf0
 800b9e6:	d904      	bls.n	800b9f2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b9f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d060      	beq.n	800babc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba00:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ba02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba04:	f000 fbfc 	bl	800c200 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d010      	beq.n	800ba30 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ba0e:	4b4f      	ldr	r3, [pc, #316]	; (800bb4c <tcp_slowtmr+0x590>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d106      	bne.n	800ba26 <tcp_slowtmr+0x46a>
 800ba18:	4b4d      	ldr	r3, [pc, #308]	; (800bb50 <tcp_slowtmr+0x594>)
 800ba1a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ba1e:	494d      	ldr	r1, [pc, #308]	; (800bb54 <tcp_slowtmr+0x598>)
 800ba20:	484d      	ldr	r0, [pc, #308]	; (800bb58 <tcp_slowtmr+0x59c>)
 800ba22:	f007 fd5f 	bl	80134e4 <iprintf>
        prev->next = pcb->next;
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	68da      	ldr	r2, [r3, #12]
 800ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2c:	60da      	str	r2, [r3, #12]
 800ba2e:	e00f      	b.n	800ba50 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ba30:	4b46      	ldr	r3, [pc, #280]	; (800bb4c <tcp_slowtmr+0x590>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d006      	beq.n	800ba48 <tcp_slowtmr+0x48c>
 800ba3a:	4b45      	ldr	r3, [pc, #276]	; (800bb50 <tcp_slowtmr+0x594>)
 800ba3c:	f240 5271 	movw	r2, #1393	; 0x571
 800ba40:	4946      	ldr	r1, [pc, #280]	; (800bb5c <tcp_slowtmr+0x5a0>)
 800ba42:	4845      	ldr	r0, [pc, #276]	; (800bb58 <tcp_slowtmr+0x59c>)
 800ba44:	f007 fd4e 	bl	80134e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	4a3f      	ldr	r2, [pc, #252]	; (800bb4c <tcp_slowtmr+0x590>)
 800ba4e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ba50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d013      	beq.n	800ba80 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ba60:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	3304      	adds	r3, #4
 800ba66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba68:	8ad2      	ldrh	r2, [r2, #22]
 800ba6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba6c:	8b09      	ldrh	r1, [r1, #24]
 800ba6e:	9102      	str	r1, [sp, #8]
 800ba70:	9201      	str	r2, [sp, #4]
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	462b      	mov	r3, r5
 800ba76:	4622      	mov	r2, r4
 800ba78:	4601      	mov	r1, r0
 800ba7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba7c:	f004 f988 	bl	800fd90 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ba80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ba86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba88:	7d1b      	ldrb	r3, [r3, #20]
 800ba8a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ba90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ba96:	6838      	ldr	r0, [r7, #0]
 800ba98:	f7ff f9f2 	bl	800ae80 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ba9c:	4b30      	ldr	r3, [pc, #192]	; (800bb60 <tcp_slowtmr+0x5a4>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d004      	beq.n	800bab2 <tcp_slowtmr+0x4f6>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f06f 010c 	mvn.w	r1, #12
 800baae:	68b8      	ldr	r0, [r7, #8]
 800bab0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bab2:	4b2b      	ldr	r3, [pc, #172]	; (800bb60 <tcp_slowtmr+0x5a4>)
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d037      	beq.n	800bb2a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800baba:	e590      	b.n	800b5de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac8:	7f1b      	ldrb	r3, [r3, #28]
 800baca:	3301      	adds	r3, #1
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	7f1a      	ldrb	r2, [r3, #28]
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	7f5b      	ldrb	r3, [r3, #29]
 800bada:	429a      	cmp	r2, r3
 800badc:	d325      	bcc.n	800bb2a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	2200      	movs	r2, #0
 800bae2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <tcp_slowtmr+0x5a4>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <tcp_slowtmr+0x550>
 800baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bafc:	6912      	ldr	r2, [r2, #16]
 800bafe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb00:	4610      	mov	r0, r2
 800bb02:	4798      	blx	r3
 800bb04:	4603      	mov	r3, r0
 800bb06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800bb0a:	e002      	b.n	800bb12 <tcp_slowtmr+0x556>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <tcp_slowtmr+0x5a4>)
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d000      	beq.n	800bb1c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800bb1a:	e560      	b.n	800b5de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bb1c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d102      	bne.n	800bb2a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800bb24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb26:	f003 fb7f 	bl	800f228 <tcp_output>
  while (pcb != NULL) {
 800bb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f47f ad5c 	bne.w	800b5ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800bb36:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <tcp_slowtmr+0x5a8>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bb3c:	e067      	b.n	800bc0e <tcp_slowtmr+0x652>
 800bb3e:	bf00      	nop
 800bb40:	20008eb0 	.word	0x20008eb0
 800bb44:	10624dd3 	.word	0x10624dd3
 800bb48:	000124f8 	.word	0x000124f8
 800bb4c:	20008ebc 	.word	0x20008ebc
 800bb50:	080153fc 	.word	0x080153fc
 800bb54:	08015834 	.word	0x08015834
 800bb58:	08015440 	.word	0x08015440
 800bb5c:	08015860 	.word	0x08015860
 800bb60:	20008ec4 	.word	0x20008ec4
 800bb64:	20008ec0 	.word	0x20008ec0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	7d1b      	ldrb	r3, [r3, #20]
 800bb6c:	2b0a      	cmp	r3, #10
 800bb6e:	d006      	beq.n	800bb7e <tcp_slowtmr+0x5c2>
 800bb70:	4b2b      	ldr	r3, [pc, #172]	; (800bc20 <tcp_slowtmr+0x664>)
 800bb72:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800bb76:	492b      	ldr	r1, [pc, #172]	; (800bc24 <tcp_slowtmr+0x668>)
 800bb78:	482b      	ldr	r0, [pc, #172]	; (800bc28 <tcp_slowtmr+0x66c>)
 800bb7a:	f007 fcb3 	bl	80134e4 <iprintf>
    pcb_remove = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bb84:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <tcp_slowtmr+0x670>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	2bf0      	cmp	r3, #240	; 0xf0
 800bb90:	d904      	bls.n	800bb9c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800bb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb96:	3301      	adds	r3, #1
 800bb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d02f      	beq.n	800bc04 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bba6:	f000 fb2b 	bl	800c200 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d010      	beq.n	800bbd2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bbb0:	4b1f      	ldr	r3, [pc, #124]	; (800bc30 <tcp_slowtmr+0x674>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d106      	bne.n	800bbc8 <tcp_slowtmr+0x60c>
 800bbba:	4b19      	ldr	r3, [pc, #100]	; (800bc20 <tcp_slowtmr+0x664>)
 800bbbc:	f240 52af 	movw	r2, #1455	; 0x5af
 800bbc0:	491c      	ldr	r1, [pc, #112]	; (800bc34 <tcp_slowtmr+0x678>)
 800bbc2:	4819      	ldr	r0, [pc, #100]	; (800bc28 <tcp_slowtmr+0x66c>)
 800bbc4:	f007 fc8e 	bl	80134e4 <iprintf>
        prev->next = pcb->next;
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	60da      	str	r2, [r3, #12]
 800bbd0:	e00f      	b.n	800bbf2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bbd2:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <tcp_slowtmr+0x674>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d006      	beq.n	800bbea <tcp_slowtmr+0x62e>
 800bbdc:	4b10      	ldr	r3, [pc, #64]	; (800bc20 <tcp_slowtmr+0x664>)
 800bbde:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bbe2:	4915      	ldr	r1, [pc, #84]	; (800bc38 <tcp_slowtmr+0x67c>)
 800bbe4:	4810      	ldr	r0, [pc, #64]	; (800bc28 <tcp_slowtmr+0x66c>)
 800bbe6:	f007 fc7d 	bl	80134e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	4a10      	ldr	r2, [pc, #64]	; (800bc30 <tcp_slowtmr+0x674>)
 800bbf0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bbfc:	69f8      	ldr	r0, [r7, #28]
 800bbfe:	f7ff f93f 	bl	800ae80 <tcp_free>
 800bc02:	e004      	b.n	800bc0e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1a9      	bne.n	800bb68 <tcp_slowtmr+0x5ac>
    }
  }
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop
 800bc18:	3730      	adds	r7, #48	; 0x30
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	080153fc 	.word	0x080153fc
 800bc24:	0801588c 	.word	0x0801588c
 800bc28:	08015440 	.word	0x08015440
 800bc2c:	20008eb0 	.word	0x20008eb0
 800bc30:	20008ec0 	.word	0x20008ec0
 800bc34:	080158bc 	.word	0x080158bc
 800bc38:	080158e4 	.word	0x080158e4

0800bc3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bc42:	4b2d      	ldr	r3, [pc, #180]	; (800bcf8 <tcp_fasttmr+0xbc>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	3301      	adds	r3, #1
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	4b2b      	ldr	r3, [pc, #172]	; (800bcf8 <tcp_fasttmr+0xbc>)
 800bc4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bc4e:	4b2b      	ldr	r3, [pc, #172]	; (800bcfc <tcp_fasttmr+0xc0>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bc54:	e048      	b.n	800bce8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	7f9a      	ldrb	r2, [r3, #30]
 800bc5a:	4b27      	ldr	r3, [pc, #156]	; (800bcf8 <tcp_fasttmr+0xbc>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d03f      	beq.n	800bce2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bc62:	4b25      	ldr	r3, [pc, #148]	; (800bcf8 <tcp_fasttmr+0xbc>)
 800bc64:	781a      	ldrb	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	8b5b      	ldrh	r3, [r3, #26]
 800bc6e:	f003 0301 	and.w	r3, r3, #1
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d010      	beq.n	800bc98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8b5b      	ldrh	r3, [r3, #26]
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f003 facf 	bl	800f228 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	8b5b      	ldrh	r3, [r3, #26]
 800bc8e:	f023 0303 	bic.w	r3, r3, #3
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	8b5b      	ldrh	r3, [r3, #26]
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d009      	beq.n	800bcb8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	8b5b      	ldrh	r3, [r3, #26]
 800bca8:	f023 0308 	bic.w	r3, r3, #8
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff fa78 	bl	800b1a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00a      	beq.n	800bcdc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bcc6:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <tcp_fasttmr+0xc4>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f819 	bl	800bd04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <tcp_fasttmr+0xc4>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d000      	beq.n	800bcdc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bcda:	e7b8      	b.n	800bc4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	607b      	str	r3, [r7, #4]
 800bce0:	e002      	b.n	800bce8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1b3      	bne.n	800bc56 <tcp_fasttmr+0x1a>
    }
  }
}
 800bcee:	bf00      	nop
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20008ec6 	.word	0x20008ec6
 800bcfc:	20008ebc 	.word	0x20008ebc
 800bd00:	20008ec4 	.word	0x20008ec4

0800bd04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bd04:	b590      	push	{r4, r7, lr}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d109      	bne.n	800bd26 <tcp_process_refused_data+0x22>
 800bd12:	4b37      	ldr	r3, [pc, #220]	; (800bdf0 <tcp_process_refused_data+0xec>)
 800bd14:	f240 6209 	movw	r2, #1545	; 0x609
 800bd18:	4936      	ldr	r1, [pc, #216]	; (800bdf4 <tcp_process_refused_data+0xf0>)
 800bd1a:	4837      	ldr	r0, [pc, #220]	; (800bdf8 <tcp_process_refused_data+0xf4>)
 800bd1c:	f007 fbe2 	bl	80134e4 <iprintf>
 800bd20:	f06f 030f 	mvn.w	r3, #15
 800bd24:	e060      	b.n	800bde8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd2a:	7b5b      	ldrb	r3, [r3, #13]
 800bd2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00b      	beq.n	800bd5c <tcp_process_refused_data+0x58>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6918      	ldr	r0, [r3, #16]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	6879      	ldr	r1, [r7, #4]
 800bd54:	47a0      	blx	r4
 800bd56:	4603      	mov	r3, r0
 800bd58:	73fb      	strb	r3, [r7, #15]
 800bd5a:	e007      	b.n	800bd6c <tcp_process_refused_data+0x68>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	6879      	ldr	r1, [r7, #4]
 800bd62:	2000      	movs	r0, #0
 800bd64:	f000 f8a4 	bl	800beb0 <tcp_recv_null>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bd6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d12a      	bne.n	800bdca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
 800bd76:	f003 0320 	and.w	r3, r3, #32
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d033      	beq.n	800bde6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bd86:	d005      	beq.n	800bd94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <tcp_process_refused_data+0xb2>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6918      	ldr	r0, [r3, #16]
 800bda8:	2300      	movs	r3, #0
 800bdaa:	2200      	movs	r2, #0
 800bdac:	6879      	ldr	r1, [r7, #4]
 800bdae:	47a0      	blx	r4
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
 800bdb4:	e001      	b.n	800bdba <tcp_process_refused_data+0xb6>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bdba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdbe:	f113 0f0d 	cmn.w	r3, #13
 800bdc2:	d110      	bne.n	800bde6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bdc4:	f06f 030c 	mvn.w	r3, #12
 800bdc8:	e00e      	b.n	800bde8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bdca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdce:	f113 0f0d 	cmn.w	r3, #13
 800bdd2:	d102      	bne.n	800bdda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bdd4:	f06f 030c 	mvn.w	r3, #12
 800bdd8:	e006      	b.n	800bde8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bde0:	f06f 0304 	mvn.w	r3, #4
 800bde4:	e000      	b.n	800bde8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd90      	pop	{r4, r7, pc}
 800bdf0:	080153fc 	.word	0x080153fc
 800bdf4:	0801590c 	.word	0x0801590c
 800bdf8:	08015440 	.word	0x08015440

0800bdfc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800be04:	e007      	b.n	800be16 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f80a 	bl	800be26 <tcp_seg_free>
    seg = next;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1f4      	bne.n	800be06 <tcp_segs_free+0xa>
  }
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b082      	sub	sp, #8
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00c      	beq.n	800be4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	f7fe fcdb 	bl	800a7fc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800be46:	6879      	ldr	r1, [r7, #4]
 800be48:	2003      	movs	r0, #3
 800be4a:	f7fd fec5 	bl	8009bd8 <memp_free>
  }
}
 800be4e:	bf00      	nop
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
	...

0800be58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d106      	bne.n	800be74 <tcp_seg_copy+0x1c>
 800be66:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <tcp_seg_copy+0x4c>)
 800be68:	f240 6282 	movw	r2, #1666	; 0x682
 800be6c:	490e      	ldr	r1, [pc, #56]	; (800bea8 <tcp_seg_copy+0x50>)
 800be6e:	480f      	ldr	r0, [pc, #60]	; (800beac <tcp_seg_copy+0x54>)
 800be70:	f007 fb38 	bl	80134e4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800be74:	2003      	movs	r0, #3
 800be76:	f7fd fe63 	bl	8009b40 <memp_malloc>
 800be7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <tcp_seg_copy+0x2e>
    return NULL;
 800be82:	2300      	movs	r3, #0
 800be84:	e00a      	b.n	800be9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800be86:	2210      	movs	r2, #16
 800be88:	6879      	ldr	r1, [r7, #4]
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f007 fafa 	bl	8013484 <memcpy>
  pbuf_ref(cseg->p);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	4618      	mov	r0, r3
 800be96:	f7fe fd51 	bl	800a93c <pbuf_ref>
  return cseg;
 800be9a:	68fb      	ldr	r3, [r7, #12]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	080153fc 	.word	0x080153fc
 800bea8:	08015950 	.word	0x08015950
 800beac:	08015440 	.word	0x08015440

0800beb0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d109      	bne.n	800bed8 <tcp_recv_null+0x28>
 800bec4:	4b12      	ldr	r3, [pc, #72]	; (800bf10 <tcp_recv_null+0x60>)
 800bec6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800beca:	4912      	ldr	r1, [pc, #72]	; (800bf14 <tcp_recv_null+0x64>)
 800becc:	4812      	ldr	r0, [pc, #72]	; (800bf18 <tcp_recv_null+0x68>)
 800bece:	f007 fb09 	bl	80134e4 <iprintf>
 800bed2:	f06f 030f 	mvn.w	r3, #15
 800bed6:	e016      	b.n	800bf06 <tcp_recv_null+0x56>

  if (p != NULL) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d009      	beq.n	800bef2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	891b      	ldrh	r3, [r3, #8]
 800bee2:	4619      	mov	r1, r3
 800bee4:	68b8      	ldr	r0, [r7, #8]
 800bee6:	f7ff fb19 	bl	800b51c <tcp_recved>
    pbuf_free(p);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7fe fc86 	bl	800a7fc <pbuf_free>
 800bef0:	e008      	b.n	800bf04 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d104      	bne.n	800bf04 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800befa:	68b8      	ldr	r0, [r7, #8]
 800befc:	f7ff f9be 	bl	800b27c <tcp_close>
 800bf00:	4603      	mov	r3, r0
 800bf02:	e000      	b.n	800bf06 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	080153fc 	.word	0x080153fc
 800bf14:	0801596c 	.word	0x0801596c
 800bf18:	08015440 	.word	0x08015440

0800bf1c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bf26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	db01      	blt.n	800bf32 <tcp_kill_prio+0x16>
 800bf2e:	79fb      	ldrb	r3, [r7, #7]
 800bf30:	e000      	b.n	800bf34 <tcp_kill_prio+0x18>
 800bf32:	237f      	movs	r3, #127	; 0x7f
 800bf34:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bf36:	7afb      	ldrb	r3, [r7, #11]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d034      	beq.n	800bfa6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bf3c:	7afb      	ldrb	r3, [r7, #11]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf4a:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <tcp_kill_prio+0x94>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	e01f      	b.n	800bf92 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	7d5b      	ldrb	r3, [r3, #21]
 800bf56:	7afa      	ldrb	r2, [r7, #11]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d80c      	bhi.n	800bf76 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bf60:	7afa      	ldrb	r2, [r7, #11]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d112      	bne.n	800bf8c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bf66:	4b13      	ldr	r3, [pc, #76]	; (800bfb4 <tcp_kill_prio+0x98>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d80a      	bhi.n	800bf8c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bf76:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <tcp_kill_prio+0x98>)
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	7d5b      	ldrb	r3, [r3, #21]
 800bf8a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	617b      	str	r3, [r7, #20]
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1dc      	bne.n	800bf52 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d004      	beq.n	800bfa8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bf9e:	6938      	ldr	r0, [r7, #16]
 800bfa0:	f7ff fa56 	bl	800b450 <tcp_abort>
 800bfa4:	e000      	b.n	800bfa8 <tcp_kill_prio+0x8c>
    return;
 800bfa6:	bf00      	nop
  }
}
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	20008ebc 	.word	0x20008ebc
 800bfb4:	20008eb0 	.word	0x20008eb0

0800bfb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	2b08      	cmp	r3, #8
 800bfc6:	d009      	beq.n	800bfdc <tcp_kill_state+0x24>
 800bfc8:	79fb      	ldrb	r3, [r7, #7]
 800bfca:	2b09      	cmp	r3, #9
 800bfcc:	d006      	beq.n	800bfdc <tcp_kill_state+0x24>
 800bfce:	4b1a      	ldr	r3, [pc, #104]	; (800c038 <tcp_kill_state+0x80>)
 800bfd0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bfd4:	4919      	ldr	r1, [pc, #100]	; (800c03c <tcp_kill_state+0x84>)
 800bfd6:	481a      	ldr	r0, [pc, #104]	; (800c040 <tcp_kill_state+0x88>)
 800bfd8:	f007 fa84 	bl	80134e4 <iprintf>

  inactivity = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfe4:	4b17      	ldr	r3, [pc, #92]	; (800c044 <tcp_kill_state+0x8c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	617b      	str	r3, [r7, #20]
 800bfea:	e017      	b.n	800c01c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	7d1b      	ldrb	r3, [r3, #20]
 800bff0:	79fa      	ldrb	r2, [r7, #7]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d10f      	bne.n	800c016 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bff6:	4b14      	ldr	r3, [pc, #80]	; (800c048 <tcp_kill_state+0x90>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	429a      	cmp	r2, r3
 800c004:	d807      	bhi.n	800c016 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c006:	4b10      	ldr	r3, [pc, #64]	; (800c048 <tcp_kill_state+0x90>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1e4      	bne.n	800bfec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d003      	beq.n	800c030 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c028:	2100      	movs	r1, #0
 800c02a:	6938      	ldr	r0, [r7, #16]
 800c02c:	f7ff f952 	bl	800b2d4 <tcp_abandon>
  }
}
 800c030:	bf00      	nop
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	080153fc 	.word	0x080153fc
 800c03c:	08015988 	.word	0x08015988
 800c040:	08015440 	.word	0x08015440
 800c044:	20008ebc 	.word	0x20008ebc
 800c048:	20008eb0 	.word	0x20008eb0

0800c04c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c056:	2300      	movs	r3, #0
 800c058:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c05a:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <tcp_kill_timewait+0x58>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	e012      	b.n	800c088 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c062:	4b11      	ldr	r3, [pc, #68]	; (800c0a8 <tcp_kill_timewait+0x5c>)
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d807      	bhi.n	800c082 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c072:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <tcp_kill_timewait+0x5c>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e9      	bne.n	800c062 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c094:	68b8      	ldr	r0, [r7, #8]
 800c096:	f7ff f9db 	bl	800b450 <tcp_abort>
  }
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20008ec0 	.word	0x20008ec0
 800c0a8:	20008eb0 	.word	0x20008eb0

0800c0ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c0b2:	4b10      	ldr	r3, [pc, #64]	; (800c0f4 <tcp_handle_closepend+0x48>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c0b8:	e014      	b.n	800c0e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	8b5b      	ldrh	r3, [r3, #26]
 800c0c4:	f003 0308 	and.w	r3, r3, #8
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d009      	beq.n	800c0e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	8b5b      	ldrh	r3, [r3, #26]
 800c0d0:	f023 0308 	bic.w	r3, r3, #8
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff f864 	bl	800b1a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e7      	bne.n	800c0ba <tcp_handle_closepend+0xe>
  }
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	20008ebc 	.word	0x20008ebc

0800c0f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	4603      	mov	r3, r0
 800c100:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c102:	2001      	movs	r0, #1
 800c104:	f7fd fd1c 	bl	8009b40 <memp_malloc>
 800c108:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d126      	bne.n	800c15e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c110:	f7ff ffcc 	bl	800c0ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c114:	f7ff ff9a 	bl	800c04c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c118:	2001      	movs	r0, #1
 800c11a:	f7fd fd11 	bl	8009b40 <memp_malloc>
 800c11e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d11b      	bne.n	800c15e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c126:	2009      	movs	r0, #9
 800c128:	f7ff ff46 	bl	800bfb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c12c:	2001      	movs	r0, #1
 800c12e:	f7fd fd07 	bl	8009b40 <memp_malloc>
 800c132:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d111      	bne.n	800c15e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c13a:	2008      	movs	r0, #8
 800c13c:	f7ff ff3c 	bl	800bfb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c140:	2001      	movs	r0, #1
 800c142:	f7fd fcfd 	bl	8009b40 <memp_malloc>
 800c146:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d107      	bne.n	800c15e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff fee3 	bl	800bf1c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c156:	2001      	movs	r0, #1
 800c158:	f7fd fcf2 	bl	8009b40 <memp_malloc>
 800c15c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d03f      	beq.n	800c1e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c164:	229c      	movs	r2, #156	; 0x9c
 800c166:	2100      	movs	r1, #0
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f007 f9b3 	bl	80134d4 <memset>
    pcb->prio = prio;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	79fa      	ldrb	r2, [r7, #7]
 800c172:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c17a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c184:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	22ff      	movs	r2, #255	; 0xff
 800c192:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c19a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2206      	movs	r2, #6
 800c1a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2206      	movs	r2, #6
 800c1a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c1ba:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <tcp_alloc+0xf8>)
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c1c2:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <tcp_alloc+0xfc>)
 800c1c4:	781a      	ldrb	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c1d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	4a08      	ldr	r2, [pc, #32]	; (800c1f8 <tcp_alloc+0x100>)
 800c1d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4a07      	ldr	r2, [pc, #28]	; (800c1fc <tcp_alloc+0x104>)
 800c1e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20008eb0 	.word	0x20008eb0
 800c1f4:	20008ec6 	.word	0x20008ec6
 800c1f8:	0800beb1 	.word	0x0800beb1
 800c1fc:	006ddd00 	.word	0x006ddd00

0800c200 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d107      	bne.n	800c21e <tcp_pcb_purge+0x1e>
 800c20e:	4b21      	ldr	r3, [pc, #132]	; (800c294 <tcp_pcb_purge+0x94>)
 800c210:	f640 0251 	movw	r2, #2129	; 0x851
 800c214:	4920      	ldr	r1, [pc, #128]	; (800c298 <tcp_pcb_purge+0x98>)
 800c216:	4821      	ldr	r0, [pc, #132]	; (800c29c <tcp_pcb_purge+0x9c>)
 800c218:	f007 f964 	bl	80134e4 <iprintf>
 800c21c:	e037      	b.n	800c28e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	7d1b      	ldrb	r3, [r3, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d033      	beq.n	800c28e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c22a:	2b0a      	cmp	r3, #10
 800c22c:	d02f      	beq.n	800c28e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c232:	2b01      	cmp	r3, #1
 800c234:	d02b      	beq.n	800c28e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d007      	beq.n	800c24e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe fada 	bl	800a7fc <pbuf_free>
      pcb->refused_data = NULL;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f986 	bl	800c568 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c262:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff fdc7 	bl	800bdfc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c272:	4618      	mov	r0, r3
 800c274:	f7ff fdc2 	bl	800bdfc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	66da      	str	r2, [r3, #108]	; 0x6c
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	080153fc 	.word	0x080153fc
 800c298:	08015a48 	.word	0x08015a48
 800c29c:	08015440 	.word	0x08015440

0800c2a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d106      	bne.n	800c2be <tcp_pcb_remove+0x1e>
 800c2b0:	4b3e      	ldr	r3, [pc, #248]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c2b2:	f640 0283 	movw	r2, #2179	; 0x883
 800c2b6:	493e      	ldr	r1, [pc, #248]	; (800c3b0 <tcp_pcb_remove+0x110>)
 800c2b8:	483e      	ldr	r0, [pc, #248]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c2ba:	f007 f913 	bl	80134e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d106      	bne.n	800c2d2 <tcp_pcb_remove+0x32>
 800c2c4:	4b39      	ldr	r3, [pc, #228]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c2c6:	f640 0284 	movw	r2, #2180	; 0x884
 800c2ca:	493b      	ldr	r1, [pc, #236]	; (800c3b8 <tcp_pcb_remove+0x118>)
 800c2cc:	4839      	ldr	r0, [pc, #228]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c2ce:	f007 f909 	bl	80134e4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d105      	bne.n	800c2e8 <tcp_pcb_remove+0x48>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68da      	ldr	r2, [r3, #12]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	601a      	str	r2, [r3, #0]
 800c2e6:	e013      	b.n	800c310 <tcp_pcb_remove+0x70>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	60fb      	str	r3, [r7, #12]
 800c2ee:	e00c      	b.n	800c30a <tcp_pcb_remove+0x6a>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d104      	bne.n	800c304 <tcp_pcb_remove+0x64>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	68da      	ldr	r2, [r3, #12]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	60da      	str	r2, [r3, #12]
 800c302:	e005      	b.n	800c310 <tcp_pcb_remove+0x70>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1ef      	bne.n	800c2f0 <tcp_pcb_remove+0x50>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c316:	6838      	ldr	r0, [r7, #0]
 800c318:	f7ff ff72 	bl	800c200 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	7d1b      	ldrb	r3, [r3, #20]
 800c320:	2b0a      	cmp	r3, #10
 800c322:	d013      	beq.n	800c34c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d00f      	beq.n	800c34c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	8b5b      	ldrh	r3, [r3, #26]
 800c330:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c334:	2b00      	cmp	r3, #0
 800c336:	d009      	beq.n	800c34c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	8b5b      	ldrh	r3, [r3, #26]
 800c33c:	f043 0302 	orr.w	r3, r3, #2
 800c340:	b29a      	uxth	r2, r3
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c346:	6838      	ldr	r0, [r7, #0]
 800c348:	f002 ff6e 	bl	800f228 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	7d1b      	ldrb	r3, [r3, #20]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d020      	beq.n	800c396 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d006      	beq.n	800c36a <tcp_pcb_remove+0xca>
 800c35c:	4b13      	ldr	r3, [pc, #76]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c35e:	f640 0293 	movw	r2, #2195	; 0x893
 800c362:	4916      	ldr	r1, [pc, #88]	; (800c3bc <tcp_pcb_remove+0x11c>)
 800c364:	4813      	ldr	r0, [pc, #76]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c366:	f007 f8bd 	bl	80134e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d006      	beq.n	800c380 <tcp_pcb_remove+0xe0>
 800c372:	4b0e      	ldr	r3, [pc, #56]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c374:	f640 0294 	movw	r2, #2196	; 0x894
 800c378:	4911      	ldr	r1, [pc, #68]	; (800c3c0 <tcp_pcb_remove+0x120>)
 800c37a:	480e      	ldr	r0, [pc, #56]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c37c:	f007 f8b2 	bl	80134e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c384:	2b00      	cmp	r3, #0
 800c386:	d006      	beq.n	800c396 <tcp_pcb_remove+0xf6>
 800c388:	4b08      	ldr	r3, [pc, #32]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c38a:	f640 0296 	movw	r2, #2198	; 0x896
 800c38e:	490d      	ldr	r1, [pc, #52]	; (800c3c4 <tcp_pcb_remove+0x124>)
 800c390:	4808      	ldr	r0, [pc, #32]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c392:	f007 f8a7 	bl	80134e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2200      	movs	r2, #0
 800c39a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c3a2:	bf00      	nop
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	080153fc 	.word	0x080153fc
 800c3b0:	08015a64 	.word	0x08015a64
 800c3b4:	08015440 	.word	0x08015440
 800c3b8:	08015a80 	.word	0x08015a80
 800c3bc:	08015aa0 	.word	0x08015aa0
 800c3c0:	08015ab8 	.word	0x08015ab8
 800c3c4:	08015ad4 	.word	0x08015ad4

0800c3c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <tcp_next_iss+0x1c>
 800c3d6:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <tcp_next_iss+0x38>)
 800c3d8:	f640 02af 	movw	r2, #2223	; 0x8af
 800c3dc:	4909      	ldr	r1, [pc, #36]	; (800c404 <tcp_next_iss+0x3c>)
 800c3de:	480a      	ldr	r0, [pc, #40]	; (800c408 <tcp_next_iss+0x40>)
 800c3e0:	f007 f880 	bl	80134e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c3e4:	4b09      	ldr	r3, [pc, #36]	; (800c40c <tcp_next_iss+0x44>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	4b09      	ldr	r3, [pc, #36]	; (800c410 <tcp_next_iss+0x48>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	4a07      	ldr	r2, [pc, #28]	; (800c40c <tcp_next_iss+0x44>)
 800c3f0:	6013      	str	r3, [r2, #0]
  return iss;
 800c3f2:	4b06      	ldr	r3, [pc, #24]	; (800c40c <tcp_next_iss+0x44>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	080153fc 	.word	0x080153fc
 800c404:	08015aec 	.word	0x08015aec
 800c408:	08015440 	.word	0x08015440
 800c40c:	20000010 	.word	0x20000010
 800c410:	20008eb0 	.word	0x20008eb0

0800c414 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d106      	bne.n	800c436 <tcp_eff_send_mss_netif+0x22>
 800c428:	4b14      	ldr	r3, [pc, #80]	; (800c47c <tcp_eff_send_mss_netif+0x68>)
 800c42a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c42e:	4914      	ldr	r1, [pc, #80]	; (800c480 <tcp_eff_send_mss_netif+0x6c>)
 800c430:	4814      	ldr	r0, [pc, #80]	; (800c484 <tcp_eff_send_mss_netif+0x70>)
 800c432:	f007 f857 	bl	80134e4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d101      	bne.n	800c440 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c43c:	89fb      	ldrh	r3, [r7, #14]
 800c43e:	e019      	b.n	800c474 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c444:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c446:	8afb      	ldrh	r3, [r7, #22]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d012      	beq.n	800c472 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c44c:	2328      	movs	r3, #40	; 0x28
 800c44e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c450:	8afa      	ldrh	r2, [r7, #22]
 800c452:	8abb      	ldrh	r3, [r7, #20]
 800c454:	429a      	cmp	r2, r3
 800c456:	d904      	bls.n	800c462 <tcp_eff_send_mss_netif+0x4e>
 800c458:	8afa      	ldrh	r2, [r7, #22]
 800c45a:	8abb      	ldrh	r3, [r7, #20]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	b29b      	uxth	r3, r3
 800c460:	e000      	b.n	800c464 <tcp_eff_send_mss_netif+0x50>
 800c462:	2300      	movs	r3, #0
 800c464:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c466:	8a7a      	ldrh	r2, [r7, #18]
 800c468:	89fb      	ldrh	r3, [r7, #14]
 800c46a:	4293      	cmp	r3, r2
 800c46c:	bf28      	it	cs
 800c46e:	4613      	movcs	r3, r2
 800c470:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c472:	89fb      	ldrh	r3, [r7, #14]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	080153fc 	.word	0x080153fc
 800c480:	08015b08 	.word	0x08015b08
 800c484:	08015440 	.word	0x08015440

0800c488 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d119      	bne.n	800c4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c49c:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c49e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c4a2:	4910      	ldr	r1, [pc, #64]	; (800c4e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c4a4:	4810      	ldr	r0, [pc, #64]	; (800c4e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c4a6:	f007 f81d 	bl	80134e4 <iprintf>

  while (pcb != NULL) {
 800c4aa:	e011      	b.n	800c4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d108      	bne.n	800c4ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7fe ffc6 	bl	800b450 <tcp_abort>
      pcb = next;
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	e002      	b.n	800c4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1ea      	bne.n	800c4ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	080153fc 	.word	0x080153fc
 800c4e4:	08015b30 	.word	0x08015b30
 800c4e8:	08015440 	.word	0x08015440

0800c4ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d02a      	beq.n	800c552 <tcp_netif_ip_addr_changed+0x66>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d026      	beq.n	800c552 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c504:	4b15      	ldr	r3, [pc, #84]	; (800c55c <tcp_netif_ip_addr_changed+0x70>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff ffbc 	bl	800c488 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c510:	4b13      	ldr	r3, [pc, #76]	; (800c560 <tcp_netif_ip_addr_changed+0x74>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff ffb6 	bl	800c488 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d017      	beq.n	800c552 <tcp_netif_ip_addr_changed+0x66>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d013      	beq.n	800c552 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c52a:	4b0e      	ldr	r3, [pc, #56]	; (800c564 <tcp_netif_ip_addr_changed+0x78>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	e00c      	b.n	800c54c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d103      	bne.n	800c546 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1ef      	bne.n	800c532 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c552:	bf00      	nop
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	20008ebc 	.word	0x20008ebc
 800c560:	20008eb4 	.word	0x20008eb4
 800c564:	20008eb8 	.word	0x20008eb8

0800c568 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c574:	2b00      	cmp	r3, #0
 800c576:	d007      	beq.n	800c588 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7ff fc3d 	bl	800bdfc <tcp_segs_free>
    pcb->ooseq = NULL;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c590:	b590      	push	{r4, r7, lr}
 800c592:	b08d      	sub	sp, #52	; 0x34
 800c594:	af04      	add	r7, sp, #16
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d105      	bne.n	800c5ac <tcp_input+0x1c>
 800c5a0:	4b9b      	ldr	r3, [pc, #620]	; (800c810 <tcp_input+0x280>)
 800c5a2:	2283      	movs	r2, #131	; 0x83
 800c5a4:	499b      	ldr	r1, [pc, #620]	; (800c814 <tcp_input+0x284>)
 800c5a6:	489c      	ldr	r0, [pc, #624]	; (800c818 <tcp_input+0x288>)
 800c5a8:	f006 ff9c 	bl	80134e4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4a9a      	ldr	r2, [pc, #616]	; (800c81c <tcp_input+0x28c>)
 800c5b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	895b      	ldrh	r3, [r3, #10]
 800c5b8:	2b13      	cmp	r3, #19
 800c5ba:	f240 83d1 	bls.w	800cd60 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c5be:	4b98      	ldr	r3, [pc, #608]	; (800c820 <tcp_input+0x290>)
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	4a97      	ldr	r2, [pc, #604]	; (800c820 <tcp_input+0x290>)
 800c5c4:	6812      	ldr	r2, [r2, #0]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f005 ffd1 	bl	8012570 <ip4_addr_isbroadcast_u32>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f040 83c7 	bne.w	800cd64 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c5d6:	4b92      	ldr	r3, [pc, #584]	; (800c820 <tcp_input+0x290>)
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c5de:	2be0      	cmp	r3, #224	; 0xe0
 800c5e0:	f000 83c0 	beq.w	800cd64 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c5e4:	4b8d      	ldr	r3, [pc, #564]	; (800c81c <tcp_input+0x28c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	899b      	ldrh	r3, [r3, #12]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fc fe51 	bl	8009294 <lwip_htons>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	0b1b      	lsrs	r3, r3, #12
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c5fe:	7cbb      	ldrb	r3, [r7, #18]
 800c600:	2b13      	cmp	r3, #19
 800c602:	f240 83b1 	bls.w	800cd68 <tcp_input+0x7d8>
 800c606:	7cbb      	ldrb	r3, [r7, #18]
 800c608:	b29a      	uxth	r2, r3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	891b      	ldrh	r3, [r3, #8]
 800c60e:	429a      	cmp	r2, r3
 800c610:	f200 83aa 	bhi.w	800cd68 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c614:	7cbb      	ldrb	r3, [r7, #18]
 800c616:	b29b      	uxth	r3, r3
 800c618:	3b14      	subs	r3, #20
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	4b81      	ldr	r3, [pc, #516]	; (800c824 <tcp_input+0x294>)
 800c61e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c620:	4b81      	ldr	r3, [pc, #516]	; (800c828 <tcp_input+0x298>)
 800c622:	2200      	movs	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	895a      	ldrh	r2, [r3, #10]
 800c62a:	7cbb      	ldrb	r3, [r7, #18]
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	429a      	cmp	r2, r3
 800c630:	d309      	bcc.n	800c646 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c632:	4b7c      	ldr	r3, [pc, #496]	; (800c824 <tcp_input+0x294>)
 800c634:	881a      	ldrh	r2, [r3, #0]
 800c636:	4b7d      	ldr	r3, [pc, #500]	; (800c82c <tcp_input+0x29c>)
 800c638:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c63a:	7cbb      	ldrb	r3, [r7, #18]
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7fe f856 	bl	800a6f0 <pbuf_remove_header>
 800c644:	e04e      	b.n	800c6e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d105      	bne.n	800c65a <tcp_input+0xca>
 800c64e:	4b70      	ldr	r3, [pc, #448]	; (800c810 <tcp_input+0x280>)
 800c650:	22c2      	movs	r2, #194	; 0xc2
 800c652:	4977      	ldr	r1, [pc, #476]	; (800c830 <tcp_input+0x2a0>)
 800c654:	4870      	ldr	r0, [pc, #448]	; (800c818 <tcp_input+0x288>)
 800c656:	f006 ff45 	bl	80134e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c65a:	2114      	movs	r1, #20
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7fe f847 	bl	800a6f0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	895a      	ldrh	r2, [r3, #10]
 800c666:	4b71      	ldr	r3, [pc, #452]	; (800c82c <tcp_input+0x29c>)
 800c668:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c66a:	4b6e      	ldr	r3, [pc, #440]	; (800c824 <tcp_input+0x294>)
 800c66c:	881a      	ldrh	r2, [r3, #0]
 800c66e:	4b6f      	ldr	r3, [pc, #444]	; (800c82c <tcp_input+0x29c>)
 800c670:	881b      	ldrh	r3, [r3, #0]
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c676:	4b6d      	ldr	r3, [pc, #436]	; (800c82c <tcp_input+0x29c>)
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7fe f837 	bl	800a6f0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	895b      	ldrh	r3, [r3, #10]
 800c688:	8a3a      	ldrh	r2, [r7, #16]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	f200 836e 	bhi.w	800cd6c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	4a64      	ldr	r2, [pc, #400]	; (800c828 <tcp_input+0x298>)
 800c698:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	8a3a      	ldrh	r2, [r7, #16]
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe f824 	bl	800a6f0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	891a      	ldrh	r2, [r3, #8]
 800c6ac:	8a3b      	ldrh	r3, [r7, #16]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	895b      	ldrh	r3, [r3, #10]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d005      	beq.n	800c6ca <tcp_input+0x13a>
 800c6be:	4b54      	ldr	r3, [pc, #336]	; (800c810 <tcp_input+0x280>)
 800c6c0:	22df      	movs	r2, #223	; 0xdf
 800c6c2:	495c      	ldr	r1, [pc, #368]	; (800c834 <tcp_input+0x2a4>)
 800c6c4:	4854      	ldr	r0, [pc, #336]	; (800c818 <tcp_input+0x288>)
 800c6c6:	f006 ff0d 	bl	80134e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	891a      	ldrh	r2, [r3, #8]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	891b      	ldrh	r3, [r3, #8]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d005      	beq.n	800c6e4 <tcp_input+0x154>
 800c6d8:	4b4d      	ldr	r3, [pc, #308]	; (800c810 <tcp_input+0x280>)
 800c6da:	22e0      	movs	r2, #224	; 0xe0
 800c6dc:	4956      	ldr	r1, [pc, #344]	; (800c838 <tcp_input+0x2a8>)
 800c6de:	484e      	ldr	r0, [pc, #312]	; (800c818 <tcp_input+0x288>)
 800c6e0:	f006 ff00 	bl	80134e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c6e4:	4b4d      	ldr	r3, [pc, #308]	; (800c81c <tcp_input+0x28c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	881b      	ldrh	r3, [r3, #0]
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	4a4b      	ldr	r2, [pc, #300]	; (800c81c <tcp_input+0x28c>)
 800c6ee:	6814      	ldr	r4, [r2, #0]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fc fdcf 	bl	8009294 <lwip_htons>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c6fa:	4b48      	ldr	r3, [pc, #288]	; (800c81c <tcp_input+0x28c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	885b      	ldrh	r3, [r3, #2]
 800c700:	b29b      	uxth	r3, r3
 800c702:	4a46      	ldr	r2, [pc, #280]	; (800c81c <tcp_input+0x28c>)
 800c704:	6814      	ldr	r4, [r2, #0]
 800c706:	4618      	mov	r0, r3
 800c708:	f7fc fdc4 	bl	8009294 <lwip_htons>
 800c70c:	4603      	mov	r3, r0
 800c70e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c710:	4b42      	ldr	r3, [pc, #264]	; (800c81c <tcp_input+0x28c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	4a41      	ldr	r2, [pc, #260]	; (800c81c <tcp_input+0x28c>)
 800c718:	6814      	ldr	r4, [r2, #0]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fc fdcf 	bl	80092be <lwip_htonl>
 800c720:	4603      	mov	r3, r0
 800c722:	6063      	str	r3, [r4, #4]
 800c724:	6863      	ldr	r3, [r4, #4]
 800c726:	4a45      	ldr	r2, [pc, #276]	; (800c83c <tcp_input+0x2ac>)
 800c728:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c72a:	4b3c      	ldr	r3, [pc, #240]	; (800c81c <tcp_input+0x28c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	4a3a      	ldr	r2, [pc, #232]	; (800c81c <tcp_input+0x28c>)
 800c732:	6814      	ldr	r4, [r2, #0]
 800c734:	4618      	mov	r0, r3
 800c736:	f7fc fdc2 	bl	80092be <lwip_htonl>
 800c73a:	4603      	mov	r3, r0
 800c73c:	60a3      	str	r3, [r4, #8]
 800c73e:	68a3      	ldr	r3, [r4, #8]
 800c740:	4a3f      	ldr	r2, [pc, #252]	; (800c840 <tcp_input+0x2b0>)
 800c742:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c744:	4b35      	ldr	r3, [pc, #212]	; (800c81c <tcp_input+0x28c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	89db      	ldrh	r3, [r3, #14]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4a33      	ldr	r2, [pc, #204]	; (800c81c <tcp_input+0x28c>)
 800c74e:	6814      	ldr	r4, [r2, #0]
 800c750:	4618      	mov	r0, r3
 800c752:	f7fc fd9f 	bl	8009294 <lwip_htons>
 800c756:	4603      	mov	r3, r0
 800c758:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c75a:	4b30      	ldr	r3, [pc, #192]	; (800c81c <tcp_input+0x28c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	899b      	ldrh	r3, [r3, #12]
 800c760:	b29b      	uxth	r3, r3
 800c762:	4618      	mov	r0, r3
 800c764:	f7fc fd96 	bl	8009294 <lwip_htons>
 800c768:	4603      	mov	r3, r0
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c770:	b2da      	uxtb	r2, r3
 800c772:	4b34      	ldr	r3, [pc, #208]	; (800c844 <tcp_input+0x2b4>)
 800c774:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	891a      	ldrh	r2, [r3, #8]
 800c77a:	4b33      	ldr	r3, [pc, #204]	; (800c848 <tcp_input+0x2b8>)
 800c77c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c77e:	4b31      	ldr	r3, [pc, #196]	; (800c844 <tcp_input+0x2b4>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	f003 0303 	and.w	r3, r3, #3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00c      	beq.n	800c7a4 <tcp_input+0x214>
    tcplen++;
 800c78a:	4b2f      	ldr	r3, [pc, #188]	; (800c848 <tcp_input+0x2b8>)
 800c78c:	881b      	ldrh	r3, [r3, #0]
 800c78e:	3301      	adds	r3, #1
 800c790:	b29a      	uxth	r2, r3
 800c792:	4b2d      	ldr	r3, [pc, #180]	; (800c848 <tcp_input+0x2b8>)
 800c794:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	891a      	ldrh	r2, [r3, #8]
 800c79a:	4b2b      	ldr	r3, [pc, #172]	; (800c848 <tcp_input+0x2b8>)
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	f200 82e6 	bhi.w	800cd70 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7a8:	4b28      	ldr	r3, [pc, #160]	; (800c84c <tcp_input+0x2bc>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	e09d      	b.n	800c8ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	7d1b      	ldrb	r3, [r3, #20]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d105      	bne.n	800c7c4 <tcp_input+0x234>
 800c7b8:	4b15      	ldr	r3, [pc, #84]	; (800c810 <tcp_input+0x280>)
 800c7ba:	22fb      	movs	r2, #251	; 0xfb
 800c7bc:	4924      	ldr	r1, [pc, #144]	; (800c850 <tcp_input+0x2c0>)
 800c7be:	4816      	ldr	r0, [pc, #88]	; (800c818 <tcp_input+0x288>)
 800c7c0:	f006 fe90 	bl	80134e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	7d1b      	ldrb	r3, [r3, #20]
 800c7c8:	2b0a      	cmp	r3, #10
 800c7ca:	d105      	bne.n	800c7d8 <tcp_input+0x248>
 800c7cc:	4b10      	ldr	r3, [pc, #64]	; (800c810 <tcp_input+0x280>)
 800c7ce:	22fc      	movs	r2, #252	; 0xfc
 800c7d0:	4920      	ldr	r1, [pc, #128]	; (800c854 <tcp_input+0x2c4>)
 800c7d2:	4811      	ldr	r0, [pc, #68]	; (800c818 <tcp_input+0x288>)
 800c7d4:	f006 fe86 	bl	80134e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	7d1b      	ldrb	r3, [r3, #20]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d105      	bne.n	800c7ec <tcp_input+0x25c>
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	; (800c810 <tcp_input+0x280>)
 800c7e2:	22fd      	movs	r2, #253	; 0xfd
 800c7e4:	491c      	ldr	r1, [pc, #112]	; (800c858 <tcp_input+0x2c8>)
 800c7e6:	480c      	ldr	r0, [pc, #48]	; (800c818 <tcp_input+0x288>)
 800c7e8:	f006 fe7c 	bl	80134e4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	7a1b      	ldrb	r3, [r3, #8]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d033      	beq.n	800c85c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	7a1a      	ldrb	r2, [r3, #8]
 800c7f8:	4b09      	ldr	r3, [pc, #36]	; (800c820 <tcp_input+0x290>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c800:	3301      	adds	r3, #1
 800c802:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c804:	429a      	cmp	r2, r3
 800c806:	d029      	beq.n	800c85c <tcp_input+0x2cc>
      prev = pcb;
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	61bb      	str	r3, [r7, #24]
      continue;
 800c80c:	e06b      	b.n	800c8e6 <tcp_input+0x356>
 800c80e:	bf00      	nop
 800c810:	08015b64 	.word	0x08015b64
 800c814:	08015b98 	.word	0x08015b98
 800c818:	08015bb0 	.word	0x08015bb0
 800c81c:	20008ed8 	.word	0x20008ed8
 800c820:	20003780 	.word	0x20003780
 800c824:	20008edc 	.word	0x20008edc
 800c828:	20008ee0 	.word	0x20008ee0
 800c82c:	20008ede 	.word	0x20008ede
 800c830:	08015bd8 	.word	0x08015bd8
 800c834:	08015be8 	.word	0x08015be8
 800c838:	08015bf4 	.word	0x08015bf4
 800c83c:	20008ee8 	.word	0x20008ee8
 800c840:	20008eec 	.word	0x20008eec
 800c844:	20008ef4 	.word	0x20008ef4
 800c848:	20008ef2 	.word	0x20008ef2
 800c84c:	20008ebc 	.word	0x20008ebc
 800c850:	08015c14 	.word	0x08015c14
 800c854:	08015c3c 	.word	0x08015c3c
 800c858:	08015c68 	.word	0x08015c68
    }

    if (pcb->remote_port == tcphdr->src &&
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	8b1a      	ldrh	r2, [r3, #24]
 800c860:	4b72      	ldr	r3, [pc, #456]	; (800ca2c <tcp_input+0x49c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	b29b      	uxth	r3, r3
 800c868:	429a      	cmp	r2, r3
 800c86a:	d13a      	bne.n	800c8e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	8ada      	ldrh	r2, [r3, #22]
 800c870:	4b6e      	ldr	r3, [pc, #440]	; (800ca2c <tcp_input+0x49c>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	885b      	ldrh	r3, [r3, #2]
 800c876:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c878:	429a      	cmp	r2, r3
 800c87a:	d132      	bne.n	800c8e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	4b6b      	ldr	r3, [pc, #428]	; (800ca30 <tcp_input+0x4a0>)
 800c882:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c884:	429a      	cmp	r2, r3
 800c886:	d12c      	bne.n	800c8e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	4b68      	ldr	r3, [pc, #416]	; (800ca30 <tcp_input+0x4a0>)
 800c88e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c890:	429a      	cmp	r2, r3
 800c892:	d126      	bne.n	800c8e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	69fa      	ldr	r2, [r7, #28]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d106      	bne.n	800c8ac <tcp_input+0x31c>
 800c89e:	4b65      	ldr	r3, [pc, #404]	; (800ca34 <tcp_input+0x4a4>)
 800c8a0:	f240 120d 	movw	r2, #269	; 0x10d
 800c8a4:	4964      	ldr	r1, [pc, #400]	; (800ca38 <tcp_input+0x4a8>)
 800c8a6:	4865      	ldr	r0, [pc, #404]	; (800ca3c <tcp_input+0x4ac>)
 800c8a8:	f006 fe1c 	bl	80134e4 <iprintf>
      if (prev != NULL) {
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <tcp_input+0x338>
        prev->next = pcb->next;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c8ba:	4b61      	ldr	r3, [pc, #388]	; (800ca40 <tcp_input+0x4b0>)
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c8c2:	4a5f      	ldr	r2, [pc, #380]	; (800ca40 <tcp_input+0x4b0>)
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	69fa      	ldr	r2, [r7, #28]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d111      	bne.n	800c8f6 <tcp_input+0x366>
 800c8d2:	4b58      	ldr	r3, [pc, #352]	; (800ca34 <tcp_input+0x4a4>)
 800c8d4:	f240 1215 	movw	r2, #277	; 0x115
 800c8d8:	495a      	ldr	r1, [pc, #360]	; (800ca44 <tcp_input+0x4b4>)
 800c8da:	4858      	ldr	r0, [pc, #352]	; (800ca3c <tcp_input+0x4ac>)
 800c8dc:	f006 fe02 	bl	80134e4 <iprintf>
      break;
 800c8e0:	e009      	b.n	800c8f6 <tcp_input+0x366>
    }
    prev = pcb;
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	61fb      	str	r3, [r7, #28]
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f47f af5e 	bne.w	800c7b0 <tcp_input+0x220>
 800c8f4:	e000      	b.n	800c8f8 <tcp_input+0x368>
      break;
 800c8f6:	bf00      	nop
  }

  if (pcb == NULL) {
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f040 80aa 	bne.w	800ca54 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c900:	4b51      	ldr	r3, [pc, #324]	; (800ca48 <tcp_input+0x4b8>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	61fb      	str	r3, [r7, #28]
 800c906:	e03f      	b.n	800c988 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	7d1b      	ldrb	r3, [r3, #20]
 800c90c:	2b0a      	cmp	r3, #10
 800c90e:	d006      	beq.n	800c91e <tcp_input+0x38e>
 800c910:	4b48      	ldr	r3, [pc, #288]	; (800ca34 <tcp_input+0x4a4>)
 800c912:	f240 121f 	movw	r2, #287	; 0x11f
 800c916:	494d      	ldr	r1, [pc, #308]	; (800ca4c <tcp_input+0x4bc>)
 800c918:	4848      	ldr	r0, [pc, #288]	; (800ca3c <tcp_input+0x4ac>)
 800c91a:	f006 fde3 	bl	80134e4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	7a1b      	ldrb	r3, [r3, #8]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d009      	beq.n	800c93a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	7a1a      	ldrb	r2, [r3, #8]
 800c92a:	4b41      	ldr	r3, [pc, #260]	; (800ca30 <tcp_input+0x4a0>)
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c932:	3301      	adds	r3, #1
 800c934:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c936:	429a      	cmp	r2, r3
 800c938:	d122      	bne.n	800c980 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	8b1a      	ldrh	r2, [r3, #24]
 800c93e:	4b3b      	ldr	r3, [pc, #236]	; (800ca2c <tcp_input+0x49c>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	b29b      	uxth	r3, r3
 800c946:	429a      	cmp	r2, r3
 800c948:	d11b      	bne.n	800c982 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	8ada      	ldrh	r2, [r3, #22]
 800c94e:	4b37      	ldr	r3, [pc, #220]	; (800ca2c <tcp_input+0x49c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	885b      	ldrh	r3, [r3, #2]
 800c954:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c956:	429a      	cmp	r2, r3
 800c958:	d113      	bne.n	800c982 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	4b34      	ldr	r3, [pc, #208]	; (800ca30 <tcp_input+0x4a0>)
 800c960:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c962:	429a      	cmp	r2, r3
 800c964:	d10d      	bne.n	800c982 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b31      	ldr	r3, [pc, #196]	; (800ca30 <tcp_input+0x4a0>)
 800c96c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c96e:	429a      	cmp	r2, r3
 800c970:	d107      	bne.n	800c982 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c972:	69f8      	ldr	r0, [r7, #28]
 800c974:	f000 fb56 	bl	800d024 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7fd ff3f 	bl	800a7fc <pbuf_free>
        return;
 800c97e:	e1fd      	b.n	800cd7c <tcp_input+0x7ec>
        continue;
 800c980:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	61fb      	str	r3, [r7, #28]
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1bc      	bne.n	800c908 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c992:	4b2f      	ldr	r3, [pc, #188]	; (800ca50 <tcp_input+0x4c0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	617b      	str	r3, [r7, #20]
 800c998:	e02a      	b.n	800c9f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	7a1b      	ldrb	r3, [r3, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00c      	beq.n	800c9bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	7a1a      	ldrb	r2, [r3, #8]
 800c9a6:	4b22      	ldr	r3, [pc, #136]	; (800ca30 <tcp_input+0x4a0>)
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d002      	beq.n	800c9bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	61bb      	str	r3, [r7, #24]
        continue;
 800c9ba:	e016      	b.n	800c9ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	8ada      	ldrh	r2, [r3, #22]
 800c9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ca2c <tcp_input+0x49c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	885b      	ldrh	r3, [r3, #2]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d10c      	bne.n	800c9e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	4b17      	ldr	r3, [pc, #92]	; (800ca30 <tcp_input+0x4a0>)
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d00f      	beq.n	800c9f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00d      	beq.n	800c9fa <tcp_input+0x46a>
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d009      	beq.n	800c9fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	617b      	str	r3, [r7, #20]
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1d1      	bne.n	800c99a <tcp_input+0x40a>
 800c9f6:	e000      	b.n	800c9fa <tcp_input+0x46a>
            break;
 800c9f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d029      	beq.n	800ca54 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00a      	beq.n	800ca1c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	68da      	ldr	r2, [r3, #12]
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ca0e:	4b10      	ldr	r3, [pc, #64]	; (800ca50 <tcp_input+0x4c0>)
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ca16:	4a0e      	ldr	r2, [pc, #56]	; (800ca50 <tcp_input+0x4c0>)
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ca1c:	6978      	ldr	r0, [r7, #20]
 800ca1e:	f000 fa03 	bl	800ce28 <tcp_listen_input>
      }
      pbuf_free(p);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7fd feea 	bl	800a7fc <pbuf_free>
      return;
 800ca28:	e1a8      	b.n	800cd7c <tcp_input+0x7ec>
 800ca2a:	bf00      	nop
 800ca2c:	20008ed8 	.word	0x20008ed8
 800ca30:	20003780 	.word	0x20003780
 800ca34:	08015b64 	.word	0x08015b64
 800ca38:	08015c90 	.word	0x08015c90
 800ca3c:	08015bb0 	.word	0x08015bb0
 800ca40:	20008ebc 	.word	0x20008ebc
 800ca44:	08015cbc 	.word	0x08015cbc
 800ca48:	20008ec0 	.word	0x20008ec0
 800ca4c:	08015ce8 	.word	0x08015ce8
 800ca50:	20008eb8 	.word	0x20008eb8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 8158 	beq.w	800cd0c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ca5c:	4b95      	ldr	r3, [pc, #596]	; (800ccb4 <tcp_input+0x724>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	891a      	ldrh	r2, [r3, #8]
 800ca66:	4b93      	ldr	r3, [pc, #588]	; (800ccb4 <tcp_input+0x724>)
 800ca68:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ca6a:	4a92      	ldr	r2, [pc, #584]	; (800ccb4 <tcp_input+0x724>)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ca70:	4b91      	ldr	r3, [pc, #580]	; (800ccb8 <tcp_input+0x728>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a8f      	ldr	r2, [pc, #572]	; (800ccb4 <tcp_input+0x724>)
 800ca76:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ca78:	4b90      	ldr	r3, [pc, #576]	; (800ccbc <tcp_input+0x72c>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ca7e:	4b90      	ldr	r3, [pc, #576]	; (800ccc0 <tcp_input+0x730>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ca84:	4b8f      	ldr	r3, [pc, #572]	; (800ccc4 <tcp_input+0x734>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ca8a:	4b8f      	ldr	r3, [pc, #572]	; (800ccc8 <tcp_input+0x738>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	f003 0308 	and.w	r3, r3, #8
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d006      	beq.n	800caa4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	7b5b      	ldrb	r3, [r3, #13]
 800ca9a:	f043 0301 	orr.w	r3, r3, #1
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d017      	beq.n	800cadc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800caac:	69f8      	ldr	r0, [r7, #28]
 800caae:	f7ff f929 	bl	800bd04 <tcp_process_refused_data>
 800cab2:	4603      	mov	r3, r0
 800cab4:	f113 0f0d 	cmn.w	r3, #13
 800cab8:	d007      	beq.n	800caca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00c      	beq.n	800cadc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cac2:	4b82      	ldr	r3, [pc, #520]	; (800cccc <tcp_input+0x73c>)
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d008      	beq.n	800cadc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f040 80e3 	bne.w	800cc9a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cad4:	69f8      	ldr	r0, [r7, #28]
 800cad6:	f003 f9ad 	bl	800fe34 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cada:	e0de      	b.n	800cc9a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800cadc:	4a7c      	ldr	r2, [pc, #496]	; (800ccd0 <tcp_input+0x740>)
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cae2:	69f8      	ldr	r0, [r7, #28]
 800cae4:	f000 fb18 	bl	800d118 <tcp_process>
 800cae8:	4603      	mov	r3, r0
 800caea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800caec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800caf0:	f113 0f0d 	cmn.w	r3, #13
 800caf4:	f000 80d3 	beq.w	800cc9e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800caf8:	4b71      	ldr	r3, [pc, #452]	; (800ccc0 <tcp_input+0x730>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	f003 0308 	and.w	r3, r3, #8
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d015      	beq.n	800cb30 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d008      	beq.n	800cb20 <tcp_input+0x590>
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb14:	69fa      	ldr	r2, [r7, #28]
 800cb16:	6912      	ldr	r2, [r2, #16]
 800cb18:	f06f 010d 	mvn.w	r1, #13
 800cb1c:	4610      	mov	r0, r2
 800cb1e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cb20:	69f9      	ldr	r1, [r7, #28]
 800cb22:	486c      	ldr	r0, [pc, #432]	; (800ccd4 <tcp_input+0x744>)
 800cb24:	f7ff fbbc 	bl	800c2a0 <tcp_pcb_remove>
        tcp_free(pcb);
 800cb28:	69f8      	ldr	r0, [r7, #28]
 800cb2a:	f7fe f9a9 	bl	800ae80 <tcp_free>
 800cb2e:	e0da      	b.n	800cce6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cb34:	4b63      	ldr	r3, [pc, #396]	; (800ccc4 <tcp_input+0x734>)
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d01d      	beq.n	800cb78 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cb3c:	4b61      	ldr	r3, [pc, #388]	; (800ccc4 <tcp_input+0x734>)
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00a      	beq.n	800cb62 <tcp_input+0x5d2>
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb52:	69fa      	ldr	r2, [r7, #28]
 800cb54:	6910      	ldr	r0, [r2, #16]
 800cb56:	89fa      	ldrh	r2, [r7, #14]
 800cb58:	69f9      	ldr	r1, [r7, #28]
 800cb5a:	4798      	blx	r3
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	74fb      	strb	r3, [r7, #19]
 800cb60:	e001      	b.n	800cb66 <tcp_input+0x5d6>
 800cb62:	2300      	movs	r3, #0
 800cb64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cb66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb6a:	f113 0f0d 	cmn.w	r3, #13
 800cb6e:	f000 8098 	beq.w	800cca2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cb72:	4b54      	ldr	r3, [pc, #336]	; (800ccc4 <tcp_input+0x734>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cb78:	69f8      	ldr	r0, [r7, #28]
 800cb7a:	f000 f915 	bl	800cda8 <tcp_input_delayed_close>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f040 8090 	bne.w	800cca6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cb86:	4b4d      	ldr	r3, [pc, #308]	; (800ccbc <tcp_input+0x72c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d041      	beq.n	800cc12 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d006      	beq.n	800cba4 <tcp_input+0x614>
 800cb96:	4b50      	ldr	r3, [pc, #320]	; (800ccd8 <tcp_input+0x748>)
 800cb98:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cb9c:	494f      	ldr	r1, [pc, #316]	; (800ccdc <tcp_input+0x74c>)
 800cb9e:	4850      	ldr	r0, [pc, #320]	; (800cce0 <tcp_input+0x750>)
 800cba0:	f006 fca0 	bl	80134e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	8b5b      	ldrh	r3, [r3, #26]
 800cba8:	f003 0310 	and.w	r3, r3, #16
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d008      	beq.n	800cbc2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cbb0:	4b42      	ldr	r3, [pc, #264]	; (800ccbc <tcp_input+0x72c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fd fe21 	bl	800a7fc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cbba:	69f8      	ldr	r0, [r7, #28]
 800cbbc:	f7fe fc48 	bl	800b450 <tcp_abort>
            goto aborted;
 800cbc0:	e091      	b.n	800cce6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00c      	beq.n	800cbe6 <tcp_input+0x656>
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	6918      	ldr	r0, [r3, #16]
 800cbd6:	4b39      	ldr	r3, [pc, #228]	; (800ccbc <tcp_input+0x72c>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	69f9      	ldr	r1, [r7, #28]
 800cbde:	47a0      	blx	r4
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	74fb      	strb	r3, [r7, #19]
 800cbe4:	e008      	b.n	800cbf8 <tcp_input+0x668>
 800cbe6:	4b35      	ldr	r3, [pc, #212]	; (800ccbc <tcp_input+0x72c>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	2300      	movs	r3, #0
 800cbec:	69f9      	ldr	r1, [r7, #28]
 800cbee:	2000      	movs	r0, #0
 800cbf0:	f7ff f95e 	bl	800beb0 <tcp_recv_null>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cbf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbfc:	f113 0f0d 	cmn.w	r3, #13
 800cc00:	d053      	beq.n	800ccaa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cc02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d003      	beq.n	800cc12 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cc0a:	4b2c      	ldr	r3, [pc, #176]	; (800ccbc <tcp_input+0x72c>)
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cc12:	4b2b      	ldr	r3, [pc, #172]	; (800ccc0 <tcp_input+0x730>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	f003 0320 	and.w	r3, r3, #32
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d030      	beq.n	800cc80 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d009      	beq.n	800cc3a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc2a:	7b5a      	ldrb	r2, [r3, #13]
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc30:	f042 0220 	orr.w	r2, r2, #32
 800cc34:	b2d2      	uxtb	r2, r2
 800cc36:	735a      	strb	r2, [r3, #13]
 800cc38:	e022      	b.n	800cc80 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc3e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cc42:	d005      	beq.n	800cc50 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc48:	3301      	adds	r3, #1
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00b      	beq.n	800cc72 <tcp_input+0x6e2>
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	6918      	ldr	r0, [r3, #16]
 800cc64:	2300      	movs	r3, #0
 800cc66:	2200      	movs	r2, #0
 800cc68:	69f9      	ldr	r1, [r7, #28]
 800cc6a:	47a0      	blx	r4
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	74fb      	strb	r3, [r7, #19]
 800cc70:	e001      	b.n	800cc76 <tcp_input+0x6e6>
 800cc72:	2300      	movs	r3, #0
 800cc74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cc76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc7a:	f113 0f0d 	cmn.w	r3, #13
 800cc7e:	d016      	beq.n	800ccae <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cc80:	4b13      	ldr	r3, [pc, #76]	; (800ccd0 <tcp_input+0x740>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cc86:	69f8      	ldr	r0, [r7, #28]
 800cc88:	f000 f88e 	bl	800cda8 <tcp_input_delayed_close>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d128      	bne.n	800cce4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cc92:	69f8      	ldr	r0, [r7, #28]
 800cc94:	f002 fac8 	bl	800f228 <tcp_output>
 800cc98:	e025      	b.n	800cce6 <tcp_input+0x756>
        goto aborted;
 800cc9a:	bf00      	nop
 800cc9c:	e023      	b.n	800cce6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cc9e:	bf00      	nop
 800cca0:	e021      	b.n	800cce6 <tcp_input+0x756>
              goto aborted;
 800cca2:	bf00      	nop
 800cca4:	e01f      	b.n	800cce6 <tcp_input+0x756>
          goto aborted;
 800cca6:	bf00      	nop
 800cca8:	e01d      	b.n	800cce6 <tcp_input+0x756>
            goto aborted;
 800ccaa:	bf00      	nop
 800ccac:	e01b      	b.n	800cce6 <tcp_input+0x756>
              goto aborted;
 800ccae:	bf00      	nop
 800ccb0:	e019      	b.n	800cce6 <tcp_input+0x756>
 800ccb2:	bf00      	nop
 800ccb4:	20008ec8 	.word	0x20008ec8
 800ccb8:	20008ed8 	.word	0x20008ed8
 800ccbc:	20008ef8 	.word	0x20008ef8
 800ccc0:	20008ef5 	.word	0x20008ef5
 800ccc4:	20008ef0 	.word	0x20008ef0
 800ccc8:	20008ef4 	.word	0x20008ef4
 800cccc:	20008ef2 	.word	0x20008ef2
 800ccd0:	20008efc 	.word	0x20008efc
 800ccd4:	20008ebc 	.word	0x20008ebc
 800ccd8:	08015b64 	.word	0x08015b64
 800ccdc:	08015d18 	.word	0x08015d18
 800cce0:	08015bb0 	.word	0x08015bb0
          goto aborted;
 800cce4:	bf00      	nop
    tcp_input_pcb = NULL;
 800cce6:	4b27      	ldr	r3, [pc, #156]	; (800cd84 <tcp_input+0x7f4>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ccec:	4b26      	ldr	r3, [pc, #152]	; (800cd88 <tcp_input+0x7f8>)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ccf2:	4b26      	ldr	r3, [pc, #152]	; (800cd8c <tcp_input+0x7fc>)
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d03f      	beq.n	800cd7a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ccfa:	4b24      	ldr	r3, [pc, #144]	; (800cd8c <tcp_input+0x7fc>)
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fd fd7c 	bl	800a7fc <pbuf_free>
      inseg.p = NULL;
 800cd04:	4b21      	ldr	r3, [pc, #132]	; (800cd8c <tcp_input+0x7fc>)
 800cd06:	2200      	movs	r2, #0
 800cd08:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cd0a:	e036      	b.n	800cd7a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cd0c:	4b20      	ldr	r3, [pc, #128]	; (800cd90 <tcp_input+0x800>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	899b      	ldrh	r3, [r3, #12]
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fc fabd 	bl	8009294 <lwip_htons>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	f003 0304 	and.w	r3, r3, #4
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d118      	bne.n	800cd58 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd26:	4b1b      	ldr	r3, [pc, #108]	; (800cd94 <tcp_input+0x804>)
 800cd28:	6819      	ldr	r1, [r3, #0]
 800cd2a:	4b1b      	ldr	r3, [pc, #108]	; (800cd98 <tcp_input+0x808>)
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	4b1a      	ldr	r3, [pc, #104]	; (800cd9c <tcp_input+0x80c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd36:	4b16      	ldr	r3, [pc, #88]	; (800cd90 <tcp_input+0x800>)
 800cd38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd3a:	885b      	ldrh	r3, [r3, #2]
 800cd3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd3e:	4a14      	ldr	r2, [pc, #80]	; (800cd90 <tcp_input+0x800>)
 800cd40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd42:	8812      	ldrh	r2, [r2, #0]
 800cd44:	b292      	uxth	r2, r2
 800cd46:	9202      	str	r2, [sp, #8]
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	4b15      	ldr	r3, [pc, #84]	; (800cda0 <tcp_input+0x810>)
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	4b15      	ldr	r3, [pc, #84]	; (800cda4 <tcp_input+0x814>)
 800cd50:	4602      	mov	r2, r0
 800cd52:	2000      	movs	r0, #0
 800cd54:	f003 f81c 	bl	800fd90 <tcp_rst>
    pbuf_free(p);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7fd fd4f 	bl	800a7fc <pbuf_free>
  return;
 800cd5e:	e00c      	b.n	800cd7a <tcp_input+0x7ea>
    goto dropped;
 800cd60:	bf00      	nop
 800cd62:	e006      	b.n	800cd72 <tcp_input+0x7e2>
    goto dropped;
 800cd64:	bf00      	nop
 800cd66:	e004      	b.n	800cd72 <tcp_input+0x7e2>
    goto dropped;
 800cd68:	bf00      	nop
 800cd6a:	e002      	b.n	800cd72 <tcp_input+0x7e2>
      goto dropped;
 800cd6c:	bf00      	nop
 800cd6e:	e000      	b.n	800cd72 <tcp_input+0x7e2>
      goto dropped;
 800cd70:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7fd fd42 	bl	800a7fc <pbuf_free>
 800cd78:	e000      	b.n	800cd7c <tcp_input+0x7ec>
  return;
 800cd7a:	bf00      	nop
}
 800cd7c:	3724      	adds	r7, #36	; 0x24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd90      	pop	{r4, r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20008efc 	.word	0x20008efc
 800cd88:	20008ef8 	.word	0x20008ef8
 800cd8c:	20008ec8 	.word	0x20008ec8
 800cd90:	20008ed8 	.word	0x20008ed8
 800cd94:	20008eec 	.word	0x20008eec
 800cd98:	20008ef2 	.word	0x20008ef2
 800cd9c:	20008ee8 	.word	0x20008ee8
 800cda0:	20003790 	.word	0x20003790
 800cda4:	20003794 	.word	0x20003794

0800cda8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d106      	bne.n	800cdc4 <tcp_input_delayed_close+0x1c>
 800cdb6:	4b17      	ldr	r3, [pc, #92]	; (800ce14 <tcp_input_delayed_close+0x6c>)
 800cdb8:	f240 225a 	movw	r2, #602	; 0x25a
 800cdbc:	4916      	ldr	r1, [pc, #88]	; (800ce18 <tcp_input_delayed_close+0x70>)
 800cdbe:	4817      	ldr	r0, [pc, #92]	; (800ce1c <tcp_input_delayed_close+0x74>)
 800cdc0:	f006 fb90 	bl	80134e4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cdc4:	4b16      	ldr	r3, [pc, #88]	; (800ce20 <tcp_input_delayed_close+0x78>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	f003 0310 	and.w	r3, r3, #16
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01c      	beq.n	800ce0a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	8b5b      	ldrh	r3, [r3, #26]
 800cdd4:	f003 0310 	and.w	r3, r3, #16
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10d      	bne.n	800cdf8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d008      	beq.n	800cdf8 <tcp_input_delayed_close+0x50>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	6912      	ldr	r2, [r2, #16]
 800cdf0:	f06f 010e 	mvn.w	r1, #14
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cdf8:	6879      	ldr	r1, [r7, #4]
 800cdfa:	480a      	ldr	r0, [pc, #40]	; (800ce24 <tcp_input_delayed_close+0x7c>)
 800cdfc:	f7ff fa50 	bl	800c2a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7fe f83d 	bl	800ae80 <tcp_free>
    return 1;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e000      	b.n	800ce0c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	08015b64 	.word	0x08015b64
 800ce18:	08015d34 	.word	0x08015d34
 800ce1c:	08015bb0 	.word	0x08015bb0
 800ce20:	20008ef5 	.word	0x20008ef5
 800ce24:	20008ebc 	.word	0x20008ebc

0800ce28 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ce28:	b590      	push	{r4, r7, lr}
 800ce2a:	b08b      	sub	sp, #44	; 0x2c
 800ce2c:	af04      	add	r7, sp, #16
 800ce2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ce30:	4b6f      	ldr	r3, [pc, #444]	; (800cff0 <tcp_listen_input+0x1c8>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	f003 0304 	and.w	r3, r3, #4
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f040 80d2 	bne.w	800cfe2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d106      	bne.n	800ce52 <tcp_listen_input+0x2a>
 800ce44:	4b6b      	ldr	r3, [pc, #428]	; (800cff4 <tcp_listen_input+0x1cc>)
 800ce46:	f240 2281 	movw	r2, #641	; 0x281
 800ce4a:	496b      	ldr	r1, [pc, #428]	; (800cff8 <tcp_listen_input+0x1d0>)
 800ce4c:	486b      	ldr	r0, [pc, #428]	; (800cffc <tcp_listen_input+0x1d4>)
 800ce4e:	f006 fb49 	bl	80134e4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ce52:	4b67      	ldr	r3, [pc, #412]	; (800cff0 <tcp_listen_input+0x1c8>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	f003 0310 	and.w	r3, r3, #16
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d019      	beq.n	800ce92 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce5e:	4b68      	ldr	r3, [pc, #416]	; (800d000 <tcp_listen_input+0x1d8>)
 800ce60:	6819      	ldr	r1, [r3, #0]
 800ce62:	4b68      	ldr	r3, [pc, #416]	; (800d004 <tcp_listen_input+0x1dc>)
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	461a      	mov	r2, r3
 800ce68:	4b67      	ldr	r3, [pc, #412]	; (800d008 <tcp_listen_input+0x1e0>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce6e:	4b67      	ldr	r3, [pc, #412]	; (800d00c <tcp_listen_input+0x1e4>)
 800ce70:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce72:	885b      	ldrh	r3, [r3, #2]
 800ce74:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce76:	4a65      	ldr	r2, [pc, #404]	; (800d00c <tcp_listen_input+0x1e4>)
 800ce78:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce7a:	8812      	ldrh	r2, [r2, #0]
 800ce7c:	b292      	uxth	r2, r2
 800ce7e:	9202      	str	r2, [sp, #8]
 800ce80:	9301      	str	r3, [sp, #4]
 800ce82:	4b63      	ldr	r3, [pc, #396]	; (800d010 <tcp_listen_input+0x1e8>)
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	4b63      	ldr	r3, [pc, #396]	; (800d014 <tcp_listen_input+0x1ec>)
 800ce88:	4602      	mov	r2, r0
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f002 ff80 	bl	800fd90 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ce90:	e0a9      	b.n	800cfe6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ce92:	4b57      	ldr	r3, [pc, #348]	; (800cff0 <tcp_listen_input+0x1c8>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	f003 0302 	and.w	r3, r3, #2
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 80a3 	beq.w	800cfe6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	7d5b      	ldrb	r3, [r3, #21]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7ff f927 	bl	800c0f8 <tcp_alloc>
 800ceaa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d111      	bne.n	800ced6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	699b      	ldr	r3, [r3, #24]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00a      	beq.n	800ced0 <tcp_listen_input+0xa8>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	6910      	ldr	r0, [r2, #16]
 800cec2:	f04f 32ff 	mov.w	r2, #4294967295
 800cec6:	2100      	movs	r1, #0
 800cec8:	4798      	blx	r3
 800ceca:	4603      	mov	r3, r0
 800cecc:	73bb      	strb	r3, [r7, #14]
      return;
 800cece:	e08b      	b.n	800cfe8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ced0:	23f0      	movs	r3, #240	; 0xf0
 800ced2:	73bb      	strb	r3, [r7, #14]
      return;
 800ced4:	e088      	b.n	800cfe8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ced6:	4b50      	ldr	r3, [pc, #320]	; (800d018 <tcp_listen_input+0x1f0>)
 800ced8:	695a      	ldr	r2, [r3, #20]
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cede:	4b4e      	ldr	r3, [pc, #312]	; (800d018 <tcp_listen_input+0x1f0>)
 800cee0:	691a      	ldr	r2, [r3, #16]
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	8ada      	ldrh	r2, [r3, #22]
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ceee:	4b47      	ldr	r3, [pc, #284]	; (800d00c <tcp_listen_input+0x1e4>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	881b      	ldrh	r3, [r3, #0]
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2203      	movs	r2, #3
 800cefe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cf00:	4b41      	ldr	r3, [pc, #260]	; (800d008 <tcp_listen_input+0x1e0>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cf12:	6978      	ldr	r0, [r7, #20]
 800cf14:	f7ff fa58 	bl	800c3c8 <tcp_next_iss>
 800cf18:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	693a      	ldr	r2, [r7, #16]
 800cf1e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	693a      	ldr	r2, [r7, #16]
 800cf2a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cf32:	4b35      	ldr	r3, [pc, #212]	; (800d008 <tcp_listen_input+0x1e0>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	1e5a      	subs	r2, r3, #1
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	691a      	ldr	r2, [r3, #16]
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7a5b      	ldrb	r3, [r3, #9]
 800cf4e:	f003 030c 	and.w	r3, r3, #12
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	7a1a      	ldrb	r2, [r3, #8]
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cf60:	4b2e      	ldr	r3, [pc, #184]	; (800d01c <tcp_listen_input+0x1f4>)
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	60da      	str	r2, [r3, #12]
 800cf68:	4a2c      	ldr	r2, [pc, #176]	; (800d01c <tcp_listen_input+0x1f4>)
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	6013      	str	r3, [r2, #0]
 800cf6e:	f003 f8d1 	bl	8010114 <tcp_timer_needed>
 800cf72:	4b2b      	ldr	r3, [pc, #172]	; (800d020 <tcp_listen_input+0x1f8>)
 800cf74:	2201      	movs	r2, #1
 800cf76:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cf78:	6978      	ldr	r0, [r7, #20]
 800cf7a:	f001 fd8f 	bl	800ea9c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cf7e:	4b23      	ldr	r3, [pc, #140]	; (800d00c <tcp_listen_input+0x1e4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	89db      	ldrh	r3, [r3, #14]
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f005 f84f 	bl	8012044 <ip4_route>
 800cfa6:	4601      	mov	r1, r0
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	3304      	adds	r3, #4
 800cfac:	461a      	mov	r2, r3
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f7ff fa30 	bl	800c414 <tcp_eff_send_mss_netif>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cfbc:	2112      	movs	r1, #18
 800cfbe:	6978      	ldr	r0, [r7, #20]
 800cfc0:	f002 f844 	bl	800f04c <tcp_enqueue_flags>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cfc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d004      	beq.n	800cfda <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	6978      	ldr	r0, [r7, #20]
 800cfd4:	f7fe f97e 	bl	800b2d4 <tcp_abandon>
      return;
 800cfd8:	e006      	b.n	800cfe8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cfda:	6978      	ldr	r0, [r7, #20]
 800cfdc:	f002 f924 	bl	800f228 <tcp_output>
  return;
 800cfe0:	e001      	b.n	800cfe6 <tcp_listen_input+0x1be>
    return;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <tcp_listen_input+0x1c0>
  return;
 800cfe6:	bf00      	nop
}
 800cfe8:	371c      	adds	r7, #28
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd90      	pop	{r4, r7, pc}
 800cfee:	bf00      	nop
 800cff0:	20008ef4 	.word	0x20008ef4
 800cff4:	08015b64 	.word	0x08015b64
 800cff8:	08015d5c 	.word	0x08015d5c
 800cffc:	08015bb0 	.word	0x08015bb0
 800d000:	20008eec 	.word	0x20008eec
 800d004:	20008ef2 	.word	0x20008ef2
 800d008:	20008ee8 	.word	0x20008ee8
 800d00c:	20008ed8 	.word	0x20008ed8
 800d010:	20003790 	.word	0x20003790
 800d014:	20003794 	.word	0x20003794
 800d018:	20003780 	.word	0x20003780
 800d01c:	20008ebc 	.word	0x20008ebc
 800d020:	20008ec4 	.word	0x20008ec4

0800d024 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af04      	add	r7, sp, #16
 800d02a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d02c:	4b2f      	ldr	r3, [pc, #188]	; (800d0ec <tcp_timewait_input+0xc8>)
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	f003 0304 	and.w	r3, r3, #4
 800d034:	2b00      	cmp	r3, #0
 800d036:	d153      	bne.n	800d0e0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <tcp_timewait_input+0x28>
 800d03e:	4b2c      	ldr	r3, [pc, #176]	; (800d0f0 <tcp_timewait_input+0xcc>)
 800d040:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d044:	492b      	ldr	r1, [pc, #172]	; (800d0f4 <tcp_timewait_input+0xd0>)
 800d046:	482c      	ldr	r0, [pc, #176]	; (800d0f8 <tcp_timewait_input+0xd4>)
 800d048:	f006 fa4c 	bl	80134e4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d04c:	4b27      	ldr	r3, [pc, #156]	; (800d0ec <tcp_timewait_input+0xc8>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	f003 0302 	and.w	r3, r3, #2
 800d054:	2b00      	cmp	r3, #0
 800d056:	d02a      	beq.n	800d0ae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d058:	4b28      	ldr	r3, [pc, #160]	; (800d0fc <tcp_timewait_input+0xd8>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	2b00      	cmp	r3, #0
 800d064:	db2d      	blt.n	800d0c2 <tcp_timewait_input+0x9e>
 800d066:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <tcp_timewait_input+0xd8>)
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06e:	6879      	ldr	r1, [r7, #4]
 800d070:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d072:	440b      	add	r3, r1
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	dc23      	bgt.n	800d0c2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d07a:	4b21      	ldr	r3, [pc, #132]	; (800d100 <tcp_timewait_input+0xdc>)
 800d07c:	6819      	ldr	r1, [r3, #0]
 800d07e:	4b21      	ldr	r3, [pc, #132]	; (800d104 <tcp_timewait_input+0xe0>)
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	4b1d      	ldr	r3, [pc, #116]	; (800d0fc <tcp_timewait_input+0xd8>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d08a:	4b1f      	ldr	r3, [pc, #124]	; (800d108 <tcp_timewait_input+0xe4>)
 800d08c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d08e:	885b      	ldrh	r3, [r3, #2]
 800d090:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d092:	4a1d      	ldr	r2, [pc, #116]	; (800d108 <tcp_timewait_input+0xe4>)
 800d094:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d096:	8812      	ldrh	r2, [r2, #0]
 800d098:	b292      	uxth	r2, r2
 800d09a:	9202      	str	r2, [sp, #8]
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	4b1b      	ldr	r3, [pc, #108]	; (800d10c <tcp_timewait_input+0xe8>)
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	4b1b      	ldr	r3, [pc, #108]	; (800d110 <tcp_timewait_input+0xec>)
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f002 fe72 	bl	800fd90 <tcp_rst>
      return;
 800d0ac:	e01b      	b.n	800d0e6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d0ae:	4b0f      	ldr	r3, [pc, #60]	; (800d0ec <tcp_timewait_input+0xc8>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d003      	beq.n	800d0c2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d0ba:	4b16      	ldr	r3, [pc, #88]	; (800d114 <tcp_timewait_input+0xf0>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d0c2:	4b10      	ldr	r3, [pc, #64]	; (800d104 <tcp_timewait_input+0xe0>)
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00c      	beq.n	800d0e4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	8b5b      	ldrh	r3, [r3, #26]
 800d0ce:	f043 0302 	orr.w	r3, r3, #2
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f002 f8a5 	bl	800f228 <tcp_output>
  }
  return;
 800d0de:	e001      	b.n	800d0e4 <tcp_timewait_input+0xc0>
    return;
 800d0e0:	bf00      	nop
 800d0e2:	e000      	b.n	800d0e6 <tcp_timewait_input+0xc2>
  return;
 800d0e4:	bf00      	nop
}
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	20008ef4 	.word	0x20008ef4
 800d0f0:	08015b64 	.word	0x08015b64
 800d0f4:	08015d7c 	.word	0x08015d7c
 800d0f8:	08015bb0 	.word	0x08015bb0
 800d0fc:	20008ee8 	.word	0x20008ee8
 800d100:	20008eec 	.word	0x20008eec
 800d104:	20008ef2 	.word	0x20008ef2
 800d108:	20008ed8 	.word	0x20008ed8
 800d10c:	20003790 	.word	0x20003790
 800d110:	20003794 	.word	0x20003794
 800d114:	20008eb0 	.word	0x20008eb0

0800d118 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d118:	b590      	push	{r4, r7, lr}
 800d11a:	b08d      	sub	sp, #52	; 0x34
 800d11c:	af04      	add	r7, sp, #16
 800d11e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <tcp_process+0x24>
 800d12e:	4b9d      	ldr	r3, [pc, #628]	; (800d3a4 <tcp_process+0x28c>)
 800d130:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d134:	499c      	ldr	r1, [pc, #624]	; (800d3a8 <tcp_process+0x290>)
 800d136:	489d      	ldr	r0, [pc, #628]	; (800d3ac <tcp_process+0x294>)
 800d138:	f006 f9d4 	bl	80134e4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d13c:	4b9c      	ldr	r3, [pc, #624]	; (800d3b0 <tcp_process+0x298>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	f003 0304 	and.w	r3, r3, #4
 800d144:	2b00      	cmp	r3, #0
 800d146:	d04e      	beq.n	800d1e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7d1b      	ldrb	r3, [r3, #20]
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d108      	bne.n	800d162 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d154:	4b97      	ldr	r3, [pc, #604]	; (800d3b4 <tcp_process+0x29c>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d123      	bne.n	800d1a4 <tcp_process+0x8c>
        acceptable = 1;
 800d15c:	2301      	movs	r3, #1
 800d15e:	76fb      	strb	r3, [r7, #27]
 800d160:	e020      	b.n	800d1a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d166:	4b94      	ldr	r3, [pc, #592]	; (800d3b8 <tcp_process+0x2a0>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d102      	bne.n	800d174 <tcp_process+0x5c>
        acceptable = 1;
 800d16e:	2301      	movs	r3, #1
 800d170:	76fb      	strb	r3, [r7, #27]
 800d172:	e017      	b.n	800d1a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d174:	4b90      	ldr	r3, [pc, #576]	; (800d3b8 <tcp_process+0x2a0>)
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17c:	1ad3      	subs	r3, r2, r3
 800d17e:	2b00      	cmp	r3, #0
 800d180:	db10      	blt.n	800d1a4 <tcp_process+0x8c>
 800d182:	4b8d      	ldr	r3, [pc, #564]	; (800d3b8 <tcp_process+0x2a0>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18a:	6879      	ldr	r1, [r7, #4]
 800d18c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d18e:	440b      	add	r3, r1
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	2b00      	cmp	r3, #0
 800d194:	dc06      	bgt.n	800d1a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	8b5b      	ldrh	r3, [r3, #26]
 800d19a:	f043 0302 	orr.w	r3, r3, #2
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d1a4:	7efb      	ldrb	r3, [r7, #27]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d01b      	beq.n	800d1e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	7d1b      	ldrb	r3, [r3, #20]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d106      	bne.n	800d1c0 <tcp_process+0xa8>
 800d1b2:	4b7c      	ldr	r3, [pc, #496]	; (800d3a4 <tcp_process+0x28c>)
 800d1b4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d1b8:	4980      	ldr	r1, [pc, #512]	; (800d3bc <tcp_process+0x2a4>)
 800d1ba:	487c      	ldr	r0, [pc, #496]	; (800d3ac <tcp_process+0x294>)
 800d1bc:	f006 f992 	bl	80134e4 <iprintf>
      recv_flags |= TF_RESET;
 800d1c0:	4b7f      	ldr	r3, [pc, #508]	; (800d3c0 <tcp_process+0x2a8>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	f043 0308 	orr.w	r3, r3, #8
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	4b7d      	ldr	r3, [pc, #500]	; (800d3c0 <tcp_process+0x2a8>)
 800d1cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	8b5b      	ldrh	r3, [r3, #26]
 800d1d2:	f023 0301 	bic.w	r3, r3, #1
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d1dc:	f06f 030d 	mvn.w	r3, #13
 800d1e0:	e37a      	b.n	800d8d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	e378      	b.n	800d8d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d1e6:	4b72      	ldr	r3, [pc, #456]	; (800d3b0 <tcp_process+0x298>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	f003 0302 	and.w	r3, r3, #2
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d010      	beq.n	800d214 <tcp_process+0xfc>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7d1b      	ldrb	r3, [r3, #20]
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	d00c      	beq.n	800d214 <tcp_process+0xfc>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	7d1b      	ldrb	r3, [r3, #20]
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d008      	beq.n	800d214 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	8b5b      	ldrh	r3, [r3, #26]
 800d206:	f043 0302 	orr.w	r3, r3, #2
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	e361      	b.n	800d8d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8b5b      	ldrh	r3, [r3, #26]
 800d218:	f003 0310 	and.w	r3, r3, #16
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d103      	bne.n	800d228 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d220:	4b68      	ldr	r3, [pc, #416]	; (800d3c4 <tcp_process+0x2ac>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f001 fc2f 	bl	800ea9c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	7d1b      	ldrb	r3, [r3, #20]
 800d242:	3b02      	subs	r3, #2
 800d244:	2b07      	cmp	r3, #7
 800d246:	f200 8337 	bhi.w	800d8b8 <tcp_process+0x7a0>
 800d24a:	a201      	add	r2, pc, #4	; (adr r2, 800d250 <tcp_process+0x138>)
 800d24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d250:	0800d271 	.word	0x0800d271
 800d254:	0800d4a1 	.word	0x0800d4a1
 800d258:	0800d619 	.word	0x0800d619
 800d25c:	0800d643 	.word	0x0800d643
 800d260:	0800d767 	.word	0x0800d767
 800d264:	0800d619 	.word	0x0800d619
 800d268:	0800d7f3 	.word	0x0800d7f3
 800d26c:	0800d883 	.word	0x0800d883
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d270:	4b4f      	ldr	r3, [pc, #316]	; (800d3b0 <tcp_process+0x298>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	f003 0310 	and.w	r3, r3, #16
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 80e4 	beq.w	800d446 <tcp_process+0x32e>
 800d27e:	4b4c      	ldr	r3, [pc, #304]	; (800d3b0 <tcp_process+0x298>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	f003 0302 	and.w	r3, r3, #2
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 80dd 	beq.w	800d446 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d290:	1c5a      	adds	r2, r3, #1
 800d292:	4b48      	ldr	r3, [pc, #288]	; (800d3b4 <tcp_process+0x29c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	429a      	cmp	r2, r3
 800d298:	f040 80d5 	bne.w	800d446 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d29c:	4b46      	ldr	r3, [pc, #280]	; (800d3b8 <tcp_process+0x2a0>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d2ae:	4b41      	ldr	r3, [pc, #260]	; (800d3b4 <tcp_process+0x29c>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d2b6:	4b44      	ldr	r3, [pc, #272]	; (800d3c8 <tcp_process+0x2b0>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	89db      	ldrh	r3, [r3, #14]
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d2d0:	4b39      	ldr	r3, [pc, #228]	; (800d3b8 <tcp_process+0x2a0>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	1e5a      	subs	r2, r3, #1
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2204      	movs	r2, #4
 800d2de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f004 feab 	bl	8012044 <ip4_route>
 800d2ee:	4601      	mov	r1, r0
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f7ff f88c 	bl	800c414 <tcp_eff_send_mss_netif>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	461a      	mov	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d308:	009a      	lsls	r2, r3, #2
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d30e:	005b      	lsls	r3, r3, #1
 800d310:	f241 111c 	movw	r1, #4380	; 0x111c
 800d314:	428b      	cmp	r3, r1
 800d316:	bf38      	it	cc
 800d318:	460b      	movcc	r3, r1
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d204      	bcs.n	800d328 <tcp_process+0x210>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	b29b      	uxth	r3, r3
 800d326:	e00d      	b.n	800d344 <tcp_process+0x22c>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d32c:	005b      	lsls	r3, r3, #1
 800d32e:	f241 121c 	movw	r2, #4380	; 0x111c
 800d332:	4293      	cmp	r3, r2
 800d334:	d904      	bls.n	800d340 <tcp_process+0x228>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d33a:	005b      	lsls	r3, r3, #1
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	e001      	b.n	800d344 <tcp_process+0x22c>
 800d340:	f241 131c 	movw	r3, #4380	; 0x111c
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d350:	2b00      	cmp	r3, #0
 800d352:	d106      	bne.n	800d362 <tcp_process+0x24a>
 800d354:	4b13      	ldr	r3, [pc, #76]	; (800d3a4 <tcp_process+0x28c>)
 800d356:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d35a:	491c      	ldr	r1, [pc, #112]	; (800d3cc <tcp_process+0x2b4>)
 800d35c:	4813      	ldr	r0, [pc, #76]	; (800d3ac <tcp_process+0x294>)
 800d35e:	f006 f8c1 	bl	80134e4 <iprintf>
        --pcb->snd_queuelen;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d368:	3b01      	subs	r3, #1
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d376:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d12a      	bne.n	800d3d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d382:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d106      	bne.n	800d398 <tcp_process+0x280>
 800d38a:	4b06      	ldr	r3, [pc, #24]	; (800d3a4 <tcp_process+0x28c>)
 800d38c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d390:	490f      	ldr	r1, [pc, #60]	; (800d3d0 <tcp_process+0x2b8>)
 800d392:	4806      	ldr	r0, [pc, #24]	; (800d3ac <tcp_process+0x294>)
 800d394:	f006 f8a6 	bl	80134e4 <iprintf>
          pcb->unsent = rseg->next;
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	66da      	str	r2, [r3, #108]	; 0x6c
 800d3a0:	e01c      	b.n	800d3dc <tcp_process+0x2c4>
 800d3a2:	bf00      	nop
 800d3a4:	08015b64 	.word	0x08015b64
 800d3a8:	08015d9c 	.word	0x08015d9c
 800d3ac:	08015bb0 	.word	0x08015bb0
 800d3b0:	20008ef4 	.word	0x20008ef4
 800d3b4:	20008eec 	.word	0x20008eec
 800d3b8:	20008ee8 	.word	0x20008ee8
 800d3bc:	08015db8 	.word	0x08015db8
 800d3c0:	20008ef5 	.word	0x20008ef5
 800d3c4:	20008eb0 	.word	0x20008eb0
 800d3c8:	20008ed8 	.word	0x20008ed8
 800d3cc:	08015dd8 	.word	0x08015dd8
 800d3d0:	08015df0 	.word	0x08015df0
        } else {
          pcb->unacked = rseg->next;
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d3dc:	69f8      	ldr	r0, [r7, #28]
 800d3de:	f7fe fd22 	bl	800be26 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d104      	bne.n	800d3f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3f0:	861a      	strh	r2, [r3, #48]	; 0x30
 800d3f2:	e006      	b.n	800d402 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00a      	beq.n	800d422 <tcp_process+0x30a>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	6910      	ldr	r0, [r2, #16]
 800d416:	2200      	movs	r2, #0
 800d418:	6879      	ldr	r1, [r7, #4]
 800d41a:	4798      	blx	r3
 800d41c:	4603      	mov	r3, r0
 800d41e:	76bb      	strb	r3, [r7, #26]
 800d420:	e001      	b.n	800d426 <tcp_process+0x30e>
 800d422:	2300      	movs	r3, #0
 800d424:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d426:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d42a:	f113 0f0d 	cmn.w	r3, #13
 800d42e:	d102      	bne.n	800d436 <tcp_process+0x31e>
          return ERR_ABRT;
 800d430:	f06f 030c 	mvn.w	r3, #12
 800d434:	e250      	b.n	800d8d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	8b5b      	ldrh	r3, [r3, #26]
 800d43a:	f043 0302 	orr.w	r3, r3, #2
 800d43e:	b29a      	uxth	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d444:	e23a      	b.n	800d8bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d446:	4b98      	ldr	r3, [pc, #608]	; (800d6a8 <tcp_process+0x590>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	f003 0310 	and.w	r3, r3, #16
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f000 8234 	beq.w	800d8bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d454:	4b95      	ldr	r3, [pc, #596]	; (800d6ac <tcp_process+0x594>)
 800d456:	6819      	ldr	r1, [r3, #0]
 800d458:	4b95      	ldr	r3, [pc, #596]	; (800d6b0 <tcp_process+0x598>)
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	461a      	mov	r2, r3
 800d45e:	4b95      	ldr	r3, [pc, #596]	; (800d6b4 <tcp_process+0x59c>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d464:	4b94      	ldr	r3, [pc, #592]	; (800d6b8 <tcp_process+0x5a0>)
 800d466:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d468:	885b      	ldrh	r3, [r3, #2]
 800d46a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d46c:	4a92      	ldr	r2, [pc, #584]	; (800d6b8 <tcp_process+0x5a0>)
 800d46e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d470:	8812      	ldrh	r2, [r2, #0]
 800d472:	b292      	uxth	r2, r2
 800d474:	9202      	str	r2, [sp, #8]
 800d476:	9301      	str	r3, [sp, #4]
 800d478:	4b90      	ldr	r3, [pc, #576]	; (800d6bc <tcp_process+0x5a4>)
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	4b90      	ldr	r3, [pc, #576]	; (800d6c0 <tcp_process+0x5a8>)
 800d47e:	4602      	mov	r2, r0
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f002 fc85 	bl	800fd90 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d48c:	2b05      	cmp	r3, #5
 800d48e:	f200 8215 	bhi.w	800d8bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f002 fa4f 	bl	800f93c <tcp_rexmit_rto>
      break;
 800d49e:	e20d      	b.n	800d8bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d4a0:	4b81      	ldr	r3, [pc, #516]	; (800d6a8 <tcp_process+0x590>)
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	f003 0310 	and.w	r3, r3, #16
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 80a1 	beq.w	800d5f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d4ae:	4b7f      	ldr	r3, [pc, #508]	; (800d6ac <tcp_process+0x594>)
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	db7e      	blt.n	800d5bc <tcp_process+0x4a4>
 800d4be:	4b7b      	ldr	r3, [pc, #492]	; (800d6ac <tcp_process+0x594>)
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	dc77      	bgt.n	800d5bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2204      	movs	r2, #4
 800d4d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d102      	bne.n	800d4e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d4da:	23fa      	movs	r3, #250	; 0xfa
 800d4dc:	76bb      	strb	r3, [r7, #26]
 800d4de:	e01d      	b.n	800d51c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4e4:	699b      	ldr	r3, [r3, #24]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d106      	bne.n	800d4f8 <tcp_process+0x3e0>
 800d4ea:	4b76      	ldr	r3, [pc, #472]	; (800d6c4 <tcp_process+0x5ac>)
 800d4ec:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d4f0:	4975      	ldr	r1, [pc, #468]	; (800d6c8 <tcp_process+0x5b0>)
 800d4f2:	4876      	ldr	r0, [pc, #472]	; (800d6cc <tcp_process+0x5b4>)
 800d4f4:	f005 fff6 	bl	80134e4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4fc:	699b      	ldr	r3, [r3, #24]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00a      	beq.n	800d518 <tcp_process+0x400>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	6910      	ldr	r0, [r2, #16]
 800d50c:	2200      	movs	r2, #0
 800d50e:	6879      	ldr	r1, [r7, #4]
 800d510:	4798      	blx	r3
 800d512:	4603      	mov	r3, r0
 800d514:	76bb      	strb	r3, [r7, #26]
 800d516:	e001      	b.n	800d51c <tcp_process+0x404>
 800d518:	23f0      	movs	r3, #240	; 0xf0
 800d51a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d51c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00a      	beq.n	800d53a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d524:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d528:	f113 0f0d 	cmn.w	r3, #13
 800d52c:	d002      	beq.n	800d534 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f7fd ff8e 	bl	800b450 <tcp_abort>
            }
            return ERR_ABRT;
 800d534:	f06f 030c 	mvn.w	r3, #12
 800d538:	e1ce      	b.n	800d8d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fae0 	bl	800db00 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d540:	4b63      	ldr	r3, [pc, #396]	; (800d6d0 <tcp_process+0x5b8>)
 800d542:	881b      	ldrh	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d005      	beq.n	800d554 <tcp_process+0x43c>
            recv_acked--;
 800d548:	4b61      	ldr	r3, [pc, #388]	; (800d6d0 <tcp_process+0x5b8>)
 800d54a:	881b      	ldrh	r3, [r3, #0]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	b29a      	uxth	r2, r3
 800d550:	4b5f      	ldr	r3, [pc, #380]	; (800d6d0 <tcp_process+0x5b8>)
 800d552:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d558:	009a      	lsls	r2, r3, #2
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	f241 111c 	movw	r1, #4380	; 0x111c
 800d564:	428b      	cmp	r3, r1
 800d566:	bf38      	it	cc
 800d568:	460b      	movcc	r3, r1
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d204      	bcs.n	800d578 <tcp_process+0x460>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	b29b      	uxth	r3, r3
 800d576:	e00d      	b.n	800d594 <tcp_process+0x47c>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d57c:	005b      	lsls	r3, r3, #1
 800d57e:	f241 121c 	movw	r2, #4380	; 0x111c
 800d582:	4293      	cmp	r3, r2
 800d584:	d904      	bls.n	800d590 <tcp_process+0x478>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d58a:	005b      	lsls	r3, r3, #1
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	e001      	b.n	800d594 <tcp_process+0x47c>
 800d590:	f241 131c 	movw	r3, #4380	; 0x111c
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d59a:	4b4e      	ldr	r3, [pc, #312]	; (800d6d4 <tcp_process+0x5bc>)
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	f003 0320 	and.w	r3, r3, #32
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d037      	beq.n	800d616 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	8b5b      	ldrh	r3, [r3, #26]
 800d5aa:	f043 0302 	orr.w	r3, r3, #2
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2207      	movs	r2, #7
 800d5b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d5ba:	e02c      	b.n	800d616 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5bc:	4b3b      	ldr	r3, [pc, #236]	; (800d6ac <tcp_process+0x594>)
 800d5be:	6819      	ldr	r1, [r3, #0]
 800d5c0:	4b3b      	ldr	r3, [pc, #236]	; (800d6b0 <tcp_process+0x598>)
 800d5c2:	881b      	ldrh	r3, [r3, #0]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	4b3b      	ldr	r3, [pc, #236]	; (800d6b4 <tcp_process+0x59c>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5cc:	4b3a      	ldr	r3, [pc, #232]	; (800d6b8 <tcp_process+0x5a0>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5d0:	885b      	ldrh	r3, [r3, #2]
 800d5d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5d4:	4a38      	ldr	r2, [pc, #224]	; (800d6b8 <tcp_process+0x5a0>)
 800d5d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5d8:	8812      	ldrh	r2, [r2, #0]
 800d5da:	b292      	uxth	r2, r2
 800d5dc:	9202      	str	r2, [sp, #8]
 800d5de:	9301      	str	r3, [sp, #4]
 800d5e0:	4b36      	ldr	r3, [pc, #216]	; (800d6bc <tcp_process+0x5a4>)
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	4b36      	ldr	r3, [pc, #216]	; (800d6c0 <tcp_process+0x5a8>)
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f002 fbd1 	bl	800fd90 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d5ee:	e167      	b.n	800d8c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d5f0:	4b2d      	ldr	r3, [pc, #180]	; (800d6a8 <tcp_process+0x590>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	f003 0302 	and.w	r3, r3, #2
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 8161 	beq.w	800d8c0 <tcp_process+0x7a8>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d602:	1e5a      	subs	r2, r3, #1
 800d604:	4b2b      	ldr	r3, [pc, #172]	; (800d6b4 <tcp_process+0x59c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	429a      	cmp	r2, r3
 800d60a:	f040 8159 	bne.w	800d8c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f002 f9b6 	bl	800f980 <tcp_rexmit>
      break;
 800d614:	e154      	b.n	800d8c0 <tcp_process+0x7a8>
 800d616:	e153      	b.n	800d8c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fa71 	bl	800db00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d61e:	4b2d      	ldr	r3, [pc, #180]	; (800d6d4 <tcp_process+0x5bc>)
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	f003 0320 	and.w	r3, r3, #32
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 814c 	beq.w	800d8c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	8b5b      	ldrh	r3, [r3, #26]
 800d630:	f043 0302 	orr.w	r3, r3, #2
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2207      	movs	r2, #7
 800d63e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d640:	e140      	b.n	800d8c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fa5c 	bl	800db00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d648:	4b22      	ldr	r3, [pc, #136]	; (800d6d4 <tcp_process+0x5bc>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	f003 0320 	and.w	r3, r3, #32
 800d650:	2b00      	cmp	r3, #0
 800d652:	d071      	beq.n	800d738 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d654:	4b14      	ldr	r3, [pc, #80]	; (800d6a8 <tcp_process+0x590>)
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	f003 0310 	and.w	r3, r3, #16
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d060      	beq.n	800d722 <tcp_process+0x60a>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d664:	4b11      	ldr	r3, [pc, #68]	; (800d6ac <tcp_process+0x594>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d15a      	bne.n	800d722 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d670:	2b00      	cmp	r3, #0
 800d672:	d156      	bne.n	800d722 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	8b5b      	ldrh	r3, [r3, #26]
 800d678:	f043 0302 	orr.w	r3, r3, #2
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7fe fdbc 	bl	800c200 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d688:	4b13      	ldr	r3, [pc, #76]	; (800d6d8 <tcp_process+0x5c0>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d105      	bne.n	800d69e <tcp_process+0x586>
 800d692:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <tcp_process+0x5c0>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	4a0f      	ldr	r2, [pc, #60]	; (800d6d8 <tcp_process+0x5c0>)
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	e02e      	b.n	800d6fc <tcp_process+0x5e4>
 800d69e:	4b0e      	ldr	r3, [pc, #56]	; (800d6d8 <tcp_process+0x5c0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	617b      	str	r3, [r7, #20]
 800d6a4:	e027      	b.n	800d6f6 <tcp_process+0x5de>
 800d6a6:	bf00      	nop
 800d6a8:	20008ef4 	.word	0x20008ef4
 800d6ac:	20008eec 	.word	0x20008eec
 800d6b0:	20008ef2 	.word	0x20008ef2
 800d6b4:	20008ee8 	.word	0x20008ee8
 800d6b8:	20008ed8 	.word	0x20008ed8
 800d6bc:	20003790 	.word	0x20003790
 800d6c0:	20003794 	.word	0x20003794
 800d6c4:	08015b64 	.word	0x08015b64
 800d6c8:	08015e04 	.word	0x08015e04
 800d6cc:	08015bb0 	.word	0x08015bb0
 800d6d0:	20008ef0 	.word	0x20008ef0
 800d6d4:	20008ef5 	.word	0x20008ef5
 800d6d8:	20008ebc 	.word	0x20008ebc
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d104      	bne.n	800d6f0 <tcp_process+0x5d8>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68da      	ldr	r2, [r3, #12]
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	60da      	str	r2, [r3, #12]
 800d6ee:	e005      	b.n	800d6fc <tcp_process+0x5e4>
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	617b      	str	r3, [r7, #20]
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1ef      	bne.n	800d6dc <tcp_process+0x5c4>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	60da      	str	r2, [r3, #12]
 800d702:	4b77      	ldr	r3, [pc, #476]	; (800d8e0 <tcp_process+0x7c8>)
 800d704:	2201      	movs	r2, #1
 800d706:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	220a      	movs	r2, #10
 800d70c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d70e:	4b75      	ldr	r3, [pc, #468]	; (800d8e4 <tcp_process+0x7cc>)
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	60da      	str	r2, [r3, #12]
 800d716:	4a73      	ldr	r2, [pc, #460]	; (800d8e4 <tcp_process+0x7cc>)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6013      	str	r3, [r2, #0]
 800d71c:	f002 fcfa 	bl	8010114 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d720:	e0d2      	b.n	800d8c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	8b5b      	ldrh	r3, [r3, #26]
 800d726:	f043 0302 	orr.w	r3, r3, #2
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2208      	movs	r2, #8
 800d734:	751a      	strb	r2, [r3, #20]
      break;
 800d736:	e0c7      	b.n	800d8c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d738:	4b6b      	ldr	r3, [pc, #428]	; (800d8e8 <tcp_process+0x7d0>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	f003 0310 	and.w	r3, r3, #16
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 80c1 	beq.w	800d8c8 <tcp_process+0x7b0>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d74a:	4b68      	ldr	r3, [pc, #416]	; (800d8ec <tcp_process+0x7d4>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	429a      	cmp	r2, r3
 800d750:	f040 80ba 	bne.w	800d8c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f040 80b5 	bne.w	800d8c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2206      	movs	r2, #6
 800d762:	751a      	strb	r2, [r3, #20]
      break;
 800d764:	e0b0      	b.n	800d8c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f9ca 	bl	800db00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d76c:	4b60      	ldr	r3, [pc, #384]	; (800d8f0 <tcp_process+0x7d8>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	f003 0320 	and.w	r3, r3, #32
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 80a9 	beq.w	800d8cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	8b5b      	ldrh	r3, [r3, #26]
 800d77e:	f043 0302 	orr.w	r3, r3, #2
 800d782:	b29a      	uxth	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7fe fd39 	bl	800c200 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d78e:	4b59      	ldr	r3, [pc, #356]	; (800d8f4 <tcp_process+0x7dc>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	429a      	cmp	r2, r3
 800d796:	d105      	bne.n	800d7a4 <tcp_process+0x68c>
 800d798:	4b56      	ldr	r3, [pc, #344]	; (800d8f4 <tcp_process+0x7dc>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	4a55      	ldr	r2, [pc, #340]	; (800d8f4 <tcp_process+0x7dc>)
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	e013      	b.n	800d7cc <tcp_process+0x6b4>
 800d7a4:	4b53      	ldr	r3, [pc, #332]	; (800d8f4 <tcp_process+0x7dc>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	613b      	str	r3, [r7, #16]
 800d7aa:	e00c      	b.n	800d7c6 <tcp_process+0x6ae>
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d104      	bne.n	800d7c0 <tcp_process+0x6a8>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	68da      	ldr	r2, [r3, #12]
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	60da      	str	r2, [r3, #12]
 800d7be:	e005      	b.n	800d7cc <tcp_process+0x6b4>
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	613b      	str	r3, [r7, #16]
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1ef      	bne.n	800d7ac <tcp_process+0x694>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	60da      	str	r2, [r3, #12]
 800d7d2:	4b43      	ldr	r3, [pc, #268]	; (800d8e0 <tcp_process+0x7c8>)
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	220a      	movs	r2, #10
 800d7dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d7de:	4b41      	ldr	r3, [pc, #260]	; (800d8e4 <tcp_process+0x7cc>)
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	60da      	str	r2, [r3, #12]
 800d7e6:	4a3f      	ldr	r2, [pc, #252]	; (800d8e4 <tcp_process+0x7cc>)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6013      	str	r3, [r2, #0]
 800d7ec:	f002 fc92 	bl	8010114 <tcp_timer_needed>
      }
      break;
 800d7f0:	e06c      	b.n	800d8cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f984 	bl	800db00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d7f8:	4b3b      	ldr	r3, [pc, #236]	; (800d8e8 <tcp_process+0x7d0>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	f003 0310 	and.w	r3, r3, #16
 800d800:	2b00      	cmp	r3, #0
 800d802:	d065      	beq.n	800d8d0 <tcp_process+0x7b8>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d808:	4b38      	ldr	r3, [pc, #224]	; (800d8ec <tcp_process+0x7d4>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d15f      	bne.n	800d8d0 <tcp_process+0x7b8>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d814:	2b00      	cmp	r3, #0
 800d816:	d15b      	bne.n	800d8d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7fe fcf1 	bl	800c200 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d81e:	4b35      	ldr	r3, [pc, #212]	; (800d8f4 <tcp_process+0x7dc>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	429a      	cmp	r2, r3
 800d826:	d105      	bne.n	800d834 <tcp_process+0x71c>
 800d828:	4b32      	ldr	r3, [pc, #200]	; (800d8f4 <tcp_process+0x7dc>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	4a31      	ldr	r2, [pc, #196]	; (800d8f4 <tcp_process+0x7dc>)
 800d830:	6013      	str	r3, [r2, #0]
 800d832:	e013      	b.n	800d85c <tcp_process+0x744>
 800d834:	4b2f      	ldr	r3, [pc, #188]	; (800d8f4 <tcp_process+0x7dc>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	60fb      	str	r3, [r7, #12]
 800d83a:	e00c      	b.n	800d856 <tcp_process+0x73e>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	429a      	cmp	r2, r3
 800d844:	d104      	bne.n	800d850 <tcp_process+0x738>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68da      	ldr	r2, [r3, #12]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	60da      	str	r2, [r3, #12]
 800d84e:	e005      	b.n	800d85c <tcp_process+0x744>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1ef      	bne.n	800d83c <tcp_process+0x724>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	60da      	str	r2, [r3, #12]
 800d862:	4b1f      	ldr	r3, [pc, #124]	; (800d8e0 <tcp_process+0x7c8>)
 800d864:	2201      	movs	r2, #1
 800d866:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	220a      	movs	r2, #10
 800d86c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d86e:	4b1d      	ldr	r3, [pc, #116]	; (800d8e4 <tcp_process+0x7cc>)
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	60da      	str	r2, [r3, #12]
 800d876:	4a1b      	ldr	r2, [pc, #108]	; (800d8e4 <tcp_process+0x7cc>)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6013      	str	r3, [r2, #0]
 800d87c:	f002 fc4a 	bl	8010114 <tcp_timer_needed>
      }
      break;
 800d880:	e026      	b.n	800d8d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 f93c 	bl	800db00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d888:	4b17      	ldr	r3, [pc, #92]	; (800d8e8 <tcp_process+0x7d0>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	f003 0310 	and.w	r3, r3, #16
 800d890:	2b00      	cmp	r3, #0
 800d892:	d01f      	beq.n	800d8d4 <tcp_process+0x7bc>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d898:	4b14      	ldr	r3, [pc, #80]	; (800d8ec <tcp_process+0x7d4>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d119      	bne.n	800d8d4 <tcp_process+0x7bc>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d115      	bne.n	800d8d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d8a8:	4b11      	ldr	r3, [pc, #68]	; (800d8f0 <tcp_process+0x7d8>)
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	f043 0310 	orr.w	r3, r3, #16
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	4b0f      	ldr	r3, [pc, #60]	; (800d8f0 <tcp_process+0x7d8>)
 800d8b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d8b6:	e00d      	b.n	800d8d4 <tcp_process+0x7bc>
    default:
      break;
 800d8b8:	bf00      	nop
 800d8ba:	e00c      	b.n	800d8d6 <tcp_process+0x7be>
      break;
 800d8bc:	bf00      	nop
 800d8be:	e00a      	b.n	800d8d6 <tcp_process+0x7be>
      break;
 800d8c0:	bf00      	nop
 800d8c2:	e008      	b.n	800d8d6 <tcp_process+0x7be>
      break;
 800d8c4:	bf00      	nop
 800d8c6:	e006      	b.n	800d8d6 <tcp_process+0x7be>
      break;
 800d8c8:	bf00      	nop
 800d8ca:	e004      	b.n	800d8d6 <tcp_process+0x7be>
      break;
 800d8cc:	bf00      	nop
 800d8ce:	e002      	b.n	800d8d6 <tcp_process+0x7be>
      break;
 800d8d0:	bf00      	nop
 800d8d2:	e000      	b.n	800d8d6 <tcp_process+0x7be>
      break;
 800d8d4:	bf00      	nop
  }
  return ERR_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3724      	adds	r7, #36	; 0x24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd90      	pop	{r4, r7, pc}
 800d8e0:	20008ec4 	.word	0x20008ec4
 800d8e4:	20008ec0 	.word	0x20008ec0
 800d8e8:	20008ef4 	.word	0x20008ef4
 800d8ec:	20008eec 	.word	0x20008eec
 800d8f0:	20008ef5 	.word	0x20008ef5
 800d8f4:	20008ebc 	.word	0x20008ebc

0800d8f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d8f8:	b590      	push	{r4, r7, lr}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d106      	bne.n	800d916 <tcp_oos_insert_segment+0x1e>
 800d908:	4b3b      	ldr	r3, [pc, #236]	; (800d9f8 <tcp_oos_insert_segment+0x100>)
 800d90a:	f240 421f 	movw	r2, #1055	; 0x41f
 800d90e:	493b      	ldr	r1, [pc, #236]	; (800d9fc <tcp_oos_insert_segment+0x104>)
 800d910:	483b      	ldr	r0, [pc, #236]	; (800da00 <tcp_oos_insert_segment+0x108>)
 800d912:	f005 fde7 	bl	80134e4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	899b      	ldrh	r3, [r3, #12]
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fb fcb8 	bl	8009294 <lwip_htons>
 800d924:	4603      	mov	r3, r0
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d028      	beq.n	800d982 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d930:	6838      	ldr	r0, [r7, #0]
 800d932:	f7fe fa63 	bl	800bdfc <tcp_segs_free>
    next = NULL;
 800d936:	2300      	movs	r3, #0
 800d938:	603b      	str	r3, [r7, #0]
 800d93a:	e056      	b.n	800d9ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	899b      	ldrh	r3, [r3, #12]
 800d942:	b29b      	uxth	r3, r3
 800d944:	4618      	mov	r0, r3
 800d946:	f7fb fca5 	bl	8009294 <lwip_htons>
 800d94a:	4603      	mov	r3, r0
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00d      	beq.n	800d972 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	899b      	ldrh	r3, [r3, #12]
 800d95c:	b29c      	uxth	r4, r3
 800d95e:	2001      	movs	r0, #1
 800d960:	f7fb fc98 	bl	8009294 <lwip_htons>
 800d964:	4603      	mov	r3, r0
 800d966:	461a      	mov	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	4322      	orrs	r2, r4
 800d96e:	b292      	uxth	r2, r2
 800d970:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7fe fa52 	bl	800be26 <tcp_seg_free>
    while (next &&
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00e      	beq.n	800d9a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	891b      	ldrh	r3, [r3, #8]
 800d98c:	461a      	mov	r2, r3
 800d98e:	4b1d      	ldr	r3, [pc, #116]	; (800da04 <tcp_oos_insert_segment+0x10c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	441a      	add	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	6839      	ldr	r1, [r7, #0]
 800d99c:	8909      	ldrh	r1, [r1, #8]
 800d99e:	440b      	add	r3, r1
 800d9a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	daca      	bge.n	800d93c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d01e      	beq.n	800d9ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	891b      	ldrh	r3, [r3, #8]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	4b14      	ldr	r3, [pc, #80]	; (800da04 <tcp_oos_insert_segment+0x10c>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	441a      	add	r2, r3
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	dd12      	ble.n	800d9ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	4b0d      	ldr	r3, [pc, #52]	; (800da04 <tcp_oos_insert_segment+0x10c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	1ad3      	subs	r3, r2, r3
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	891b      	ldrh	r3, [r3, #8]
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	f7fc fd83 	bl	800a4f0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	601a      	str	r2, [r3, #0]
}
 800d9f0:	bf00      	nop
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd90      	pop	{r4, r7, pc}
 800d9f8:	08015b64 	.word	0x08015b64
 800d9fc:	08015e24 	.word	0x08015e24
 800da00:	08015bb0 	.word	0x08015bb0
 800da04:	20008ee8 	.word	0x20008ee8

0800da08 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800da08:	b5b0      	push	{r4, r5, r7, lr}
 800da0a:	b086      	sub	sp, #24
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
 800da14:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800da16:	e03e      	b.n	800da96 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	4618      	mov	r0, r3
 800da28:	f7fc ff70 	bl	800a90c <pbuf_clen>
 800da2c:	4603      	mov	r3, r0
 800da2e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da36:	8a7a      	ldrh	r2, [r7, #18]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d906      	bls.n	800da4a <tcp_free_acked_segments+0x42>
 800da3c:	4b2a      	ldr	r3, [pc, #168]	; (800dae8 <tcp_free_acked_segments+0xe0>)
 800da3e:	f240 4257 	movw	r2, #1111	; 0x457
 800da42:	492a      	ldr	r1, [pc, #168]	; (800daec <tcp_free_acked_segments+0xe4>)
 800da44:	482a      	ldr	r0, [pc, #168]	; (800daf0 <tcp_free_acked_segments+0xe8>)
 800da46:	f005 fd4d 	bl	80134e4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800da50:	8a7b      	ldrh	r3, [r7, #18]
 800da52:	1ad3      	subs	r3, r2, r3
 800da54:	b29a      	uxth	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	891a      	ldrh	r2, [r3, #8]
 800da60:	4b24      	ldr	r3, [pc, #144]	; (800daf4 <tcp_free_acked_segments+0xec>)
 800da62:	881b      	ldrh	r3, [r3, #0]
 800da64:	4413      	add	r3, r2
 800da66:	b29a      	uxth	r2, r3
 800da68:	4b22      	ldr	r3, [pc, #136]	; (800daf4 <tcp_free_acked_segments+0xec>)
 800da6a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800da6c:	6978      	ldr	r0, [r7, #20]
 800da6e:	f7fe f9da 	bl	800be26 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00c      	beq.n	800da96 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d109      	bne.n	800da96 <tcp_free_acked_segments+0x8e>
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <tcp_free_acked_segments+0x8e>
 800da88:	4b17      	ldr	r3, [pc, #92]	; (800dae8 <tcp_free_acked_segments+0xe0>)
 800da8a:	f240 4261 	movw	r2, #1121	; 0x461
 800da8e:	491a      	ldr	r1, [pc, #104]	; (800daf8 <tcp_free_acked_segments+0xf0>)
 800da90:	4817      	ldr	r0, [pc, #92]	; (800daf0 <tcp_free_acked_segments+0xe8>)
 800da92:	f005 fd27 	bl	80134e4 <iprintf>
  while (seg_list != NULL &&
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d020      	beq.n	800dade <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fb fc0b 	bl	80092be <lwip_htonl>
 800daa8:	4604      	mov	r4, r0
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	891b      	ldrh	r3, [r3, #8]
 800daae:	461d      	mov	r5, r3
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	899b      	ldrh	r3, [r3, #12]
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fb fbeb 	bl	8009294 <lwip_htons>
 800dabe:	4603      	mov	r3, r0
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	f003 0303 	and.w	r3, r3, #3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d001      	beq.n	800dace <tcp_free_acked_segments+0xc6>
 800daca:	2301      	movs	r3, #1
 800dacc:	e000      	b.n	800dad0 <tcp_free_acked_segments+0xc8>
 800dace:	2300      	movs	r3, #0
 800dad0:	442b      	add	r3, r5
 800dad2:	18e2      	adds	r2, r4, r3
 800dad4:	4b09      	ldr	r3, [pc, #36]	; (800dafc <tcp_free_acked_segments+0xf4>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800dada:	2b00      	cmp	r3, #0
 800dadc:	dd9c      	ble.n	800da18 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800dade:	68bb      	ldr	r3, [r7, #8]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bdb0      	pop	{r4, r5, r7, pc}
 800dae8:	08015b64 	.word	0x08015b64
 800daec:	08015e4c 	.word	0x08015e4c
 800daf0:	08015bb0 	.word	0x08015bb0
 800daf4:	20008ef0 	.word	0x20008ef0
 800daf8:	08015e74 	.word	0x08015e74
 800dafc:	20008eec 	.word	0x20008eec

0800db00 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800db00:	b5b0      	push	{r4, r5, r7, lr}
 800db02:	b094      	sub	sp, #80	; 0x50
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <tcp_receive+0x20>
 800db12:	4b91      	ldr	r3, [pc, #580]	; (800dd58 <tcp_receive+0x258>)
 800db14:	f240 427b 	movw	r2, #1147	; 0x47b
 800db18:	4990      	ldr	r1, [pc, #576]	; (800dd5c <tcp_receive+0x25c>)
 800db1a:	4891      	ldr	r0, [pc, #580]	; (800dd60 <tcp_receive+0x260>)
 800db1c:	f005 fce2 	bl	80134e4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	7d1b      	ldrb	r3, [r3, #20]
 800db24:	2b03      	cmp	r3, #3
 800db26:	d806      	bhi.n	800db36 <tcp_receive+0x36>
 800db28:	4b8b      	ldr	r3, [pc, #556]	; (800dd58 <tcp_receive+0x258>)
 800db2a:	f240 427c 	movw	r2, #1148	; 0x47c
 800db2e:	498d      	ldr	r1, [pc, #564]	; (800dd64 <tcp_receive+0x264>)
 800db30:	488b      	ldr	r0, [pc, #556]	; (800dd60 <tcp_receive+0x260>)
 800db32:	f005 fcd7 	bl	80134e4 <iprintf>

  if (flags & TCP_ACK) {
 800db36:	4b8c      	ldr	r3, [pc, #560]	; (800dd68 <tcp_receive+0x268>)
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	f003 0310 	and.w	r3, r3, #16
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 8264 	beq.w	800e00c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db4a:	461a      	mov	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db50:	4413      	add	r3, r2
 800db52:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db58:	4b84      	ldr	r3, [pc, #528]	; (800dd6c <tcp_receive+0x26c>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	2b00      	cmp	r3, #0
 800db60:	db1b      	blt.n	800db9a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db66:	4b81      	ldr	r3, [pc, #516]	; (800dd6c <tcp_receive+0x26c>)
 800db68:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d106      	bne.n	800db7c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db72:	4b7f      	ldr	r3, [pc, #508]	; (800dd70 <tcp_receive+0x270>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	db0e      	blt.n	800db9a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db80:	4b7b      	ldr	r3, [pc, #492]	; (800dd70 <tcp_receive+0x270>)
 800db82:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800db84:	429a      	cmp	r2, r3
 800db86:	d125      	bne.n	800dbd4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800db88:	4b7a      	ldr	r3, [pc, #488]	; (800dd74 <tcp_receive+0x274>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	89db      	ldrh	r3, [r3, #14]
 800db8e:	b29a      	uxth	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db96:	429a      	cmp	r2, r3
 800db98:	d91c      	bls.n	800dbd4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800db9a:	4b76      	ldr	r3, [pc, #472]	; (800dd74 <tcp_receive+0x274>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	89db      	ldrh	r3, [r3, #14]
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d205      	bcs.n	800dbc4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800dbc4:	4b69      	ldr	r3, [pc, #420]	; (800dd6c <tcp_receive+0x26c>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800dbcc:	4b68      	ldr	r3, [pc, #416]	; (800dd70 <tcp_receive+0x270>)
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800dbd4:	4b66      	ldr	r3, [pc, #408]	; (800dd70 <tcp_receive+0x270>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbdc:	1ad3      	subs	r3, r2, r3
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dc58      	bgt.n	800dc94 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800dbe2:	4b65      	ldr	r3, [pc, #404]	; (800dd78 <tcp_receive+0x278>)
 800dbe4:	881b      	ldrh	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d14b      	bne.n	800dc82 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800dbf4:	4413      	add	r3, r2
 800dbf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d142      	bne.n	800dc82 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	db3d      	blt.n	800dc82 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc0a:	4b59      	ldr	r3, [pc, #356]	; (800dd70 <tcp_receive+0x270>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d137      	bne.n	800dc82 <tcp_receive+0x182>
              found_dupack = 1;
 800dc12:	2301      	movs	r3, #1
 800dc14:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc1c:	2bff      	cmp	r3, #255	; 0xff
 800dc1e:	d007      	beq.n	800dc30 <tcp_receive+0x130>
                ++pcb->dupacks;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc26:	3301      	adds	r3, #1
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	d91b      	bls.n	800dc72 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc44:	4413      	add	r3, r2
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d30a      	bcc.n	800dc68 <tcp_receive+0x168>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc5c:	4413      	add	r3, r2
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc66:	e004      	b.n	800dc72 <tcp_receive+0x172>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d902      	bls.n	800dc82 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f001 feeb 	bl	800fa58 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dc82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f040 8161 	bne.w	800df4c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc92:	e15b      	b.n	800df4c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dc94:	4b36      	ldr	r3, [pc, #216]	; (800dd70 <tcp_receive+0x270>)
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f2c0 814e 	blt.w	800df42 <tcp_receive+0x442>
 800dca6:	4b32      	ldr	r3, [pc, #200]	; (800dd70 <tcp_receive+0x270>)
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f300 8146 	bgt.w	800df42 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	8b5b      	ldrh	r3, [r3, #26]
 800dcba:	f003 0304 	and.w	r3, r3, #4
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d010      	beq.n	800dce4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	8b5b      	ldrh	r3, [r3, #26]
 800dcc6:	f023 0304 	bic.w	r3, r3, #4
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dcf2:	10db      	asrs	r3, r3, #3
 800dcf4:	b21b      	sxth	r3, r3
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	4413      	add	r3, r2
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	b21a      	sxth	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800dd0c:	4b18      	ldr	r3, [pc, #96]	; (800dd70 <tcp_receive+0x270>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dd24:	4b12      	ldr	r3, [pc, #72]	; (800dd70 <tcp_receive+0x270>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	7d1b      	ldrb	r3, [r3, #20]
 800dd30:	2b03      	cmp	r3, #3
 800dd32:	f240 8097 	bls.w	800de64 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d245      	bcs.n	800ddd2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	8b5b      	ldrh	r3, [r3, #26]
 800dd4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d014      	beq.n	800dd7c <tcp_receive+0x27c>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e013      	b.n	800dd7e <tcp_receive+0x27e>
 800dd56:	bf00      	nop
 800dd58:	08015b64 	.word	0x08015b64
 800dd5c:	08015e94 	.word	0x08015e94
 800dd60:	08015bb0 	.word	0x08015bb0
 800dd64:	08015eb0 	.word	0x08015eb0
 800dd68:	20008ef4 	.word	0x20008ef4
 800dd6c:	20008ee8 	.word	0x20008ee8
 800dd70:	20008eec 	.word	0x20008eec
 800dd74:	20008ed8 	.word	0x20008ed8
 800dd78:	20008ef2 	.word	0x20008ef2
 800dd7c:	2302      	movs	r3, #2
 800dd7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dd82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd8c:	fb12 f303 	smulbb	r3, r2, r3
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd94:	4293      	cmp	r3, r2
 800dd96:	bf28      	it	cs
 800dd98:	4613      	movcs	r3, r2
 800dd9a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dda2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dda4:	4413      	add	r3, r2
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d309      	bcc.n	800ddc6 <tcp_receive+0x2c6>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ddb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ddba:	4413      	add	r3, r2
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ddc4:	e04e      	b.n	800de64 <tcp_receive+0x364>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ddd0:	e048      	b.n	800de64 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ddd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddda:	4413      	add	r3, r2
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d309      	bcc.n	800ddfc <tcp_receive+0x2fc>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ddee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddf0:	4413      	add	r3, r2
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddfa:	e004      	b.n	800de06 <tcp_receive+0x306>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de12:	429a      	cmp	r2, r3
 800de14:	d326      	bcc.n	800de64 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de22:	1ad3      	subs	r3, r2, r3
 800de24:	b29a      	uxth	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de36:	4413      	add	r3, r2
 800de38:	b29a      	uxth	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de40:	429a      	cmp	r2, r3
 800de42:	d30a      	bcc.n	800de5a <tcp_receive+0x35a>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de4e:	4413      	add	r3, r2
 800de50:	b29a      	uxth	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de58:	e004      	b.n	800de64 <tcp_receive+0x364>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de6c:	4a98      	ldr	r2, [pc, #608]	; (800e0d0 <tcp_receive+0x5d0>)
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff fdca 	bl	800da08 <tcp_free_acked_segments>
 800de74:	4602      	mov	r2, r0
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de82:	4a94      	ldr	r2, [pc, #592]	; (800e0d4 <tcp_receive+0x5d4>)
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff fdbf 	bl	800da08 <tcp_free_acked_segments>
 800de8a:	4602      	mov	r2, r0
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de94:	2b00      	cmp	r3, #0
 800de96:	d104      	bne.n	800dea2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de9e:	861a      	strh	r2, [r3, #48]	; 0x30
 800dea0:	e002      	b.n	800dea8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d103      	bne.n	800debe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dec4:	4b84      	ldr	r3, [pc, #528]	; (800e0d8 <tcp_receive+0x5d8>)
 800dec6:	881b      	ldrh	r3, [r3, #0]
 800dec8:	4413      	add	r3, r2
 800deca:	b29a      	uxth	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	8b5b      	ldrh	r3, [r3, #26]
 800ded6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d035      	beq.n	800df4a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d118      	bne.n	800df18 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00c      	beq.n	800df08 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	4618      	mov	r0, r3
 800defc:	f7fb f9df 	bl	80092be <lwip_htonl>
 800df00:	4603      	mov	r3, r0
 800df02:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800df04:	2b00      	cmp	r3, #0
 800df06:	dc20      	bgt.n	800df4a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	8b5b      	ldrh	r3, [r3, #26]
 800df0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df10:	b29a      	uxth	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df16:	e018      	b.n	800df4a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	4618      	mov	r0, r3
 800df26:	f7fb f9ca 	bl	80092be <lwip_htonl>
 800df2a:	4603      	mov	r3, r0
 800df2c:	1ae3      	subs	r3, r4, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	dc0b      	bgt.n	800df4a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	8b5b      	ldrh	r3, [r3, #26]
 800df36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df40:	e003      	b.n	800df4a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f001 ff76 	bl	800fe34 <tcp_send_empty_ack>
 800df48:	e000      	b.n	800df4c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df4a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df50:	2b00      	cmp	r3, #0
 800df52:	d05b      	beq.n	800e00c <tcp_receive+0x50c>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df58:	4b60      	ldr	r3, [pc, #384]	; (800e0dc <tcp_receive+0x5dc>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	da54      	bge.n	800e00c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800df62:	4b5f      	ldr	r3, [pc, #380]	; (800e0e0 <tcp_receive+0x5e0>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	b29a      	uxth	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	b29b      	uxth	r3, r3
 800df72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800df76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800df80:	10db      	asrs	r3, r3, #3
 800df82:	b21b      	sxth	r3, r3
 800df84:	b29b      	uxth	r3, r3
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	b29b      	uxth	r3, r3
 800df8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800df94:	b29a      	uxth	r2, r3
 800df96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800df9a:	4413      	add	r3, r2
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	b21a      	sxth	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800dfa4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	da05      	bge.n	800dfb8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800dfac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dfb0:	425b      	negs	r3, r3
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dfb8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dfc2:	109b      	asrs	r3, r3, #2
 800dfc4:	b21b      	sxth	r3, r3
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dfdc:	4413      	add	r3, r2
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	b21a      	sxth	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dfec:	10db      	asrs	r3, r3, #3
 800dfee:	b21b      	sxth	r3, r3
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	4413      	add	r3, r2
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	b21a      	sxth	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e00c:	4b35      	ldr	r3, [pc, #212]	; (800e0e4 <tcp_receive+0x5e4>)
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	f000 84e2 	beq.w	800e9da <tcp_receive+0xeda>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7d1b      	ldrb	r3, [r3, #20]
 800e01a:	2b06      	cmp	r3, #6
 800e01c:	f200 84dd 	bhi.w	800e9da <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e024:	4b30      	ldr	r3, [pc, #192]	; (800e0e8 <tcp_receive+0x5e8>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	3b01      	subs	r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f2c0 808f 	blt.w	800e150 <tcp_receive+0x650>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e036:	4b2b      	ldr	r3, [pc, #172]	; (800e0e4 <tcp_receive+0x5e4>)
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	4619      	mov	r1, r3
 800e03c:	4b2a      	ldr	r3, [pc, #168]	; (800e0e8 <tcp_receive+0x5e8>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	440b      	add	r3, r1
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	3301      	adds	r3, #1
 800e046:	2b00      	cmp	r3, #0
 800e048:	f300 8082 	bgt.w	800e150 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e04c:	4b27      	ldr	r3, [pc, #156]	; (800e0ec <tcp_receive+0x5ec>)
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e056:	4b24      	ldr	r3, [pc, #144]	; (800e0e8 <tcp_receive+0x5e8>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	1ad3      	subs	r3, r2, r3
 800e05c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e05e:	4b23      	ldr	r3, [pc, #140]	; (800e0ec <tcp_receive+0x5ec>)
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d106      	bne.n	800e074 <tcp_receive+0x574>
 800e066:	4b22      	ldr	r3, [pc, #136]	; (800e0f0 <tcp_receive+0x5f0>)
 800e068:	f240 5294 	movw	r2, #1428	; 0x594
 800e06c:	4921      	ldr	r1, [pc, #132]	; (800e0f4 <tcp_receive+0x5f4>)
 800e06e:	4822      	ldr	r0, [pc, #136]	; (800e0f8 <tcp_receive+0x5f8>)
 800e070:	f005 fa38 	bl	80134e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e076:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d906      	bls.n	800e08c <tcp_receive+0x58c>
 800e07e:	4b1c      	ldr	r3, [pc, #112]	; (800e0f0 <tcp_receive+0x5f0>)
 800e080:	f240 5295 	movw	r2, #1429	; 0x595
 800e084:	491d      	ldr	r1, [pc, #116]	; (800e0fc <tcp_receive+0x5fc>)
 800e086:	481c      	ldr	r0, [pc, #112]	; (800e0f8 <tcp_receive+0x5f8>)
 800e088:	f005 fa2c 	bl	80134e4 <iprintf>
      off = (u16_t)off32;
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e092:	4b16      	ldr	r3, [pc, #88]	; (800e0ec <tcp_receive+0x5ec>)
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	891b      	ldrh	r3, [r3, #8]
 800e098:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d906      	bls.n	800e0ae <tcp_receive+0x5ae>
 800e0a0:	4b13      	ldr	r3, [pc, #76]	; (800e0f0 <tcp_receive+0x5f0>)
 800e0a2:	f240 5297 	movw	r2, #1431	; 0x597
 800e0a6:	4916      	ldr	r1, [pc, #88]	; (800e100 <tcp_receive+0x600>)
 800e0a8:	4813      	ldr	r0, [pc, #76]	; (800e0f8 <tcp_receive+0x5f8>)
 800e0aa:	f005 fa1b 	bl	80134e4 <iprintf>
      inseg.len -= off;
 800e0ae:	4b0f      	ldr	r3, [pc, #60]	; (800e0ec <tcp_receive+0x5ec>)
 800e0b0:	891a      	ldrh	r2, [r3, #8]
 800e0b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	4b0c      	ldr	r3, [pc, #48]	; (800e0ec <tcp_receive+0x5ec>)
 800e0bc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e0be:	4b0b      	ldr	r3, [pc, #44]	; (800e0ec <tcp_receive+0x5ec>)
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	891a      	ldrh	r2, [r3, #8]
 800e0c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e0cc:	e02a      	b.n	800e124 <tcp_receive+0x624>
 800e0ce:	bf00      	nop
 800e0d0:	08015ecc 	.word	0x08015ecc
 800e0d4:	08015ed4 	.word	0x08015ed4
 800e0d8:	20008ef0 	.word	0x20008ef0
 800e0dc:	20008eec 	.word	0x20008eec
 800e0e0:	20008eb0 	.word	0x20008eb0
 800e0e4:	20008ef2 	.word	0x20008ef2
 800e0e8:	20008ee8 	.word	0x20008ee8
 800e0ec:	20008ec8 	.word	0x20008ec8
 800e0f0:	08015b64 	.word	0x08015b64
 800e0f4:	08015edc 	.word	0x08015edc
 800e0f8:	08015bb0 	.word	0x08015bb0
 800e0fc:	08015eec 	.word	0x08015eec
 800e100:	08015efc 	.word	0x08015efc
        off -= p->len;
 800e104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e106:	895b      	ldrh	r3, [r3, #10]
 800e108:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e114:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e116:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e11a:	2200      	movs	r2, #0
 800e11c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e126:	895b      	ldrh	r3, [r3, #10]
 800e128:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d8e9      	bhi.n	800e104 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e130:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e134:	4619      	mov	r1, r3
 800e136:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e138:	f7fc fada 	bl	800a6f0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	4a91      	ldr	r2, [pc, #580]	; (800e388 <tcp_receive+0x888>)
 800e142:	6013      	str	r3, [r2, #0]
 800e144:	4b91      	ldr	r3, [pc, #580]	; (800e38c <tcp_receive+0x88c>)
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	4a8f      	ldr	r2, [pc, #572]	; (800e388 <tcp_receive+0x888>)
 800e14a:	6812      	ldr	r2, [r2, #0]
 800e14c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e14e:	e00d      	b.n	800e16c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e150:	4b8d      	ldr	r3, [pc, #564]	; (800e388 <tcp_receive+0x888>)
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	da06      	bge.n	800e16c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	8b5b      	ldrh	r3, [r3, #26]
 800e162:	f043 0302 	orr.w	r3, r3, #2
 800e166:	b29a      	uxth	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e16c:	4b86      	ldr	r3, [pc, #536]	; (800e388 <tcp_receive+0x888>)
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	f2c0 842a 	blt.w	800e9d0 <tcp_receive+0xed0>
 800e17c:	4b82      	ldr	r3, [pc, #520]	; (800e388 <tcp_receive+0x888>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e184:	6879      	ldr	r1, [r7, #4]
 800e186:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e188:	440b      	add	r3, r1
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	3301      	adds	r3, #1
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f300 841e 	bgt.w	800e9d0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e198:	4b7b      	ldr	r3, [pc, #492]	; (800e388 <tcp_receive+0x888>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	f040 829a 	bne.w	800e6d6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e1a2:	4b7a      	ldr	r3, [pc, #488]	; (800e38c <tcp_receive+0x88c>)
 800e1a4:	891c      	ldrh	r4, [r3, #8]
 800e1a6:	4b79      	ldr	r3, [pc, #484]	; (800e38c <tcp_receive+0x88c>)
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	899b      	ldrh	r3, [r3, #12]
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fb f870 	bl	8009294 <lwip_htons>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	f003 0303 	and.w	r3, r3, #3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <tcp_receive+0x6c4>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e000      	b.n	800e1c6 <tcp_receive+0x6c6>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4423      	add	r3, r4
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	4b71      	ldr	r3, [pc, #452]	; (800e390 <tcp_receive+0x890>)
 800e1cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1d2:	4b6f      	ldr	r3, [pc, #444]	; (800e390 <tcp_receive+0x890>)
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d275      	bcs.n	800e2c6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e1da:	4b6c      	ldr	r3, [pc, #432]	; (800e38c <tcp_receive+0x88c>)
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	899b      	ldrh	r3, [r3, #12]
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fb f856 	bl	8009294 <lwip_htons>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	f003 0301 	and.w	r3, r3, #1
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d01f      	beq.n	800e234 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e1f4:	4b65      	ldr	r3, [pc, #404]	; (800e38c <tcp_receive+0x88c>)
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	899b      	ldrh	r3, [r3, #12]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	b21b      	sxth	r3, r3
 800e1fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e202:	b21c      	sxth	r4, r3
 800e204:	4b61      	ldr	r3, [pc, #388]	; (800e38c <tcp_receive+0x88c>)
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	899b      	ldrh	r3, [r3, #12]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fb f841 	bl	8009294 <lwip_htons>
 800e212:	4603      	mov	r3, r0
 800e214:	b2db      	uxtb	r3, r3
 800e216:	b29b      	uxth	r3, r3
 800e218:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fb f838 	bl	8009294 <lwip_htons>
 800e224:	4603      	mov	r3, r0
 800e226:	b21b      	sxth	r3, r3
 800e228:	4323      	orrs	r3, r4
 800e22a:	b21a      	sxth	r2, r3
 800e22c:	4b57      	ldr	r3, [pc, #348]	; (800e38c <tcp_receive+0x88c>)
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	b292      	uxth	r2, r2
 800e232:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e238:	4b54      	ldr	r3, [pc, #336]	; (800e38c <tcp_receive+0x88c>)
 800e23a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e23c:	4b53      	ldr	r3, [pc, #332]	; (800e38c <tcp_receive+0x88c>)
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	899b      	ldrh	r3, [r3, #12]
 800e242:	b29b      	uxth	r3, r3
 800e244:	4618      	mov	r0, r3
 800e246:	f7fb f825 	bl	8009294 <lwip_htons>
 800e24a:	4603      	mov	r3, r0
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	f003 0302 	and.w	r3, r3, #2
 800e252:	2b00      	cmp	r3, #0
 800e254:	d005      	beq.n	800e262 <tcp_receive+0x762>
            inseg.len -= 1;
 800e256:	4b4d      	ldr	r3, [pc, #308]	; (800e38c <tcp_receive+0x88c>)
 800e258:	891b      	ldrh	r3, [r3, #8]
 800e25a:	3b01      	subs	r3, #1
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	4b4b      	ldr	r3, [pc, #300]	; (800e38c <tcp_receive+0x88c>)
 800e260:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e262:	4b4a      	ldr	r3, [pc, #296]	; (800e38c <tcp_receive+0x88c>)
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	4a49      	ldr	r2, [pc, #292]	; (800e38c <tcp_receive+0x88c>)
 800e268:	8912      	ldrh	r2, [r2, #8]
 800e26a:	4611      	mov	r1, r2
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fc f93f 	bl	800a4f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e272:	4b46      	ldr	r3, [pc, #280]	; (800e38c <tcp_receive+0x88c>)
 800e274:	891c      	ldrh	r4, [r3, #8]
 800e276:	4b45      	ldr	r3, [pc, #276]	; (800e38c <tcp_receive+0x88c>)
 800e278:	68db      	ldr	r3, [r3, #12]
 800e27a:	899b      	ldrh	r3, [r3, #12]
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	4618      	mov	r0, r3
 800e280:	f7fb f808 	bl	8009294 <lwip_htons>
 800e284:	4603      	mov	r3, r0
 800e286:	b2db      	uxtb	r3, r3
 800e288:	f003 0303 	and.w	r3, r3, #3
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d001      	beq.n	800e294 <tcp_receive+0x794>
 800e290:	2301      	movs	r3, #1
 800e292:	e000      	b.n	800e296 <tcp_receive+0x796>
 800e294:	2300      	movs	r3, #0
 800e296:	4423      	add	r3, r4
 800e298:	b29a      	uxth	r2, r3
 800e29a:	4b3d      	ldr	r3, [pc, #244]	; (800e390 <tcp_receive+0x890>)
 800e29c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e29e:	4b3c      	ldr	r3, [pc, #240]	; (800e390 <tcp_receive+0x890>)
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	4b38      	ldr	r3, [pc, #224]	; (800e388 <tcp_receive+0x888>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	441a      	add	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ae:	6879      	ldr	r1, [r7, #4]
 800e2b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e2b2:	440b      	add	r3, r1
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d006      	beq.n	800e2c6 <tcp_receive+0x7c6>
 800e2b8:	4b36      	ldr	r3, [pc, #216]	; (800e394 <tcp_receive+0x894>)
 800e2ba:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e2be:	4936      	ldr	r1, [pc, #216]	; (800e398 <tcp_receive+0x898>)
 800e2c0:	4836      	ldr	r0, [pc, #216]	; (800e39c <tcp_receive+0x89c>)
 800e2c2:	f005 f90f 	bl	80134e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f000 80e7 	beq.w	800e49e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e2d0:	4b2e      	ldr	r3, [pc, #184]	; (800e38c <tcp_receive+0x88c>)
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	899b      	ldrh	r3, [r3, #12]
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7fa ffdb 	bl	8009294 <lwip_htons>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d010      	beq.n	800e30c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e2ea:	e00a      	b.n	800e302 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2f0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f7fd fd92 	bl	800be26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1f0      	bne.n	800e2ec <tcp_receive+0x7ec>
 800e30a:	e0c8      	b.n	800e49e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e310:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e312:	e052      	b.n	800e3ba <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	899b      	ldrh	r3, [r3, #12]
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fa ffb9 	bl	8009294 <lwip_htons>
 800e322:	4603      	mov	r3, r0
 800e324:	b2db      	uxtb	r3, r3
 800e326:	f003 0301 	and.w	r3, r3, #1
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d03d      	beq.n	800e3aa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e32e:	4b17      	ldr	r3, [pc, #92]	; (800e38c <tcp_receive+0x88c>)
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	899b      	ldrh	r3, [r3, #12]
 800e334:	b29b      	uxth	r3, r3
 800e336:	4618      	mov	r0, r3
 800e338:	f7fa ffac 	bl	8009294 <lwip_htons>
 800e33c:	4603      	mov	r3, r0
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e344:	2b00      	cmp	r3, #0
 800e346:	d130      	bne.n	800e3aa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e348:	4b10      	ldr	r3, [pc, #64]	; (800e38c <tcp_receive+0x88c>)
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	899b      	ldrh	r3, [r3, #12]
 800e34e:	b29c      	uxth	r4, r3
 800e350:	2001      	movs	r0, #1
 800e352:	f7fa ff9f 	bl	8009294 <lwip_htons>
 800e356:	4603      	mov	r3, r0
 800e358:	461a      	mov	r2, r3
 800e35a:	4b0c      	ldr	r3, [pc, #48]	; (800e38c <tcp_receive+0x88c>)
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	4322      	orrs	r2, r4
 800e360:	b292      	uxth	r2, r2
 800e362:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e364:	4b09      	ldr	r3, [pc, #36]	; (800e38c <tcp_receive+0x88c>)
 800e366:	891c      	ldrh	r4, [r3, #8]
 800e368:	4b08      	ldr	r3, [pc, #32]	; (800e38c <tcp_receive+0x88c>)
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	899b      	ldrh	r3, [r3, #12]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	4618      	mov	r0, r3
 800e372:	f7fa ff8f 	bl	8009294 <lwip_htons>
 800e376:	4603      	mov	r3, r0
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	f003 0303 	and.w	r3, r3, #3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00e      	beq.n	800e3a0 <tcp_receive+0x8a0>
 800e382:	2301      	movs	r3, #1
 800e384:	e00d      	b.n	800e3a2 <tcp_receive+0x8a2>
 800e386:	bf00      	nop
 800e388:	20008ee8 	.word	0x20008ee8
 800e38c:	20008ec8 	.word	0x20008ec8
 800e390:	20008ef2 	.word	0x20008ef2
 800e394:	08015b64 	.word	0x08015b64
 800e398:	08015f0c 	.word	0x08015f0c
 800e39c:	08015bb0 	.word	0x08015bb0
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	4423      	add	r3, r4
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	4b98      	ldr	r3, [pc, #608]	; (800e608 <tcp_receive+0xb08>)
 800e3a8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ac:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e3b4:	6938      	ldr	r0, [r7, #16]
 800e3b6:	f7fd fd36 	bl	800be26 <tcp_seg_free>
            while (next &&
 800e3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00e      	beq.n	800e3de <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e3c0:	4b91      	ldr	r3, [pc, #580]	; (800e608 <tcp_receive+0xb08>)
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	4b91      	ldr	r3, [pc, #580]	; (800e60c <tcp_receive+0xb0c>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	441a      	add	r2, r3
 800e3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e3d4:	8909      	ldrh	r1, [r1, #8]
 800e3d6:	440b      	add	r3, r1
 800e3d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	da9a      	bge.n	800e314 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d059      	beq.n	800e498 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e3e4:	4b88      	ldr	r3, [pc, #544]	; (800e608 <tcp_receive+0xb08>)
 800e3e6:	881b      	ldrh	r3, [r3, #0]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	4b88      	ldr	r3, [pc, #544]	; (800e60c <tcp_receive+0xb0c>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	441a      	add	r2, r3
 800e3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	dd4d      	ble.n	800e498 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	b29a      	uxth	r2, r3
 800e404:	4b81      	ldr	r3, [pc, #516]	; (800e60c <tcp_receive+0xb0c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	b29b      	uxth	r3, r3
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	4b80      	ldr	r3, [pc, #512]	; (800e610 <tcp_receive+0xb10>)
 800e410:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e412:	4b7f      	ldr	r3, [pc, #508]	; (800e610 <tcp_receive+0xb10>)
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	899b      	ldrh	r3, [r3, #12]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fa ff3a 	bl	8009294 <lwip_htons>
 800e420:	4603      	mov	r3, r0
 800e422:	b2db      	uxtb	r3, r3
 800e424:	f003 0302 	and.w	r3, r3, #2
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d005      	beq.n	800e438 <tcp_receive+0x938>
                inseg.len -= 1;
 800e42c:	4b78      	ldr	r3, [pc, #480]	; (800e610 <tcp_receive+0xb10>)
 800e42e:	891b      	ldrh	r3, [r3, #8]
 800e430:	3b01      	subs	r3, #1
 800e432:	b29a      	uxth	r2, r3
 800e434:	4b76      	ldr	r3, [pc, #472]	; (800e610 <tcp_receive+0xb10>)
 800e436:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e438:	4b75      	ldr	r3, [pc, #468]	; (800e610 <tcp_receive+0xb10>)
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	4a74      	ldr	r2, [pc, #464]	; (800e610 <tcp_receive+0xb10>)
 800e43e:	8912      	ldrh	r2, [r2, #8]
 800e440:	4611      	mov	r1, r2
 800e442:	4618      	mov	r0, r3
 800e444:	f7fc f854 	bl	800a4f0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e448:	4b71      	ldr	r3, [pc, #452]	; (800e610 <tcp_receive+0xb10>)
 800e44a:	891c      	ldrh	r4, [r3, #8]
 800e44c:	4b70      	ldr	r3, [pc, #448]	; (800e610 <tcp_receive+0xb10>)
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	899b      	ldrh	r3, [r3, #12]
 800e452:	b29b      	uxth	r3, r3
 800e454:	4618      	mov	r0, r3
 800e456:	f7fa ff1d 	bl	8009294 <lwip_htons>
 800e45a:	4603      	mov	r3, r0
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	f003 0303 	and.w	r3, r3, #3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d001      	beq.n	800e46a <tcp_receive+0x96a>
 800e466:	2301      	movs	r3, #1
 800e468:	e000      	b.n	800e46c <tcp_receive+0x96c>
 800e46a:	2300      	movs	r3, #0
 800e46c:	4423      	add	r3, r4
 800e46e:	b29a      	uxth	r2, r3
 800e470:	4b65      	ldr	r3, [pc, #404]	; (800e608 <tcp_receive+0xb08>)
 800e472:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e474:	4b64      	ldr	r3, [pc, #400]	; (800e608 <tcp_receive+0xb08>)
 800e476:	881b      	ldrh	r3, [r3, #0]
 800e478:	461a      	mov	r2, r3
 800e47a:	4b64      	ldr	r3, [pc, #400]	; (800e60c <tcp_receive+0xb0c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	441a      	add	r2, r3
 800e480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	429a      	cmp	r2, r3
 800e488:	d006      	beq.n	800e498 <tcp_receive+0x998>
 800e48a:	4b62      	ldr	r3, [pc, #392]	; (800e614 <tcp_receive+0xb14>)
 800e48c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e490:	4961      	ldr	r1, [pc, #388]	; (800e618 <tcp_receive+0xb18>)
 800e492:	4862      	ldr	r0, [pc, #392]	; (800e61c <tcp_receive+0xb1c>)
 800e494:	f005 f826 	bl	80134e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e49c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e49e:	4b5a      	ldr	r3, [pc, #360]	; (800e608 <tcp_receive+0xb08>)
 800e4a0:	881b      	ldrh	r3, [r3, #0]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	4b59      	ldr	r3, [pc, #356]	; (800e60c <tcp_receive+0xb0c>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	441a      	add	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4b2:	4b55      	ldr	r3, [pc, #340]	; (800e608 <tcp_receive+0xb08>)
 800e4b4:	881b      	ldrh	r3, [r3, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d206      	bcs.n	800e4c8 <tcp_receive+0x9c8>
 800e4ba:	4b56      	ldr	r3, [pc, #344]	; (800e614 <tcp_receive+0xb14>)
 800e4bc:	f240 6207 	movw	r2, #1543	; 0x607
 800e4c0:	4957      	ldr	r1, [pc, #348]	; (800e620 <tcp_receive+0xb20>)
 800e4c2:	4856      	ldr	r0, [pc, #344]	; (800e61c <tcp_receive+0xb1c>)
 800e4c4:	f005 f80e 	bl	80134e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4cc:	4b4e      	ldr	r3, [pc, #312]	; (800e608 <tcp_receive+0xb08>)
 800e4ce:	881b      	ldrh	r3, [r3, #0]
 800e4d0:	1ad3      	subs	r3, r2, r3
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7fc ffc5 	bl	800b468 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e4de:	4b4c      	ldr	r3, [pc, #304]	; (800e610 <tcp_receive+0xb10>)
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	891b      	ldrh	r3, [r3, #8]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d006      	beq.n	800e4f6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e4e8:	4b49      	ldr	r3, [pc, #292]	; (800e610 <tcp_receive+0xb10>)
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	4a4d      	ldr	r2, [pc, #308]	; (800e624 <tcp_receive+0xb24>)
 800e4ee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e4f0:	4b47      	ldr	r3, [pc, #284]	; (800e610 <tcp_receive+0xb10>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e4f6:	4b46      	ldr	r3, [pc, #280]	; (800e610 <tcp_receive+0xb10>)
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	899b      	ldrh	r3, [r3, #12]
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fa fec8 	bl	8009294 <lwip_htons>
 800e504:	4603      	mov	r3, r0
 800e506:	b2db      	uxtb	r3, r3
 800e508:	f003 0301 	and.w	r3, r3, #1
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f000 80b8 	beq.w	800e682 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e512:	4b45      	ldr	r3, [pc, #276]	; (800e628 <tcp_receive+0xb28>)
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	f043 0320 	orr.w	r3, r3, #32
 800e51a:	b2da      	uxtb	r2, r3
 800e51c:	4b42      	ldr	r3, [pc, #264]	; (800e628 <tcp_receive+0xb28>)
 800e51e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e520:	e0af      	b.n	800e682 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e526:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	4a36      	ldr	r2, [pc, #216]	; (800e60c <tcp_receive+0xb0c>)
 800e532:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	891b      	ldrh	r3, [r3, #8]
 800e538:	461c      	mov	r4, r3
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	899b      	ldrh	r3, [r3, #12]
 800e540:	b29b      	uxth	r3, r3
 800e542:	4618      	mov	r0, r3
 800e544:	f7fa fea6 	bl	8009294 <lwip_htons>
 800e548:	4603      	mov	r3, r0
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	f003 0303 	and.w	r3, r3, #3
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <tcp_receive+0xa58>
 800e554:	2301      	movs	r3, #1
 800e556:	e000      	b.n	800e55a <tcp_receive+0xa5a>
 800e558:	2300      	movs	r3, #0
 800e55a:	191a      	adds	r2, r3, r4
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e560:	441a      	add	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e56a:	461c      	mov	r4, r3
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	891b      	ldrh	r3, [r3, #8]
 800e570:	461d      	mov	r5, r3
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	899b      	ldrh	r3, [r3, #12]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fa fe8a 	bl	8009294 <lwip_htons>
 800e580:	4603      	mov	r3, r0
 800e582:	b2db      	uxtb	r3, r3
 800e584:	f003 0303 	and.w	r3, r3, #3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <tcp_receive+0xa90>
 800e58c:	2301      	movs	r3, #1
 800e58e:	e000      	b.n	800e592 <tcp_receive+0xa92>
 800e590:	2300      	movs	r3, #0
 800e592:	442b      	add	r3, r5
 800e594:	429c      	cmp	r4, r3
 800e596:	d206      	bcs.n	800e5a6 <tcp_receive+0xaa6>
 800e598:	4b1e      	ldr	r3, [pc, #120]	; (800e614 <tcp_receive+0xb14>)
 800e59a:	f240 622b 	movw	r2, #1579	; 0x62b
 800e59e:	4923      	ldr	r1, [pc, #140]	; (800e62c <tcp_receive+0xb2c>)
 800e5a0:	481e      	ldr	r0, [pc, #120]	; (800e61c <tcp_receive+0xb1c>)
 800e5a2:	f004 ff9f 	bl	80134e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	891b      	ldrh	r3, [r3, #8]
 800e5aa:	461c      	mov	r4, r3
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	899b      	ldrh	r3, [r3, #12]
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7fa fe6d 	bl	8009294 <lwip_htons>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	f003 0303 	and.w	r3, r3, #3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <tcp_receive+0xaca>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e000      	b.n	800e5cc <tcp_receive+0xacc>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	1919      	adds	r1, r3, r4
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e5d2:	b28b      	uxth	r3, r1
 800e5d4:	1ad3      	subs	r3, r2, r3
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7fc ff43 	bl	800b468 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	891b      	ldrh	r3, [r3, #8]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d028      	beq.n	800e63e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e5ec:	4b0d      	ldr	r3, [pc, #52]	; (800e624 <tcp_receive+0xb24>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d01d      	beq.n	800e630 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e5f4:	4b0b      	ldr	r3, [pc, #44]	; (800e624 <tcp_receive+0xb24>)
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4610      	mov	r0, r2
 800e600:	f7fc f9be 	bl	800a980 <pbuf_cat>
 800e604:	e018      	b.n	800e638 <tcp_receive+0xb38>
 800e606:	bf00      	nop
 800e608:	20008ef2 	.word	0x20008ef2
 800e60c:	20008ee8 	.word	0x20008ee8
 800e610:	20008ec8 	.word	0x20008ec8
 800e614:	08015b64 	.word	0x08015b64
 800e618:	08015f44 	.word	0x08015f44
 800e61c:	08015bb0 	.word	0x08015bb0
 800e620:	08015f80 	.word	0x08015f80
 800e624:	20008ef8 	.word	0x20008ef8
 800e628:	20008ef5 	.word	0x20008ef5
 800e62c:	08015fa0 	.word	0x08015fa0
            } else {
              recv_data = cseg->p;
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	4a70      	ldr	r2, [pc, #448]	; (800e7f8 <tcp_receive+0xcf8>)
 800e636:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	2200      	movs	r2, #0
 800e63c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	899b      	ldrh	r3, [r3, #12]
 800e644:	b29b      	uxth	r3, r3
 800e646:	4618      	mov	r0, r3
 800e648:	f7fa fe24 	bl	8009294 <lwip_htons>
 800e64c:	4603      	mov	r3, r0
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	f003 0301 	and.w	r3, r3, #1
 800e654:	2b00      	cmp	r3, #0
 800e656:	d00d      	beq.n	800e674 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e658:	4b68      	ldr	r3, [pc, #416]	; (800e7fc <tcp_receive+0xcfc>)
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	f043 0320 	orr.w	r3, r3, #32
 800e660:	b2da      	uxtb	r2, r3
 800e662:	4b66      	ldr	r3, [pc, #408]	; (800e7fc <tcp_receive+0xcfc>)
 800e664:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	7d1b      	ldrb	r3, [r3, #20]
 800e66a:	2b04      	cmp	r3, #4
 800e66c:	d102      	bne.n	800e674 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2207      	movs	r2, #7
 800e672:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e67c:	68b8      	ldr	r0, [r7, #8]
 800e67e:	f7fd fbd2 	bl	800be26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e686:	2b00      	cmp	r3, #0
 800e688:	d008      	beq.n	800e69c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e696:	429a      	cmp	r2, r3
 800e698:	f43f af43 	beq.w	800e522 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	8b5b      	ldrh	r3, [r3, #26]
 800e6a0:	f003 0301 	and.w	r3, r3, #1
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00e      	beq.n	800e6c6 <tcp_receive+0xbc6>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	8b5b      	ldrh	r3, [r3, #26]
 800e6ac:	f023 0301 	bic.w	r3, r3, #1
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	835a      	strh	r2, [r3, #26]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ba:	f043 0302 	orr.w	r3, r3, #2
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e6c4:	e188      	b.n	800e9d8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ca:	f043 0301 	orr.w	r3, r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e6d4:	e180      	b.n	800e9d8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d106      	bne.n	800e6ec <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e6de:	4848      	ldr	r0, [pc, #288]	; (800e800 <tcp_receive+0xd00>)
 800e6e0:	f7fd fbba 	bl	800be58 <tcp_seg_copy>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	675a      	str	r2, [r3, #116]	; 0x74
 800e6ea:	e16d      	b.n	800e9c8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6f6:	e157      	b.n	800e9a8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	685a      	ldr	r2, [r3, #4]
 800e6fe:	4b41      	ldr	r3, [pc, #260]	; (800e804 <tcp_receive+0xd04>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	429a      	cmp	r2, r3
 800e704:	d11d      	bne.n	800e742 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e706:	4b3e      	ldr	r3, [pc, #248]	; (800e800 <tcp_receive+0xd00>)
 800e708:	891a      	ldrh	r2, [r3, #8]
 800e70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70c:	891b      	ldrh	r3, [r3, #8]
 800e70e:	429a      	cmp	r2, r3
 800e710:	f240 814f 	bls.w	800e9b2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e714:	483a      	ldr	r0, [pc, #232]	; (800e800 <tcp_receive+0xd00>)
 800e716:	f7fd fb9f 	bl	800be58 <tcp_seg_copy>
 800e71a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f000 8149 	beq.w	800e9b6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <tcp_receive+0xc32>
                    prev->next = cseg;
 800e72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e72c:	697a      	ldr	r2, [r7, #20]
 800e72e:	601a      	str	r2, [r3, #0]
 800e730:	e002      	b.n	800e738 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	697a      	ldr	r2, [r7, #20]
 800e736:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e73a:	6978      	ldr	r0, [r7, #20]
 800e73c:	f7ff f8dc 	bl	800d8f8 <tcp_oos_insert_segment>
                }
                break;
 800e740:	e139      	b.n	800e9b6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e744:	2b00      	cmp	r3, #0
 800e746:	d117      	bne.n	800e778 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e748:	4b2e      	ldr	r3, [pc, #184]	; (800e804 <tcp_receive+0xd04>)
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	2b00      	cmp	r3, #0
 800e756:	da57      	bge.n	800e808 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e758:	4829      	ldr	r0, [pc, #164]	; (800e800 <tcp_receive+0xd00>)
 800e75a:	f7fd fb7d 	bl	800be58 <tcp_seg_copy>
 800e75e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f000 8129 	beq.w	800e9ba <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	69ba      	ldr	r2, [r7, #24]
 800e76c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e76e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e770:	69b8      	ldr	r0, [r7, #24]
 800e772:	f7ff f8c1 	bl	800d8f8 <tcp_oos_insert_segment>
                  }
                  break;
 800e776:	e120      	b.n	800e9ba <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e778:	4b22      	ldr	r3, [pc, #136]	; (800e804 <tcp_receive+0xd04>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	3b01      	subs	r3, #1
 800e786:	2b00      	cmp	r3, #0
 800e788:	db3e      	blt.n	800e808 <tcp_receive+0xd08>
 800e78a:	4b1e      	ldr	r3, [pc, #120]	; (800e804 <tcp_receive+0xd04>)
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	3301      	adds	r3, #1
 800e798:	2b00      	cmp	r3, #0
 800e79a:	dc35      	bgt.n	800e808 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e79c:	4818      	ldr	r0, [pc, #96]	; (800e800 <tcp_receive+0xd00>)
 800e79e:	f7fd fb5b 	bl	800be58 <tcp_seg_copy>
 800e7a2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	f000 8109 	beq.w	800e9be <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7b4:	8912      	ldrh	r2, [r2, #8]
 800e7b6:	441a      	add	r2, r3
 800e7b8:	4b12      	ldr	r3, [pc, #72]	; (800e804 <tcp_receive+0xd04>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	dd12      	ble.n	800e7e8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e7c2:	4b10      	ldr	r3, [pc, #64]	; (800e804 <tcp_receive+0xd04>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7de:	891b      	ldrh	r3, [r3, #8]
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4610      	mov	r0, r2
 800e7e4:	f7fb fe84 	bl	800a4f0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ea:	69fa      	ldr	r2, [r7, #28]
 800e7ec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e7ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7f0:	69f8      	ldr	r0, [r7, #28]
 800e7f2:	f7ff f881 	bl	800d8f8 <tcp_oos_insert_segment>
                  }
                  break;
 800e7f6:	e0e2      	b.n	800e9be <tcp_receive+0xebe>
 800e7f8:	20008ef8 	.word	0x20008ef8
 800e7fc:	20008ef5 	.word	0x20008ef5
 800e800:	20008ec8 	.word	0x20008ec8
 800e804:	20008ee8 	.word	0x20008ee8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	f040 80c6 	bne.w	800e9a2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e816:	4b80      	ldr	r3, [pc, #512]	; (800ea18 <tcp_receive+0xf18>)
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e822:	2b00      	cmp	r3, #0
 800e824:	f340 80bd 	ble.w	800e9a2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	899b      	ldrh	r3, [r3, #12]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	4618      	mov	r0, r3
 800e832:	f7fa fd2f 	bl	8009294 <lwip_htons>
 800e836:	4603      	mov	r3, r0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	f003 0301 	and.w	r3, r3, #1
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f040 80bf 	bne.w	800e9c2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e844:	4875      	ldr	r0, [pc, #468]	; (800ea1c <tcp_receive+0xf1c>)
 800e846:	f7fd fb07 	bl	800be58 <tcp_seg_copy>
 800e84a:	4602      	mov	r2, r0
 800e84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 80b6 	beq.w	800e9c6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e862:	8912      	ldrh	r2, [r2, #8]
 800e864:	441a      	add	r2, r3
 800e866:	4b6c      	ldr	r3, [pc, #432]	; (800ea18 <tcp_receive+0xf18>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	1ad3      	subs	r3, r2, r3
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	dd12      	ble.n	800e896 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e870:	4b69      	ldr	r3, [pc, #420]	; (800ea18 <tcp_receive+0xf18>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	b29a      	uxth	r2, r3
 800e876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	1ad3      	subs	r3, r2, r3
 800e880:	b29a      	uxth	r2, r3
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e888:	685a      	ldr	r2, [r3, #4]
 800e88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88c:	891b      	ldrh	r3, [r3, #8]
 800e88e:	4619      	mov	r1, r3
 800e890:	4610      	mov	r0, r2
 800e892:	f7fb fe2d 	bl	800a4f0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e896:	4b62      	ldr	r3, [pc, #392]	; (800ea20 <tcp_receive+0xf20>)
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	4b5e      	ldr	r3, [pc, #376]	; (800ea18 <tcp_receive+0xf18>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	441a      	add	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8aa:	440b      	add	r3, r1
 800e8ac:	1ad3      	subs	r3, r2, r3
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f340 8089 	ble.w	800e9c6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	899b      	ldrh	r3, [r3, #12]
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fa fce8 	bl	8009294 <lwip_htons>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	f003 0301 	and.w	r3, r3, #1
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d022      	beq.n	800e916 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	899b      	ldrh	r3, [r3, #12]
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	b21b      	sxth	r3, r3
 800e8dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e8e0:	b21c      	sxth	r4, r3
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	899b      	ldrh	r3, [r3, #12]
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fa fcd1 	bl	8009294 <lwip_htons>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fa fcc8 	bl	8009294 <lwip_htons>
 800e904:	4603      	mov	r3, r0
 800e906:	b21b      	sxth	r3, r3
 800e908:	4323      	orrs	r3, r4
 800e90a:	b21a      	sxth	r2, r3
 800e90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	b292      	uxth	r2, r2
 800e914:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e920:	4413      	add	r3, r2
 800e922:	b299      	uxth	r1, r3
 800e924:	4b3c      	ldr	r3, [pc, #240]	; (800ea18 <tcp_receive+0xf18>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	b29a      	uxth	r2, r3
 800e92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	1a8a      	subs	r2, r1, r2
 800e930:	b292      	uxth	r2, r2
 800e932:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685a      	ldr	r2, [r3, #4]
 800e93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	891b      	ldrh	r3, [r3, #8]
 800e940:	4619      	mov	r1, r3
 800e942:	4610      	mov	r0, r2
 800e944:	f7fb fdd4 	bl	800a4f0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	891c      	ldrh	r4, [r3, #8]
 800e94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	899b      	ldrh	r3, [r3, #12]
 800e956:	b29b      	uxth	r3, r3
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fa fc9b 	bl	8009294 <lwip_htons>
 800e95e:	4603      	mov	r3, r0
 800e960:	b2db      	uxtb	r3, r3
 800e962:	f003 0303 	and.w	r3, r3, #3
 800e966:	2b00      	cmp	r3, #0
 800e968:	d001      	beq.n	800e96e <tcp_receive+0xe6e>
 800e96a:	2301      	movs	r3, #1
 800e96c:	e000      	b.n	800e970 <tcp_receive+0xe70>
 800e96e:	2300      	movs	r3, #0
 800e970:	4423      	add	r3, r4
 800e972:	b29a      	uxth	r2, r3
 800e974:	4b2a      	ldr	r3, [pc, #168]	; (800ea20 <tcp_receive+0xf20>)
 800e976:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e978:	4b29      	ldr	r3, [pc, #164]	; (800ea20 <tcp_receive+0xf20>)
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	461a      	mov	r2, r3
 800e97e:	4b26      	ldr	r3, [pc, #152]	; (800ea18 <tcp_receive+0xf18>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	441a      	add	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e988:	6879      	ldr	r1, [r7, #4]
 800e98a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e98c:	440b      	add	r3, r1
 800e98e:	429a      	cmp	r2, r3
 800e990:	d019      	beq.n	800e9c6 <tcp_receive+0xec6>
 800e992:	4b24      	ldr	r3, [pc, #144]	; (800ea24 <tcp_receive+0xf24>)
 800e994:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e998:	4923      	ldr	r1, [pc, #140]	; (800ea28 <tcp_receive+0xf28>)
 800e99a:	4824      	ldr	r0, [pc, #144]	; (800ea2c <tcp_receive+0xf2c>)
 800e99c:	f004 fda2 	bl	80134e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e9a0:	e011      	b.n	800e9c6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f47f aea4 	bne.w	800e6f8 <tcp_receive+0xbf8>
 800e9b0:	e00a      	b.n	800e9c8 <tcp_receive+0xec8>
                break;
 800e9b2:	bf00      	nop
 800e9b4:	e008      	b.n	800e9c8 <tcp_receive+0xec8>
                break;
 800e9b6:	bf00      	nop
 800e9b8:	e006      	b.n	800e9c8 <tcp_receive+0xec8>
                  break;
 800e9ba:	bf00      	nop
 800e9bc:	e004      	b.n	800e9c8 <tcp_receive+0xec8>
                  break;
 800e9be:	bf00      	nop
 800e9c0:	e002      	b.n	800e9c8 <tcp_receive+0xec8>
                  break;
 800e9c2:	bf00      	nop
 800e9c4:	e000      	b.n	800e9c8 <tcp_receive+0xec8>
                break;
 800e9c6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f001 fa33 	bl	800fe34 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e9ce:	e003      	b.n	800e9d8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f001 fa2f 	bl	800fe34 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e9d6:	e01a      	b.n	800ea0e <tcp_receive+0xf0e>
 800e9d8:	e019      	b.n	800ea0e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e9da:	4b0f      	ldr	r3, [pc, #60]	; (800ea18 <tcp_receive+0xf18>)
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	db0a      	blt.n	800e9fe <tcp_receive+0xefe>
 800e9e8:	4b0b      	ldr	r3, [pc, #44]	; (800ea18 <tcp_receive+0xf18>)
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f0:	6879      	ldr	r1, [r7, #4]
 800e9f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e9f4:	440b      	add	r3, r1
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	dd07      	ble.n	800ea0e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	8b5b      	ldrh	r3, [r3, #26]
 800ea02:	f043 0302 	orr.w	r3, r3, #2
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ea0c:	e7ff      	b.n	800ea0e <tcp_receive+0xf0e>
 800ea0e:	bf00      	nop
 800ea10:	3750      	adds	r7, #80	; 0x50
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bdb0      	pop	{r4, r5, r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20008ee8 	.word	0x20008ee8
 800ea1c:	20008ec8 	.word	0x20008ec8
 800ea20:	20008ef2 	.word	0x20008ef2
 800ea24:	08015b64 	.word	0x08015b64
 800ea28:	08015f0c 	.word	0x08015f0c
 800ea2c:	08015bb0 	.word	0x08015bb0

0800ea30 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ea36:	4b15      	ldr	r3, [pc, #84]	; (800ea8c <tcp_get_next_optbyte+0x5c>)
 800ea38:	881b      	ldrh	r3, [r3, #0]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	b291      	uxth	r1, r2
 800ea3e:	4a13      	ldr	r2, [pc, #76]	; (800ea8c <tcp_get_next_optbyte+0x5c>)
 800ea40:	8011      	strh	r1, [r2, #0]
 800ea42:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ea44:	4b12      	ldr	r3, [pc, #72]	; (800ea90 <tcp_get_next_optbyte+0x60>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d004      	beq.n	800ea56 <tcp_get_next_optbyte+0x26>
 800ea4c:	4b11      	ldr	r3, [pc, #68]	; (800ea94 <tcp_get_next_optbyte+0x64>)
 800ea4e:	881b      	ldrh	r3, [r3, #0]
 800ea50:	88fa      	ldrh	r2, [r7, #6]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d208      	bcs.n	800ea68 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ea56:	4b10      	ldr	r3, [pc, #64]	; (800ea98 <tcp_get_next_optbyte+0x68>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	3314      	adds	r3, #20
 800ea5c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ea5e:	88fb      	ldrh	r3, [r7, #6]
 800ea60:	683a      	ldr	r2, [r7, #0]
 800ea62:	4413      	add	r3, r2
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	e00b      	b.n	800ea80 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ea68:	88fb      	ldrh	r3, [r7, #6]
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	4b09      	ldr	r3, [pc, #36]	; (800ea94 <tcp_get_next_optbyte+0x64>)
 800ea6e:	881b      	ldrh	r3, [r3, #0]
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	1ad3      	subs	r3, r2, r3
 800ea74:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ea76:	4b06      	ldr	r3, [pc, #24]	; (800ea90 <tcp_get_next_optbyte+0x60>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	797b      	ldrb	r3, [r7, #5]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	20008ee4 	.word	0x20008ee4
 800ea90:	20008ee0 	.word	0x20008ee0
 800ea94:	20008ede 	.word	0x20008ede
 800ea98:	20008ed8 	.word	0x20008ed8

0800ea9c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d106      	bne.n	800eab8 <tcp_parseopt+0x1c>
 800eaaa:	4b32      	ldr	r3, [pc, #200]	; (800eb74 <tcp_parseopt+0xd8>)
 800eaac:	f240 727d 	movw	r2, #1917	; 0x77d
 800eab0:	4931      	ldr	r1, [pc, #196]	; (800eb78 <tcp_parseopt+0xdc>)
 800eab2:	4832      	ldr	r0, [pc, #200]	; (800eb7c <tcp_parseopt+0xe0>)
 800eab4:	f004 fd16 	bl	80134e4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800eab8:	4b31      	ldr	r3, [pc, #196]	; (800eb80 <tcp_parseopt+0xe4>)
 800eaba:	881b      	ldrh	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d055      	beq.n	800eb6c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800eac0:	4b30      	ldr	r3, [pc, #192]	; (800eb84 <tcp_parseopt+0xe8>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	801a      	strh	r2, [r3, #0]
 800eac6:	e045      	b.n	800eb54 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800eac8:	f7ff ffb2 	bl	800ea30 <tcp_get_next_optbyte>
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d006      	beq.n	800eae4 <tcp_parseopt+0x48>
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	dc2b      	bgt.n	800eb32 <tcp_parseopt+0x96>
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d041      	beq.n	800eb62 <tcp_parseopt+0xc6>
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d127      	bne.n	800eb32 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800eae2:	e037      	b.n	800eb54 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800eae4:	f7ff ffa4 	bl	800ea30 <tcp_get_next_optbyte>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b04      	cmp	r3, #4
 800eaec:	d13b      	bne.n	800eb66 <tcp_parseopt+0xca>
 800eaee:	4b25      	ldr	r3, [pc, #148]	; (800eb84 <tcp_parseopt+0xe8>)
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	4a22      	ldr	r2, [pc, #136]	; (800eb80 <tcp_parseopt+0xe4>)
 800eaf6:	8812      	ldrh	r2, [r2, #0]
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	da34      	bge.n	800eb66 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800eafc:	f7ff ff98 	bl	800ea30 <tcp_get_next_optbyte>
 800eb00:	4603      	mov	r3, r0
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	021b      	lsls	r3, r3, #8
 800eb06:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800eb08:	f7ff ff92 	bl	800ea30 <tcp_get_next_optbyte>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	b29a      	uxth	r2, r3
 800eb10:	89bb      	ldrh	r3, [r7, #12]
 800eb12:	4313      	orrs	r3, r2
 800eb14:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800eb16:	89bb      	ldrh	r3, [r7, #12]
 800eb18:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eb1c:	d804      	bhi.n	800eb28 <tcp_parseopt+0x8c>
 800eb1e:	89bb      	ldrh	r3, [r7, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d001      	beq.n	800eb28 <tcp_parseopt+0x8c>
 800eb24:	89ba      	ldrh	r2, [r7, #12]
 800eb26:	e001      	b.n	800eb2c <tcp_parseopt+0x90>
 800eb28:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800eb30:	e010      	b.n	800eb54 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800eb32:	f7ff ff7d 	bl	800ea30 <tcp_get_next_optbyte>
 800eb36:	4603      	mov	r3, r0
 800eb38:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800eb3a:	7afb      	ldrb	r3, [r7, #11]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d914      	bls.n	800eb6a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800eb40:	7afb      	ldrb	r3, [r7, #11]
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	4b0f      	ldr	r3, [pc, #60]	; (800eb84 <tcp_parseopt+0xe8>)
 800eb46:	881b      	ldrh	r3, [r3, #0]
 800eb48:	4413      	add	r3, r2
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	3b02      	subs	r3, #2
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	4b0c      	ldr	r3, [pc, #48]	; (800eb84 <tcp_parseopt+0xe8>)
 800eb52:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800eb54:	4b0b      	ldr	r3, [pc, #44]	; (800eb84 <tcp_parseopt+0xe8>)
 800eb56:	881a      	ldrh	r2, [r3, #0]
 800eb58:	4b09      	ldr	r3, [pc, #36]	; (800eb80 <tcp_parseopt+0xe4>)
 800eb5a:	881b      	ldrh	r3, [r3, #0]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d3b3      	bcc.n	800eac8 <tcp_parseopt+0x2c>
 800eb60:	e004      	b.n	800eb6c <tcp_parseopt+0xd0>
          return;
 800eb62:	bf00      	nop
 800eb64:	e002      	b.n	800eb6c <tcp_parseopt+0xd0>
            return;
 800eb66:	bf00      	nop
 800eb68:	e000      	b.n	800eb6c <tcp_parseopt+0xd0>
            return;
 800eb6a:	bf00      	nop
      }
    }
  }
}
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	08015b64 	.word	0x08015b64
 800eb78:	08015fc8 	.word	0x08015fc8
 800eb7c:	08015bb0 	.word	0x08015bb0
 800eb80:	20008edc 	.word	0x20008edc
 800eb84:	20008ee4 	.word	0x20008ee4

0800eb88 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800eb8c:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <tcp_trigger_input_pcb_close+0x1c>)
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	f043 0310 	orr.w	r3, r3, #16
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	4b03      	ldr	r3, [pc, #12]	; (800eba4 <tcp_trigger_input_pcb_close+0x1c>)
 800eb98:	701a      	strb	r2, [r3, #0]
}
 800eb9a:	bf00      	nop
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr
 800eba4:	20008ef5 	.word	0x20008ef5

0800eba8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00a      	beq.n	800ebd0 <tcp_route+0x28>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	7a1b      	ldrb	r3, [r3, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d006      	beq.n	800ebd0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	7a1b      	ldrb	r3, [r3, #8]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fb fab8 	bl	800a13c <netif_get_by_index>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	e003      	b.n	800ebd8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f003 fa37 	bl	8012044 <ip4_route>
 800ebd6:	4603      	mov	r3, r0
  }
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ebe0:	b590      	push	{r4, r7, lr}
 800ebe2:	b087      	sub	sp, #28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	603b      	str	r3, [r7, #0]
 800ebec:	4613      	mov	r3, r2
 800ebee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d105      	bne.n	800ec02 <tcp_create_segment+0x22>
 800ebf6:	4b44      	ldr	r3, [pc, #272]	; (800ed08 <tcp_create_segment+0x128>)
 800ebf8:	22a3      	movs	r2, #163	; 0xa3
 800ebfa:	4944      	ldr	r1, [pc, #272]	; (800ed0c <tcp_create_segment+0x12c>)
 800ebfc:	4844      	ldr	r0, [pc, #272]	; (800ed10 <tcp_create_segment+0x130>)
 800ebfe:	f004 fc71 	bl	80134e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d105      	bne.n	800ec14 <tcp_create_segment+0x34>
 800ec08:	4b3f      	ldr	r3, [pc, #252]	; (800ed08 <tcp_create_segment+0x128>)
 800ec0a:	22a4      	movs	r2, #164	; 0xa4
 800ec0c:	4941      	ldr	r1, [pc, #260]	; (800ed14 <tcp_create_segment+0x134>)
 800ec0e:	4840      	ldr	r0, [pc, #256]	; (800ed10 <tcp_create_segment+0x130>)
 800ec10:	f004 fc68 	bl	80134e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ec14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ec22:	2003      	movs	r0, #3
 800ec24:	f7fa ff8c 	bl	8009b40 <memp_malloc>
 800ec28:	6138      	str	r0, [r7, #16]
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d104      	bne.n	800ec3a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ec30:	68b8      	ldr	r0, [r7, #8]
 800ec32:	f7fb fde3 	bl	800a7fc <pbuf_free>
    return NULL;
 800ec36:	2300      	movs	r3, #0
 800ec38:	e061      	b.n	800ecfe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ec40:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	2200      	movs	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	891a      	ldrh	r2, [r3, #8]
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d205      	bcs.n	800ec66 <tcp_create_segment+0x86>
 800ec5a:	4b2b      	ldr	r3, [pc, #172]	; (800ed08 <tcp_create_segment+0x128>)
 800ec5c:	22b0      	movs	r2, #176	; 0xb0
 800ec5e:	492e      	ldr	r1, [pc, #184]	; (800ed18 <tcp_create_segment+0x138>)
 800ec60:	482b      	ldr	r0, [pc, #172]	; (800ed10 <tcp_create_segment+0x130>)
 800ec62:	f004 fc3f 	bl	80134e4 <iprintf>
  seg->len = p->tot_len - optlen;
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	891a      	ldrh	r2, [r3, #8]
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ec76:	2114      	movs	r1, #20
 800ec78:	68b8      	ldr	r0, [r7, #8]
 800ec7a:	f7fb fd29 	bl	800a6d0 <pbuf_add_header>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d004      	beq.n	800ec8e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ec84:	6938      	ldr	r0, [r7, #16]
 800ec86:	f7fd f8ce 	bl	800be26 <tcp_seg_free>
    return NULL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e037      	b.n	800ecfe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	685a      	ldr	r2, [r3, #4]
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	8ada      	ldrh	r2, [r3, #22]
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	68dc      	ldr	r4, [r3, #12]
 800eca0:	4610      	mov	r0, r2
 800eca2:	f7fa faf7 	bl	8009294 <lwip_htons>
 800eca6:	4603      	mov	r3, r0
 800eca8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	8b1a      	ldrh	r2, [r3, #24]
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	68dc      	ldr	r4, [r3, #12]
 800ecb2:	4610      	mov	r0, r2
 800ecb4:	f7fa faee 	bl	8009294 <lwip_htons>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	68dc      	ldr	r4, [r3, #12]
 800ecc0:	6838      	ldr	r0, [r7, #0]
 800ecc2:	f7fa fafc 	bl	80092be <lwip_htonl>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ecca:	7dfb      	ldrb	r3, [r7, #23]
 800eccc:	089b      	lsrs	r3, r3, #2
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	3305      	adds	r3, #5
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	031b      	lsls	r3, r3, #12
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	79fb      	ldrb	r3, [r7, #7]
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	4313      	orrs	r3, r2
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	68dc      	ldr	r4, [r3, #12]
 800ece6:	4610      	mov	r0, r2
 800ece8:	f7fa fad4 	bl	8009294 <lwip_htons>
 800ecec:	4603      	mov	r3, r0
 800ecee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	749a      	strb	r2, [r3, #18]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	74da      	strb	r2, [r3, #19]
  return seg;
 800ecfc:	693b      	ldr	r3, [r7, #16]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	371c      	adds	r7, #28
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd90      	pop	{r4, r7, pc}
 800ed06:	bf00      	nop
 800ed08:	08015fe4 	.word	0x08015fe4
 800ed0c:	08016018 	.word	0x08016018
 800ed10:	08016038 	.word	0x08016038
 800ed14:	08016060 	.word	0x08016060
 800ed18:	08016084 	.word	0x08016084

0800ed1c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ed1c:	b590      	push	{r4, r7, lr}
 800ed1e:	b08b      	sub	sp, #44	; 0x2c
 800ed20:	af02      	add	r7, sp, #8
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	460b      	mov	r3, r1
 800ed26:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	61fb      	str	r3, [r7, #28]
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ed30:	2300      	movs	r3, #0
 800ed32:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d106      	bne.n	800ed48 <tcp_split_unsent_seg+0x2c>
 800ed3a:	4b95      	ldr	r3, [pc, #596]	; (800ef90 <tcp_split_unsent_seg+0x274>)
 800ed3c:	f240 324b 	movw	r2, #843	; 0x34b
 800ed40:	4994      	ldr	r1, [pc, #592]	; (800ef94 <tcp_split_unsent_seg+0x278>)
 800ed42:	4895      	ldr	r0, [pc, #596]	; (800ef98 <tcp_split_unsent_seg+0x27c>)
 800ed44:	f004 fbce 	bl	80134e4 <iprintf>

  useg = pcb->unsent;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed4c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d102      	bne.n	800ed5a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ed54:	f04f 33ff 	mov.w	r3, #4294967295
 800ed58:	e116      	b.n	800ef88 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ed5a:	887b      	ldrh	r3, [r7, #2]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d109      	bne.n	800ed74 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ed60:	4b8b      	ldr	r3, [pc, #556]	; (800ef90 <tcp_split_unsent_seg+0x274>)
 800ed62:	f240 3253 	movw	r2, #851	; 0x353
 800ed66:	498d      	ldr	r1, [pc, #564]	; (800ef9c <tcp_split_unsent_seg+0x280>)
 800ed68:	488b      	ldr	r0, [pc, #556]	; (800ef98 <tcp_split_unsent_seg+0x27c>)
 800ed6a:	f004 fbbb 	bl	80134e4 <iprintf>
    return ERR_VAL;
 800ed6e:	f06f 0305 	mvn.w	r3, #5
 800ed72:	e109      	b.n	800ef88 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	891b      	ldrh	r3, [r3, #8]
 800ed78:	887a      	ldrh	r2, [r7, #2]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d301      	bcc.n	800ed82 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e102      	b.n	800ef88 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed86:	887a      	ldrh	r2, [r7, #2]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d906      	bls.n	800ed9a <tcp_split_unsent_seg+0x7e>
 800ed8c:	4b80      	ldr	r3, [pc, #512]	; (800ef90 <tcp_split_unsent_seg+0x274>)
 800ed8e:	f240 325b 	movw	r2, #859	; 0x35b
 800ed92:	4983      	ldr	r1, [pc, #524]	; (800efa0 <tcp_split_unsent_seg+0x284>)
 800ed94:	4880      	ldr	r0, [pc, #512]	; (800ef98 <tcp_split_unsent_seg+0x27c>)
 800ed96:	f004 fba5 	bl	80134e4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	891b      	ldrh	r3, [r3, #8]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d106      	bne.n	800edb0 <tcp_split_unsent_seg+0x94>
 800eda2:	4b7b      	ldr	r3, [pc, #492]	; (800ef90 <tcp_split_unsent_seg+0x274>)
 800eda4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800eda8:	497e      	ldr	r1, [pc, #504]	; (800efa4 <tcp_split_unsent_seg+0x288>)
 800edaa:	487b      	ldr	r0, [pc, #492]	; (800ef98 <tcp_split_unsent_seg+0x27c>)
 800edac:	f004 fb9a 	bl	80134e4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	7a9b      	ldrb	r3, [r3, #10]
 800edb4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	f003 0304 	and.w	r3, r3, #4
 800edc0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	891a      	ldrh	r2, [r3, #8]
 800edc6:	887b      	ldrh	r3, [r7, #2]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800edcc:	7bbb      	ldrb	r3, [r7, #14]
 800edce:	b29a      	uxth	r2, r3
 800edd0:	89bb      	ldrh	r3, [r7, #12]
 800edd2:	4413      	add	r3, r2
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edda:	4619      	mov	r1, r3
 800eddc:	2036      	movs	r0, #54	; 0x36
 800edde:	f7fb fa29 	bl	800a234 <pbuf_alloc>
 800ede2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f000 80b7 	beq.w	800ef5a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	891a      	ldrh	r2, [r3, #8]
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	891b      	ldrh	r3, [r3, #8]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	b29a      	uxth	r2, r3
 800edfa:	887b      	ldrh	r3, [r7, #2]
 800edfc:	4413      	add	r3, r2
 800edfe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	6858      	ldr	r0, [r3, #4]
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	685a      	ldr	r2, [r3, #4]
 800ee08:	7bbb      	ldrb	r3, [r7, #14]
 800ee0a:	18d1      	adds	r1, r2, r3
 800ee0c:	897b      	ldrh	r3, [r7, #10]
 800ee0e:	89ba      	ldrh	r2, [r7, #12]
 800ee10:	f7fb feee 	bl	800abf0 <pbuf_copy_partial>
 800ee14:	4603      	mov	r3, r0
 800ee16:	461a      	mov	r2, r3
 800ee18:	89bb      	ldrh	r3, [r7, #12]
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	f040 809f 	bne.w	800ef5e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	899b      	ldrh	r3, [r3, #12]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fa fa33 	bl	8009294 <lwip_htons>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee36:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ee38:	2300      	movs	r3, #0
 800ee3a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ee3c:	7efb      	ldrb	r3, [r7, #27]
 800ee3e:	f003 0308 	and.w	r3, r3, #8
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d007      	beq.n	800ee56 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ee46:	7efb      	ldrb	r3, [r7, #27]
 800ee48:	f023 0308 	bic.w	r3, r3, #8
 800ee4c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ee4e:	7ebb      	ldrb	r3, [r7, #26]
 800ee50:	f043 0308 	orr.w	r3, r3, #8
 800ee54:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ee56:	7efb      	ldrb	r3, [r7, #27]
 800ee58:	f003 0301 	and.w	r3, r3, #1
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d007      	beq.n	800ee70 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ee60:	7efb      	ldrb	r3, [r7, #27]
 800ee62:	f023 0301 	bic.w	r3, r3, #1
 800ee66:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ee68:	7ebb      	ldrb	r3, [r7, #26]
 800ee6a:	f043 0301 	orr.w	r3, r3, #1
 800ee6e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fa fa21 	bl	80092be <lwip_htonl>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	887b      	ldrh	r3, [r7, #2]
 800ee80:	18d1      	adds	r1, r2, r3
 800ee82:	7eba      	ldrb	r2, [r7, #26]
 800ee84:	7bfb      	ldrb	r3, [r7, #15]
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	460b      	mov	r3, r1
 800ee8a:	6939      	ldr	r1, [r7, #16]
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7ff fea7 	bl	800ebe0 <tcp_create_segment>
 800ee92:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d063      	beq.n	800ef62 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fb fd34 	bl	800a90c <pbuf_clen>
 800eea4:	4603      	mov	r3, r0
 800eea6:	461a      	mov	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eeae:	1a9b      	subs	r3, r3, r2
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	6858      	ldr	r0, [r3, #4]
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	891a      	ldrh	r2, [r3, #8]
 800eec2:	89bb      	ldrh	r3, [r7, #12]
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	4619      	mov	r1, r3
 800eeca:	f7fb fb11 	bl	800a4f0 <pbuf_realloc>
  useg->len -= remainder;
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	891a      	ldrh	r2, [r3, #8]
 800eed2:	89bb      	ldrh	r3, [r7, #12]
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	899b      	ldrh	r3, [r3, #12]
 800eee2:	b29c      	uxth	r4, r3
 800eee4:	7efb      	ldrb	r3, [r7, #27]
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fa f9d3 	bl	8009294 <lwip_htons>
 800eeee:	4603      	mov	r3, r0
 800eef0:	461a      	mov	r2, r3
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	4322      	orrs	r2, r4
 800eef8:	b292      	uxth	r2, r2
 800eefa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fb fd03 	bl	800a90c <pbuf_clen>
 800ef06:	4603      	mov	r3, r0
 800ef08:	461a      	mov	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef10:	4413      	add	r3, r2
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fb fcf4 	bl	800a90c <pbuf_clen>
 800ef24:	4603      	mov	r3, r0
 800ef26:	461a      	mov	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef2e:	4413      	add	r3, r2
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	69fa      	ldr	r2, [r7, #28]
 800ef44:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d103      	bne.n	800ef56 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ef56:	2300      	movs	r3, #0
 800ef58:	e016      	b.n	800ef88 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ef5a:	bf00      	nop
 800ef5c:	e002      	b.n	800ef64 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ef5e:	bf00      	nop
 800ef60:	e000      	b.n	800ef64 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ef62:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d006      	beq.n	800ef78 <tcp_split_unsent_seg+0x25c>
 800ef6a:	4b09      	ldr	r3, [pc, #36]	; (800ef90 <tcp_split_unsent_seg+0x274>)
 800ef6c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ef70:	490d      	ldr	r1, [pc, #52]	; (800efa8 <tcp_split_unsent_seg+0x28c>)
 800ef72:	4809      	ldr	r0, [pc, #36]	; (800ef98 <tcp_split_unsent_seg+0x27c>)
 800ef74:	f004 fab6 	bl	80134e4 <iprintf>
  if (p != NULL) {
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d002      	beq.n	800ef84 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ef7e:	6938      	ldr	r0, [r7, #16]
 800ef80:	f7fb fc3c 	bl	800a7fc <pbuf_free>
  }

  return ERR_MEM;
 800ef84:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3724      	adds	r7, #36	; 0x24
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd90      	pop	{r4, r7, pc}
 800ef90:	08015fe4 	.word	0x08015fe4
 800ef94:	08016378 	.word	0x08016378
 800ef98:	08016038 	.word	0x08016038
 800ef9c:	0801639c 	.word	0x0801639c
 800efa0:	080163c0 	.word	0x080163c0
 800efa4:	080163d0 	.word	0x080163d0
 800efa8:	080163e0 	.word	0x080163e0

0800efac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800efac:	b590      	push	{r4, r7, lr}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d106      	bne.n	800efc8 <tcp_send_fin+0x1c>
 800efba:	4b21      	ldr	r3, [pc, #132]	; (800f040 <tcp_send_fin+0x94>)
 800efbc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800efc0:	4920      	ldr	r1, [pc, #128]	; (800f044 <tcp_send_fin+0x98>)
 800efc2:	4821      	ldr	r0, [pc, #132]	; (800f048 <tcp_send_fin+0x9c>)
 800efc4:	f004 fa8e 	bl	80134e4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d02e      	beq.n	800f02e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd4:	60fb      	str	r3, [r7, #12]
 800efd6:	e002      	b.n	800efde <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1f8      	bne.n	800efd8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	899b      	ldrh	r3, [r3, #12]
 800efec:	b29b      	uxth	r3, r3
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fa f950 	bl	8009294 <lwip_htons>
 800eff4:	4603      	mov	r3, r0
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	f003 0307 	and.w	r3, r3, #7
 800effc:	2b00      	cmp	r3, #0
 800effe:	d116      	bne.n	800f02e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	899b      	ldrh	r3, [r3, #12]
 800f006:	b29c      	uxth	r4, r3
 800f008:	2001      	movs	r0, #1
 800f00a:	f7fa f943 	bl	8009294 <lwip_htons>
 800f00e:	4603      	mov	r3, r0
 800f010:	461a      	mov	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	4322      	orrs	r2, r4
 800f018:	b292      	uxth	r2, r2
 800f01a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	8b5b      	ldrh	r3, [r3, #26]
 800f020:	f043 0320 	orr.w	r3, r3, #32
 800f024:	b29a      	uxth	r2, r3
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f02a:	2300      	movs	r3, #0
 800f02c:	e004      	b.n	800f038 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f02e:	2101      	movs	r1, #1
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 f80b 	bl	800f04c <tcp_enqueue_flags>
 800f036:	4603      	mov	r3, r0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3714      	adds	r7, #20
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd90      	pop	{r4, r7, pc}
 800f040:	08015fe4 	.word	0x08015fe4
 800f044:	080163ec 	.word	0x080163ec
 800f048:	08016038 	.word	0x08016038

0800f04c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b08a      	sub	sp, #40	; 0x28
 800f050:	af02      	add	r7, sp, #8
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	460b      	mov	r3, r1
 800f056:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f058:	2300      	movs	r3, #0
 800f05a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f05c:	2300      	movs	r3, #0
 800f05e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f060:	78fb      	ldrb	r3, [r7, #3]
 800f062:	f003 0303 	and.w	r3, r3, #3
 800f066:	2b00      	cmp	r3, #0
 800f068:	d106      	bne.n	800f078 <tcp_enqueue_flags+0x2c>
 800f06a:	4b67      	ldr	r3, [pc, #412]	; (800f208 <tcp_enqueue_flags+0x1bc>)
 800f06c:	f240 4211 	movw	r2, #1041	; 0x411
 800f070:	4966      	ldr	r1, [pc, #408]	; (800f20c <tcp_enqueue_flags+0x1c0>)
 800f072:	4867      	ldr	r0, [pc, #412]	; (800f210 <tcp_enqueue_flags+0x1c4>)
 800f074:	f004 fa36 	bl	80134e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d106      	bne.n	800f08c <tcp_enqueue_flags+0x40>
 800f07e:	4b62      	ldr	r3, [pc, #392]	; (800f208 <tcp_enqueue_flags+0x1bc>)
 800f080:	f240 4213 	movw	r2, #1043	; 0x413
 800f084:	4963      	ldr	r1, [pc, #396]	; (800f214 <tcp_enqueue_flags+0x1c8>)
 800f086:	4862      	ldr	r0, [pc, #392]	; (800f210 <tcp_enqueue_flags+0x1c4>)
 800f088:	f004 fa2c 	bl	80134e4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f08c:	78fb      	ldrb	r3, [r7, #3]
 800f08e:	f003 0302 	and.w	r3, r3, #2
 800f092:	2b00      	cmp	r3, #0
 800f094:	d001      	beq.n	800f09a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f096:	2301      	movs	r3, #1
 800f098:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f09a:	7ffb      	ldrb	r3, [r7, #31]
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	f003 0304 	and.w	r3, r3, #4
 800f0a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f0a6:	7dfb      	ldrb	r3, [r7, #23]
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	2036      	movs	r0, #54	; 0x36
 800f0b2:	f7fb f8bf 	bl	800a234 <pbuf_alloc>
 800f0b6:	6138      	str	r0, [r7, #16]
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d109      	bne.n	800f0d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	8b5b      	ldrh	r3, [r3, #26]
 800f0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d0:	e095      	b.n	800f1fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	895a      	ldrh	r2, [r3, #10]
 800f0d6:	7dfb      	ldrb	r3, [r7, #23]
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d206      	bcs.n	800f0ec <tcp_enqueue_flags+0xa0>
 800f0de:	4b4a      	ldr	r3, [pc, #296]	; (800f208 <tcp_enqueue_flags+0x1bc>)
 800f0e0:	f240 4239 	movw	r2, #1081	; 0x439
 800f0e4:	494c      	ldr	r1, [pc, #304]	; (800f218 <tcp_enqueue_flags+0x1cc>)
 800f0e6:	484a      	ldr	r0, [pc, #296]	; (800f210 <tcp_enqueue_flags+0x1c4>)
 800f0e8:	f004 f9fc 	bl	80134e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f0f0:	78fa      	ldrb	r2, [r7, #3]
 800f0f2:	7ffb      	ldrb	r3, [r7, #31]
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	6939      	ldr	r1, [r7, #16]
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7ff fd70 	bl	800ebe0 <tcp_create_segment>
 800f100:	60f8      	str	r0, [r7, #12]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d109      	bne.n	800f11c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	8b5b      	ldrh	r3, [r3, #26]
 800f10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f110:	b29a      	uxth	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f116:	f04f 33ff 	mov.w	r3, #4294967295
 800f11a:	e070      	b.n	800f1fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	f003 0303 	and.w	r3, r3, #3
 800f124:	2b00      	cmp	r3, #0
 800f126:	d006      	beq.n	800f136 <tcp_enqueue_flags+0xea>
 800f128:	4b37      	ldr	r3, [pc, #220]	; (800f208 <tcp_enqueue_flags+0x1bc>)
 800f12a:	f240 4242 	movw	r2, #1090	; 0x442
 800f12e:	493b      	ldr	r1, [pc, #236]	; (800f21c <tcp_enqueue_flags+0x1d0>)
 800f130:	4837      	ldr	r0, [pc, #220]	; (800f210 <tcp_enqueue_flags+0x1c4>)
 800f132:	f004 f9d7 	bl	80134e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	891b      	ldrh	r3, [r3, #8]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d006      	beq.n	800f14c <tcp_enqueue_flags+0x100>
 800f13e:	4b32      	ldr	r3, [pc, #200]	; (800f208 <tcp_enqueue_flags+0x1bc>)
 800f140:	f240 4243 	movw	r2, #1091	; 0x443
 800f144:	4936      	ldr	r1, [pc, #216]	; (800f220 <tcp_enqueue_flags+0x1d4>)
 800f146:	4832      	ldr	r0, [pc, #200]	; (800f210 <tcp_enqueue_flags+0x1c4>)
 800f148:	f004 f9cc 	bl	80134e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f150:	2b00      	cmp	r3, #0
 800f152:	d103      	bne.n	800f15c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	66da      	str	r2, [r3, #108]	; 0x6c
 800f15a:	e00d      	b.n	800f178 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f160:	61bb      	str	r3, [r7, #24]
 800f162:	e002      	b.n	800f16a <tcp_enqueue_flags+0x11e>
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	61bb      	str	r3, [r7, #24]
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1f8      	bne.n	800f164 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f180:	78fb      	ldrb	r3, [r7, #3]
 800f182:	f003 0302 	and.w	r3, r3, #2
 800f186:	2b00      	cmp	r3, #0
 800f188:	d104      	bne.n	800f194 <tcp_enqueue_flags+0x148>
 800f18a:	78fb      	ldrb	r3, [r7, #3]
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d004      	beq.n	800f19e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f198:	1c5a      	adds	r2, r3, #1
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f19e:	78fb      	ldrb	r3, [r7, #3]
 800f1a0:	f003 0301 	and.w	r3, r3, #1
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d006      	beq.n	800f1b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	8b5b      	ldrh	r3, [r3, #26]
 800f1ac:	f043 0320 	orr.w	r3, r3, #32
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fb fba6 	bl	800a90c <pbuf_clen>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1ca:	4413      	add	r3, r2
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00e      	beq.n	800f1fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d10a      	bne.n	800f1fc <tcp_enqueue_flags+0x1b0>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <tcp_enqueue_flags+0x1b0>
 800f1ee:	4b06      	ldr	r3, [pc, #24]	; (800f208 <tcp_enqueue_flags+0x1bc>)
 800f1f0:	f240 4265 	movw	r2, #1125	; 0x465
 800f1f4:	490b      	ldr	r1, [pc, #44]	; (800f224 <tcp_enqueue_flags+0x1d8>)
 800f1f6:	4806      	ldr	r0, [pc, #24]	; (800f210 <tcp_enqueue_flags+0x1c4>)
 800f1f8:	f004 f974 	bl	80134e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3720      	adds	r7, #32
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	08015fe4 	.word	0x08015fe4
 800f20c:	08016408 	.word	0x08016408
 800f210:	08016038 	.word	0x08016038
 800f214:	08016460 	.word	0x08016460
 800f218:	08016480 	.word	0x08016480
 800f21c:	080164bc 	.word	0x080164bc
 800f220:	080164d4 	.word	0x080164d4
 800f224:	08016500 	.word	0x08016500

0800f228 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f228:	b5b0      	push	{r4, r5, r7, lr}
 800f22a:	b08a      	sub	sp, #40	; 0x28
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d106      	bne.n	800f244 <tcp_output+0x1c>
 800f236:	4b8a      	ldr	r3, [pc, #552]	; (800f460 <tcp_output+0x238>)
 800f238:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f23c:	4989      	ldr	r1, [pc, #548]	; (800f464 <tcp_output+0x23c>)
 800f23e:	488a      	ldr	r0, [pc, #552]	; (800f468 <tcp_output+0x240>)
 800f240:	f004 f950 	bl	80134e4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	7d1b      	ldrb	r3, [r3, #20]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d106      	bne.n	800f25a <tcp_output+0x32>
 800f24c:	4b84      	ldr	r3, [pc, #528]	; (800f460 <tcp_output+0x238>)
 800f24e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f252:	4986      	ldr	r1, [pc, #536]	; (800f46c <tcp_output+0x244>)
 800f254:	4884      	ldr	r0, [pc, #528]	; (800f468 <tcp_output+0x240>)
 800f256:	f004 f945 	bl	80134e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f25a:	4b85      	ldr	r3, [pc, #532]	; (800f470 <tcp_output+0x248>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	429a      	cmp	r2, r3
 800f262:	d101      	bne.n	800f268 <tcp_output+0x40>
    return ERR_OK;
 800f264:	2300      	movs	r3, #0
 800f266:	e1ce      	b.n	800f606 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f274:	4293      	cmp	r3, r2
 800f276:	bf28      	it	cs
 800f278:	4613      	movcs	r3, r2
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f282:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10b      	bne.n	800f2a2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	8b5b      	ldrh	r3, [r3, #26]
 800f28e:	f003 0302 	and.w	r3, r3, #2
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 81aa 	beq.w	800f5ec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 fdcb 	bl	800fe34 <tcp_send_empty_ack>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	e1b1      	b.n	800f606 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f2a2:	6879      	ldr	r1, [r7, #4]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff fc7c 	bl	800eba8 <tcp_route>
 800f2b0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d102      	bne.n	800f2be <tcp_output+0x96>
    return ERR_RTE;
 800f2b8:	f06f 0303 	mvn.w	r3, #3
 800f2bc:	e1a3      	b.n	800f606 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d003      	beq.n	800f2cc <tcp_output+0xa4>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d111      	bne.n	800f2f0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <tcp_output+0xb0>
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	e000      	b.n	800f2da <tcp_output+0xb2>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d102      	bne.n	800f2e8 <tcp_output+0xc0>
      return ERR_RTE;
 800f2e2:	f06f 0303 	mvn.w	r3, #3
 800f2e6:	e18e      	b.n	800f606 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7f9 ffe1 	bl	80092be <lwip_htonl>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f306:	8912      	ldrh	r2, [r2, #8]
 800f308:	4413      	add	r3, r2
 800f30a:	69ba      	ldr	r2, [r7, #24]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d227      	bcs.n	800f360 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f316:	461a      	mov	r2, r3
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d114      	bne.n	800f348 <tcp_output+0x120>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f322:	2b00      	cmp	r3, #0
 800f324:	d110      	bne.n	800f348 <tcp_output+0x120>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d10b      	bne.n	800f348 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2201      	movs	r2, #1
 800f33c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2200      	movs	r2, #0
 800f344:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	8b5b      	ldrh	r3, [r3, #26]
 800f34c:	f003 0302 	and.w	r3, r3, #2
 800f350:	2b00      	cmp	r3, #0
 800f352:	f000 814d 	beq.w	800f5f0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 fd6c 	bl	800fe34 <tcp_send_empty_ack>
 800f35c:	4603      	mov	r3, r0
 800f35e:	e152      	b.n	800f606 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f36c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f36e:	6a3b      	ldr	r3, [r7, #32]
 800f370:	2b00      	cmp	r3, #0
 800f372:	f000 811c 	beq.w	800f5ae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f376:	e002      	b.n	800f37e <tcp_output+0x156>
 800f378:	6a3b      	ldr	r3, [r7, #32]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	623b      	str	r3, [r7, #32]
 800f37e:	6a3b      	ldr	r3, [r7, #32]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1f8      	bne.n	800f378 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f386:	e112      	b.n	800f5ae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	899b      	ldrh	r3, [r3, #12]
 800f38e:	b29b      	uxth	r3, r3
 800f390:	4618      	mov	r0, r3
 800f392:	f7f9 ff7f 	bl	8009294 <lwip_htons>
 800f396:	4603      	mov	r3, r0
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	f003 0304 	and.w	r3, r3, #4
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d006      	beq.n	800f3b0 <tcp_output+0x188>
 800f3a2:	4b2f      	ldr	r3, [pc, #188]	; (800f460 <tcp_output+0x238>)
 800f3a4:	f240 5236 	movw	r2, #1334	; 0x536
 800f3a8:	4932      	ldr	r1, [pc, #200]	; (800f474 <tcp_output+0x24c>)
 800f3aa:	482f      	ldr	r0, [pc, #188]	; (800f468 <tcp_output+0x240>)
 800f3ac:	f004 f89a 	bl	80134e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d01f      	beq.n	800f3f8 <tcp_output+0x1d0>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	8b5b      	ldrh	r3, [r3, #26]
 800f3bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d119      	bne.n	800f3f8 <tcp_output+0x1d0>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00b      	beq.n	800f3e4 <tcp_output+0x1bc>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d110      	bne.n	800f3f8 <tcp_output+0x1d0>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3da:	891a      	ldrh	r2, [r3, #8]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d209      	bcs.n	800f3f8 <tcp_output+0x1d0>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d004      	beq.n	800f3f8 <tcp_output+0x1d0>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3f4:	2b08      	cmp	r3, #8
 800f3f6:	d901      	bls.n	800f3fc <tcp_output+0x1d4>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	e000      	b.n	800f3fe <tcp_output+0x1d6>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d106      	bne.n	800f410 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	8b5b      	ldrh	r3, [r3, #26]
 800f406:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f000 80e4 	beq.w	800f5d8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	7d1b      	ldrb	r3, [r3, #20]
 800f414:	2b02      	cmp	r3, #2
 800f416:	d00d      	beq.n	800f434 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	899b      	ldrh	r3, [r3, #12]
 800f41e:	b29c      	uxth	r4, r3
 800f420:	2010      	movs	r0, #16
 800f422:	f7f9 ff37 	bl	8009294 <lwip_htons>
 800f426:	4603      	mov	r3, r0
 800f428:	461a      	mov	r2, r3
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	4322      	orrs	r2, r4
 800f430:	b292      	uxth	r2, r2
 800f432:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f434:	697a      	ldr	r2, [r7, #20]
 800f436:	6879      	ldr	r1, [r7, #4]
 800f438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f43a:	f000 f909 	bl	800f650 <tcp_output_segment>
 800f43e:	4603      	mov	r3, r0
 800f440:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d016      	beq.n	800f478 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	8b5b      	ldrh	r3, [r3, #26]
 800f44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f452:	b29a      	uxth	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	835a      	strh	r2, [r3, #26]
      return err;
 800f458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f45c:	e0d3      	b.n	800f606 <tcp_output+0x3de>
 800f45e:	bf00      	nop
 800f460:	08015fe4 	.word	0x08015fe4
 800f464:	08016528 	.word	0x08016528
 800f468:	08016038 	.word	0x08016038
 800f46c:	08016540 	.word	0x08016540
 800f470:	20008efc 	.word	0x20008efc
 800f474:	08016568 	.word	0x08016568
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	7d1b      	ldrb	r3, [r3, #20]
 800f484:	2b02      	cmp	r3, #2
 800f486:	d006      	beq.n	800f496 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	8b5b      	ldrh	r3, [r3, #26]
 800f48c:	f023 0303 	bic.w	r3, r3, #3
 800f490:	b29a      	uxth	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f9 ff0e 	bl	80092be <lwip_htonl>
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	891b      	ldrh	r3, [r3, #8]
 800f4a8:	461d      	mov	r5, r3
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	899b      	ldrh	r3, [r3, #12]
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7f9 feee 	bl	8009294 <lwip_htons>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	f003 0303 	and.w	r3, r3, #3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <tcp_output+0x2a0>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e000      	b.n	800f4ca <tcp_output+0x2a2>
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	442b      	add	r3, r5
 800f4cc:	4423      	add	r3, r4
 800f4ce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	da02      	bge.n	800f4e2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	891b      	ldrh	r3, [r3, #8]
 800f4e6:	461c      	mov	r4, r3
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	899b      	ldrh	r3, [r3, #12]
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7f9 fecf 	bl	8009294 <lwip_htons>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	b2db      	uxtb	r3, r3
 800f4fa:	f003 0303 	and.w	r3, r3, #3
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d001      	beq.n	800f506 <tcp_output+0x2de>
 800f502:	2301      	movs	r3, #1
 800f504:	e000      	b.n	800f508 <tcp_output+0x2e0>
 800f506:	2300      	movs	r3, #0
 800f508:	4423      	add	r3, r4
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d049      	beq.n	800f5a2 <tcp_output+0x37a>
      seg->next = NULL;
 800f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f510:	2200      	movs	r2, #0
 800f512:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d105      	bne.n	800f528 <tcp_output+0x300>
        pcb->unacked = seg;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f520:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f524:	623b      	str	r3, [r7, #32]
 800f526:	e03f      	b.n	800f5a8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	4618      	mov	r0, r3
 800f530:	f7f9 fec5 	bl	80092be <lwip_htonl>
 800f534:	4604      	mov	r4, r0
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f9 febe 	bl	80092be <lwip_htonl>
 800f542:	4603      	mov	r3, r0
 800f544:	1ae3      	subs	r3, r4, r3
 800f546:	2b00      	cmp	r3, #0
 800f548:	da24      	bge.n	800f594 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	3370      	adds	r3, #112	; 0x70
 800f54e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f550:	e002      	b.n	800f558 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d011      	beq.n	800f584 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	4618      	mov	r0, r3
 800f56a:	f7f9 fea8 	bl	80092be <lwip_htonl>
 800f56e:	4604      	mov	r4, r0
 800f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	4618      	mov	r0, r3
 800f578:	f7f9 fea1 	bl	80092be <lwip_htonl>
 800f57c:	4603      	mov	r3, r0
 800f57e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f580:	2b00      	cmp	r3, #0
 800f582:	dbe6      	blt.n	800f552 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	e009      	b.n	800f5a8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f594:	6a3b      	ldr	r3, [r7, #32]
 800f596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f598:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f59a:	6a3b      	ldr	r3, [r7, #32]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	623b      	str	r3, [r7, #32]
 800f5a0:	e002      	b.n	800f5a8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f5a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5a4:	f7fc fc3f 	bl	800be26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d012      	beq.n	800f5da <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	68db      	ldr	r3, [r3, #12]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7f9 fe7f 	bl	80092be <lwip_htonl>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ca:	8912      	ldrh	r2, [r2, #8]
 800f5cc:	4413      	add	r3, r2
  while (seg != NULL &&
 800f5ce:	69ba      	ldr	r2, [r7, #24]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	f4bf aed9 	bcs.w	800f388 <tcp_output+0x160>
 800f5d6:	e000      	b.n	800f5da <tcp_output+0x3b2>
      break;
 800f5d8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d108      	bne.n	800f5f4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f5ea:	e004      	b.n	800f5f6 <tcp_output+0x3ce>
    goto output_done;
 800f5ec:	bf00      	nop
 800f5ee:	e002      	b.n	800f5f6 <tcp_output+0x3ce>
    goto output_done;
 800f5f0:	bf00      	nop
 800f5f2:	e000      	b.n	800f5f6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f5f4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	8b5b      	ldrh	r3, [r3, #26]
 800f5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f604:	2300      	movs	r3, #0
}
 800f606:	4618      	mov	r0, r3
 800f608:	3728      	adds	r7, #40	; 0x28
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bdb0      	pop	{r4, r5, r7, pc}
 800f60e:	bf00      	nop

0800f610 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d106      	bne.n	800f62c <tcp_output_segment_busy+0x1c>
 800f61e:	4b09      	ldr	r3, [pc, #36]	; (800f644 <tcp_output_segment_busy+0x34>)
 800f620:	f240 529a 	movw	r2, #1434	; 0x59a
 800f624:	4908      	ldr	r1, [pc, #32]	; (800f648 <tcp_output_segment_busy+0x38>)
 800f626:	4809      	ldr	r0, [pc, #36]	; (800f64c <tcp_output_segment_busy+0x3c>)
 800f628:	f003 ff5c 	bl	80134e4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	7b9b      	ldrb	r3, [r3, #14]
 800f632:	2b01      	cmp	r3, #1
 800f634:	d001      	beq.n	800f63a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f636:	2301      	movs	r3, #1
 800f638:	e000      	b.n	800f63c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	08015fe4 	.word	0x08015fe4
 800f648:	08016580 	.word	0x08016580
 800f64c:	08016038 	.word	0x08016038

0800f650 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f650:	b5b0      	push	{r4, r5, r7, lr}
 800f652:	b08c      	sub	sp, #48	; 0x30
 800f654:	af04      	add	r7, sp, #16
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d106      	bne.n	800f670 <tcp_output_segment+0x20>
 800f662:	4b63      	ldr	r3, [pc, #396]	; (800f7f0 <tcp_output_segment+0x1a0>)
 800f664:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f668:	4962      	ldr	r1, [pc, #392]	; (800f7f4 <tcp_output_segment+0x1a4>)
 800f66a:	4863      	ldr	r0, [pc, #396]	; (800f7f8 <tcp_output_segment+0x1a8>)
 800f66c:	f003 ff3a 	bl	80134e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d106      	bne.n	800f684 <tcp_output_segment+0x34>
 800f676:	4b5e      	ldr	r3, [pc, #376]	; (800f7f0 <tcp_output_segment+0x1a0>)
 800f678:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f67c:	495f      	ldr	r1, [pc, #380]	; (800f7fc <tcp_output_segment+0x1ac>)
 800f67e:	485e      	ldr	r0, [pc, #376]	; (800f7f8 <tcp_output_segment+0x1a8>)
 800f680:	f003 ff30 	bl	80134e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d106      	bne.n	800f698 <tcp_output_segment+0x48>
 800f68a:	4b59      	ldr	r3, [pc, #356]	; (800f7f0 <tcp_output_segment+0x1a0>)
 800f68c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f690:	495b      	ldr	r1, [pc, #364]	; (800f800 <tcp_output_segment+0x1b0>)
 800f692:	4859      	ldr	r0, [pc, #356]	; (800f7f8 <tcp_output_segment+0x1a8>)
 800f694:	f003 ff26 	bl	80134e4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f7ff ffb9 	bl	800f610 <tcp_output_segment_busy>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d001      	beq.n	800f6a8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	e09f      	b.n	800f7e8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	68dc      	ldr	r4, [r3, #12]
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	f7f9 fe04 	bl	80092be <lwip_htonl>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	68dc      	ldr	r4, [r3, #12]
 800f6c2:	4610      	mov	r0, r2
 800f6c4:	f7f9 fde6 	bl	8009294 <lwip_htons>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f6d4:	441a      	add	r2, r3
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	3314      	adds	r3, #20
 800f6e0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	7a9b      	ldrb	r3, [r3, #10]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d015      	beq.n	800f71a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	6879      	ldr	r1, [r7, #4]
 800f6f6:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f6fa:	f7fc fe8b 	bl	800c414 <tcp_eff_send_mss_netif>
 800f6fe:	4603      	mov	r3, r0
 800f700:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f702:	8b7b      	ldrh	r3, [r7, #26]
 800f704:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f708:	4618      	mov	r0, r3
 800f70a:	f7f9 fdd8 	bl	80092be <lwip_htonl>
 800f70e:	4602      	mov	r2, r0
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	3304      	adds	r3, #4
 800f718:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f720:	2b00      	cmp	r3, #0
 800f722:	da02      	bge.n	800f72a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	2200      	movs	r2, #0
 800f728:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10c      	bne.n	800f74c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f732:	4b34      	ldr	r3, [pc, #208]	; (800f804 <tcp_output_segment+0x1b4>)
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	f7f9 fdbc 	bl	80092be <lwip_htonl>
 800f746:	4602      	mov	r2, r0
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	68da      	ldr	r2, [r3, #12]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	8959      	ldrh	r1, [r3, #10]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	8b3a      	ldrh	r2, [r7, #24]
 800f766:	1a8a      	subs	r2, r1, r2
 800f768:	b292      	uxth	r2, r2
 800f76a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	8919      	ldrh	r1, [r3, #8]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	8b3a      	ldrh	r2, [r7, #24]
 800f778:	1a8a      	subs	r2, r1, r2
 800f77a:	b292      	uxth	r2, r2
 800f77c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	68d2      	ldr	r2, [r2, #12]
 800f786:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	741a      	strb	r2, [r3, #16]
 800f790:	2200      	movs	r2, #0
 800f792:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	f103 0214 	add.w	r2, r3, #20
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	7a9b      	ldrb	r3, [r3, #10]
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	f003 0304 	and.w	r3, r3, #4
 800f7a6:	4413      	add	r3, r2
 800f7a8:	69fa      	ldr	r2, [r7, #28]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d006      	beq.n	800f7bc <tcp_output_segment+0x16c>
 800f7ae:	4b10      	ldr	r3, [pc, #64]	; (800f7f0 <tcp_output_segment+0x1a0>)
 800f7b0:	f240 621c 	movw	r2, #1564	; 0x61c
 800f7b4:	4914      	ldr	r1, [pc, #80]	; (800f808 <tcp_output_segment+0x1b8>)
 800f7b6:	4810      	ldr	r0, [pc, #64]	; (800f7f8 <tcp_output_segment+0x1a8>)
 800f7b8:	f003 fe94 	bl	80134e4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6858      	ldr	r0, [r3, #4]
 800f7c0:	68b9      	ldr	r1, [r7, #8]
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	1d1c      	adds	r4, r3, #4
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	7add      	ldrb	r5, [r3, #11]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	7a9b      	ldrb	r3, [r3, #10]
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	9202      	str	r2, [sp, #8]
 800f7d2:	2206      	movs	r2, #6
 800f7d4:	9201      	str	r2, [sp, #4]
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	462b      	mov	r3, r5
 800f7da:	4622      	mov	r2, r4
 800f7dc:	f002 fdf0 	bl	80123c0 <ip4_output_if>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f7e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3720      	adds	r7, #32
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bdb0      	pop	{r4, r5, r7, pc}
 800f7f0:	08015fe4 	.word	0x08015fe4
 800f7f4:	080165a8 	.word	0x080165a8
 800f7f8:	08016038 	.word	0x08016038
 800f7fc:	080165c8 	.word	0x080165c8
 800f800:	080165e8 	.word	0x080165e8
 800f804:	20008eb0 	.word	0x20008eb0
 800f808:	0801660c 	.word	0x0801660c

0800f80c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f80c:	b5b0      	push	{r4, r5, r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d106      	bne.n	800f828 <tcp_rexmit_rto_prepare+0x1c>
 800f81a:	4b31      	ldr	r3, [pc, #196]	; (800f8e0 <tcp_rexmit_rto_prepare+0xd4>)
 800f81c:	f240 6263 	movw	r2, #1635	; 0x663
 800f820:	4930      	ldr	r1, [pc, #192]	; (800f8e4 <tcp_rexmit_rto_prepare+0xd8>)
 800f822:	4831      	ldr	r0, [pc, #196]	; (800f8e8 <tcp_rexmit_rto_prepare+0xdc>)
 800f824:	f003 fe5e 	bl	80134e4 <iprintf>

  if (pcb->unacked == NULL) {
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d102      	bne.n	800f836 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f830:	f06f 0305 	mvn.w	r3, #5
 800f834:	e050      	b.n	800f8d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f83a:	60fb      	str	r3, [r7, #12]
 800f83c:	e00b      	b.n	800f856 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f83e:	68f8      	ldr	r0, [r7, #12]
 800f840:	f7ff fee6 	bl	800f610 <tcp_output_segment_busy>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d002      	beq.n	800f850 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f84a:	f06f 0305 	mvn.w	r3, #5
 800f84e:	e043      	b.n	800f8d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	60fb      	str	r3, [r7, #12]
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d1ef      	bne.n	800f83e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7ff fed6 	bl	800f610 <tcp_output_segment_busy>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d002      	beq.n	800f870 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f86a:	f06f 0305 	mvn.w	r3, #5
 800f86e:	e033      	b.n	800f8d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2200      	movs	r2, #0
 800f884:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	8b5b      	ldrh	r3, [r3, #26]
 800f88a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f88e:	b29a      	uxth	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7f9 fd0f 	bl	80092be <lwip_htonl>
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	891b      	ldrh	r3, [r3, #8]
 800f8a6:	461d      	mov	r5, r3
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	899b      	ldrh	r3, [r3, #12]
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7f9 fcef 	bl	8009294 <lwip_htons>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	f003 0303 	and.w	r3, r3, #3
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d001      	beq.n	800f8c6 <tcp_rexmit_rto_prepare+0xba>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e000      	b.n	800f8c8 <tcp_rexmit_rto_prepare+0xbc>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	442b      	add	r3, r5
 800f8ca:	18e2      	adds	r2, r4, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bdb0      	pop	{r4, r5, r7, pc}
 800f8e0:	08015fe4 	.word	0x08015fe4
 800f8e4:	08016620 	.word	0x08016620
 800f8e8:	08016038 	.word	0x08016038

0800f8ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d106      	bne.n	800f908 <tcp_rexmit_rto_commit+0x1c>
 800f8fa:	4b0d      	ldr	r3, [pc, #52]	; (800f930 <tcp_rexmit_rto_commit+0x44>)
 800f8fc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f900:	490c      	ldr	r1, [pc, #48]	; (800f934 <tcp_rexmit_rto_commit+0x48>)
 800f902:	480d      	ldr	r0, [pc, #52]	; (800f938 <tcp_rexmit_rto_commit+0x4c>)
 800f904:	f003 fdee 	bl	80134e4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f90e:	2bff      	cmp	r3, #255	; 0xff
 800f910:	d007      	beq.n	800f922 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f918:	3301      	adds	r3, #1
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7ff fc80 	bl	800f228 <tcp_output>
}
 800f928:	bf00      	nop
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	08015fe4 	.word	0x08015fe4
 800f934:	08016644 	.word	0x08016644
 800f938:	08016038 	.word	0x08016038

0800f93c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d106      	bne.n	800f958 <tcp_rexmit_rto+0x1c>
 800f94a:	4b0a      	ldr	r3, [pc, #40]	; (800f974 <tcp_rexmit_rto+0x38>)
 800f94c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f950:	4909      	ldr	r1, [pc, #36]	; (800f978 <tcp_rexmit_rto+0x3c>)
 800f952:	480a      	ldr	r0, [pc, #40]	; (800f97c <tcp_rexmit_rto+0x40>)
 800f954:	f003 fdc6 	bl	80134e4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f7ff ff57 	bl	800f80c <tcp_rexmit_rto_prepare>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d102      	bne.n	800f96a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7ff ffc1 	bl	800f8ec <tcp_rexmit_rto_commit>
  }
}
 800f96a:	bf00      	nop
 800f96c:	3708      	adds	r7, #8
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	08015fe4 	.word	0x08015fe4
 800f978:	08016668 	.word	0x08016668
 800f97c:	08016038 	.word	0x08016038

0800f980 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f980:	b590      	push	{r4, r7, lr}
 800f982:	b085      	sub	sp, #20
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d106      	bne.n	800f99c <tcp_rexmit+0x1c>
 800f98e:	4b2f      	ldr	r3, [pc, #188]	; (800fa4c <tcp_rexmit+0xcc>)
 800f990:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f994:	492e      	ldr	r1, [pc, #184]	; (800fa50 <tcp_rexmit+0xd0>)
 800f996:	482f      	ldr	r0, [pc, #188]	; (800fa54 <tcp_rexmit+0xd4>)
 800f998:	f003 fda4 	bl	80134e4 <iprintf>

  if (pcb->unacked == NULL) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d102      	bne.n	800f9aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f9a4:	f06f 0305 	mvn.w	r3, #5
 800f9a8:	e04c      	b.n	800fa44 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f9b0:	68b8      	ldr	r0, [r7, #8]
 800f9b2:	f7ff fe2d 	bl	800f610 <tcp_output_segment_busy>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d002      	beq.n	800f9c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f9bc:	f06f 0305 	mvn.w	r3, #5
 800f9c0:	e040      	b.n	800fa44 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	336c      	adds	r3, #108	; 0x6c
 800f9ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f9d0:	e002      	b.n	800f9d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d011      	beq.n	800fa04 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7f9 fc68 	bl	80092be <lwip_htonl>
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f9 fc61 	bl	80092be <lwip_htonl>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	dbe6      	blt.n	800f9d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d103      	bne.n	800fa22 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa28:	2bff      	cmp	r3, #255	; 0xff
 800fa2a:	d007      	beq.n	800fa3c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa32:	3301      	adds	r3, #1
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fa42:	2300      	movs	r3, #0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3714      	adds	r7, #20
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd90      	pop	{r4, r7, pc}
 800fa4c:	08015fe4 	.word	0x08015fe4
 800fa50:	08016684 	.word	0x08016684
 800fa54:	08016038 	.word	0x08016038

0800fa58 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d106      	bne.n	800fa74 <tcp_rexmit_fast+0x1c>
 800fa66:	4b2a      	ldr	r3, [pc, #168]	; (800fb10 <tcp_rexmit_fast+0xb8>)
 800fa68:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fa6c:	4929      	ldr	r1, [pc, #164]	; (800fb14 <tcp_rexmit_fast+0xbc>)
 800fa6e:	482a      	ldr	r0, [pc, #168]	; (800fb18 <tcp_rexmit_fast+0xc0>)
 800fa70:	f003 fd38 	bl	80134e4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d044      	beq.n	800fb06 <tcp_rexmit_fast+0xae>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	8b5b      	ldrh	r3, [r3, #26]
 800fa80:	f003 0304 	and.w	r3, r3, #4
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d13e      	bne.n	800fb06 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f7ff ff79 	bl	800f980 <tcp_rexmit>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d138      	bne.n	800fb06 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800faa0:	4293      	cmp	r3, r2
 800faa2:	bf28      	it	cs
 800faa4:	4613      	movcs	r3, r2
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	0fda      	lsrs	r2, r3, #31
 800faaa:	4413      	add	r3, r2
 800faac:	105b      	asrs	r3, r3, #1
 800faae:	b29a      	uxth	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fabc:	461a      	mov	r2, r3
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d206      	bcs.n	800fad6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800facc:	005b      	lsls	r3, r3, #1
 800face:	b29a      	uxth	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fae0:	4619      	mov	r1, r3
 800fae2:	0049      	lsls	r1, r1, #1
 800fae4:	440b      	add	r3, r1
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	4413      	add	r3, r2
 800faea:	b29a      	uxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	8b5b      	ldrh	r3, [r3, #26]
 800faf6:	f043 0304 	orr.w	r3, r3, #4
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fb06:	bf00      	nop
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	08015fe4 	.word	0x08015fe4
 800fb14:	0801669c 	.word	0x0801669c
 800fb18:	08016038 	.word	0x08016038

0800fb1c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	607b      	str	r3, [r7, #4]
 800fb26:	460b      	mov	r3, r1
 800fb28:	817b      	strh	r3, [r7, #10]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fb2e:	897a      	ldrh	r2, [r7, #10]
 800fb30:	893b      	ldrh	r3, [r7, #8]
 800fb32:	4413      	add	r3, r2
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	3314      	adds	r3, #20
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb3e:	4619      	mov	r1, r3
 800fb40:	2022      	movs	r0, #34	; 0x22
 800fb42:	f7fa fb77 	bl	800a234 <pbuf_alloc>
 800fb46:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d04d      	beq.n	800fbea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fb4e:	897b      	ldrh	r3, [r7, #10]
 800fb50:	3313      	adds	r3, #19
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	8952      	ldrh	r2, [r2, #10]
 800fb56:	4293      	cmp	r3, r2
 800fb58:	db06      	blt.n	800fb68 <tcp_output_alloc_header_common+0x4c>
 800fb5a:	4b26      	ldr	r3, [pc, #152]	; (800fbf4 <tcp_output_alloc_header_common+0xd8>)
 800fb5c:	f240 7223 	movw	r2, #1827	; 0x723
 800fb60:	4925      	ldr	r1, [pc, #148]	; (800fbf8 <tcp_output_alloc_header_common+0xdc>)
 800fb62:	4826      	ldr	r0, [pc, #152]	; (800fbfc <tcp_output_alloc_header_common+0xe0>)
 800fb64:	f003 fcbe 	bl	80134e4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fb6e:	8c3b      	ldrh	r3, [r7, #32]
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7f9 fb8f 	bl	8009294 <lwip_htons>
 800fb76:	4603      	mov	r3, r0
 800fb78:	461a      	mov	r2, r3
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fb7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7f9 fb87 	bl	8009294 <lwip_htons>
 800fb86:	4603      	mov	r3, r0
 800fb88:	461a      	mov	r2, r3
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f7f9 fb92 	bl	80092be <lwip_htonl>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fba0:	897b      	ldrh	r3, [r7, #10]
 800fba2:	089b      	lsrs	r3, r3, #2
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	3305      	adds	r3, #5
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	031b      	lsls	r3, r3, #12
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7f9 fb6b 	bl	8009294 <lwip_htons>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fbc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7f9 fb63 	bl	8009294 <lwip_htons>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	741a      	strb	r2, [r3, #16]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	749a      	strb	r2, [r3, #18]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fbea:	697b      	ldr	r3, [r7, #20]
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3718      	adds	r7, #24
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	08015fe4 	.word	0x08015fe4
 800fbf8:	080166bc 	.word	0x080166bc
 800fbfc:	08016038 	.word	0x08016038

0800fc00 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fc00:	b5b0      	push	{r4, r5, r7, lr}
 800fc02:	b08a      	sub	sp, #40	; 0x28
 800fc04:	af04      	add	r7, sp, #16
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	607b      	str	r3, [r7, #4]
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	817b      	strh	r3, [r7, #10]
 800fc0e:	4613      	mov	r3, r2
 800fc10:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d106      	bne.n	800fc26 <tcp_output_alloc_header+0x26>
 800fc18:	4b15      	ldr	r3, [pc, #84]	; (800fc70 <tcp_output_alloc_header+0x70>)
 800fc1a:	f240 7242 	movw	r2, #1858	; 0x742
 800fc1e:	4915      	ldr	r1, [pc, #84]	; (800fc74 <tcp_output_alloc_header+0x74>)
 800fc20:	4815      	ldr	r0, [pc, #84]	; (800fc78 <tcp_output_alloc_header+0x78>)
 800fc22:	f003 fc5f 	bl	80134e4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	8adb      	ldrh	r3, [r3, #22]
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	8b12      	ldrh	r2, [r2, #24]
 800fc32:	68f9      	ldr	r1, [r7, #12]
 800fc34:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fc36:	893d      	ldrh	r5, [r7, #8]
 800fc38:	897c      	ldrh	r4, [r7, #10]
 800fc3a:	9103      	str	r1, [sp, #12]
 800fc3c:	2110      	movs	r1, #16
 800fc3e:	9102      	str	r1, [sp, #8]
 800fc40:	9201      	str	r2, [sp, #4]
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	462a      	mov	r2, r5
 800fc48:	4621      	mov	r1, r4
 800fc4a:	f7ff ff67 	bl	800fb1c <tcp_output_alloc_header_common>
 800fc4e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d006      	beq.n	800fc64 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fc5e:	441a      	add	r2, r3
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fc64:	697b      	ldr	r3, [r7, #20]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3718      	adds	r7, #24
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	08015fe4 	.word	0x08015fe4
 800fc74:	080166ec 	.word	0x080166ec
 800fc78:	08016038 	.word	0x08016038

0800fc7c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	4611      	mov	r1, r2
 800fc88:	461a      	mov	r2, r3
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	71fb      	strb	r3, [r7, #7]
 800fc8e:	4613      	mov	r3, r2
 800fc90:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d106      	bne.n	800fcaa <tcp_output_fill_options+0x2e>
 800fc9c:	4b13      	ldr	r3, [pc, #76]	; (800fcec <tcp_output_fill_options+0x70>)
 800fc9e:	f240 7256 	movw	r2, #1878	; 0x756
 800fca2:	4913      	ldr	r1, [pc, #76]	; (800fcf0 <tcp_output_fill_options+0x74>)
 800fca4:	4813      	ldr	r0, [pc, #76]	; (800fcf4 <tcp_output_fill_options+0x78>)
 800fca6:	f003 fc1d 	bl	80134e4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	3314      	adds	r3, #20
 800fcb4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	f103 0214 	add.w	r2, r3, #20
 800fcbc:	8bfb      	ldrh	r3, [r7, #30]
 800fcbe:	009b      	lsls	r3, r3, #2
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	79fb      	ldrb	r3, [r7, #7]
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	f003 0304 	and.w	r3, r3, #4
 800fcca:	440b      	add	r3, r1
 800fccc:	4413      	add	r3, r2
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d006      	beq.n	800fce2 <tcp_output_fill_options+0x66>
 800fcd4:	4b05      	ldr	r3, [pc, #20]	; (800fcec <tcp_output_fill_options+0x70>)
 800fcd6:	f240 7275 	movw	r2, #1909	; 0x775
 800fcda:	4907      	ldr	r1, [pc, #28]	; (800fcf8 <tcp_output_fill_options+0x7c>)
 800fcdc:	4805      	ldr	r0, [pc, #20]	; (800fcf4 <tcp_output_fill_options+0x78>)
 800fcde:	f003 fc01 	bl	80134e4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fce2:	bf00      	nop
 800fce4:	3720      	adds	r7, #32
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	08015fe4 	.word	0x08015fe4
 800fcf0:	08016714 	.word	0x08016714
 800fcf4:	08016038 	.word	0x08016038
 800fcf8:	0801660c 	.word	0x0801660c

0800fcfc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b08a      	sub	sp, #40	; 0x28
 800fd00:	af04      	add	r7, sp, #16
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
 800fd08:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d106      	bne.n	800fd1e <tcp_output_control_segment+0x22>
 800fd10:	4b1c      	ldr	r3, [pc, #112]	; (800fd84 <tcp_output_control_segment+0x88>)
 800fd12:	f240 7287 	movw	r2, #1927	; 0x787
 800fd16:	491c      	ldr	r1, [pc, #112]	; (800fd88 <tcp_output_control_segment+0x8c>)
 800fd18:	481c      	ldr	r0, [pc, #112]	; (800fd8c <tcp_output_control_segment+0x90>)
 800fd1a:	f003 fbe3 	bl	80134e4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fd1e:	683a      	ldr	r2, [r7, #0]
 800fd20:	6879      	ldr	r1, [r7, #4]
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7fe ff40 	bl	800eba8 <tcp_route>
 800fd28:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d102      	bne.n	800fd36 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fd30:	23fc      	movs	r3, #252	; 0xfc
 800fd32:	75fb      	strb	r3, [r7, #23]
 800fd34:	e01c      	b.n	800fd70 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d006      	beq.n	800fd4a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	7adb      	ldrb	r3, [r3, #11]
 800fd40:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	7a9b      	ldrb	r3, [r3, #10]
 800fd46:	757b      	strb	r3, [r7, #21]
 800fd48:	e003      	b.n	800fd52 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fd4a:	23ff      	movs	r3, #255	; 0xff
 800fd4c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fd52:	7dba      	ldrb	r2, [r7, #22]
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	9302      	str	r3, [sp, #8]
 800fd58:	2306      	movs	r3, #6
 800fd5a:	9301      	str	r3, [sp, #4]
 800fd5c:	7d7b      	ldrb	r3, [r7, #21]
 800fd5e:	9300      	str	r3, [sp, #0]
 800fd60:	4613      	mov	r3, r2
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	68b8      	ldr	r0, [r7, #8]
 800fd68:	f002 fb2a 	bl	80123c0 <ip4_output_if>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fd70:	68b8      	ldr	r0, [r7, #8]
 800fd72:	f7fa fd43 	bl	800a7fc <pbuf_free>
  return err;
 800fd76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	08015fe4 	.word	0x08015fe4
 800fd88:	0801673c 	.word	0x0801673c
 800fd8c:	08016038 	.word	0x08016038

0800fd90 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fd90:	b590      	push	{r4, r7, lr}
 800fd92:	b08b      	sub	sp, #44	; 0x2c
 800fd94:	af04      	add	r7, sp, #16
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
 800fd9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d106      	bne.n	800fdb2 <tcp_rst+0x22>
 800fda4:	4b1f      	ldr	r3, [pc, #124]	; (800fe24 <tcp_rst+0x94>)
 800fda6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fdaa:	491f      	ldr	r1, [pc, #124]	; (800fe28 <tcp_rst+0x98>)
 800fdac:	481f      	ldr	r0, [pc, #124]	; (800fe2c <tcp_rst+0x9c>)
 800fdae:	f003 fb99 	bl	80134e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d106      	bne.n	800fdc6 <tcp_rst+0x36>
 800fdb8:	4b1a      	ldr	r3, [pc, #104]	; (800fe24 <tcp_rst+0x94>)
 800fdba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fdbe:	491c      	ldr	r1, [pc, #112]	; (800fe30 <tcp_rst+0xa0>)
 800fdc0:	481a      	ldr	r0, [pc, #104]	; (800fe2c <tcp_rst+0x9c>)
 800fdc2:	f003 fb8f 	bl	80134e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fdca:	f246 0308 	movw	r3, #24584	; 0x6008
 800fdce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fdd0:	7dfb      	ldrb	r3, [r7, #23]
 800fdd2:	b29c      	uxth	r4, r3
 800fdd4:	68b8      	ldr	r0, [r7, #8]
 800fdd6:	f7f9 fa72 	bl	80092be <lwip_htonl>
 800fdda:	4602      	mov	r2, r0
 800fddc:	8abb      	ldrh	r3, [r7, #20]
 800fdde:	9303      	str	r3, [sp, #12]
 800fde0:	2314      	movs	r3, #20
 800fde2:	9302      	str	r3, [sp, #8]
 800fde4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fde6:	9301      	str	r3, [sp, #4]
 800fde8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	4613      	mov	r3, r2
 800fdee:	2200      	movs	r2, #0
 800fdf0:	4621      	mov	r1, r4
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f7ff fe92 	bl	800fb1c <tcp_output_alloc_header_common>
 800fdf8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d00c      	beq.n	800fe1a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fe00:	7dfb      	ldrb	r3, [r7, #23]
 800fe02:	2200      	movs	r2, #0
 800fe04:	6939      	ldr	r1, [r7, #16]
 800fe06:	68f8      	ldr	r0, [r7, #12]
 800fe08:	f7ff ff38 	bl	800fc7c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fe0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0e:	683a      	ldr	r2, [r7, #0]
 800fe10:	6939      	ldr	r1, [r7, #16]
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f7ff ff72 	bl	800fcfc <tcp_output_control_segment>
 800fe18:	e000      	b.n	800fe1c <tcp_rst+0x8c>
    return;
 800fe1a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fe1c:	371c      	adds	r7, #28
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd90      	pop	{r4, r7, pc}
 800fe22:	bf00      	nop
 800fe24:	08015fe4 	.word	0x08015fe4
 800fe28:	08016768 	.word	0x08016768
 800fe2c:	08016038 	.word	0x08016038
 800fe30:	08016784 	.word	0x08016784

0800fe34 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fe34:	b590      	push	{r4, r7, lr}
 800fe36:	b087      	sub	sp, #28
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fe40:	2300      	movs	r3, #0
 800fe42:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d106      	bne.n	800fe58 <tcp_send_empty_ack+0x24>
 800fe4a:	4b28      	ldr	r3, [pc, #160]	; (800feec <tcp_send_empty_ack+0xb8>)
 800fe4c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fe50:	4927      	ldr	r1, [pc, #156]	; (800fef0 <tcp_send_empty_ack+0xbc>)
 800fe52:	4828      	ldr	r0, [pc, #160]	; (800fef4 <tcp_send_empty_ack+0xc0>)
 800fe54:	f003 fb46 	bl	80134e4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fe58:	7dfb      	ldrb	r3, [r7, #23]
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	f003 0304 	and.w	r3, r3, #4
 800fe62:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fe64:	7d7b      	ldrb	r3, [r7, #21]
 800fe66:	b29c      	uxth	r4, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7f9 fa26 	bl	80092be <lwip_htonl>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2200      	movs	r2, #0
 800fe76:	4621      	mov	r1, r4
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7ff fec1 	bl	800fc00 <tcp_output_alloc_header>
 800fe7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d109      	bne.n	800fe9a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	8b5b      	ldrh	r3, [r3, #26]
 800fe8a:	f043 0303 	orr.w	r3, r3, #3
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fe94:	f06f 0301 	mvn.w	r3, #1
 800fe98:	e023      	b.n	800fee2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fe9a:	7dbb      	ldrb	r3, [r7, #22]
 800fe9c:	7dfa      	ldrb	r2, [r7, #23]
 800fe9e:	6939      	ldr	r1, [r7, #16]
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7ff feeb 	bl	800fc7c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	3304      	adds	r3, #4
 800feac:	6939      	ldr	r1, [r7, #16]
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f7ff ff24 	bl	800fcfc <tcp_output_control_segment>
 800feb4:	4603      	mov	r3, r0
 800feb6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800feb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d007      	beq.n	800fed0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	8b5b      	ldrh	r3, [r3, #26]
 800fec4:	f043 0303 	orr.w	r3, r3, #3
 800fec8:	b29a      	uxth	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	835a      	strh	r2, [r3, #26]
 800fece:	e006      	b.n	800fede <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	8b5b      	ldrh	r3, [r3, #26]
 800fed4:	f023 0303 	bic.w	r3, r3, #3
 800fed8:	b29a      	uxth	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fede:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	371c      	adds	r7, #28
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd90      	pop	{r4, r7, pc}
 800feea:	bf00      	nop
 800feec:	08015fe4 	.word	0x08015fe4
 800fef0:	080167a0 	.word	0x080167a0
 800fef4:	08016038 	.word	0x08016038

0800fef8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fef8:	b590      	push	{r4, r7, lr}
 800fefa:	b087      	sub	sp, #28
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ff00:	2300      	movs	r3, #0
 800ff02:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d106      	bne.n	800ff18 <tcp_keepalive+0x20>
 800ff0a:	4b18      	ldr	r3, [pc, #96]	; (800ff6c <tcp_keepalive+0x74>)
 800ff0c:	f640 0224 	movw	r2, #2084	; 0x824
 800ff10:	4917      	ldr	r1, [pc, #92]	; (800ff70 <tcp_keepalive+0x78>)
 800ff12:	4818      	ldr	r0, [pc, #96]	; (800ff74 <tcp_keepalive+0x7c>)
 800ff14:	f003 fae6 	bl	80134e4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ff18:	7dfb      	ldrb	r3, [r7, #23]
 800ff1a:	b29c      	uxth	r4, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff20:	3b01      	subs	r3, #1
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7f9 f9cb 	bl	80092be <lwip_htonl>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f7ff fe66 	bl	800fc00 <tcp_output_alloc_header>
 800ff34:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d102      	bne.n	800ff42 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ff3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff40:	e010      	b.n	800ff64 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ff42:	7dfb      	ldrb	r3, [r7, #23]
 800ff44:	2200      	movs	r2, #0
 800ff46:	6939      	ldr	r1, [r7, #16]
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7ff fe97 	bl	800fc7c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	3304      	adds	r3, #4
 800ff54:	6939      	ldr	r1, [r7, #16]
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7ff fed0 	bl	800fcfc <tcp_output_control_segment>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ff60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	371c      	adds	r7, #28
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd90      	pop	{r4, r7, pc}
 800ff6c:	08015fe4 	.word	0x08015fe4
 800ff70:	080167c0 	.word	0x080167c0
 800ff74:	08016038 	.word	0x08016038

0800ff78 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ff78:	b590      	push	{r4, r7, lr}
 800ff7a:	b08b      	sub	sp, #44	; 0x2c
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ff80:	2300      	movs	r3, #0
 800ff82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d106      	bne.n	800ff9a <tcp_zero_window_probe+0x22>
 800ff8c:	4b4c      	ldr	r3, [pc, #304]	; (80100c0 <tcp_zero_window_probe+0x148>)
 800ff8e:	f640 024f 	movw	r2, #2127	; 0x84f
 800ff92:	494c      	ldr	r1, [pc, #304]	; (80100c4 <tcp_zero_window_probe+0x14c>)
 800ff94:	484c      	ldr	r0, [pc, #304]	; (80100c8 <tcp_zero_window_probe+0x150>)
 800ff96:	f003 faa5 	bl	80134e4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff9e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d101      	bne.n	800ffaa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e086      	b.n	80100b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ffb0:	2bff      	cmp	r3, #255	; 0xff
 800ffb2:	d007      	beq.n	800ffc4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ffba:	3301      	adds	r3, #1
 800ffbc:	b2da      	uxtb	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ffc4:	6a3b      	ldr	r3, [r7, #32]
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	899b      	ldrh	r3, [r3, #12]
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7f9 f961 	bl	8009294 <lwip_htons>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	f003 0301 	and.w	r3, r3, #1
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d005      	beq.n	800ffea <tcp_zero_window_probe+0x72>
 800ffde:	6a3b      	ldr	r3, [r7, #32]
 800ffe0:	891b      	ldrh	r3, [r3, #8]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d101      	bne.n	800ffea <tcp_zero_window_probe+0x72>
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e000      	b.n	800ffec <tcp_zero_window_probe+0x74>
 800ffea:	2300      	movs	r3, #0
 800ffec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ffee:	7ffb      	ldrb	r3, [r7, #31]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	bf0c      	ite	eq
 800fff4:	2301      	moveq	r3, #1
 800fff6:	2300      	movne	r3, #0
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010000:	b299      	uxth	r1, r3
 8010002:	6a3b      	ldr	r3, [r7, #32]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	8bba      	ldrh	r2, [r7, #28]
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7ff fdf8 	bl	800fc00 <tcp_output_alloc_header>
 8010010:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d102      	bne.n	801001e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010018:	f04f 33ff 	mov.w	r3, #4294967295
 801001c:	e04c      	b.n	80100b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010024:	7ffb      	ldrb	r3, [r7, #31]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d011      	beq.n	801004e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	899b      	ldrh	r3, [r3, #12]
 801002e:	b29b      	uxth	r3, r3
 8010030:	b21b      	sxth	r3, r3
 8010032:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010036:	b21c      	sxth	r4, r3
 8010038:	2011      	movs	r0, #17
 801003a:	f7f9 f92b 	bl	8009294 <lwip_htons>
 801003e:	4603      	mov	r3, r0
 8010040:	b21b      	sxth	r3, r3
 8010042:	4323      	orrs	r3, r4
 8010044:	b21b      	sxth	r3, r3
 8010046:	b29a      	uxth	r2, r3
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	819a      	strh	r2, [r3, #12]
 801004c:	e010      	b.n	8010070 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	3314      	adds	r3, #20
 8010054:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010056:	6a3b      	ldr	r3, [r7, #32]
 8010058:	6858      	ldr	r0, [r3, #4]
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	891a      	ldrh	r2, [r3, #8]
 8010060:	6a3b      	ldr	r3, [r7, #32]
 8010062:	891b      	ldrh	r3, [r3, #8]
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	b29b      	uxth	r3, r3
 8010068:	2201      	movs	r2, #1
 801006a:	6939      	ldr	r1, [r7, #16]
 801006c:	f7fa fdc0 	bl	800abf0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	4618      	mov	r0, r3
 8010078:	f7f9 f921 	bl	80092be <lwip_htonl>
 801007c:	4603      	mov	r3, r0
 801007e:	3301      	adds	r3, #1
 8010080:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	2b00      	cmp	r3, #0
 801008c:	da02      	bge.n	8010094 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010098:	2200      	movs	r2, #0
 801009a:	69b9      	ldr	r1, [r7, #24]
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7ff fded 	bl	800fc7c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3304      	adds	r3, #4
 80100a8:	69b9      	ldr	r1, [r7, #24]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7ff fe26 	bl	800fcfc <tcp_output_control_segment>
 80100b0:	4603      	mov	r3, r0
 80100b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80100b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	372c      	adds	r7, #44	; 0x2c
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd90      	pop	{r4, r7, pc}
 80100c0:	08015fe4 	.word	0x08015fe4
 80100c4:	080167dc 	.word	0x080167dc
 80100c8:	08016038 	.word	0x08016038

080100cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80100d4:	f7fa ff0c 	bl	800aef0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80100d8:	4b0a      	ldr	r3, [pc, #40]	; (8010104 <tcpip_tcp_timer+0x38>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d103      	bne.n	80100e8 <tcpip_tcp_timer+0x1c>
 80100e0:	4b09      	ldr	r3, [pc, #36]	; (8010108 <tcpip_tcp_timer+0x3c>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d005      	beq.n	80100f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80100e8:	2200      	movs	r2, #0
 80100ea:	4908      	ldr	r1, [pc, #32]	; (801010c <tcpip_tcp_timer+0x40>)
 80100ec:	20fa      	movs	r0, #250	; 0xfa
 80100ee:	f000 f8f3 	bl	80102d8 <sys_timeout>
 80100f2:	e003      	b.n	80100fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80100f4:	4b06      	ldr	r3, [pc, #24]	; (8010110 <tcpip_tcp_timer+0x44>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	601a      	str	r2, [r3, #0]
  }
}
 80100fa:	bf00      	nop
 80100fc:	bf00      	nop
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	20008ebc 	.word	0x20008ebc
 8010108:	20008ec0 	.word	0x20008ec0
 801010c:	080100cd 	.word	0x080100cd
 8010110:	20008f08 	.word	0x20008f08

08010114 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010118:	4b0a      	ldr	r3, [pc, #40]	; (8010144 <tcp_timer_needed+0x30>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10f      	bne.n	8010140 <tcp_timer_needed+0x2c>
 8010120:	4b09      	ldr	r3, [pc, #36]	; (8010148 <tcp_timer_needed+0x34>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d103      	bne.n	8010130 <tcp_timer_needed+0x1c>
 8010128:	4b08      	ldr	r3, [pc, #32]	; (801014c <tcp_timer_needed+0x38>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d007      	beq.n	8010140 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010130:	4b04      	ldr	r3, [pc, #16]	; (8010144 <tcp_timer_needed+0x30>)
 8010132:	2201      	movs	r2, #1
 8010134:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010136:	2200      	movs	r2, #0
 8010138:	4905      	ldr	r1, [pc, #20]	; (8010150 <tcp_timer_needed+0x3c>)
 801013a:	20fa      	movs	r0, #250	; 0xfa
 801013c:	f000 f8cc 	bl	80102d8 <sys_timeout>
  }
}
 8010140:	bf00      	nop
 8010142:	bd80      	pop	{r7, pc}
 8010144:	20008f08 	.word	0x20008f08
 8010148:	20008ebc 	.word	0x20008ebc
 801014c:	20008ec0 	.word	0x20008ec0
 8010150:	080100cd 	.word	0x080100cd

08010154 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b086      	sub	sp, #24
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010160:	2006      	movs	r0, #6
 8010162:	f7f9 fced 	bl	8009b40 <memp_malloc>
 8010166:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d109      	bne.n	8010182 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d151      	bne.n	8010218 <sys_timeout_abs+0xc4>
 8010174:	4b2a      	ldr	r3, [pc, #168]	; (8010220 <sys_timeout_abs+0xcc>)
 8010176:	22be      	movs	r2, #190	; 0xbe
 8010178:	492a      	ldr	r1, [pc, #168]	; (8010224 <sys_timeout_abs+0xd0>)
 801017a:	482b      	ldr	r0, [pc, #172]	; (8010228 <sys_timeout_abs+0xd4>)
 801017c:	f003 f9b2 	bl	80134e4 <iprintf>
    return;
 8010180:	e04a      	b.n	8010218 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	2200      	movs	r2, #0
 8010186:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	68ba      	ldr	r2, [r7, #8]
 801018c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801019a:	4b24      	ldr	r3, [pc, #144]	; (801022c <sys_timeout_abs+0xd8>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d103      	bne.n	80101aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80101a2:	4a22      	ldr	r2, [pc, #136]	; (801022c <sys_timeout_abs+0xd8>)
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	6013      	str	r3, [r2, #0]
    return;
 80101a8:	e037      	b.n	801021a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	685a      	ldr	r2, [r3, #4]
 80101ae:	4b1f      	ldr	r3, [pc, #124]	; (801022c <sys_timeout_abs+0xd8>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	1ad3      	subs	r3, r2, r3
 80101b6:	0fdb      	lsrs	r3, r3, #31
 80101b8:	f003 0301 	and.w	r3, r3, #1
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d007      	beq.n	80101d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80101c2:	4b1a      	ldr	r3, [pc, #104]	; (801022c <sys_timeout_abs+0xd8>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80101ca:	4a18      	ldr	r2, [pc, #96]	; (801022c <sys_timeout_abs+0xd8>)
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	6013      	str	r3, [r2, #0]
 80101d0:	e023      	b.n	801021a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80101d2:	4b16      	ldr	r3, [pc, #88]	; (801022c <sys_timeout_abs+0xd8>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	617b      	str	r3, [r7, #20]
 80101d8:	e01a      	b.n	8010210 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00b      	beq.n	80101fa <sys_timeout_abs+0xa6>
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	1ad3      	subs	r3, r2, r3
 80101ee:	0fdb      	lsrs	r3, r3, #31
 80101f0:	f003 0301 	and.w	r3, r3, #1
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d007      	beq.n	801020a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	693a      	ldr	r2, [r7, #16]
 8010206:	601a      	str	r2, [r3, #0]
        break;
 8010208:	e007      	b.n	801021a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	617b      	str	r3, [r7, #20]
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d1e1      	bne.n	80101da <sys_timeout_abs+0x86>
 8010216:	e000      	b.n	801021a <sys_timeout_abs+0xc6>
    return;
 8010218:	bf00      	nop
      }
    }
  }
}
 801021a:	3718      	adds	r7, #24
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}
 8010220:	08016800 	.word	0x08016800
 8010224:	08016834 	.word	0x08016834
 8010228:	08016874 	.word	0x08016874
 801022c:	20008f00 	.word	0x20008f00

08010230 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b086      	sub	sp, #24
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	4798      	blx	r3

  now = sys_now();
 8010242:	f7f8 ff99 	bl	8009178 <sys_now>
 8010246:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	4b0f      	ldr	r3, [pc, #60]	; (801028c <lwip_cyclic_timer+0x5c>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4413      	add	r3, r2
 8010252:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010254:	68fa      	ldr	r2, [r7, #12]
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	1ad3      	subs	r3, r2, r3
 801025a:	0fdb      	lsrs	r3, r3, #31
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	b2db      	uxtb	r3, r3
 8010262:	2b00      	cmp	r3, #0
 8010264:	d009      	beq.n	801027a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	4413      	add	r3, r2
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	4907      	ldr	r1, [pc, #28]	; (8010290 <lwip_cyclic_timer+0x60>)
 8010272:	4618      	mov	r0, r3
 8010274:	f7ff ff6e 	bl	8010154 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010278:	e004      	b.n	8010284 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	4904      	ldr	r1, [pc, #16]	; (8010290 <lwip_cyclic_timer+0x60>)
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f7ff ff68 	bl	8010154 <sys_timeout_abs>
}
 8010284:	bf00      	nop
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	20008f04 	.word	0x20008f04
 8010290:	08010231 	.word	0x08010231

08010294 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801029a:	2301      	movs	r3, #1
 801029c:	607b      	str	r3, [r7, #4]
 801029e:	e00e      	b.n	80102be <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80102a0:	4a0b      	ldr	r2, [pc, #44]	; (80102d0 <sys_timeouts_init+0x3c>)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	00db      	lsls	r3, r3, #3
 80102ac:	4a08      	ldr	r2, [pc, #32]	; (80102d0 <sys_timeouts_init+0x3c>)
 80102ae:	4413      	add	r3, r2
 80102b0:	461a      	mov	r2, r3
 80102b2:	4908      	ldr	r1, [pc, #32]	; (80102d4 <sys_timeouts_init+0x40>)
 80102b4:	f000 f810 	bl	80102d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	3301      	adds	r3, #1
 80102bc:	607b      	str	r3, [r7, #4]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d9ed      	bls.n	80102a0 <sys_timeouts_init+0xc>
  }
}
 80102c4:	bf00      	nop
 80102c6:	bf00      	nop
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	080173e8 	.word	0x080173e8
 80102d4:	08010231 	.word	0x08010231

080102d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b086      	sub	sp, #24
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102ea:	d306      	bcc.n	80102fa <sys_timeout+0x22>
 80102ec:	4b0a      	ldr	r3, [pc, #40]	; (8010318 <sys_timeout+0x40>)
 80102ee:	f240 1229 	movw	r2, #297	; 0x129
 80102f2:	490a      	ldr	r1, [pc, #40]	; (801031c <sys_timeout+0x44>)
 80102f4:	480a      	ldr	r0, [pc, #40]	; (8010320 <sys_timeout+0x48>)
 80102f6:	f003 f8f5 	bl	80134e4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80102fa:	f7f8 ff3d 	bl	8009178 <sys_now>
 80102fe:	4602      	mov	r2, r0
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	4413      	add	r3, r2
 8010304:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	68b9      	ldr	r1, [r7, #8]
 801030a:	6978      	ldr	r0, [r7, #20]
 801030c:	f7ff ff22 	bl	8010154 <sys_timeout_abs>
#endif
}
 8010310:	bf00      	nop
 8010312:	3718      	adds	r7, #24
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}
 8010318:	08016800 	.word	0x08016800
 801031c:	0801689c 	.word	0x0801689c
 8010320:	08016874 	.word	0x08016874

08010324 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801032a:	f7f8 ff25 	bl	8009178 <sys_now>
 801032e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010330:	4b1a      	ldr	r3, [pc, #104]	; (801039c <sys_check_timeouts+0x78>)
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	b2db      	uxtb	r3, r3
 8010336:	2b00      	cmp	r3, #0
 8010338:	d001      	beq.n	801033e <sys_check_timeouts+0x1a>
 801033a:	f7f9 ff25 	bl	800a188 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801033e:	4b18      	ldr	r3, [pc, #96]	; (80103a0 <sys_check_timeouts+0x7c>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d022      	beq.n	8010390 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	68fa      	ldr	r2, [r7, #12]
 8010350:	1ad3      	subs	r3, r2, r3
 8010352:	0fdb      	lsrs	r3, r3, #31
 8010354:	f003 0301 	and.w	r3, r3, #1
 8010358:	b2db      	uxtb	r3, r3
 801035a:	2b00      	cmp	r3, #0
 801035c:	d11a      	bne.n	8010394 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a0f      	ldr	r2, [pc, #60]	; (80103a0 <sys_check_timeouts+0x7c>)
 8010364:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	689b      	ldr	r3, [r3, #8]
 801036a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	4a0b      	ldr	r2, [pc, #44]	; (80103a4 <sys_check_timeouts+0x80>)
 8010378:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801037a:	68b9      	ldr	r1, [r7, #8]
 801037c:	2006      	movs	r0, #6
 801037e:	f7f9 fc2b 	bl	8009bd8 <memp_free>
    if (handler != NULL) {
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d0d3      	beq.n	8010330 <sys_check_timeouts+0xc>
      handler(arg);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6838      	ldr	r0, [r7, #0]
 801038c:	4798      	blx	r3
  do {
 801038e:	e7cf      	b.n	8010330 <sys_check_timeouts+0xc>
      return;
 8010390:	bf00      	nop
 8010392:	e000      	b.n	8010396 <sys_check_timeouts+0x72>
      return;
 8010394:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	20008ead 	.word	0x20008ead
 80103a0:	20008f00 	.word	0x20008f00
 80103a4:	20008f04 	.word	0x20008f04

080103a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80103ac:	f003 f8b2 	bl	8013514 <rand>
 80103b0:	4603      	mov	r3, r0
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80103be:	b29a      	uxth	r2, r3
 80103c0:	4b01      	ldr	r3, [pc, #4]	; (80103c8 <udp_init+0x20>)
 80103c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80103c4:	bf00      	nop
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	20000014 	.word	0x20000014

080103cc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80103d2:	2300      	movs	r3, #0
 80103d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80103d6:	4b17      	ldr	r3, [pc, #92]	; (8010434 <udp_new_port+0x68>)
 80103d8:	881b      	ldrh	r3, [r3, #0]
 80103da:	1c5a      	adds	r2, r3, #1
 80103dc:	b291      	uxth	r1, r2
 80103de:	4a15      	ldr	r2, [pc, #84]	; (8010434 <udp_new_port+0x68>)
 80103e0:	8011      	strh	r1, [r2, #0]
 80103e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d103      	bne.n	80103f2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80103ea:	4b12      	ldr	r3, [pc, #72]	; (8010434 <udp_new_port+0x68>)
 80103ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80103f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80103f2:	4b11      	ldr	r3, [pc, #68]	; (8010438 <udp_new_port+0x6c>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	603b      	str	r3, [r7, #0]
 80103f8:	e011      	b.n	801041e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	8a5a      	ldrh	r2, [r3, #18]
 80103fe:	4b0d      	ldr	r3, [pc, #52]	; (8010434 <udp_new_port+0x68>)
 8010400:	881b      	ldrh	r3, [r3, #0]
 8010402:	429a      	cmp	r2, r3
 8010404:	d108      	bne.n	8010418 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010406:	88fb      	ldrh	r3, [r7, #6]
 8010408:	3301      	adds	r3, #1
 801040a:	80fb      	strh	r3, [r7, #6]
 801040c:	88fb      	ldrh	r3, [r7, #6]
 801040e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010412:	d3e0      	bcc.n	80103d6 <udp_new_port+0xa>
        return 0;
 8010414:	2300      	movs	r3, #0
 8010416:	e007      	b.n	8010428 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	603b      	str	r3, [r7, #0]
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d1ea      	bne.n	80103fa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010424:	4b03      	ldr	r3, [pc, #12]	; (8010434 <udp_new_port+0x68>)
 8010426:	881b      	ldrh	r3, [r3, #0]
}
 8010428:	4618      	mov	r0, r3
 801042a:	370c      	adds	r7, #12
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr
 8010434:	20000014 	.word	0x20000014
 8010438:	20008f0c 	.word	0x20008f0c

0801043c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	4613      	mov	r3, r2
 8010448:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d105      	bne.n	801045c <udp_input_local_match+0x20>
 8010450:	4b27      	ldr	r3, [pc, #156]	; (80104f0 <udp_input_local_match+0xb4>)
 8010452:	2287      	movs	r2, #135	; 0x87
 8010454:	4927      	ldr	r1, [pc, #156]	; (80104f4 <udp_input_local_match+0xb8>)
 8010456:	4828      	ldr	r0, [pc, #160]	; (80104f8 <udp_input_local_match+0xbc>)
 8010458:	f003 f844 	bl	80134e4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d105      	bne.n	801046e <udp_input_local_match+0x32>
 8010462:	4b23      	ldr	r3, [pc, #140]	; (80104f0 <udp_input_local_match+0xb4>)
 8010464:	2288      	movs	r2, #136	; 0x88
 8010466:	4925      	ldr	r1, [pc, #148]	; (80104fc <udp_input_local_match+0xc0>)
 8010468:	4823      	ldr	r0, [pc, #140]	; (80104f8 <udp_input_local_match+0xbc>)
 801046a:	f003 f83b 	bl	80134e4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	7a1b      	ldrb	r3, [r3, #8]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00b      	beq.n	801048e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	7a1a      	ldrb	r2, [r3, #8]
 801047a:	4b21      	ldr	r3, [pc, #132]	; (8010500 <udp_input_local_match+0xc4>)
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010482:	3301      	adds	r3, #1
 8010484:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010486:	429a      	cmp	r2, r3
 8010488:	d001      	beq.n	801048e <udp_input_local_match+0x52>
    return 0;
 801048a:	2300      	movs	r3, #0
 801048c:	e02b      	b.n	80104e6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d018      	beq.n	80104c6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d013      	beq.n	80104c2 <udp_input_local_match+0x86>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00f      	beq.n	80104c2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80104a2:	4b17      	ldr	r3, [pc, #92]	; (8010500 <udp_input_local_match+0xc4>)
 80104a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80104a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104aa:	d00a      	beq.n	80104c2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	4b13      	ldr	r3, [pc, #76]	; (8010500 <udp_input_local_match+0xc4>)
 80104b2:	695b      	ldr	r3, [r3, #20]
 80104b4:	405a      	eors	r2, r3
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	3308      	adds	r3, #8
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d110      	bne.n	80104e4 <udp_input_local_match+0xa8>
          return 1;
 80104c2:	2301      	movs	r3, #1
 80104c4:	e00f      	b.n	80104e6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d009      	beq.n	80104e0 <udp_input_local_match+0xa4>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d005      	beq.n	80104e0 <udp_input_local_match+0xa4>
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	681a      	ldr	r2, [r3, #0]
 80104d8:	4b09      	ldr	r3, [pc, #36]	; (8010500 <udp_input_local_match+0xc4>)
 80104da:	695b      	ldr	r3, [r3, #20]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d101      	bne.n	80104e4 <udp_input_local_match+0xa8>
        return 1;
 80104e0:	2301      	movs	r3, #1
 80104e2:	e000      	b.n	80104e6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80104e4:	2300      	movs	r3, #0
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3710      	adds	r7, #16
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	080168e8 	.word	0x080168e8
 80104f4:	08016918 	.word	0x08016918
 80104f8:	0801693c 	.word	0x0801693c
 80104fc:	08016964 	.word	0x08016964
 8010500:	20003780 	.word	0x20003780

08010504 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010504:	b590      	push	{r4, r7, lr}
 8010506:	b08d      	sub	sp, #52	; 0x34
 8010508:	af02      	add	r7, sp, #8
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801050e:	2300      	movs	r3, #0
 8010510:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d105      	bne.n	8010524 <udp_input+0x20>
 8010518:	4b7c      	ldr	r3, [pc, #496]	; (801070c <udp_input+0x208>)
 801051a:	22cf      	movs	r2, #207	; 0xcf
 801051c:	497c      	ldr	r1, [pc, #496]	; (8010710 <udp_input+0x20c>)
 801051e:	487d      	ldr	r0, [pc, #500]	; (8010714 <udp_input+0x210>)
 8010520:	f002 ffe0 	bl	80134e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d105      	bne.n	8010536 <udp_input+0x32>
 801052a:	4b78      	ldr	r3, [pc, #480]	; (801070c <udp_input+0x208>)
 801052c:	22d0      	movs	r2, #208	; 0xd0
 801052e:	497a      	ldr	r1, [pc, #488]	; (8010718 <udp_input+0x214>)
 8010530:	4878      	ldr	r0, [pc, #480]	; (8010714 <udp_input+0x210>)
 8010532:	f002 ffd7 	bl	80134e4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	895b      	ldrh	r3, [r3, #10]
 801053a:	2b07      	cmp	r3, #7
 801053c:	d803      	bhi.n	8010546 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f7fa f95c 	bl	800a7fc <pbuf_free>
    goto end;
 8010544:	e0de      	b.n	8010704 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801054c:	4b73      	ldr	r3, [pc, #460]	; (801071c <udp_input+0x218>)
 801054e:	695b      	ldr	r3, [r3, #20]
 8010550:	4a72      	ldr	r2, [pc, #456]	; (801071c <udp_input+0x218>)
 8010552:	6812      	ldr	r2, [r2, #0]
 8010554:	4611      	mov	r1, r2
 8010556:	4618      	mov	r0, r3
 8010558:	f002 f80a 	bl	8012570 <ip4_addr_isbroadcast_u32>
 801055c:	4603      	mov	r3, r0
 801055e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	881b      	ldrh	r3, [r3, #0]
 8010564:	b29b      	uxth	r3, r3
 8010566:	4618      	mov	r0, r3
 8010568:	f7f8 fe94 	bl	8009294 <lwip_htons>
 801056c:	4603      	mov	r3, r0
 801056e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	885b      	ldrh	r3, [r3, #2]
 8010574:	b29b      	uxth	r3, r3
 8010576:	4618      	mov	r0, r3
 8010578:	f7f8 fe8c 	bl	8009294 <lwip_htons>
 801057c:	4603      	mov	r3, r0
 801057e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010580:	2300      	movs	r3, #0
 8010582:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010584:	2300      	movs	r3, #0
 8010586:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010588:	2300      	movs	r3, #0
 801058a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801058c:	4b64      	ldr	r3, [pc, #400]	; (8010720 <udp_input+0x21c>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	627b      	str	r3, [r7, #36]	; 0x24
 8010592:	e054      	b.n	801063e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010596:	8a5b      	ldrh	r3, [r3, #18]
 8010598:	89fa      	ldrh	r2, [r7, #14]
 801059a:	429a      	cmp	r2, r3
 801059c:	d14a      	bne.n	8010634 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801059e:	7cfb      	ldrb	r3, [r7, #19]
 80105a0:	461a      	mov	r2, r3
 80105a2:	6839      	ldr	r1, [r7, #0]
 80105a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105a6:	f7ff ff49 	bl	801043c <udp_input_local_match>
 80105aa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d041      	beq.n	8010634 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	7c1b      	ldrb	r3, [r3, #16]
 80105b4:	f003 0304 	and.w	r3, r3, #4
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d11d      	bne.n	80105f8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d102      	bne.n	80105c8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80105c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c4:	61fb      	str	r3, [r7, #28]
 80105c6:	e017      	b.n	80105f8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80105c8:	7cfb      	ldrb	r3, [r7, #19]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d014      	beq.n	80105f8 <udp_input+0xf4>
 80105ce:	4b53      	ldr	r3, [pc, #332]	; (801071c <udp_input+0x218>)
 80105d0:	695b      	ldr	r3, [r3, #20]
 80105d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d6:	d10f      	bne.n	80105f8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	3304      	adds	r3, #4
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d008      	beq.n	80105f8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80105e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	3304      	adds	r3, #4
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d101      	bne.n	80105f8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fa:	8a9b      	ldrh	r3, [r3, #20]
 80105fc:	8a3a      	ldrh	r2, [r7, #16]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d118      	bne.n	8010634 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010606:	2b00      	cmp	r3, #0
 8010608:	d005      	beq.n	8010616 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	4b43      	ldr	r3, [pc, #268]	; (801071c <udp_input+0x218>)
 8010610:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010612:	429a      	cmp	r2, r3
 8010614:	d10e      	bne.n	8010634 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d014      	beq.n	8010646 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061e:	68da      	ldr	r2, [r3, #12]
 8010620:	6a3b      	ldr	r3, [r7, #32]
 8010622:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010624:	4b3e      	ldr	r3, [pc, #248]	; (8010720 <udp_input+0x21c>)
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801062c:	4a3c      	ldr	r2, [pc, #240]	; (8010720 <udp_input+0x21c>)
 801062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010630:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010632:	e008      	b.n	8010646 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	627b      	str	r3, [r7, #36]	; 0x24
 801063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010640:	2b00      	cmp	r3, #0
 8010642:	d1a7      	bne.n	8010594 <udp_input+0x90>
 8010644:	e000      	b.n	8010648 <udp_input+0x144>
        break;
 8010646:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064a:	2b00      	cmp	r3, #0
 801064c:	d101      	bne.n	8010652 <udp_input+0x14e>
    pcb = uncon_pcb;
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <udp_input+0x15a>
    for_us = 1;
 8010658:	2301      	movs	r3, #1
 801065a:	76fb      	strb	r3, [r7, #27]
 801065c:	e00a      	b.n	8010674 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	3304      	adds	r3, #4
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	4b2d      	ldr	r3, [pc, #180]	; (801071c <udp_input+0x218>)
 8010666:	695b      	ldr	r3, [r3, #20]
 8010668:	429a      	cmp	r2, r3
 801066a:	bf0c      	ite	eq
 801066c:	2301      	moveq	r3, #1
 801066e:	2300      	movne	r3, #0
 8010670:	b2db      	uxtb	r3, r3
 8010672:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010674:	7efb      	ldrb	r3, [r7, #27]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d041      	beq.n	80106fe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801067a:	2108      	movs	r1, #8
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7fa f837 	bl	800a6f0 <pbuf_remove_header>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00a      	beq.n	801069e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010688:	4b20      	ldr	r3, [pc, #128]	; (801070c <udp_input+0x208>)
 801068a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801068e:	4925      	ldr	r1, [pc, #148]	; (8010724 <udp_input+0x220>)
 8010690:	4820      	ldr	r0, [pc, #128]	; (8010714 <udp_input+0x210>)
 8010692:	f002 ff27 	bl	80134e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f7fa f8b0 	bl	800a7fc <pbuf_free>
      goto end;
 801069c:	e032      	b.n	8010704 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d012      	beq.n	80106ca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80106a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a6:	699b      	ldr	r3, [r3, #24]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00a      	beq.n	80106c2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80106ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ae:	699c      	ldr	r4, [r3, #24]
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	69d8      	ldr	r0, [r3, #28]
 80106b4:	8a3b      	ldrh	r3, [r7, #16]
 80106b6:	9300      	str	r3, [sp, #0]
 80106b8:	4b1b      	ldr	r3, [pc, #108]	; (8010728 <udp_input+0x224>)
 80106ba:	687a      	ldr	r2, [r7, #4]
 80106bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80106c0:	e021      	b.n	8010706 <udp_input+0x202>
        pbuf_free(p);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7fa f89a 	bl	800a7fc <pbuf_free>
        goto end;
 80106c8:	e01c      	b.n	8010704 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80106ca:	7cfb      	ldrb	r3, [r7, #19]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d112      	bne.n	80106f6 <udp_input+0x1f2>
 80106d0:	4b12      	ldr	r3, [pc, #72]	; (801071c <udp_input+0x218>)
 80106d2:	695b      	ldr	r3, [r3, #20]
 80106d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106d8:	2be0      	cmp	r3, #224	; 0xe0
 80106da:	d00c      	beq.n	80106f6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80106dc:	4b0f      	ldr	r3, [pc, #60]	; (801071c <udp_input+0x218>)
 80106de:	899b      	ldrh	r3, [r3, #12]
 80106e0:	3308      	adds	r3, #8
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	b21b      	sxth	r3, r3
 80106e6:	4619      	mov	r1, r3
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7fa f874 	bl	800a7d6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80106ee:	2103      	movs	r1, #3
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f001 fc1d 	bl	8011f30 <icmp_dest_unreach>
      pbuf_free(p);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7fa f880 	bl	800a7fc <pbuf_free>
  return;
 80106fc:	e003      	b.n	8010706 <udp_input+0x202>
    pbuf_free(p);
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f7fa f87c 	bl	800a7fc <pbuf_free>
  return;
 8010704:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010706:	372c      	adds	r7, #44	; 0x2c
 8010708:	46bd      	mov	sp, r7
 801070a:	bd90      	pop	{r4, r7, pc}
 801070c:	080168e8 	.word	0x080168e8
 8010710:	0801698c 	.word	0x0801698c
 8010714:	0801693c 	.word	0x0801693c
 8010718:	080169a4 	.word	0x080169a4
 801071c:	20003780 	.word	0x20003780
 8010720:	20008f0c 	.word	0x20008f0c
 8010724:	080169c0 	.word	0x080169c0
 8010728:	20003790 	.word	0x20003790

0801072c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d109      	bne.n	8010750 <udp_send+0x24>
 801073c:	4b11      	ldr	r3, [pc, #68]	; (8010784 <udp_send+0x58>)
 801073e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8010742:	4911      	ldr	r1, [pc, #68]	; (8010788 <udp_send+0x5c>)
 8010744:	4811      	ldr	r0, [pc, #68]	; (801078c <udp_send+0x60>)
 8010746:	f002 fecd 	bl	80134e4 <iprintf>
 801074a:	f06f 030f 	mvn.w	r3, #15
 801074e:	e015      	b.n	801077c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d109      	bne.n	801076a <udp_send+0x3e>
 8010756:	4b0b      	ldr	r3, [pc, #44]	; (8010784 <udp_send+0x58>)
 8010758:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801075c:	490c      	ldr	r1, [pc, #48]	; (8010790 <udp_send+0x64>)
 801075e:	480b      	ldr	r0, [pc, #44]	; (801078c <udp_send+0x60>)
 8010760:	f002 fec0 	bl	80134e4 <iprintf>
 8010764:	f06f 030f 	mvn.w	r3, #15
 8010768:	e008      	b.n	801077c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	1d1a      	adds	r2, r3, #4
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	8a9b      	ldrh	r3, [r3, #20]
 8010772:	6839      	ldr	r1, [r7, #0]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 f80d 	bl	8010794 <udp_sendto>
 801077a:	4603      	mov	r3, r0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	080168e8 	.word	0x080168e8
 8010788:	080169dc 	.word	0x080169dc
 801078c:	0801693c 	.word	0x0801693c
 8010790:	080169f4 	.word	0x080169f4

08010794 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b088      	sub	sp, #32
 8010798:	af02      	add	r7, sp, #8
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
 80107a0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d109      	bne.n	80107bc <udp_sendto+0x28>
 80107a8:	4b23      	ldr	r3, [pc, #140]	; (8010838 <udp_sendto+0xa4>)
 80107aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80107ae:	4923      	ldr	r1, [pc, #140]	; (801083c <udp_sendto+0xa8>)
 80107b0:	4823      	ldr	r0, [pc, #140]	; (8010840 <udp_sendto+0xac>)
 80107b2:	f002 fe97 	bl	80134e4 <iprintf>
 80107b6:	f06f 030f 	mvn.w	r3, #15
 80107ba:	e038      	b.n	801082e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d109      	bne.n	80107d6 <udp_sendto+0x42>
 80107c2:	4b1d      	ldr	r3, [pc, #116]	; (8010838 <udp_sendto+0xa4>)
 80107c4:	f240 2219 	movw	r2, #537	; 0x219
 80107c8:	491e      	ldr	r1, [pc, #120]	; (8010844 <udp_sendto+0xb0>)
 80107ca:	481d      	ldr	r0, [pc, #116]	; (8010840 <udp_sendto+0xac>)
 80107cc:	f002 fe8a 	bl	80134e4 <iprintf>
 80107d0:	f06f 030f 	mvn.w	r3, #15
 80107d4:	e02b      	b.n	801082e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d109      	bne.n	80107f0 <udp_sendto+0x5c>
 80107dc:	4b16      	ldr	r3, [pc, #88]	; (8010838 <udp_sendto+0xa4>)
 80107de:	f240 221a 	movw	r2, #538	; 0x21a
 80107e2:	4919      	ldr	r1, [pc, #100]	; (8010848 <udp_sendto+0xb4>)
 80107e4:	4816      	ldr	r0, [pc, #88]	; (8010840 <udp_sendto+0xac>)
 80107e6:	f002 fe7d 	bl	80134e4 <iprintf>
 80107ea:	f06f 030f 	mvn.w	r3, #15
 80107ee:	e01e      	b.n	801082e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	7a1b      	ldrb	r3, [r3, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d006      	beq.n	8010806 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	7a1b      	ldrb	r3, [r3, #8]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7f9 fc9d 	bl	800a13c <netif_get_by_index>
 8010802:	6178      	str	r0, [r7, #20]
 8010804:	e003      	b.n	801080e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f001 fc1c 	bl	8012044 <ip4_route>
 801080c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d102      	bne.n	801081a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010814:	f06f 0303 	mvn.w	r3, #3
 8010818:	e009      	b.n	801082e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801081a:	887a      	ldrh	r2, [r7, #2]
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	9300      	str	r3, [sp, #0]
 8010820:	4613      	mov	r3, r2
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	68b9      	ldr	r1, [r7, #8]
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	f000 f810 	bl	801084c <udp_sendto_if>
 801082c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801082e:	4618      	mov	r0, r3
 8010830:	3718      	adds	r7, #24
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	080168e8 	.word	0x080168e8
 801083c:	08016a0c 	.word	0x08016a0c
 8010840:	0801693c 	.word	0x0801693c
 8010844:	08016a24 	.word	0x08016a24
 8010848:	08016a40 	.word	0x08016a40

0801084c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b088      	sub	sp, #32
 8010850:	af02      	add	r7, sp, #8
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
 8010858:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d109      	bne.n	8010874 <udp_sendto_if+0x28>
 8010860:	4b2e      	ldr	r3, [pc, #184]	; (801091c <udp_sendto_if+0xd0>)
 8010862:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010866:	492e      	ldr	r1, [pc, #184]	; (8010920 <udp_sendto_if+0xd4>)
 8010868:	482e      	ldr	r0, [pc, #184]	; (8010924 <udp_sendto_if+0xd8>)
 801086a:	f002 fe3b 	bl	80134e4 <iprintf>
 801086e:	f06f 030f 	mvn.w	r3, #15
 8010872:	e04f      	b.n	8010914 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d109      	bne.n	801088e <udp_sendto_if+0x42>
 801087a:	4b28      	ldr	r3, [pc, #160]	; (801091c <udp_sendto_if+0xd0>)
 801087c:	f240 2281 	movw	r2, #641	; 0x281
 8010880:	4929      	ldr	r1, [pc, #164]	; (8010928 <udp_sendto_if+0xdc>)
 8010882:	4828      	ldr	r0, [pc, #160]	; (8010924 <udp_sendto_if+0xd8>)
 8010884:	f002 fe2e 	bl	80134e4 <iprintf>
 8010888:	f06f 030f 	mvn.w	r3, #15
 801088c:	e042      	b.n	8010914 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d109      	bne.n	80108a8 <udp_sendto_if+0x5c>
 8010894:	4b21      	ldr	r3, [pc, #132]	; (801091c <udp_sendto_if+0xd0>)
 8010896:	f240 2282 	movw	r2, #642	; 0x282
 801089a:	4924      	ldr	r1, [pc, #144]	; (801092c <udp_sendto_if+0xe0>)
 801089c:	4821      	ldr	r0, [pc, #132]	; (8010924 <udp_sendto_if+0xd8>)
 801089e:	f002 fe21 	bl	80134e4 <iprintf>
 80108a2:	f06f 030f 	mvn.w	r3, #15
 80108a6:	e035      	b.n	8010914 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80108a8:	6a3b      	ldr	r3, [r7, #32]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d109      	bne.n	80108c2 <udp_sendto_if+0x76>
 80108ae:	4b1b      	ldr	r3, [pc, #108]	; (801091c <udp_sendto_if+0xd0>)
 80108b0:	f240 2283 	movw	r2, #643	; 0x283
 80108b4:	491e      	ldr	r1, [pc, #120]	; (8010930 <udp_sendto_if+0xe4>)
 80108b6:	481b      	ldr	r0, [pc, #108]	; (8010924 <udp_sendto_if+0xd8>)
 80108b8:	f002 fe14 	bl	80134e4 <iprintf>
 80108bc:	f06f 030f 	mvn.w	r3, #15
 80108c0:	e028      	b.n	8010914 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d009      	beq.n	80108dc <udp_sendto_if+0x90>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d005      	beq.n	80108dc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80108d8:	2be0      	cmp	r3, #224	; 0xe0
 80108da:	d103      	bne.n	80108e4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	3304      	adds	r3, #4
 80108e0:	617b      	str	r3, [r7, #20]
 80108e2:	e00b      	b.n	80108fc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	6a3b      	ldr	r3, [r7, #32]
 80108ea:	3304      	adds	r3, #4
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d002      	beq.n	80108f8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80108f2:	f06f 0303 	mvn.w	r3, #3
 80108f6:	e00d      	b.n	8010914 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80108fc:	887a      	ldrh	r2, [r7, #2]
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	9301      	str	r3, [sp, #4]
 8010902:	6a3b      	ldr	r3, [r7, #32]
 8010904:	9300      	str	r3, [sp, #0]
 8010906:	4613      	mov	r3, r2
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	68b9      	ldr	r1, [r7, #8]
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f000 f811 	bl	8010934 <udp_sendto_if_src>
 8010912:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010914:	4618      	mov	r0, r3
 8010916:	3718      	adds	r7, #24
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	080168e8 	.word	0x080168e8
 8010920:	08016a5c 	.word	0x08016a5c
 8010924:	0801693c 	.word	0x0801693c
 8010928:	08016a78 	.word	0x08016a78
 801092c:	08016a94 	.word	0x08016a94
 8010930:	08016ab4 	.word	0x08016ab4

08010934 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b08c      	sub	sp, #48	; 0x30
 8010938:	af04      	add	r7, sp, #16
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
 8010940:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d109      	bne.n	801095c <udp_sendto_if_src+0x28>
 8010948:	4b65      	ldr	r3, [pc, #404]	; (8010ae0 <udp_sendto_if_src+0x1ac>)
 801094a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801094e:	4965      	ldr	r1, [pc, #404]	; (8010ae4 <udp_sendto_if_src+0x1b0>)
 8010950:	4865      	ldr	r0, [pc, #404]	; (8010ae8 <udp_sendto_if_src+0x1b4>)
 8010952:	f002 fdc7 	bl	80134e4 <iprintf>
 8010956:	f06f 030f 	mvn.w	r3, #15
 801095a:	e0bc      	b.n	8010ad6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d109      	bne.n	8010976 <udp_sendto_if_src+0x42>
 8010962:	4b5f      	ldr	r3, [pc, #380]	; (8010ae0 <udp_sendto_if_src+0x1ac>)
 8010964:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010968:	4960      	ldr	r1, [pc, #384]	; (8010aec <udp_sendto_if_src+0x1b8>)
 801096a:	485f      	ldr	r0, [pc, #380]	; (8010ae8 <udp_sendto_if_src+0x1b4>)
 801096c:	f002 fdba 	bl	80134e4 <iprintf>
 8010970:	f06f 030f 	mvn.w	r3, #15
 8010974:	e0af      	b.n	8010ad6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d109      	bne.n	8010990 <udp_sendto_if_src+0x5c>
 801097c:	4b58      	ldr	r3, [pc, #352]	; (8010ae0 <udp_sendto_if_src+0x1ac>)
 801097e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8010982:	495b      	ldr	r1, [pc, #364]	; (8010af0 <udp_sendto_if_src+0x1bc>)
 8010984:	4858      	ldr	r0, [pc, #352]	; (8010ae8 <udp_sendto_if_src+0x1b4>)
 8010986:	f002 fdad 	bl	80134e4 <iprintf>
 801098a:	f06f 030f 	mvn.w	r3, #15
 801098e:	e0a2      	b.n	8010ad6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010992:	2b00      	cmp	r3, #0
 8010994:	d109      	bne.n	80109aa <udp_sendto_if_src+0x76>
 8010996:	4b52      	ldr	r3, [pc, #328]	; (8010ae0 <udp_sendto_if_src+0x1ac>)
 8010998:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801099c:	4955      	ldr	r1, [pc, #340]	; (8010af4 <udp_sendto_if_src+0x1c0>)
 801099e:	4852      	ldr	r0, [pc, #328]	; (8010ae8 <udp_sendto_if_src+0x1b4>)
 80109a0:	f002 fda0 	bl	80134e4 <iprintf>
 80109a4:	f06f 030f 	mvn.w	r3, #15
 80109a8:	e095      	b.n	8010ad6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80109aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d109      	bne.n	80109c4 <udp_sendto_if_src+0x90>
 80109b0:	4b4b      	ldr	r3, [pc, #300]	; (8010ae0 <udp_sendto_if_src+0x1ac>)
 80109b2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80109b6:	4950      	ldr	r1, [pc, #320]	; (8010af8 <udp_sendto_if_src+0x1c4>)
 80109b8:	484b      	ldr	r0, [pc, #300]	; (8010ae8 <udp_sendto_if_src+0x1b4>)
 80109ba:	f002 fd93 	bl	80134e4 <iprintf>
 80109be:	f06f 030f 	mvn.w	r3, #15
 80109c2:	e088      	b.n	8010ad6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	8a5b      	ldrh	r3, [r3, #18]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d10f      	bne.n	80109ec <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80109cc:	68f9      	ldr	r1, [r7, #12]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	8a5b      	ldrh	r3, [r3, #18]
 80109d2:	461a      	mov	r2, r3
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f000 f893 	bl	8010b00 <udp_bind>
 80109da:	4603      	mov	r3, r0
 80109dc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80109de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d002      	beq.n	80109ec <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80109e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80109ea:	e074      	b.n	8010ad6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	891b      	ldrh	r3, [r3, #8]
 80109f0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80109f4:	4293      	cmp	r3, r2
 80109f6:	d902      	bls.n	80109fe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80109f8:	f04f 33ff 	mov.w	r3, #4294967295
 80109fc:	e06b      	b.n	8010ad6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80109fe:	2108      	movs	r1, #8
 8010a00:	68b8      	ldr	r0, [r7, #8]
 8010a02:	f7f9 fe65 	bl	800a6d0 <pbuf_add_header>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d015      	beq.n	8010a38 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010a0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a10:	2108      	movs	r1, #8
 8010a12:	2022      	movs	r0, #34	; 0x22
 8010a14:	f7f9 fc0e 	bl	800a234 <pbuf_alloc>
 8010a18:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d102      	bne.n	8010a26 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010a20:	f04f 33ff 	mov.w	r3, #4294967295
 8010a24:	e057      	b.n	8010ad6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	891b      	ldrh	r3, [r3, #8]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d006      	beq.n	8010a3c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010a2e:	68b9      	ldr	r1, [r7, #8]
 8010a30:	69f8      	ldr	r0, [r7, #28]
 8010a32:	f7f9 fffb 	bl	800aa2c <pbuf_chain>
 8010a36:	e001      	b.n	8010a3c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	895b      	ldrh	r3, [r3, #10]
 8010a40:	2b07      	cmp	r3, #7
 8010a42:	d806      	bhi.n	8010a52 <udp_sendto_if_src+0x11e>
 8010a44:	4b26      	ldr	r3, [pc, #152]	; (8010ae0 <udp_sendto_if_src+0x1ac>)
 8010a46:	f240 320d 	movw	r2, #781	; 0x30d
 8010a4a:	492c      	ldr	r1, [pc, #176]	; (8010afc <udp_sendto_if_src+0x1c8>)
 8010a4c:	4826      	ldr	r0, [pc, #152]	; (8010ae8 <udp_sendto_if_src+0x1b4>)
 8010a4e:	f002 fd49 	bl	80134e4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	8a5b      	ldrh	r3, [r3, #18]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7f8 fc19 	bl	8009294 <lwip_htons>
 8010a62:	4603      	mov	r3, r0
 8010a64:	461a      	mov	r2, r3
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010a6a:	887b      	ldrh	r3, [r7, #2]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7f8 fc11 	bl	8009294 <lwip_htons>
 8010a72:	4603      	mov	r3, r0
 8010a74:	461a      	mov	r2, r3
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	719a      	strb	r2, [r3, #6]
 8010a80:	2200      	movs	r2, #0
 8010a82:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	891b      	ldrh	r3, [r3, #8]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7f8 fc03 	bl	8009294 <lwip_htons>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	461a      	mov	r2, r3
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010a96:	2311      	movs	r3, #17
 8010a98:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	7adb      	ldrb	r3, [r3, #11]
 8010a9e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	7a9b      	ldrb	r3, [r3, #10]
 8010aa4:	7cb9      	ldrb	r1, [r7, #18]
 8010aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010aa8:	9202      	str	r2, [sp, #8]
 8010aaa:	7cfa      	ldrb	r2, [r7, #19]
 8010aac:	9201      	str	r2, [sp, #4]
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ab6:	69f8      	ldr	r0, [r7, #28]
 8010ab8:	f001 fcac 	bl	8012414 <ip4_output_if_src>
 8010abc:	4603      	mov	r3, r0
 8010abe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010ac0:	69fa      	ldr	r2, [r7, #28]
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d004      	beq.n	8010ad2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010ac8:	69f8      	ldr	r0, [r7, #28]
 8010aca:	f7f9 fe97 	bl	800a7fc <pbuf_free>
    q = NULL;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010ad2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3720      	adds	r7, #32
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	080168e8 	.word	0x080168e8
 8010ae4:	08016ad4 	.word	0x08016ad4
 8010ae8:	0801693c 	.word	0x0801693c
 8010aec:	08016af4 	.word	0x08016af4
 8010af0:	08016b14 	.word	0x08016b14
 8010af4:	08016b38 	.word	0x08016b38
 8010af8:	08016b5c 	.word	0x08016b5c
 8010afc:	08016b80 	.word	0x08016b80

08010b00 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b086      	sub	sp, #24
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	4613      	mov	r3, r2
 8010b0c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d101      	bne.n	8010b18 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010b14:	4b39      	ldr	r3, [pc, #228]	; (8010bfc <udp_bind+0xfc>)
 8010b16:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d109      	bne.n	8010b32 <udp_bind+0x32>
 8010b1e:	4b38      	ldr	r3, [pc, #224]	; (8010c00 <udp_bind+0x100>)
 8010b20:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010b24:	4937      	ldr	r1, [pc, #220]	; (8010c04 <udp_bind+0x104>)
 8010b26:	4838      	ldr	r0, [pc, #224]	; (8010c08 <udp_bind+0x108>)
 8010b28:	f002 fcdc 	bl	80134e4 <iprintf>
 8010b2c:	f06f 030f 	mvn.w	r3, #15
 8010b30:	e060      	b.n	8010bf4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b36:	4b35      	ldr	r3, [pc, #212]	; (8010c0c <udp_bind+0x10c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	617b      	str	r3, [r7, #20]
 8010b3c:	e009      	b.n	8010b52 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d102      	bne.n	8010b4c <udp_bind+0x4c>
      rebind = 1;
 8010b46:	2301      	movs	r3, #1
 8010b48:	74fb      	strb	r3, [r7, #19]
      break;
 8010b4a:	e005      	b.n	8010b58 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	617b      	str	r3, [r7, #20]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1f2      	bne.n	8010b3e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010b58:	88fb      	ldrh	r3, [r7, #6]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d109      	bne.n	8010b72 <udp_bind+0x72>
    port = udp_new_port();
 8010b5e:	f7ff fc35 	bl	80103cc <udp_new_port>
 8010b62:	4603      	mov	r3, r0
 8010b64:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010b66:	88fb      	ldrh	r3, [r7, #6]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d12c      	bne.n	8010bc6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010b6c:	f06f 0307 	mvn.w	r3, #7
 8010b70:	e040      	b.n	8010bf4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b72:	4b26      	ldr	r3, [pc, #152]	; (8010c0c <udp_bind+0x10c>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	617b      	str	r3, [r7, #20]
 8010b78:	e022      	b.n	8010bc0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010b7a:	68fa      	ldr	r2, [r7, #12]
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d01b      	beq.n	8010bba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	8a5b      	ldrh	r3, [r3, #18]
 8010b86:	88fa      	ldrh	r2, [r7, #6]
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d116      	bne.n	8010bba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d00d      	beq.n	8010bb4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00a      	beq.n	8010bb4 <udp_bind+0xb4>
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d006      	beq.n	8010bb4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010ba6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d003      	beq.n	8010bb4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d102      	bne.n	8010bba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010bb4:	f06f 0307 	mvn.w	r3, #7
 8010bb8:	e01c      	b.n	8010bf4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	617b      	str	r3, [r7, #20]
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1d9      	bne.n	8010b7a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d002      	beq.n	8010bd2 <udp_bind+0xd2>
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	e000      	b.n	8010bd4 <udp_bind+0xd4>
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	68fa      	ldr	r2, [r7, #12]
 8010bd6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	88fa      	ldrh	r2, [r7, #6]
 8010bdc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010bde:	7cfb      	ldrb	r3, [r7, #19]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d106      	bne.n	8010bf2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010be4:	4b09      	ldr	r3, [pc, #36]	; (8010c0c <udp_bind+0x10c>)
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010bec:	4a07      	ldr	r2, [pc, #28]	; (8010c0c <udp_bind+0x10c>)
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3718      	adds	r7, #24
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	08017400 	.word	0x08017400
 8010c00:	080168e8 	.word	0x080168e8
 8010c04:	08016bb0 	.word	0x08016bb0
 8010c08:	0801693c 	.word	0x0801693c
 8010c0c:	20008f0c 	.word	0x20008f0c

08010c10 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b086      	sub	sp, #24
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d109      	bne.n	8010c38 <udp_connect+0x28>
 8010c24:	4b2c      	ldr	r3, [pc, #176]	; (8010cd8 <udp_connect+0xc8>)
 8010c26:	f240 4235 	movw	r2, #1077	; 0x435
 8010c2a:	492c      	ldr	r1, [pc, #176]	; (8010cdc <udp_connect+0xcc>)
 8010c2c:	482c      	ldr	r0, [pc, #176]	; (8010ce0 <udp_connect+0xd0>)
 8010c2e:	f002 fc59 	bl	80134e4 <iprintf>
 8010c32:	f06f 030f 	mvn.w	r3, #15
 8010c36:	e04b      	b.n	8010cd0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d109      	bne.n	8010c52 <udp_connect+0x42>
 8010c3e:	4b26      	ldr	r3, [pc, #152]	; (8010cd8 <udp_connect+0xc8>)
 8010c40:	f240 4236 	movw	r2, #1078	; 0x436
 8010c44:	4927      	ldr	r1, [pc, #156]	; (8010ce4 <udp_connect+0xd4>)
 8010c46:	4826      	ldr	r0, [pc, #152]	; (8010ce0 <udp_connect+0xd0>)
 8010c48:	f002 fc4c 	bl	80134e4 <iprintf>
 8010c4c:	f06f 030f 	mvn.w	r3, #15
 8010c50:	e03e      	b.n	8010cd0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	8a5b      	ldrh	r3, [r3, #18]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d10f      	bne.n	8010c7a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010c5a:	68f9      	ldr	r1, [r7, #12]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	8a5b      	ldrh	r3, [r3, #18]
 8010c60:	461a      	mov	r2, r3
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7ff ff4c 	bl	8010b00 <udp_bind>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010c6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d002      	beq.n	8010c7a <udp_connect+0x6a>
      return err;
 8010c74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c78:	e02a      	b.n	8010cd0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <udp_connect+0x76>
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	e000      	b.n	8010c88 <udp_connect+0x78>
 8010c86:	2300      	movs	r3, #0
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	88fa      	ldrh	r2, [r7, #6]
 8010c90:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	7c1b      	ldrb	r3, [r3, #16]
 8010c96:	f043 0304 	orr.w	r3, r3, #4
 8010c9a:	b2da      	uxtb	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010ca0:	4b11      	ldr	r3, [pc, #68]	; (8010ce8 <udp_connect+0xd8>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	617b      	str	r3, [r7, #20]
 8010ca6:	e008      	b.n	8010cba <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010ca8:	68fa      	ldr	r2, [r7, #12]
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d101      	bne.n	8010cb4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	e00d      	b.n	8010cd0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	617b      	str	r3, [r7, #20]
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1f3      	bne.n	8010ca8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010cc0:	4b09      	ldr	r3, [pc, #36]	; (8010ce8 <udp_connect+0xd8>)
 8010cc2:	681a      	ldr	r2, [r3, #0]
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010cc8:	4a07      	ldr	r2, [pc, #28]	; (8010ce8 <udp_connect+0xd8>)
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010cce:	2300      	movs	r3, #0
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3718      	adds	r7, #24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	080168e8 	.word	0x080168e8
 8010cdc:	08016bc8 	.word	0x08016bc8
 8010ce0:	0801693c 	.word	0x0801693c
 8010ce4:	08016be4 	.word	0x08016be4
 8010ce8:	20008f0c 	.word	0x20008f0c

08010cec <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d107      	bne.n	8010d0a <udp_disconnect+0x1e>
 8010cfa:	4b0d      	ldr	r3, [pc, #52]	; (8010d30 <udp_disconnect+0x44>)
 8010cfc:	f240 426a 	movw	r2, #1130	; 0x46a
 8010d00:	490c      	ldr	r1, [pc, #48]	; (8010d34 <udp_disconnect+0x48>)
 8010d02:	480d      	ldr	r0, [pc, #52]	; (8010d38 <udp_disconnect+0x4c>)
 8010d04:	f002 fbee 	bl	80134e4 <iprintf>
 8010d08:	e00f      	b.n	8010d2a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	7c1b      	ldrb	r3, [r3, #16]
 8010d20:	f023 0304 	bic.w	r3, r3, #4
 8010d24:	b2da      	uxtb	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	741a      	strb	r2, [r3, #16]
}
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	080168e8 	.word	0x080168e8
 8010d34:	08016c00 	.word	0x08016c00
 8010d38:	0801693c 	.word	0x0801693c

08010d3c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d107      	bne.n	8010d5e <udp_recv+0x22>
 8010d4e:	4b08      	ldr	r3, [pc, #32]	; (8010d70 <udp_recv+0x34>)
 8010d50:	f240 428a 	movw	r2, #1162	; 0x48a
 8010d54:	4907      	ldr	r1, [pc, #28]	; (8010d74 <udp_recv+0x38>)
 8010d56:	4808      	ldr	r0, [pc, #32]	; (8010d78 <udp_recv+0x3c>)
 8010d58:	f002 fbc4 	bl	80134e4 <iprintf>
 8010d5c:	e005      	b.n	8010d6a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	68ba      	ldr	r2, [r7, #8]
 8010d62:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	61da      	str	r2, [r3, #28]
}
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	080168e8 	.word	0x080168e8
 8010d74:	08016c1c 	.word	0x08016c1c
 8010d78:	0801693c 	.word	0x0801693c

08010d7c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d107      	bne.n	8010d9a <udp_remove+0x1e>
 8010d8a:	4b19      	ldr	r3, [pc, #100]	; (8010df0 <udp_remove+0x74>)
 8010d8c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010d90:	4918      	ldr	r1, [pc, #96]	; (8010df4 <udp_remove+0x78>)
 8010d92:	4819      	ldr	r0, [pc, #100]	; (8010df8 <udp_remove+0x7c>)
 8010d94:	f002 fba6 	bl	80134e4 <iprintf>
 8010d98:	e026      	b.n	8010de8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010d9a:	4b18      	ldr	r3, [pc, #96]	; (8010dfc <udp_remove+0x80>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d105      	bne.n	8010db0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010da4:	4b15      	ldr	r3, [pc, #84]	; (8010dfc <udp_remove+0x80>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	4a14      	ldr	r2, [pc, #80]	; (8010dfc <udp_remove+0x80>)
 8010dac:	6013      	str	r3, [r2, #0]
 8010dae:	e017      	b.n	8010de0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010db0:	4b12      	ldr	r3, [pc, #72]	; (8010dfc <udp_remove+0x80>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	60fb      	str	r3, [r7, #12]
 8010db6:	e010      	b.n	8010dda <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d009      	beq.n	8010dd4 <udp_remove+0x58>
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d104      	bne.n	8010dd4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	68da      	ldr	r2, [r3, #12]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	60da      	str	r2, [r3, #12]
        break;
 8010dd2:	e005      	b.n	8010de0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	60fb      	str	r3, [r7, #12]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d1eb      	bne.n	8010db8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010de0:	6879      	ldr	r1, [r7, #4]
 8010de2:	2000      	movs	r0, #0
 8010de4:	f7f8 fef8 	bl	8009bd8 <memp_free>
}
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	080168e8 	.word	0x080168e8
 8010df4:	08016c34 	.word	0x08016c34
 8010df8:	0801693c 	.word	0x0801693c
 8010dfc:	20008f0c 	.word	0x20008f0c

08010e00 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010e06:	2000      	movs	r0, #0
 8010e08:	f7f8 fe9a 	bl	8009b40 <memp_malloc>
 8010e0c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d007      	beq.n	8010e24 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010e14:	2220      	movs	r2, #32
 8010e16:	2100      	movs	r1, #0
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f002 fb5b 	bl	80134d4 <memset>
    pcb->ttl = UDP_TTL;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	22ff      	movs	r2, #255	; 0xff
 8010e22:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010e24:	687b      	ldr	r3, [r7, #4]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3708      	adds	r7, #8
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
	...

08010e30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d01e      	beq.n	8010e7e <udp_netif_ip_addr_changed+0x4e>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d01a      	beq.n	8010e7e <udp_netif_ip_addr_changed+0x4e>
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d017      	beq.n	8010e7e <udp_netif_ip_addr_changed+0x4e>
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d013      	beq.n	8010e7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010e56:	4b0d      	ldr	r3, [pc, #52]	; (8010e8c <udp_netif_ip_addr_changed+0x5c>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	60fb      	str	r3, [r7, #12]
 8010e5c:	e00c      	b.n	8010e78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d103      	bne.n	8010e72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	60fb      	str	r3, [r7, #12]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d1ef      	bne.n	8010e5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010e7e:	bf00      	nop
 8010e80:	3714      	adds	r7, #20
 8010e82:	46bd      	mov	sp, r7
 8010e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e88:	4770      	bx	lr
 8010e8a:	bf00      	nop
 8010e8c:	20008f0c 	.word	0x20008f0c

08010e90 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010e98:	4915      	ldr	r1, [pc, #84]	; (8010ef0 <etharp_free_entry+0x60>)
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	005b      	lsls	r3, r3, #1
 8010ea0:	4413      	add	r3, r2
 8010ea2:	00db      	lsls	r3, r3, #3
 8010ea4:	440b      	add	r3, r1
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d013      	beq.n	8010ed4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010eac:	4910      	ldr	r1, [pc, #64]	; (8010ef0 <etharp_free_entry+0x60>)
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	005b      	lsls	r3, r3, #1
 8010eb4:	4413      	add	r3, r2
 8010eb6:	00db      	lsls	r3, r3, #3
 8010eb8:	440b      	add	r3, r1
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7f9 fc9d 	bl	800a7fc <pbuf_free>
    arp_table[i].q = NULL;
 8010ec2:	490b      	ldr	r1, [pc, #44]	; (8010ef0 <etharp_free_entry+0x60>)
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	4413      	add	r3, r2
 8010ecc:	00db      	lsls	r3, r3, #3
 8010ece:	440b      	add	r3, r1
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010ed4:	4906      	ldr	r1, [pc, #24]	; (8010ef0 <etharp_free_entry+0x60>)
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	4613      	mov	r3, r2
 8010eda:	005b      	lsls	r3, r3, #1
 8010edc:	4413      	add	r3, r2
 8010ede:	00db      	lsls	r3, r3, #3
 8010ee0:	440b      	add	r3, r1
 8010ee2:	3314      	adds	r3, #20
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010ee8:	bf00      	nop
 8010eea:	3708      	adds	r7, #8
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20008f10 	.word	0x20008f10

08010ef4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010efa:	2300      	movs	r3, #0
 8010efc:	607b      	str	r3, [r7, #4]
 8010efe:	e096      	b.n	801102e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010f00:	494f      	ldr	r1, [pc, #316]	; (8011040 <etharp_tmr+0x14c>)
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	4613      	mov	r3, r2
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	4413      	add	r3, r2
 8010f0a:	00db      	lsls	r3, r3, #3
 8010f0c:	440b      	add	r3, r1
 8010f0e:	3314      	adds	r3, #20
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010f14:	78fb      	ldrb	r3, [r7, #3]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f000 8086 	beq.w	8011028 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010f1c:	4948      	ldr	r1, [pc, #288]	; (8011040 <etharp_tmr+0x14c>)
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	4613      	mov	r3, r2
 8010f22:	005b      	lsls	r3, r3, #1
 8010f24:	4413      	add	r3, r2
 8010f26:	00db      	lsls	r3, r3, #3
 8010f28:	440b      	add	r3, r1
 8010f2a:	3312      	adds	r3, #18
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	3301      	adds	r3, #1
 8010f30:	b298      	uxth	r0, r3
 8010f32:	4943      	ldr	r1, [pc, #268]	; (8011040 <etharp_tmr+0x14c>)
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	4613      	mov	r3, r2
 8010f38:	005b      	lsls	r3, r3, #1
 8010f3a:	4413      	add	r3, r2
 8010f3c:	00db      	lsls	r3, r3, #3
 8010f3e:	440b      	add	r3, r1
 8010f40:	3312      	adds	r3, #18
 8010f42:	4602      	mov	r2, r0
 8010f44:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010f46:	493e      	ldr	r1, [pc, #248]	; (8011040 <etharp_tmr+0x14c>)
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	4613      	mov	r3, r2
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	4413      	add	r3, r2
 8010f50:	00db      	lsls	r3, r3, #3
 8010f52:	440b      	add	r3, r1
 8010f54:	3312      	adds	r3, #18
 8010f56:	881b      	ldrh	r3, [r3, #0]
 8010f58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010f5c:	d215      	bcs.n	8010f8a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010f5e:	4938      	ldr	r1, [pc, #224]	; (8011040 <etharp_tmr+0x14c>)
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	4613      	mov	r3, r2
 8010f64:	005b      	lsls	r3, r3, #1
 8010f66:	4413      	add	r3, r2
 8010f68:	00db      	lsls	r3, r3, #3
 8010f6a:	440b      	add	r3, r1
 8010f6c:	3314      	adds	r3, #20
 8010f6e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d10e      	bne.n	8010f92 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010f74:	4932      	ldr	r1, [pc, #200]	; (8011040 <etharp_tmr+0x14c>)
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	4613      	mov	r3, r2
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	4413      	add	r3, r2
 8010f7e:	00db      	lsls	r3, r3, #3
 8010f80:	440b      	add	r3, r1
 8010f82:	3312      	adds	r3, #18
 8010f84:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010f86:	2b04      	cmp	r3, #4
 8010f88:	d903      	bls.n	8010f92 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff ff80 	bl	8010e90 <etharp_free_entry>
 8010f90:	e04a      	b.n	8011028 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010f92:	492b      	ldr	r1, [pc, #172]	; (8011040 <etharp_tmr+0x14c>)
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	4613      	mov	r3, r2
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	00db      	lsls	r3, r3, #3
 8010f9e:	440b      	add	r3, r1
 8010fa0:	3314      	adds	r3, #20
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	2b03      	cmp	r3, #3
 8010fa6:	d10a      	bne.n	8010fbe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010fa8:	4925      	ldr	r1, [pc, #148]	; (8011040 <etharp_tmr+0x14c>)
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	4613      	mov	r3, r2
 8010fae:	005b      	lsls	r3, r3, #1
 8010fb0:	4413      	add	r3, r2
 8010fb2:	00db      	lsls	r3, r3, #3
 8010fb4:	440b      	add	r3, r1
 8010fb6:	3314      	adds	r3, #20
 8010fb8:	2204      	movs	r2, #4
 8010fba:	701a      	strb	r2, [r3, #0]
 8010fbc:	e034      	b.n	8011028 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010fbe:	4920      	ldr	r1, [pc, #128]	; (8011040 <etharp_tmr+0x14c>)
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	4613      	mov	r3, r2
 8010fc4:	005b      	lsls	r3, r3, #1
 8010fc6:	4413      	add	r3, r2
 8010fc8:	00db      	lsls	r3, r3, #3
 8010fca:	440b      	add	r3, r1
 8010fcc:	3314      	adds	r3, #20
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	2b04      	cmp	r3, #4
 8010fd2:	d10a      	bne.n	8010fea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010fd4:	491a      	ldr	r1, [pc, #104]	; (8011040 <etharp_tmr+0x14c>)
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	4613      	mov	r3, r2
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	4413      	add	r3, r2
 8010fde:	00db      	lsls	r3, r3, #3
 8010fe0:	440b      	add	r3, r1
 8010fe2:	3314      	adds	r3, #20
 8010fe4:	2202      	movs	r2, #2
 8010fe6:	701a      	strb	r2, [r3, #0]
 8010fe8:	e01e      	b.n	8011028 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010fea:	4915      	ldr	r1, [pc, #84]	; (8011040 <etharp_tmr+0x14c>)
 8010fec:	687a      	ldr	r2, [r7, #4]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	005b      	lsls	r3, r3, #1
 8010ff2:	4413      	add	r3, r2
 8010ff4:	00db      	lsls	r3, r3, #3
 8010ff6:	440b      	add	r3, r1
 8010ff8:	3314      	adds	r3, #20
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d113      	bne.n	8011028 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011000:	490f      	ldr	r1, [pc, #60]	; (8011040 <etharp_tmr+0x14c>)
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	4613      	mov	r3, r2
 8011006:	005b      	lsls	r3, r3, #1
 8011008:	4413      	add	r3, r2
 801100a:	00db      	lsls	r3, r3, #3
 801100c:	440b      	add	r3, r1
 801100e:	3308      	adds	r3, #8
 8011010:	6818      	ldr	r0, [r3, #0]
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	4613      	mov	r3, r2
 8011016:	005b      	lsls	r3, r3, #1
 8011018:	4413      	add	r3, r2
 801101a:	00db      	lsls	r3, r3, #3
 801101c:	4a08      	ldr	r2, [pc, #32]	; (8011040 <etharp_tmr+0x14c>)
 801101e:	4413      	add	r3, r2
 8011020:	3304      	adds	r3, #4
 8011022:	4619      	mov	r1, r3
 8011024:	f000 fe6e 	bl	8011d04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	3301      	adds	r3, #1
 801102c:	607b      	str	r3, [r7, #4]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2b09      	cmp	r3, #9
 8011032:	f77f af65 	ble.w	8010f00 <etharp_tmr+0xc>
      }
    }
  }
}
 8011036:	bf00      	nop
 8011038:	bf00      	nop
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	20008f10 	.word	0x20008f10

08011044 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b08a      	sub	sp, #40	; 0x28
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	460b      	mov	r3, r1
 801104e:	607a      	str	r2, [r7, #4]
 8011050:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011052:	230a      	movs	r3, #10
 8011054:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011056:	230a      	movs	r3, #10
 8011058:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801105a:	230a      	movs	r3, #10
 801105c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011062:	230a      	movs	r3, #10
 8011064:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011066:	2300      	movs	r3, #0
 8011068:	83bb      	strh	r3, [r7, #28]
 801106a:	2300      	movs	r3, #0
 801106c:	837b      	strh	r3, [r7, #26]
 801106e:	2300      	movs	r3, #0
 8011070:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011072:	2300      	movs	r3, #0
 8011074:	843b      	strh	r3, [r7, #32]
 8011076:	e0ae      	b.n	80111d6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011078:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801107c:	49a6      	ldr	r1, [pc, #664]	; (8011318 <etharp_find_entry+0x2d4>)
 801107e:	4613      	mov	r3, r2
 8011080:	005b      	lsls	r3, r3, #1
 8011082:	4413      	add	r3, r2
 8011084:	00db      	lsls	r3, r3, #3
 8011086:	440b      	add	r3, r1
 8011088:	3314      	adds	r3, #20
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801108e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011092:	2b0a      	cmp	r3, #10
 8011094:	d105      	bne.n	80110a2 <etharp_find_entry+0x5e>
 8011096:	7dfb      	ldrb	r3, [r7, #23]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d102      	bne.n	80110a2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801109c:	8c3b      	ldrh	r3, [r7, #32]
 801109e:	847b      	strh	r3, [r7, #34]	; 0x22
 80110a0:	e095      	b.n	80111ce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80110a2:	7dfb      	ldrb	r3, [r7, #23]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 8092 	beq.w	80111ce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80110aa:	7dfb      	ldrb	r3, [r7, #23]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d009      	beq.n	80110c4 <etharp_find_entry+0x80>
 80110b0:	7dfb      	ldrb	r3, [r7, #23]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d806      	bhi.n	80110c4 <etharp_find_entry+0x80>
 80110b6:	4b99      	ldr	r3, [pc, #612]	; (801131c <etharp_find_entry+0x2d8>)
 80110b8:	f240 1223 	movw	r2, #291	; 0x123
 80110bc:	4998      	ldr	r1, [pc, #608]	; (8011320 <etharp_find_entry+0x2dc>)
 80110be:	4899      	ldr	r0, [pc, #612]	; (8011324 <etharp_find_entry+0x2e0>)
 80110c0:	f002 fa10 	bl	80134e4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d020      	beq.n	801110c <etharp_find_entry+0xc8>
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	6819      	ldr	r1, [r3, #0]
 80110ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110d2:	4891      	ldr	r0, [pc, #580]	; (8011318 <etharp_find_entry+0x2d4>)
 80110d4:	4613      	mov	r3, r2
 80110d6:	005b      	lsls	r3, r3, #1
 80110d8:	4413      	add	r3, r2
 80110da:	00db      	lsls	r3, r3, #3
 80110dc:	4403      	add	r3, r0
 80110de:	3304      	adds	r3, #4
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	4299      	cmp	r1, r3
 80110e4:	d112      	bne.n	801110c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00c      	beq.n	8011106 <etharp_find_entry+0xc2>
 80110ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110f0:	4989      	ldr	r1, [pc, #548]	; (8011318 <etharp_find_entry+0x2d4>)
 80110f2:	4613      	mov	r3, r2
 80110f4:	005b      	lsls	r3, r3, #1
 80110f6:	4413      	add	r3, r2
 80110f8:	00db      	lsls	r3, r3, #3
 80110fa:	440b      	add	r3, r1
 80110fc:	3308      	adds	r3, #8
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	429a      	cmp	r2, r3
 8011104:	d102      	bne.n	801110c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011106:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801110a:	e100      	b.n	801130e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801110c:	7dfb      	ldrb	r3, [r7, #23]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d140      	bne.n	8011194 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011116:	4980      	ldr	r1, [pc, #512]	; (8011318 <etharp_find_entry+0x2d4>)
 8011118:	4613      	mov	r3, r2
 801111a:	005b      	lsls	r3, r3, #1
 801111c:	4413      	add	r3, r2
 801111e:	00db      	lsls	r3, r3, #3
 8011120:	440b      	add	r3, r1
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d01a      	beq.n	801115e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801112c:	497a      	ldr	r1, [pc, #488]	; (8011318 <etharp_find_entry+0x2d4>)
 801112e:	4613      	mov	r3, r2
 8011130:	005b      	lsls	r3, r3, #1
 8011132:	4413      	add	r3, r2
 8011134:	00db      	lsls	r3, r3, #3
 8011136:	440b      	add	r3, r1
 8011138:	3312      	adds	r3, #18
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	8bba      	ldrh	r2, [r7, #28]
 801113e:	429a      	cmp	r2, r3
 8011140:	d845      	bhi.n	80111ce <etharp_find_entry+0x18a>
            old_queue = i;
 8011142:	8c3b      	ldrh	r3, [r7, #32]
 8011144:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011146:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801114a:	4973      	ldr	r1, [pc, #460]	; (8011318 <etharp_find_entry+0x2d4>)
 801114c:	4613      	mov	r3, r2
 801114e:	005b      	lsls	r3, r3, #1
 8011150:	4413      	add	r3, r2
 8011152:	00db      	lsls	r3, r3, #3
 8011154:	440b      	add	r3, r1
 8011156:	3312      	adds	r3, #18
 8011158:	881b      	ldrh	r3, [r3, #0]
 801115a:	83bb      	strh	r3, [r7, #28]
 801115c:	e037      	b.n	80111ce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801115e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011162:	496d      	ldr	r1, [pc, #436]	; (8011318 <etharp_find_entry+0x2d4>)
 8011164:	4613      	mov	r3, r2
 8011166:	005b      	lsls	r3, r3, #1
 8011168:	4413      	add	r3, r2
 801116a:	00db      	lsls	r3, r3, #3
 801116c:	440b      	add	r3, r1
 801116e:	3312      	adds	r3, #18
 8011170:	881b      	ldrh	r3, [r3, #0]
 8011172:	8b7a      	ldrh	r2, [r7, #26]
 8011174:	429a      	cmp	r2, r3
 8011176:	d82a      	bhi.n	80111ce <etharp_find_entry+0x18a>
            old_pending = i;
 8011178:	8c3b      	ldrh	r3, [r7, #32]
 801117a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801117c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011180:	4965      	ldr	r1, [pc, #404]	; (8011318 <etharp_find_entry+0x2d4>)
 8011182:	4613      	mov	r3, r2
 8011184:	005b      	lsls	r3, r3, #1
 8011186:	4413      	add	r3, r2
 8011188:	00db      	lsls	r3, r3, #3
 801118a:	440b      	add	r3, r1
 801118c:	3312      	adds	r3, #18
 801118e:	881b      	ldrh	r3, [r3, #0]
 8011190:	837b      	strh	r3, [r7, #26]
 8011192:	e01c      	b.n	80111ce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011194:	7dfb      	ldrb	r3, [r7, #23]
 8011196:	2b01      	cmp	r3, #1
 8011198:	d919      	bls.n	80111ce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801119a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801119e:	495e      	ldr	r1, [pc, #376]	; (8011318 <etharp_find_entry+0x2d4>)
 80111a0:	4613      	mov	r3, r2
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	4413      	add	r3, r2
 80111a6:	00db      	lsls	r3, r3, #3
 80111a8:	440b      	add	r3, r1
 80111aa:	3312      	adds	r3, #18
 80111ac:	881b      	ldrh	r3, [r3, #0]
 80111ae:	8b3a      	ldrh	r2, [r7, #24]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d80c      	bhi.n	80111ce <etharp_find_entry+0x18a>
            old_stable = i;
 80111b4:	8c3b      	ldrh	r3, [r7, #32]
 80111b6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80111b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111bc:	4956      	ldr	r1, [pc, #344]	; (8011318 <etharp_find_entry+0x2d4>)
 80111be:	4613      	mov	r3, r2
 80111c0:	005b      	lsls	r3, r3, #1
 80111c2:	4413      	add	r3, r2
 80111c4:	00db      	lsls	r3, r3, #3
 80111c6:	440b      	add	r3, r1
 80111c8:	3312      	adds	r3, #18
 80111ca:	881b      	ldrh	r3, [r3, #0]
 80111cc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80111ce:	8c3b      	ldrh	r3, [r7, #32]
 80111d0:	3301      	adds	r3, #1
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	843b      	strh	r3, [r7, #32]
 80111d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80111da:	2b09      	cmp	r3, #9
 80111dc:	f77f af4c 	ble.w	8011078 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80111e0:	7afb      	ldrb	r3, [r7, #11]
 80111e2:	f003 0302 	and.w	r3, r3, #2
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d108      	bne.n	80111fc <etharp_find_entry+0x1b8>
 80111ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80111ee:	2b0a      	cmp	r3, #10
 80111f0:	d107      	bne.n	8011202 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80111f2:	7afb      	ldrb	r3, [r7, #11]
 80111f4:	f003 0301 	and.w	r3, r3, #1
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d102      	bne.n	8011202 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80111fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011200:	e085      	b.n	801130e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011202:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011206:	2b09      	cmp	r3, #9
 8011208:	dc02      	bgt.n	8011210 <etharp_find_entry+0x1cc>
    i = empty;
 801120a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801120c:	843b      	strh	r3, [r7, #32]
 801120e:	e039      	b.n	8011284 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011210:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011214:	2b09      	cmp	r3, #9
 8011216:	dc14      	bgt.n	8011242 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801121a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801121c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011220:	493d      	ldr	r1, [pc, #244]	; (8011318 <etharp_find_entry+0x2d4>)
 8011222:	4613      	mov	r3, r2
 8011224:	005b      	lsls	r3, r3, #1
 8011226:	4413      	add	r3, r2
 8011228:	00db      	lsls	r3, r3, #3
 801122a:	440b      	add	r3, r1
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d018      	beq.n	8011264 <etharp_find_entry+0x220>
 8011232:	4b3a      	ldr	r3, [pc, #232]	; (801131c <etharp_find_entry+0x2d8>)
 8011234:	f240 126d 	movw	r2, #365	; 0x16d
 8011238:	493b      	ldr	r1, [pc, #236]	; (8011328 <etharp_find_entry+0x2e4>)
 801123a:	483a      	ldr	r0, [pc, #232]	; (8011324 <etharp_find_entry+0x2e0>)
 801123c:	f002 f952 	bl	80134e4 <iprintf>
 8011240:	e010      	b.n	8011264 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011242:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011246:	2b09      	cmp	r3, #9
 8011248:	dc02      	bgt.n	8011250 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801124a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801124c:	843b      	strh	r3, [r7, #32]
 801124e:	e009      	b.n	8011264 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011250:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011254:	2b09      	cmp	r3, #9
 8011256:	dc02      	bgt.n	801125e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011258:	8bfb      	ldrh	r3, [r7, #30]
 801125a:	843b      	strh	r3, [r7, #32]
 801125c:	e002      	b.n	8011264 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801125e:	f04f 33ff 	mov.w	r3, #4294967295
 8011262:	e054      	b.n	801130e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011264:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011268:	2b09      	cmp	r3, #9
 801126a:	dd06      	ble.n	801127a <etharp_find_entry+0x236>
 801126c:	4b2b      	ldr	r3, [pc, #172]	; (801131c <etharp_find_entry+0x2d8>)
 801126e:	f240 127f 	movw	r2, #383	; 0x17f
 8011272:	492e      	ldr	r1, [pc, #184]	; (801132c <etharp_find_entry+0x2e8>)
 8011274:	482b      	ldr	r0, [pc, #172]	; (8011324 <etharp_find_entry+0x2e0>)
 8011276:	f002 f935 	bl	80134e4 <iprintf>
    etharp_free_entry(i);
 801127a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801127e:	4618      	mov	r0, r3
 8011280:	f7ff fe06 	bl	8010e90 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011284:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011288:	2b09      	cmp	r3, #9
 801128a:	dd06      	ble.n	801129a <etharp_find_entry+0x256>
 801128c:	4b23      	ldr	r3, [pc, #140]	; (801131c <etharp_find_entry+0x2d8>)
 801128e:	f240 1283 	movw	r2, #387	; 0x183
 8011292:	4926      	ldr	r1, [pc, #152]	; (801132c <etharp_find_entry+0x2e8>)
 8011294:	4823      	ldr	r0, [pc, #140]	; (8011324 <etharp_find_entry+0x2e0>)
 8011296:	f002 f925 	bl	80134e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801129a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801129e:	491e      	ldr	r1, [pc, #120]	; (8011318 <etharp_find_entry+0x2d4>)
 80112a0:	4613      	mov	r3, r2
 80112a2:	005b      	lsls	r3, r3, #1
 80112a4:	4413      	add	r3, r2
 80112a6:	00db      	lsls	r3, r3, #3
 80112a8:	440b      	add	r3, r1
 80112aa:	3314      	adds	r3, #20
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d006      	beq.n	80112c0 <etharp_find_entry+0x27c>
 80112b2:	4b1a      	ldr	r3, [pc, #104]	; (801131c <etharp_find_entry+0x2d8>)
 80112b4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80112b8:	491d      	ldr	r1, [pc, #116]	; (8011330 <etharp_find_entry+0x2ec>)
 80112ba:	481a      	ldr	r0, [pc, #104]	; (8011324 <etharp_find_entry+0x2e0>)
 80112bc:	f002 f912 	bl	80134e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d00b      	beq.n	80112de <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80112c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6819      	ldr	r1, [r3, #0]
 80112ce:	4812      	ldr	r0, [pc, #72]	; (8011318 <etharp_find_entry+0x2d4>)
 80112d0:	4613      	mov	r3, r2
 80112d2:	005b      	lsls	r3, r3, #1
 80112d4:	4413      	add	r3, r2
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	4403      	add	r3, r0
 80112da:	3304      	adds	r3, #4
 80112dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80112de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112e2:	490d      	ldr	r1, [pc, #52]	; (8011318 <etharp_find_entry+0x2d4>)
 80112e4:	4613      	mov	r3, r2
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	4413      	add	r3, r2
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	440b      	add	r3, r1
 80112ee:	3312      	adds	r3, #18
 80112f0:	2200      	movs	r2, #0
 80112f2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80112f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112f8:	4907      	ldr	r1, [pc, #28]	; (8011318 <etharp_find_entry+0x2d4>)
 80112fa:	4613      	mov	r3, r2
 80112fc:	005b      	lsls	r3, r3, #1
 80112fe:	4413      	add	r3, r2
 8011300:	00db      	lsls	r3, r3, #3
 8011302:	440b      	add	r3, r1
 8011304:	3308      	adds	r3, #8
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801130a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3728      	adds	r7, #40	; 0x28
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20008f10 	.word	0x20008f10
 801131c:	08016c4c 	.word	0x08016c4c
 8011320:	08016c84 	.word	0x08016c84
 8011324:	08016cc4 	.word	0x08016cc4
 8011328:	08016cec 	.word	0x08016cec
 801132c:	08016d04 	.word	0x08016d04
 8011330:	08016d18 	.word	0x08016d18

08011334 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b088      	sub	sp, #32
 8011338:	af02      	add	r7, sp, #8
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]
 8011340:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011348:	2b06      	cmp	r3, #6
 801134a:	d006      	beq.n	801135a <etharp_update_arp_entry+0x26>
 801134c:	4b48      	ldr	r3, [pc, #288]	; (8011470 <etharp_update_arp_entry+0x13c>)
 801134e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011352:	4948      	ldr	r1, [pc, #288]	; (8011474 <etharp_update_arp_entry+0x140>)
 8011354:	4848      	ldr	r0, [pc, #288]	; (8011478 <etharp_update_arp_entry+0x144>)
 8011356:	f002 f8c5 	bl	80134e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d012      	beq.n	8011386 <etharp_update_arp_entry+0x52>
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d00e      	beq.n	8011386 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	68f9      	ldr	r1, [r7, #12]
 801136e:	4618      	mov	r0, r3
 8011370:	f001 f8fe 	bl	8012570 <ip4_addr_isbroadcast_u32>
 8011374:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011376:	2b00      	cmp	r3, #0
 8011378:	d105      	bne.n	8011386 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011382:	2be0      	cmp	r3, #224	; 0xe0
 8011384:	d102      	bne.n	801138c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011386:	f06f 030f 	mvn.w	r3, #15
 801138a:	e06c      	b.n	8011466 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801138c:	78fb      	ldrb	r3, [r7, #3]
 801138e:	68fa      	ldr	r2, [r7, #12]
 8011390:	4619      	mov	r1, r3
 8011392:	68b8      	ldr	r0, [r7, #8]
 8011394:	f7ff fe56 	bl	8011044 <etharp_find_entry>
 8011398:	4603      	mov	r3, r0
 801139a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801139c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	da02      	bge.n	80113aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80113a4:	8afb      	ldrh	r3, [r7, #22]
 80113a6:	b25b      	sxtb	r3, r3
 80113a8:	e05d      	b.n	8011466 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80113aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113ae:	4933      	ldr	r1, [pc, #204]	; (801147c <etharp_update_arp_entry+0x148>)
 80113b0:	4613      	mov	r3, r2
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	4413      	add	r3, r2
 80113b6:	00db      	lsls	r3, r3, #3
 80113b8:	440b      	add	r3, r1
 80113ba:	3314      	adds	r3, #20
 80113bc:	2202      	movs	r2, #2
 80113be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80113c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113c4:	492d      	ldr	r1, [pc, #180]	; (801147c <etharp_update_arp_entry+0x148>)
 80113c6:	4613      	mov	r3, r2
 80113c8:	005b      	lsls	r3, r3, #1
 80113ca:	4413      	add	r3, r2
 80113cc:	00db      	lsls	r3, r3, #3
 80113ce:	440b      	add	r3, r1
 80113d0:	3308      	adds	r3, #8
 80113d2:	68fa      	ldr	r2, [r7, #12]
 80113d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80113d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113da:	4613      	mov	r3, r2
 80113dc:	005b      	lsls	r3, r3, #1
 80113de:	4413      	add	r3, r2
 80113e0:	00db      	lsls	r3, r3, #3
 80113e2:	3308      	adds	r3, #8
 80113e4:	4a25      	ldr	r2, [pc, #148]	; (801147c <etharp_update_arp_entry+0x148>)
 80113e6:	4413      	add	r3, r2
 80113e8:	3304      	adds	r3, #4
 80113ea:	2206      	movs	r2, #6
 80113ec:	6879      	ldr	r1, [r7, #4]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f002 f848 	bl	8013484 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80113f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113f8:	4920      	ldr	r1, [pc, #128]	; (801147c <etharp_update_arp_entry+0x148>)
 80113fa:	4613      	mov	r3, r2
 80113fc:	005b      	lsls	r3, r3, #1
 80113fe:	4413      	add	r3, r2
 8011400:	00db      	lsls	r3, r3, #3
 8011402:	440b      	add	r3, r1
 8011404:	3312      	adds	r3, #18
 8011406:	2200      	movs	r2, #0
 8011408:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801140a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801140e:	491b      	ldr	r1, [pc, #108]	; (801147c <etharp_update_arp_entry+0x148>)
 8011410:	4613      	mov	r3, r2
 8011412:	005b      	lsls	r3, r3, #1
 8011414:	4413      	add	r3, r2
 8011416:	00db      	lsls	r3, r3, #3
 8011418:	440b      	add	r3, r1
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d021      	beq.n	8011464 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011420:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011424:	4915      	ldr	r1, [pc, #84]	; (801147c <etharp_update_arp_entry+0x148>)
 8011426:	4613      	mov	r3, r2
 8011428:	005b      	lsls	r3, r3, #1
 801142a:	4413      	add	r3, r2
 801142c:	00db      	lsls	r3, r3, #3
 801142e:	440b      	add	r3, r1
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011434:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011438:	4910      	ldr	r1, [pc, #64]	; (801147c <etharp_update_arp_entry+0x148>)
 801143a:	4613      	mov	r3, r2
 801143c:	005b      	lsls	r3, r3, #1
 801143e:	4413      	add	r3, r2
 8011440:	00db      	lsls	r3, r3, #3
 8011442:	440b      	add	r3, r1
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801144e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011452:	9300      	str	r3, [sp, #0]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6939      	ldr	r1, [r7, #16]
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f001 ff97 	bl	801338c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801145e:	6938      	ldr	r0, [r7, #16]
 8011460:	f7f9 f9cc 	bl	800a7fc <pbuf_free>
  }
  return ERR_OK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	08016c4c 	.word	0x08016c4c
 8011474:	08016d44 	.word	0x08016d44
 8011478:	08016cc4 	.word	0x08016cc4
 801147c:	20008f10 	.word	0x20008f10

08011480 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011488:	2300      	movs	r3, #0
 801148a:	60fb      	str	r3, [r7, #12]
 801148c:	e01e      	b.n	80114cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801148e:	4913      	ldr	r1, [pc, #76]	; (80114dc <etharp_cleanup_netif+0x5c>)
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	4613      	mov	r3, r2
 8011494:	005b      	lsls	r3, r3, #1
 8011496:	4413      	add	r3, r2
 8011498:	00db      	lsls	r3, r3, #3
 801149a:	440b      	add	r3, r1
 801149c:	3314      	adds	r3, #20
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80114a2:	7afb      	ldrb	r3, [r7, #11]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00e      	beq.n	80114c6 <etharp_cleanup_netif+0x46>
 80114a8:	490c      	ldr	r1, [pc, #48]	; (80114dc <etharp_cleanup_netif+0x5c>)
 80114aa:	68fa      	ldr	r2, [r7, #12]
 80114ac:	4613      	mov	r3, r2
 80114ae:	005b      	lsls	r3, r3, #1
 80114b0:	4413      	add	r3, r2
 80114b2:	00db      	lsls	r3, r3, #3
 80114b4:	440b      	add	r3, r1
 80114b6:	3308      	adds	r3, #8
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d102      	bne.n	80114c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80114c0:	68f8      	ldr	r0, [r7, #12]
 80114c2:	f7ff fce5 	bl	8010e90 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	3301      	adds	r3, #1
 80114ca:	60fb      	str	r3, [r7, #12]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2b09      	cmp	r3, #9
 80114d0:	dddd      	ble.n	801148e <etharp_cleanup_netif+0xe>
    }
  }
}
 80114d2:	bf00      	nop
 80114d4:	bf00      	nop
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	20008f10 	.word	0x20008f10

080114e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80114e0:	b5b0      	push	{r4, r5, r7, lr}
 80114e2:	b08a      	sub	sp, #40	; 0x28
 80114e4:	af04      	add	r7, sp, #16
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d107      	bne.n	8011500 <etharp_input+0x20>
 80114f0:	4b3d      	ldr	r3, [pc, #244]	; (80115e8 <etharp_input+0x108>)
 80114f2:	f240 228a 	movw	r2, #650	; 0x28a
 80114f6:	493d      	ldr	r1, [pc, #244]	; (80115ec <etharp_input+0x10c>)
 80114f8:	483d      	ldr	r0, [pc, #244]	; (80115f0 <etharp_input+0x110>)
 80114fa:	f001 fff3 	bl	80134e4 <iprintf>
 80114fe:	e06f      	b.n	80115e0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	881b      	ldrh	r3, [r3, #0]
 801150a:	b29b      	uxth	r3, r3
 801150c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011510:	d10c      	bne.n	801152c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011516:	2b06      	cmp	r3, #6
 8011518:	d108      	bne.n	801152c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801151e:	2b04      	cmp	r3, #4
 8011520:	d104      	bne.n	801152c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	885b      	ldrh	r3, [r3, #2]
 8011526:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011528:	2b08      	cmp	r3, #8
 801152a:	d003      	beq.n	8011534 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7f9 f965 	bl	800a7fc <pbuf_free>
    return;
 8011532:	e055      	b.n	80115e0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	330e      	adds	r3, #14
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	3318      	adds	r3, #24
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	3304      	adds	r3, #4
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d102      	bne.n	8011554 <etharp_input+0x74>
    for_us = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	75fb      	strb	r3, [r7, #23]
 8011552:	e009      	b.n	8011568 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	3304      	adds	r3, #4
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	429a      	cmp	r2, r3
 801155e:	bf0c      	ite	eq
 8011560:	2301      	moveq	r3, #1
 8011562:	2300      	movne	r3, #0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	f103 0208 	add.w	r2, r3, #8
 801156e:	7dfb      	ldrb	r3, [r7, #23]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d001      	beq.n	8011578 <etharp_input+0x98>
 8011574:	2301      	movs	r3, #1
 8011576:	e000      	b.n	801157a <etharp_input+0x9a>
 8011578:	2302      	movs	r3, #2
 801157a:	f107 010c 	add.w	r1, r7, #12
 801157e:	6838      	ldr	r0, [r7, #0]
 8011580:	f7ff fed8 	bl	8011334 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	88db      	ldrh	r3, [r3, #6]
 8011588:	b29b      	uxth	r3, r3
 801158a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801158e:	d003      	beq.n	8011598 <etharp_input+0xb8>
 8011590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011594:	d01e      	beq.n	80115d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011596:	e020      	b.n	80115da <etharp_input+0xfa>
      if (for_us) {
 8011598:	7dfb      	ldrb	r3, [r7, #23]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d01c      	beq.n	80115d8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80115b4:	693a      	ldr	r2, [r7, #16]
 80115b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80115b8:	2102      	movs	r1, #2
 80115ba:	9103      	str	r1, [sp, #12]
 80115bc:	f107 010c 	add.w	r1, r7, #12
 80115c0:	9102      	str	r1, [sp, #8]
 80115c2:	9201      	str	r2, [sp, #4]
 80115c4:	9300      	str	r3, [sp, #0]
 80115c6:	462b      	mov	r3, r5
 80115c8:	4622      	mov	r2, r4
 80115ca:	4601      	mov	r1, r0
 80115cc:	6838      	ldr	r0, [r7, #0]
 80115ce:	f000 faeb 	bl	8011ba8 <etharp_raw>
      break;
 80115d2:	e001      	b.n	80115d8 <etharp_input+0xf8>
      break;
 80115d4:	bf00      	nop
 80115d6:	e000      	b.n	80115da <etharp_input+0xfa>
      break;
 80115d8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f7f9 f90e 	bl	800a7fc <pbuf_free>
}
 80115e0:	3718      	adds	r7, #24
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bdb0      	pop	{r4, r5, r7, pc}
 80115e6:	bf00      	nop
 80115e8:	08016c4c 	.word	0x08016c4c
 80115ec:	08016d9c 	.word	0x08016d9c
 80115f0:	08016cc4 	.word	0x08016cc4

080115f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b086      	sub	sp, #24
 80115f8:	af02      	add	r7, sp, #8
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	4613      	mov	r3, r2
 8011600:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011602:	79fa      	ldrb	r2, [r7, #7]
 8011604:	4944      	ldr	r1, [pc, #272]	; (8011718 <etharp_output_to_arp_index+0x124>)
 8011606:	4613      	mov	r3, r2
 8011608:	005b      	lsls	r3, r3, #1
 801160a:	4413      	add	r3, r2
 801160c:	00db      	lsls	r3, r3, #3
 801160e:	440b      	add	r3, r1
 8011610:	3314      	adds	r3, #20
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	2b01      	cmp	r3, #1
 8011616:	d806      	bhi.n	8011626 <etharp_output_to_arp_index+0x32>
 8011618:	4b40      	ldr	r3, [pc, #256]	; (801171c <etharp_output_to_arp_index+0x128>)
 801161a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801161e:	4940      	ldr	r1, [pc, #256]	; (8011720 <etharp_output_to_arp_index+0x12c>)
 8011620:	4840      	ldr	r0, [pc, #256]	; (8011724 <etharp_output_to_arp_index+0x130>)
 8011622:	f001 ff5f 	bl	80134e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011626:	79fa      	ldrb	r2, [r7, #7]
 8011628:	493b      	ldr	r1, [pc, #236]	; (8011718 <etharp_output_to_arp_index+0x124>)
 801162a:	4613      	mov	r3, r2
 801162c:	005b      	lsls	r3, r3, #1
 801162e:	4413      	add	r3, r2
 8011630:	00db      	lsls	r3, r3, #3
 8011632:	440b      	add	r3, r1
 8011634:	3314      	adds	r3, #20
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	2b02      	cmp	r3, #2
 801163a:	d153      	bne.n	80116e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801163c:	79fa      	ldrb	r2, [r7, #7]
 801163e:	4936      	ldr	r1, [pc, #216]	; (8011718 <etharp_output_to_arp_index+0x124>)
 8011640:	4613      	mov	r3, r2
 8011642:	005b      	lsls	r3, r3, #1
 8011644:	4413      	add	r3, r2
 8011646:	00db      	lsls	r3, r3, #3
 8011648:	440b      	add	r3, r1
 801164a:	3312      	adds	r3, #18
 801164c:	881b      	ldrh	r3, [r3, #0]
 801164e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011652:	d919      	bls.n	8011688 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011654:	79fa      	ldrb	r2, [r7, #7]
 8011656:	4613      	mov	r3, r2
 8011658:	005b      	lsls	r3, r3, #1
 801165a:	4413      	add	r3, r2
 801165c:	00db      	lsls	r3, r3, #3
 801165e:	4a2e      	ldr	r2, [pc, #184]	; (8011718 <etharp_output_to_arp_index+0x124>)
 8011660:	4413      	add	r3, r2
 8011662:	3304      	adds	r3, #4
 8011664:	4619      	mov	r1, r3
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f000 fb4c 	bl	8011d04 <etharp_request>
 801166c:	4603      	mov	r3, r0
 801166e:	2b00      	cmp	r3, #0
 8011670:	d138      	bne.n	80116e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011672:	79fa      	ldrb	r2, [r7, #7]
 8011674:	4928      	ldr	r1, [pc, #160]	; (8011718 <etharp_output_to_arp_index+0x124>)
 8011676:	4613      	mov	r3, r2
 8011678:	005b      	lsls	r3, r3, #1
 801167a:	4413      	add	r3, r2
 801167c:	00db      	lsls	r3, r3, #3
 801167e:	440b      	add	r3, r1
 8011680:	3314      	adds	r3, #20
 8011682:	2203      	movs	r2, #3
 8011684:	701a      	strb	r2, [r3, #0]
 8011686:	e02d      	b.n	80116e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011688:	79fa      	ldrb	r2, [r7, #7]
 801168a:	4923      	ldr	r1, [pc, #140]	; (8011718 <etharp_output_to_arp_index+0x124>)
 801168c:	4613      	mov	r3, r2
 801168e:	005b      	lsls	r3, r3, #1
 8011690:	4413      	add	r3, r2
 8011692:	00db      	lsls	r3, r3, #3
 8011694:	440b      	add	r3, r1
 8011696:	3312      	adds	r3, #18
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801169e:	d321      	bcc.n	80116e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80116a0:	79fa      	ldrb	r2, [r7, #7]
 80116a2:	4613      	mov	r3, r2
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	4413      	add	r3, r2
 80116a8:	00db      	lsls	r3, r3, #3
 80116aa:	4a1b      	ldr	r2, [pc, #108]	; (8011718 <etharp_output_to_arp_index+0x124>)
 80116ac:	4413      	add	r3, r2
 80116ae:	1d19      	adds	r1, r3, #4
 80116b0:	79fa      	ldrb	r2, [r7, #7]
 80116b2:	4613      	mov	r3, r2
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	4413      	add	r3, r2
 80116b8:	00db      	lsls	r3, r3, #3
 80116ba:	3308      	adds	r3, #8
 80116bc:	4a16      	ldr	r2, [pc, #88]	; (8011718 <etharp_output_to_arp_index+0x124>)
 80116be:	4413      	add	r3, r2
 80116c0:	3304      	adds	r3, #4
 80116c2:	461a      	mov	r2, r3
 80116c4:	68f8      	ldr	r0, [r7, #12]
 80116c6:	f000 fafb 	bl	8011cc0 <etharp_request_dst>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d109      	bne.n	80116e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80116d0:	79fa      	ldrb	r2, [r7, #7]
 80116d2:	4911      	ldr	r1, [pc, #68]	; (8011718 <etharp_output_to_arp_index+0x124>)
 80116d4:	4613      	mov	r3, r2
 80116d6:	005b      	lsls	r3, r3, #1
 80116d8:	4413      	add	r3, r2
 80116da:	00db      	lsls	r3, r3, #3
 80116dc:	440b      	add	r3, r1
 80116de:	3314      	adds	r3, #20
 80116e0:	2203      	movs	r2, #3
 80116e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80116ea:	79fa      	ldrb	r2, [r7, #7]
 80116ec:	4613      	mov	r3, r2
 80116ee:	005b      	lsls	r3, r3, #1
 80116f0:	4413      	add	r3, r2
 80116f2:	00db      	lsls	r3, r3, #3
 80116f4:	3308      	adds	r3, #8
 80116f6:	4a08      	ldr	r2, [pc, #32]	; (8011718 <etharp_output_to_arp_index+0x124>)
 80116f8:	4413      	add	r3, r2
 80116fa:	3304      	adds	r3, #4
 80116fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011700:	9200      	str	r2, [sp, #0]
 8011702:	460a      	mov	r2, r1
 8011704:	68b9      	ldr	r1, [r7, #8]
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f001 fe40 	bl	801338c <ethernet_output>
 801170c:	4603      	mov	r3, r0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	20008f10 	.word	0x20008f10
 801171c:	08016c4c 	.word	0x08016c4c
 8011720:	08016dbc 	.word	0x08016dbc
 8011724:	08016cc4 	.word	0x08016cc4

08011728 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b08a      	sub	sp, #40	; 0x28
 801172c:	af02      	add	r7, sp, #8
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d106      	bne.n	801174c <etharp_output+0x24>
 801173e:	4b73      	ldr	r3, [pc, #460]	; (801190c <etharp_output+0x1e4>)
 8011740:	f240 321e 	movw	r2, #798	; 0x31e
 8011744:	4972      	ldr	r1, [pc, #456]	; (8011910 <etharp_output+0x1e8>)
 8011746:	4873      	ldr	r0, [pc, #460]	; (8011914 <etharp_output+0x1ec>)
 8011748:	f001 fecc 	bl	80134e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d106      	bne.n	8011760 <etharp_output+0x38>
 8011752:	4b6e      	ldr	r3, [pc, #440]	; (801190c <etharp_output+0x1e4>)
 8011754:	f240 321f 	movw	r2, #799	; 0x31f
 8011758:	496f      	ldr	r1, [pc, #444]	; (8011918 <etharp_output+0x1f0>)
 801175a:	486e      	ldr	r0, [pc, #440]	; (8011914 <etharp_output+0x1ec>)
 801175c:	f001 fec2 	bl	80134e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d106      	bne.n	8011774 <etharp_output+0x4c>
 8011766:	4b69      	ldr	r3, [pc, #420]	; (801190c <etharp_output+0x1e4>)
 8011768:	f44f 7248 	mov.w	r2, #800	; 0x320
 801176c:	496b      	ldr	r1, [pc, #428]	; (801191c <etharp_output+0x1f4>)
 801176e:	4869      	ldr	r0, [pc, #420]	; (8011914 <etharp_output+0x1ec>)
 8011770:	f001 feb8 	bl	80134e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	68f9      	ldr	r1, [r7, #12]
 801177a:	4618      	mov	r0, r3
 801177c:	f000 fef8 	bl	8012570 <ip4_addr_isbroadcast_u32>
 8011780:	4603      	mov	r3, r0
 8011782:	2b00      	cmp	r3, #0
 8011784:	d002      	beq.n	801178c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011786:	4b66      	ldr	r3, [pc, #408]	; (8011920 <etharp_output+0x1f8>)
 8011788:	61fb      	str	r3, [r7, #28]
 801178a:	e0af      	b.n	80118ec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011794:	2be0      	cmp	r3, #224	; 0xe0
 8011796:	d118      	bne.n	80117ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011798:	2301      	movs	r3, #1
 801179a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801179c:	2300      	movs	r3, #0
 801179e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80117a0:	235e      	movs	r3, #94	; 0x5e
 80117a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	3301      	adds	r3, #1
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	3302      	adds	r3, #2
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	3303      	adds	r3, #3
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80117c2:	f107 0310 	add.w	r3, r7, #16
 80117c6:	61fb      	str	r3, [r7, #28]
 80117c8:	e090      	b.n	80118ec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	3304      	adds	r3, #4
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	405a      	eors	r2, r3
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	3308      	adds	r3, #8
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4013      	ands	r3, r2
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d012      	beq.n	8011808 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80117e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d00b      	beq.n	8011808 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	330c      	adds	r3, #12
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d003      	beq.n	8011802 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	330c      	adds	r3, #12
 80117fe:	61bb      	str	r3, [r7, #24]
 8011800:	e002      	b.n	8011808 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011802:	f06f 0303 	mvn.w	r3, #3
 8011806:	e07d      	b.n	8011904 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011808:	4b46      	ldr	r3, [pc, #280]	; (8011924 <etharp_output+0x1fc>)
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	4619      	mov	r1, r3
 801180e:	4a46      	ldr	r2, [pc, #280]	; (8011928 <etharp_output+0x200>)
 8011810:	460b      	mov	r3, r1
 8011812:	005b      	lsls	r3, r3, #1
 8011814:	440b      	add	r3, r1
 8011816:	00db      	lsls	r3, r3, #3
 8011818:	4413      	add	r3, r2
 801181a:	3314      	adds	r3, #20
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	2b01      	cmp	r3, #1
 8011820:	d925      	bls.n	801186e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011822:	4b40      	ldr	r3, [pc, #256]	; (8011924 <etharp_output+0x1fc>)
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	4619      	mov	r1, r3
 8011828:	4a3f      	ldr	r2, [pc, #252]	; (8011928 <etharp_output+0x200>)
 801182a:	460b      	mov	r3, r1
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	440b      	add	r3, r1
 8011830:	00db      	lsls	r3, r3, #3
 8011832:	4413      	add	r3, r2
 8011834:	3308      	adds	r3, #8
 8011836:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	429a      	cmp	r2, r3
 801183c:	d117      	bne.n	801186e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	4b38      	ldr	r3, [pc, #224]	; (8011924 <etharp_output+0x1fc>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	4618      	mov	r0, r3
 8011848:	4937      	ldr	r1, [pc, #220]	; (8011928 <etharp_output+0x200>)
 801184a:	4603      	mov	r3, r0
 801184c:	005b      	lsls	r3, r3, #1
 801184e:	4403      	add	r3, r0
 8011850:	00db      	lsls	r3, r3, #3
 8011852:	440b      	add	r3, r1
 8011854:	3304      	adds	r3, #4
 8011856:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011858:	429a      	cmp	r2, r3
 801185a:	d108      	bne.n	801186e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801185c:	4b31      	ldr	r3, [pc, #196]	; (8011924 <etharp_output+0x1fc>)
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	461a      	mov	r2, r3
 8011862:	68b9      	ldr	r1, [r7, #8]
 8011864:	68f8      	ldr	r0, [r7, #12]
 8011866:	f7ff fec5 	bl	80115f4 <etharp_output_to_arp_index>
 801186a:	4603      	mov	r3, r0
 801186c:	e04a      	b.n	8011904 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801186e:	2300      	movs	r3, #0
 8011870:	75fb      	strb	r3, [r7, #23]
 8011872:	e031      	b.n	80118d8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011874:	7dfa      	ldrb	r2, [r7, #23]
 8011876:	492c      	ldr	r1, [pc, #176]	; (8011928 <etharp_output+0x200>)
 8011878:	4613      	mov	r3, r2
 801187a:	005b      	lsls	r3, r3, #1
 801187c:	4413      	add	r3, r2
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	440b      	add	r3, r1
 8011882:	3314      	adds	r3, #20
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	2b01      	cmp	r3, #1
 8011888:	d923      	bls.n	80118d2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801188a:	7dfa      	ldrb	r2, [r7, #23]
 801188c:	4926      	ldr	r1, [pc, #152]	; (8011928 <etharp_output+0x200>)
 801188e:	4613      	mov	r3, r2
 8011890:	005b      	lsls	r3, r3, #1
 8011892:	4413      	add	r3, r2
 8011894:	00db      	lsls	r3, r3, #3
 8011896:	440b      	add	r3, r1
 8011898:	3308      	adds	r3, #8
 801189a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801189c:	68fa      	ldr	r2, [r7, #12]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d117      	bne.n	80118d2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	6819      	ldr	r1, [r3, #0]
 80118a6:	7dfa      	ldrb	r2, [r7, #23]
 80118a8:	481f      	ldr	r0, [pc, #124]	; (8011928 <etharp_output+0x200>)
 80118aa:	4613      	mov	r3, r2
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	4413      	add	r3, r2
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	4403      	add	r3, r0
 80118b4:	3304      	adds	r3, #4
 80118b6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80118b8:	4299      	cmp	r1, r3
 80118ba:	d10a      	bne.n	80118d2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80118bc:	4a19      	ldr	r2, [pc, #100]	; (8011924 <etharp_output+0x1fc>)
 80118be:	7dfb      	ldrb	r3, [r7, #23]
 80118c0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80118c2:	7dfb      	ldrb	r3, [r7, #23]
 80118c4:	461a      	mov	r2, r3
 80118c6:	68b9      	ldr	r1, [r7, #8]
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f7ff fe93 	bl	80115f4 <etharp_output_to_arp_index>
 80118ce:	4603      	mov	r3, r0
 80118d0:	e018      	b.n	8011904 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80118d2:	7dfb      	ldrb	r3, [r7, #23]
 80118d4:	3301      	adds	r3, #1
 80118d6:	75fb      	strb	r3, [r7, #23]
 80118d8:	7dfb      	ldrb	r3, [r7, #23]
 80118da:	2b09      	cmp	r3, #9
 80118dc:	d9ca      	bls.n	8011874 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80118de:	68ba      	ldr	r2, [r7, #8]
 80118e0:	69b9      	ldr	r1, [r7, #24]
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f000 f822 	bl	801192c <etharp_query>
 80118e8:	4603      	mov	r3, r0
 80118ea:	e00b      	b.n	8011904 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80118f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80118f6:	9300      	str	r3, [sp, #0]
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	68b9      	ldr	r1, [r7, #8]
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f001 fd45 	bl	801338c <ethernet_output>
 8011902:	4603      	mov	r3, r0
}
 8011904:	4618      	mov	r0, r3
 8011906:	3720      	adds	r7, #32
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	08016c4c 	.word	0x08016c4c
 8011910:	08016d9c 	.word	0x08016d9c
 8011914:	08016cc4 	.word	0x08016cc4
 8011918:	08016dec 	.word	0x08016dec
 801191c:	08016d8c 	.word	0x08016d8c
 8011920:	08017404 	.word	0x08017404
 8011924:	20009000 	.word	0x20009000
 8011928:	20008f10 	.word	0x20008f10

0801192c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b08c      	sub	sp, #48	; 0x30
 8011930:	af02      	add	r7, sp, #8
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	3326      	adds	r3, #38	; 0x26
 801193c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801193e:	23ff      	movs	r3, #255	; 0xff
 8011940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011944:	2300      	movs	r3, #0
 8011946:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	68f9      	ldr	r1, [r7, #12]
 801194e:	4618      	mov	r0, r3
 8011950:	f000 fe0e 	bl	8012570 <ip4_addr_isbroadcast_u32>
 8011954:	4603      	mov	r3, r0
 8011956:	2b00      	cmp	r3, #0
 8011958:	d10c      	bne.n	8011974 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011962:	2be0      	cmp	r3, #224	; 0xe0
 8011964:	d006      	beq.n	8011974 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d003      	beq.n	8011974 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d102      	bne.n	801197a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011974:	f06f 030f 	mvn.w	r3, #15
 8011978:	e101      	b.n	8011b7e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801197a:	68fa      	ldr	r2, [r7, #12]
 801197c:	2101      	movs	r1, #1
 801197e:	68b8      	ldr	r0, [r7, #8]
 8011980:	f7ff fb60 	bl	8011044 <etharp_find_entry>
 8011984:	4603      	mov	r3, r0
 8011986:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801198c:	2b00      	cmp	r3, #0
 801198e:	da02      	bge.n	8011996 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011990:	8a7b      	ldrh	r3, [r7, #18]
 8011992:	b25b      	sxtb	r3, r3
 8011994:	e0f3      	b.n	8011b7e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011996:	8a7b      	ldrh	r3, [r7, #18]
 8011998:	2b7e      	cmp	r3, #126	; 0x7e
 801199a:	d906      	bls.n	80119aa <etharp_query+0x7e>
 801199c:	4b7a      	ldr	r3, [pc, #488]	; (8011b88 <etharp_query+0x25c>)
 801199e:	f240 32c1 	movw	r2, #961	; 0x3c1
 80119a2:	497a      	ldr	r1, [pc, #488]	; (8011b8c <etharp_query+0x260>)
 80119a4:	487a      	ldr	r0, [pc, #488]	; (8011b90 <etharp_query+0x264>)
 80119a6:	f001 fd9d 	bl	80134e4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80119aa:	8a7b      	ldrh	r3, [r7, #18]
 80119ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80119ae:	7c7a      	ldrb	r2, [r7, #17]
 80119b0:	4978      	ldr	r1, [pc, #480]	; (8011b94 <etharp_query+0x268>)
 80119b2:	4613      	mov	r3, r2
 80119b4:	005b      	lsls	r3, r3, #1
 80119b6:	4413      	add	r3, r2
 80119b8:	00db      	lsls	r3, r3, #3
 80119ba:	440b      	add	r3, r1
 80119bc:	3314      	adds	r3, #20
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d115      	bne.n	80119f0 <etharp_query+0xc4>
    is_new_entry = 1;
 80119c4:	2301      	movs	r3, #1
 80119c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80119c8:	7c7a      	ldrb	r2, [r7, #17]
 80119ca:	4972      	ldr	r1, [pc, #456]	; (8011b94 <etharp_query+0x268>)
 80119cc:	4613      	mov	r3, r2
 80119ce:	005b      	lsls	r3, r3, #1
 80119d0:	4413      	add	r3, r2
 80119d2:	00db      	lsls	r3, r3, #3
 80119d4:	440b      	add	r3, r1
 80119d6:	3314      	adds	r3, #20
 80119d8:	2201      	movs	r2, #1
 80119da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80119dc:	7c7a      	ldrb	r2, [r7, #17]
 80119de:	496d      	ldr	r1, [pc, #436]	; (8011b94 <etharp_query+0x268>)
 80119e0:	4613      	mov	r3, r2
 80119e2:	005b      	lsls	r3, r3, #1
 80119e4:	4413      	add	r3, r2
 80119e6:	00db      	lsls	r3, r3, #3
 80119e8:	440b      	add	r3, r1
 80119ea:	3308      	adds	r3, #8
 80119ec:	68fa      	ldr	r2, [r7, #12]
 80119ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80119f0:	7c7a      	ldrb	r2, [r7, #17]
 80119f2:	4968      	ldr	r1, [pc, #416]	; (8011b94 <etharp_query+0x268>)
 80119f4:	4613      	mov	r3, r2
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	4413      	add	r3, r2
 80119fa:	00db      	lsls	r3, r3, #3
 80119fc:	440b      	add	r3, r1
 80119fe:	3314      	adds	r3, #20
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d011      	beq.n	8011a2a <etharp_query+0xfe>
 8011a06:	7c7a      	ldrb	r2, [r7, #17]
 8011a08:	4962      	ldr	r1, [pc, #392]	; (8011b94 <etharp_query+0x268>)
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	005b      	lsls	r3, r3, #1
 8011a0e:	4413      	add	r3, r2
 8011a10:	00db      	lsls	r3, r3, #3
 8011a12:	440b      	add	r3, r1
 8011a14:	3314      	adds	r3, #20
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d806      	bhi.n	8011a2a <etharp_query+0xfe>
 8011a1c:	4b5a      	ldr	r3, [pc, #360]	; (8011b88 <etharp_query+0x25c>)
 8011a1e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011a22:	495d      	ldr	r1, [pc, #372]	; (8011b98 <etharp_query+0x26c>)
 8011a24:	485a      	ldr	r0, [pc, #360]	; (8011b90 <etharp_query+0x264>)
 8011a26:	f001 fd5d 	bl	80134e4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011a2a:	6a3b      	ldr	r3, [r7, #32]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d102      	bne.n	8011a36 <etharp_query+0x10a>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d10c      	bne.n	8011a50 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011a36:	68b9      	ldr	r1, [r7, #8]
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	f000 f963 	bl	8011d04 <etharp_request>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d102      	bne.n	8011a50 <etharp_query+0x124>
      return result;
 8011a4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011a4e:	e096      	b.n	8011b7e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d106      	bne.n	8011a64 <etharp_query+0x138>
 8011a56:	4b4c      	ldr	r3, [pc, #304]	; (8011b88 <etharp_query+0x25c>)
 8011a58:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011a5c:	494f      	ldr	r1, [pc, #316]	; (8011b9c <etharp_query+0x270>)
 8011a5e:	484c      	ldr	r0, [pc, #304]	; (8011b90 <etharp_query+0x264>)
 8011a60:	f001 fd40 	bl	80134e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011a64:	7c7a      	ldrb	r2, [r7, #17]
 8011a66:	494b      	ldr	r1, [pc, #300]	; (8011b94 <etharp_query+0x268>)
 8011a68:	4613      	mov	r3, r2
 8011a6a:	005b      	lsls	r3, r3, #1
 8011a6c:	4413      	add	r3, r2
 8011a6e:	00db      	lsls	r3, r3, #3
 8011a70:	440b      	add	r3, r1
 8011a72:	3314      	adds	r3, #20
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d917      	bls.n	8011aaa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011a7a:	4a49      	ldr	r2, [pc, #292]	; (8011ba0 <etharp_query+0x274>)
 8011a7c:	7c7b      	ldrb	r3, [r7, #17]
 8011a7e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011a80:	7c7a      	ldrb	r2, [r7, #17]
 8011a82:	4613      	mov	r3, r2
 8011a84:	005b      	lsls	r3, r3, #1
 8011a86:	4413      	add	r3, r2
 8011a88:	00db      	lsls	r3, r3, #3
 8011a8a:	3308      	adds	r3, #8
 8011a8c:	4a41      	ldr	r2, [pc, #260]	; (8011b94 <etharp_query+0x268>)
 8011a8e:	4413      	add	r3, r2
 8011a90:	3304      	adds	r3, #4
 8011a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a96:	9200      	str	r2, [sp, #0]
 8011a98:	697a      	ldr	r2, [r7, #20]
 8011a9a:	6879      	ldr	r1, [r7, #4]
 8011a9c:	68f8      	ldr	r0, [r7, #12]
 8011a9e:	f001 fc75 	bl	801338c <ethernet_output>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011aa8:	e067      	b.n	8011b7a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011aaa:	7c7a      	ldrb	r2, [r7, #17]
 8011aac:	4939      	ldr	r1, [pc, #228]	; (8011b94 <etharp_query+0x268>)
 8011aae:	4613      	mov	r3, r2
 8011ab0:	005b      	lsls	r3, r3, #1
 8011ab2:	4413      	add	r3, r2
 8011ab4:	00db      	lsls	r3, r3, #3
 8011ab6:	440b      	add	r3, r1
 8011ab8:	3314      	adds	r3, #20
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d15c      	bne.n	8011b7a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011ac8:	e01c      	b.n	8011b04 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	895a      	ldrh	r2, [r3, #10]
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	891b      	ldrh	r3, [r3, #8]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d10a      	bne.n	8011aec <etharp_query+0x1c0>
 8011ad6:	69fb      	ldr	r3, [r7, #28]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d006      	beq.n	8011aec <etharp_query+0x1c0>
 8011ade:	4b2a      	ldr	r3, [pc, #168]	; (8011b88 <etharp_query+0x25c>)
 8011ae0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011ae4:	492f      	ldr	r1, [pc, #188]	; (8011ba4 <etharp_query+0x278>)
 8011ae6:	482a      	ldr	r0, [pc, #168]	; (8011b90 <etharp_query+0x264>)
 8011ae8:	f001 fcfc 	bl	80134e4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	7b1b      	ldrb	r3, [r3, #12]
 8011af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d002      	beq.n	8011afe <etharp_query+0x1d2>
        copy_needed = 1;
 8011af8:	2301      	movs	r3, #1
 8011afa:	61bb      	str	r3, [r7, #24]
        break;
 8011afc:	e005      	b.n	8011b0a <etharp_query+0x1de>
      }
      p = p->next;
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011b04:	69fb      	ldr	r3, [r7, #28]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d1df      	bne.n	8011aca <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d007      	beq.n	8011b20 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011b16:	200e      	movs	r0, #14
 8011b18:	f7f9 f96e 	bl	800adf8 <pbuf_clone>
 8011b1c:	61f8      	str	r0, [r7, #28]
 8011b1e:	e004      	b.n	8011b2a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011b24:	69f8      	ldr	r0, [r7, #28]
 8011b26:	f7f8 ff09 	bl	800a93c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d021      	beq.n	8011b74 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011b30:	7c7a      	ldrb	r2, [r7, #17]
 8011b32:	4918      	ldr	r1, [pc, #96]	; (8011b94 <etharp_query+0x268>)
 8011b34:	4613      	mov	r3, r2
 8011b36:	005b      	lsls	r3, r3, #1
 8011b38:	4413      	add	r3, r2
 8011b3a:	00db      	lsls	r3, r3, #3
 8011b3c:	440b      	add	r3, r1
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00a      	beq.n	8011b5a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011b44:	7c7a      	ldrb	r2, [r7, #17]
 8011b46:	4913      	ldr	r1, [pc, #76]	; (8011b94 <etharp_query+0x268>)
 8011b48:	4613      	mov	r3, r2
 8011b4a:	005b      	lsls	r3, r3, #1
 8011b4c:	4413      	add	r3, r2
 8011b4e:	00db      	lsls	r3, r3, #3
 8011b50:	440b      	add	r3, r1
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7f8 fe51 	bl	800a7fc <pbuf_free>
      }
      arp_table[i].q = p;
 8011b5a:	7c7a      	ldrb	r2, [r7, #17]
 8011b5c:	490d      	ldr	r1, [pc, #52]	; (8011b94 <etharp_query+0x268>)
 8011b5e:	4613      	mov	r3, r2
 8011b60:	005b      	lsls	r3, r3, #1
 8011b62:	4413      	add	r3, r2
 8011b64:	00db      	lsls	r3, r3, #3
 8011b66:	440b      	add	r3, r1
 8011b68:	69fa      	ldr	r2, [r7, #28]
 8011b6a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b72:	e002      	b.n	8011b7a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011b74:	23ff      	movs	r3, #255	; 0xff
 8011b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011b7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3728      	adds	r7, #40	; 0x28
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	08016c4c 	.word	0x08016c4c
 8011b8c:	08016df8 	.word	0x08016df8
 8011b90:	08016cc4 	.word	0x08016cc4
 8011b94:	20008f10 	.word	0x20008f10
 8011b98:	08016e08 	.word	0x08016e08
 8011b9c:	08016dec 	.word	0x08016dec
 8011ba0:	20009000 	.word	0x20009000
 8011ba4:	08016e30 	.word	0x08016e30

08011ba8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b08a      	sub	sp, #40	; 0x28
 8011bac:	af02      	add	r7, sp, #8
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	60b9      	str	r1, [r7, #8]
 8011bb2:	607a      	str	r2, [r7, #4]
 8011bb4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d106      	bne.n	8011bce <etharp_raw+0x26>
 8011bc0:	4b3a      	ldr	r3, [pc, #232]	; (8011cac <etharp_raw+0x104>)
 8011bc2:	f240 4257 	movw	r2, #1111	; 0x457
 8011bc6:	493a      	ldr	r1, [pc, #232]	; (8011cb0 <etharp_raw+0x108>)
 8011bc8:	483a      	ldr	r0, [pc, #232]	; (8011cb4 <etharp_raw+0x10c>)
 8011bca:	f001 fc8b 	bl	80134e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011bce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bd2:	211c      	movs	r1, #28
 8011bd4:	200e      	movs	r0, #14
 8011bd6:	f7f8 fb2d 	bl	800a234 <pbuf_alloc>
 8011bda:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d102      	bne.n	8011be8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011be2:	f04f 33ff 	mov.w	r3, #4294967295
 8011be6:	e05d      	b.n	8011ca4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011be8:	69bb      	ldr	r3, [r7, #24]
 8011bea:	895b      	ldrh	r3, [r3, #10]
 8011bec:	2b1b      	cmp	r3, #27
 8011bee:	d806      	bhi.n	8011bfe <etharp_raw+0x56>
 8011bf0:	4b2e      	ldr	r3, [pc, #184]	; (8011cac <etharp_raw+0x104>)
 8011bf2:	f240 4262 	movw	r2, #1122	; 0x462
 8011bf6:	4930      	ldr	r1, [pc, #192]	; (8011cb8 <etharp_raw+0x110>)
 8011bf8:	482e      	ldr	r0, [pc, #184]	; (8011cb4 <etharp_raw+0x10c>)
 8011bfa:	f001 fc73 	bl	80134e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011c04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7f7 fb44 	bl	8009294 <lwip_htons>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	461a      	mov	r2, r3
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c1a:	2b06      	cmp	r3, #6
 8011c1c:	d006      	beq.n	8011c2c <etharp_raw+0x84>
 8011c1e:	4b23      	ldr	r3, [pc, #140]	; (8011cac <etharp_raw+0x104>)
 8011c20:	f240 4269 	movw	r2, #1129	; 0x469
 8011c24:	4925      	ldr	r1, [pc, #148]	; (8011cbc <etharp_raw+0x114>)
 8011c26:	4823      	ldr	r0, [pc, #140]	; (8011cb4 <etharp_raw+0x10c>)
 8011c28:	f001 fc5c 	bl	80134e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	3308      	adds	r3, #8
 8011c30:	2206      	movs	r2, #6
 8011c32:	6839      	ldr	r1, [r7, #0]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f001 fc25 	bl	8013484 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	3312      	adds	r3, #18
 8011c3e:	2206      	movs	r2, #6
 8011c40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c42:	4618      	mov	r0, r3
 8011c44:	f001 fc1e 	bl	8013484 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	330e      	adds	r3, #14
 8011c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c4e:	6812      	ldr	r2, [r2, #0]
 8011c50:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	3318      	adds	r3, #24
 8011c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c58:	6812      	ldr	r2, [r2, #0]
 8011c5a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	701a      	strb	r2, [r3, #0]
 8011c62:	2200      	movs	r2, #0
 8011c64:	f042 0201 	orr.w	r2, r2, #1
 8011c68:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f042 0208 	orr.w	r2, r2, #8
 8011c72:	709a      	strb	r2, [r3, #2]
 8011c74:	2200      	movs	r2, #0
 8011c76:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	2206      	movs	r2, #6
 8011c7c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	2204      	movs	r2, #4
 8011c82:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011c84:	f640 0306 	movw	r3, #2054	; 0x806
 8011c88:	9300      	str	r3, [sp, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	68ba      	ldr	r2, [r7, #8]
 8011c8e:	69b9      	ldr	r1, [r7, #24]
 8011c90:	68f8      	ldr	r0, [r7, #12]
 8011c92:	f001 fb7b 	bl	801338c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011c96:	69b8      	ldr	r0, [r7, #24]
 8011c98:	f7f8 fdb0 	bl	800a7fc <pbuf_free>
  p = NULL;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011ca0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3720      	adds	r7, #32
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	08016c4c 	.word	0x08016c4c
 8011cb0:	08016d9c 	.word	0x08016d9c
 8011cb4:	08016cc4 	.word	0x08016cc4
 8011cb8:	08016e4c 	.word	0x08016e4c
 8011cbc:	08016e80 	.word	0x08016e80

08011cc0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b088      	sub	sp, #32
 8011cc4:	af04      	add	r7, sp, #16
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011cdc:	2201      	movs	r2, #1
 8011cde:	9203      	str	r2, [sp, #12]
 8011ce0:	68ba      	ldr	r2, [r7, #8]
 8011ce2:	9202      	str	r2, [sp, #8]
 8011ce4:	4a06      	ldr	r2, [pc, #24]	; (8011d00 <etharp_request_dst+0x40>)
 8011ce6:	9201      	str	r2, [sp, #4]
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	4603      	mov	r3, r0
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	68f8      	ldr	r0, [r7, #12]
 8011cf0:	f7ff ff5a 	bl	8011ba8 <etharp_raw>
 8011cf4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3710      	adds	r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	0801740c 	.word	0x0801740c

08011d04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011d0e:	4a05      	ldr	r2, [pc, #20]	; (8011d24 <etharp_request+0x20>)
 8011d10:	6839      	ldr	r1, [r7, #0]
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff ffd4 	bl	8011cc0 <etharp_request_dst>
 8011d18:	4603      	mov	r3, r0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3708      	adds	r7, #8
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	08017404 	.word	0x08017404

08011d28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b08e      	sub	sp, #56	; 0x38
 8011d2c:	af04      	add	r7, sp, #16
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011d32:	4b79      	ldr	r3, [pc, #484]	; (8011f18 <icmp_input+0x1f0>)
 8011d34:	689b      	ldr	r3, [r3, #8]
 8011d36:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	f003 030f 	and.w	r3, r3, #15
 8011d40:	b2db      	uxtb	r3, r3
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011d48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d4a:	2b13      	cmp	r3, #19
 8011d4c:	f240 80cd 	bls.w	8011eea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	895b      	ldrh	r3, [r3, #10]
 8011d54:	2b03      	cmp	r3, #3
 8011d56:	f240 80ca 	bls.w	8011eee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011d64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	f000 80b7 	beq.w	8011edc <icmp_input+0x1b4>
 8011d6e:	2b08      	cmp	r3, #8
 8011d70:	f040 80b7 	bne.w	8011ee2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011d74:	4b69      	ldr	r3, [pc, #420]	; (8011f1c <icmp_input+0x1f4>)
 8011d76:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d78:	4b67      	ldr	r3, [pc, #412]	; (8011f18 <icmp_input+0x1f0>)
 8011d7a:	695b      	ldr	r3, [r3, #20]
 8011d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d80:	2be0      	cmp	r3, #224	; 0xe0
 8011d82:	f000 80bb 	beq.w	8011efc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011d86:	4b64      	ldr	r3, [pc, #400]	; (8011f18 <icmp_input+0x1f0>)
 8011d88:	695b      	ldr	r3, [r3, #20]
 8011d8a:	4a63      	ldr	r2, [pc, #396]	; (8011f18 <icmp_input+0x1f0>)
 8011d8c:	6812      	ldr	r2, [r2, #0]
 8011d8e:	4611      	mov	r1, r2
 8011d90:	4618      	mov	r0, r3
 8011d92:	f000 fbed 	bl	8012570 <ip4_addr_isbroadcast_u32>
 8011d96:	4603      	mov	r3, r0
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f040 80b1 	bne.w	8011f00 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	891b      	ldrh	r3, [r3, #8]
 8011da2:	2b07      	cmp	r3, #7
 8011da4:	f240 80a5 	bls.w	8011ef2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011da8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011daa:	330e      	adds	r3, #14
 8011dac:	4619      	mov	r1, r3
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f7f8 fc8e 	bl	800a6d0 <pbuf_add_header>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d04b      	beq.n	8011e52 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	891a      	ldrh	r2, [r3, #8]
 8011dbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011dc0:	4413      	add	r3, r2
 8011dc2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	891b      	ldrh	r3, [r3, #8]
 8011dc8:	8b7a      	ldrh	r2, [r7, #26]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	f0c0 809a 	bcc.w	8011f04 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011dd0:	8b7b      	ldrh	r3, [r7, #26]
 8011dd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	200e      	movs	r0, #14
 8011dda:	f7f8 fa2b 	bl	800a234 <pbuf_alloc>
 8011dde:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	f000 8090 	beq.w	8011f08 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	895b      	ldrh	r3, [r3, #10]
 8011dec:	461a      	mov	r2, r3
 8011dee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011df0:	3308      	adds	r3, #8
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d203      	bcs.n	8011dfe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011df6:	6978      	ldr	r0, [r7, #20]
 8011df8:	f7f8 fd00 	bl	800a7fc <pbuf_free>
          goto icmperr;
 8011dfc:	e085      	b.n	8011f0a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e06:	4618      	mov	r0, r3
 8011e08:	f001 fb3c 	bl	8013484 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e0e:	4619      	mov	r1, r3
 8011e10:	6978      	ldr	r0, [r7, #20]
 8011e12:	f7f8 fc6d 	bl	800a6f0 <pbuf_remove_header>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d009      	beq.n	8011e30 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011e1c:	4b40      	ldr	r3, [pc, #256]	; (8011f20 <icmp_input+0x1f8>)
 8011e1e:	22b6      	movs	r2, #182	; 0xb6
 8011e20:	4940      	ldr	r1, [pc, #256]	; (8011f24 <icmp_input+0x1fc>)
 8011e22:	4841      	ldr	r0, [pc, #260]	; (8011f28 <icmp_input+0x200>)
 8011e24:	f001 fb5e 	bl	80134e4 <iprintf>
          pbuf_free(r);
 8011e28:	6978      	ldr	r0, [r7, #20]
 8011e2a:	f7f8 fce7 	bl	800a7fc <pbuf_free>
          goto icmperr;
 8011e2e:	e06c      	b.n	8011f0a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011e30:	6879      	ldr	r1, [r7, #4]
 8011e32:	6978      	ldr	r0, [r7, #20]
 8011e34:	f7f8 fe0a 	bl	800aa4c <pbuf_copy>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d003      	beq.n	8011e46 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011e3e:	6978      	ldr	r0, [r7, #20]
 8011e40:	f7f8 fcdc 	bl	800a7fc <pbuf_free>
          goto icmperr;
 8011e44:	e061      	b.n	8011f0a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7f8 fcd8 	bl	800a7fc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	607b      	str	r3, [r7, #4]
 8011e50:	e00f      	b.n	8011e72 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011e52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e54:	330e      	adds	r3, #14
 8011e56:	4619      	mov	r1, r3
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f7f8 fc49 	bl	800a6f0 <pbuf_remove_header>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d006      	beq.n	8011e72 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011e64:	4b2e      	ldr	r3, [pc, #184]	; (8011f20 <icmp_input+0x1f8>)
 8011e66:	22c7      	movs	r2, #199	; 0xc7
 8011e68:	4930      	ldr	r1, [pc, #192]	; (8011f2c <icmp_input+0x204>)
 8011e6a:	482f      	ldr	r0, [pc, #188]	; (8011f28 <icmp_input+0x200>)
 8011e6c:	f001 fb3a 	bl	80134e4 <iprintf>
          goto icmperr;
 8011e70:	e04b      	b.n	8011f0a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7f8 fc27 	bl	800a6d0 <pbuf_add_header>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d12b      	bne.n	8011ee0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011e8e:	69fb      	ldr	r3, [r7, #28]
 8011e90:	681a      	ldr	r2, [r3, #0]
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011e96:	4b20      	ldr	r3, [pc, #128]	; (8011f18 <icmp_input+0x1f0>)
 8011e98:	691a      	ldr	r2, [r3, #16]
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	709a      	strb	r2, [r3, #2]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	22ff      	movs	r2, #255	; 0xff
 8011eb2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	729a      	strb	r2, [r3, #10]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	9302      	str	r3, [sp, #8]
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	9301      	str	r3, [sp, #4]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	9300      	str	r3, [sp, #0]
 8011eca:	23ff      	movs	r3, #255	; 0xff
 8011ecc:	2200      	movs	r2, #0
 8011ece:	69f9      	ldr	r1, [r7, #28]
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f000 fa75 	bl	80123c0 <ip4_output_if>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011eda:	e001      	b.n	8011ee0 <icmp_input+0x1b8>
      break;
 8011edc:	bf00      	nop
 8011ede:	e000      	b.n	8011ee2 <icmp_input+0x1ba>
      break;
 8011ee0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7f8 fc8a 	bl	800a7fc <pbuf_free>
  return;
 8011ee8:	e013      	b.n	8011f12 <icmp_input+0x1ea>
    goto lenerr;
 8011eea:	bf00      	nop
 8011eec:	e002      	b.n	8011ef4 <icmp_input+0x1cc>
    goto lenerr;
 8011eee:	bf00      	nop
 8011ef0:	e000      	b.n	8011ef4 <icmp_input+0x1cc>
        goto lenerr;
 8011ef2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f7f8 fc81 	bl	800a7fc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011efa:	e00a      	b.n	8011f12 <icmp_input+0x1ea>
        goto icmperr;
 8011efc:	bf00      	nop
 8011efe:	e004      	b.n	8011f0a <icmp_input+0x1e2>
        goto icmperr;
 8011f00:	bf00      	nop
 8011f02:	e002      	b.n	8011f0a <icmp_input+0x1e2>
          goto icmperr;
 8011f04:	bf00      	nop
 8011f06:	e000      	b.n	8011f0a <icmp_input+0x1e2>
          goto icmperr;
 8011f08:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f7f8 fc76 	bl	800a7fc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011f10:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011f12:	3728      	adds	r7, #40	; 0x28
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	20003780 	.word	0x20003780
 8011f1c:	20003794 	.word	0x20003794
 8011f20:	08016ec4 	.word	0x08016ec4
 8011f24:	08016efc 	.word	0x08016efc
 8011f28:	08016f34 	.word	0x08016f34
 8011f2c:	08016f5c 	.word	0x08016f5c

08011f30 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011f3c:	78fb      	ldrb	r3, [r7, #3]
 8011f3e:	461a      	mov	r2, r3
 8011f40:	2103      	movs	r1, #3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 f814 	bl	8011f70 <icmp_send_response>
}
 8011f48:	bf00      	nop
 8011f4a:	3708      	adds	r7, #8
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	460b      	mov	r3, r1
 8011f5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011f5c:	78fb      	ldrb	r3, [r7, #3]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	210b      	movs	r1, #11
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f000 f804 	bl	8011f70 <icmp_send_response>
}
 8011f68:	bf00      	nop
 8011f6a:	3708      	adds	r7, #8
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}

08011f70 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b08c      	sub	sp, #48	; 0x30
 8011f74:	af04      	add	r7, sp, #16
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	460b      	mov	r3, r1
 8011f7a:	70fb      	strb	r3, [r7, #3]
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011f80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f84:	2124      	movs	r1, #36	; 0x24
 8011f86:	2022      	movs	r0, #34	; 0x22
 8011f88:	f7f8 f954 	bl	800a234 <pbuf_alloc>
 8011f8c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d04c      	beq.n	801202e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	895b      	ldrh	r3, [r3, #10]
 8011f98:	2b23      	cmp	r3, #35	; 0x23
 8011f9a:	d806      	bhi.n	8011faa <icmp_send_response+0x3a>
 8011f9c:	4b26      	ldr	r3, [pc, #152]	; (8012038 <icmp_send_response+0xc8>)
 8011f9e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011fa2:	4926      	ldr	r1, [pc, #152]	; (801203c <icmp_send_response+0xcc>)
 8011fa4:	4826      	ldr	r0, [pc, #152]	; (8012040 <icmp_send_response+0xd0>)
 8011fa6:	f001 fa9d 	bl	80134e4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	78fa      	ldrb	r2, [r7, #3]
 8011fba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	78ba      	ldrb	r2, [r7, #2]
 8011fc0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	711a      	strb	r2, [r3, #4]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	719a      	strb	r2, [r3, #6]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	f103 0008 	add.w	r0, r3, #8
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	221c      	movs	r2, #28
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	f001 fa4d 	bl	8013484 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011fea:	69bb      	ldr	r3, [r7, #24]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011ff0:	f107 030c 	add.w	r3, r7, #12
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f000 f825 	bl	8012044 <ip4_route>
 8011ffa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d011      	beq.n	8012026 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	2200      	movs	r2, #0
 8012006:	709a      	strb	r2, [r3, #2]
 8012008:	2200      	movs	r2, #0
 801200a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801200c:	f107 020c 	add.w	r2, r7, #12
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	9302      	str	r3, [sp, #8]
 8012014:	2301      	movs	r3, #1
 8012016:	9301      	str	r3, [sp, #4]
 8012018:	2300      	movs	r3, #0
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	23ff      	movs	r3, #255	; 0xff
 801201e:	2100      	movs	r1, #0
 8012020:	69f8      	ldr	r0, [r7, #28]
 8012022:	f000 f9cd 	bl	80123c0 <ip4_output_if>
  }
  pbuf_free(q);
 8012026:	69f8      	ldr	r0, [r7, #28]
 8012028:	f7f8 fbe8 	bl	800a7fc <pbuf_free>
 801202c:	e000      	b.n	8012030 <icmp_send_response+0xc0>
    return;
 801202e:	bf00      	nop
}
 8012030:	3720      	adds	r7, #32
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	08016ec4 	.word	0x08016ec4
 801203c:	08016f90 	.word	0x08016f90
 8012040:	08016f34 	.word	0x08016f34

08012044 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012044:	b480      	push	{r7}
 8012046:	b085      	sub	sp, #20
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801204c:	4b33      	ldr	r3, [pc, #204]	; (801211c <ip4_route+0xd8>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	60fb      	str	r3, [r7, #12]
 8012052:	e036      	b.n	80120c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801205a:	f003 0301 	and.w	r3, r3, #1
 801205e:	b2db      	uxtb	r3, r3
 8012060:	2b00      	cmp	r3, #0
 8012062:	d02b      	beq.n	80120bc <ip4_route+0x78>
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801206a:	089b      	lsrs	r3, r3, #2
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	b2db      	uxtb	r3, r3
 8012072:	2b00      	cmp	r3, #0
 8012074:	d022      	beq.n	80120bc <ip4_route+0x78>
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	3304      	adds	r3, #4
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d01d      	beq.n	80120bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	3304      	adds	r3, #4
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	405a      	eors	r2, r3
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	3308      	adds	r3, #8
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	4013      	ands	r3, r2
 8012094:	2b00      	cmp	r3, #0
 8012096:	d101      	bne.n	801209c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	e038      	b.n	801210e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120a2:	f003 0302 	and.w	r3, r3, #2
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d108      	bne.n	80120bc <ip4_route+0x78>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	330c      	adds	r3, #12
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d101      	bne.n	80120bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	e028      	b.n	801210e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	60fb      	str	r3, [r7, #12]
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d1c5      	bne.n	8012054 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80120c8:	4b15      	ldr	r3, [pc, #84]	; (8012120 <ip4_route+0xdc>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d01a      	beq.n	8012106 <ip4_route+0xc2>
 80120d0:	4b13      	ldr	r3, [pc, #76]	; (8012120 <ip4_route+0xdc>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120d8:	f003 0301 	and.w	r3, r3, #1
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d012      	beq.n	8012106 <ip4_route+0xc2>
 80120e0:	4b0f      	ldr	r3, [pc, #60]	; (8012120 <ip4_route+0xdc>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120e8:	f003 0304 	and.w	r3, r3, #4
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00a      	beq.n	8012106 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80120f0:	4b0b      	ldr	r3, [pc, #44]	; (8012120 <ip4_route+0xdc>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	3304      	adds	r3, #4
 80120f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d004      	beq.n	8012106 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	b2db      	uxtb	r3, r3
 8012102:	2b7f      	cmp	r3, #127	; 0x7f
 8012104:	d101      	bne.n	801210a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012106:	2300      	movs	r3, #0
 8012108:	e001      	b.n	801210e <ip4_route+0xca>
  }

  return netif_default;
 801210a:	4b05      	ldr	r3, [pc, #20]	; (8012120 <ip4_route+0xdc>)
 801210c:	681b      	ldr	r3, [r3, #0]
}
 801210e:	4618      	mov	r0, r3
 8012110:	3714      	adds	r7, #20
 8012112:	46bd      	mov	sp, r7
 8012114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012118:	4770      	bx	lr
 801211a:	bf00      	nop
 801211c:	20008ea4 	.word	0x20008ea4
 8012120:	20008ea8 	.word	0x20008ea8

08012124 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012132:	f003 0301 	and.w	r3, r3, #1
 8012136:	b2db      	uxtb	r3, r3
 8012138:	2b00      	cmp	r3, #0
 801213a:	d016      	beq.n	801216a <ip4_input_accept+0x46>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	3304      	adds	r3, #4
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d011      	beq.n	801216a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012146:	4b0b      	ldr	r3, [pc, #44]	; (8012174 <ip4_input_accept+0x50>)
 8012148:	695a      	ldr	r2, [r3, #20]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	3304      	adds	r3, #4
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	429a      	cmp	r2, r3
 8012152:	d008      	beq.n	8012166 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012154:	4b07      	ldr	r3, [pc, #28]	; (8012174 <ip4_input_accept+0x50>)
 8012156:	695b      	ldr	r3, [r3, #20]
 8012158:	6879      	ldr	r1, [r7, #4]
 801215a:	4618      	mov	r0, r3
 801215c:	f000 fa08 	bl	8012570 <ip4_addr_isbroadcast_u32>
 8012160:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012162:	2b00      	cmp	r3, #0
 8012164:	d001      	beq.n	801216a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012166:	2301      	movs	r3, #1
 8012168:	e000      	b.n	801216c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801216a:	2300      	movs	r3, #0
}
 801216c:	4618      	mov	r0, r3
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	20003780 	.word	0x20003780

08012178 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b086      	sub	sp, #24
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	091b      	lsrs	r3, r3, #4
 801218e:	b2db      	uxtb	r3, r3
 8012190:	2b04      	cmp	r3, #4
 8012192:	d004      	beq.n	801219e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7f8 fb31 	bl	800a7fc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801219a:	2300      	movs	r3, #0
 801219c:	e107      	b.n	80123ae <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	f003 030f 	and.w	r3, r3, #15
 80121a6:	b2db      	uxtb	r3, r3
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	885b      	ldrh	r3, [r3, #2]
 80121b2:	b29b      	uxth	r3, r3
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7f7 f86d 	bl	8009294 <lwip_htons>
 80121ba:	4603      	mov	r3, r0
 80121bc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	891b      	ldrh	r3, [r3, #8]
 80121c2:	89ba      	ldrh	r2, [r7, #12]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d204      	bcs.n	80121d2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80121c8:	89bb      	ldrh	r3, [r7, #12]
 80121ca:	4619      	mov	r1, r3
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7f8 f98f 	bl	800a4f0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	895b      	ldrh	r3, [r3, #10]
 80121d6:	89fa      	ldrh	r2, [r7, #14]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d807      	bhi.n	80121ec <ip4_input+0x74>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	891b      	ldrh	r3, [r3, #8]
 80121e0:	89ba      	ldrh	r2, [r7, #12]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d802      	bhi.n	80121ec <ip4_input+0x74>
 80121e6:	89fb      	ldrh	r3, [r7, #14]
 80121e8:	2b13      	cmp	r3, #19
 80121ea:	d804      	bhi.n	80121f6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7f8 fb05 	bl	800a7fc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80121f2:	2300      	movs	r3, #0
 80121f4:	e0db      	b.n	80123ae <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	691b      	ldr	r3, [r3, #16]
 80121fa:	4a6f      	ldr	r2, [pc, #444]	; (80123b8 <ip4_input+0x240>)
 80121fc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	4a6d      	ldr	r2, [pc, #436]	; (80123b8 <ip4_input+0x240>)
 8012204:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012206:	4b6c      	ldr	r3, [pc, #432]	; (80123b8 <ip4_input+0x240>)
 8012208:	695b      	ldr	r3, [r3, #20]
 801220a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801220e:	2be0      	cmp	r3, #224	; 0xe0
 8012210:	d112      	bne.n	8012238 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012218:	f003 0301 	and.w	r3, r3, #1
 801221c:	b2db      	uxtb	r3, r3
 801221e:	2b00      	cmp	r3, #0
 8012220:	d007      	beq.n	8012232 <ip4_input+0xba>
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	3304      	adds	r3, #4
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d002      	beq.n	8012232 <ip4_input+0xba>
      netif = inp;
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	613b      	str	r3, [r7, #16]
 8012230:	e02a      	b.n	8012288 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012232:	2300      	movs	r3, #0
 8012234:	613b      	str	r3, [r7, #16]
 8012236:	e027      	b.n	8012288 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012238:	6838      	ldr	r0, [r7, #0]
 801223a:	f7ff ff73 	bl	8012124 <ip4_input_accept>
 801223e:	4603      	mov	r3, r0
 8012240:	2b00      	cmp	r3, #0
 8012242:	d002      	beq.n	801224a <ip4_input+0xd2>
      netif = inp;
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	613b      	str	r3, [r7, #16]
 8012248:	e01e      	b.n	8012288 <ip4_input+0x110>
    } else {
      netif = NULL;
 801224a:	2300      	movs	r3, #0
 801224c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801224e:	4b5a      	ldr	r3, [pc, #360]	; (80123b8 <ip4_input+0x240>)
 8012250:	695b      	ldr	r3, [r3, #20]
 8012252:	b2db      	uxtb	r3, r3
 8012254:	2b7f      	cmp	r3, #127	; 0x7f
 8012256:	d017      	beq.n	8012288 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012258:	4b58      	ldr	r3, [pc, #352]	; (80123bc <ip4_input+0x244>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	613b      	str	r3, [r7, #16]
 801225e:	e00e      	b.n	801227e <ip4_input+0x106>
          if (netif == inp) {
 8012260:	693a      	ldr	r2, [r7, #16]
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	429a      	cmp	r2, r3
 8012266:	d006      	beq.n	8012276 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012268:	6938      	ldr	r0, [r7, #16]
 801226a:	f7ff ff5b 	bl	8012124 <ip4_input_accept>
 801226e:	4603      	mov	r3, r0
 8012270:	2b00      	cmp	r3, #0
 8012272:	d108      	bne.n	8012286 <ip4_input+0x10e>
 8012274:	e000      	b.n	8012278 <ip4_input+0x100>
            continue;
 8012276:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	613b      	str	r3, [r7, #16]
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d1ed      	bne.n	8012260 <ip4_input+0xe8>
 8012284:	e000      	b.n	8012288 <ip4_input+0x110>
            break;
 8012286:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012288:	4b4b      	ldr	r3, [pc, #300]	; (80123b8 <ip4_input+0x240>)
 801228a:	691b      	ldr	r3, [r3, #16]
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	4618      	mov	r0, r3
 8012290:	f000 f96e 	bl	8012570 <ip4_addr_isbroadcast_u32>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d105      	bne.n	80122a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801229a:	4b47      	ldr	r3, [pc, #284]	; (80123b8 <ip4_input+0x240>)
 801229c:	691b      	ldr	r3, [r3, #16]
 801229e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80122a2:	2be0      	cmp	r3, #224	; 0xe0
 80122a4:	d104      	bne.n	80122b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f7f8 faa8 	bl	800a7fc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80122ac:	2300      	movs	r3, #0
 80122ae:	e07e      	b.n	80123ae <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80122b0:	693b      	ldr	r3, [r7, #16]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d104      	bne.n	80122c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7f8 faa0 	bl	800a7fc <pbuf_free>
    return ERR_OK;
 80122bc:	2300      	movs	r3, #0
 80122be:	e076      	b.n	80123ae <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	88db      	ldrh	r3, [r3, #6]
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	461a      	mov	r2, r3
 80122c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80122cc:	4013      	ands	r3, r2
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00b      	beq.n	80122ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 fc92 	bl	8012bfc <ip4_reass>
 80122d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d101      	bne.n	80122e4 <ip4_input+0x16c>
      return ERR_OK;
 80122e0:	2300      	movs	r3, #0
 80122e2:	e064      	b.n	80123ae <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80122ea:	4a33      	ldr	r2, [pc, #204]	; (80123b8 <ip4_input+0x240>)
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80122f0:	4a31      	ldr	r2, [pc, #196]	; (80123b8 <ip4_input+0x240>)
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80122f6:	4a30      	ldr	r2, [pc, #192]	; (80123b8 <ip4_input+0x240>)
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	f003 030f 	and.w	r3, r3, #15
 8012304:	b2db      	uxtb	r3, r3
 8012306:	009b      	lsls	r3, r3, #2
 8012308:	b2db      	uxtb	r3, r3
 801230a:	b29a      	uxth	r2, r3
 801230c:	4b2a      	ldr	r3, [pc, #168]	; (80123b8 <ip4_input+0x240>)
 801230e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012310:	89fb      	ldrh	r3, [r7, #14]
 8012312:	4619      	mov	r1, r3
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7f8 f9eb 	bl	800a6f0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	7a5b      	ldrb	r3, [r3, #9]
 801231e:	2b11      	cmp	r3, #17
 8012320:	d006      	beq.n	8012330 <ip4_input+0x1b8>
 8012322:	2b11      	cmp	r3, #17
 8012324:	dc13      	bgt.n	801234e <ip4_input+0x1d6>
 8012326:	2b01      	cmp	r3, #1
 8012328:	d00c      	beq.n	8012344 <ip4_input+0x1cc>
 801232a:	2b06      	cmp	r3, #6
 801232c:	d005      	beq.n	801233a <ip4_input+0x1c2>
 801232e:	e00e      	b.n	801234e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012330:	6839      	ldr	r1, [r7, #0]
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f7fe f8e6 	bl	8010504 <udp_input>
        break;
 8012338:	e026      	b.n	8012388 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801233a:	6839      	ldr	r1, [r7, #0]
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f7fa f927 	bl	800c590 <tcp_input>
        break;
 8012342:	e021      	b.n	8012388 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012344:	6839      	ldr	r1, [r7, #0]
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f7ff fcee 	bl	8011d28 <icmp_input>
        break;
 801234c:	e01c      	b.n	8012388 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801234e:	4b1a      	ldr	r3, [pc, #104]	; (80123b8 <ip4_input+0x240>)
 8012350:	695b      	ldr	r3, [r3, #20]
 8012352:	6939      	ldr	r1, [r7, #16]
 8012354:	4618      	mov	r0, r3
 8012356:	f000 f90b 	bl	8012570 <ip4_addr_isbroadcast_u32>
 801235a:	4603      	mov	r3, r0
 801235c:	2b00      	cmp	r3, #0
 801235e:	d10f      	bne.n	8012380 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012360:	4b15      	ldr	r3, [pc, #84]	; (80123b8 <ip4_input+0x240>)
 8012362:	695b      	ldr	r3, [r3, #20]
 8012364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012368:	2be0      	cmp	r3, #224	; 0xe0
 801236a:	d009      	beq.n	8012380 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801236c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012370:	4619      	mov	r1, r3
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7f8 fa2f 	bl	800a7d6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012378:	2102      	movs	r1, #2
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7ff fdd8 	bl	8011f30 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f7f8 fa3b 	bl	800a7fc <pbuf_free>
        break;
 8012386:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012388:	4b0b      	ldr	r3, [pc, #44]	; (80123b8 <ip4_input+0x240>)
 801238a:	2200      	movs	r2, #0
 801238c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801238e:	4b0a      	ldr	r3, [pc, #40]	; (80123b8 <ip4_input+0x240>)
 8012390:	2200      	movs	r2, #0
 8012392:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012394:	4b08      	ldr	r3, [pc, #32]	; (80123b8 <ip4_input+0x240>)
 8012396:	2200      	movs	r2, #0
 8012398:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801239a:	4b07      	ldr	r3, [pc, #28]	; (80123b8 <ip4_input+0x240>)
 801239c:	2200      	movs	r2, #0
 801239e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80123a0:	4b05      	ldr	r3, [pc, #20]	; (80123b8 <ip4_input+0x240>)
 80123a2:	2200      	movs	r2, #0
 80123a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80123a6:	4b04      	ldr	r3, [pc, #16]	; (80123b8 <ip4_input+0x240>)
 80123a8:	2200      	movs	r2, #0
 80123aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80123ac:	2300      	movs	r3, #0
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3718      	adds	r7, #24
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	20003780 	.word	0x20003780
 80123bc:	20008ea4 	.word	0x20008ea4

080123c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b08a      	sub	sp, #40	; 0x28
 80123c4:	af04      	add	r7, sp, #16
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	60b9      	str	r1, [r7, #8]
 80123ca:	607a      	str	r2, [r7, #4]
 80123cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d009      	beq.n	80123ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d003      	beq.n	80123e6 <ip4_output_if+0x26>
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d102      	bne.n	80123ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80123e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e8:	3304      	adds	r3, #4
 80123ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80123ec:	78fa      	ldrb	r2, [r7, #3]
 80123ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f0:	9302      	str	r3, [sp, #8]
 80123f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123f6:	9301      	str	r3, [sp, #4]
 80123f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	4613      	mov	r3, r2
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	6979      	ldr	r1, [r7, #20]
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f000 f805 	bl	8012414 <ip4_output_if_src>
 801240a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801240c:	4618      	mov	r0, r3
 801240e:	3718      	adds	r7, #24
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b088      	sub	sp, #32
 8012418:	af00      	add	r7, sp, #0
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	607a      	str	r2, [r7, #4]
 8012420:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	7b9b      	ldrb	r3, [r3, #14]
 8012426:	2b01      	cmp	r3, #1
 8012428:	d006      	beq.n	8012438 <ip4_output_if_src+0x24>
 801242a:	4b4b      	ldr	r3, [pc, #300]	; (8012558 <ip4_output_if_src+0x144>)
 801242c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012430:	494a      	ldr	r1, [pc, #296]	; (801255c <ip4_output_if_src+0x148>)
 8012432:	484b      	ldr	r0, [pc, #300]	; (8012560 <ip4_output_if_src+0x14c>)
 8012434:	f001 f856 	bl	80134e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d060      	beq.n	8012500 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801243e:	2314      	movs	r3, #20
 8012440:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012442:	2114      	movs	r1, #20
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f7f8 f943 	bl	800a6d0 <pbuf_add_header>
 801244a:	4603      	mov	r3, r0
 801244c:	2b00      	cmp	r3, #0
 801244e:	d002      	beq.n	8012456 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012450:	f06f 0301 	mvn.w	r3, #1
 8012454:	e07c      	b.n	8012550 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	895b      	ldrh	r3, [r3, #10]
 8012460:	2b13      	cmp	r3, #19
 8012462:	d806      	bhi.n	8012472 <ip4_output_if_src+0x5e>
 8012464:	4b3c      	ldr	r3, [pc, #240]	; (8012558 <ip4_output_if_src+0x144>)
 8012466:	f44f 7262 	mov.w	r2, #904	; 0x388
 801246a:	493e      	ldr	r1, [pc, #248]	; (8012564 <ip4_output_if_src+0x150>)
 801246c:	483c      	ldr	r0, [pc, #240]	; (8012560 <ip4_output_if_src+0x14c>)
 801246e:	f001 f839 	bl	80134e4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012472:	69fb      	ldr	r3, [r7, #28]
 8012474:	78fa      	ldrb	r2, [r7, #3]
 8012476:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801247e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012488:	8b7b      	ldrh	r3, [r7, #26]
 801248a:	089b      	lsrs	r3, r3, #2
 801248c:	b29b      	uxth	r3, r3
 801248e:	b2db      	uxtb	r3, r3
 8012490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012494:	b2da      	uxtb	r2, r3
 8012496:	69fb      	ldr	r3, [r7, #28]
 8012498:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80124a0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	891b      	ldrh	r3, [r3, #8]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7f6 fef4 	bl	8009294 <lwip_htons>
 80124ac:	4603      	mov	r3, r0
 80124ae:	461a      	mov	r2, r3
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80124b4:	69fb      	ldr	r3, [r7, #28]
 80124b6:	2200      	movs	r2, #0
 80124b8:	719a      	strb	r2, [r3, #6]
 80124ba:	2200      	movs	r2, #0
 80124bc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80124be:	4b2a      	ldr	r3, [pc, #168]	; (8012568 <ip4_output_if_src+0x154>)
 80124c0:	881b      	ldrh	r3, [r3, #0]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7f6 fee6 	bl	8009294 <lwip_htons>
 80124c8:	4603      	mov	r3, r0
 80124ca:	461a      	mov	r2, r3
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80124d0:	4b25      	ldr	r3, [pc, #148]	; (8012568 <ip4_output_if_src+0x154>)
 80124d2:	881b      	ldrh	r3, [r3, #0]
 80124d4:	3301      	adds	r3, #1
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	4b23      	ldr	r3, [pc, #140]	; (8012568 <ip4_output_if_src+0x154>)
 80124da:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d104      	bne.n	80124ec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80124e2:	4b22      	ldr	r3, [pc, #136]	; (801256c <ip4_output_if_src+0x158>)
 80124e4:	681a      	ldr	r2, [r3, #0]
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	60da      	str	r2, [r3, #12]
 80124ea:	e003      	b.n	80124f4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	2200      	movs	r2, #0
 80124f8:	729a      	strb	r2, [r3, #10]
 80124fa:	2200      	movs	r2, #0
 80124fc:	72da      	strb	r2, [r3, #11]
 80124fe:	e00f      	b.n	8012520 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	895b      	ldrh	r3, [r3, #10]
 8012504:	2b13      	cmp	r3, #19
 8012506:	d802      	bhi.n	801250e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012508:	f06f 0301 	mvn.w	r3, #1
 801250c:	e020      	b.n	8012550 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	691b      	ldr	r3, [r3, #16]
 8012518:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801251a:	f107 0314 	add.w	r3, r7, #20
 801251e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012522:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012524:	2b00      	cmp	r3, #0
 8012526:	d00c      	beq.n	8012542 <ip4_output_if_src+0x12e>
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	891a      	ldrh	r2, [r3, #8]
 801252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012530:	429a      	cmp	r2, r3
 8012532:	d906      	bls.n	8012542 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012538:	68f8      	ldr	r0, [r7, #12]
 801253a:	f000 fd53 	bl	8012fe4 <ip4_frag>
 801253e:	4603      	mov	r3, r0
 8012540:	e006      	b.n	8012550 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012544:	695b      	ldr	r3, [r3, #20]
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	68f9      	ldr	r1, [r7, #12]
 801254a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801254c:	4798      	blx	r3
 801254e:	4603      	mov	r3, r0
}
 8012550:	4618      	mov	r0, r3
 8012552:	3720      	adds	r7, #32
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	08016fbc 	.word	0x08016fbc
 801255c:	08016ff0 	.word	0x08016ff0
 8012560:	08016ffc 	.word	0x08016ffc
 8012564:	08017024 	.word	0x08017024
 8012568:	20009002 	.word	0x20009002
 801256c:	08017400 	.word	0x08017400

08012570 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012570:	b480      	push	{r7}
 8012572:	b085      	sub	sp, #20
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012584:	d002      	beq.n	801258c <ip4_addr_isbroadcast_u32+0x1c>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d101      	bne.n	8012590 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801258c:	2301      	movs	r3, #1
 801258e:	e02a      	b.n	80125e6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012596:	f003 0302 	and.w	r3, r3, #2
 801259a:	2b00      	cmp	r3, #0
 801259c:	d101      	bne.n	80125a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801259e:	2300      	movs	r3, #0
 80125a0:	e021      	b.n	80125e6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	3304      	adds	r3, #4
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d101      	bne.n	80125b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80125ae:	2300      	movs	r3, #0
 80125b0:	e019      	b.n	80125e6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80125b2:	68fa      	ldr	r2, [r7, #12]
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	3304      	adds	r3, #4
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	405a      	eors	r2, r3
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	3308      	adds	r3, #8
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4013      	ands	r3, r2
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d10d      	bne.n	80125e4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	3308      	adds	r3, #8
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	43da      	mvns	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	3308      	adds	r3, #8
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80125dc:	429a      	cmp	r2, r3
 80125de:	d101      	bne.n	80125e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80125e0:	2301      	movs	r3, #1
 80125e2:	e000      	b.n	80125e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80125e4:	2300      	movs	r3, #0
  }
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3714      	adds	r7, #20
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr
	...

080125f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b084      	sub	sp, #16
 80125f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80125fa:	2300      	movs	r3, #0
 80125fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80125fe:	4b12      	ldr	r3, [pc, #72]	; (8012648 <ip_reass_tmr+0x54>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012604:	e018      	b.n	8012638 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	7fdb      	ldrb	r3, [r3, #31]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00b      	beq.n	8012626 <ip_reass_tmr+0x32>
      r->timer--;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	7fdb      	ldrb	r3, [r3, #31]
 8012612:	3b01      	subs	r3, #1
 8012614:	b2da      	uxtb	r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	60fb      	str	r3, [r7, #12]
 8012624:	e008      	b.n	8012638 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012630:	68b9      	ldr	r1, [r7, #8]
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f000 f80a 	bl	801264c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d1e3      	bne.n	8012606 <ip_reass_tmr+0x12>
    }
  }
}
 801263e:	bf00      	nop
 8012640:	bf00      	nop
 8012642:	3710      	adds	r7, #16
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}
 8012648:	20009004 	.word	0x20009004

0801264c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b088      	sub	sp, #32
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012656:	2300      	movs	r3, #0
 8012658:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801265a:	683a      	ldr	r2, [r7, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	429a      	cmp	r2, r3
 8012660:	d105      	bne.n	801266e <ip_reass_free_complete_datagram+0x22>
 8012662:	4b45      	ldr	r3, [pc, #276]	; (8012778 <ip_reass_free_complete_datagram+0x12c>)
 8012664:	22ab      	movs	r2, #171	; 0xab
 8012666:	4945      	ldr	r1, [pc, #276]	; (801277c <ip_reass_free_complete_datagram+0x130>)
 8012668:	4845      	ldr	r0, [pc, #276]	; (8012780 <ip_reass_free_complete_datagram+0x134>)
 801266a:	f000 ff3b 	bl	80134e4 <iprintf>
  if (prev != NULL) {
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d00a      	beq.n	801268a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	429a      	cmp	r2, r3
 801267c:	d005      	beq.n	801268a <ip_reass_free_complete_datagram+0x3e>
 801267e:	4b3e      	ldr	r3, [pc, #248]	; (8012778 <ip_reass_free_complete_datagram+0x12c>)
 8012680:	22ad      	movs	r2, #173	; 0xad
 8012682:	4940      	ldr	r1, [pc, #256]	; (8012784 <ip_reass_free_complete_datagram+0x138>)
 8012684:	483e      	ldr	r0, [pc, #248]	; (8012780 <ip_reass_free_complete_datagram+0x134>)
 8012686:	f000 ff2d 	bl	80134e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	889b      	ldrh	r3, [r3, #4]
 8012696:	b29b      	uxth	r3, r3
 8012698:	2b00      	cmp	r3, #0
 801269a:	d12a      	bne.n	80126f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	681a      	ldr	r2, [r3, #0]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80126aa:	69bb      	ldr	r3, [r7, #24]
 80126ac:	6858      	ldr	r0, [r3, #4]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	3308      	adds	r3, #8
 80126b2:	2214      	movs	r2, #20
 80126b4:	4619      	mov	r1, r3
 80126b6:	f000 fee5 	bl	8013484 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80126ba:	2101      	movs	r1, #1
 80126bc:	69b8      	ldr	r0, [r7, #24]
 80126be:	f7ff fc47 	bl	8011f50 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80126c2:	69b8      	ldr	r0, [r7, #24]
 80126c4:	f7f8 f922 	bl	800a90c <pbuf_clen>
 80126c8:	4603      	mov	r3, r0
 80126ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80126cc:	8bfa      	ldrh	r2, [r7, #30]
 80126ce:	8a7b      	ldrh	r3, [r7, #18]
 80126d0:	4413      	add	r3, r2
 80126d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126d6:	db05      	blt.n	80126e4 <ip_reass_free_complete_datagram+0x98>
 80126d8:	4b27      	ldr	r3, [pc, #156]	; (8012778 <ip_reass_free_complete_datagram+0x12c>)
 80126da:	22bc      	movs	r2, #188	; 0xbc
 80126dc:	492a      	ldr	r1, [pc, #168]	; (8012788 <ip_reass_free_complete_datagram+0x13c>)
 80126de:	4828      	ldr	r0, [pc, #160]	; (8012780 <ip_reass_free_complete_datagram+0x134>)
 80126e0:	f000 ff00 	bl	80134e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80126e4:	8bfa      	ldrh	r2, [r7, #30]
 80126e6:	8a7b      	ldrh	r3, [r7, #18]
 80126e8:	4413      	add	r3, r2
 80126ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80126ec:	69b8      	ldr	r0, [r7, #24]
 80126ee:	f7f8 f885 	bl	800a7fc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80126f8:	e01f      	b.n	801273a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801270a:	68f8      	ldr	r0, [r7, #12]
 801270c:	f7f8 f8fe 	bl	800a90c <pbuf_clen>
 8012710:	4603      	mov	r3, r0
 8012712:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012714:	8bfa      	ldrh	r2, [r7, #30]
 8012716:	8a7b      	ldrh	r3, [r7, #18]
 8012718:	4413      	add	r3, r2
 801271a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801271e:	db05      	blt.n	801272c <ip_reass_free_complete_datagram+0xe0>
 8012720:	4b15      	ldr	r3, [pc, #84]	; (8012778 <ip_reass_free_complete_datagram+0x12c>)
 8012722:	22cc      	movs	r2, #204	; 0xcc
 8012724:	4918      	ldr	r1, [pc, #96]	; (8012788 <ip_reass_free_complete_datagram+0x13c>)
 8012726:	4816      	ldr	r0, [pc, #88]	; (8012780 <ip_reass_free_complete_datagram+0x134>)
 8012728:	f000 fedc 	bl	80134e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801272c:	8bfa      	ldrh	r2, [r7, #30]
 801272e:	8a7b      	ldrh	r3, [r7, #18]
 8012730:	4413      	add	r3, r2
 8012732:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f7f8 f861 	bl	800a7fc <pbuf_free>
  while (p != NULL) {
 801273a:	69bb      	ldr	r3, [r7, #24]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1dc      	bne.n	80126fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012740:	6839      	ldr	r1, [r7, #0]
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 f8c2 	bl	80128cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012748:	4b10      	ldr	r3, [pc, #64]	; (801278c <ip_reass_free_complete_datagram+0x140>)
 801274a:	881b      	ldrh	r3, [r3, #0]
 801274c:	8bfa      	ldrh	r2, [r7, #30]
 801274e:	429a      	cmp	r2, r3
 8012750:	d905      	bls.n	801275e <ip_reass_free_complete_datagram+0x112>
 8012752:	4b09      	ldr	r3, [pc, #36]	; (8012778 <ip_reass_free_complete_datagram+0x12c>)
 8012754:	22d2      	movs	r2, #210	; 0xd2
 8012756:	490e      	ldr	r1, [pc, #56]	; (8012790 <ip_reass_free_complete_datagram+0x144>)
 8012758:	4809      	ldr	r0, [pc, #36]	; (8012780 <ip_reass_free_complete_datagram+0x134>)
 801275a:	f000 fec3 	bl	80134e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801275e:	4b0b      	ldr	r3, [pc, #44]	; (801278c <ip_reass_free_complete_datagram+0x140>)
 8012760:	881a      	ldrh	r2, [r3, #0]
 8012762:	8bfb      	ldrh	r3, [r7, #30]
 8012764:	1ad3      	subs	r3, r2, r3
 8012766:	b29a      	uxth	r2, r3
 8012768:	4b08      	ldr	r3, [pc, #32]	; (801278c <ip_reass_free_complete_datagram+0x140>)
 801276a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801276c:	8bfb      	ldrh	r3, [r7, #30]
}
 801276e:	4618      	mov	r0, r3
 8012770:	3720      	adds	r7, #32
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	08017054 	.word	0x08017054
 801277c:	08017090 	.word	0x08017090
 8012780:	0801709c 	.word	0x0801709c
 8012784:	080170c4 	.word	0x080170c4
 8012788:	080170d8 	.word	0x080170d8
 801278c:	20009008 	.word	0x20009008
 8012790:	080170f8 	.word	0x080170f8

08012794 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b08a      	sub	sp, #40	; 0x28
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801279e:	2300      	movs	r3, #0
 80127a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80127a2:	2300      	movs	r3, #0
 80127a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80127a6:	2300      	movs	r3, #0
 80127a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80127aa:	2300      	movs	r3, #0
 80127ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80127ae:	2300      	movs	r3, #0
 80127b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80127b2:	4b28      	ldr	r3, [pc, #160]	; (8012854 <ip_reass_remove_oldest_datagram+0xc0>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80127b8:	e030      	b.n	801281c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	695a      	ldr	r2, [r3, #20]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	68db      	ldr	r3, [r3, #12]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d10c      	bne.n	80127e0 <ip_reass_remove_oldest_datagram+0x4c>
 80127c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c8:	699a      	ldr	r2, [r3, #24]
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	691b      	ldr	r3, [r3, #16]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d106      	bne.n	80127e0 <ip_reass_remove_oldest_datagram+0x4c>
 80127d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d4:	899a      	ldrh	r2, [r3, #12]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	889b      	ldrh	r3, [r3, #4]
 80127da:	b29b      	uxth	r3, r3
 80127dc:	429a      	cmp	r2, r3
 80127de:	d014      	beq.n	801280a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	3301      	adds	r3, #1
 80127e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80127e6:	6a3b      	ldr	r3, [r7, #32]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d104      	bne.n	80127f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80127ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	61bb      	str	r3, [r7, #24]
 80127f4:	e009      	b.n	801280a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80127f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f8:	7fda      	ldrb	r2, [r3, #31]
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	7fdb      	ldrb	r3, [r3, #31]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d803      	bhi.n	801280a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012804:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d001      	beq.n	8012816 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012814:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281e:	2b00      	cmp	r3, #0
 8012820:	d1cb      	bne.n	80127ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012822:	6a3b      	ldr	r3, [r7, #32]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d008      	beq.n	801283a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012828:	69b9      	ldr	r1, [r7, #24]
 801282a:	6a38      	ldr	r0, [r7, #32]
 801282c:	f7ff ff0e 	bl	801264c <ip_reass_free_complete_datagram>
 8012830:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012832:	697a      	ldr	r2, [r7, #20]
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	4413      	add	r3, r2
 8012838:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801283a:	697a      	ldr	r2, [r7, #20]
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	429a      	cmp	r2, r3
 8012840:	da02      	bge.n	8012848 <ip_reass_remove_oldest_datagram+0xb4>
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	2b01      	cmp	r3, #1
 8012846:	dcac      	bgt.n	80127a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012848:	697b      	ldr	r3, [r7, #20]
}
 801284a:	4618      	mov	r0, r3
 801284c:	3728      	adds	r7, #40	; 0x28
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	bf00      	nop
 8012854:	20009004 	.word	0x20009004

08012858 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012862:	2004      	movs	r0, #4
 8012864:	f7f7 f96c 	bl	8009b40 <memp_malloc>
 8012868:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d110      	bne.n	8012892 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012870:	6839      	ldr	r1, [r7, #0]
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff ff8e 	bl	8012794 <ip_reass_remove_oldest_datagram>
 8012878:	4602      	mov	r2, r0
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	4293      	cmp	r3, r2
 801287e:	dc03      	bgt.n	8012888 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012880:	2004      	movs	r0, #4
 8012882:	f7f7 f95d 	bl	8009b40 <memp_malloc>
 8012886:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d101      	bne.n	8012892 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801288e:	2300      	movs	r3, #0
 8012890:	e016      	b.n	80128c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012892:	2220      	movs	r2, #32
 8012894:	2100      	movs	r1, #0
 8012896:	68f8      	ldr	r0, [r7, #12]
 8012898:	f000 fe1c 	bl	80134d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	220f      	movs	r2, #15
 80128a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80128a2:	4b09      	ldr	r3, [pc, #36]	; (80128c8 <ip_reass_enqueue_new_datagram+0x70>)
 80128a4:	681a      	ldr	r2, [r3, #0]
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80128aa:	4a07      	ldr	r2, [pc, #28]	; (80128c8 <ip_reass_enqueue_new_datagram+0x70>)
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	3308      	adds	r3, #8
 80128b4:	2214      	movs	r2, #20
 80128b6:	6879      	ldr	r1, [r7, #4]
 80128b8:	4618      	mov	r0, r3
 80128ba:	f000 fde3 	bl	8013484 <memcpy>
  return ipr;
 80128be:	68fb      	ldr	r3, [r7, #12]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3710      	adds	r7, #16
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	20009004 	.word	0x20009004

080128cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80128d6:	4b10      	ldr	r3, [pc, #64]	; (8012918 <ip_reass_dequeue_datagram+0x4c>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d104      	bne.n	80128ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	4a0c      	ldr	r2, [pc, #48]	; (8012918 <ip_reass_dequeue_datagram+0x4c>)
 80128e6:	6013      	str	r3, [r2, #0]
 80128e8:	e00d      	b.n	8012906 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d106      	bne.n	80128fe <ip_reass_dequeue_datagram+0x32>
 80128f0:	4b0a      	ldr	r3, [pc, #40]	; (801291c <ip_reass_dequeue_datagram+0x50>)
 80128f2:	f240 1245 	movw	r2, #325	; 0x145
 80128f6:	490a      	ldr	r1, [pc, #40]	; (8012920 <ip_reass_dequeue_datagram+0x54>)
 80128f8:	480a      	ldr	r0, [pc, #40]	; (8012924 <ip_reass_dequeue_datagram+0x58>)
 80128fa:	f000 fdf3 	bl	80134e4 <iprintf>
    prev->next = ipr->next;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012906:	6879      	ldr	r1, [r7, #4]
 8012908:	2004      	movs	r0, #4
 801290a:	f7f7 f965 	bl	8009bd8 <memp_free>
}
 801290e:	bf00      	nop
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	20009004 	.word	0x20009004
 801291c:	08017054 	.word	0x08017054
 8012920:	0801711c 	.word	0x0801711c
 8012924:	0801709c 	.word	0x0801709c

08012928 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b08c      	sub	sp, #48	; 0x30
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012934:	2300      	movs	r3, #0
 8012936:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012938:	2301      	movs	r3, #1
 801293a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012942:	69fb      	ldr	r3, [r7, #28]
 8012944:	885b      	ldrh	r3, [r3, #2]
 8012946:	b29b      	uxth	r3, r3
 8012948:	4618      	mov	r0, r3
 801294a:	f7f6 fca3 	bl	8009294 <lwip_htons>
 801294e:	4603      	mov	r3, r0
 8012950:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	f003 030f 	and.w	r3, r3, #15
 801295a:	b2db      	uxtb	r3, r3
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012960:	7e7b      	ldrb	r3, [r7, #25]
 8012962:	b29b      	uxth	r3, r3
 8012964:	8b7a      	ldrh	r2, [r7, #26]
 8012966:	429a      	cmp	r2, r3
 8012968:	d202      	bcs.n	8012970 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801296a:	f04f 33ff 	mov.w	r3, #4294967295
 801296e:	e135      	b.n	8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012970:	7e7b      	ldrb	r3, [r7, #25]
 8012972:	b29b      	uxth	r3, r3
 8012974:	8b7a      	ldrh	r2, [r7, #26]
 8012976:	1ad3      	subs	r3, r2, r3
 8012978:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	88db      	ldrh	r3, [r3, #6]
 801297e:	b29b      	uxth	r3, r3
 8012980:	4618      	mov	r0, r3
 8012982:	f7f6 fc87 	bl	8009294 <lwip_htons>
 8012986:	4603      	mov	r3, r0
 8012988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801298c:	b29b      	uxth	r3, r3
 801298e:	00db      	lsls	r3, r3, #3
 8012990:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	685b      	ldr	r3, [r3, #4]
 8012996:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299a:	2200      	movs	r2, #0
 801299c:	701a      	strb	r2, [r3, #0]
 801299e:	2200      	movs	r2, #0
 80129a0:	705a      	strb	r2, [r3, #1]
 80129a2:	2200      	movs	r2, #0
 80129a4:	709a      	strb	r2, [r3, #2]
 80129a6:	2200      	movs	r2, #0
 80129a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80129aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ac:	8afa      	ldrh	r2, [r7, #22]
 80129ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80129b0:	8afa      	ldrh	r2, [r7, #22]
 80129b2:	8b7b      	ldrh	r3, [r7, #26]
 80129b4:	4413      	add	r3, r2
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80129bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129be:	88db      	ldrh	r3, [r3, #6]
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	8afa      	ldrh	r2, [r7, #22]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d902      	bls.n	80129ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80129c8:	f04f 33ff 	mov.w	r3, #4294967295
 80129cc:	e106      	b.n	8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	627b      	str	r3, [r7, #36]	; 0x24
 80129d4:	e068      	b.n	8012aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80129d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80129dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129de:	889b      	ldrh	r3, [r3, #4]
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	889b      	ldrh	r3, [r3, #4]
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d235      	bcs.n	8012a58 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80129ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80129f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d020      	beq.n	8012a3a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80129f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fa:	889b      	ldrh	r3, [r3, #4]
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a00:	88db      	ldrh	r3, [r3, #6]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d307      	bcc.n	8012a18 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0a:	88db      	ldrh	r3, [r3, #6]
 8012a0c:	b29a      	uxth	r2, r3
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	889b      	ldrh	r3, [r3, #4]
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d902      	bls.n	8012a1e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a18:	f04f 33ff 	mov.w	r3, #4294967295
 8012a1c:	e0de      	b.n	8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a20:	68ba      	ldr	r2, [r7, #8]
 8012a22:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a26:	88db      	ldrh	r3, [r3, #6]
 8012a28:	b29a      	uxth	r2, r3
 8012a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2c:	889b      	ldrh	r3, [r3, #4]
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d03d      	beq.n	8012ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a34:	2300      	movs	r3, #0
 8012a36:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012a38:	e03a      	b.n	8012ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3c:	88db      	ldrh	r3, [r3, #6]
 8012a3e:	b29a      	uxth	r2, r3
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	889b      	ldrh	r3, [r3, #4]
 8012a44:	b29b      	uxth	r3, r3
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d902      	bls.n	8012a50 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a4e:	e0c5      	b.n	8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	68ba      	ldr	r2, [r7, #8]
 8012a54:	605a      	str	r2, [r3, #4]
      break;
 8012a56:	e02b      	b.n	8012ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5a:	889b      	ldrh	r3, [r3, #4]
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	889b      	ldrh	r3, [r3, #4]
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d102      	bne.n	8012a6e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a68:	f04f 33ff 	mov.w	r3, #4294967295
 8012a6c:	e0b6      	b.n	8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a70:	889b      	ldrh	r3, [r3, #4]
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	88db      	ldrh	r3, [r3, #6]
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d202      	bcs.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a82:	e0ab      	b.n	8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d009      	beq.n	8012a9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8c:	88db      	ldrh	r3, [r3, #6]
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	889b      	ldrh	r3, [r3, #4]
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d001      	beq.n	8012a9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d193      	bne.n	80129d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012aae:	e000      	b.n	8012ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012ab0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d12d      	bne.n	8012b14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d01c      	beq.n	8012af8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac0:	88db      	ldrh	r3, [r3, #6]
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac6:	889b      	ldrh	r3, [r3, #4]
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d906      	bls.n	8012adc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012ace:	4b45      	ldr	r3, [pc, #276]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ad0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012ad4:	4944      	ldr	r1, [pc, #272]	; (8012be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012ad6:	4845      	ldr	r0, [pc, #276]	; (8012bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ad8:	f000 fd04 	bl	80134e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ade:	68ba      	ldr	r2, [r7, #8]
 8012ae0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae4:	88db      	ldrh	r3, [r3, #6]
 8012ae6:	b29a      	uxth	r2, r3
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	889b      	ldrh	r3, [r3, #4]
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d010      	beq.n	8012b14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012af2:	2300      	movs	r3, #0
 8012af4:	623b      	str	r3, [r7, #32]
 8012af6:	e00d      	b.n	8012b14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d006      	beq.n	8012b0e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012b00:	4b38      	ldr	r3, [pc, #224]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b02:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012b06:	493a      	ldr	r1, [pc, #232]	; (8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012b08:	4838      	ldr	r0, [pc, #224]	; (8012bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b0a:	f000 fceb 	bl	80134e4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	68ba      	ldr	r2, [r7, #8]
 8012b12:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d105      	bne.n	8012b26 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	7f9b      	ldrb	r3, [r3, #30]
 8012b1e:	f003 0301 	and.w	r3, r3, #1
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d059      	beq.n	8012bda <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012b26:	6a3b      	ldr	r3, [r7, #32]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d04f      	beq.n	8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d006      	beq.n	8012b42 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	889b      	ldrh	r3, [r3, #4]
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d002      	beq.n	8012b48 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	623b      	str	r3, [r7, #32]
 8012b46:	e041      	b.n	8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b52:	e012      	b.n	8012b7a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5c:	88db      	ldrh	r3, [r3, #6]
 8012b5e:	b29a      	uxth	r2, r3
 8012b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b62:	889b      	ldrh	r3, [r3, #4]
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d002      	beq.n	8012b70 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	623b      	str	r3, [r7, #32]
            break;
 8012b6e:	e007      	b.n	8012b80 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b72:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1e9      	bne.n	8012b54 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012b80:	6a3b      	ldr	r3, [r7, #32]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d022      	beq.n	8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d106      	bne.n	8012b9c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012b8e:	4b15      	ldr	r3, [pc, #84]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b90:	f240 12df 	movw	r2, #479	; 0x1df
 8012b94:	4917      	ldr	r1, [pc, #92]	; (8012bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012b96:	4815      	ldr	r0, [pc, #84]	; (8012bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b98:	f000 fca4 	bl	80134e4 <iprintf>
          LWIP_ASSERT("sanity check",
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d106      	bne.n	8012bb6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012ba8:	4b0e      	ldr	r3, [pc, #56]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012baa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012bae:	4911      	ldr	r1, [pc, #68]	; (8012bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012bb0:	480e      	ldr	r0, [pc, #56]	; (8012bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bb2:	f000 fc97 	bl	80134e4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d006      	beq.n	8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012bbe:	4b09      	ldr	r3, [pc, #36]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012bc0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012bc4:	490c      	ldr	r1, [pc, #48]	; (8012bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012bc6:	4809      	ldr	r0, [pc, #36]	; (8012bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bc8:	f000 fc8c 	bl	80134e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012bcc:	6a3b      	ldr	r3, [r7, #32]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	bf14      	ite	ne
 8012bd2:	2301      	movne	r3, #1
 8012bd4:	2300      	moveq	r3, #0
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	e000      	b.n	8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012bda:	2300      	movs	r3, #0
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3730      	adds	r7, #48	; 0x30
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	08017054 	.word	0x08017054
 8012be8:	08017138 	.word	0x08017138
 8012bec:	0801709c 	.word	0x0801709c
 8012bf0:	08017158 	.word	0x08017158
 8012bf4:	08017190 	.word	0x08017190
 8012bf8:	080171a0 	.word	0x080171a0

08012bfc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b08e      	sub	sp, #56	; 0x38
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	f003 030f 	and.w	r3, r3, #15
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	2b14      	cmp	r3, #20
 8012c1a:	f040 8171 	bne.w	8012f00 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c20:	88db      	ldrh	r3, [r3, #6]
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7f6 fb35 	bl	8009294 <lwip_htons>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	00db      	lsls	r3, r3, #3
 8012c34:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c38:	885b      	ldrh	r3, [r3, #2]
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7f6 fb29 	bl	8009294 <lwip_htons>
 8012c42:	4603      	mov	r3, r0
 8012c44:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	f003 030f 	and.w	r3, r3, #15
 8012c4e:	b2db      	uxtb	r3, r3
 8012c50:	009b      	lsls	r3, r3, #2
 8012c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	f0c0 8150 	bcc.w	8012f04 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c6c:	1ad3      	subs	r3, r2, r3
 8012c6e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7f7 fe4b 	bl	800a90c <pbuf_clen>
 8012c76:	4603      	mov	r3, r0
 8012c78:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012c7a:	4b8c      	ldr	r3, [pc, #560]	; (8012eac <ip4_reass+0x2b0>)
 8012c7c:	881b      	ldrh	r3, [r3, #0]
 8012c7e:	461a      	mov	r2, r3
 8012c80:	8c3b      	ldrh	r3, [r7, #32]
 8012c82:	4413      	add	r3, r2
 8012c84:	2b0a      	cmp	r3, #10
 8012c86:	dd10      	ble.n	8012caa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c88:	8c3b      	ldrh	r3, [r7, #32]
 8012c8a:	4619      	mov	r1, r3
 8012c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c8e:	f7ff fd81 	bl	8012794 <ip_reass_remove_oldest_datagram>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	f000 8137 	beq.w	8012f08 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012c9a:	4b84      	ldr	r3, [pc, #528]	; (8012eac <ip4_reass+0x2b0>)
 8012c9c:	881b      	ldrh	r3, [r3, #0]
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	8c3b      	ldrh	r3, [r7, #32]
 8012ca2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012ca4:	2b0a      	cmp	r3, #10
 8012ca6:	f300 812f 	bgt.w	8012f08 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012caa:	4b81      	ldr	r3, [pc, #516]	; (8012eb0 <ip4_reass+0x2b4>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	633b      	str	r3, [r7, #48]	; 0x30
 8012cb0:	e015      	b.n	8012cde <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb4:	695a      	ldr	r2, [r3, #20]
 8012cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb8:	68db      	ldr	r3, [r3, #12]
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d10c      	bne.n	8012cd8 <ip4_reass+0xdc>
 8012cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc0:	699a      	ldr	r2, [r3, #24]
 8012cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc4:	691b      	ldr	r3, [r3, #16]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d106      	bne.n	8012cd8 <ip4_reass+0xdc>
 8012cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ccc:	899a      	ldrh	r2, [r3, #12]
 8012cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd0:	889b      	ldrh	r3, [r3, #4]
 8012cd2:	b29b      	uxth	r3, r3
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d006      	beq.n	8012ce6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8012cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d1e6      	bne.n	8012cb2 <ip4_reass+0xb6>
 8012ce4:	e000      	b.n	8012ce8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012ce6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d109      	bne.n	8012d02 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012cee:	8c3b      	ldrh	r3, [r7, #32]
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cf4:	f7ff fdb0 	bl	8012858 <ip_reass_enqueue_new_datagram>
 8012cf8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d11c      	bne.n	8012d3a <ip4_reass+0x13e>
      goto nullreturn;
 8012d00:	e105      	b.n	8012f0e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d04:	88db      	ldrh	r3, [r3, #6]
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7f6 fac3 	bl	8009294 <lwip_htons>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d110      	bne.n	8012d3a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d1a:	89db      	ldrh	r3, [r3, #14]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f6 fab9 	bl	8009294 <lwip_htons>
 8012d22:	4603      	mov	r3, r0
 8012d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d006      	beq.n	8012d3a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d2e:	3308      	adds	r3, #8
 8012d30:	2214      	movs	r2, #20
 8012d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d34:	4618      	mov	r0, r3
 8012d36:	f000 fba5 	bl	8013484 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3c:	88db      	ldrh	r3, [r3, #6]
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	f003 0320 	and.w	r3, r3, #32
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	bf0c      	ite	eq
 8012d48:	2301      	moveq	r3, #1
 8012d4a:	2300      	movne	r3, #0
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00e      	beq.n	8012d74 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d5a:	4413      	add	r3, r2
 8012d5c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012d5e:	8b7a      	ldrh	r2, [r7, #26]
 8012d60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d62:	429a      	cmp	r2, r3
 8012d64:	f0c0 80a0 	bcc.w	8012ea8 <ip4_reass+0x2ac>
 8012d68:	8b7b      	ldrh	r3, [r7, #26]
 8012d6a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	f200 809a 	bhi.w	8012ea8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012d74:	69fa      	ldr	r2, [r7, #28]
 8012d76:	6879      	ldr	r1, [r7, #4]
 8012d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d7a:	f7ff fdd5 	bl	8012928 <ip_reass_chain_frag_into_datagram_and_validate>
 8012d7e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d86:	f000 809b 	beq.w	8012ec0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012d8a:	4b48      	ldr	r3, [pc, #288]	; (8012eac <ip4_reass+0x2b0>)
 8012d8c:	881a      	ldrh	r2, [r3, #0]
 8012d8e:	8c3b      	ldrh	r3, [r7, #32]
 8012d90:	4413      	add	r3, r2
 8012d92:	b29a      	uxth	r2, r3
 8012d94:	4b45      	ldr	r3, [pc, #276]	; (8012eac <ip4_reass+0x2b0>)
 8012d96:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d00d      	beq.n	8012dba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012da2:	4413      	add	r3, r2
 8012da4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da8:	8a7a      	ldrh	r2, [r7, #18]
 8012daa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dae:	7f9b      	ldrb	r3, [r3, #30]
 8012db0:	f043 0301 	orr.w	r3, r3, #1
 8012db4:	b2da      	uxtb	r2, r3
 8012db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d171      	bne.n	8012ea4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc2:	8b9b      	ldrh	r3, [r3, #28]
 8012dc4:	3314      	adds	r3, #20
 8012dc6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd4:	685b      	ldr	r3, [r3, #4]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ddc:	3308      	adds	r3, #8
 8012dde:	2214      	movs	r2, #20
 8012de0:	4619      	mov	r1, r3
 8012de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012de4:	f000 fb4e 	bl	8013484 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012de8:	8a3b      	ldrh	r3, [r7, #16]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7f6 fa52 	bl	8009294 <lwip_htons>
 8012df0:	4603      	mov	r3, r0
 8012df2:	461a      	mov	r2, r3
 8012df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	719a      	strb	r2, [r3, #6]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e04:	2200      	movs	r2, #0
 8012e06:	729a      	strb	r2, [r3, #10]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012e12:	e00d      	b.n	8012e30 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012e1a:	2114      	movs	r1, #20
 8012e1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e1e:	f7f7 fc67 	bl	800a6f0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012e22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f7f7 fdab 	bl	800a980 <pbuf_cat>
      r = iprh->next_pbuf;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d1ee      	bne.n	8012e14 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012e36:	4b1e      	ldr	r3, [pc, #120]	; (8012eb0 <ip4_reass+0x2b4>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d102      	bne.n	8012e46 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012e40:	2300      	movs	r3, #0
 8012e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e44:	e010      	b.n	8012e68 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e46:	4b1a      	ldr	r3, [pc, #104]	; (8012eb0 <ip4_reass+0x2b4>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e4c:	e007      	b.n	8012e5e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d006      	beq.n	8012e66 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d1f4      	bne.n	8012e4e <ip4_reass+0x252>
 8012e64:	e000      	b.n	8012e68 <ip4_reass+0x26c>
          break;
 8012e66:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e6c:	f7ff fd2e 	bl	80128cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7f7 fd4b 	bl	800a90c <pbuf_clen>
 8012e76:	4603      	mov	r3, r0
 8012e78:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012e7a:	4b0c      	ldr	r3, [pc, #48]	; (8012eac <ip4_reass+0x2b0>)
 8012e7c:	881b      	ldrh	r3, [r3, #0]
 8012e7e:	8c3a      	ldrh	r2, [r7, #32]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d906      	bls.n	8012e92 <ip4_reass+0x296>
 8012e84:	4b0b      	ldr	r3, [pc, #44]	; (8012eb4 <ip4_reass+0x2b8>)
 8012e86:	f240 229b 	movw	r2, #667	; 0x29b
 8012e8a:	490b      	ldr	r1, [pc, #44]	; (8012eb8 <ip4_reass+0x2bc>)
 8012e8c:	480b      	ldr	r0, [pc, #44]	; (8012ebc <ip4_reass+0x2c0>)
 8012e8e:	f000 fb29 	bl	80134e4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012e92:	4b06      	ldr	r3, [pc, #24]	; (8012eac <ip4_reass+0x2b0>)
 8012e94:	881a      	ldrh	r2, [r3, #0]
 8012e96:	8c3b      	ldrh	r3, [r7, #32]
 8012e98:	1ad3      	subs	r3, r2, r3
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	4b03      	ldr	r3, [pc, #12]	; (8012eac <ip4_reass+0x2b0>)
 8012e9e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	e038      	b.n	8012f16 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	e036      	b.n	8012f16 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012ea8:	bf00      	nop
 8012eaa:	e00a      	b.n	8012ec2 <ip4_reass+0x2c6>
 8012eac:	20009008 	.word	0x20009008
 8012eb0:	20009004 	.word	0x20009004
 8012eb4:	08017054 	.word	0x08017054
 8012eb8:	080171c4 	.word	0x080171c4
 8012ebc:	0801709c 	.word	0x0801709c
    goto nullreturn_ipr;
 8012ec0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <ip4_reass+0x2da>
 8012ec8:	4b15      	ldr	r3, [pc, #84]	; (8012f20 <ip4_reass+0x324>)
 8012eca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012ece:	4915      	ldr	r1, [pc, #84]	; (8012f24 <ip4_reass+0x328>)
 8012ed0:	4815      	ldr	r0, [pc, #84]	; (8012f28 <ip4_reass+0x32c>)
 8012ed2:	f000 fb07 	bl	80134e4 <iprintf>
  if (ipr->p == NULL) {
 8012ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d116      	bne.n	8012f0c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012ede:	4b13      	ldr	r3, [pc, #76]	; (8012f2c <ip4_reass+0x330>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d006      	beq.n	8012ef6 <ip4_reass+0x2fa>
 8012ee8:	4b0d      	ldr	r3, [pc, #52]	; (8012f20 <ip4_reass+0x324>)
 8012eea:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012eee:	4910      	ldr	r1, [pc, #64]	; (8012f30 <ip4_reass+0x334>)
 8012ef0:	480d      	ldr	r0, [pc, #52]	; (8012f28 <ip4_reass+0x32c>)
 8012ef2:	f000 faf7 	bl	80134e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012ef6:	2100      	movs	r1, #0
 8012ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012efa:	f7ff fce7 	bl	80128cc <ip_reass_dequeue_datagram>
 8012efe:	e006      	b.n	8012f0e <ip4_reass+0x312>
    goto nullreturn;
 8012f00:	bf00      	nop
 8012f02:	e004      	b.n	8012f0e <ip4_reass+0x312>
    goto nullreturn;
 8012f04:	bf00      	nop
 8012f06:	e002      	b.n	8012f0e <ip4_reass+0x312>
      goto nullreturn;
 8012f08:	bf00      	nop
 8012f0a:	e000      	b.n	8012f0e <ip4_reass+0x312>
  }

nullreturn:
 8012f0c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7f7 fc74 	bl	800a7fc <pbuf_free>
  return NULL;
 8012f14:	2300      	movs	r3, #0
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3738      	adds	r7, #56	; 0x38
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	08017054 	.word	0x08017054
 8012f24:	080171e0 	.word	0x080171e0
 8012f28:	0801709c 	.word	0x0801709c
 8012f2c:	20009004 	.word	0x20009004
 8012f30:	080171ec 	.word	0x080171ec

08012f34 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012f38:	2005      	movs	r0, #5
 8012f3a:	f7f6 fe01 	bl	8009b40 <memp_malloc>
 8012f3e:	4603      	mov	r3, r0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d106      	bne.n	8012f60 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012f52:	4b07      	ldr	r3, [pc, #28]	; (8012f70 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012f54:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012f58:	4906      	ldr	r1, [pc, #24]	; (8012f74 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012f5a:	4807      	ldr	r0, [pc, #28]	; (8012f78 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012f5c:	f000 fac2 	bl	80134e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012f60:	6879      	ldr	r1, [r7, #4]
 8012f62:	2005      	movs	r0, #5
 8012f64:	f7f6 fe38 	bl	8009bd8 <memp_free>
}
 8012f68:	bf00      	nop
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	08017054 	.word	0x08017054
 8012f74:	0801720c 	.word	0x0801720c
 8012f78:	0801709c 	.word	0x0801709c

08012f7c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d106      	bne.n	8012f9c <ipfrag_free_pbuf_custom+0x20>
 8012f8e:	4b11      	ldr	r3, [pc, #68]	; (8012fd4 <ipfrag_free_pbuf_custom+0x58>)
 8012f90:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012f94:	4910      	ldr	r1, [pc, #64]	; (8012fd8 <ipfrag_free_pbuf_custom+0x5c>)
 8012f96:	4811      	ldr	r0, [pc, #68]	; (8012fdc <ipfrag_free_pbuf_custom+0x60>)
 8012f98:	f000 faa4 	bl	80134e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012f9c:	68fa      	ldr	r2, [r7, #12]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d006      	beq.n	8012fb2 <ipfrag_free_pbuf_custom+0x36>
 8012fa4:	4b0b      	ldr	r3, [pc, #44]	; (8012fd4 <ipfrag_free_pbuf_custom+0x58>)
 8012fa6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012faa:	490d      	ldr	r1, [pc, #52]	; (8012fe0 <ipfrag_free_pbuf_custom+0x64>)
 8012fac:	480b      	ldr	r0, [pc, #44]	; (8012fdc <ipfrag_free_pbuf_custom+0x60>)
 8012fae:	f000 fa99 	bl	80134e4 <iprintf>
  if (pcr->original != NULL) {
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	695b      	ldr	r3, [r3, #20]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d004      	beq.n	8012fc4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	695b      	ldr	r3, [r3, #20]
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7f7 fc1c 	bl	800a7fc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f7ff ffbd 	bl	8012f44 <ip_frag_free_pbuf_custom_ref>
}
 8012fca:	bf00      	nop
 8012fcc:	3710      	adds	r7, #16
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	08017054 	.word	0x08017054
 8012fd8:	08017218 	.word	0x08017218
 8012fdc:	0801709c 	.word	0x0801709c
 8012fe0:	08017224 	.word	0x08017224

08012fe4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b094      	sub	sp, #80	; 0x50
 8012fe8:	af02      	add	r7, sp, #8
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012ffa:	3b14      	subs	r3, #20
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	da00      	bge.n	8013002 <ip4_frag+0x1e>
 8013000:	3307      	adds	r3, #7
 8013002:	10db      	asrs	r3, r3, #3
 8013004:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013006:	2314      	movs	r3, #20
 8013008:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013012:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	f003 030f 	and.w	r3, r3, #15
 801301c:	b2db      	uxtb	r3, r3
 801301e:	009b      	lsls	r3, r3, #2
 8013020:	b2db      	uxtb	r3, r3
 8013022:	2b14      	cmp	r3, #20
 8013024:	d002      	beq.n	801302c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013026:	f06f 0305 	mvn.w	r3, #5
 801302a:	e110      	b.n	801324e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	895b      	ldrh	r3, [r3, #10]
 8013030:	2b13      	cmp	r3, #19
 8013032:	d809      	bhi.n	8013048 <ip4_frag+0x64>
 8013034:	4b88      	ldr	r3, [pc, #544]	; (8013258 <ip4_frag+0x274>)
 8013036:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801303a:	4988      	ldr	r1, [pc, #544]	; (801325c <ip4_frag+0x278>)
 801303c:	4888      	ldr	r0, [pc, #544]	; (8013260 <ip4_frag+0x27c>)
 801303e:	f000 fa51 	bl	80134e4 <iprintf>
 8013042:	f06f 0305 	mvn.w	r3, #5
 8013046:	e102      	b.n	801324e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304a:	88db      	ldrh	r3, [r3, #6]
 801304c:	b29b      	uxth	r3, r3
 801304e:	4618      	mov	r0, r3
 8013050:	f7f6 f920 	bl	8009294 <lwip_htons>
 8013054:	4603      	mov	r3, r0
 8013056:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013058:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801305a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801305e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013062:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013068:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	891b      	ldrh	r3, [r3, #8]
 801306e:	3b14      	subs	r3, #20
 8013070:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013074:	e0e1      	b.n	801323a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013076:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013078:	00db      	lsls	r3, r3, #3
 801307a:	b29b      	uxth	r3, r3
 801307c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013080:	4293      	cmp	r3, r2
 8013082:	bf28      	it	cs
 8013084:	4613      	movcs	r3, r2
 8013086:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013088:	f44f 7220 	mov.w	r2, #640	; 0x280
 801308c:	2114      	movs	r1, #20
 801308e:	200e      	movs	r0, #14
 8013090:	f7f7 f8d0 	bl	800a234 <pbuf_alloc>
 8013094:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013098:	2b00      	cmp	r3, #0
 801309a:	f000 80d5 	beq.w	8013248 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a0:	895b      	ldrh	r3, [r3, #10]
 80130a2:	2b13      	cmp	r3, #19
 80130a4:	d806      	bhi.n	80130b4 <ip4_frag+0xd0>
 80130a6:	4b6c      	ldr	r3, [pc, #432]	; (8013258 <ip4_frag+0x274>)
 80130a8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80130ac:	496d      	ldr	r1, [pc, #436]	; (8013264 <ip4_frag+0x280>)
 80130ae:	486c      	ldr	r0, [pc, #432]	; (8013260 <ip4_frag+0x27c>)
 80130b0:	f000 fa18 	bl	80134e4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80130b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	2214      	movs	r2, #20
 80130ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 f9e1 	bl	8013484 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80130c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80130c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80130ce:	e064      	b.n	801319a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	895a      	ldrh	r2, [r3, #10]
 80130d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	895b      	ldrh	r3, [r3, #10]
 80130de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d906      	bls.n	80130f2 <ip4_frag+0x10e>
 80130e4:	4b5c      	ldr	r3, [pc, #368]	; (8013258 <ip4_frag+0x274>)
 80130e6:	f240 322d 	movw	r2, #813	; 0x32d
 80130ea:	495f      	ldr	r1, [pc, #380]	; (8013268 <ip4_frag+0x284>)
 80130ec:	485c      	ldr	r0, [pc, #368]	; (8013260 <ip4_frag+0x27c>)
 80130ee:	f000 f9f9 	bl	80134e4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80130f2:	8bfa      	ldrh	r2, [r7, #30]
 80130f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80130f8:	4293      	cmp	r3, r2
 80130fa:	bf28      	it	cs
 80130fc:	4613      	movcs	r3, r2
 80130fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013102:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013106:	2b00      	cmp	r3, #0
 8013108:	d105      	bne.n	8013116 <ip4_frag+0x132>
        poff = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	60fb      	str	r3, [r7, #12]
        continue;
 8013114:	e041      	b.n	801319a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013116:	f7ff ff0d 	bl	8012f34 <ip_frag_alloc_pbuf_custom_ref>
 801311a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801311c:	69bb      	ldr	r3, [r7, #24]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d103      	bne.n	801312a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013124:	f7f7 fb6a 	bl	800a7fc <pbuf_free>
        goto memerr;
 8013128:	e08f      	b.n	801324a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801312a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013130:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013132:	4413      	add	r3, r2
 8013134:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013138:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801313c:	9201      	str	r2, [sp, #4]
 801313e:	9300      	str	r3, [sp, #0]
 8013140:	4603      	mov	r3, r0
 8013142:	2241      	movs	r2, #65	; 0x41
 8013144:	2000      	movs	r0, #0
 8013146:	f7f7 f99f 	bl	800a488 <pbuf_alloced_custom>
 801314a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d106      	bne.n	8013160 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013152:	69b8      	ldr	r0, [r7, #24]
 8013154:	f7ff fef6 	bl	8012f44 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801315a:	f7f7 fb4f 	bl	800a7fc <pbuf_free>
        goto memerr;
 801315e:	e074      	b.n	801324a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013160:	68f8      	ldr	r0, [r7, #12]
 8013162:	f7f7 fbeb 	bl	800a93c <pbuf_ref>
      pcr->original = p;
 8013166:	69bb      	ldr	r3, [r7, #24]
 8013168:	68fa      	ldr	r2, [r7, #12]
 801316a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	4a3f      	ldr	r2, [pc, #252]	; (801326c <ip4_frag+0x288>)
 8013170:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013172:	6979      	ldr	r1, [r7, #20]
 8013174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013176:	f7f7 fc03 	bl	800a980 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801317a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801317e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013182:	1ad3      	subs	r3, r2, r3
 8013184:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013188:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801318c:	2b00      	cmp	r3, #0
 801318e:	d004      	beq.n	801319a <ip4_frag+0x1b6>
        poff = 0;
 8013190:	2300      	movs	r3, #0
 8013192:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801319a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d196      	bne.n	80130d0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80131a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80131a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80131a8:	4413      	add	r3, r2
 80131aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131b0:	f1a3 0213 	sub.w	r2, r3, #19
 80131b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80131b8:	429a      	cmp	r2, r3
 80131ba:	bfcc      	ite	gt
 80131bc:	2301      	movgt	r3, #1
 80131be:	2300      	movle	r3, #0
 80131c0:	b2db      	uxtb	r3, r3
 80131c2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80131c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80131c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80131cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80131ce:	6a3b      	ldr	r3, [r7, #32]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d002      	beq.n	80131da <ip4_frag+0x1f6>
 80131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d003      	beq.n	80131e2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80131da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80131e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80131e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7f6 f855 	bl	8009294 <lwip_htons>
 80131ea:	4603      	mov	r3, r0
 80131ec:	461a      	mov	r2, r3
 80131ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80131f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80131f4:	3314      	adds	r3, #20
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7f6 f84b 	bl	8009294 <lwip_htons>
 80131fe:	4603      	mov	r3, r0
 8013200:	461a      	mov	r2, r3
 8013202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013204:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013208:	2200      	movs	r2, #0
 801320a:	729a      	strb	r2, [r3, #10]
 801320c:	2200      	movs	r2, #0
 801320e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	695b      	ldr	r3, [r3, #20]
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013218:	68b8      	ldr	r0, [r7, #8]
 801321a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801321c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801321e:	f7f7 faed 	bl	800a7fc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013222:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013228:	1ad3      	subs	r3, r2, r3
 801322a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801322e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013232:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013234:	4413      	add	r3, r2
 8013236:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801323a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801323e:	2b00      	cmp	r3, #0
 8013240:	f47f af19 	bne.w	8013076 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013244:	2300      	movs	r3, #0
 8013246:	e002      	b.n	801324e <ip4_frag+0x26a>
      goto memerr;
 8013248:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801324a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801324e:	4618      	mov	r0, r3
 8013250:	3748      	adds	r7, #72	; 0x48
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
 8013256:	bf00      	nop
 8013258:	08017054 	.word	0x08017054
 801325c:	08017230 	.word	0x08017230
 8013260:	0801709c 	.word	0x0801709c
 8013264:	0801724c 	.word	0x0801724c
 8013268:	0801726c 	.word	0x0801726c
 801326c:	08012f7d 	.word	0x08012f7d

08013270 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b086      	sub	sp, #24
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801327a:	230e      	movs	r3, #14
 801327c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	895b      	ldrh	r3, [r3, #10]
 8013282:	2b0e      	cmp	r3, #14
 8013284:	d96e      	bls.n	8013364 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	7bdb      	ldrb	r3, [r3, #15]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d106      	bne.n	801329c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013294:	3301      	adds	r3, #1
 8013296:	b2da      	uxtb	r2, r3
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	7b1a      	ldrb	r2, [r3, #12]
 80132a6:	7b5b      	ldrb	r3, [r3, #13]
 80132a8:	021b      	lsls	r3, r3, #8
 80132aa:	4313      	orrs	r3, r2
 80132ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	f003 0301 	and.w	r3, r3, #1
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d023      	beq.n	8013302 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d10f      	bne.n	80132e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	785b      	ldrb	r3, [r3, #1]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d11b      	bne.n	8013302 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80132ce:	2b5e      	cmp	r3, #94	; 0x5e
 80132d0:	d117      	bne.n	8013302 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	7b5b      	ldrb	r3, [r3, #13]
 80132d6:	f043 0310 	orr.w	r3, r3, #16
 80132da:	b2da      	uxtb	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	735a      	strb	r2, [r3, #13]
 80132e0:	e00f      	b.n	8013302 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	2206      	movs	r2, #6
 80132e6:	4928      	ldr	r1, [pc, #160]	; (8013388 <ethernet_input+0x118>)
 80132e8:	4618      	mov	r0, r3
 80132ea:	f000 f8bb 	bl	8013464 <memcmp>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d106      	bne.n	8013302 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	7b5b      	ldrb	r3, [r3, #13]
 80132f8:	f043 0308 	orr.w	r3, r3, #8
 80132fc:	b2da      	uxtb	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013302:	89fb      	ldrh	r3, [r7, #14]
 8013304:	2b08      	cmp	r3, #8
 8013306:	d003      	beq.n	8013310 <ethernet_input+0xa0>
 8013308:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801330c:	d014      	beq.n	8013338 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801330e:	e032      	b.n	8013376 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013316:	f003 0308 	and.w	r3, r3, #8
 801331a:	2b00      	cmp	r3, #0
 801331c:	d024      	beq.n	8013368 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801331e:	8afb      	ldrh	r3, [r7, #22]
 8013320:	4619      	mov	r1, r3
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f7f7 f9e4 	bl	800a6f0 <pbuf_remove_header>
 8013328:	4603      	mov	r3, r0
 801332a:	2b00      	cmp	r3, #0
 801332c:	d11e      	bne.n	801336c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801332e:	6839      	ldr	r1, [r7, #0]
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f7fe ff21 	bl	8012178 <ip4_input>
      break;
 8013336:	e013      	b.n	8013360 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801333e:	f003 0308 	and.w	r3, r3, #8
 8013342:	2b00      	cmp	r3, #0
 8013344:	d014      	beq.n	8013370 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013346:	8afb      	ldrh	r3, [r7, #22]
 8013348:	4619      	mov	r1, r3
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7f7 f9d0 	bl	800a6f0 <pbuf_remove_header>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d10e      	bne.n	8013374 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013356:	6839      	ldr	r1, [r7, #0]
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7fe f8c1 	bl	80114e0 <etharp_input>
      break;
 801335e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013360:	2300      	movs	r3, #0
 8013362:	e00c      	b.n	801337e <ethernet_input+0x10e>
    goto free_and_return;
 8013364:	bf00      	nop
 8013366:	e006      	b.n	8013376 <ethernet_input+0x106>
        goto free_and_return;
 8013368:	bf00      	nop
 801336a:	e004      	b.n	8013376 <ethernet_input+0x106>
        goto free_and_return;
 801336c:	bf00      	nop
 801336e:	e002      	b.n	8013376 <ethernet_input+0x106>
        goto free_and_return;
 8013370:	bf00      	nop
 8013372:	e000      	b.n	8013376 <ethernet_input+0x106>
        goto free_and_return;
 8013374:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f7f7 fa40 	bl	800a7fc <pbuf_free>
  return ERR_OK;
 801337c:	2300      	movs	r3, #0
}
 801337e:	4618      	mov	r0, r3
 8013380:	3718      	adds	r7, #24
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	08017404 	.word	0x08017404

0801338c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af00      	add	r7, sp, #0
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
 8013398:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801339a:	8c3b      	ldrh	r3, [r7, #32]
 801339c:	4618      	mov	r0, r3
 801339e:	f7f5 ff79 	bl	8009294 <lwip_htons>
 80133a2:	4603      	mov	r3, r0
 80133a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80133a6:	210e      	movs	r1, #14
 80133a8:	68b8      	ldr	r0, [r7, #8]
 80133aa:	f7f7 f991 	bl	800a6d0 <pbuf_add_header>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d125      	bne.n	8013400 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	8afa      	ldrh	r2, [r7, #22]
 80133be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	2206      	movs	r2, #6
 80133c4:	6839      	ldr	r1, [r7, #0]
 80133c6:	4618      	mov	r0, r3
 80133c8:	f000 f85c 	bl	8013484 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	3306      	adds	r3, #6
 80133d0:	2206      	movs	r2, #6
 80133d2:	6879      	ldr	r1, [r7, #4]
 80133d4:	4618      	mov	r0, r3
 80133d6:	f000 f855 	bl	8013484 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80133e0:	2b06      	cmp	r3, #6
 80133e2:	d006      	beq.n	80133f2 <ethernet_output+0x66>
 80133e4:	4b0a      	ldr	r3, [pc, #40]	; (8013410 <ethernet_output+0x84>)
 80133e6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80133ea:	490a      	ldr	r1, [pc, #40]	; (8013414 <ethernet_output+0x88>)
 80133ec:	480a      	ldr	r0, [pc, #40]	; (8013418 <ethernet_output+0x8c>)
 80133ee:	f000 f879 	bl	80134e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	699b      	ldr	r3, [r3, #24]
 80133f6:	68b9      	ldr	r1, [r7, #8]
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	4798      	blx	r3
 80133fc:	4603      	mov	r3, r0
 80133fe:	e002      	b.n	8013406 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013400:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013402:	f06f 0301 	mvn.w	r3, #1
}
 8013406:	4618      	mov	r0, r3
 8013408:	3718      	adds	r7, #24
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	0801727c 	.word	0x0801727c
 8013414:	080172b4 	.word	0x080172b4
 8013418:	080172e8 	.word	0x080172e8

0801341c <__libc_init_array>:
 801341c:	b570      	push	{r4, r5, r6, lr}
 801341e:	4d0d      	ldr	r5, [pc, #52]	; (8013454 <__libc_init_array+0x38>)
 8013420:	4c0d      	ldr	r4, [pc, #52]	; (8013458 <__libc_init_array+0x3c>)
 8013422:	1b64      	subs	r4, r4, r5
 8013424:	10a4      	asrs	r4, r4, #2
 8013426:	2600      	movs	r6, #0
 8013428:	42a6      	cmp	r6, r4
 801342a:	d109      	bne.n	8013440 <__libc_init_array+0x24>
 801342c:	4d0b      	ldr	r5, [pc, #44]	; (801345c <__libc_init_array+0x40>)
 801342e:	4c0c      	ldr	r4, [pc, #48]	; (8013460 <__libc_init_array+0x44>)
 8013430:	f001 fa5c 	bl	80148ec <_init>
 8013434:	1b64      	subs	r4, r4, r5
 8013436:	10a4      	asrs	r4, r4, #2
 8013438:	2600      	movs	r6, #0
 801343a:	42a6      	cmp	r6, r4
 801343c:	d105      	bne.n	801344a <__libc_init_array+0x2e>
 801343e:	bd70      	pop	{r4, r5, r6, pc}
 8013440:	f855 3b04 	ldr.w	r3, [r5], #4
 8013444:	4798      	blx	r3
 8013446:	3601      	adds	r6, #1
 8013448:	e7ee      	b.n	8013428 <__libc_init_array+0xc>
 801344a:	f855 3b04 	ldr.w	r3, [r5], #4
 801344e:	4798      	blx	r3
 8013450:	3601      	adds	r6, #1
 8013452:	e7f2      	b.n	801343a <__libc_init_array+0x1e>
 8013454:	08017564 	.word	0x08017564
 8013458:	08017564 	.word	0x08017564
 801345c:	08017564 	.word	0x08017564
 8013460:	08017568 	.word	0x08017568

08013464 <memcmp>:
 8013464:	b510      	push	{r4, lr}
 8013466:	3901      	subs	r1, #1
 8013468:	4402      	add	r2, r0
 801346a:	4290      	cmp	r0, r2
 801346c:	d101      	bne.n	8013472 <memcmp+0xe>
 801346e:	2000      	movs	r0, #0
 8013470:	e005      	b.n	801347e <memcmp+0x1a>
 8013472:	7803      	ldrb	r3, [r0, #0]
 8013474:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013478:	42a3      	cmp	r3, r4
 801347a:	d001      	beq.n	8013480 <memcmp+0x1c>
 801347c:	1b18      	subs	r0, r3, r4
 801347e:	bd10      	pop	{r4, pc}
 8013480:	3001      	adds	r0, #1
 8013482:	e7f2      	b.n	801346a <memcmp+0x6>

08013484 <memcpy>:
 8013484:	440a      	add	r2, r1
 8013486:	4291      	cmp	r1, r2
 8013488:	f100 33ff 	add.w	r3, r0, #4294967295
 801348c:	d100      	bne.n	8013490 <memcpy+0xc>
 801348e:	4770      	bx	lr
 8013490:	b510      	push	{r4, lr}
 8013492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013496:	f803 4f01 	strb.w	r4, [r3, #1]!
 801349a:	4291      	cmp	r1, r2
 801349c:	d1f9      	bne.n	8013492 <memcpy+0xe>
 801349e:	bd10      	pop	{r4, pc}

080134a0 <memmove>:
 80134a0:	4288      	cmp	r0, r1
 80134a2:	b510      	push	{r4, lr}
 80134a4:	eb01 0402 	add.w	r4, r1, r2
 80134a8:	d902      	bls.n	80134b0 <memmove+0x10>
 80134aa:	4284      	cmp	r4, r0
 80134ac:	4623      	mov	r3, r4
 80134ae:	d807      	bhi.n	80134c0 <memmove+0x20>
 80134b0:	1e43      	subs	r3, r0, #1
 80134b2:	42a1      	cmp	r1, r4
 80134b4:	d008      	beq.n	80134c8 <memmove+0x28>
 80134b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134be:	e7f8      	b.n	80134b2 <memmove+0x12>
 80134c0:	4402      	add	r2, r0
 80134c2:	4601      	mov	r1, r0
 80134c4:	428a      	cmp	r2, r1
 80134c6:	d100      	bne.n	80134ca <memmove+0x2a>
 80134c8:	bd10      	pop	{r4, pc}
 80134ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134d2:	e7f7      	b.n	80134c4 <memmove+0x24>

080134d4 <memset>:
 80134d4:	4402      	add	r2, r0
 80134d6:	4603      	mov	r3, r0
 80134d8:	4293      	cmp	r3, r2
 80134da:	d100      	bne.n	80134de <memset+0xa>
 80134dc:	4770      	bx	lr
 80134de:	f803 1b01 	strb.w	r1, [r3], #1
 80134e2:	e7f9      	b.n	80134d8 <memset+0x4>

080134e4 <iprintf>:
 80134e4:	b40f      	push	{r0, r1, r2, r3}
 80134e6:	4b0a      	ldr	r3, [pc, #40]	; (8013510 <iprintf+0x2c>)
 80134e8:	b513      	push	{r0, r1, r4, lr}
 80134ea:	681c      	ldr	r4, [r3, #0]
 80134ec:	b124      	cbz	r4, 80134f8 <iprintf+0x14>
 80134ee:	69a3      	ldr	r3, [r4, #24]
 80134f0:	b913      	cbnz	r3, 80134f8 <iprintf+0x14>
 80134f2:	4620      	mov	r0, r4
 80134f4:	f000 f8e2 	bl	80136bc <__sinit>
 80134f8:	ab05      	add	r3, sp, #20
 80134fa:	9a04      	ldr	r2, [sp, #16]
 80134fc:	68a1      	ldr	r1, [r4, #8]
 80134fe:	9301      	str	r3, [sp, #4]
 8013500:	4620      	mov	r0, r4
 8013502:	f000 fbfb 	bl	8013cfc <_vfiprintf_r>
 8013506:	b002      	add	sp, #8
 8013508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801350c:	b004      	add	sp, #16
 801350e:	4770      	bx	lr
 8013510:	20000018 	.word	0x20000018

08013514 <rand>:
 8013514:	4b16      	ldr	r3, [pc, #88]	; (8013570 <rand+0x5c>)
 8013516:	b510      	push	{r4, lr}
 8013518:	681c      	ldr	r4, [r3, #0]
 801351a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801351c:	b9b3      	cbnz	r3, 801354c <rand+0x38>
 801351e:	2018      	movs	r0, #24
 8013520:	f000 f97e 	bl	8013820 <malloc>
 8013524:	63a0      	str	r0, [r4, #56]	; 0x38
 8013526:	b928      	cbnz	r0, 8013534 <rand+0x20>
 8013528:	4602      	mov	r2, r0
 801352a:	4b12      	ldr	r3, [pc, #72]	; (8013574 <rand+0x60>)
 801352c:	4812      	ldr	r0, [pc, #72]	; (8013578 <rand+0x64>)
 801352e:	214e      	movs	r1, #78	; 0x4e
 8013530:	f000 f84e 	bl	80135d0 <__assert_func>
 8013534:	4a11      	ldr	r2, [pc, #68]	; (801357c <rand+0x68>)
 8013536:	4b12      	ldr	r3, [pc, #72]	; (8013580 <rand+0x6c>)
 8013538:	e9c0 2300 	strd	r2, r3, [r0]
 801353c:	4b11      	ldr	r3, [pc, #68]	; (8013584 <rand+0x70>)
 801353e:	6083      	str	r3, [r0, #8]
 8013540:	230b      	movs	r3, #11
 8013542:	8183      	strh	r3, [r0, #12]
 8013544:	2201      	movs	r2, #1
 8013546:	2300      	movs	r3, #0
 8013548:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801354c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801354e:	4a0e      	ldr	r2, [pc, #56]	; (8013588 <rand+0x74>)
 8013550:	6920      	ldr	r0, [r4, #16]
 8013552:	6963      	ldr	r3, [r4, #20]
 8013554:	490d      	ldr	r1, [pc, #52]	; (801358c <rand+0x78>)
 8013556:	4342      	muls	r2, r0
 8013558:	fb01 2203 	mla	r2, r1, r3, r2
 801355c:	fba0 0101 	umull	r0, r1, r0, r1
 8013560:	1c43      	adds	r3, r0, #1
 8013562:	eb42 0001 	adc.w	r0, r2, r1
 8013566:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801356a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801356e:	bd10      	pop	{r4, pc}
 8013570:	20000018 	.word	0x20000018
 8013574:	08017418 	.word	0x08017418
 8013578:	0801742f 	.word	0x0801742f
 801357c:	abcd330e 	.word	0xabcd330e
 8013580:	e66d1234 	.word	0xe66d1234
 8013584:	0005deec 	.word	0x0005deec
 8013588:	5851f42d 	.word	0x5851f42d
 801358c:	4c957f2d 	.word	0x4c957f2d

08013590 <siprintf>:
 8013590:	b40e      	push	{r1, r2, r3}
 8013592:	b500      	push	{lr}
 8013594:	b09c      	sub	sp, #112	; 0x70
 8013596:	ab1d      	add	r3, sp, #116	; 0x74
 8013598:	9002      	str	r0, [sp, #8]
 801359a:	9006      	str	r0, [sp, #24]
 801359c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80135a0:	4809      	ldr	r0, [pc, #36]	; (80135c8 <siprintf+0x38>)
 80135a2:	9107      	str	r1, [sp, #28]
 80135a4:	9104      	str	r1, [sp, #16]
 80135a6:	4909      	ldr	r1, [pc, #36]	; (80135cc <siprintf+0x3c>)
 80135a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ac:	9105      	str	r1, [sp, #20]
 80135ae:	6800      	ldr	r0, [r0, #0]
 80135b0:	9301      	str	r3, [sp, #4]
 80135b2:	a902      	add	r1, sp, #8
 80135b4:	f000 fa78 	bl	8013aa8 <_svfiprintf_r>
 80135b8:	9b02      	ldr	r3, [sp, #8]
 80135ba:	2200      	movs	r2, #0
 80135bc:	701a      	strb	r2, [r3, #0]
 80135be:	b01c      	add	sp, #112	; 0x70
 80135c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80135c4:	b003      	add	sp, #12
 80135c6:	4770      	bx	lr
 80135c8:	20000018 	.word	0x20000018
 80135cc:	ffff0208 	.word	0xffff0208

080135d0 <__assert_func>:
 80135d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135d2:	4614      	mov	r4, r2
 80135d4:	461a      	mov	r2, r3
 80135d6:	4b09      	ldr	r3, [pc, #36]	; (80135fc <__assert_func+0x2c>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	4605      	mov	r5, r0
 80135dc:	68d8      	ldr	r0, [r3, #12]
 80135de:	b14c      	cbz	r4, 80135f4 <__assert_func+0x24>
 80135e0:	4b07      	ldr	r3, [pc, #28]	; (8013600 <__assert_func+0x30>)
 80135e2:	9100      	str	r1, [sp, #0]
 80135e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135e8:	4906      	ldr	r1, [pc, #24]	; (8013604 <__assert_func+0x34>)
 80135ea:	462b      	mov	r3, r5
 80135ec:	f000 f8e4 	bl	80137b8 <fiprintf>
 80135f0:	f000 ff6e 	bl	80144d0 <abort>
 80135f4:	4b04      	ldr	r3, [pc, #16]	; (8013608 <__assert_func+0x38>)
 80135f6:	461c      	mov	r4, r3
 80135f8:	e7f3      	b.n	80135e2 <__assert_func+0x12>
 80135fa:	bf00      	nop
 80135fc:	20000018 	.word	0x20000018
 8013600:	0801748a 	.word	0x0801748a
 8013604:	08017497 	.word	0x08017497
 8013608:	080174c5 	.word	0x080174c5

0801360c <std>:
 801360c:	2300      	movs	r3, #0
 801360e:	b510      	push	{r4, lr}
 8013610:	4604      	mov	r4, r0
 8013612:	e9c0 3300 	strd	r3, r3, [r0]
 8013616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801361a:	6083      	str	r3, [r0, #8]
 801361c:	8181      	strh	r1, [r0, #12]
 801361e:	6643      	str	r3, [r0, #100]	; 0x64
 8013620:	81c2      	strh	r2, [r0, #14]
 8013622:	6183      	str	r3, [r0, #24]
 8013624:	4619      	mov	r1, r3
 8013626:	2208      	movs	r2, #8
 8013628:	305c      	adds	r0, #92	; 0x5c
 801362a:	f7ff ff53 	bl	80134d4 <memset>
 801362e:	4b05      	ldr	r3, [pc, #20]	; (8013644 <std+0x38>)
 8013630:	6263      	str	r3, [r4, #36]	; 0x24
 8013632:	4b05      	ldr	r3, [pc, #20]	; (8013648 <std+0x3c>)
 8013634:	62a3      	str	r3, [r4, #40]	; 0x28
 8013636:	4b05      	ldr	r3, [pc, #20]	; (801364c <std+0x40>)
 8013638:	62e3      	str	r3, [r4, #44]	; 0x2c
 801363a:	4b05      	ldr	r3, [pc, #20]	; (8013650 <std+0x44>)
 801363c:	6224      	str	r4, [r4, #32]
 801363e:	6323      	str	r3, [r4, #48]	; 0x30
 8013640:	bd10      	pop	{r4, pc}
 8013642:	bf00      	nop
 8013644:	080142a5 	.word	0x080142a5
 8013648:	080142c7 	.word	0x080142c7
 801364c:	080142ff 	.word	0x080142ff
 8013650:	08014323 	.word	0x08014323

08013654 <_cleanup_r>:
 8013654:	4901      	ldr	r1, [pc, #4]	; (801365c <_cleanup_r+0x8>)
 8013656:	f000 b8c1 	b.w	80137dc <_fwalk_reent>
 801365a:	bf00      	nop
 801365c:	0801460d 	.word	0x0801460d

08013660 <__sfmoreglue>:
 8013660:	b570      	push	{r4, r5, r6, lr}
 8013662:	2268      	movs	r2, #104	; 0x68
 8013664:	1e4d      	subs	r5, r1, #1
 8013666:	4355      	muls	r5, r2
 8013668:	460e      	mov	r6, r1
 801366a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801366e:	f000 f94b 	bl	8013908 <_malloc_r>
 8013672:	4604      	mov	r4, r0
 8013674:	b140      	cbz	r0, 8013688 <__sfmoreglue+0x28>
 8013676:	2100      	movs	r1, #0
 8013678:	e9c0 1600 	strd	r1, r6, [r0]
 801367c:	300c      	adds	r0, #12
 801367e:	60a0      	str	r0, [r4, #8]
 8013680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013684:	f7ff ff26 	bl	80134d4 <memset>
 8013688:	4620      	mov	r0, r4
 801368a:	bd70      	pop	{r4, r5, r6, pc}

0801368c <__sfp_lock_acquire>:
 801368c:	4801      	ldr	r0, [pc, #4]	; (8013694 <__sfp_lock_acquire+0x8>)
 801368e:	f000 b8c5 	b.w	801381c <__retarget_lock_acquire_recursive>
 8013692:	bf00      	nop
 8013694:	20009011 	.word	0x20009011

08013698 <__sfp_lock_release>:
 8013698:	4801      	ldr	r0, [pc, #4]	; (80136a0 <__sfp_lock_release+0x8>)
 801369a:	f000 b8c0 	b.w	801381e <__retarget_lock_release_recursive>
 801369e:	bf00      	nop
 80136a0:	20009011 	.word	0x20009011

080136a4 <__sinit_lock_acquire>:
 80136a4:	4801      	ldr	r0, [pc, #4]	; (80136ac <__sinit_lock_acquire+0x8>)
 80136a6:	f000 b8b9 	b.w	801381c <__retarget_lock_acquire_recursive>
 80136aa:	bf00      	nop
 80136ac:	20009012 	.word	0x20009012

080136b0 <__sinit_lock_release>:
 80136b0:	4801      	ldr	r0, [pc, #4]	; (80136b8 <__sinit_lock_release+0x8>)
 80136b2:	f000 b8b4 	b.w	801381e <__retarget_lock_release_recursive>
 80136b6:	bf00      	nop
 80136b8:	20009012 	.word	0x20009012

080136bc <__sinit>:
 80136bc:	b510      	push	{r4, lr}
 80136be:	4604      	mov	r4, r0
 80136c0:	f7ff fff0 	bl	80136a4 <__sinit_lock_acquire>
 80136c4:	69a3      	ldr	r3, [r4, #24]
 80136c6:	b11b      	cbz	r3, 80136d0 <__sinit+0x14>
 80136c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136cc:	f7ff bff0 	b.w	80136b0 <__sinit_lock_release>
 80136d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80136d4:	6523      	str	r3, [r4, #80]	; 0x50
 80136d6:	4b13      	ldr	r3, [pc, #76]	; (8013724 <__sinit+0x68>)
 80136d8:	4a13      	ldr	r2, [pc, #76]	; (8013728 <__sinit+0x6c>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80136de:	42a3      	cmp	r3, r4
 80136e0:	bf04      	itt	eq
 80136e2:	2301      	moveq	r3, #1
 80136e4:	61a3      	streq	r3, [r4, #24]
 80136e6:	4620      	mov	r0, r4
 80136e8:	f000 f820 	bl	801372c <__sfp>
 80136ec:	6060      	str	r0, [r4, #4]
 80136ee:	4620      	mov	r0, r4
 80136f0:	f000 f81c 	bl	801372c <__sfp>
 80136f4:	60a0      	str	r0, [r4, #8]
 80136f6:	4620      	mov	r0, r4
 80136f8:	f000 f818 	bl	801372c <__sfp>
 80136fc:	2200      	movs	r2, #0
 80136fe:	60e0      	str	r0, [r4, #12]
 8013700:	2104      	movs	r1, #4
 8013702:	6860      	ldr	r0, [r4, #4]
 8013704:	f7ff ff82 	bl	801360c <std>
 8013708:	68a0      	ldr	r0, [r4, #8]
 801370a:	2201      	movs	r2, #1
 801370c:	2109      	movs	r1, #9
 801370e:	f7ff ff7d 	bl	801360c <std>
 8013712:	68e0      	ldr	r0, [r4, #12]
 8013714:	2202      	movs	r2, #2
 8013716:	2112      	movs	r1, #18
 8013718:	f7ff ff78 	bl	801360c <std>
 801371c:	2301      	movs	r3, #1
 801371e:	61a3      	str	r3, [r4, #24]
 8013720:	e7d2      	b.n	80136c8 <__sinit+0xc>
 8013722:	bf00      	nop
 8013724:	08017414 	.word	0x08017414
 8013728:	08013655 	.word	0x08013655

0801372c <__sfp>:
 801372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372e:	4607      	mov	r7, r0
 8013730:	f7ff ffac 	bl	801368c <__sfp_lock_acquire>
 8013734:	4b1e      	ldr	r3, [pc, #120]	; (80137b0 <__sfp+0x84>)
 8013736:	681e      	ldr	r6, [r3, #0]
 8013738:	69b3      	ldr	r3, [r6, #24]
 801373a:	b913      	cbnz	r3, 8013742 <__sfp+0x16>
 801373c:	4630      	mov	r0, r6
 801373e:	f7ff ffbd 	bl	80136bc <__sinit>
 8013742:	3648      	adds	r6, #72	; 0x48
 8013744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013748:	3b01      	subs	r3, #1
 801374a:	d503      	bpl.n	8013754 <__sfp+0x28>
 801374c:	6833      	ldr	r3, [r6, #0]
 801374e:	b30b      	cbz	r3, 8013794 <__sfp+0x68>
 8013750:	6836      	ldr	r6, [r6, #0]
 8013752:	e7f7      	b.n	8013744 <__sfp+0x18>
 8013754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013758:	b9d5      	cbnz	r5, 8013790 <__sfp+0x64>
 801375a:	4b16      	ldr	r3, [pc, #88]	; (80137b4 <__sfp+0x88>)
 801375c:	60e3      	str	r3, [r4, #12]
 801375e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013762:	6665      	str	r5, [r4, #100]	; 0x64
 8013764:	f000 f859 	bl	801381a <__retarget_lock_init_recursive>
 8013768:	f7ff ff96 	bl	8013698 <__sfp_lock_release>
 801376c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013774:	6025      	str	r5, [r4, #0]
 8013776:	61a5      	str	r5, [r4, #24]
 8013778:	2208      	movs	r2, #8
 801377a:	4629      	mov	r1, r5
 801377c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013780:	f7ff fea8 	bl	80134d4 <memset>
 8013784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801378c:	4620      	mov	r0, r4
 801378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013790:	3468      	adds	r4, #104	; 0x68
 8013792:	e7d9      	b.n	8013748 <__sfp+0x1c>
 8013794:	2104      	movs	r1, #4
 8013796:	4638      	mov	r0, r7
 8013798:	f7ff ff62 	bl	8013660 <__sfmoreglue>
 801379c:	4604      	mov	r4, r0
 801379e:	6030      	str	r0, [r6, #0]
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d1d5      	bne.n	8013750 <__sfp+0x24>
 80137a4:	f7ff ff78 	bl	8013698 <__sfp_lock_release>
 80137a8:	230c      	movs	r3, #12
 80137aa:	603b      	str	r3, [r7, #0]
 80137ac:	e7ee      	b.n	801378c <__sfp+0x60>
 80137ae:	bf00      	nop
 80137b0:	08017414 	.word	0x08017414
 80137b4:	ffff0001 	.word	0xffff0001

080137b8 <fiprintf>:
 80137b8:	b40e      	push	{r1, r2, r3}
 80137ba:	b503      	push	{r0, r1, lr}
 80137bc:	4601      	mov	r1, r0
 80137be:	ab03      	add	r3, sp, #12
 80137c0:	4805      	ldr	r0, [pc, #20]	; (80137d8 <fiprintf+0x20>)
 80137c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80137c6:	6800      	ldr	r0, [r0, #0]
 80137c8:	9301      	str	r3, [sp, #4]
 80137ca:	f000 fa97 	bl	8013cfc <_vfiprintf_r>
 80137ce:	b002      	add	sp, #8
 80137d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80137d4:	b003      	add	sp, #12
 80137d6:	4770      	bx	lr
 80137d8:	20000018 	.word	0x20000018

080137dc <_fwalk_reent>:
 80137dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137e0:	4606      	mov	r6, r0
 80137e2:	4688      	mov	r8, r1
 80137e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80137e8:	2700      	movs	r7, #0
 80137ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80137ee:	f1b9 0901 	subs.w	r9, r9, #1
 80137f2:	d505      	bpl.n	8013800 <_fwalk_reent+0x24>
 80137f4:	6824      	ldr	r4, [r4, #0]
 80137f6:	2c00      	cmp	r4, #0
 80137f8:	d1f7      	bne.n	80137ea <_fwalk_reent+0xe>
 80137fa:	4638      	mov	r0, r7
 80137fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013800:	89ab      	ldrh	r3, [r5, #12]
 8013802:	2b01      	cmp	r3, #1
 8013804:	d907      	bls.n	8013816 <_fwalk_reent+0x3a>
 8013806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801380a:	3301      	adds	r3, #1
 801380c:	d003      	beq.n	8013816 <_fwalk_reent+0x3a>
 801380e:	4629      	mov	r1, r5
 8013810:	4630      	mov	r0, r6
 8013812:	47c0      	blx	r8
 8013814:	4307      	orrs	r7, r0
 8013816:	3568      	adds	r5, #104	; 0x68
 8013818:	e7e9      	b.n	80137ee <_fwalk_reent+0x12>

0801381a <__retarget_lock_init_recursive>:
 801381a:	4770      	bx	lr

0801381c <__retarget_lock_acquire_recursive>:
 801381c:	4770      	bx	lr

0801381e <__retarget_lock_release_recursive>:
 801381e:	4770      	bx	lr

08013820 <malloc>:
 8013820:	4b02      	ldr	r3, [pc, #8]	; (801382c <malloc+0xc>)
 8013822:	4601      	mov	r1, r0
 8013824:	6818      	ldr	r0, [r3, #0]
 8013826:	f000 b86f 	b.w	8013908 <_malloc_r>
 801382a:	bf00      	nop
 801382c:	20000018 	.word	0x20000018

08013830 <_free_r>:
 8013830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013832:	2900      	cmp	r1, #0
 8013834:	d044      	beq.n	80138c0 <_free_r+0x90>
 8013836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801383a:	9001      	str	r0, [sp, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	f1a1 0404 	sub.w	r4, r1, #4
 8013842:	bfb8      	it	lt
 8013844:	18e4      	addlt	r4, r4, r3
 8013846:	f000 ff95 	bl	8014774 <__malloc_lock>
 801384a:	4a1e      	ldr	r2, [pc, #120]	; (80138c4 <_free_r+0x94>)
 801384c:	9801      	ldr	r0, [sp, #4]
 801384e:	6813      	ldr	r3, [r2, #0]
 8013850:	b933      	cbnz	r3, 8013860 <_free_r+0x30>
 8013852:	6063      	str	r3, [r4, #4]
 8013854:	6014      	str	r4, [r2, #0]
 8013856:	b003      	add	sp, #12
 8013858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801385c:	f000 bf90 	b.w	8014780 <__malloc_unlock>
 8013860:	42a3      	cmp	r3, r4
 8013862:	d908      	bls.n	8013876 <_free_r+0x46>
 8013864:	6825      	ldr	r5, [r4, #0]
 8013866:	1961      	adds	r1, r4, r5
 8013868:	428b      	cmp	r3, r1
 801386a:	bf01      	itttt	eq
 801386c:	6819      	ldreq	r1, [r3, #0]
 801386e:	685b      	ldreq	r3, [r3, #4]
 8013870:	1949      	addeq	r1, r1, r5
 8013872:	6021      	streq	r1, [r4, #0]
 8013874:	e7ed      	b.n	8013852 <_free_r+0x22>
 8013876:	461a      	mov	r2, r3
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	b10b      	cbz	r3, 8013880 <_free_r+0x50>
 801387c:	42a3      	cmp	r3, r4
 801387e:	d9fa      	bls.n	8013876 <_free_r+0x46>
 8013880:	6811      	ldr	r1, [r2, #0]
 8013882:	1855      	adds	r5, r2, r1
 8013884:	42a5      	cmp	r5, r4
 8013886:	d10b      	bne.n	80138a0 <_free_r+0x70>
 8013888:	6824      	ldr	r4, [r4, #0]
 801388a:	4421      	add	r1, r4
 801388c:	1854      	adds	r4, r2, r1
 801388e:	42a3      	cmp	r3, r4
 8013890:	6011      	str	r1, [r2, #0]
 8013892:	d1e0      	bne.n	8013856 <_free_r+0x26>
 8013894:	681c      	ldr	r4, [r3, #0]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	6053      	str	r3, [r2, #4]
 801389a:	4421      	add	r1, r4
 801389c:	6011      	str	r1, [r2, #0]
 801389e:	e7da      	b.n	8013856 <_free_r+0x26>
 80138a0:	d902      	bls.n	80138a8 <_free_r+0x78>
 80138a2:	230c      	movs	r3, #12
 80138a4:	6003      	str	r3, [r0, #0]
 80138a6:	e7d6      	b.n	8013856 <_free_r+0x26>
 80138a8:	6825      	ldr	r5, [r4, #0]
 80138aa:	1961      	adds	r1, r4, r5
 80138ac:	428b      	cmp	r3, r1
 80138ae:	bf04      	itt	eq
 80138b0:	6819      	ldreq	r1, [r3, #0]
 80138b2:	685b      	ldreq	r3, [r3, #4]
 80138b4:	6063      	str	r3, [r4, #4]
 80138b6:	bf04      	itt	eq
 80138b8:	1949      	addeq	r1, r1, r5
 80138ba:	6021      	streq	r1, [r4, #0]
 80138bc:	6054      	str	r4, [r2, #4]
 80138be:	e7ca      	b.n	8013856 <_free_r+0x26>
 80138c0:	b003      	add	sp, #12
 80138c2:	bd30      	pop	{r4, r5, pc}
 80138c4:	20009014 	.word	0x20009014

080138c8 <sbrk_aligned>:
 80138c8:	b570      	push	{r4, r5, r6, lr}
 80138ca:	4e0e      	ldr	r6, [pc, #56]	; (8013904 <sbrk_aligned+0x3c>)
 80138cc:	460c      	mov	r4, r1
 80138ce:	6831      	ldr	r1, [r6, #0]
 80138d0:	4605      	mov	r5, r0
 80138d2:	b911      	cbnz	r1, 80138da <sbrk_aligned+0x12>
 80138d4:	f000 fcd6 	bl	8014284 <_sbrk_r>
 80138d8:	6030      	str	r0, [r6, #0]
 80138da:	4621      	mov	r1, r4
 80138dc:	4628      	mov	r0, r5
 80138de:	f000 fcd1 	bl	8014284 <_sbrk_r>
 80138e2:	1c43      	adds	r3, r0, #1
 80138e4:	d00a      	beq.n	80138fc <sbrk_aligned+0x34>
 80138e6:	1cc4      	adds	r4, r0, #3
 80138e8:	f024 0403 	bic.w	r4, r4, #3
 80138ec:	42a0      	cmp	r0, r4
 80138ee:	d007      	beq.n	8013900 <sbrk_aligned+0x38>
 80138f0:	1a21      	subs	r1, r4, r0
 80138f2:	4628      	mov	r0, r5
 80138f4:	f000 fcc6 	bl	8014284 <_sbrk_r>
 80138f8:	3001      	adds	r0, #1
 80138fa:	d101      	bne.n	8013900 <sbrk_aligned+0x38>
 80138fc:	f04f 34ff 	mov.w	r4, #4294967295
 8013900:	4620      	mov	r0, r4
 8013902:	bd70      	pop	{r4, r5, r6, pc}
 8013904:	20009018 	.word	0x20009018

08013908 <_malloc_r>:
 8013908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801390c:	1ccd      	adds	r5, r1, #3
 801390e:	f025 0503 	bic.w	r5, r5, #3
 8013912:	3508      	adds	r5, #8
 8013914:	2d0c      	cmp	r5, #12
 8013916:	bf38      	it	cc
 8013918:	250c      	movcc	r5, #12
 801391a:	2d00      	cmp	r5, #0
 801391c:	4607      	mov	r7, r0
 801391e:	db01      	blt.n	8013924 <_malloc_r+0x1c>
 8013920:	42a9      	cmp	r1, r5
 8013922:	d905      	bls.n	8013930 <_malloc_r+0x28>
 8013924:	230c      	movs	r3, #12
 8013926:	603b      	str	r3, [r7, #0]
 8013928:	2600      	movs	r6, #0
 801392a:	4630      	mov	r0, r6
 801392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013930:	4e2e      	ldr	r6, [pc, #184]	; (80139ec <_malloc_r+0xe4>)
 8013932:	f000 ff1f 	bl	8014774 <__malloc_lock>
 8013936:	6833      	ldr	r3, [r6, #0]
 8013938:	461c      	mov	r4, r3
 801393a:	bb34      	cbnz	r4, 801398a <_malloc_r+0x82>
 801393c:	4629      	mov	r1, r5
 801393e:	4638      	mov	r0, r7
 8013940:	f7ff ffc2 	bl	80138c8 <sbrk_aligned>
 8013944:	1c43      	adds	r3, r0, #1
 8013946:	4604      	mov	r4, r0
 8013948:	d14d      	bne.n	80139e6 <_malloc_r+0xde>
 801394a:	6834      	ldr	r4, [r6, #0]
 801394c:	4626      	mov	r6, r4
 801394e:	2e00      	cmp	r6, #0
 8013950:	d140      	bne.n	80139d4 <_malloc_r+0xcc>
 8013952:	6823      	ldr	r3, [r4, #0]
 8013954:	4631      	mov	r1, r6
 8013956:	4638      	mov	r0, r7
 8013958:	eb04 0803 	add.w	r8, r4, r3
 801395c:	f000 fc92 	bl	8014284 <_sbrk_r>
 8013960:	4580      	cmp	r8, r0
 8013962:	d13a      	bne.n	80139da <_malloc_r+0xd2>
 8013964:	6821      	ldr	r1, [r4, #0]
 8013966:	3503      	adds	r5, #3
 8013968:	1a6d      	subs	r5, r5, r1
 801396a:	f025 0503 	bic.w	r5, r5, #3
 801396e:	3508      	adds	r5, #8
 8013970:	2d0c      	cmp	r5, #12
 8013972:	bf38      	it	cc
 8013974:	250c      	movcc	r5, #12
 8013976:	4629      	mov	r1, r5
 8013978:	4638      	mov	r0, r7
 801397a:	f7ff ffa5 	bl	80138c8 <sbrk_aligned>
 801397e:	3001      	adds	r0, #1
 8013980:	d02b      	beq.n	80139da <_malloc_r+0xd2>
 8013982:	6823      	ldr	r3, [r4, #0]
 8013984:	442b      	add	r3, r5
 8013986:	6023      	str	r3, [r4, #0]
 8013988:	e00e      	b.n	80139a8 <_malloc_r+0xa0>
 801398a:	6822      	ldr	r2, [r4, #0]
 801398c:	1b52      	subs	r2, r2, r5
 801398e:	d41e      	bmi.n	80139ce <_malloc_r+0xc6>
 8013990:	2a0b      	cmp	r2, #11
 8013992:	d916      	bls.n	80139c2 <_malloc_r+0xba>
 8013994:	1961      	adds	r1, r4, r5
 8013996:	42a3      	cmp	r3, r4
 8013998:	6025      	str	r5, [r4, #0]
 801399a:	bf18      	it	ne
 801399c:	6059      	strne	r1, [r3, #4]
 801399e:	6863      	ldr	r3, [r4, #4]
 80139a0:	bf08      	it	eq
 80139a2:	6031      	streq	r1, [r6, #0]
 80139a4:	5162      	str	r2, [r4, r5]
 80139a6:	604b      	str	r3, [r1, #4]
 80139a8:	4638      	mov	r0, r7
 80139aa:	f104 060b 	add.w	r6, r4, #11
 80139ae:	f000 fee7 	bl	8014780 <__malloc_unlock>
 80139b2:	f026 0607 	bic.w	r6, r6, #7
 80139b6:	1d23      	adds	r3, r4, #4
 80139b8:	1af2      	subs	r2, r6, r3
 80139ba:	d0b6      	beq.n	801392a <_malloc_r+0x22>
 80139bc:	1b9b      	subs	r3, r3, r6
 80139be:	50a3      	str	r3, [r4, r2]
 80139c0:	e7b3      	b.n	801392a <_malloc_r+0x22>
 80139c2:	6862      	ldr	r2, [r4, #4]
 80139c4:	42a3      	cmp	r3, r4
 80139c6:	bf0c      	ite	eq
 80139c8:	6032      	streq	r2, [r6, #0]
 80139ca:	605a      	strne	r2, [r3, #4]
 80139cc:	e7ec      	b.n	80139a8 <_malloc_r+0xa0>
 80139ce:	4623      	mov	r3, r4
 80139d0:	6864      	ldr	r4, [r4, #4]
 80139d2:	e7b2      	b.n	801393a <_malloc_r+0x32>
 80139d4:	4634      	mov	r4, r6
 80139d6:	6876      	ldr	r6, [r6, #4]
 80139d8:	e7b9      	b.n	801394e <_malloc_r+0x46>
 80139da:	230c      	movs	r3, #12
 80139dc:	603b      	str	r3, [r7, #0]
 80139de:	4638      	mov	r0, r7
 80139e0:	f000 fece 	bl	8014780 <__malloc_unlock>
 80139e4:	e7a1      	b.n	801392a <_malloc_r+0x22>
 80139e6:	6025      	str	r5, [r4, #0]
 80139e8:	e7de      	b.n	80139a8 <_malloc_r+0xa0>
 80139ea:	bf00      	nop
 80139ec:	20009014 	.word	0x20009014

080139f0 <__ssputs_r>:
 80139f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139f4:	688e      	ldr	r6, [r1, #8]
 80139f6:	429e      	cmp	r6, r3
 80139f8:	4682      	mov	sl, r0
 80139fa:	460c      	mov	r4, r1
 80139fc:	4690      	mov	r8, r2
 80139fe:	461f      	mov	r7, r3
 8013a00:	d838      	bhi.n	8013a74 <__ssputs_r+0x84>
 8013a02:	898a      	ldrh	r2, [r1, #12]
 8013a04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a08:	d032      	beq.n	8013a70 <__ssputs_r+0x80>
 8013a0a:	6825      	ldr	r5, [r4, #0]
 8013a0c:	6909      	ldr	r1, [r1, #16]
 8013a0e:	eba5 0901 	sub.w	r9, r5, r1
 8013a12:	6965      	ldr	r5, [r4, #20]
 8013a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	444b      	add	r3, r9
 8013a20:	106d      	asrs	r5, r5, #1
 8013a22:	429d      	cmp	r5, r3
 8013a24:	bf38      	it	cc
 8013a26:	461d      	movcc	r5, r3
 8013a28:	0553      	lsls	r3, r2, #21
 8013a2a:	d531      	bpl.n	8013a90 <__ssputs_r+0xa0>
 8013a2c:	4629      	mov	r1, r5
 8013a2e:	f7ff ff6b 	bl	8013908 <_malloc_r>
 8013a32:	4606      	mov	r6, r0
 8013a34:	b950      	cbnz	r0, 8013a4c <__ssputs_r+0x5c>
 8013a36:	230c      	movs	r3, #12
 8013a38:	f8ca 3000 	str.w	r3, [sl]
 8013a3c:	89a3      	ldrh	r3, [r4, #12]
 8013a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a42:	81a3      	strh	r3, [r4, #12]
 8013a44:	f04f 30ff 	mov.w	r0, #4294967295
 8013a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a4c:	6921      	ldr	r1, [r4, #16]
 8013a4e:	464a      	mov	r2, r9
 8013a50:	f7ff fd18 	bl	8013484 <memcpy>
 8013a54:	89a3      	ldrh	r3, [r4, #12]
 8013a56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a5e:	81a3      	strh	r3, [r4, #12]
 8013a60:	6126      	str	r6, [r4, #16]
 8013a62:	6165      	str	r5, [r4, #20]
 8013a64:	444e      	add	r6, r9
 8013a66:	eba5 0509 	sub.w	r5, r5, r9
 8013a6a:	6026      	str	r6, [r4, #0]
 8013a6c:	60a5      	str	r5, [r4, #8]
 8013a6e:	463e      	mov	r6, r7
 8013a70:	42be      	cmp	r6, r7
 8013a72:	d900      	bls.n	8013a76 <__ssputs_r+0x86>
 8013a74:	463e      	mov	r6, r7
 8013a76:	6820      	ldr	r0, [r4, #0]
 8013a78:	4632      	mov	r2, r6
 8013a7a:	4641      	mov	r1, r8
 8013a7c:	f7ff fd10 	bl	80134a0 <memmove>
 8013a80:	68a3      	ldr	r3, [r4, #8]
 8013a82:	1b9b      	subs	r3, r3, r6
 8013a84:	60a3      	str	r3, [r4, #8]
 8013a86:	6823      	ldr	r3, [r4, #0]
 8013a88:	4433      	add	r3, r6
 8013a8a:	6023      	str	r3, [r4, #0]
 8013a8c:	2000      	movs	r0, #0
 8013a8e:	e7db      	b.n	8013a48 <__ssputs_r+0x58>
 8013a90:	462a      	mov	r2, r5
 8013a92:	f000 fe7b 	bl	801478c <_realloc_r>
 8013a96:	4606      	mov	r6, r0
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d1e1      	bne.n	8013a60 <__ssputs_r+0x70>
 8013a9c:	6921      	ldr	r1, [r4, #16]
 8013a9e:	4650      	mov	r0, sl
 8013aa0:	f7ff fec6 	bl	8013830 <_free_r>
 8013aa4:	e7c7      	b.n	8013a36 <__ssputs_r+0x46>
	...

08013aa8 <_svfiprintf_r>:
 8013aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aac:	4698      	mov	r8, r3
 8013aae:	898b      	ldrh	r3, [r1, #12]
 8013ab0:	061b      	lsls	r3, r3, #24
 8013ab2:	b09d      	sub	sp, #116	; 0x74
 8013ab4:	4607      	mov	r7, r0
 8013ab6:	460d      	mov	r5, r1
 8013ab8:	4614      	mov	r4, r2
 8013aba:	d50e      	bpl.n	8013ada <_svfiprintf_r+0x32>
 8013abc:	690b      	ldr	r3, [r1, #16]
 8013abe:	b963      	cbnz	r3, 8013ada <_svfiprintf_r+0x32>
 8013ac0:	2140      	movs	r1, #64	; 0x40
 8013ac2:	f7ff ff21 	bl	8013908 <_malloc_r>
 8013ac6:	6028      	str	r0, [r5, #0]
 8013ac8:	6128      	str	r0, [r5, #16]
 8013aca:	b920      	cbnz	r0, 8013ad6 <_svfiprintf_r+0x2e>
 8013acc:	230c      	movs	r3, #12
 8013ace:	603b      	str	r3, [r7, #0]
 8013ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ad4:	e0d1      	b.n	8013c7a <_svfiprintf_r+0x1d2>
 8013ad6:	2340      	movs	r3, #64	; 0x40
 8013ad8:	616b      	str	r3, [r5, #20]
 8013ada:	2300      	movs	r3, #0
 8013adc:	9309      	str	r3, [sp, #36]	; 0x24
 8013ade:	2320      	movs	r3, #32
 8013ae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ae8:	2330      	movs	r3, #48	; 0x30
 8013aea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013c94 <_svfiprintf_r+0x1ec>
 8013aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013af2:	f04f 0901 	mov.w	r9, #1
 8013af6:	4623      	mov	r3, r4
 8013af8:	469a      	mov	sl, r3
 8013afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013afe:	b10a      	cbz	r2, 8013b04 <_svfiprintf_r+0x5c>
 8013b00:	2a25      	cmp	r2, #37	; 0x25
 8013b02:	d1f9      	bne.n	8013af8 <_svfiprintf_r+0x50>
 8013b04:	ebba 0b04 	subs.w	fp, sl, r4
 8013b08:	d00b      	beq.n	8013b22 <_svfiprintf_r+0x7a>
 8013b0a:	465b      	mov	r3, fp
 8013b0c:	4622      	mov	r2, r4
 8013b0e:	4629      	mov	r1, r5
 8013b10:	4638      	mov	r0, r7
 8013b12:	f7ff ff6d 	bl	80139f0 <__ssputs_r>
 8013b16:	3001      	adds	r0, #1
 8013b18:	f000 80aa 	beq.w	8013c70 <_svfiprintf_r+0x1c8>
 8013b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b1e:	445a      	add	r2, fp
 8013b20:	9209      	str	r2, [sp, #36]	; 0x24
 8013b22:	f89a 3000 	ldrb.w	r3, [sl]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	f000 80a2 	beq.w	8013c70 <_svfiprintf_r+0x1c8>
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b36:	f10a 0a01 	add.w	sl, sl, #1
 8013b3a:	9304      	str	r3, [sp, #16]
 8013b3c:	9307      	str	r3, [sp, #28]
 8013b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b42:	931a      	str	r3, [sp, #104]	; 0x68
 8013b44:	4654      	mov	r4, sl
 8013b46:	2205      	movs	r2, #5
 8013b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b4c:	4851      	ldr	r0, [pc, #324]	; (8013c94 <_svfiprintf_r+0x1ec>)
 8013b4e:	f7ec fb4f 	bl	80001f0 <memchr>
 8013b52:	9a04      	ldr	r2, [sp, #16]
 8013b54:	b9d8      	cbnz	r0, 8013b8e <_svfiprintf_r+0xe6>
 8013b56:	06d0      	lsls	r0, r2, #27
 8013b58:	bf44      	itt	mi
 8013b5a:	2320      	movmi	r3, #32
 8013b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b60:	0711      	lsls	r1, r2, #28
 8013b62:	bf44      	itt	mi
 8013b64:	232b      	movmi	r3, #43	; 0x2b
 8013b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8013b70:	d015      	beq.n	8013b9e <_svfiprintf_r+0xf6>
 8013b72:	9a07      	ldr	r2, [sp, #28]
 8013b74:	4654      	mov	r4, sl
 8013b76:	2000      	movs	r0, #0
 8013b78:	f04f 0c0a 	mov.w	ip, #10
 8013b7c:	4621      	mov	r1, r4
 8013b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b82:	3b30      	subs	r3, #48	; 0x30
 8013b84:	2b09      	cmp	r3, #9
 8013b86:	d94e      	bls.n	8013c26 <_svfiprintf_r+0x17e>
 8013b88:	b1b0      	cbz	r0, 8013bb8 <_svfiprintf_r+0x110>
 8013b8a:	9207      	str	r2, [sp, #28]
 8013b8c:	e014      	b.n	8013bb8 <_svfiprintf_r+0x110>
 8013b8e:	eba0 0308 	sub.w	r3, r0, r8
 8013b92:	fa09 f303 	lsl.w	r3, r9, r3
 8013b96:	4313      	orrs	r3, r2
 8013b98:	9304      	str	r3, [sp, #16]
 8013b9a:	46a2      	mov	sl, r4
 8013b9c:	e7d2      	b.n	8013b44 <_svfiprintf_r+0x9c>
 8013b9e:	9b03      	ldr	r3, [sp, #12]
 8013ba0:	1d19      	adds	r1, r3, #4
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	9103      	str	r1, [sp, #12]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	bfbb      	ittet	lt
 8013baa:	425b      	neglt	r3, r3
 8013bac:	f042 0202 	orrlt.w	r2, r2, #2
 8013bb0:	9307      	strge	r3, [sp, #28]
 8013bb2:	9307      	strlt	r3, [sp, #28]
 8013bb4:	bfb8      	it	lt
 8013bb6:	9204      	strlt	r2, [sp, #16]
 8013bb8:	7823      	ldrb	r3, [r4, #0]
 8013bba:	2b2e      	cmp	r3, #46	; 0x2e
 8013bbc:	d10c      	bne.n	8013bd8 <_svfiprintf_r+0x130>
 8013bbe:	7863      	ldrb	r3, [r4, #1]
 8013bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8013bc2:	d135      	bne.n	8013c30 <_svfiprintf_r+0x188>
 8013bc4:	9b03      	ldr	r3, [sp, #12]
 8013bc6:	1d1a      	adds	r2, r3, #4
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	9203      	str	r2, [sp, #12]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	bfb8      	it	lt
 8013bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8013bd4:	3402      	adds	r4, #2
 8013bd6:	9305      	str	r3, [sp, #20]
 8013bd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013ca4 <_svfiprintf_r+0x1fc>
 8013bdc:	7821      	ldrb	r1, [r4, #0]
 8013bde:	2203      	movs	r2, #3
 8013be0:	4650      	mov	r0, sl
 8013be2:	f7ec fb05 	bl	80001f0 <memchr>
 8013be6:	b140      	cbz	r0, 8013bfa <_svfiprintf_r+0x152>
 8013be8:	2340      	movs	r3, #64	; 0x40
 8013bea:	eba0 000a 	sub.w	r0, r0, sl
 8013bee:	fa03 f000 	lsl.w	r0, r3, r0
 8013bf2:	9b04      	ldr	r3, [sp, #16]
 8013bf4:	4303      	orrs	r3, r0
 8013bf6:	3401      	adds	r4, #1
 8013bf8:	9304      	str	r3, [sp, #16]
 8013bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bfe:	4826      	ldr	r0, [pc, #152]	; (8013c98 <_svfiprintf_r+0x1f0>)
 8013c00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c04:	2206      	movs	r2, #6
 8013c06:	f7ec faf3 	bl	80001f0 <memchr>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d038      	beq.n	8013c80 <_svfiprintf_r+0x1d8>
 8013c0e:	4b23      	ldr	r3, [pc, #140]	; (8013c9c <_svfiprintf_r+0x1f4>)
 8013c10:	bb1b      	cbnz	r3, 8013c5a <_svfiprintf_r+0x1b2>
 8013c12:	9b03      	ldr	r3, [sp, #12]
 8013c14:	3307      	adds	r3, #7
 8013c16:	f023 0307 	bic.w	r3, r3, #7
 8013c1a:	3308      	adds	r3, #8
 8013c1c:	9303      	str	r3, [sp, #12]
 8013c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c20:	4433      	add	r3, r6
 8013c22:	9309      	str	r3, [sp, #36]	; 0x24
 8013c24:	e767      	b.n	8013af6 <_svfiprintf_r+0x4e>
 8013c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c2a:	460c      	mov	r4, r1
 8013c2c:	2001      	movs	r0, #1
 8013c2e:	e7a5      	b.n	8013b7c <_svfiprintf_r+0xd4>
 8013c30:	2300      	movs	r3, #0
 8013c32:	3401      	adds	r4, #1
 8013c34:	9305      	str	r3, [sp, #20]
 8013c36:	4619      	mov	r1, r3
 8013c38:	f04f 0c0a 	mov.w	ip, #10
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c42:	3a30      	subs	r2, #48	; 0x30
 8013c44:	2a09      	cmp	r2, #9
 8013c46:	d903      	bls.n	8013c50 <_svfiprintf_r+0x1a8>
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d0c5      	beq.n	8013bd8 <_svfiprintf_r+0x130>
 8013c4c:	9105      	str	r1, [sp, #20]
 8013c4e:	e7c3      	b.n	8013bd8 <_svfiprintf_r+0x130>
 8013c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c54:	4604      	mov	r4, r0
 8013c56:	2301      	movs	r3, #1
 8013c58:	e7f0      	b.n	8013c3c <_svfiprintf_r+0x194>
 8013c5a:	ab03      	add	r3, sp, #12
 8013c5c:	9300      	str	r3, [sp, #0]
 8013c5e:	462a      	mov	r2, r5
 8013c60:	4b0f      	ldr	r3, [pc, #60]	; (8013ca0 <_svfiprintf_r+0x1f8>)
 8013c62:	a904      	add	r1, sp, #16
 8013c64:	4638      	mov	r0, r7
 8013c66:	f3af 8000 	nop.w
 8013c6a:	1c42      	adds	r2, r0, #1
 8013c6c:	4606      	mov	r6, r0
 8013c6e:	d1d6      	bne.n	8013c1e <_svfiprintf_r+0x176>
 8013c70:	89ab      	ldrh	r3, [r5, #12]
 8013c72:	065b      	lsls	r3, r3, #25
 8013c74:	f53f af2c 	bmi.w	8013ad0 <_svfiprintf_r+0x28>
 8013c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c7a:	b01d      	add	sp, #116	; 0x74
 8013c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c80:	ab03      	add	r3, sp, #12
 8013c82:	9300      	str	r3, [sp, #0]
 8013c84:	462a      	mov	r2, r5
 8013c86:	4b06      	ldr	r3, [pc, #24]	; (8013ca0 <_svfiprintf_r+0x1f8>)
 8013c88:	a904      	add	r1, sp, #16
 8013c8a:	4638      	mov	r0, r7
 8013c8c:	f000 f9d4 	bl	8014038 <_printf_i>
 8013c90:	e7eb      	b.n	8013c6a <_svfiprintf_r+0x1c2>
 8013c92:	bf00      	nop
 8013c94:	08017528 	.word	0x08017528
 8013c98:	08017532 	.word	0x08017532
 8013c9c:	00000000 	.word	0x00000000
 8013ca0:	080139f1 	.word	0x080139f1
 8013ca4:	0801752e 	.word	0x0801752e

08013ca8 <__sfputc_r>:
 8013ca8:	6893      	ldr	r3, [r2, #8]
 8013caa:	3b01      	subs	r3, #1
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	b410      	push	{r4}
 8013cb0:	6093      	str	r3, [r2, #8]
 8013cb2:	da08      	bge.n	8013cc6 <__sfputc_r+0x1e>
 8013cb4:	6994      	ldr	r4, [r2, #24]
 8013cb6:	42a3      	cmp	r3, r4
 8013cb8:	db01      	blt.n	8013cbe <__sfputc_r+0x16>
 8013cba:	290a      	cmp	r1, #10
 8013cbc:	d103      	bne.n	8013cc6 <__sfputc_r+0x1e>
 8013cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cc2:	f000 bb33 	b.w	801432c <__swbuf_r>
 8013cc6:	6813      	ldr	r3, [r2, #0]
 8013cc8:	1c58      	adds	r0, r3, #1
 8013cca:	6010      	str	r0, [r2, #0]
 8013ccc:	7019      	strb	r1, [r3, #0]
 8013cce:	4608      	mov	r0, r1
 8013cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cd4:	4770      	bx	lr

08013cd6 <__sfputs_r>:
 8013cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cd8:	4606      	mov	r6, r0
 8013cda:	460f      	mov	r7, r1
 8013cdc:	4614      	mov	r4, r2
 8013cde:	18d5      	adds	r5, r2, r3
 8013ce0:	42ac      	cmp	r4, r5
 8013ce2:	d101      	bne.n	8013ce8 <__sfputs_r+0x12>
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	e007      	b.n	8013cf8 <__sfputs_r+0x22>
 8013ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cec:	463a      	mov	r2, r7
 8013cee:	4630      	mov	r0, r6
 8013cf0:	f7ff ffda 	bl	8013ca8 <__sfputc_r>
 8013cf4:	1c43      	adds	r3, r0, #1
 8013cf6:	d1f3      	bne.n	8013ce0 <__sfputs_r+0xa>
 8013cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013cfc <_vfiprintf_r>:
 8013cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d00:	460d      	mov	r5, r1
 8013d02:	b09d      	sub	sp, #116	; 0x74
 8013d04:	4614      	mov	r4, r2
 8013d06:	4698      	mov	r8, r3
 8013d08:	4606      	mov	r6, r0
 8013d0a:	b118      	cbz	r0, 8013d14 <_vfiprintf_r+0x18>
 8013d0c:	6983      	ldr	r3, [r0, #24]
 8013d0e:	b90b      	cbnz	r3, 8013d14 <_vfiprintf_r+0x18>
 8013d10:	f7ff fcd4 	bl	80136bc <__sinit>
 8013d14:	4b89      	ldr	r3, [pc, #548]	; (8013f3c <_vfiprintf_r+0x240>)
 8013d16:	429d      	cmp	r5, r3
 8013d18:	d11b      	bne.n	8013d52 <_vfiprintf_r+0x56>
 8013d1a:	6875      	ldr	r5, [r6, #4]
 8013d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d1e:	07d9      	lsls	r1, r3, #31
 8013d20:	d405      	bmi.n	8013d2e <_vfiprintf_r+0x32>
 8013d22:	89ab      	ldrh	r3, [r5, #12]
 8013d24:	059a      	lsls	r2, r3, #22
 8013d26:	d402      	bmi.n	8013d2e <_vfiprintf_r+0x32>
 8013d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d2a:	f7ff fd77 	bl	801381c <__retarget_lock_acquire_recursive>
 8013d2e:	89ab      	ldrh	r3, [r5, #12]
 8013d30:	071b      	lsls	r3, r3, #28
 8013d32:	d501      	bpl.n	8013d38 <_vfiprintf_r+0x3c>
 8013d34:	692b      	ldr	r3, [r5, #16]
 8013d36:	b9eb      	cbnz	r3, 8013d74 <_vfiprintf_r+0x78>
 8013d38:	4629      	mov	r1, r5
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	f000 fb5a 	bl	80143f4 <__swsetup_r>
 8013d40:	b1c0      	cbz	r0, 8013d74 <_vfiprintf_r+0x78>
 8013d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d44:	07dc      	lsls	r4, r3, #31
 8013d46:	d50e      	bpl.n	8013d66 <_vfiprintf_r+0x6a>
 8013d48:	f04f 30ff 	mov.w	r0, #4294967295
 8013d4c:	b01d      	add	sp, #116	; 0x74
 8013d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d52:	4b7b      	ldr	r3, [pc, #492]	; (8013f40 <_vfiprintf_r+0x244>)
 8013d54:	429d      	cmp	r5, r3
 8013d56:	d101      	bne.n	8013d5c <_vfiprintf_r+0x60>
 8013d58:	68b5      	ldr	r5, [r6, #8]
 8013d5a:	e7df      	b.n	8013d1c <_vfiprintf_r+0x20>
 8013d5c:	4b79      	ldr	r3, [pc, #484]	; (8013f44 <_vfiprintf_r+0x248>)
 8013d5e:	429d      	cmp	r5, r3
 8013d60:	bf08      	it	eq
 8013d62:	68f5      	ldreq	r5, [r6, #12]
 8013d64:	e7da      	b.n	8013d1c <_vfiprintf_r+0x20>
 8013d66:	89ab      	ldrh	r3, [r5, #12]
 8013d68:	0598      	lsls	r0, r3, #22
 8013d6a:	d4ed      	bmi.n	8013d48 <_vfiprintf_r+0x4c>
 8013d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d6e:	f7ff fd56 	bl	801381e <__retarget_lock_release_recursive>
 8013d72:	e7e9      	b.n	8013d48 <_vfiprintf_r+0x4c>
 8013d74:	2300      	movs	r3, #0
 8013d76:	9309      	str	r3, [sp, #36]	; 0x24
 8013d78:	2320      	movs	r3, #32
 8013d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d82:	2330      	movs	r3, #48	; 0x30
 8013d84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013f48 <_vfiprintf_r+0x24c>
 8013d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d8c:	f04f 0901 	mov.w	r9, #1
 8013d90:	4623      	mov	r3, r4
 8013d92:	469a      	mov	sl, r3
 8013d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d98:	b10a      	cbz	r2, 8013d9e <_vfiprintf_r+0xa2>
 8013d9a:	2a25      	cmp	r2, #37	; 0x25
 8013d9c:	d1f9      	bne.n	8013d92 <_vfiprintf_r+0x96>
 8013d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8013da2:	d00b      	beq.n	8013dbc <_vfiprintf_r+0xc0>
 8013da4:	465b      	mov	r3, fp
 8013da6:	4622      	mov	r2, r4
 8013da8:	4629      	mov	r1, r5
 8013daa:	4630      	mov	r0, r6
 8013dac:	f7ff ff93 	bl	8013cd6 <__sfputs_r>
 8013db0:	3001      	adds	r0, #1
 8013db2:	f000 80aa 	beq.w	8013f0a <_vfiprintf_r+0x20e>
 8013db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013db8:	445a      	add	r2, fp
 8013dba:	9209      	str	r2, [sp, #36]	; 0x24
 8013dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	f000 80a2 	beq.w	8013f0a <_vfiprintf_r+0x20e>
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8013dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dd0:	f10a 0a01 	add.w	sl, sl, #1
 8013dd4:	9304      	str	r3, [sp, #16]
 8013dd6:	9307      	str	r3, [sp, #28]
 8013dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8013dde:	4654      	mov	r4, sl
 8013de0:	2205      	movs	r2, #5
 8013de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013de6:	4858      	ldr	r0, [pc, #352]	; (8013f48 <_vfiprintf_r+0x24c>)
 8013de8:	f7ec fa02 	bl	80001f0 <memchr>
 8013dec:	9a04      	ldr	r2, [sp, #16]
 8013dee:	b9d8      	cbnz	r0, 8013e28 <_vfiprintf_r+0x12c>
 8013df0:	06d1      	lsls	r1, r2, #27
 8013df2:	bf44      	itt	mi
 8013df4:	2320      	movmi	r3, #32
 8013df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013dfa:	0713      	lsls	r3, r2, #28
 8013dfc:	bf44      	itt	mi
 8013dfe:	232b      	movmi	r3, #43	; 0x2b
 8013e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e04:	f89a 3000 	ldrb.w	r3, [sl]
 8013e08:	2b2a      	cmp	r3, #42	; 0x2a
 8013e0a:	d015      	beq.n	8013e38 <_vfiprintf_r+0x13c>
 8013e0c:	9a07      	ldr	r2, [sp, #28]
 8013e0e:	4654      	mov	r4, sl
 8013e10:	2000      	movs	r0, #0
 8013e12:	f04f 0c0a 	mov.w	ip, #10
 8013e16:	4621      	mov	r1, r4
 8013e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e1c:	3b30      	subs	r3, #48	; 0x30
 8013e1e:	2b09      	cmp	r3, #9
 8013e20:	d94e      	bls.n	8013ec0 <_vfiprintf_r+0x1c4>
 8013e22:	b1b0      	cbz	r0, 8013e52 <_vfiprintf_r+0x156>
 8013e24:	9207      	str	r2, [sp, #28]
 8013e26:	e014      	b.n	8013e52 <_vfiprintf_r+0x156>
 8013e28:	eba0 0308 	sub.w	r3, r0, r8
 8013e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8013e30:	4313      	orrs	r3, r2
 8013e32:	9304      	str	r3, [sp, #16]
 8013e34:	46a2      	mov	sl, r4
 8013e36:	e7d2      	b.n	8013dde <_vfiprintf_r+0xe2>
 8013e38:	9b03      	ldr	r3, [sp, #12]
 8013e3a:	1d19      	adds	r1, r3, #4
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	9103      	str	r1, [sp, #12]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	bfbb      	ittet	lt
 8013e44:	425b      	neglt	r3, r3
 8013e46:	f042 0202 	orrlt.w	r2, r2, #2
 8013e4a:	9307      	strge	r3, [sp, #28]
 8013e4c:	9307      	strlt	r3, [sp, #28]
 8013e4e:	bfb8      	it	lt
 8013e50:	9204      	strlt	r2, [sp, #16]
 8013e52:	7823      	ldrb	r3, [r4, #0]
 8013e54:	2b2e      	cmp	r3, #46	; 0x2e
 8013e56:	d10c      	bne.n	8013e72 <_vfiprintf_r+0x176>
 8013e58:	7863      	ldrb	r3, [r4, #1]
 8013e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8013e5c:	d135      	bne.n	8013eca <_vfiprintf_r+0x1ce>
 8013e5e:	9b03      	ldr	r3, [sp, #12]
 8013e60:	1d1a      	adds	r2, r3, #4
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	9203      	str	r2, [sp, #12]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	bfb8      	it	lt
 8013e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e6e:	3402      	adds	r4, #2
 8013e70:	9305      	str	r3, [sp, #20]
 8013e72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013f58 <_vfiprintf_r+0x25c>
 8013e76:	7821      	ldrb	r1, [r4, #0]
 8013e78:	2203      	movs	r2, #3
 8013e7a:	4650      	mov	r0, sl
 8013e7c:	f7ec f9b8 	bl	80001f0 <memchr>
 8013e80:	b140      	cbz	r0, 8013e94 <_vfiprintf_r+0x198>
 8013e82:	2340      	movs	r3, #64	; 0x40
 8013e84:	eba0 000a 	sub.w	r0, r0, sl
 8013e88:	fa03 f000 	lsl.w	r0, r3, r0
 8013e8c:	9b04      	ldr	r3, [sp, #16]
 8013e8e:	4303      	orrs	r3, r0
 8013e90:	3401      	adds	r4, #1
 8013e92:	9304      	str	r3, [sp, #16]
 8013e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e98:	482c      	ldr	r0, [pc, #176]	; (8013f4c <_vfiprintf_r+0x250>)
 8013e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e9e:	2206      	movs	r2, #6
 8013ea0:	f7ec f9a6 	bl	80001f0 <memchr>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d03f      	beq.n	8013f28 <_vfiprintf_r+0x22c>
 8013ea8:	4b29      	ldr	r3, [pc, #164]	; (8013f50 <_vfiprintf_r+0x254>)
 8013eaa:	bb1b      	cbnz	r3, 8013ef4 <_vfiprintf_r+0x1f8>
 8013eac:	9b03      	ldr	r3, [sp, #12]
 8013eae:	3307      	adds	r3, #7
 8013eb0:	f023 0307 	bic.w	r3, r3, #7
 8013eb4:	3308      	adds	r3, #8
 8013eb6:	9303      	str	r3, [sp, #12]
 8013eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eba:	443b      	add	r3, r7
 8013ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8013ebe:	e767      	b.n	8013d90 <_vfiprintf_r+0x94>
 8013ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ec4:	460c      	mov	r4, r1
 8013ec6:	2001      	movs	r0, #1
 8013ec8:	e7a5      	b.n	8013e16 <_vfiprintf_r+0x11a>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	3401      	adds	r4, #1
 8013ece:	9305      	str	r3, [sp, #20]
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	f04f 0c0a 	mov.w	ip, #10
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013edc:	3a30      	subs	r2, #48	; 0x30
 8013ede:	2a09      	cmp	r2, #9
 8013ee0:	d903      	bls.n	8013eea <_vfiprintf_r+0x1ee>
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d0c5      	beq.n	8013e72 <_vfiprintf_r+0x176>
 8013ee6:	9105      	str	r1, [sp, #20]
 8013ee8:	e7c3      	b.n	8013e72 <_vfiprintf_r+0x176>
 8013eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8013eee:	4604      	mov	r4, r0
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	e7f0      	b.n	8013ed6 <_vfiprintf_r+0x1da>
 8013ef4:	ab03      	add	r3, sp, #12
 8013ef6:	9300      	str	r3, [sp, #0]
 8013ef8:	462a      	mov	r2, r5
 8013efa:	4b16      	ldr	r3, [pc, #88]	; (8013f54 <_vfiprintf_r+0x258>)
 8013efc:	a904      	add	r1, sp, #16
 8013efe:	4630      	mov	r0, r6
 8013f00:	f3af 8000 	nop.w
 8013f04:	4607      	mov	r7, r0
 8013f06:	1c78      	adds	r0, r7, #1
 8013f08:	d1d6      	bne.n	8013eb8 <_vfiprintf_r+0x1bc>
 8013f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f0c:	07d9      	lsls	r1, r3, #31
 8013f0e:	d405      	bmi.n	8013f1c <_vfiprintf_r+0x220>
 8013f10:	89ab      	ldrh	r3, [r5, #12]
 8013f12:	059a      	lsls	r2, r3, #22
 8013f14:	d402      	bmi.n	8013f1c <_vfiprintf_r+0x220>
 8013f16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f18:	f7ff fc81 	bl	801381e <__retarget_lock_release_recursive>
 8013f1c:	89ab      	ldrh	r3, [r5, #12]
 8013f1e:	065b      	lsls	r3, r3, #25
 8013f20:	f53f af12 	bmi.w	8013d48 <_vfiprintf_r+0x4c>
 8013f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f26:	e711      	b.n	8013d4c <_vfiprintf_r+0x50>
 8013f28:	ab03      	add	r3, sp, #12
 8013f2a:	9300      	str	r3, [sp, #0]
 8013f2c:	462a      	mov	r2, r5
 8013f2e:	4b09      	ldr	r3, [pc, #36]	; (8013f54 <_vfiprintf_r+0x258>)
 8013f30:	a904      	add	r1, sp, #16
 8013f32:	4630      	mov	r0, r6
 8013f34:	f000 f880 	bl	8014038 <_printf_i>
 8013f38:	e7e4      	b.n	8013f04 <_vfiprintf_r+0x208>
 8013f3a:	bf00      	nop
 8013f3c:	080174e8 	.word	0x080174e8
 8013f40:	08017508 	.word	0x08017508
 8013f44:	080174c8 	.word	0x080174c8
 8013f48:	08017528 	.word	0x08017528
 8013f4c:	08017532 	.word	0x08017532
 8013f50:	00000000 	.word	0x00000000
 8013f54:	08013cd7 	.word	0x08013cd7
 8013f58:	0801752e 	.word	0x0801752e

08013f5c <_printf_common>:
 8013f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f60:	4616      	mov	r6, r2
 8013f62:	4699      	mov	r9, r3
 8013f64:	688a      	ldr	r2, [r1, #8]
 8013f66:	690b      	ldr	r3, [r1, #16]
 8013f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f6c:	4293      	cmp	r3, r2
 8013f6e:	bfb8      	it	lt
 8013f70:	4613      	movlt	r3, r2
 8013f72:	6033      	str	r3, [r6, #0]
 8013f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f78:	4607      	mov	r7, r0
 8013f7a:	460c      	mov	r4, r1
 8013f7c:	b10a      	cbz	r2, 8013f82 <_printf_common+0x26>
 8013f7e:	3301      	adds	r3, #1
 8013f80:	6033      	str	r3, [r6, #0]
 8013f82:	6823      	ldr	r3, [r4, #0]
 8013f84:	0699      	lsls	r1, r3, #26
 8013f86:	bf42      	ittt	mi
 8013f88:	6833      	ldrmi	r3, [r6, #0]
 8013f8a:	3302      	addmi	r3, #2
 8013f8c:	6033      	strmi	r3, [r6, #0]
 8013f8e:	6825      	ldr	r5, [r4, #0]
 8013f90:	f015 0506 	ands.w	r5, r5, #6
 8013f94:	d106      	bne.n	8013fa4 <_printf_common+0x48>
 8013f96:	f104 0a19 	add.w	sl, r4, #25
 8013f9a:	68e3      	ldr	r3, [r4, #12]
 8013f9c:	6832      	ldr	r2, [r6, #0]
 8013f9e:	1a9b      	subs	r3, r3, r2
 8013fa0:	42ab      	cmp	r3, r5
 8013fa2:	dc26      	bgt.n	8013ff2 <_printf_common+0x96>
 8013fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013fa8:	1e13      	subs	r3, r2, #0
 8013faa:	6822      	ldr	r2, [r4, #0]
 8013fac:	bf18      	it	ne
 8013fae:	2301      	movne	r3, #1
 8013fb0:	0692      	lsls	r2, r2, #26
 8013fb2:	d42b      	bmi.n	801400c <_printf_common+0xb0>
 8013fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013fb8:	4649      	mov	r1, r9
 8013fba:	4638      	mov	r0, r7
 8013fbc:	47c0      	blx	r8
 8013fbe:	3001      	adds	r0, #1
 8013fc0:	d01e      	beq.n	8014000 <_printf_common+0xa4>
 8013fc2:	6823      	ldr	r3, [r4, #0]
 8013fc4:	68e5      	ldr	r5, [r4, #12]
 8013fc6:	6832      	ldr	r2, [r6, #0]
 8013fc8:	f003 0306 	and.w	r3, r3, #6
 8013fcc:	2b04      	cmp	r3, #4
 8013fce:	bf08      	it	eq
 8013fd0:	1aad      	subeq	r5, r5, r2
 8013fd2:	68a3      	ldr	r3, [r4, #8]
 8013fd4:	6922      	ldr	r2, [r4, #16]
 8013fd6:	bf0c      	ite	eq
 8013fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013fdc:	2500      	movne	r5, #0
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	bfc4      	itt	gt
 8013fe2:	1a9b      	subgt	r3, r3, r2
 8013fe4:	18ed      	addgt	r5, r5, r3
 8013fe6:	2600      	movs	r6, #0
 8013fe8:	341a      	adds	r4, #26
 8013fea:	42b5      	cmp	r5, r6
 8013fec:	d11a      	bne.n	8014024 <_printf_common+0xc8>
 8013fee:	2000      	movs	r0, #0
 8013ff0:	e008      	b.n	8014004 <_printf_common+0xa8>
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	4652      	mov	r2, sl
 8013ff6:	4649      	mov	r1, r9
 8013ff8:	4638      	mov	r0, r7
 8013ffa:	47c0      	blx	r8
 8013ffc:	3001      	adds	r0, #1
 8013ffe:	d103      	bne.n	8014008 <_printf_common+0xac>
 8014000:	f04f 30ff 	mov.w	r0, #4294967295
 8014004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014008:	3501      	adds	r5, #1
 801400a:	e7c6      	b.n	8013f9a <_printf_common+0x3e>
 801400c:	18e1      	adds	r1, r4, r3
 801400e:	1c5a      	adds	r2, r3, #1
 8014010:	2030      	movs	r0, #48	; 0x30
 8014012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014016:	4422      	add	r2, r4
 8014018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801401c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014020:	3302      	adds	r3, #2
 8014022:	e7c7      	b.n	8013fb4 <_printf_common+0x58>
 8014024:	2301      	movs	r3, #1
 8014026:	4622      	mov	r2, r4
 8014028:	4649      	mov	r1, r9
 801402a:	4638      	mov	r0, r7
 801402c:	47c0      	blx	r8
 801402e:	3001      	adds	r0, #1
 8014030:	d0e6      	beq.n	8014000 <_printf_common+0xa4>
 8014032:	3601      	adds	r6, #1
 8014034:	e7d9      	b.n	8013fea <_printf_common+0x8e>
	...

08014038 <_printf_i>:
 8014038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801403c:	7e0f      	ldrb	r7, [r1, #24]
 801403e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014040:	2f78      	cmp	r7, #120	; 0x78
 8014042:	4691      	mov	r9, r2
 8014044:	4680      	mov	r8, r0
 8014046:	460c      	mov	r4, r1
 8014048:	469a      	mov	sl, r3
 801404a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801404e:	d807      	bhi.n	8014060 <_printf_i+0x28>
 8014050:	2f62      	cmp	r7, #98	; 0x62
 8014052:	d80a      	bhi.n	801406a <_printf_i+0x32>
 8014054:	2f00      	cmp	r7, #0
 8014056:	f000 80d8 	beq.w	801420a <_printf_i+0x1d2>
 801405a:	2f58      	cmp	r7, #88	; 0x58
 801405c:	f000 80a3 	beq.w	80141a6 <_printf_i+0x16e>
 8014060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014068:	e03a      	b.n	80140e0 <_printf_i+0xa8>
 801406a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801406e:	2b15      	cmp	r3, #21
 8014070:	d8f6      	bhi.n	8014060 <_printf_i+0x28>
 8014072:	a101      	add	r1, pc, #4	; (adr r1, 8014078 <_printf_i+0x40>)
 8014074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014078:	080140d1 	.word	0x080140d1
 801407c:	080140e5 	.word	0x080140e5
 8014080:	08014061 	.word	0x08014061
 8014084:	08014061 	.word	0x08014061
 8014088:	08014061 	.word	0x08014061
 801408c:	08014061 	.word	0x08014061
 8014090:	080140e5 	.word	0x080140e5
 8014094:	08014061 	.word	0x08014061
 8014098:	08014061 	.word	0x08014061
 801409c:	08014061 	.word	0x08014061
 80140a0:	08014061 	.word	0x08014061
 80140a4:	080141f1 	.word	0x080141f1
 80140a8:	08014115 	.word	0x08014115
 80140ac:	080141d3 	.word	0x080141d3
 80140b0:	08014061 	.word	0x08014061
 80140b4:	08014061 	.word	0x08014061
 80140b8:	08014213 	.word	0x08014213
 80140bc:	08014061 	.word	0x08014061
 80140c0:	08014115 	.word	0x08014115
 80140c4:	08014061 	.word	0x08014061
 80140c8:	08014061 	.word	0x08014061
 80140cc:	080141db 	.word	0x080141db
 80140d0:	682b      	ldr	r3, [r5, #0]
 80140d2:	1d1a      	adds	r2, r3, #4
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	602a      	str	r2, [r5, #0]
 80140d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140e0:	2301      	movs	r3, #1
 80140e2:	e0a3      	b.n	801422c <_printf_i+0x1f4>
 80140e4:	6820      	ldr	r0, [r4, #0]
 80140e6:	6829      	ldr	r1, [r5, #0]
 80140e8:	0606      	lsls	r6, r0, #24
 80140ea:	f101 0304 	add.w	r3, r1, #4
 80140ee:	d50a      	bpl.n	8014106 <_printf_i+0xce>
 80140f0:	680e      	ldr	r6, [r1, #0]
 80140f2:	602b      	str	r3, [r5, #0]
 80140f4:	2e00      	cmp	r6, #0
 80140f6:	da03      	bge.n	8014100 <_printf_i+0xc8>
 80140f8:	232d      	movs	r3, #45	; 0x2d
 80140fa:	4276      	negs	r6, r6
 80140fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014100:	485e      	ldr	r0, [pc, #376]	; (801427c <_printf_i+0x244>)
 8014102:	230a      	movs	r3, #10
 8014104:	e019      	b.n	801413a <_printf_i+0x102>
 8014106:	680e      	ldr	r6, [r1, #0]
 8014108:	602b      	str	r3, [r5, #0]
 801410a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801410e:	bf18      	it	ne
 8014110:	b236      	sxthne	r6, r6
 8014112:	e7ef      	b.n	80140f4 <_printf_i+0xbc>
 8014114:	682b      	ldr	r3, [r5, #0]
 8014116:	6820      	ldr	r0, [r4, #0]
 8014118:	1d19      	adds	r1, r3, #4
 801411a:	6029      	str	r1, [r5, #0]
 801411c:	0601      	lsls	r1, r0, #24
 801411e:	d501      	bpl.n	8014124 <_printf_i+0xec>
 8014120:	681e      	ldr	r6, [r3, #0]
 8014122:	e002      	b.n	801412a <_printf_i+0xf2>
 8014124:	0646      	lsls	r6, r0, #25
 8014126:	d5fb      	bpl.n	8014120 <_printf_i+0xe8>
 8014128:	881e      	ldrh	r6, [r3, #0]
 801412a:	4854      	ldr	r0, [pc, #336]	; (801427c <_printf_i+0x244>)
 801412c:	2f6f      	cmp	r7, #111	; 0x6f
 801412e:	bf0c      	ite	eq
 8014130:	2308      	moveq	r3, #8
 8014132:	230a      	movne	r3, #10
 8014134:	2100      	movs	r1, #0
 8014136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801413a:	6865      	ldr	r5, [r4, #4]
 801413c:	60a5      	str	r5, [r4, #8]
 801413e:	2d00      	cmp	r5, #0
 8014140:	bfa2      	ittt	ge
 8014142:	6821      	ldrge	r1, [r4, #0]
 8014144:	f021 0104 	bicge.w	r1, r1, #4
 8014148:	6021      	strge	r1, [r4, #0]
 801414a:	b90e      	cbnz	r6, 8014150 <_printf_i+0x118>
 801414c:	2d00      	cmp	r5, #0
 801414e:	d04d      	beq.n	80141ec <_printf_i+0x1b4>
 8014150:	4615      	mov	r5, r2
 8014152:	fbb6 f1f3 	udiv	r1, r6, r3
 8014156:	fb03 6711 	mls	r7, r3, r1, r6
 801415a:	5dc7      	ldrb	r7, [r0, r7]
 801415c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014160:	4637      	mov	r7, r6
 8014162:	42bb      	cmp	r3, r7
 8014164:	460e      	mov	r6, r1
 8014166:	d9f4      	bls.n	8014152 <_printf_i+0x11a>
 8014168:	2b08      	cmp	r3, #8
 801416a:	d10b      	bne.n	8014184 <_printf_i+0x14c>
 801416c:	6823      	ldr	r3, [r4, #0]
 801416e:	07de      	lsls	r6, r3, #31
 8014170:	d508      	bpl.n	8014184 <_printf_i+0x14c>
 8014172:	6923      	ldr	r3, [r4, #16]
 8014174:	6861      	ldr	r1, [r4, #4]
 8014176:	4299      	cmp	r1, r3
 8014178:	bfde      	ittt	le
 801417a:	2330      	movle	r3, #48	; 0x30
 801417c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014180:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014184:	1b52      	subs	r2, r2, r5
 8014186:	6122      	str	r2, [r4, #16]
 8014188:	f8cd a000 	str.w	sl, [sp]
 801418c:	464b      	mov	r3, r9
 801418e:	aa03      	add	r2, sp, #12
 8014190:	4621      	mov	r1, r4
 8014192:	4640      	mov	r0, r8
 8014194:	f7ff fee2 	bl	8013f5c <_printf_common>
 8014198:	3001      	adds	r0, #1
 801419a:	d14c      	bne.n	8014236 <_printf_i+0x1fe>
 801419c:	f04f 30ff 	mov.w	r0, #4294967295
 80141a0:	b004      	add	sp, #16
 80141a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141a6:	4835      	ldr	r0, [pc, #212]	; (801427c <_printf_i+0x244>)
 80141a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80141ac:	6829      	ldr	r1, [r5, #0]
 80141ae:	6823      	ldr	r3, [r4, #0]
 80141b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80141b4:	6029      	str	r1, [r5, #0]
 80141b6:	061d      	lsls	r5, r3, #24
 80141b8:	d514      	bpl.n	80141e4 <_printf_i+0x1ac>
 80141ba:	07df      	lsls	r7, r3, #31
 80141bc:	bf44      	itt	mi
 80141be:	f043 0320 	orrmi.w	r3, r3, #32
 80141c2:	6023      	strmi	r3, [r4, #0]
 80141c4:	b91e      	cbnz	r6, 80141ce <_printf_i+0x196>
 80141c6:	6823      	ldr	r3, [r4, #0]
 80141c8:	f023 0320 	bic.w	r3, r3, #32
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	2310      	movs	r3, #16
 80141d0:	e7b0      	b.n	8014134 <_printf_i+0xfc>
 80141d2:	6823      	ldr	r3, [r4, #0]
 80141d4:	f043 0320 	orr.w	r3, r3, #32
 80141d8:	6023      	str	r3, [r4, #0]
 80141da:	2378      	movs	r3, #120	; 0x78
 80141dc:	4828      	ldr	r0, [pc, #160]	; (8014280 <_printf_i+0x248>)
 80141de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80141e2:	e7e3      	b.n	80141ac <_printf_i+0x174>
 80141e4:	0659      	lsls	r1, r3, #25
 80141e6:	bf48      	it	mi
 80141e8:	b2b6      	uxthmi	r6, r6
 80141ea:	e7e6      	b.n	80141ba <_printf_i+0x182>
 80141ec:	4615      	mov	r5, r2
 80141ee:	e7bb      	b.n	8014168 <_printf_i+0x130>
 80141f0:	682b      	ldr	r3, [r5, #0]
 80141f2:	6826      	ldr	r6, [r4, #0]
 80141f4:	6961      	ldr	r1, [r4, #20]
 80141f6:	1d18      	adds	r0, r3, #4
 80141f8:	6028      	str	r0, [r5, #0]
 80141fa:	0635      	lsls	r5, r6, #24
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	d501      	bpl.n	8014204 <_printf_i+0x1cc>
 8014200:	6019      	str	r1, [r3, #0]
 8014202:	e002      	b.n	801420a <_printf_i+0x1d2>
 8014204:	0670      	lsls	r0, r6, #25
 8014206:	d5fb      	bpl.n	8014200 <_printf_i+0x1c8>
 8014208:	8019      	strh	r1, [r3, #0]
 801420a:	2300      	movs	r3, #0
 801420c:	6123      	str	r3, [r4, #16]
 801420e:	4615      	mov	r5, r2
 8014210:	e7ba      	b.n	8014188 <_printf_i+0x150>
 8014212:	682b      	ldr	r3, [r5, #0]
 8014214:	1d1a      	adds	r2, r3, #4
 8014216:	602a      	str	r2, [r5, #0]
 8014218:	681d      	ldr	r5, [r3, #0]
 801421a:	6862      	ldr	r2, [r4, #4]
 801421c:	2100      	movs	r1, #0
 801421e:	4628      	mov	r0, r5
 8014220:	f7eb ffe6 	bl	80001f0 <memchr>
 8014224:	b108      	cbz	r0, 801422a <_printf_i+0x1f2>
 8014226:	1b40      	subs	r0, r0, r5
 8014228:	6060      	str	r0, [r4, #4]
 801422a:	6863      	ldr	r3, [r4, #4]
 801422c:	6123      	str	r3, [r4, #16]
 801422e:	2300      	movs	r3, #0
 8014230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014234:	e7a8      	b.n	8014188 <_printf_i+0x150>
 8014236:	6923      	ldr	r3, [r4, #16]
 8014238:	462a      	mov	r2, r5
 801423a:	4649      	mov	r1, r9
 801423c:	4640      	mov	r0, r8
 801423e:	47d0      	blx	sl
 8014240:	3001      	adds	r0, #1
 8014242:	d0ab      	beq.n	801419c <_printf_i+0x164>
 8014244:	6823      	ldr	r3, [r4, #0]
 8014246:	079b      	lsls	r3, r3, #30
 8014248:	d413      	bmi.n	8014272 <_printf_i+0x23a>
 801424a:	68e0      	ldr	r0, [r4, #12]
 801424c:	9b03      	ldr	r3, [sp, #12]
 801424e:	4298      	cmp	r0, r3
 8014250:	bfb8      	it	lt
 8014252:	4618      	movlt	r0, r3
 8014254:	e7a4      	b.n	80141a0 <_printf_i+0x168>
 8014256:	2301      	movs	r3, #1
 8014258:	4632      	mov	r2, r6
 801425a:	4649      	mov	r1, r9
 801425c:	4640      	mov	r0, r8
 801425e:	47d0      	blx	sl
 8014260:	3001      	adds	r0, #1
 8014262:	d09b      	beq.n	801419c <_printf_i+0x164>
 8014264:	3501      	adds	r5, #1
 8014266:	68e3      	ldr	r3, [r4, #12]
 8014268:	9903      	ldr	r1, [sp, #12]
 801426a:	1a5b      	subs	r3, r3, r1
 801426c:	42ab      	cmp	r3, r5
 801426e:	dcf2      	bgt.n	8014256 <_printf_i+0x21e>
 8014270:	e7eb      	b.n	801424a <_printf_i+0x212>
 8014272:	2500      	movs	r5, #0
 8014274:	f104 0619 	add.w	r6, r4, #25
 8014278:	e7f5      	b.n	8014266 <_printf_i+0x22e>
 801427a:	bf00      	nop
 801427c:	08017539 	.word	0x08017539
 8014280:	0801754a 	.word	0x0801754a

08014284 <_sbrk_r>:
 8014284:	b538      	push	{r3, r4, r5, lr}
 8014286:	4d06      	ldr	r5, [pc, #24]	; (80142a0 <_sbrk_r+0x1c>)
 8014288:	2300      	movs	r3, #0
 801428a:	4604      	mov	r4, r0
 801428c:	4608      	mov	r0, r1
 801428e:	602b      	str	r3, [r5, #0]
 8014290:	f7ed fa7a 	bl	8001788 <_sbrk>
 8014294:	1c43      	adds	r3, r0, #1
 8014296:	d102      	bne.n	801429e <_sbrk_r+0x1a>
 8014298:	682b      	ldr	r3, [r5, #0]
 801429a:	b103      	cbz	r3, 801429e <_sbrk_r+0x1a>
 801429c:	6023      	str	r3, [r4, #0]
 801429e:	bd38      	pop	{r3, r4, r5, pc}
 80142a0:	2000900c 	.word	0x2000900c

080142a4 <__sread>:
 80142a4:	b510      	push	{r4, lr}
 80142a6:	460c      	mov	r4, r1
 80142a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142ac:	f000 fa9e 	bl	80147ec <_read_r>
 80142b0:	2800      	cmp	r0, #0
 80142b2:	bfab      	itete	ge
 80142b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80142b6:	89a3      	ldrhlt	r3, [r4, #12]
 80142b8:	181b      	addge	r3, r3, r0
 80142ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80142be:	bfac      	ite	ge
 80142c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80142c2:	81a3      	strhlt	r3, [r4, #12]
 80142c4:	bd10      	pop	{r4, pc}

080142c6 <__swrite>:
 80142c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ca:	461f      	mov	r7, r3
 80142cc:	898b      	ldrh	r3, [r1, #12]
 80142ce:	05db      	lsls	r3, r3, #23
 80142d0:	4605      	mov	r5, r0
 80142d2:	460c      	mov	r4, r1
 80142d4:	4616      	mov	r6, r2
 80142d6:	d505      	bpl.n	80142e4 <__swrite+0x1e>
 80142d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142dc:	2302      	movs	r3, #2
 80142de:	2200      	movs	r2, #0
 80142e0:	f000 f9d0 	bl	8014684 <_lseek_r>
 80142e4:	89a3      	ldrh	r3, [r4, #12]
 80142e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80142ee:	81a3      	strh	r3, [r4, #12]
 80142f0:	4632      	mov	r2, r6
 80142f2:	463b      	mov	r3, r7
 80142f4:	4628      	mov	r0, r5
 80142f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142fa:	f000 b869 	b.w	80143d0 <_write_r>

080142fe <__sseek>:
 80142fe:	b510      	push	{r4, lr}
 8014300:	460c      	mov	r4, r1
 8014302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014306:	f000 f9bd 	bl	8014684 <_lseek_r>
 801430a:	1c43      	adds	r3, r0, #1
 801430c:	89a3      	ldrh	r3, [r4, #12]
 801430e:	bf15      	itete	ne
 8014310:	6560      	strne	r0, [r4, #84]	; 0x54
 8014312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801431a:	81a3      	strheq	r3, [r4, #12]
 801431c:	bf18      	it	ne
 801431e:	81a3      	strhne	r3, [r4, #12]
 8014320:	bd10      	pop	{r4, pc}

08014322 <__sclose>:
 8014322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014326:	f000 b8db 	b.w	80144e0 <_close_r>
	...

0801432c <__swbuf_r>:
 801432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432e:	460e      	mov	r6, r1
 8014330:	4614      	mov	r4, r2
 8014332:	4605      	mov	r5, r0
 8014334:	b118      	cbz	r0, 801433e <__swbuf_r+0x12>
 8014336:	6983      	ldr	r3, [r0, #24]
 8014338:	b90b      	cbnz	r3, 801433e <__swbuf_r+0x12>
 801433a:	f7ff f9bf 	bl	80136bc <__sinit>
 801433e:	4b21      	ldr	r3, [pc, #132]	; (80143c4 <__swbuf_r+0x98>)
 8014340:	429c      	cmp	r4, r3
 8014342:	d12b      	bne.n	801439c <__swbuf_r+0x70>
 8014344:	686c      	ldr	r4, [r5, #4]
 8014346:	69a3      	ldr	r3, [r4, #24]
 8014348:	60a3      	str	r3, [r4, #8]
 801434a:	89a3      	ldrh	r3, [r4, #12]
 801434c:	071a      	lsls	r2, r3, #28
 801434e:	d52f      	bpl.n	80143b0 <__swbuf_r+0x84>
 8014350:	6923      	ldr	r3, [r4, #16]
 8014352:	b36b      	cbz	r3, 80143b0 <__swbuf_r+0x84>
 8014354:	6923      	ldr	r3, [r4, #16]
 8014356:	6820      	ldr	r0, [r4, #0]
 8014358:	1ac0      	subs	r0, r0, r3
 801435a:	6963      	ldr	r3, [r4, #20]
 801435c:	b2f6      	uxtb	r6, r6
 801435e:	4283      	cmp	r3, r0
 8014360:	4637      	mov	r7, r6
 8014362:	dc04      	bgt.n	801436e <__swbuf_r+0x42>
 8014364:	4621      	mov	r1, r4
 8014366:	4628      	mov	r0, r5
 8014368:	f000 f950 	bl	801460c <_fflush_r>
 801436c:	bb30      	cbnz	r0, 80143bc <__swbuf_r+0x90>
 801436e:	68a3      	ldr	r3, [r4, #8]
 8014370:	3b01      	subs	r3, #1
 8014372:	60a3      	str	r3, [r4, #8]
 8014374:	6823      	ldr	r3, [r4, #0]
 8014376:	1c5a      	adds	r2, r3, #1
 8014378:	6022      	str	r2, [r4, #0]
 801437a:	701e      	strb	r6, [r3, #0]
 801437c:	6963      	ldr	r3, [r4, #20]
 801437e:	3001      	adds	r0, #1
 8014380:	4283      	cmp	r3, r0
 8014382:	d004      	beq.n	801438e <__swbuf_r+0x62>
 8014384:	89a3      	ldrh	r3, [r4, #12]
 8014386:	07db      	lsls	r3, r3, #31
 8014388:	d506      	bpl.n	8014398 <__swbuf_r+0x6c>
 801438a:	2e0a      	cmp	r6, #10
 801438c:	d104      	bne.n	8014398 <__swbuf_r+0x6c>
 801438e:	4621      	mov	r1, r4
 8014390:	4628      	mov	r0, r5
 8014392:	f000 f93b 	bl	801460c <_fflush_r>
 8014396:	b988      	cbnz	r0, 80143bc <__swbuf_r+0x90>
 8014398:	4638      	mov	r0, r7
 801439a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801439c:	4b0a      	ldr	r3, [pc, #40]	; (80143c8 <__swbuf_r+0x9c>)
 801439e:	429c      	cmp	r4, r3
 80143a0:	d101      	bne.n	80143a6 <__swbuf_r+0x7a>
 80143a2:	68ac      	ldr	r4, [r5, #8]
 80143a4:	e7cf      	b.n	8014346 <__swbuf_r+0x1a>
 80143a6:	4b09      	ldr	r3, [pc, #36]	; (80143cc <__swbuf_r+0xa0>)
 80143a8:	429c      	cmp	r4, r3
 80143aa:	bf08      	it	eq
 80143ac:	68ec      	ldreq	r4, [r5, #12]
 80143ae:	e7ca      	b.n	8014346 <__swbuf_r+0x1a>
 80143b0:	4621      	mov	r1, r4
 80143b2:	4628      	mov	r0, r5
 80143b4:	f000 f81e 	bl	80143f4 <__swsetup_r>
 80143b8:	2800      	cmp	r0, #0
 80143ba:	d0cb      	beq.n	8014354 <__swbuf_r+0x28>
 80143bc:	f04f 37ff 	mov.w	r7, #4294967295
 80143c0:	e7ea      	b.n	8014398 <__swbuf_r+0x6c>
 80143c2:	bf00      	nop
 80143c4:	080174e8 	.word	0x080174e8
 80143c8:	08017508 	.word	0x08017508
 80143cc:	080174c8 	.word	0x080174c8

080143d0 <_write_r>:
 80143d0:	b538      	push	{r3, r4, r5, lr}
 80143d2:	4d07      	ldr	r5, [pc, #28]	; (80143f0 <_write_r+0x20>)
 80143d4:	4604      	mov	r4, r0
 80143d6:	4608      	mov	r0, r1
 80143d8:	4611      	mov	r1, r2
 80143da:	2200      	movs	r2, #0
 80143dc:	602a      	str	r2, [r5, #0]
 80143de:	461a      	mov	r2, r3
 80143e0:	f7ed f981 	bl	80016e6 <_write>
 80143e4:	1c43      	adds	r3, r0, #1
 80143e6:	d102      	bne.n	80143ee <_write_r+0x1e>
 80143e8:	682b      	ldr	r3, [r5, #0]
 80143ea:	b103      	cbz	r3, 80143ee <_write_r+0x1e>
 80143ec:	6023      	str	r3, [r4, #0]
 80143ee:	bd38      	pop	{r3, r4, r5, pc}
 80143f0:	2000900c 	.word	0x2000900c

080143f4 <__swsetup_r>:
 80143f4:	4b32      	ldr	r3, [pc, #200]	; (80144c0 <__swsetup_r+0xcc>)
 80143f6:	b570      	push	{r4, r5, r6, lr}
 80143f8:	681d      	ldr	r5, [r3, #0]
 80143fa:	4606      	mov	r6, r0
 80143fc:	460c      	mov	r4, r1
 80143fe:	b125      	cbz	r5, 801440a <__swsetup_r+0x16>
 8014400:	69ab      	ldr	r3, [r5, #24]
 8014402:	b913      	cbnz	r3, 801440a <__swsetup_r+0x16>
 8014404:	4628      	mov	r0, r5
 8014406:	f7ff f959 	bl	80136bc <__sinit>
 801440a:	4b2e      	ldr	r3, [pc, #184]	; (80144c4 <__swsetup_r+0xd0>)
 801440c:	429c      	cmp	r4, r3
 801440e:	d10f      	bne.n	8014430 <__swsetup_r+0x3c>
 8014410:	686c      	ldr	r4, [r5, #4]
 8014412:	89a3      	ldrh	r3, [r4, #12]
 8014414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014418:	0719      	lsls	r1, r3, #28
 801441a:	d42c      	bmi.n	8014476 <__swsetup_r+0x82>
 801441c:	06dd      	lsls	r5, r3, #27
 801441e:	d411      	bmi.n	8014444 <__swsetup_r+0x50>
 8014420:	2309      	movs	r3, #9
 8014422:	6033      	str	r3, [r6, #0]
 8014424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014428:	81a3      	strh	r3, [r4, #12]
 801442a:	f04f 30ff 	mov.w	r0, #4294967295
 801442e:	e03e      	b.n	80144ae <__swsetup_r+0xba>
 8014430:	4b25      	ldr	r3, [pc, #148]	; (80144c8 <__swsetup_r+0xd4>)
 8014432:	429c      	cmp	r4, r3
 8014434:	d101      	bne.n	801443a <__swsetup_r+0x46>
 8014436:	68ac      	ldr	r4, [r5, #8]
 8014438:	e7eb      	b.n	8014412 <__swsetup_r+0x1e>
 801443a:	4b24      	ldr	r3, [pc, #144]	; (80144cc <__swsetup_r+0xd8>)
 801443c:	429c      	cmp	r4, r3
 801443e:	bf08      	it	eq
 8014440:	68ec      	ldreq	r4, [r5, #12]
 8014442:	e7e6      	b.n	8014412 <__swsetup_r+0x1e>
 8014444:	0758      	lsls	r0, r3, #29
 8014446:	d512      	bpl.n	801446e <__swsetup_r+0x7a>
 8014448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801444a:	b141      	cbz	r1, 801445e <__swsetup_r+0x6a>
 801444c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014450:	4299      	cmp	r1, r3
 8014452:	d002      	beq.n	801445a <__swsetup_r+0x66>
 8014454:	4630      	mov	r0, r6
 8014456:	f7ff f9eb 	bl	8013830 <_free_r>
 801445a:	2300      	movs	r3, #0
 801445c:	6363      	str	r3, [r4, #52]	; 0x34
 801445e:	89a3      	ldrh	r3, [r4, #12]
 8014460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014464:	81a3      	strh	r3, [r4, #12]
 8014466:	2300      	movs	r3, #0
 8014468:	6063      	str	r3, [r4, #4]
 801446a:	6923      	ldr	r3, [r4, #16]
 801446c:	6023      	str	r3, [r4, #0]
 801446e:	89a3      	ldrh	r3, [r4, #12]
 8014470:	f043 0308 	orr.w	r3, r3, #8
 8014474:	81a3      	strh	r3, [r4, #12]
 8014476:	6923      	ldr	r3, [r4, #16]
 8014478:	b94b      	cbnz	r3, 801448e <__swsetup_r+0x9a>
 801447a:	89a3      	ldrh	r3, [r4, #12]
 801447c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014484:	d003      	beq.n	801448e <__swsetup_r+0x9a>
 8014486:	4621      	mov	r1, r4
 8014488:	4630      	mov	r0, r6
 801448a:	f000 f933 	bl	80146f4 <__smakebuf_r>
 801448e:	89a0      	ldrh	r0, [r4, #12]
 8014490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014494:	f010 0301 	ands.w	r3, r0, #1
 8014498:	d00a      	beq.n	80144b0 <__swsetup_r+0xbc>
 801449a:	2300      	movs	r3, #0
 801449c:	60a3      	str	r3, [r4, #8]
 801449e:	6963      	ldr	r3, [r4, #20]
 80144a0:	425b      	negs	r3, r3
 80144a2:	61a3      	str	r3, [r4, #24]
 80144a4:	6923      	ldr	r3, [r4, #16]
 80144a6:	b943      	cbnz	r3, 80144ba <__swsetup_r+0xc6>
 80144a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80144ac:	d1ba      	bne.n	8014424 <__swsetup_r+0x30>
 80144ae:	bd70      	pop	{r4, r5, r6, pc}
 80144b0:	0781      	lsls	r1, r0, #30
 80144b2:	bf58      	it	pl
 80144b4:	6963      	ldrpl	r3, [r4, #20]
 80144b6:	60a3      	str	r3, [r4, #8]
 80144b8:	e7f4      	b.n	80144a4 <__swsetup_r+0xb0>
 80144ba:	2000      	movs	r0, #0
 80144bc:	e7f7      	b.n	80144ae <__swsetup_r+0xba>
 80144be:	bf00      	nop
 80144c0:	20000018 	.word	0x20000018
 80144c4:	080174e8 	.word	0x080174e8
 80144c8:	08017508 	.word	0x08017508
 80144cc:	080174c8 	.word	0x080174c8

080144d0 <abort>:
 80144d0:	b508      	push	{r3, lr}
 80144d2:	2006      	movs	r0, #6
 80144d4:	f000 f9c4 	bl	8014860 <raise>
 80144d8:	2001      	movs	r0, #1
 80144da:	f7ed f8dd 	bl	8001698 <_exit>
	...

080144e0 <_close_r>:
 80144e0:	b538      	push	{r3, r4, r5, lr}
 80144e2:	4d06      	ldr	r5, [pc, #24]	; (80144fc <_close_r+0x1c>)
 80144e4:	2300      	movs	r3, #0
 80144e6:	4604      	mov	r4, r0
 80144e8:	4608      	mov	r0, r1
 80144ea:	602b      	str	r3, [r5, #0]
 80144ec:	f7ed f917 	bl	800171e <_close>
 80144f0:	1c43      	adds	r3, r0, #1
 80144f2:	d102      	bne.n	80144fa <_close_r+0x1a>
 80144f4:	682b      	ldr	r3, [r5, #0]
 80144f6:	b103      	cbz	r3, 80144fa <_close_r+0x1a>
 80144f8:	6023      	str	r3, [r4, #0]
 80144fa:	bd38      	pop	{r3, r4, r5, pc}
 80144fc:	2000900c 	.word	0x2000900c

08014500 <__sflush_r>:
 8014500:	898a      	ldrh	r2, [r1, #12]
 8014502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014506:	4605      	mov	r5, r0
 8014508:	0710      	lsls	r0, r2, #28
 801450a:	460c      	mov	r4, r1
 801450c:	d458      	bmi.n	80145c0 <__sflush_r+0xc0>
 801450e:	684b      	ldr	r3, [r1, #4]
 8014510:	2b00      	cmp	r3, #0
 8014512:	dc05      	bgt.n	8014520 <__sflush_r+0x20>
 8014514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014516:	2b00      	cmp	r3, #0
 8014518:	dc02      	bgt.n	8014520 <__sflush_r+0x20>
 801451a:	2000      	movs	r0, #0
 801451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014522:	2e00      	cmp	r6, #0
 8014524:	d0f9      	beq.n	801451a <__sflush_r+0x1a>
 8014526:	2300      	movs	r3, #0
 8014528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801452c:	682f      	ldr	r7, [r5, #0]
 801452e:	602b      	str	r3, [r5, #0]
 8014530:	d032      	beq.n	8014598 <__sflush_r+0x98>
 8014532:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014534:	89a3      	ldrh	r3, [r4, #12]
 8014536:	075a      	lsls	r2, r3, #29
 8014538:	d505      	bpl.n	8014546 <__sflush_r+0x46>
 801453a:	6863      	ldr	r3, [r4, #4]
 801453c:	1ac0      	subs	r0, r0, r3
 801453e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014540:	b10b      	cbz	r3, 8014546 <__sflush_r+0x46>
 8014542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014544:	1ac0      	subs	r0, r0, r3
 8014546:	2300      	movs	r3, #0
 8014548:	4602      	mov	r2, r0
 801454a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801454c:	6a21      	ldr	r1, [r4, #32]
 801454e:	4628      	mov	r0, r5
 8014550:	47b0      	blx	r6
 8014552:	1c43      	adds	r3, r0, #1
 8014554:	89a3      	ldrh	r3, [r4, #12]
 8014556:	d106      	bne.n	8014566 <__sflush_r+0x66>
 8014558:	6829      	ldr	r1, [r5, #0]
 801455a:	291d      	cmp	r1, #29
 801455c:	d82c      	bhi.n	80145b8 <__sflush_r+0xb8>
 801455e:	4a2a      	ldr	r2, [pc, #168]	; (8014608 <__sflush_r+0x108>)
 8014560:	40ca      	lsrs	r2, r1
 8014562:	07d6      	lsls	r6, r2, #31
 8014564:	d528      	bpl.n	80145b8 <__sflush_r+0xb8>
 8014566:	2200      	movs	r2, #0
 8014568:	6062      	str	r2, [r4, #4]
 801456a:	04d9      	lsls	r1, r3, #19
 801456c:	6922      	ldr	r2, [r4, #16]
 801456e:	6022      	str	r2, [r4, #0]
 8014570:	d504      	bpl.n	801457c <__sflush_r+0x7c>
 8014572:	1c42      	adds	r2, r0, #1
 8014574:	d101      	bne.n	801457a <__sflush_r+0x7a>
 8014576:	682b      	ldr	r3, [r5, #0]
 8014578:	b903      	cbnz	r3, 801457c <__sflush_r+0x7c>
 801457a:	6560      	str	r0, [r4, #84]	; 0x54
 801457c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801457e:	602f      	str	r7, [r5, #0]
 8014580:	2900      	cmp	r1, #0
 8014582:	d0ca      	beq.n	801451a <__sflush_r+0x1a>
 8014584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014588:	4299      	cmp	r1, r3
 801458a:	d002      	beq.n	8014592 <__sflush_r+0x92>
 801458c:	4628      	mov	r0, r5
 801458e:	f7ff f94f 	bl	8013830 <_free_r>
 8014592:	2000      	movs	r0, #0
 8014594:	6360      	str	r0, [r4, #52]	; 0x34
 8014596:	e7c1      	b.n	801451c <__sflush_r+0x1c>
 8014598:	6a21      	ldr	r1, [r4, #32]
 801459a:	2301      	movs	r3, #1
 801459c:	4628      	mov	r0, r5
 801459e:	47b0      	blx	r6
 80145a0:	1c41      	adds	r1, r0, #1
 80145a2:	d1c7      	bne.n	8014534 <__sflush_r+0x34>
 80145a4:	682b      	ldr	r3, [r5, #0]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d0c4      	beq.n	8014534 <__sflush_r+0x34>
 80145aa:	2b1d      	cmp	r3, #29
 80145ac:	d001      	beq.n	80145b2 <__sflush_r+0xb2>
 80145ae:	2b16      	cmp	r3, #22
 80145b0:	d101      	bne.n	80145b6 <__sflush_r+0xb6>
 80145b2:	602f      	str	r7, [r5, #0]
 80145b4:	e7b1      	b.n	801451a <__sflush_r+0x1a>
 80145b6:	89a3      	ldrh	r3, [r4, #12]
 80145b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145bc:	81a3      	strh	r3, [r4, #12]
 80145be:	e7ad      	b.n	801451c <__sflush_r+0x1c>
 80145c0:	690f      	ldr	r7, [r1, #16]
 80145c2:	2f00      	cmp	r7, #0
 80145c4:	d0a9      	beq.n	801451a <__sflush_r+0x1a>
 80145c6:	0793      	lsls	r3, r2, #30
 80145c8:	680e      	ldr	r6, [r1, #0]
 80145ca:	bf08      	it	eq
 80145cc:	694b      	ldreq	r3, [r1, #20]
 80145ce:	600f      	str	r7, [r1, #0]
 80145d0:	bf18      	it	ne
 80145d2:	2300      	movne	r3, #0
 80145d4:	eba6 0807 	sub.w	r8, r6, r7
 80145d8:	608b      	str	r3, [r1, #8]
 80145da:	f1b8 0f00 	cmp.w	r8, #0
 80145de:	dd9c      	ble.n	801451a <__sflush_r+0x1a>
 80145e0:	6a21      	ldr	r1, [r4, #32]
 80145e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80145e4:	4643      	mov	r3, r8
 80145e6:	463a      	mov	r2, r7
 80145e8:	4628      	mov	r0, r5
 80145ea:	47b0      	blx	r6
 80145ec:	2800      	cmp	r0, #0
 80145ee:	dc06      	bgt.n	80145fe <__sflush_r+0xfe>
 80145f0:	89a3      	ldrh	r3, [r4, #12]
 80145f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145f6:	81a3      	strh	r3, [r4, #12]
 80145f8:	f04f 30ff 	mov.w	r0, #4294967295
 80145fc:	e78e      	b.n	801451c <__sflush_r+0x1c>
 80145fe:	4407      	add	r7, r0
 8014600:	eba8 0800 	sub.w	r8, r8, r0
 8014604:	e7e9      	b.n	80145da <__sflush_r+0xda>
 8014606:	bf00      	nop
 8014608:	20400001 	.word	0x20400001

0801460c <_fflush_r>:
 801460c:	b538      	push	{r3, r4, r5, lr}
 801460e:	690b      	ldr	r3, [r1, #16]
 8014610:	4605      	mov	r5, r0
 8014612:	460c      	mov	r4, r1
 8014614:	b913      	cbnz	r3, 801461c <_fflush_r+0x10>
 8014616:	2500      	movs	r5, #0
 8014618:	4628      	mov	r0, r5
 801461a:	bd38      	pop	{r3, r4, r5, pc}
 801461c:	b118      	cbz	r0, 8014626 <_fflush_r+0x1a>
 801461e:	6983      	ldr	r3, [r0, #24]
 8014620:	b90b      	cbnz	r3, 8014626 <_fflush_r+0x1a>
 8014622:	f7ff f84b 	bl	80136bc <__sinit>
 8014626:	4b14      	ldr	r3, [pc, #80]	; (8014678 <_fflush_r+0x6c>)
 8014628:	429c      	cmp	r4, r3
 801462a:	d11b      	bne.n	8014664 <_fflush_r+0x58>
 801462c:	686c      	ldr	r4, [r5, #4]
 801462e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d0ef      	beq.n	8014616 <_fflush_r+0xa>
 8014636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014638:	07d0      	lsls	r0, r2, #31
 801463a:	d404      	bmi.n	8014646 <_fflush_r+0x3a>
 801463c:	0599      	lsls	r1, r3, #22
 801463e:	d402      	bmi.n	8014646 <_fflush_r+0x3a>
 8014640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014642:	f7ff f8eb 	bl	801381c <__retarget_lock_acquire_recursive>
 8014646:	4628      	mov	r0, r5
 8014648:	4621      	mov	r1, r4
 801464a:	f7ff ff59 	bl	8014500 <__sflush_r>
 801464e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014650:	07da      	lsls	r2, r3, #31
 8014652:	4605      	mov	r5, r0
 8014654:	d4e0      	bmi.n	8014618 <_fflush_r+0xc>
 8014656:	89a3      	ldrh	r3, [r4, #12]
 8014658:	059b      	lsls	r3, r3, #22
 801465a:	d4dd      	bmi.n	8014618 <_fflush_r+0xc>
 801465c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801465e:	f7ff f8de 	bl	801381e <__retarget_lock_release_recursive>
 8014662:	e7d9      	b.n	8014618 <_fflush_r+0xc>
 8014664:	4b05      	ldr	r3, [pc, #20]	; (801467c <_fflush_r+0x70>)
 8014666:	429c      	cmp	r4, r3
 8014668:	d101      	bne.n	801466e <_fflush_r+0x62>
 801466a:	68ac      	ldr	r4, [r5, #8]
 801466c:	e7df      	b.n	801462e <_fflush_r+0x22>
 801466e:	4b04      	ldr	r3, [pc, #16]	; (8014680 <_fflush_r+0x74>)
 8014670:	429c      	cmp	r4, r3
 8014672:	bf08      	it	eq
 8014674:	68ec      	ldreq	r4, [r5, #12]
 8014676:	e7da      	b.n	801462e <_fflush_r+0x22>
 8014678:	080174e8 	.word	0x080174e8
 801467c:	08017508 	.word	0x08017508
 8014680:	080174c8 	.word	0x080174c8

08014684 <_lseek_r>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	4d07      	ldr	r5, [pc, #28]	; (80146a4 <_lseek_r+0x20>)
 8014688:	4604      	mov	r4, r0
 801468a:	4608      	mov	r0, r1
 801468c:	4611      	mov	r1, r2
 801468e:	2200      	movs	r2, #0
 8014690:	602a      	str	r2, [r5, #0]
 8014692:	461a      	mov	r2, r3
 8014694:	f7ed f86a 	bl	800176c <_lseek>
 8014698:	1c43      	adds	r3, r0, #1
 801469a:	d102      	bne.n	80146a2 <_lseek_r+0x1e>
 801469c:	682b      	ldr	r3, [r5, #0]
 801469e:	b103      	cbz	r3, 80146a2 <_lseek_r+0x1e>
 80146a0:	6023      	str	r3, [r4, #0]
 80146a2:	bd38      	pop	{r3, r4, r5, pc}
 80146a4:	2000900c 	.word	0x2000900c

080146a8 <__swhatbuf_r>:
 80146a8:	b570      	push	{r4, r5, r6, lr}
 80146aa:	460e      	mov	r6, r1
 80146ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146b0:	2900      	cmp	r1, #0
 80146b2:	b096      	sub	sp, #88	; 0x58
 80146b4:	4614      	mov	r4, r2
 80146b6:	461d      	mov	r5, r3
 80146b8:	da08      	bge.n	80146cc <__swhatbuf_r+0x24>
 80146ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80146be:	2200      	movs	r2, #0
 80146c0:	602a      	str	r2, [r5, #0]
 80146c2:	061a      	lsls	r2, r3, #24
 80146c4:	d410      	bmi.n	80146e8 <__swhatbuf_r+0x40>
 80146c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146ca:	e00e      	b.n	80146ea <__swhatbuf_r+0x42>
 80146cc:	466a      	mov	r2, sp
 80146ce:	f000 f8e3 	bl	8014898 <_fstat_r>
 80146d2:	2800      	cmp	r0, #0
 80146d4:	dbf1      	blt.n	80146ba <__swhatbuf_r+0x12>
 80146d6:	9a01      	ldr	r2, [sp, #4]
 80146d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80146dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80146e0:	425a      	negs	r2, r3
 80146e2:	415a      	adcs	r2, r3
 80146e4:	602a      	str	r2, [r5, #0]
 80146e6:	e7ee      	b.n	80146c6 <__swhatbuf_r+0x1e>
 80146e8:	2340      	movs	r3, #64	; 0x40
 80146ea:	2000      	movs	r0, #0
 80146ec:	6023      	str	r3, [r4, #0]
 80146ee:	b016      	add	sp, #88	; 0x58
 80146f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080146f4 <__smakebuf_r>:
 80146f4:	898b      	ldrh	r3, [r1, #12]
 80146f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80146f8:	079d      	lsls	r5, r3, #30
 80146fa:	4606      	mov	r6, r0
 80146fc:	460c      	mov	r4, r1
 80146fe:	d507      	bpl.n	8014710 <__smakebuf_r+0x1c>
 8014700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014704:	6023      	str	r3, [r4, #0]
 8014706:	6123      	str	r3, [r4, #16]
 8014708:	2301      	movs	r3, #1
 801470a:	6163      	str	r3, [r4, #20]
 801470c:	b002      	add	sp, #8
 801470e:	bd70      	pop	{r4, r5, r6, pc}
 8014710:	ab01      	add	r3, sp, #4
 8014712:	466a      	mov	r2, sp
 8014714:	f7ff ffc8 	bl	80146a8 <__swhatbuf_r>
 8014718:	9900      	ldr	r1, [sp, #0]
 801471a:	4605      	mov	r5, r0
 801471c:	4630      	mov	r0, r6
 801471e:	f7ff f8f3 	bl	8013908 <_malloc_r>
 8014722:	b948      	cbnz	r0, 8014738 <__smakebuf_r+0x44>
 8014724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014728:	059a      	lsls	r2, r3, #22
 801472a:	d4ef      	bmi.n	801470c <__smakebuf_r+0x18>
 801472c:	f023 0303 	bic.w	r3, r3, #3
 8014730:	f043 0302 	orr.w	r3, r3, #2
 8014734:	81a3      	strh	r3, [r4, #12]
 8014736:	e7e3      	b.n	8014700 <__smakebuf_r+0xc>
 8014738:	4b0d      	ldr	r3, [pc, #52]	; (8014770 <__smakebuf_r+0x7c>)
 801473a:	62b3      	str	r3, [r6, #40]	; 0x28
 801473c:	89a3      	ldrh	r3, [r4, #12]
 801473e:	6020      	str	r0, [r4, #0]
 8014740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014744:	81a3      	strh	r3, [r4, #12]
 8014746:	9b00      	ldr	r3, [sp, #0]
 8014748:	6163      	str	r3, [r4, #20]
 801474a:	9b01      	ldr	r3, [sp, #4]
 801474c:	6120      	str	r0, [r4, #16]
 801474e:	b15b      	cbz	r3, 8014768 <__smakebuf_r+0x74>
 8014750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014754:	4630      	mov	r0, r6
 8014756:	f000 f8b1 	bl	80148bc <_isatty_r>
 801475a:	b128      	cbz	r0, 8014768 <__smakebuf_r+0x74>
 801475c:	89a3      	ldrh	r3, [r4, #12]
 801475e:	f023 0303 	bic.w	r3, r3, #3
 8014762:	f043 0301 	orr.w	r3, r3, #1
 8014766:	81a3      	strh	r3, [r4, #12]
 8014768:	89a0      	ldrh	r0, [r4, #12]
 801476a:	4305      	orrs	r5, r0
 801476c:	81a5      	strh	r5, [r4, #12]
 801476e:	e7cd      	b.n	801470c <__smakebuf_r+0x18>
 8014770:	08013655 	.word	0x08013655

08014774 <__malloc_lock>:
 8014774:	4801      	ldr	r0, [pc, #4]	; (801477c <__malloc_lock+0x8>)
 8014776:	f7ff b851 	b.w	801381c <__retarget_lock_acquire_recursive>
 801477a:	bf00      	nop
 801477c:	20009010 	.word	0x20009010

08014780 <__malloc_unlock>:
 8014780:	4801      	ldr	r0, [pc, #4]	; (8014788 <__malloc_unlock+0x8>)
 8014782:	f7ff b84c 	b.w	801381e <__retarget_lock_release_recursive>
 8014786:	bf00      	nop
 8014788:	20009010 	.word	0x20009010

0801478c <_realloc_r>:
 801478c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014790:	4680      	mov	r8, r0
 8014792:	4614      	mov	r4, r2
 8014794:	460e      	mov	r6, r1
 8014796:	b921      	cbnz	r1, 80147a2 <_realloc_r+0x16>
 8014798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801479c:	4611      	mov	r1, r2
 801479e:	f7ff b8b3 	b.w	8013908 <_malloc_r>
 80147a2:	b92a      	cbnz	r2, 80147b0 <_realloc_r+0x24>
 80147a4:	f7ff f844 	bl	8013830 <_free_r>
 80147a8:	4625      	mov	r5, r4
 80147aa:	4628      	mov	r0, r5
 80147ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147b0:	f000 f894 	bl	80148dc <_malloc_usable_size_r>
 80147b4:	4284      	cmp	r4, r0
 80147b6:	4607      	mov	r7, r0
 80147b8:	d802      	bhi.n	80147c0 <_realloc_r+0x34>
 80147ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80147be:	d812      	bhi.n	80147e6 <_realloc_r+0x5a>
 80147c0:	4621      	mov	r1, r4
 80147c2:	4640      	mov	r0, r8
 80147c4:	f7ff f8a0 	bl	8013908 <_malloc_r>
 80147c8:	4605      	mov	r5, r0
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d0ed      	beq.n	80147aa <_realloc_r+0x1e>
 80147ce:	42bc      	cmp	r4, r7
 80147d0:	4622      	mov	r2, r4
 80147d2:	4631      	mov	r1, r6
 80147d4:	bf28      	it	cs
 80147d6:	463a      	movcs	r2, r7
 80147d8:	f7fe fe54 	bl	8013484 <memcpy>
 80147dc:	4631      	mov	r1, r6
 80147de:	4640      	mov	r0, r8
 80147e0:	f7ff f826 	bl	8013830 <_free_r>
 80147e4:	e7e1      	b.n	80147aa <_realloc_r+0x1e>
 80147e6:	4635      	mov	r5, r6
 80147e8:	e7df      	b.n	80147aa <_realloc_r+0x1e>
	...

080147ec <_read_r>:
 80147ec:	b538      	push	{r3, r4, r5, lr}
 80147ee:	4d07      	ldr	r5, [pc, #28]	; (801480c <_read_r+0x20>)
 80147f0:	4604      	mov	r4, r0
 80147f2:	4608      	mov	r0, r1
 80147f4:	4611      	mov	r1, r2
 80147f6:	2200      	movs	r2, #0
 80147f8:	602a      	str	r2, [r5, #0]
 80147fa:	461a      	mov	r2, r3
 80147fc:	f7ec ff56 	bl	80016ac <_read>
 8014800:	1c43      	adds	r3, r0, #1
 8014802:	d102      	bne.n	801480a <_read_r+0x1e>
 8014804:	682b      	ldr	r3, [r5, #0]
 8014806:	b103      	cbz	r3, 801480a <_read_r+0x1e>
 8014808:	6023      	str	r3, [r4, #0]
 801480a:	bd38      	pop	{r3, r4, r5, pc}
 801480c:	2000900c 	.word	0x2000900c

08014810 <_raise_r>:
 8014810:	291f      	cmp	r1, #31
 8014812:	b538      	push	{r3, r4, r5, lr}
 8014814:	4604      	mov	r4, r0
 8014816:	460d      	mov	r5, r1
 8014818:	d904      	bls.n	8014824 <_raise_r+0x14>
 801481a:	2316      	movs	r3, #22
 801481c:	6003      	str	r3, [r0, #0]
 801481e:	f04f 30ff 	mov.w	r0, #4294967295
 8014822:	bd38      	pop	{r3, r4, r5, pc}
 8014824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014826:	b112      	cbz	r2, 801482e <_raise_r+0x1e>
 8014828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801482c:	b94b      	cbnz	r3, 8014842 <_raise_r+0x32>
 801482e:	4620      	mov	r0, r4
 8014830:	f000 f830 	bl	8014894 <_getpid_r>
 8014834:	462a      	mov	r2, r5
 8014836:	4601      	mov	r1, r0
 8014838:	4620      	mov	r0, r4
 801483a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801483e:	f000 b817 	b.w	8014870 <_kill_r>
 8014842:	2b01      	cmp	r3, #1
 8014844:	d00a      	beq.n	801485c <_raise_r+0x4c>
 8014846:	1c59      	adds	r1, r3, #1
 8014848:	d103      	bne.n	8014852 <_raise_r+0x42>
 801484a:	2316      	movs	r3, #22
 801484c:	6003      	str	r3, [r0, #0]
 801484e:	2001      	movs	r0, #1
 8014850:	e7e7      	b.n	8014822 <_raise_r+0x12>
 8014852:	2400      	movs	r4, #0
 8014854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014858:	4628      	mov	r0, r5
 801485a:	4798      	blx	r3
 801485c:	2000      	movs	r0, #0
 801485e:	e7e0      	b.n	8014822 <_raise_r+0x12>

08014860 <raise>:
 8014860:	4b02      	ldr	r3, [pc, #8]	; (801486c <raise+0xc>)
 8014862:	4601      	mov	r1, r0
 8014864:	6818      	ldr	r0, [r3, #0]
 8014866:	f7ff bfd3 	b.w	8014810 <_raise_r>
 801486a:	bf00      	nop
 801486c:	20000018 	.word	0x20000018

08014870 <_kill_r>:
 8014870:	b538      	push	{r3, r4, r5, lr}
 8014872:	4d07      	ldr	r5, [pc, #28]	; (8014890 <_kill_r+0x20>)
 8014874:	2300      	movs	r3, #0
 8014876:	4604      	mov	r4, r0
 8014878:	4608      	mov	r0, r1
 801487a:	4611      	mov	r1, r2
 801487c:	602b      	str	r3, [r5, #0]
 801487e:	f7ec fef9 	bl	8001674 <_kill>
 8014882:	1c43      	adds	r3, r0, #1
 8014884:	d102      	bne.n	801488c <_kill_r+0x1c>
 8014886:	682b      	ldr	r3, [r5, #0]
 8014888:	b103      	cbz	r3, 801488c <_kill_r+0x1c>
 801488a:	6023      	str	r3, [r4, #0]
 801488c:	bd38      	pop	{r3, r4, r5, pc}
 801488e:	bf00      	nop
 8014890:	2000900c 	.word	0x2000900c

08014894 <_getpid_r>:
 8014894:	f7ec bee6 	b.w	8001664 <_getpid>

08014898 <_fstat_r>:
 8014898:	b538      	push	{r3, r4, r5, lr}
 801489a:	4d07      	ldr	r5, [pc, #28]	; (80148b8 <_fstat_r+0x20>)
 801489c:	2300      	movs	r3, #0
 801489e:	4604      	mov	r4, r0
 80148a0:	4608      	mov	r0, r1
 80148a2:	4611      	mov	r1, r2
 80148a4:	602b      	str	r3, [r5, #0]
 80148a6:	f7ec ff46 	bl	8001736 <_fstat>
 80148aa:	1c43      	adds	r3, r0, #1
 80148ac:	d102      	bne.n	80148b4 <_fstat_r+0x1c>
 80148ae:	682b      	ldr	r3, [r5, #0]
 80148b0:	b103      	cbz	r3, 80148b4 <_fstat_r+0x1c>
 80148b2:	6023      	str	r3, [r4, #0]
 80148b4:	bd38      	pop	{r3, r4, r5, pc}
 80148b6:	bf00      	nop
 80148b8:	2000900c 	.word	0x2000900c

080148bc <_isatty_r>:
 80148bc:	b538      	push	{r3, r4, r5, lr}
 80148be:	4d06      	ldr	r5, [pc, #24]	; (80148d8 <_isatty_r+0x1c>)
 80148c0:	2300      	movs	r3, #0
 80148c2:	4604      	mov	r4, r0
 80148c4:	4608      	mov	r0, r1
 80148c6:	602b      	str	r3, [r5, #0]
 80148c8:	f7ec ff45 	bl	8001756 <_isatty>
 80148cc:	1c43      	adds	r3, r0, #1
 80148ce:	d102      	bne.n	80148d6 <_isatty_r+0x1a>
 80148d0:	682b      	ldr	r3, [r5, #0]
 80148d2:	b103      	cbz	r3, 80148d6 <_isatty_r+0x1a>
 80148d4:	6023      	str	r3, [r4, #0]
 80148d6:	bd38      	pop	{r3, r4, r5, pc}
 80148d8:	2000900c 	.word	0x2000900c

080148dc <_malloc_usable_size_r>:
 80148dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148e0:	1f18      	subs	r0, r3, #4
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	bfbc      	itt	lt
 80148e6:	580b      	ldrlt	r3, [r1, r0]
 80148e8:	18c0      	addlt	r0, r0, r3
 80148ea:	4770      	bx	lr

080148ec <_init>:
 80148ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ee:	bf00      	nop
 80148f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148f2:	bc08      	pop	{r3}
 80148f4:	469e      	mov	lr, r3
 80148f6:	4770      	bx	lr

080148f8 <_fini>:
 80148f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148fa:	bf00      	nop
 80148fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148fe:	bc08      	pop	{r3}
 8014900:	469e      	mov	lr, r3
 8014902:	4770      	bx	lr
