
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fec  08016698  08016698  00026698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019684  08019684  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08019684  08019684  00029684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801968c  0801968c  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801968c  0801968c  0002968c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019690  08019690  00029690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08019694  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00008758  200000a8  200000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008800  20008800  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000290b7  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000614f  00000000  00000000  0005918f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e10  00000000  00000000  0005f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d38  00000000  00000000  000610f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031bbd  00000000  00000000  00062e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fa48  00000000  00000000  000949e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2e35  00000000  00000000  000c442d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b7262  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008668  00000000  00000000  001b72b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016680 	.word	0x08016680

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	08016680 	.word	0x08016680

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SPI_RxCpltCallback>:
static void MX_I2C2_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
int flag = 0;
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  flag = 1;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_SPI_RxCpltCallback+0x1c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000afc 	.word	0x20000afc

080005b4 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	listen = 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_I2C_ListenCpltCallback+0x1c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000a94 	.word	0x20000a94

080005d4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f001 fac2 	bl	8001b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f862 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 fabc 	bl	8000b70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f9da 	bl	80009b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fc:	f000 fa2c 	bl	8000a58 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000600:	f000 f9ac 	bl	800095c <MX_UART4_Init>
  MX_DMA_Init();
 8000604:	f000 fa56 	bl	8000ab4 <MX_DMA_Init>
  MX_LWIP_Init();
 8000608:	f008 fcb2 	bl	8008f70 <MX_LWIP_Init>
  MX_I2C1_Init();
 800060c:	f000 f8be 	bl	800078c <MX_I2C1_Init>
  MX_SPI4_Init();
 8000610:	f000 f96e 	bl	80008f0 <MX_SPI4_Init>
  MX_USART6_UART_Init();
 8000614:	f000 f9f6 	bl	8000a04 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000618:	f000 f8f8 	bl	800080c <MX_I2C2_Init>
  MX_SPI2_Init();
 800061c:	f000 f936 	bl	800088c <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //SPI send and receive
	 if(protocol == 1)
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <main+0xa8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d10a      	bne.n	800063e <main+0x56>
	 {
		 HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)mem, 100);
 8000628:	2264      	movs	r2, #100	; 0x64
 800062a:	491a      	ldr	r1, [pc, #104]	; (8000694 <main+0xac>)
 800062c:	481a      	ldr	r0, [pc, #104]	; (8000698 <main+0xb0>)
 800062e:	f006 fc05 	bl	8006e3c <HAL_SPI_Receive_DMA>
	 	 HAL_SPI_Transmit_DMA(&hspi4, (uint8_t *)send, sizeof(send));
 8000632:	220f      	movs	r2, #15
 8000634:	4919      	ldr	r1, [pc, #100]	; (800069c <main+0xb4>)
 8000636:	481a      	ldr	r0, [pc, #104]	; (80006a0 <main+0xb8>)
 8000638:	f006 fb4a 	bl	8006cd0 <HAL_SPI_Transmit_DMA>
 800063c:	e01a      	b.n	8000674 <main+0x8c>
	 }
	 else if(protocol == 2)
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <main+0xa8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d116      	bne.n	8000674 <main+0x8c>
	 {
		 HAL_I2C_EnableListen_IT(&hi2c2);
 8000646:	4817      	ldr	r0, [pc, #92]	; (80006a4 <main+0xbc>)
 8000648:	f003 fe76 	bl	8004338 <HAL_I2C_EnableListen_IT>
		 HAL_I2C_Master_Transmit_DMA(&hi2c1, 20, send, 1);
 800064c:	2301      	movs	r3, #1
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <main+0xb4>)
 8000650:	2114      	movs	r1, #20
 8000652:	4815      	ldr	r0, [pc, #84]	; (80006a8 <main+0xc0>)
 8000654:	f003 fd40 	bl	80040d8 <HAL_I2C_Master_Transmit_DMA>
		 while(listen)
 8000658:	e008      	b.n	800066c <main+0x84>
		 {
			 listen = 0;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <main+0xc4>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
			 HAL_I2C_Slave_Receive(&hi2c2, mem, 100, 200);
 8000660:	23c8      	movs	r3, #200	; 0xc8
 8000662:	2264      	movs	r2, #100	; 0x64
 8000664:	490b      	ldr	r1, [pc, #44]	; (8000694 <main+0xac>)
 8000666:	480f      	ldr	r0, [pc, #60]	; (80006a4 <main+0xbc>)
 8000668:	f003 fc2c 	bl	8003ec4 <HAL_I2C_Slave_Receive>
		 while(listen)
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <main+0xc4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f2      	bne.n	800065a <main+0x72>
	 }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(flag)
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <main+0xc8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0d1      	beq.n	8000620 <main+0x38>
	 {
		 HAL_UART_Transmit(&huart3, mem, 15, 20);
 800067c:	2314      	movs	r3, #20
 800067e:	220f      	movs	r2, #15
 8000680:	4904      	ldr	r1, [pc, #16]	; (8000694 <main+0xac>)
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0xcc>)
 8000684:	f007 f9ab 	bl	80079de <HAL_UART_Transmit>
		 flag = 0;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <main+0xc8>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
	 if(protocol == 1)
 800068e:	e7c7      	b.n	8000620 <main+0x38>
 8000690:	20000000 	.word	0x20000000
 8000694:	20000a98 	.word	0x20000a98
 8000698:	2000022c 	.word	0x2000022c
 800069c:	20000004 	.word	0x20000004
 80006a0:	20000284 	.word	0x20000284
 80006a4:	20000118 	.word	0x20000118
 80006a8:	200000c4 	.word	0x200000c4
 80006ac:	20000a94 	.word	0x20000a94
 80006b0:	20000afc 	.word	0x20000afc
 80006b4:	20000440 	.word	0x20000440

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f014 ff82 	bl	80155d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <SystemClock_Config+0xd0>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000718:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800072c:	23a8      	movs	r3, #168	; 0xa8
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f005 fda5 	bl	800628c <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 faf0 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2105      	movs	r1, #5
 800076a:	4618      	mov	r0, r3
 800076c:	f006 f806 	bl	800677c <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000776:	f000 fad9 	bl	8000d2c <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_I2C1_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_I2C1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_I2C1_Init+0x74>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_I2C1_Init+0x7c>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_I2C1_Init+0x74>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_I2C1_Init+0x74>)
 80007ca:	f003 fa37 	bl	8003c3c <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 faaa 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <MX_I2C1_Init+0x74>)
 80007dc:	f005 fbbe 	bl	8005f5c <HAL_I2CEx_ConfigAnalogFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007e6:	f000 faa1 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_I2C1_Init+0x74>)
 80007ee:	f005 fbf1 	bl	8005fd4 <HAL_I2CEx_ConfigDigitalFilter>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007f8:	f000 fa98 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000c4 	.word	0x200000c4
 8000804:	40005400 	.word	0x40005400
 8000808:	000186a0 	.word	0x000186a0

0800080c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_I2C2_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <MX_I2C2_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_I2C2_Init+0x74>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <MX_I2C2_Init+0x7c>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 20;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_I2C2_Init+0x74>)
 8000824:	2214      	movs	r2, #20
 8000826:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_I2C2_Init+0x74>)
 800082a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800082e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2C2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_I2C2_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_I2C2_Init+0x74>)
 800084a:	f003 f9f7 	bl	8003c3c <HAL_I2C_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 fa6a 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4809      	ldr	r0, [pc, #36]	; (8000880 <MX_I2C2_Init+0x74>)
 800085c:	f005 fb7e 	bl	8005f5c <HAL_I2CEx_ConfigAnalogFilter>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000866:	f000 fa61 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2C2_Init+0x74>)
 800086e:	f005 fbb1 	bl	8005fd4 <HAL_I2CEx_ConfigDigitalFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000878:	f000 fa58 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000118 	.word	0x20000118
 8000884:	40005800 	.word	0x40005800
 8000888:	000186a0 	.word	0x000186a0

0800088c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_SPI2_Init+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_SPI2_Init+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI2_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI2_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008ce:	220a      	movs	r2, #10
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_SPI2_Init+0x5c>)
 80008d4:	f006 f972 	bl	8006bbc <HAL_SPI_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 fa25 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000022c 	.word	0x2000022c
 80008ec:	40003800 	.word	0x40003800

080008f0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI4_Init+0x64>)
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_SPI4_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI4_Init+0x64>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI4_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI4_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI4_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI4_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI4_Init+0x64>)
 800091c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000920:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI4_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI4_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI4_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI4_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI4_Init+0x64>)
 800093c:	220a      	movs	r2, #10
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI4_Init+0x64>)
 8000942:	f006 f93b 	bl	8006bbc <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800094c:	f000 f9ee 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000284 	.word	0x20000284
 8000958:	40013400 	.word	0x40013400

0800095c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_UART4_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_UART4_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_UART4_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_UART4_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_UART4_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_UART4_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_UART4_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_UART4_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_UART4_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_UART4_Init+0x4c>)
 8000994:	f006 ffd6 	bl	8007944 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f9c5 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200003fc 	.word	0x200003fc
 80009ac:	40004c00 	.word	0x40004c00

080009b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_USART3_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART3_UART_Init+0x4c>)
 80009e8:	f006 ffac 	bl	8007944 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009f2:	f000 f99b 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000440 	.word	0x20000440
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_USART6_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART6_UART_Init+0x4c>)
 8000a3c:	f006 ff82 	bl	8007944 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f000 f971 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000484 	.word	0x20000484
 8000a54:	40011400 	.word	0x40011400

08000a58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2204      	movs	r2, #4
 8000a68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9c:	f005 fad9 	bl	8006052 <HAL_PCD_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f941 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000588 	.word	0x20000588

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <MX_DMA_Init+0xb8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <MX_DMA_Init+0xb8>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_DMA_Init+0xb8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_DMA_Init+0xb8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <MX_DMA_Init+0xb8>)
 8000ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_DMA_Init+0xb8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	200d      	movs	r0, #13
 8000af8:	f001 f9ad 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000afc:	200d      	movs	r0, #13
 8000afe:	f001 f9c6 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	200e      	movs	r0, #14
 8000b08:	f001 f9a5 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b0c:	200e      	movs	r0, #14
 8000b0e:	f001 f9be 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	200f      	movs	r0, #15
 8000b18:	f001 f99d 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	f001 f9b6 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	202f      	movs	r0, #47	; 0x2f
 8000b28:	f001 f995 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000b2c:	202f      	movs	r0, #47	; 0x2f
 8000b2e:	f001 f9ae 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2038      	movs	r0, #56	; 0x38
 8000b38:	f001 f98d 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b3c:	2038      	movs	r0, #56	; 0x38
 8000b3e:	f001 f9a6 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2039      	movs	r0, #57	; 0x39
 8000b48:	f001 f985 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b4c:	2039      	movs	r0, #57	; 0x39
 8000b4e:	f001 f99e 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	203c      	movs	r0, #60	; 0x3c
 8000b58:	f001 f97d 	bl	8001e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b5c:	203c      	movs	r0, #60	; 0x3c
 8000b5e:	f001 f996 	bl	8001e8e <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	4b63      	ldr	r3, [pc, #396]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a62      	ldr	r2, [pc, #392]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000b90:	f043 0310 	orr.w	r3, r3, #16
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b60      	ldr	r3, [pc, #384]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	4b5c      	ldr	r3, [pc, #368]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a5b      	ldr	r2, [pc, #364]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b59      	ldr	r3, [pc, #356]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a54      	ldr	r2, [pc, #336]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a46      	ldr	r2, [pc, #280]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a3f      	ldr	r2, [pc, #252]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b3d      	ldr	r3, [pc, #244]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a38      	ldr	r2, [pc, #224]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <MX_GPIO_Init+0x1a8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c50:	4832      	ldr	r0, [pc, #200]	; (8000d1c <MX_GPIO_Init+0x1ac>)
 8000c52:	f002 ffd9 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2140      	movs	r1, #64	; 0x40
 8000c5a:	4831      	ldr	r0, [pc, #196]	; (8000d20 <MX_GPIO_Init+0x1b0>)
 8000c5c:	f002 ffd4 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	482b      	ldr	r0, [pc, #172]	; (8000d24 <MX_GPIO_Init+0x1b4>)
 8000c78:	f002 fe1a 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4824      	ldr	r0, [pc, #144]	; (8000d28 <MX_GPIO_Init+0x1b8>)
 8000c98:	f002 fe0a 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c9c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4819      	ldr	r0, [pc, #100]	; (8000d1c <MX_GPIO_Init+0x1ac>)
 8000cb6:	f002 fdfb 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4813      	ldr	r0, [pc, #76]	; (8000d20 <MX_GPIO_Init+0x1b0>)
 8000cd2:	f002 fded 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_GPIO_Init+0x1b0>)
 8000cea:	f002 fde1 	bl	80038b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000cee:	2318      	movs	r3, #24
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_GPIO_Init+0x1ac>)
 8000d0a:	f002 fdd1 	bl	80038b0 <HAL_GPIO_Init>

}
 8000d0e:	bf00      	nop
 8000d10:	3730      	adds	r7, #48	; 0x30
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40021800 	.word	0x40021800
 8000d24:	40020800 	.word	0x40020800
 8000d28:	40020000 	.word	0x40020000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a69      	ldr	r2, [pc, #420]	; (8000f4c <HAL_I2C_MspInit+0x1c4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d163      	bne.n	8000e72 <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	4b68      	ldr	r3, [pc, #416]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a67      	ldr	r2, [pc, #412]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b65      	ldr	r3, [pc, #404]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	485c      	ldr	r0, [pc, #368]	; (8000f54 <HAL_I2C_MspInit+0x1cc>)
 8000de4:	f002 fd64 	bl	80038b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	4b58      	ldr	r3, [pc, #352]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a57      	ldr	r2, [pc, #348]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b55      	ldr	r3, [pc, #340]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8000e04:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e06:	4a55      	ldr	r2, [pc, #340]	; (8000f5c <HAL_I2C_MspInit+0x1d4>)
 8000e08:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e0a:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e12:	4b51      	ldr	r3, [pc, #324]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e26:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2c:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e32:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e38:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e3e:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e44:	4844      	ldr	r0, [pc, #272]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e46:	f001 f83d 	bl	8001ec4 <HAL_DMA_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000e50:	f7ff ff6c 	bl	8000d2c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a40      	ldr	r2, [pc, #256]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e58:	635a      	str	r2, [r3, #52]	; 0x34
 8000e5a:	4a3f      	ldr	r2, [pc, #252]	; (8000f58 <HAL_I2C_MspInit+0x1d0>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	201f      	movs	r0, #31
 8000e66:	f000 fff6 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e6a:	201f      	movs	r0, #31
 8000e6c:	f001 f80f 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e70:	e067      	b.n	8000f42 <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a3a      	ldr	r2, [pc, #232]	; (8000f60 <HAL_I2C_MspInit+0x1d8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d162      	bne.n	8000f42 <HAL_I2C_MspInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a32      	ldr	r2, [pc, #200]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9e:	2312      	movs	r3, #18
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <HAL_I2C_MspInit+0x1cc>)
 8000eb6:	f002 fcfb 	bl	80038b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a23      	ldr	r2, [pc, #140]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_I2C_MspInit+0x1c8>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000ed8:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <HAL_I2C_MspInit+0x1e0>)
 8000eda:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000ede:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000f16:	4813      	ldr	r0, [pc, #76]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000f18:	f000 ffd4 	bl	8001ec4 <HAL_DMA_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 8000f22:	f7ff ff03 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_I2C_MspInit+0x1dc>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2021      	movs	r0, #33	; 0x21
 8000f38:	f000 ff8d 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000f3c:	2021      	movs	r0, #33	; 0x21
 8000f3e:	f000 ffa6 	bl	8001e8e <HAL_NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	; 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020400 	.word	0x40020400
 8000f58:	2000016c 	.word	0x2000016c
 8000f5c:	400260b8 	.word	0x400260b8
 8000f60:	40005800 	.word	0x40005800
 8000f64:	200001cc 	.word	0x200001cc
 8000f68:	40026040 	.word	0x40026040

08000f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a9e      	ldr	r2, [pc, #632]	; (8001204 <HAL_SPI_MspInit+0x298>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	f040 809f 	bne.w	80010ce <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
 8000f94:	4b9c      	ldr	r3, [pc, #624]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a9b      	ldr	r2, [pc, #620]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b99      	ldr	r3, [pc, #612]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa8:	623b      	str	r3, [r7, #32]
 8000faa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	4b95      	ldr	r3, [pc, #596]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a94      	ldr	r2, [pc, #592]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbc:	4b92      	ldr	r3, [pc, #584]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	4b8e      	ldr	r3, [pc, #568]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a8d      	ldr	r2, [pc, #564]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	4b87      	ldr	r3, [pc, #540]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a86      	ldr	r2, [pc, #536]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b84      	ldr	r3, [pc, #528]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001000:	230c      	movs	r3, #12
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001010:	2305      	movs	r3, #5
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	487c      	ldr	r0, [pc, #496]	; (800120c <HAL_SPI_MspInit+0x2a0>)
 800101c:	f002 fc48 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001032:	2305      	movs	r3, #5
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4874      	ldr	r0, [pc, #464]	; (8001210 <HAL_SPI_MspInit+0x2a4>)
 800103e:	f002 fc37 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001042:	2308      	movs	r3, #8
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001052:	2305      	movs	r3, #5
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	486d      	ldr	r0, [pc, #436]	; (8001214 <HAL_SPI_MspInit+0x2a8>)
 800105e:	f002 fc27 	bl	80038b0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001062:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 8001064:	4a6d      	ldr	r2, [pc, #436]	; (800121c <HAL_SPI_MspInit+0x2b0>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001068:	4b6b      	ldr	r3, [pc, #428]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b67      	ldr	r3, [pc, #412]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001082:	4b65      	ldr	r3, [pc, #404]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001088:	4b63      	ldr	r3, [pc, #396]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800108e:	4b62      	ldr	r3, [pc, #392]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001094:	4b60      	ldr	r3, [pc, #384]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109a:	4b5f      	ldr	r3, [pc, #380]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80010a0:	485d      	ldr	r0, [pc, #372]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 80010a2:	f000 ff0f 	bl	8001ec4 <HAL_DMA_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 80010ac:	f7ff fe3e 	bl	8000d2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a59      	ldr	r2, [pc, #356]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 80010b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80010b6:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_SPI_MspInit+0x2ac>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2024      	movs	r0, #36	; 0x24
 80010c2:	f000 fec8 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010c6:	2024      	movs	r0, #36	; 0x24
 80010c8:	f000 fee1 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80010cc:	e095      	b.n	80011fa <HAL_SPI_MspInit+0x28e>
  else if(hspi->Instance==SPI4)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a53      	ldr	r2, [pc, #332]	; (8001220 <HAL_SPI_MspInit+0x2b4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	f040 8090 	bne.w	80011fa <HAL_SPI_MspInit+0x28e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a49      	ldr	r2, [pc, #292]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 80010e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b47      	ldr	r3, [pc, #284]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a42      	ldr	r2, [pc, #264]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8001100:	f043 0310 	orr.w	r3, r3, #16
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_SPI_MspInit+0x29c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001112:	2374      	movs	r3, #116	; 0x74
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001122:	2305      	movs	r3, #5
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	483d      	ldr	r0, [pc, #244]	; (8001224 <HAL_SPI_MspInit+0x2b8>)
 800112e:	f002 fbbf 	bl	80038b0 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 8001134:	4a3d      	ldr	r2, [pc, #244]	; (800122c <HAL_SPI_MspInit+0x2c0>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 800113a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800113e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 800114e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001152:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001160:	4b31      	ldr	r3, [pc, #196]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001172:	482d      	ldr	r0, [pc, #180]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 8001174:	f000 fea6 	bl	8001ec4 <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_SPI_MspInit+0x216>
      Error_Handler();
 800117e:	f7ff fdd5 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a28      	ldr	r2, [pc, #160]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 8001186:	64da      	str	r2, [r3, #76]	; 0x4c
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_SPI_MspInit+0x2bc>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 8001190:	4a28      	ldr	r2, [pc, #160]	; (8001234 <HAL_SPI_MspInit+0x2c8>)
 8001192:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 8001196:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800119a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 800119e:	2240      	movs	r2, #64	; 0x40
 80011a0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ae:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011d0:	f000 fe78 	bl	8001ec4 <HAL_DMA_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_SPI_MspInit+0x272>
      Error_Handler();
 80011da:	f7ff fda7 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a13      	ldr	r2, [pc, #76]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011e2:	649a      	str	r2, [r3, #72]	; 0x48
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_SPI_MspInit+0x2c4>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2054      	movs	r0, #84	; 0x54
 80011f0:	f000 fe31 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80011f4:	2054      	movs	r0, #84	; 0x54
 80011f6:	f000 fe4a 	bl	8001e8e <HAL_NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3738      	adds	r7, #56	; 0x38
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40003800 	.word	0x40003800
 8001208:	40023800 	.word	0x40023800
 800120c:	40020800 	.word	0x40020800
 8001210:	40020400 	.word	0x40020400
 8001214:	40020c00 	.word	0x40020c00
 8001218:	200002dc 	.word	0x200002dc
 800121c:	40026058 	.word	0x40026058
 8001220:	40013400 	.word	0x40013400
 8001224:	40021000 	.word	0x40021000
 8001228:	2000033c 	.word	0x2000033c
 800122c:	40026410 	.word	0x40026410
 8001230:	2000039c 	.word	0x2000039c
 8001234:	40026470 	.word	0x40026470

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a82      	ldr	r2, [pc, #520]	; (8001460 <HAL_UART_MspInit+0x228>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d163      	bne.n	8001322 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
 800125e:	4b81      	ldr	r3, [pc, #516]	; (8001464 <HAL_UART_MspInit+0x22c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a80      	ldr	r2, [pc, #512]	; (8001464 <HAL_UART_MspInit+0x22c>)
 8001264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b7e      	ldr	r3, [pc, #504]	; (8001464 <HAL_UART_MspInit+0x22c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001272:	623b      	str	r3, [r7, #32]
 8001274:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	4b7a      	ldr	r3, [pc, #488]	; (8001464 <HAL_UART_MspInit+0x22c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a79      	ldr	r2, [pc, #484]	; (8001464 <HAL_UART_MspInit+0x22c>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b77      	ldr	r3, [pc, #476]	; (8001464 <HAL_UART_MspInit+0x22c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001292:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012a4:	2308      	movs	r3, #8
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	486e      	ldr	r0, [pc, #440]	; (8001468 <HAL_UART_MspInit+0x230>)
 80012b0:	f002 fafe 	bl	80038b0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80012b4:	4b6d      	ldr	r3, [pc, #436]	; (800146c <HAL_UART_MspInit+0x234>)
 80012b6:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <HAL_UART_MspInit+0x238>)
 80012b8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80012ba:	4b6c      	ldr	r3, [pc, #432]	; (800146c <HAL_UART_MspInit+0x234>)
 80012bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c2:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_UART_MspInit+0x234>)
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b68      	ldr	r3, [pc, #416]	; (800146c <HAL_UART_MspInit+0x234>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_UART_MspInit+0x234>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <HAL_UART_MspInit+0x234>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b63      	ldr	r3, [pc, #396]	; (800146c <HAL_UART_MspInit+0x234>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80012e2:	4b62      	ldr	r3, [pc, #392]	; (800146c <HAL_UART_MspInit+0x234>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b60      	ldr	r3, [pc, #384]	; (800146c <HAL_UART_MspInit+0x234>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ee:	4b5f      	ldr	r3, [pc, #380]	; (800146c <HAL_UART_MspInit+0x234>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80012f4:	485d      	ldr	r0, [pc, #372]	; (800146c <HAL_UART_MspInit+0x234>)
 80012f6:	f000 fde5 	bl	8001ec4 <HAL_DMA_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001300:	f7ff fd14 	bl	8000d2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a59      	ldr	r2, [pc, #356]	; (800146c <HAL_UART_MspInit+0x234>)
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
 800130a:	4a58      	ldr	r2, [pc, #352]	; (800146c <HAL_UART_MspInit+0x234>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2034      	movs	r0, #52	; 0x34
 8001316:	f000 fd9e 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800131a:	2034      	movs	r0, #52	; 0x34
 800131c:	f000 fdb7 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001320:	e099      	b.n	8001456 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a53      	ldr	r2, [pc, #332]	; (8001474 <HAL_UART_MspInit+0x23c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d12d      	bne.n	8001388 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <HAL_UART_MspInit+0x22c>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <HAL_UART_MspInit+0x22c>)
 8001336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133a:	6413      	str	r3, [r2, #64]	; 0x40
 800133c:	4b49      	ldr	r3, [pc, #292]	; (8001464 <HAL_UART_MspInit+0x22c>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <HAL_UART_MspInit+0x22c>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	4a44      	ldr	r2, [pc, #272]	; (8001464 <HAL_UART_MspInit+0x22c>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6313      	str	r3, [r2, #48]	; 0x30
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_UART_MspInit+0x22c>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001364:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001376:	2307      	movs	r3, #7
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	483d      	ldr	r0, [pc, #244]	; (8001478 <HAL_UART_MspInit+0x240>)
 8001382:	f002 fa95 	bl	80038b0 <HAL_GPIO_Init>
}
 8001386:	e066      	b.n	8001456 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a3b      	ldr	r2, [pc, #236]	; (800147c <HAL_UART_MspInit+0x244>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d161      	bne.n	8001456 <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b33      	ldr	r3, [pc, #204]	; (8001464 <HAL_UART_MspInit+0x22c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_UART_MspInit+0x22c>)
 800139c:	f043 0320 	orr.w	r3, r3, #32
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_UART_MspInit+0x22c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <HAL_UART_MspInit+0x22c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a2b      	ldr	r2, [pc, #172]	; (8001464 <HAL_UART_MspInit+0x22c>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_UART_MspInit+0x22c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23c0      	movs	r3, #192	; 0xc0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013da:	2308      	movs	r3, #8
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4820      	ldr	r0, [pc, #128]	; (8001468 <HAL_UART_MspInit+0x230>)
 80013e6:	f002 fa63 	bl	80038b0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_UART_MspInit+0x248>)
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_UART_MspInit+0x24c>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_UART_MspInit+0x248>)
 80013f2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80013f6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_UART_MspInit+0x248>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_UART_MspInit+0x248>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_UART_MspInit+0x248>)
 8001406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_UART_MspInit+0x248>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_UART_MspInit+0x248>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_UART_MspInit+0x248>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_UART_MspInit+0x248>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_UART_MspInit+0x248>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800142a:	4815      	ldr	r0, [pc, #84]	; (8001480 <HAL_UART_MspInit+0x248>)
 800142c:	f000 fd4a 	bl	8001ec4 <HAL_DMA_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001436:	f7ff fc79 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x248>)
 800143e:	639a      	str	r2, [r3, #56]	; 0x38
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_UART_MspInit+0x248>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2047      	movs	r0, #71	; 0x47
 800144c:	f000 fd03 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001450:	2047      	movs	r0, #71	; 0x47
 8001452:	f000 fd1c 	bl	8001e8e <HAL_NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3738      	adds	r7, #56	; 0x38
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004c00 	.word	0x40004c00
 8001464:	40023800 	.word	0x40023800
 8001468:	40020800 	.word	0x40020800
 800146c:	200004c8 	.word	0x200004c8
 8001470:	40026070 	.word	0x40026070
 8001474:	40004800 	.word	0x40004800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40011400 	.word	0x40011400
 8001480:	20000528 	.word	0x20000528
 8001484:	40026428 	.word	0x40026428

08001488 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a8:	d13f      	bne.n	800152a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_PCD_MspInit+0xac>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_PCD_MspInit+0xac>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_PCD_MspInit+0xac>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014d8:	230a      	movs	r3, #10
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <HAL_PCD_MspInit+0xb0>)
 80014e4:	f002 f9e4 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480e      	ldr	r0, [pc, #56]	; (8001538 <HAL_PCD_MspInit+0xb0>)
 80014fe:	f002 f9d7 	bl	80038b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6353      	str	r3, [r2, #52]	; 0x34
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_PCD_MspInit+0xac>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 fb46 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <DMA1_Stream2_IRQHandler+0x10>)
 8001596:	f000 fe2d 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001cc 	.word	0x200001cc

080015a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <DMA1_Stream3_IRQHandler+0x10>)
 80015aa:	f000 fe23 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002dc 	.word	0x200002dc

080015b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <DMA1_Stream4_IRQHandler+0x10>)
 80015be:	f000 fe19 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200004c8 	.word	0x200004c8

080015cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <I2C1_EV_IRQHandler+0x10>)
 80015d2:	f002 fee7 	bl	80043a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200000c4 	.word	0x200000c4

080015e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <I2C2_EV_IRQHandler+0x10>)
 80015e6:	f002 fedd 	bl	80043a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000118 	.word	0x20000118

080015f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <SPI2_IRQHandler+0x10>)
 80015fa:	f005 fde9 	bl	80071d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000022c 	.word	0x2000022c

08001608 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA1_Stream7_IRQHandler+0x10>)
 800160e:	f000 fdf1 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000016c 	.word	0x2000016c

0800161c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <UART4_IRQHandler+0x10>)
 8001622:	f006 fa6f 	bl	8007b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200003fc 	.word	0x200003fc

08001630 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <DMA2_Stream0_IRQHandler+0x10>)
 8001636:	f000 fddd 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000033c 	.word	0x2000033c

08001644 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA2_Stream1_IRQHandler+0x10>)
 800164a:	f000 fdd3 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000528 	.word	0x20000528

08001658 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA2_Stream4_IRQHandler+0x10>)
 800165e:	f000 fdc9 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000039c 	.word	0x2000039c

0800166c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <ETH_IRQHandler+0x10>)
 8001672:	f001 fa4f 	bl	8002b14 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000561c 	.word	0x2000561c

08001680 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <USART6_IRQHandler+0x10>)
 8001686:	f006 fa3d 	bl	8007b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000484 	.word	0x20000484

08001694 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <SPI4_IRQHandler+0x10>)
 800169a:	f005 fd99 	bl	80071d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000284 	.word	0x20000284

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_kill>:

int _kill(int pid, int sig)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <_kill+0x20>)
 80016c4:	2216      	movs	r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
	return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	200087f0 	.word	0x200087f0

080016dc <_exit>:

void _exit (int status)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ffe5 	bl	80016b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ee:	e7fe      	b.n	80016ee <_exit+0x12>

080016f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
	}

return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
	}
	return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178a:	605a      	str	r2, [r3, #4]
	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_isatty>:

int _isatty(int file)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
	return 1;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d205      	bcs.n	8001808 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <_sbrk+0x6c>)
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e009      	b.n	800181c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a06      	ldr	r2, [pc, #24]	; (8001830 <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20030000 	.word	0x20030000
 800182c:	00000400 	.word	0x00000400
 8001830:	20000b00 	.word	0x20000b00
 8001834:	20008800 	.word	0x20008800
 8001838:	200087f0 	.word	0x200087f0

0800183c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <SystemInit+0x20>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <SystemInit+0x20>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001866:	490e      	ldr	r1, [pc, #56]	; (80018a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800187c:	4c0b      	ldr	r4, [pc, #44]	; (80018ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800188a:	f7ff ffd7 	bl	800183c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188e:	f013 fe5d 	bl	801554c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001892:	f7fe fea9 	bl	80005e8 <main>
  bx  lr    
 8001896:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001898:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80018a4:	08019694 	.word	0x08019694
  ldr r2, =_sbss
 80018a8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80018ac:	20008800 	.word	0x20008800

080018b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC_IRQHandler>

080018b2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <LAN8742_RegisterBusIO+0x28>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <LAN8742_RegisterBusIO+0x28>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <LAN8742_RegisterBusIO+0x28>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e014      	b.n	800190a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d17c      	bne.n	8001a30 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e01c      	b.n	800198a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f107 0208 	add.w	r2, r7, #8
 8001958:	2112      	movs	r1, #18
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	4798      	blx	r3
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	da03      	bge.n	800196c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001964:	f06f 0304 	mvn.w	r3, #4
 8001968:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800196a:	e00b      	b.n	8001984 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	d105      	bne.n	8001984 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
         break;
 8001982:	e005      	b.n	8001990 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b1f      	cmp	r3, #31
 800198e:	d9df      	bls.n	8001950 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b1f      	cmp	r3, #31
 8001996:	d902      	bls.n	800199e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001998:	f06f 0302 	mvn.w	r3, #2
 800199c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d145      	bne.n	8001a30 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6810      	ldr	r0, [r2, #0]
 80019ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019b0:	2100      	movs	r1, #0
 80019b2:	4798      	blx	r3
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db37      	blt.n	8001a2a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6810      	ldr	r0, [r2, #0]
 80019c2:	f107 0208 	add.w	r2, r7, #8
 80019c6:	2100      	movs	r1, #0
 80019c8:	4798      	blx	r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db28      	blt.n	8001a22 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4798      	blx	r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80019da:	e01c      	b.n	8001a16 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4798      	blx	r3
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019ee:	d80e      	bhi.n	8001a0e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6810      	ldr	r0, [r2, #0]
 80019f8:	f107 0208 	add.w	r2, r7, #8
 80019fc:	2100      	movs	r1, #0
 80019fe:	4798      	blx	r3
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	da07      	bge.n	8001a16 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001a06:	f06f 0304 	mvn.w	r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
                 break;
 8001a0c:	e010      	b.n	8001a30 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001a0e:	f06f 0301 	mvn.w	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
               break;
 8001a14:	e00c      	b.n	8001a30 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1dd      	bne.n	80019dc <LAN8742_Init+0xc6>
 8001a20:	e006      	b.n	8001a30 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001a22:	f06f 0304 	mvn.w	r3, #4
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	e002      	b.n	8001a30 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001a2a:	f06f 0303 	mvn.w	r3, #3
 8001a2e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d112      	bne.n	8001a5c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4798      	blx	r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001a40:	bf00      	nop
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4798      	blx	r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a54:	d9f5      	bls.n	8001a42 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 }
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6810      	ldr	r0, [r2, #0]
 8001a7a:	f107 020c 	add.w	r2, r7, #12
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4798      	blx	r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da02      	bge.n	8001a8e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a88:	f06f 0304 	mvn.w	r3, #4
 8001a8c:	e06e      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6810      	ldr	r0, [r2, #0]
 8001a96:	f107 020c 	add.w	r2, r7, #12
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4798      	blx	r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da02      	bge.n	8001aaa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001aa4:	f06f 0304 	mvn.w	r3, #4
 8001aa8:	e060      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e059      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6810      	ldr	r0, [r2, #0]
 8001ac0:	f107 020c 	add.w	r2, r7, #12
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4798      	blx	r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da02      	bge.n	8001ad4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ace:	f06f 0304 	mvn.w	r3, #4
 8001ad2:	e04b      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d11b      	bne.n	8001b16 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <LAN8742_GetLinkState+0x90>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001af2:	2302      	movs	r3, #2
 8001af4:	e03a      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e033      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e02c      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b12:	2305      	movs	r3, #5
 8001b14:	e02a      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6810      	ldr	r0, [r2, #0]
 8001b1e:	f107 020c 	add.w	r2, r7, #12
 8001b22:	211f      	movs	r1, #31
 8001b24:	4798      	blx	r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da02      	bge.n	8001b32 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b2c:	f06f 0304 	mvn.w	r3, #4
 8001b30:	e01c      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001b3c:	2306      	movs	r3, #6
 8001b3e:	e015      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 031c 	and.w	r3, r3, #28
 8001b46:	2b18      	cmp	r3, #24
 8001b48:	d101      	bne.n	8001b4e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e00e      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 031c 	and.w	r3, r3, #28
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d101      	bne.n	8001b5c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e007      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 031c 	and.w	r3, r3, #28
 8001b62:	2b14      	cmp	r3, #20
 8001b64:	d101      	bne.n	8001b6a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b66:	2304      	movs	r3, #4
 8001b68:	e000      	b.n	8001b6c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b6a:	2305      	movs	r3, #5
    }				
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_Init+0x40>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_Init+0x40>)
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x40>)
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f94f 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f808 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff f8c6 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x58>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f967 	bl	8001eaa <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00e      	b.n	8001c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d80a      	bhi.n	8001c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 f92f 	bl	8001e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_InitTick+0x5c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000014 	.word	0x20000014
 8001c10:	2000001c 	.word	0x2000001c
 8001c14:	20000018 	.word	0x20000018

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000001c 	.word	0x2000001c
 8001c3c:	20000b04 	.word	0x20000b04

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000b04 	.word	0x20000b04

08001c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff ffee 	bl	8001c40 <HAL_GetTick>
 8001c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	d005      	beq.n	8001c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_Delay+0x44>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c7e:	bf00      	nop
 8001c80:	f7ff ffde 	bl	8001c40 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d8f7      	bhi.n	8001c80 <HAL_Delay+0x28>
  {
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000001c 	.word	0x2000001c

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ff8e 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff29 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff3e 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff8e 	bl	8001d94 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5d 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff31 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffa2 	bl	8001dfc <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff feb6 	bl	8001c40 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e099      	b.n	8002014 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f00:	e00f      	b.n	8001f22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f02:	f7ff fe9d 	bl	8001c40 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d908      	bls.n	8001f22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e078      	b.n	8002014 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e8      	bne.n	8001f02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_DMA_Init+0x158>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d107      	bne.n	8001f8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	4313      	orrs	r3, r2
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 0307 	bic.w	r3, r3, #7
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d117      	bne.n	8001fe6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fb1b 	bl	8002604 <DMA_CheckFifoParam>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e016      	b.n	8002014 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fad2 	bl	8002598 <DMA_CalcBaseAndBitshift>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	223f      	movs	r2, #63	; 0x3f
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	f010803f 	.word	0xf010803f

08002020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_DMA_Start_IT+0x26>
 8002042:	2302      	movs	r3, #2
 8002044:	e040      	b.n	80020c8 <HAL_DMA_Start_IT+0xa8>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d12f      	bne.n	80020ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fa64 	bl	800253c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	223f      	movs	r2, #63	; 0x3f
 800207a:	409a      	lsls	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0216 	orr.w	r2, r2, #22
 800208e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0208 	orr.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e005      	b.n	80020c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
 80020c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020de:	f7ff fdaf 	bl	8001c40 <HAL_GetTick>
 80020e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d008      	beq.n	8002102 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e052      	b.n	80021a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_Abort+0x62>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002152:	e013      	b.n	800217c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002154:	f7ff fd74 	bl	8001c40 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b05      	cmp	r3, #5
 8002160:	d90c      	bls.n	800217c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2203      	movs	r2, #3
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e015      	b.n	80021a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1e4      	bne.n	8002154 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	223f      	movs	r2, #63	; 0x3f
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d004      	beq.n	80021ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00c      	b.n	80021e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2205      	movs	r2, #5
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002200:	4b8e      	ldr	r3, [pc, #568]	; (800243c <HAL_DMA_IRQHandler+0x248>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a8e      	ldr	r2, [pc, #568]	; (8002440 <HAL_DMA_IRQHandler+0x24c>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2208      	movs	r2, #8
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01a      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2208      	movs	r2, #8
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2201      	movs	r2, #1
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2201      	movs	r2, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	2204      	movs	r2, #4
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2204      	movs	r2, #4
 80022ba:	409a      	lsls	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	2210      	movs	r2, #16
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d043      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d03c      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2210      	movs	r2, #16
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d024      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e01f      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
 8002334:	e016      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0208 	bic.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2220      	movs	r2, #32
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 808f 	beq.w	8002494 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8087 	beq.w	8002494 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2220      	movs	r2, #32
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b05      	cmp	r3, #5
 800239c:	d136      	bne.n	800240c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0216 	bic.w	r2, r2, #22
 80023ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_DMA_IRQHandler+0x1da>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0208 	bic.w	r2, r2, #8
 80023dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	223f      	movs	r2, #63	; 0x3f
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d07e      	beq.n	8002500 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
        }
        return;
 800240a:	e079      	b.n	8002500 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01d      	beq.n	8002456 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	2b00      	cmp	r3, #0
 800242e:	d031      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e02c      	b.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
 800243a:	bf00      	nop
 800243c:	20000014 	.word	0x20000014
 8002440:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
 8002454:	e01e      	b.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d032      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d022      	beq.n	80024ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2205      	movs	r2, #5
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d307      	bcc.n	80024dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f2      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x2cc>
 80024da:	e000      	b.n	80024de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
 80024fe:	e000      	b.n	8002502 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002500:	bf00      	nop
    }
  }
}
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002516:	b2db      	uxtb	r3, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002558:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d108      	bne.n	800257c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800257a:	e007      	b.n	800258c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3b10      	subs	r3, #16
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <DMA_CalcBaseAndBitshift+0x64>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025b2:	4a13      	ldr	r2, [pc, #76]	; (8002600 <DMA_CalcBaseAndBitshift+0x68>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d909      	bls.n	80025da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	1d1a      	adds	r2, r3, #4
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58
 80025d8:	e007      	b.n	80025ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025e2:	f023 0303 	bic.w	r3, r3, #3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	aaaaaaab 	.word	0xaaaaaaab
 8002600:	08019430 	.word	0x08019430

08002604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11f      	bne.n	800265e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d856      	bhi.n	80026d2 <DMA_CheckFifoParam+0xce>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <DMA_CheckFifoParam+0x28>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	0800263d 	.word	0x0800263d
 8002630:	0800264f 	.word	0x0800264f
 8002634:	0800263d 	.word	0x0800263d
 8002638:	080026d3 	.word	0x080026d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d046      	beq.n	80026d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e043      	b.n	80026d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002656:	d140      	bne.n	80026da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e03d      	b.n	80026da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002666:	d121      	bne.n	80026ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d837      	bhi.n	80026de <DMA_CheckFifoParam+0xda>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <DMA_CheckFifoParam+0x70>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002685 	.word	0x08002685
 8002678:	0800268b 	.word	0x0800268b
 800267c:	08002685 	.word	0x08002685
 8002680:	0800269d 	.word	0x0800269d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      break;
 8002688:	e030      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d025      	beq.n	80026e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269a:	e022      	b.n	80026e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026a4:	d11f      	bne.n	80026e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026aa:	e01c      	b.n	80026e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d903      	bls.n	80026ba <DMA_CheckFifoParam+0xb6>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d003      	beq.n	80026c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b8:	e018      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      break;
 80026be:	e015      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      break;
 80026d0:	e00b      	b.n	80026ea <DMA_CheckFifoParam+0xe6>
      break;
 80026d2:	bf00      	nop
 80026d4:	e00a      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e008      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e006      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e004      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;   
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026ea:	bf00      	nop
    }
  } 
  
  return status; 
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06c      	b.n	80027e8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2223      	movs	r2, #35	; 0x23
 800271c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f006 fddb 	bl	80092dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_ETH_Init+0xf4>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <HAL_ETH_Init+0xf4>)
 8002730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <HAL_ETH_Init+0xf4>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002742:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <HAL_ETH_Init+0xf8>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <HAL_ETH_Init+0xf8>)
 8002748:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800274c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_ETH_Init+0xf8>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4927      	ldr	r1, [pc, #156]	; (80027f4 <HAL_ETH_Init+0xf8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800275c:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <HAL_ETH_Init+0xf8>)
 800275e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002776:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002778:	f7ff fa62 	bl	8001c40 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800277e:	e011      	b.n	80027a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002780:	f7ff fa5e 	bl	8001c40 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800278e:	d909      	bls.n	80027a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2204      	movs	r2, #4
 8002794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	22e0      	movs	r2, #224	; 0xe0
 800279c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e021      	b.n	80027e8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e4      	bne.n	8002780 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fdd4 	bl	8003364 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fe7b 	bl	80034b8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fed1 	bl	800356a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	461a      	mov	r2, r3
 80027ce:	2100      	movs	r1, #0
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fe39 	bl	8003448 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2210      	movs	r2, #16
 80027e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800

080027f8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002806:	2b10      	cmp	r3, #16
 8002808:	d13a      	bne.n	8002880 <HAL_ETH_Start+0x88>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2223      	movs	r2, #35	; 0x23
 800280e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2204      	movs	r2, #4
 8002816:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f909 	bl	8002a30 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0208 	orr.w	r2, r2, #8
 800282c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0204 	orr.w	r2, r2, #4
 800283c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fc44 	bl	80030cc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002856:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800285a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002872:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2223      	movs	r2, #35	; 0x23
 8002878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_ETH_Start+0x8a>
  }
  else
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002898:	2b23      	cmp	r3, #35	; 0x23
 800289a:	d130      	bne.n	80028fe <HAL_ETH_Stop+0x74>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2223      	movs	r2, #35	; 0x23
 80028a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0208 	bic.w	r2, r2, #8
 80028b2:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	f023 0302 	bic.w	r3, r3, #2
 80028c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028ca:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0204 	bic.w	r2, r2, #4
 80028da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fbf5 	bl	80030cc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0208 	bic.w	r2, r2, #8
 80028f0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2210      	movs	r2, #16
 80028f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_ETH_Stop+0x76>
  }
  else
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e07c      	b.n	8002a28 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002934:	2b23      	cmp	r3, #35	; 0x23
 8002936:	d176      	bne.n	8002a26 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002938:	2200      	movs	r2, #0
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fe81 	bl	8003644 <ETH_Prepare_Tx_Descriptors>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f043 0202 	orr.w	r2, r3, #2
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e065      	b.n	8002a28 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800295c:	f3bf 8f4f 	dsb	sy
}
 8002960:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3206      	adds	r2, #6
 800296a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	2b03      	cmp	r3, #3
 8002980:	d904      	bls.n	800298c <HAL_ETH_Transmit+0x84>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	1f1a      	subs	r2, r3, #4
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3106      	adds	r1, #6
 8002998:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800299c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029a0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80029a2:	f7ff f94d 	bl	8001c40 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80029a8:	e037      	b.n	8002a1a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f043 0208 	orr.w	r2, r3, #8
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e023      	b.n	8002a28 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d018      	beq.n	8002a1a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029e8:	f7ff f92a 	bl	8001c40 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d302      	bcc.n	80029fe <HAL_ETH_Transmit+0xf6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002a14:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e006      	b.n	8002a28 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	dbc3      	blt.n	80029aa <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a44:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	3212      	adds	r2, #18
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a56:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002a58:	e03e      	b.n	8002ad8 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d112      	bne.n	8002a88 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	4618      	mov	r0, r3
 8002a68:	f006 fde0 	bl	800962c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	74fb      	strb	r3, [r7, #19]
 8002a76:	e007      	b.n	8002a88 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	461a      	mov	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d024      	beq.n	8002ad8 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a8e:	f3bf 8f5f 	dmb	sy
}
 8002a92:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a9a:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d103      	bne.n	8002aac <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4a1a      	ldr	r2, [pc, #104]	; (8002b10 <ETH_UpdateDescriptor+0xe0>)
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	e003      	b.n	8002ab4 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8002ab2:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d902      	bls.n	8002ac6 <ETH_UpdateDescriptor+0x96>
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3b04      	subs	r3, #4
 8002ac4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	3212      	adds	r2, #18
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	617b      	str	r3, [r7, #20]
      desccount--;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <ETH_UpdateDescriptor+0xb4>
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ba      	bne.n	8002a5a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d00c      	beq.n	8002b08 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af6:	461a      	mov	r2, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	800043e8 	.word	0x800043e8

08002b14 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d112      	bne.n	8002b54 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d109      	bne.n	8002b54 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_ETH_IRQHandler+0x178>)
 8002b4c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8ac 	bl	8002cac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d113      	bne.n	8002b8e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d10a      	bne.n	8002b8e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b80:	461a      	mov	r2, r3
 8002b82:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002b86:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f885 	bl	8002c98 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba0:	d14c      	bne.n	8002c3c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d142      	bne.n	8002c3c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f043 0208 	orr.w	r2, r3, #8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d11a      	bne.n	8002c10 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HAL_ETH_IRQHandler+0x17c>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002c00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c04:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	22e0      	movs	r2, #224	; 0xe0
 8002c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002c0e:	e012      	b.n	8002c36 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	f248 6380 	movw	r3, #34432	; 0x8680
 8002c1e:	4013      	ands	r3, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f248 6380 	movw	r3, #34432	; 0x8680
 8002c34:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f842 	bl	8002cc0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d10e      	bne.n	8002c68 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f83a 	bl	8002cd4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_ETH_IRQHandler+0x180>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_ETH_IRQHandler+0x180>)
 8002c76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c7a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f833 	bl	8002ce8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	00010040 	.word	0x00010040
 8002c90:	007e2000 	.word	0x007e2000
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 031c 	and.w	r3, r3, #28
 8002d18:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	02db      	lsls	r3, r3, #11
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	019b      	lsls	r3, r3, #6
 8002d2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0302 	bic.w	r3, r3, #2
 8002d3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002d4c:	f7fe ff78 	bl	8001c40 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d52:	e00d      	b.n	8002d70 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002d54:	f7fe ff74 	bl	8001c40 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d301      	bcc.n	8002d68 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e010      	b.n	8002d8a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ec      	bne.n	8002d54 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 031c 	and.w	r3, r3, #28
 8002dae:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	02db      	lsls	r3, r3, #11
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	019b      	lsls	r3, r3, #6
 8002dc0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dec:	f7fe ff28 	bl	8001c40 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002df2:	e00d      	b.n	8002e10 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002df4:	f7fe ff24 	bl	8001c40 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e02:	d301      	bcc.n	8002e08 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e009      	b.n	8002e1c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ec      	bne.n	8002df4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0d2      	b.n	8002fde <HAL_ETH_GetMACConfig+0x1ba>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00b      	b.n	8003016 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003004:	2b10      	cmp	r3, #16
 8003006:	d105      	bne.n	8003014 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f884 	bl	8003118 <ETH_SetMACConfig>

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 031c 	bic.w	r3, r3, #28
 8003036:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003038:	f003 fd8c 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 800303c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d908      	bls.n	8003058 <HAL_ETH_SetMDIOClockRange+0x38>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d804      	bhi.n	8003058 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e027      	b.n	80030a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d908      	bls.n	8003072 <HAL_ETH_SetMDIOClockRange+0x52>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d204      	bcs.n	8003072 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f043 030c 	orr.w	r3, r3, #12
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	e01a      	b.n	80030a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d303      	bcc.n	8003082 <HAL_ETH_SetMDIOClockRange+0x62>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d911      	bls.n	80030a6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d908      	bls.n	800309c <HAL_ETH_SetMDIOClockRange+0x7c>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d804      	bhi.n	800309c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	e005      	b.n	80030a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f043 0310 	orr.w	r3, r3, #16
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e000      	b.n	80030a8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80030a6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	611a      	str	r2, [r3, #16]
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	01312cff 	.word	0x01312cff
 80030bc:	02160ebf 	.word	0x02160ebf
 80030c0:	03938700 	.word	0x03938700
 80030c4:	05f5e0ff 	.word	0x05f5e0ff
 80030c8:	08f0d17f 	.word	0x08f0d17f

080030cc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030ee:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030fc:	2001      	movs	r0, #1
 80030fe:	f7fe fdab 	bl	8001c58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800310c:	6193      	str	r3, [r2, #24]
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4b47      	ldr	r3, [pc, #284]	; (800324c <ETH_SetMACConfig+0x134>)
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	7c1b      	ldrb	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <ETH_SetMACConfig+0x28>
 800313a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800313e:	e000      	b.n	8003142 <ETH_SetMACConfig+0x2a>
 8003140:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	7c5b      	ldrb	r3, [r3, #17]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <ETH_SetMACConfig+0x38>
 800314a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800314e:	e000      	b.n	8003152 <ETH_SetMACConfig+0x3a>
 8003150:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003152:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003158:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	7fdb      	ldrb	r3, [r3, #31]
 800315e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003160:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003166:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	7f92      	ldrb	r2, [r2, #30]
 800316c:	2a00      	cmp	r2, #0
 800316e:	d102      	bne.n	8003176 <ETH_SetMACConfig+0x5e>
 8003170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003174:	e000      	b.n	8003178 <ETH_SetMACConfig+0x60>
 8003176:	2200      	movs	r2, #0
                        macconf->Speed |
 8003178:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	7f1b      	ldrb	r3, [r3, #28]
 800317e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003180:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003186:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	791b      	ldrb	r3, [r3, #4]
 800318c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800318e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003196:	2a00      	cmp	r2, #0
 8003198:	d102      	bne.n	80031a0 <ETH_SetMACConfig+0x88>
 800319a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319e:	e000      	b.n	80031a2 <ETH_SetMACConfig+0x8a>
 80031a0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	7bdb      	ldrb	r3, [r3, #15]
 80031a8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80031aa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031b8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031ba:	4313      	orrs	r3, r2
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7fe fd40 	bl	8001c58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	f64f 7341 	movw	r3, #65345	; 0xff41
 80031ee:	4013      	ands	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031fe:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8003204:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 800320c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8003214:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800321c:	4313      	orrs	r3, r2
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003234:	2001      	movs	r0, #1
 8003236:	f7fe fd0f 	bl	8001c58 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	619a      	str	r2, [r3, #24]
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	ff20810f 	.word	0xff20810f

08003250 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <ETH_SetDMAConfig+0x110>)
 800326a:	4013      	ands	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	7b1b      	ldrb	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <ETH_SetDMAConfig+0x2c>
 8003276:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800327a:	e000      	b.n	800327e <ETH_SetDMAConfig+0x2e>
 800327c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	7b5b      	ldrb	r3, [r3, #13]
 8003282:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003284:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	7f52      	ldrb	r2, [r2, #29]
 800328a:	2a00      	cmp	r2, #0
 800328c:	d102      	bne.n	8003294 <ETH_SetDMAConfig+0x44>
 800328e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003292:	e000      	b.n	8003296 <ETH_SetDMAConfig+0x46>
 8003294:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003296:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	7b9b      	ldrb	r3, [r3, #14]
 800329c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800329e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80032a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	7f1b      	ldrb	r3, [r3, #28]
 80032aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80032ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7f9b      	ldrb	r3, [r3, #30]
 80032b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80032b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032c4:	4313      	orrs	r3, r2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d4:	461a      	mov	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7fe fcb6 	bl	8001c58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f4:	461a      	mov	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	791b      	ldrb	r3, [r3, #4]
 80032fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003304:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800330a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003310:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003318:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800331a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003322:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003328:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003332:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003336:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003344:	2001      	movs	r0, #1
 8003346:	f7fe fc87 	bl	8001c58 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6013      	str	r3, [r2, #0]
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	f8de3f23 	.word	0xf8de3f23

08003364 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b0a6      	sub	sp, #152	; 0x98
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003394:	2300      	movs	r3, #0
 8003396:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033a0:	2300      	movs	r3, #0
 80033a2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80033c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80033cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80033d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033dc:	4619      	mov	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fe9a 	bl	8003118 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80033e8:	2301      	movs	r3, #1
 80033ea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003406:	2300      	movs	r3, #0
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003410:	2301      	movs	r3, #1
 8003412:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003418:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800341a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800341e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003424:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800342c:	2300      	movs	r3, #0
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ff08 	bl	8003250 <ETH_SetDMAConfig>
}
 8003440:	bf00      	nop
 8003442:	3798      	adds	r7, #152	; 0x98
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3305      	adds	r3, #5
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	3204      	adds	r2, #4
 8003460:	7812      	ldrb	r2, [r2, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <ETH_MACAddressConfig+0x68>)
 800346a:	4413      	add	r3, r2
 800346c:	461a      	mov	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3303      	adds	r3, #3
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	061a      	lsls	r2, r3, #24
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3302      	adds	r3, #2
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3301      	adds	r3, #1
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	4313      	orrs	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	7812      	ldrb	r2, [r2, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <ETH_MACAddressConfig+0x6c>)
 800349a:	4413      	add	r3, r2
 800349c:	461a      	mov	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	6013      	str	r3, [r2, #0]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40028040 	.word	0x40028040
 80034b4:	40028044 	.word	0x40028044

080034b8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e03e      	b.n	8003544 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68d9      	ldr	r1, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2200      	movs	r2, #0
 80034ee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	3206      	adds	r2, #6
 80034f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d80c      	bhi.n	8003528 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68d9      	ldr	r1, [r3, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	e004      	b.n	8003532 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	461a      	mov	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3301      	adds	r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d9bd      	bls.n	80034c6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355c:	611a      	str	r2, [r3, #16]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e046      	b.n	8003606 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6919      	ldr	r1, [r3, #16]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2200      	movs	r2, #0
 8003594:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2200      	movs	r2, #0
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035b4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80035bc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	3212      	adds	r2, #18
 80035d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d80c      	bhi.n	80035f6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6919      	ldr	r1, [r3, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	461a      	mov	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	e004      	b.n	8003600 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	461a      	mov	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3301      	adds	r3, #1
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d9b5      	bls.n	8003578 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	60da      	str	r2, [r3, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003644:	b480      	push	{r7}
 8003646:	b08d      	sub	sp, #52	; 0x34
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3318      	adds	r3, #24
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003686:	d007      	beq.n	8003698 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	3304      	adds	r3, #4
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003698:	2302      	movs	r3, #2
 800369a:	e103      	b.n	80038a4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	3301      	adds	r3, #1
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80036b4:	f023 031f 	bic.w	r3, r3, #31
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	6852      	ldr	r2, [r2, #4]
 80036bc:	431a      	orrs	r2, r3
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	431a      	orrs	r2, r3
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003722:	f3bf 8f5f 	dmb	sy
}
 8003726:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003734:	e084      	b.n	8003840 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d006      	beq.n	8003756 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e005      	b.n	8003762 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	3301      	adds	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	2b03      	cmp	r3, #3
 800376c:	d902      	bls.n	8003774 <ETH_Prepare_Tx_Descriptors+0x130>
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	3b04      	subs	r3, #4
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003796:	d007      	beq.n	80037a8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	3304      	adds	r3, #4
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d029      	beq.n	80037fc <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ba:	e019      	b.n	80037f0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80037bc:	f3bf 8f5f 	dmb	sy
}
 80037c0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	3301      	adds	r3, #1
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d902      	bls.n	80037e0 <ETH_Prepare_Tx_Descriptors+0x19c>
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	3b04      	subs	r3, #4
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	3301      	adds	r3, #1
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3e1      	bcc.n	80037bc <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80037f8:	2302      	movs	r3, #2
 80037fa:	e053      	b.n	80038a4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	3301      	adds	r3, #1
 8003800:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800381a:	f023 031f 	bic.w	r3, r3, #31
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	6852      	ldr	r2, [r2, #4]
 8003822:	431a      	orrs	r2, r3
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	3301      	adds	r3, #1
 800382c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800382e:	f3bf 8f5f 	dmb	sy
}
 8003832:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f47f af76 	bne.w	8003736 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e005      	b.n	800386a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	3304      	adds	r3, #4
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800388c:	b672      	cpsid	i
}
 800388e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	4413      	add	r3, r2
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800389e:	b662      	cpsie	i
}
 80038a0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3734      	adds	r7, #52	; 0x34
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e177      	b.n	8003bbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038cc:	2201      	movs	r2, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	f040 8166 	bne.w	8003bb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d005      	beq.n	8003902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d130      	bne.n	8003964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003938:	2201      	movs	r2, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 0201 	and.w	r2, r3, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b03      	cmp	r3, #3
 800396e:	d017      	beq.n	80039a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d123      	bne.n	80039f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	08da      	lsrs	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3208      	adds	r2, #8
 80039b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	220f      	movs	r2, #15
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	08da      	lsrs	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3208      	adds	r2, #8
 80039ee:	69b9      	ldr	r1, [r7, #24]
 80039f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0203 	and.w	r2, r3, #3
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80c0 	beq.w	8003bb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_GPIO_Init+0x324>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	4a65      	ldr	r2, [pc, #404]	; (8003bd4 <HAL_GPIO_Init+0x324>)
 8003a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a44:	6453      	str	r3, [r2, #68]	; 0x44
 8003a46:	4b63      	ldr	r3, [pc, #396]	; (8003bd4 <HAL_GPIO_Init+0x324>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a52:	4a61      	ldr	r2, [pc, #388]	; (8003bd8 <HAL_GPIO_Init+0x328>)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	3302      	adds	r3, #2
 8003a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	220f      	movs	r2, #15
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_GPIO_Init+0x32c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d037      	beq.n	8003aee <HAL_GPIO_Init+0x23e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a57      	ldr	r2, [pc, #348]	; (8003be0 <HAL_GPIO_Init+0x330>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d031      	beq.n	8003aea <HAL_GPIO_Init+0x23a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a56      	ldr	r2, [pc, #344]	; (8003be4 <HAL_GPIO_Init+0x334>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02b      	beq.n	8003ae6 <HAL_GPIO_Init+0x236>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a55      	ldr	r2, [pc, #340]	; (8003be8 <HAL_GPIO_Init+0x338>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d025      	beq.n	8003ae2 <HAL_GPIO_Init+0x232>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a54      	ldr	r2, [pc, #336]	; (8003bec <HAL_GPIO_Init+0x33c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01f      	beq.n	8003ade <HAL_GPIO_Init+0x22e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a53      	ldr	r2, [pc, #332]	; (8003bf0 <HAL_GPIO_Init+0x340>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <HAL_GPIO_Init+0x22a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a52      	ldr	r2, [pc, #328]	; (8003bf4 <HAL_GPIO_Init+0x344>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0x226>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a51      	ldr	r2, [pc, #324]	; (8003bf8 <HAL_GPIO_Init+0x348>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_GPIO_Init+0x222>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a50      	ldr	r2, [pc, #320]	; (8003bfc <HAL_GPIO_Init+0x34c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_GPIO_Init+0x21e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a4f      	ldr	r2, [pc, #316]	; (8003c00 <HAL_GPIO_Init+0x350>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_GPIO_Init+0x21a>
 8003ac6:	2309      	movs	r3, #9
 8003ac8:	e012      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003aca:	230a      	movs	r3, #10
 8003acc:	e010      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	e00e      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003ad2:	2307      	movs	r3, #7
 8003ad4:	e00c      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003ad6:	2306      	movs	r3, #6
 8003ad8:	e00a      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003ada:	2305      	movs	r3, #5
 8003adc:	e008      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003ade:	2304      	movs	r3, #4
 8003ae0:	e006      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e004      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e002      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_GPIO_Init+0x240>
 8003aee:	2300      	movs	r3, #0
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	f002 0203 	and.w	r2, r2, #3
 8003af6:	0092      	lsls	r2, r2, #2
 8003af8:	4093      	lsls	r3, r2
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b00:	4935      	ldr	r1, [pc, #212]	; (8003bd8 <HAL_GPIO_Init+0x328>)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	3302      	adds	r3, #2
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_GPIO_Init+0x354>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b32:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <HAL_GPIO_Init+0x354>)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b38:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <HAL_GPIO_Init+0x354>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b5c:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <HAL_GPIO_Init+0x354>)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b62:	4b28      	ldr	r3, [pc, #160]	; (8003c04 <HAL_GPIO_Init+0x354>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b86:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <HAL_GPIO_Init+0x354>)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_GPIO_Init+0x354>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bb0:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <HAL_GPIO_Init+0x354>)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	f67f ae84 	bls.w	80038cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3724      	adds	r7, #36	; 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	40020000 	.word	0x40020000
 8003be0:	40020400 	.word	0x40020400
 8003be4:	40020800 	.word	0x40020800
 8003be8:	40020c00 	.word	0x40020c00
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40021400 	.word	0x40021400
 8003bf4:	40021800 	.word	0x40021800
 8003bf8:	40021c00 	.word	0x40021c00
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	40022400 	.word	0x40022400
 8003c04:	40013c00 	.word	0x40013c00

08003c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
 8003c14:	4613      	mov	r3, r2
 8003c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c18:	787b      	ldrb	r3, [r7, #1]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c24:	e003      	b.n	8003c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	041a      	lsls	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	619a      	str	r2, [r3, #24]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e12b      	b.n	8003ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd f890 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ca0:	f002 ff64 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 8003ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4a81      	ldr	r2, [pc, #516]	; (8003eb0 <HAL_I2C_Init+0x274>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d807      	bhi.n	8003cc0 <HAL_I2C_Init+0x84>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a80      	ldr	r2, [pc, #512]	; (8003eb4 <HAL_I2C_Init+0x278>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	bf94      	ite	ls
 8003cb8:	2301      	movls	r3, #1
 8003cba:	2300      	movhi	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e006      	b.n	8003cce <HAL_I2C_Init+0x92>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a7d      	ldr	r2, [pc, #500]	; (8003eb8 <HAL_I2C_Init+0x27c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	bf94      	ite	ls
 8003cc8:	2301      	movls	r3, #1
 8003cca:	2300      	movhi	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0e7      	b.n	8003ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a78      	ldr	r2, [pc, #480]	; (8003ebc <HAL_I2C_Init+0x280>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	0c9b      	lsrs	r3, r3, #18
 8003ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4a6a      	ldr	r2, [pc, #424]	; (8003eb0 <HAL_I2C_Init+0x274>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d802      	bhi.n	8003d10 <HAL_I2C_Init+0xd4>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	e009      	b.n	8003d24 <HAL_I2C_Init+0xe8>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	4a69      	ldr	r2, [pc, #420]	; (8003ec0 <HAL_I2C_Init+0x284>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	3301      	adds	r3, #1
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	495c      	ldr	r1, [pc, #368]	; (8003eb0 <HAL_I2C_Init+0x274>)
 8003d40:	428b      	cmp	r3, r1
 8003d42:	d819      	bhi.n	8003d78 <HAL_I2C_Init+0x13c>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e59      	subs	r1, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d52:	1c59      	adds	r1, r3, #1
 8003d54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d58:	400b      	ands	r3, r1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_I2C_Init+0x138>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1e59      	subs	r1, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d72:	e051      	b.n	8003e18 <HAL_I2C_Init+0x1dc>
 8003d74:	2304      	movs	r3, #4
 8003d76:	e04f      	b.n	8003e18 <HAL_I2C_Init+0x1dc>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d111      	bne.n	8003da4 <HAL_I2C_Init+0x168>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1e58      	subs	r0, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	440b      	add	r3, r1
 8003d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e012      	b.n	8003dca <HAL_I2C_Init+0x18e>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e58      	subs	r0, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	0099      	lsls	r1, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Init+0x196>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e022      	b.n	8003e18 <HAL_I2C_Init+0x1dc>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10e      	bne.n	8003df8 <HAL_I2C_Init+0x1bc>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1e58      	subs	r0, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	440b      	add	r3, r1
 8003de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dec:	3301      	adds	r3, #1
 8003dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df6:	e00f      	b.n	8003e18 <HAL_I2C_Init+0x1dc>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1e58      	subs	r0, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	0099      	lsls	r1, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	6809      	ldr	r1, [r1, #0]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6911      	ldr	r1, [r2, #16]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68d2      	ldr	r2, [r2, #12]
 8003e52:	4311      	orrs	r1, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	000186a0 	.word	0x000186a0
 8003eb4:	001e847f 	.word	0x001e847f
 8003eb8:	003d08ff 	.word	0x003d08ff
 8003ebc:	431bde83 	.word	0x431bde83
 8003ec0:	10624dd3 	.word	0x10624dd3

08003ec4 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	; 0x28
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7fd feb4 	bl	8001c40 <HAL_GetTick>
 8003ed8:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	f040 80ee 	bne.w	80040c4 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_I2C_Slave_Receive+0x30>
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0e6      	b.n	80040c6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_I2C_Slave_Receive+0x42>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e0df      	b.n	80040c6 <HAL_I2C_Slave_Receive+0x202>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d007      	beq.n	8003f2c <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f3a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2222      	movs	r2, #34	; 0x22
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a59      	ldr	r2, [pc, #356]	; (80040d0 <HAL_I2C_Slave_Receive+0x20c>)
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f7c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2200      	movs	r2, #0
 8003f86:	4953      	ldr	r1, [pc, #332]	; (80040d4 <HAL_I2C_Slave_Receive+0x210>)
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f001 fe81 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e096      	b.n	80040c6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	61bb      	str	r3, [r7, #24]
 8003fac:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8003fae:	e04e      	b.n	800404e <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f001 ff31 	bl	8005e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fce:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e078      	b.n	80040c6 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d11c      	bne.n	800404e <HAL_I2C_Slave_Receive+0x18a>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d018      	beq.n	800404e <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ac      	bne.n	8003fb0 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	6839      	ldr	r1, [r7, #0]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f001 fe6f 	bl	8005d3e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004074:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e025      	b.n	80040c6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	ffff0000 	.word	0xffff0000
 80040d4:	00010002 	.word	0x00010002

080040d8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	461a      	mov	r2, r3
 80040e4:	460b      	mov	r3, r1
 80040e6:	817b      	strh	r3, [r7, #10]
 80040e8:	4613      	mov	r3, r2
 80040ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	f040 810d 	bne.w	8004318 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80040fe:	4b89      	ldr	r3, [pc, #548]	; (8004324 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	4a88      	ldr	r2, [pc, #544]	; (8004328 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	0a1a      	lsrs	r2, r3, #8
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009a      	lsls	r2, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	3b01      	subs	r3, #1
 800411c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e0e3      	b.n	800431a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d0db      	beq.n	8004118 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_I2C_Master_Transmit_DMA+0x96>
 800416a:	2302      	movs	r3, #2
 800416c:	e0d5      	b.n	800431a <HAL_I2C_Master_Transmit_DMA+0x242>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d007      	beq.n	8004194 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2221      	movs	r2, #33	; 0x21
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2210      	movs	r2, #16
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	893a      	ldrh	r2, [r7, #8]
 80041c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a56      	ldr	r2, [pc, #344]	; (800432c <HAL_I2C_Master_Transmit_DMA+0x254>)
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80041d6:	897a      	ldrh	r2, [r7, #10]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d07b      	beq.n	80042dc <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02a      	beq.n	8004242 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	4a4f      	ldr	r2, [pc, #316]	; (8004330 <HAL_I2C_Master_Transmit_DMA+0x258>)
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	4a4e      	ldr	r2, [pc, #312]	; (8004334 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 80041fa:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	2200      	movs	r2, #0
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	2200      	movs	r2, #0
 800420a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	2200      	movs	r2, #0
 8004212:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	2200      	movs	r2, #0
 800421a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	4619      	mov	r1, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3310      	adds	r3, #16
 800422c:	461a      	mov	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	f7fd fef5 	bl	8002020 <HAL_DMA_Start_IT>
 8004236:	4603      	mov	r3, r0
 8004238:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d139      	bne.n	80042b4 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8004240:	e013      	b.n	800426a <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e057      	b.n	800431a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004280:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004290:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e02f      	b.n	8004314 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f043 0210 	orr.w	r2, r3, #16
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e01e      	b.n	800431a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ea:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fa:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004312:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e000      	b.n	800431a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000014 	.word	0x20000014
 8004328:	14f8b589 	.word	0x14f8b589
 800432c:	ffff0000 	.word	0xffff0000
 8004330:	0800591d 	.word	0x0800591d
 8004334:	08005ac7 	.word	0x08005ac7

08004338 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b20      	cmp	r3, #32
 800434a:	d124      	bne.n	8004396 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2228      	movs	r2, #40	; 0x28
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b01      	cmp	r3, #1
 8004360:	d007      	beq.n	8004372 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004380:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004390:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d003      	beq.n	80043dc <HAL_I2C_EV_IRQHandler+0x38>
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	f040 80c1 	bne.w	800455e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <HAL_I2C_EV_IRQHandler+0x6e>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80043fc:	d003      	beq.n	8004406 <HAL_I2C_EV_IRQHandler+0x62>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004404:	d101      	bne.n	800440a <HAL_I2C_EV_IRQHandler+0x66>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_I2C_EV_IRQHandler+0x68>
 800440a:	2300      	movs	r3, #0
 800440c:	2b01      	cmp	r3, #1
 800440e:	f000 8132 	beq.w	8004676 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <HAL_I2C_EV_IRQHandler+0x92>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	0a5b      	lsrs	r3, r3, #9
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d006      	beq.n	8004436 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f001 fd7c 	bl	8005f26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fcc8 	bl	8004dc4 <I2C_Master_SB>
 8004434:	e092      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	08db      	lsrs	r3, r3, #3
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_I2C_EV_IRQHandler+0xb2>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	0a5b      	lsrs	r3, r3, #9
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fd3e 	bl	8004ed0 <I2C_Master_ADD10>
 8004454:	e082      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_I2C_EV_IRQHandler+0xd2>
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	0a5b      	lsrs	r3, r3, #9
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fd58 	bl	8004f24 <I2C_Master_ADDR>
 8004474:	e072      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d03b      	beq.n	80044fa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004490:	f000 80f3 	beq.w	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	09db      	lsrs	r3, r3, #7
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00f      	beq.n	80044c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	0a9b      	lsrs	r3, r3, #10
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f938 	bl	800472e <I2C_MasterTransmit_TXE>
 80044be:	e04d      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80d6 	beq.w	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	0a5b      	lsrs	r3, r3, #9
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80cf 	beq.w	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044dc:	7bbb      	ldrb	r3, [r7, #14]
 80044de:	2b21      	cmp	r3, #33	; 0x21
 80044e0:	d103      	bne.n	80044ea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9bf 	bl	8004866 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e8:	e0c7      	b.n	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	f040 80c4 	bne.w	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa2d 	bl	8004952 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f8:	e0bf      	b.n	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004508:	f000 80b7 	beq.w	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00f      	beq.n	8004538 <HAL_I2C_EV_IRQHandler+0x194>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	0a9b      	lsrs	r3, r3, #10
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <HAL_I2C_EV_IRQHandler+0x194>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 faa2 	bl	8004a7a <I2C_MasterReceive_RXNE>
 8004536:	e011      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 809a 	beq.w	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	0a5b      	lsrs	r3, r3, #9
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8093 	beq.w	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fb4b 	bl	8004bf0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800455a:	e08e      	b.n	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
 800455c:	e08d      	b.n	800467a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e007      	b.n	8004580 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <HAL_I2C_EV_IRQHandler+0x20e>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	0a5b      	lsrs	r3, r3, #9
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00c      	beq.n	80045b2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 ff09 	bl	80053c2 <I2C_Slave_ADDR>
 80045b0:	e066      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x22e>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	0a5b      	lsrs	r3, r3, #9
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 ff44 	bl	8005458 <I2C_Slave_STOPF>
 80045d0:	e056      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045d2:	7bbb      	ldrb	r3, [r7, #14]
 80045d4:	2b21      	cmp	r3, #33	; 0x21
 80045d6:	d002      	beq.n	80045de <HAL_I2C_EV_IRQHandler+0x23a>
 80045d8:	7bbb      	ldrb	r3, [r7, #14]
 80045da:	2b29      	cmp	r3, #41	; 0x29
 80045dc:	d125      	bne.n	800462a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	09db      	lsrs	r3, r3, #7
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00f      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x266>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	0a9b      	lsrs	r3, r3, #10
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x266>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fe1f 	bl	8005246 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004608:	e039      	b.n	800467e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d033      	beq.n	800467e <HAL_I2C_EV_IRQHandler+0x2da>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02d      	beq.n	800467e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fe4c 	bl	80052c0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004628:	e029      	b.n	800467e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	099b      	lsrs	r3, r3, #6
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00f      	beq.n	8004656 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	0a9b      	lsrs	r3, r3, #10
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fe57 	bl	8005302 <I2C_SlaveReceive_RXNE>
 8004654:	e014      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	0a5b      	lsrs	r3, r3, #9
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fe85 	bl	800537e <I2C_SlaveReceive_BTF>
 8004674:	e004      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800467e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	70fb      	strb	r3, [r7, #3]
 80046ce:	4613      	mov	r3, r2
 80046d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004744:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d150      	bne.n	80047f6 <I2C_MasterTransmit_TXE+0xc8>
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b21      	cmp	r3, #33	; 0x21
 8004758:	d14d      	bne.n	80047f6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d01d      	beq.n	800479c <I2C_MasterTransmit_TXE+0x6e>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b20      	cmp	r3, #32
 8004764:	d01a      	beq.n	800479c <I2C_MasterTransmit_TXE+0x6e>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800476c:	d016      	beq.n	800479c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800477c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2211      	movs	r2, #17
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff ff76 	bl	8004686 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800479a:	e060      	b.n	800485e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047aa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d107      	bne.n	80047e6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ff7d 	bl	80046de <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047e4:	e03b      	b.n	800485e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff49 	bl	8004686 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047f4:	e033      	b.n	800485e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	2b21      	cmp	r3, #33	; 0x21
 80047fa:	d005      	beq.n	8004808 <I2C_MasterTransmit_TXE+0xda>
 80047fc:	7bbb      	ldrb	r3, [r7, #14]
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d12d      	bne.n	800485e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b22      	cmp	r3, #34	; 0x22
 8004806:	d12a      	bne.n	800485e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004820:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004822:	e01c      	b.n	800485e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d103      	bne.n	8004838 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f88e 	bl	8004952 <I2C_MemoryTransmit_TXE_BTF>
}
 8004836:	e012      	b.n	800485e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800485c:	e7ff      	b.n	800485e <I2C_MasterTransmit_TXE+0x130>
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b21      	cmp	r3, #33	; 0x21
 800487e:	d164      	bne.n	800494a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d012      	beq.n	80048b0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80048ae:	e04c      	b.n	800494a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d01d      	beq.n	80048f2 <I2C_MasterTransmit_BTF+0x8c>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d01a      	beq.n	80048f2 <I2C_MasterTransmit_BTF+0x8c>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048c2:	d016      	beq.n	80048f2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048d2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2211      	movs	r2, #17
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff fecb 	bl	8004686 <HAL_I2C_MasterTxCpltCallback>
}
 80048f0:	e02b      	b.n	800494a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004900:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d107      	bne.n	800493c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fed2 	bl	80046de <HAL_I2C_MemTxCpltCallback>
}
 800493a:	e006      	b.n	800494a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fe9e 	bl	8004686 <HAL_I2C_MasterTxCpltCallback>
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004966:	2b00      	cmp	r3, #0
 8004968:	d11d      	bne.n	80049a6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	2b01      	cmp	r3, #1
 8004970:	d10b      	bne.n	800498a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	b2da      	uxtb	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004982:	1c9a      	adds	r2, r3, #2
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004988:	e073      	b.n	8004a72 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498e:	b29b      	uxth	r3, r3
 8004990:	121b      	asrs	r3, r3, #8
 8004992:	b2da      	uxtb	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049a4:	e065      	b.n	8004a72 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10b      	bne.n	80049c6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049c4:	e055      	b.n	8004a72 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d151      	bne.n	8004a72 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b22      	cmp	r3, #34	; 0x22
 80049d2:	d10d      	bne.n	80049f0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049ee:	e040      	b.n	8004a72 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d015      	beq.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b21      	cmp	r3, #33	; 0x21
 80049fe:	d112      	bne.n	8004a26 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a24:	e025      	b.n	8004a72 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d120      	bne.n	8004a72 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b21      	cmp	r3, #33	; 0x21
 8004a34:	d11d      	bne.n	8004a72 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a44:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a54:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fe36 	bl	80046de <HAL_I2C_MemTxCpltCallback>
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b22      	cmp	r3, #34	; 0x22
 8004a8c:	f040 80ac 	bne.w	8004be8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d921      	bls.n	8004ae2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	f040 808c 	bne.w	8004be8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ade:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004ae0:	e082      	b.n	8004be8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d075      	beq.n	8004bd6 <I2C_MasterReceive_RXNE+0x15c>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d002      	beq.n	8004af6 <I2C_MasterReceive_RXNE+0x7c>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d16f      	bne.n	8004bd6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f95e 	bl	8005db8 <I2C_WaitOnSTOPRequestThroughIT>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d142      	bne.n	8004b88 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b20:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d10a      	bne.n	8004b72 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fdc1 	bl	80046f2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b70:	e03a      	b.n	8004be8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2212      	movs	r2, #18
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fd8a 	bl	800469a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b86:	e02f      	b.n	8004be8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b96:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff fd99 	bl	8004706 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bd4:	e008      	b.n	8004be8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be4:	605a      	str	r2, [r3, #4]
}
 8004be6:	e7ff      	b.n	8004be8 <I2C_MasterReceive_RXNE+0x16e>
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d11b      	bne.n	8004c40 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c16:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004c3e:	e0bd      	b.n	8004dbc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d129      	bne.n	8004c9e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c58:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d00a      	beq.n	8004c76 <I2C_MasterReceive_BTF+0x86>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d007      	beq.n	8004c76 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c9c:	e08e      	b.n	8004dbc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d176      	bne.n	8004d96 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d002      	beq.n	8004cb4 <I2C_MasterReceive_BTF+0xc4>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d108      	bne.n	8004cc6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e019      	b.n	8004cfa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d002      	beq.n	8004cd2 <I2C_MasterReceive_BTF+0xe2>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d108      	bne.n	8004ce4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e00a      	b.n	8004cfa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d007      	beq.n	8004cfa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d54:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d10a      	bne.n	8004d80 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fcba 	bl	80046f2 <HAL_I2C_MemRxCpltCallback>
}
 8004d7e:	e01d      	b.n	8004dbc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2212      	movs	r2, #18
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fc83 	bl	800469a <HAL_I2C_MasterRxCpltCallback>
}
 8004d94:	e012      	b.n	8004dbc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d117      	bne.n	8004e08 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004df0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004df2:	e067      	b.n	8004ec4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	611a      	str	r2, [r3, #16]
}
 8004e06:	e05d      	b.n	8004ec4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e10:	d133      	bne.n	8004e7a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b21      	cmp	r3, #33	; 0x21
 8004e1c:	d109      	bne.n	8004e32 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e2e:	611a      	str	r2, [r3, #16]
 8004e30:	e008      	b.n	8004e44 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <I2C_Master_SB+0x92>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d108      	bne.n	8004e68 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d032      	beq.n	8004ec4 <I2C_Master_SB+0x100>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d02d      	beq.n	8004ec4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e76:	605a      	str	r2, [r3, #4]
}
 8004e78:	e024      	b.n	8004ec4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10e      	bne.n	8004ea0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	11db      	asrs	r3, r3, #7
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f003 0306 	and.w	r3, r3, #6
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f063 030f 	orn	r3, r3, #15
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	611a      	str	r2, [r3, #16]
}
 8004e9e:	e011      	b.n	8004ec4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10d      	bne.n	8004ec4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	11db      	asrs	r3, r3, #7
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f003 0306 	and.w	r3, r3, #6
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f063 030e 	orn	r3, r3, #14
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <I2C_Master_ADD10+0x26>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00c      	beq.n	8004f18 <I2C_Master_ADD10+0x48>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d007      	beq.n	8004f18 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f16:	605a      	str	r2, [r3, #4]
  }
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b091      	sub	sp, #68	; 0x44
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b22      	cmp	r3, #34	; 0x22
 8004f4c:	f040 8169 	bne.w	8005222 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10f      	bne.n	8004f78 <I2C_Master_ADDR+0x54>
 8004f58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d10b      	bne.n	8004f78 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f60:	2300      	movs	r3, #0
 8004f62:	633b      	str	r3, [r7, #48]	; 0x30
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	633b      	str	r3, [r7, #48]	; 0x30
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	e160      	b.n	800523a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d11d      	bne.n	8004fbc <I2C_Master_ADDR+0x98>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f88:	d118      	bne.n	8004fbc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	651a      	str	r2, [r3, #80]	; 0x50
 8004fba:	e13e      	b.n	800523a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d113      	bne.n	8004fee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e115      	b.n	800521a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	f040 808a 	bne.w	800510e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005000:	d137      	bne.n	8005072 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005010:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005020:	d113      	bne.n	800504a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	e0e7      	b.n	800521a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504a:	2300      	movs	r3, #0
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	623b      	str	r3, [r7, #32]
 800505e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e0d3      	b.n	800521a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	2b08      	cmp	r3, #8
 8005076:	d02e      	beq.n	80050d6 <I2C_Master_ADDR+0x1b2>
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	2b20      	cmp	r3, #32
 800507c:	d02b      	beq.n	80050d6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	2b12      	cmp	r3, #18
 8005082:	d102      	bne.n	800508a <I2C_Master_ADDR+0x166>
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	2b01      	cmp	r3, #1
 8005088:	d125      	bne.n	80050d6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	2b04      	cmp	r3, #4
 800508e:	d00e      	beq.n	80050ae <I2C_Master_ADDR+0x18a>
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	2b02      	cmp	r3, #2
 8005094:	d00b      	beq.n	80050ae <I2C_Master_ADDR+0x18a>
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b10      	cmp	r3, #16
 800509a:	d008      	beq.n	80050ae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e007      	b.n	80050be <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	e0a1      	b.n	800521a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e085      	b.n	800521a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d14d      	bne.n	80051b4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	2b04      	cmp	r3, #4
 800511c:	d016      	beq.n	800514c <I2C_Master_ADDR+0x228>
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2b02      	cmp	r3, #2
 8005122:	d013      	beq.n	800514c <I2C_Master_ADDR+0x228>
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	2b10      	cmp	r3, #16
 8005128:	d010      	beq.n	800514c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	e007      	b.n	800515c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800515a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516a:	d117      	bne.n	800519c <I2C_Master_ADDR+0x278>
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005172:	d00b      	beq.n	800518c <I2C_Master_ADDR+0x268>
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	2b01      	cmp	r3, #1
 8005178:	d008      	beq.n	800518c <I2C_Master_ADDR+0x268>
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2b08      	cmp	r3, #8
 800517e:	d005      	beq.n	800518c <I2C_Master_ADDR+0x268>
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	2b10      	cmp	r3, #16
 8005184:	d002      	beq.n	800518c <I2C_Master_ADDR+0x268>
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2b20      	cmp	r3, #32
 800518a:	d107      	bne.n	800519c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800519a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	e032      	b.n	800521a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d2:	d117      	bne.n	8005204 <I2C_Master_ADDR+0x2e0>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051da:	d00b      	beq.n	80051f4 <I2C_Master_ADDR+0x2d0>
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d008      	beq.n	80051f4 <I2C_Master_ADDR+0x2d0>
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d005      	beq.n	80051f4 <I2C_Master_ADDR+0x2d0>
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d002      	beq.n	80051f4 <I2C_Master_ADDR+0x2d0>
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d107      	bne.n	8005204 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005202:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005220:	e00b      	b.n	800523a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	e7ff      	b.n	800523a <I2C_Master_ADDR+0x316>
 800523a:	bf00      	nop
 800523c:	3744      	adds	r7, #68	; 0x44
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005254:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02b      	beq.n	80052b8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d114      	bne.n	80052b8 <I2C_SlaveTransmit_TXE+0x72>
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b29      	cmp	r3, #41	; 0x29
 8005292:	d111      	bne.n	80052b8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2221      	movs	r2, #33	; 0x21
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2228      	movs	r2, #40	; 0x28
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff f9fb 	bl	80046ae <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d011      	beq.n	80052f6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02c      	beq.n	8005376 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d114      	bne.n	8005376 <I2C_SlaveReceive_RXNE+0x74>
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b2a      	cmp	r3, #42	; 0x2a
 8005350:	d111      	bne.n	8005376 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005360:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2222      	movs	r2, #34	; 0x22
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2228      	movs	r2, #40	; 0x28
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fb f92f 	bl	80005d4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d012      	beq.n	80053b6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053dc:	2b28      	cmp	r3, #40	; 0x28
 80053de:	d127      	bne.n	8005430 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	089b      	lsrs	r3, r3, #2
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	09db      	lsrs	r3, r3, #7
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	81bb      	strh	r3, [r7, #12]
 8005412:	e002      	b.n	800541a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005422:	89ba      	ldrh	r2, [r7, #12]
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff f94a 	bl	80046c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800542e:	e00e      	b.n	800544e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005476:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005478:	2300      	movs	r3, #0
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b4:	d172      	bne.n	800559c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b22      	cmp	r3, #34	; 0x22
 80054ba:	d002      	beq.n	80054c2 <I2C_Slave_STOPF+0x6a>
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b2a      	cmp	r3, #42	; 0x2a
 80054c0:	d135      	bne.n	800552e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f043 0204 	orr.w	r2, r3, #4
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fd f804 	bl	8002508 <HAL_DMA_GetState>
 8005500:	4603      	mov	r3, r0
 8005502:	2b01      	cmp	r3, #1
 8005504:	d049      	beq.n	800559a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	4a69      	ldr	r2, [pc, #420]	; (80056b0 <I2C_Slave_STOPF+0x258>)
 800550c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	4618      	mov	r0, r3
 8005514:	f7fc fe4c 	bl	80021b0 <HAL_DMA_Abort_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d03d      	beq.n	800559a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005528:	4610      	mov	r0, r2
 800552a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800552c:	e035      	b.n	800559a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b29a      	uxth	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f043 0204 	orr.w	r2, r3, #4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005560:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	4618      	mov	r0, r3
 8005568:	f7fc ffce 	bl	8002508 <HAL_DMA_GetState>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d014      	beq.n	800559c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005576:	4a4e      	ldr	r2, [pc, #312]	; (80056b0 <I2C_Slave_STOPF+0x258>)
 8005578:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	4618      	mov	r0, r3
 8005580:	f7fc fe16 	bl	80021b0 <HAL_DMA_Abort_IT>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d008      	beq.n	800559c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005594:	4610      	mov	r0, r2
 8005596:	4798      	blx	r3
 8005598:	e000      	b.n	800559c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800559a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d03e      	beq.n	8005624 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d112      	bne.n	80055da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d112      	bne.n	800560e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f043 0204 	orr.w	r2, r3, #4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f843 	bl	80056b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005632:	e039      	b.n	80056a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b2a      	cmp	r3, #42	; 0x2a
 8005638:	d109      	bne.n	800564e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2228      	movs	r2, #40	; 0x28
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fa ffc3 	bl	80005d4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b28      	cmp	r3, #40	; 0x28
 8005658:	d111      	bne.n	800567e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <I2C_Slave_STOPF+0x25c>)
 800565e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fa ff9c 	bl	80005b4 <HAL_I2C_ListenCpltCallback>
}
 800567c:	e014      	b.n	80056a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	2b22      	cmp	r3, #34	; 0x22
 8005684:	d002      	beq.n	800568c <I2C_Slave_STOPF+0x234>
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b22      	cmp	r3, #34	; 0x22
 800568a:	d10d      	bne.n	80056a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fa ff96 	bl	80005d4 <HAL_I2C_SlaveRxCpltCallback>
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	08005b41 	.word	0x08005b41
 80056b4:	ffff0000 	.word	0xffff0000

080056b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056d0:	7bbb      	ldrb	r3, [r7, #14]
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d002      	beq.n	80056dc <I2C_ITError+0x24>
 80056d6:	7bbb      	ldrb	r3, [r7, #14]
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d10a      	bne.n	80056f2 <I2C_ITError+0x3a>
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b22      	cmp	r3, #34	; 0x22
 80056e0:	d107      	bne.n	80056f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056f8:	2b28      	cmp	r3, #40	; 0x28
 80056fa:	d107      	bne.n	800570c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2228      	movs	r2, #40	; 0x28
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800570a:	e015      	b.n	8005738 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571a:	d00a      	beq.n	8005732 <I2C_ITError+0x7a>
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b60      	cmp	r3, #96	; 0x60
 8005720:	d007      	beq.n	8005732 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005746:	d162      	bne.n	800580e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005756:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d020      	beq.n	80057a8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	4a6a      	ldr	r2, [pc, #424]	; (8005914 <I2C_ITError+0x25c>)
 800576c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	4618      	mov	r0, r3
 8005774:	f7fc fd1c 	bl	80021b0 <HAL_DMA_Abort_IT>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8089 	beq.w	8005892 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057a2:	4610      	mov	r0, r2
 80057a4:	4798      	blx	r3
 80057a6:	e074      	b.n	8005892 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	4a59      	ldr	r2, [pc, #356]	; (8005914 <I2C_ITError+0x25c>)
 80057ae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fc fcfb 	bl	80021b0 <HAL_DMA_Abort_IT>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d068      	beq.n	8005892 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d10b      	bne.n	80057e6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005808:	4610      	mov	r0, r2
 800580a:	4798      	blx	r3
 800580c:	e041      	b.n	8005892 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b60      	cmp	r3, #96	; 0x60
 8005818:	d125      	bne.n	8005866 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b40      	cmp	r3, #64	; 0x40
 8005834:	d10b      	bne.n	800584e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fe ff5b 	bl	800471a <HAL_I2C_AbortCpltCallback>
 8005864:	e015      	b.n	8005892 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d10b      	bne.n	800588c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fe ff3a 	bl	8004706 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10e      	bne.n	80058c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d113      	bne.n	800590c <I2C_ITError+0x254>
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b28      	cmp	r3, #40	; 0x28
 80058e8:	d110      	bne.n	800590c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <I2C_ITError+0x260>)
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fa fe54 	bl	80005b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	08005b41 	.word	0x08005b41
 8005918:	ffff0000 	.word	0xffff0000

0800591c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005930:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005938:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800594e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595c:	2200      	movs	r2, #0
 800595e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	2200      	movs	r2, #0
 800596e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005970:	7cfb      	ldrb	r3, [r7, #19]
 8005972:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005976:	2b21      	cmp	r3, #33	; 0x21
 8005978:	d007      	beq.n	800598a <I2C_DMAXferCplt+0x6e>
 800597a:	7cfb      	ldrb	r3, [r7, #19]
 800597c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005980:	2b22      	cmp	r3, #34	; 0x22
 8005982:	d131      	bne.n	80059e8 <I2C_DMAXferCplt+0xcc>
 8005984:	7cbb      	ldrb	r3, [r7, #18]
 8005986:	2b20      	cmp	r3, #32
 8005988:	d12e      	bne.n	80059e8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005998:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2200      	movs	r2, #0
 800599e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	2b29      	cmp	r3, #41	; 0x29
 80059a4:	d10a      	bne.n	80059bc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2221      	movs	r2, #33	; 0x21
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2228      	movs	r2, #40	; 0x28
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	f7fe fe7a 	bl	80046ae <HAL_I2C_SlaveTxCpltCallback>
 80059ba:	e00c      	b.n	80059d6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059bc:	7cfb      	ldrb	r3, [r7, #19]
 80059be:	2b2a      	cmp	r3, #42	; 0x2a
 80059c0:	d109      	bne.n	80059d6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2222      	movs	r2, #34	; 0x22
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2228      	movs	r2, #40	; 0x28
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059d0:	6978      	ldr	r0, [r7, #20]
 80059d2:	f7fa fdff 	bl	80005d4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80059e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80059e6:	e06a      	b.n	8005abe <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d064      	beq.n	8005abe <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d107      	bne.n	8005a0e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a1c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a24:	d009      	beq.n	8005a3a <I2C_DMAXferCplt+0x11e>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d006      	beq.n	8005a3a <I2C_DMAXferCplt+0x11e>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a32:	d002      	beq.n	8005a3a <I2C_DMAXferCplt+0x11e>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d107      	bne.n	8005a4a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a48:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a58:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a68:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005a78:	6978      	ldr	r0, [r7, #20]
 8005a7a:	f7fe fe44 	bl	8004706 <HAL_I2C_ErrorCallback>
}
 8005a7e:	e01e      	b.n	8005abe <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d10a      	bne.n	8005aaa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005aa2:	6978      	ldr	r0, [r7, #20]
 8005aa4:	f7fe fe25 	bl	80046f2 <HAL_I2C_MemRxCpltCallback>
}
 8005aa8:	e009      	b.n	8005abe <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2212      	movs	r2, #18
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ab8:	6978      	ldr	r0, [r7, #20]
 8005aba:	f7fe fdee 	bl	800469a <HAL_I2C_MasterRxCpltCallback>
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	2200      	movs	r2, #0
 8005af2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fc fd15 	bl	8002524 <HAL_DMA_GetError>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d01b      	beq.n	8005b38 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f043 0210 	orr.w	r2, r3, #16
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7fe fde7 	bl	8004706 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b5a:	4b4b      	ldr	r3, [pc, #300]	; (8005c88 <I2C_DMAAbort+0x148>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	08db      	lsrs	r3, r3, #3
 8005b60:	4a4a      	ldr	r2, [pc, #296]	; (8005c8c <I2C_DMAAbort+0x14c>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	0a1a      	lsrs	r2, r3, #8
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00da      	lsls	r2, r3, #3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f043 0220 	orr.w	r2, r3, #32
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b86:	e00a      	b.n	8005b9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9c:	d0ea      	beq.n	8005b74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	2200      	movs	r2, #0
 8005bac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	2200      	movs	r2, #0
 8005bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bcc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	2200      	movs	r2, #0
 8005be2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b60      	cmp	r3, #96	; 0x60
 8005c0e:	d10e      	bne.n	8005c2e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2200      	movs	r2, #0
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	f7fe fd77 	bl	800471a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c2c:	e027      	b.n	8005c7e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c34:	2b28      	cmp	r3, #40	; 0x28
 8005c36:	d117      	bne.n	8005c68 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2228      	movs	r2, #40	; 0x28
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c66:	e007      	b.n	8005c78 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c78:	6978      	ldr	r0, [r7, #20]
 8005c7a:	f7fe fd44 	bl	8004706 <HAL_I2C_ErrorCallback>
}
 8005c7e:	bf00      	nop
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000014 	.word	0x20000014
 8005c8c:	14f8b589 	.word	0x14f8b589

08005c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ca0:	e025      	b.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca8:	d021      	beq.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005caa:	f7fb ffc9 	bl	8001c40 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d116      	bne.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f043 0220 	orr.w	r2, r3, #32
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e023      	b.n	8005d36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d10d      	bne.n	8005d14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4013      	ands	r3, r2
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	e00c      	b.n	8005d2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	43da      	mvns	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bf0c      	ite	eq
 8005d26:	2301      	moveq	r3, #1
 8005d28:	2300      	movne	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d0b6      	beq.n	8005ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d4a:	e029      	b.n	8005da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f8bb 	bl	8005ec8 <I2C_IsAcknowledgeFailed>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e029      	b.n	8005db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5c:	f7fb ff70 	bl	8001c40 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d302      	bcc.n	8005d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d116      	bne.n	8005da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f043 0220 	orr.w	r2, r3, #32
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e007      	b.n	8005db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d1ce      	bne.n	8005d4c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dc4:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	08db      	lsrs	r3, r3, #3
 8005dca:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd0:	0a1a      	lsrs	r2, r3, #8
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e008      	b.n	8005e08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e04:	d0e9      	beq.n	8005dda <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	20000014 	.word	0x20000014
 8005e18:	14f8b589 	.word	0x14f8b589

08005e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e28:	e042      	b.n	8005eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d119      	bne.n	8005e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0210 	mvn.w	r2, #16
 8005e40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e029      	b.n	8005ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6c:	f7fb fee8 	bl	8001c40 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d302      	bcc.n	8005e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d116      	bne.n	8005eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	f043 0220 	orr.w	r2, r3, #32
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e007      	b.n	8005ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d1b5      	bne.n	8005e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ede:	d11b      	bne.n	8005f18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ee8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	f043 0204 	orr.w	r2, r3, #4
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f36:	d103      	bne.n	8005f40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f3e:	e007      	b.n	8005f50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f48:	d102      	bne.n	8005f50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d129      	bne.n	8005fc6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2224      	movs	r2, #36	; 0x24
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0210 	bic.w	r2, r2, #16
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0201 	orr.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e000      	b.n	8005fc8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005fc6:	2302      	movs	r3, #2
  }
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d12a      	bne.n	8006044 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2224      	movs	r2, #36	; 0x24
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800600e:	89fb      	ldrh	r3, [r7, #14]
 8006010:	f023 030f 	bic.w	r3, r3, #15
 8006014:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	b29a      	uxth	r2, r3
 800601a:	89fb      	ldrh	r3, [r7, #14]
 800601c:	4313      	orrs	r3, r2
 800601e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	89fa      	ldrh	r2, [r7, #14]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e000      	b.n	8006046 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006044:	2302      	movs	r3, #2
  }
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006054:	b08f      	sub	sp, #60	; 0x3c
 8006056:	af0a      	add	r7, sp, #40	; 0x28
 8006058:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e10f      	b.n	8006284 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fb fa02 	bl	8001488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2203      	movs	r2, #3
 8006088:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	d102      	bne.n	800609e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f002 fcc3 	bl	8008a2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	687e      	ldr	r6, [r7, #4]
 80060b0:	466d      	mov	r5, sp
 80060b2:	f106 0410 	add.w	r4, r6, #16
 80060b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80060c6:	1d33      	adds	r3, r6, #4
 80060c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060ca:	6838      	ldr	r0, [r7, #0]
 80060cc:	f002 fc4e 	bl	800896c <USB_CoreInit>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e0d0      	b.n	8006284 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 fcb1 	bl	8008a50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	e04a      	b.n	800618a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060f4:	7bfa      	ldrb	r2, [r7, #15]
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	4613      	mov	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	333d      	adds	r3, #61	; 0x3d
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006108:	7bfa      	ldrb	r2, [r7, #15]
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4613      	mov	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	333c      	adds	r3, #60	; 0x3c
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800611c:	7bfa      	ldrb	r2, [r7, #15]
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	b298      	uxth	r0, r3
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	3344      	adds	r3, #68	; 0x44
 8006130:	4602      	mov	r2, r0
 8006132:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006134:	7bfa      	ldrb	r2, [r7, #15]
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	3340      	adds	r3, #64	; 0x40
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006148:	7bfa      	ldrb	r2, [r7, #15]
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	4613      	mov	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	3348      	adds	r3, #72	; 0x48
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800615c:	7bfa      	ldrb	r2, [r7, #15]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	334c      	adds	r3, #76	; 0x4c
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006170:	7bfa      	ldrb	r2, [r7, #15]
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	4613      	mov	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	440b      	add	r3, r1
 800617e:	3354      	adds	r3, #84	; 0x54
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	3301      	adds	r3, #1
 8006188:	73fb      	strb	r3, [r7, #15]
 800618a:	7bfa      	ldrb	r2, [r7, #15]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d3af      	bcc.n	80060f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]
 8006198:	e044      	b.n	8006224 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061b0:	7bfa      	ldrb	r2, [r7, #15]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80061c2:	7bfa      	ldrb	r2, [r7, #15]
 80061c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061c6:	7bfa      	ldrb	r2, [r7, #15]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061dc:	7bfa      	ldrb	r2, [r7, #15]
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061f2:	7bfa      	ldrb	r2, [r7, #15]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006208:	7bfa      	ldrb	r2, [r7, #15]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	3301      	adds	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	7bfa      	ldrb	r2, [r7, #15]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d3b5      	bcc.n	800619a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	687e      	ldr	r6, [r7, #4]
 8006236:	466d      	mov	r5, sp
 8006238:	f106 0410 	add.w	r4, r6, #16
 800623c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800623e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006244:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006248:	e885 0003 	stmia.w	r5, {r0, r1}
 800624c:	1d33      	adds	r3, r6, #4
 800624e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006250:	6838      	ldr	r0, [r7, #0]
 8006252:	f002 fc49 	bl	8008ae8 <USB_DevInit>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e00d      	b.n	8006284 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f002 fe14 	bl	8008eaa <USB_DevDisconnect>

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800628c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e267      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d075      	beq.n	8006396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062aa:	4b88      	ldr	r3, [pc, #544]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d00c      	beq.n	80062d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b6:	4b85      	ldr	r3, [pc, #532]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d112      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062c2:	4b82      	ldr	r3, [pc, #520]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ce:	d10b      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d0:	4b7e      	ldr	r3, [pc, #504]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d05b      	beq.n	8006394 <HAL_RCC_OscConfig+0x108>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d157      	bne.n	8006394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e242      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f0:	d106      	bne.n	8006300 <HAL_RCC_OscConfig+0x74>
 80062f2:	4b76      	ldr	r3, [pc, #472]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a75      	ldr	r2, [pc, #468]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e01d      	b.n	800633c <HAL_RCC_OscConfig+0xb0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006308:	d10c      	bne.n	8006324 <HAL_RCC_OscConfig+0x98>
 800630a:	4b70      	ldr	r3, [pc, #448]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6f      	ldr	r2, [pc, #444]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b6d      	ldr	r3, [pc, #436]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a6c      	ldr	r2, [pc, #432]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800631c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e00b      	b.n	800633c <HAL_RCC_OscConfig+0xb0>
 8006324:	4b69      	ldr	r3, [pc, #420]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a68      	ldr	r2, [pc, #416]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b66      	ldr	r3, [pc, #408]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a65      	ldr	r2, [pc, #404]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800633a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006344:	f7fb fc7c 	bl	8001c40 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634c:	f7fb fc78 	bl	8001c40 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e207      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b5b      	ldr	r3, [pc, #364]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0xc0>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636c:	f7fb fc68 	bl	8001c40 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006374:	f7fb fc64 	bl	8001c40 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1f3      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	4b51      	ldr	r3, [pc, #324]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0xe8>
 8006392:	e000      	b.n	8006396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d063      	beq.n	800646a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063a2:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ae:	4b47      	ldr	r3, [pc, #284]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d11c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ba:	4b44      	ldr	r3, [pc, #272]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063c6:	4b41      	ldr	r3, [pc, #260]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_RCC_OscConfig+0x152>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d001      	beq.n	80063de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e1c7      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063de:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4937      	ldr	r1, [pc, #220]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	e03a      	b.n	800646a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063fc:	4b34      	ldr	r3, [pc, #208]	; (80064d0 <HAL_RCC_OscConfig+0x244>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fb fc1d 	bl	8001c40 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800640a:	f7fb fc19 	bl	8001c40 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e1a8      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641c:	4b2b      	ldr	r3, [pc, #172]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006428:	4b28      	ldr	r3, [pc, #160]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4925      	ldr	r1, [pc, #148]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006438:	4313      	orrs	r3, r2
 800643a:	600b      	str	r3, [r1, #0]
 800643c:	e015      	b.n	800646a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800643e:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <HAL_RCC_OscConfig+0x244>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fb fbfc 	bl	8001c40 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800644c:	f7fb fbf8 	bl	8001c40 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e187      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645e:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d036      	beq.n	80064e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800647e:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <HAL_RCC_OscConfig+0x248>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006484:	f7fb fbdc 	bl	8001c40 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800648c:	f7fb fbd8 	bl	8001c40 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e167      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80064a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x200>
 80064aa:	e01b      	b.n	80064e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCC_OscConfig+0x248>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fb fbc5 	bl	8001c40 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b8:	e00e      	b.n	80064d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ba:	f7fb fbc1 	bl	8001c40 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d907      	bls.n	80064d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e150      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
 80064cc:	40023800 	.word	0x40023800
 80064d0:	42470000 	.word	0x42470000
 80064d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d8:	4b88      	ldr	r3, [pc, #544]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80064da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1ea      	bne.n	80064ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 8097 	beq.w	8006620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f6:	4b81      	ldr	r3, [pc, #516]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10f      	bne.n	8006522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	4b7d      	ldr	r3, [pc, #500]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	4a7c      	ldr	r2, [pc, #496]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006510:	6413      	str	r3, [r2, #64]	; 0x40
 8006512:	4b7a      	ldr	r3, [pc, #488]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006522:	4b77      	ldr	r3, [pc, #476]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d118      	bne.n	8006560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800652e:	4b74      	ldr	r3, [pc, #464]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a73      	ldr	r2, [pc, #460]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800653a:	f7fb fb81 	bl	8001c40 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006542:	f7fb fb7d 	bl	8001c40 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e10c      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006554:	4b6a      	ldr	r3, [pc, #424]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0f0      	beq.n	8006542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d106      	bne.n	8006576 <HAL_RCC_OscConfig+0x2ea>
 8006568:	4b64      	ldr	r3, [pc, #400]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656c:	4a63      	ldr	r2, [pc, #396]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	6713      	str	r3, [r2, #112]	; 0x70
 8006574:	e01c      	b.n	80065b0 <HAL_RCC_OscConfig+0x324>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b05      	cmp	r3, #5
 800657c:	d10c      	bne.n	8006598 <HAL_RCC_OscConfig+0x30c>
 800657e:	4b5f      	ldr	r3, [pc, #380]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	4a5e      	ldr	r2, [pc, #376]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006584:	f043 0304 	orr.w	r3, r3, #4
 8006588:	6713      	str	r3, [r2, #112]	; 0x70
 800658a:	4b5c      	ldr	r3, [pc, #368]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658e:	4a5b      	ldr	r2, [pc, #364]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	6713      	str	r3, [r2, #112]	; 0x70
 8006596:	e00b      	b.n	80065b0 <HAL_RCC_OscConfig+0x324>
 8006598:	4b58      	ldr	r3, [pc, #352]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659c:	4a57      	ldr	r2, [pc, #348]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	6713      	str	r3, [r2, #112]	; 0x70
 80065a4:	4b55      	ldr	r3, [pc, #340]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a54      	ldr	r2, [pc, #336]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065aa:	f023 0304 	bic.w	r3, r3, #4
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b8:	f7fb fb42 	bl	8001c40 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065be:	e00a      	b.n	80065d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c0:	f7fb fb3e 	bl	8001c40 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e0cb      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d6:	4b49      	ldr	r3, [pc, #292]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0ee      	beq.n	80065c0 <HAL_RCC_OscConfig+0x334>
 80065e2:	e014      	b.n	800660e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e4:	f7fb fb2c 	bl	8001c40 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ea:	e00a      	b.n	8006602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ec:	f7fb fb28 	bl	8001c40 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e0b5      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006602:	4b3e      	ldr	r3, [pc, #248]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ee      	bne.n	80065ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006614:	4b39      	ldr	r3, [pc, #228]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	4a38      	ldr	r2, [pc, #224]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800661a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800661e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80a1 	beq.w	800676c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 030c 	and.w	r3, r3, #12
 8006632:	2b08      	cmp	r3, #8
 8006634:	d05c      	beq.n	80066f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d141      	bne.n	80066c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663e:	4b31      	ldr	r3, [pc, #196]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006644:	f7fb fafc 	bl	8001c40 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664c:	f7fb faf8 	bl	8001c40 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e087      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665e:	4b27      	ldr	r3, [pc, #156]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	3b01      	subs	r3, #1
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	491b      	ldr	r1, [pc, #108]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006690:	4313      	orrs	r3, r2
 8006692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006694:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669a:	f7fb fad1 	bl	8001c40 <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a2:	f7fb facd 	bl	8001c40 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e05c      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b4:	4b11      	ldr	r3, [pc, #68]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0f0      	beq.n	80066a2 <HAL_RCC_OscConfig+0x416>
 80066c0:	e054      	b.n	800676c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c2:	4b10      	ldr	r3, [pc, #64]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c8:	f7fb faba 	bl	8001c40 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fb fab6 	bl	8001c40 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e045      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x444>
 80066ee:	e03d      	b.n	800676c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d107      	bne.n	8006708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e038      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
 80066fc:	40023800 	.word	0x40023800
 8006700:	40007000 	.word	0x40007000
 8006704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <HAL_RCC_OscConfig+0x4ec>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d028      	beq.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d121      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800672e:	429a      	cmp	r2, r3
 8006730:	d11a      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006738:	4013      	ands	r3, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800673e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006740:	4293      	cmp	r3, r2
 8006742:	d111      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	3b01      	subs	r3, #1
 8006752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d107      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800

0800677c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0cc      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006790:	4b68      	ldr	r3, [pc, #416]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d90c      	bls.n	80067b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	4b65      	ldr	r3, [pc, #404]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b63      	ldr	r3, [pc, #396]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0b8      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067d0:	4b59      	ldr	r3, [pc, #356]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	4a58      	ldr	r2, [pc, #352]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e8:	4b53      	ldr	r3, [pc, #332]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4a52      	ldr	r2, [pc, #328]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f4:	4b50      	ldr	r3, [pc, #320]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	494d      	ldr	r1, [pc, #308]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	4313      	orrs	r3, r2
 8006804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d044      	beq.n	800689c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	4b47      	ldr	r3, [pc, #284]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d119      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e07f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d003      	beq.n	800683a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006836:	2b03      	cmp	r3, #3
 8006838:	d107      	bne.n	800684a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683a:	4b3f      	ldr	r3, [pc, #252]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e06f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684a:	4b3b      	ldr	r3, [pc, #236]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e067      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f023 0203 	bic.w	r2, r3, #3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4934      	ldr	r1, [pc, #208]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	4313      	orrs	r3, r2
 800686a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800686c:	f7fb f9e8 	bl	8001c40 <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006872:	e00a      	b.n	800688a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006874:	f7fb f9e4 	bl	8001c40 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e04f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688a:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 020c 	and.w	r2, r3, #12
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	429a      	cmp	r2, r3
 800689a:	d1eb      	bne.n	8006874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800689c:	4b25      	ldr	r3, [pc, #148]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d20c      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068aa:	4b22      	ldr	r3, [pc, #136]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e032      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4916      	ldr	r1, [pc, #88]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	490e      	ldr	r1, [pc, #56]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006902:	f000 f821 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8006906:	4602      	mov	r2, r0
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	490a      	ldr	r1, [pc, #40]	; (800693c <HAL_RCC_ClockConfig+0x1c0>)
 8006914:	5ccb      	ldrb	r3, [r1, r3]
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_RCC_ClockConfig+0x1c8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fb f948 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40023c00 	.word	0x40023c00
 8006938:	40023800 	.word	0x40023800
 800693c:	08019418 	.word	0x08019418
 8006940:	20000014 	.word	0x20000014
 8006944:	20000018 	.word	0x20000018

08006948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800694c:	b094      	sub	sp, #80	; 0x50
 800694e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	647b      	str	r3, [r7, #68]	; 0x44
 8006954:	2300      	movs	r3, #0
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006958:	2300      	movs	r3, #0
 800695a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006960:	4b79      	ldr	r3, [pc, #484]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030c 	and.w	r3, r3, #12
 8006968:	2b08      	cmp	r3, #8
 800696a:	d00d      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x40>
 800696c:	2b08      	cmp	r3, #8
 800696e:	f200 80e1 	bhi.w	8006b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x34>
 8006976:	2b04      	cmp	r3, #4
 8006978:	d003      	beq.n	8006982 <HAL_RCC_GetSysClockFreq+0x3a>
 800697a:	e0db      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800697c:	4b73      	ldr	r3, [pc, #460]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006980:	e0db      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006982:	4b73      	ldr	r3, [pc, #460]	; (8006b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8006984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006986:	e0d8      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006988:	4b6f      	ldr	r3, [pc, #444]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006990:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006992:	4b6d      	ldr	r3, [pc, #436]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d063      	beq.n	8006a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699e:	4b6a      	ldr	r3, [pc, #424]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	2200      	movs	r2, #0
 80069a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30
 80069b2:	2300      	movs	r3, #0
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
 80069b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069ba:	4622      	mov	r2, r4
 80069bc:	462b      	mov	r3, r5
 80069be:	f04f 0000 	mov.w	r0, #0
 80069c2:	f04f 0100 	mov.w	r1, #0
 80069c6:	0159      	lsls	r1, r3, #5
 80069c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069cc:	0150      	lsls	r0, r2, #5
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4621      	mov	r1, r4
 80069d4:	1a51      	subs	r1, r2, r1
 80069d6:	6139      	str	r1, [r7, #16]
 80069d8:	4629      	mov	r1, r5
 80069da:	eb63 0301 	sbc.w	r3, r3, r1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069ec:	4659      	mov	r1, fp
 80069ee:	018b      	lsls	r3, r1, #6
 80069f0:	4651      	mov	r1, sl
 80069f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069f6:	4651      	mov	r1, sl
 80069f8:	018a      	lsls	r2, r1, #6
 80069fa:	4651      	mov	r1, sl
 80069fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006a00:	4659      	mov	r1, fp
 8006a02:	eb63 0901 	sbc.w	r9, r3, r1
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a1a:	4690      	mov	r8, r2
 8006a1c:	4699      	mov	r9, r3
 8006a1e:	4623      	mov	r3, r4
 8006a20:	eb18 0303 	adds.w	r3, r8, r3
 8006a24:	60bb      	str	r3, [r7, #8]
 8006a26:	462b      	mov	r3, r5
 8006a28:	eb49 0303 	adc.w	r3, r9, r3
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	024b      	lsls	r3, r1, #9
 8006a3e:	4621      	mov	r1, r4
 8006a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a44:	4621      	mov	r1, r4
 8006a46:	024a      	lsls	r2, r1, #9
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4e:	2200      	movs	r2, #0
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a58:	f7f9 fc1a 	bl	8000290 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a64:	e058      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	099b      	lsrs	r3, r3, #6
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	4611      	mov	r1, r2
 8006a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a76:	623b      	str	r3, [r7, #32]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	0159      	lsls	r1, r3, #5
 8006a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a92:	0150      	lsls	r0, r2, #5
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4641      	mov	r1, r8
 8006a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8006abc:	eb63 050b 	sbc.w	r5, r3, fp
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	00eb      	lsls	r3, r5, #3
 8006aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ace:	00e2      	lsls	r2, r4, #3
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	4643      	mov	r3, r8
 8006ad6:	18e3      	adds	r3, r4, r3
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	464b      	mov	r3, r9
 8006adc:	eb45 0303 	adc.w	r3, r5, r3
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aee:	4629      	mov	r1, r5
 8006af0:	028b      	lsls	r3, r1, #10
 8006af2:	4621      	mov	r1, r4
 8006af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006af8:	4621      	mov	r1, r4
 8006afa:	028a      	lsls	r2, r1, #10
 8006afc:	4610      	mov	r0, r2
 8006afe:	4619      	mov	r1, r3
 8006b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b02:	2200      	movs	r2, #0
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	61fa      	str	r2, [r7, #28]
 8006b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b0c:	f7f9 fbc0 	bl	8000290 <__aeabi_uldivmod>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4613      	mov	r3, r2
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	0c1b      	lsrs	r3, r3, #16
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	3301      	adds	r3, #1
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b32:	e002      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3750      	adds	r7, #80	; 0x50
 8006b40:	46bd      	mov	sp, r7
 8006b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	00f42400 	.word	0x00f42400
 8006b50:	007a1200 	.word	0x007a1200

08006b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b58:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000014 	.word	0x20000014

08006b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b70:	f7ff fff0 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	0a9b      	lsrs	r3, r3, #10
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	4903      	ldr	r1, [pc, #12]	; (8006b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b82:	5ccb      	ldrb	r3, [r1, r3]
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	08019428 	.word	0x08019428

08006b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b98:	f7ff ffdc 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	0b5b      	lsrs	r3, r3, #13
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	4903      	ldr	r1, [pc, #12]	; (8006bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006baa:	5ccb      	ldrb	r3, [r1, r3]
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	08019428 	.word	0x08019428

08006bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e07b      	b.n	8006cc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bde:	d009      	beq.n	8006bf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	61da      	str	r2, [r3, #28]
 8006be6:	e005      	b.n	8006bf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fa f9ac 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c78:	ea42 0103 	orr.w	r1, r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	0c1b      	lsrs	r3, r3, #16
 8006c92:	f003 0104 	and.w	r1, r3, #4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0210 	and.w	r2, r3, #16
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_SPI_Transmit_DMA+0x20>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e09b      	b.n	8006e28 <HAL_SPI_Transmit_DMA+0x158>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
 8006d06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d08:	e089      	b.n	8006e1e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_SPI_Transmit_DMA+0x46>
 8006d10:	88fb      	ldrh	r3, [r7, #6]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d1a:	e080      	b.n	8006e1e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	88fa      	ldrh	r2, [r7, #6]
 8006d34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d62:	d10f      	bne.n	8006d84 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d88:	4a29      	ldr	r2, [pc, #164]	; (8006e30 <HAL_SPI_Transmit_DMA+0x160>)
 8006d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d90:	4a28      	ldr	r2, [pc, #160]	; (8006e34 <HAL_SPI_Transmit_DMA+0x164>)
 8006d92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d98:	4a27      	ldr	r2, [pc, #156]	; (8006e38 <HAL_SPI_Transmit_DMA+0x168>)
 8006d9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da0:	2200      	movs	r2, #0
 8006da2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	4619      	mov	r1, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	330c      	adds	r3, #12
 8006db4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006dbc:	f7fb f930 	bl	8002020 <HAL_DMA_Start_IT>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	f043 0210 	orr.w	r2, r3, #16
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006dde:	e01e      	b.n	8006e1e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d007      	beq.n	8006dfe <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dfc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0220 	orr.w	r2, r2, #32
 8006e0c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0202 	orr.w	r2, r2, #2
 8006e1c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	08007629 	.word	0x08007629
 8006e34:	08007449 	.word	0x08007449
 8006e38:	0800767d 	.word	0x0800767d

08006e3c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d110      	bne.n	8006e78 <HAL_SPI_Receive_DMA+0x3c>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e5e:	d10b      	bne.n	8006e78 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 f8ac 	bl	8006fcc <HAL_SPI_TransmitReceive_DMA>
 8006e74:	4603      	mov	r3, r0
 8006e76:	e09f      	b.n	8006fb8 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_SPI_Receive_DMA+0x4a>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e098      	b.n	8006fb8 <HAL_SPI_Receive_DMA+0x17c>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d002      	beq.n	8006ea0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e9e:	e086      	b.n	8006fae <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_SPI_Receive_DMA+0x70>
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eb0:	e07d      	b.n	8006fae <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2204      	movs	r2, #4
 8006eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	88fa      	ldrh	r2, [r7, #6]
 8006eca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	88fa      	ldrh	r2, [r7, #6]
 8006ed0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef2:	d10f      	bne.n	8006f14 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f18:	4a29      	ldr	r2, [pc, #164]	; (8006fc0 <HAL_SPI_Receive_DMA+0x184>)
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f20:	4a28      	ldr	r2, [pc, #160]	; (8006fc4 <HAL_SPI_Receive_DMA+0x188>)
 8006f22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f28:	4a27      	ldr	r2, [pc, #156]	; (8006fc8 <HAL_SPI_Receive_DMA+0x18c>)
 8006f2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f30:	2200      	movs	r2, #0
 8006f32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006f4c:	f7fb f868 	bl	8002020 <HAL_DMA_Start_IT>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00c      	beq.n	8006f70 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	f043 0210 	orr.w	r2, r3, #16
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006f6e:	e01e      	b.n	8006fae <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7a:	2b40      	cmp	r3, #64	; 0x40
 8006f7c:	d007      	beq.n	8006f8e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0220 	orr.w	r2, r2, #32
 8006f9c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0201 	orr.w	r2, r2, #1
 8006fac:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	08007645 	.word	0x08007645
 8006fc4:	080074f1 	.word	0x080074f1
 8006fc8:	0800767d 	.word	0x0800767d

08006fcc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_SPI_TransmitReceive_DMA+0x20>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e0e3      	b.n	80071b4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ffa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007002:	7dbb      	ldrb	r3, [r7, #22]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d00d      	beq.n	8007024 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700e:	d106      	bne.n	800701e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d102      	bne.n	800701e <HAL_SPI_TransmitReceive_DMA+0x52>
 8007018:	7dbb      	ldrb	r3, [r7, #22]
 800701a:	2b04      	cmp	r3, #4
 800701c:	d002      	beq.n	8007024 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800701e:	2302      	movs	r3, #2
 8007020:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007022:	e0c2      	b.n	80071aa <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007030:	887b      	ldrh	r3, [r7, #2]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]
    goto error;
 800703a:	e0b6      	b.n	80071aa <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b04      	cmp	r3, #4
 8007046:	d003      	beq.n	8007050 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2205      	movs	r2, #5
 800704c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	887a      	ldrh	r2, [r7, #2]
 8007060:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	887a      	ldrh	r2, [r7, #2]
 8007066:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	887a      	ldrh	r2, [r7, #2]
 8007072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	887a      	ldrh	r2, [r7, #2]
 8007078:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b04      	cmp	r3, #4
 8007090:	d108      	bne.n	80070a4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007096:	4a49      	ldr	r2, [pc, #292]	; (80071bc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007098:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709e:	4a48      	ldr	r2, [pc, #288]	; (80071c0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80070a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80070a2:	e007      	b.n	80070b4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a8:	4a46      	ldr	r2, [pc, #280]	; (80071c4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b0:	4a45      	ldr	r2, [pc, #276]	; (80071c8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80070b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b8:	4a44      	ldr	r2, [pc, #272]	; (80071cc <HAL_SPI_TransmitReceive_DMA+0x200>)
 80070ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c0:	2200      	movs	r2, #0
 80070c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	4619      	mov	r1, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80070dc:	f7fa ffa0 	bl	8002020 <HAL_DMA_Start_IT>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00c      	beq.n	8007100 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	f043 0210 	orr.w	r2, r3, #16
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80070fe:	e054      	b.n	80071aa <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007114:	2200      	movs	r2, #0
 8007116:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711c:	2200      	movs	r2, #0
 800711e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007124:	2200      	movs	r2, #0
 8007126:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712c:	2200      	movs	r2, #0
 800712e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	4619      	mov	r1, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	330c      	adds	r3, #12
 8007140:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007146:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007148:	f7fa ff6a 	bl	8002020 <HAL_DMA_Start_IT>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00c      	beq.n	800716c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007156:	f043 0210 	orr.w	r2, r3, #16
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800716a:	e01e      	b.n	80071aa <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d007      	beq.n	800718a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007188:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0220 	orr.w	r2, r2, #32
 8007198:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 0202 	orr.w	r2, r2, #2
 80071a8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	08007645 	.word	0x08007645
 80071c0:	080074f1 	.word	0x080074f1
 80071c4:	08007661 	.word	0x08007661
 80071c8:	08007599 	.word	0x08007599
 80071cc:	0800767d 	.word	0x0800767d

080071d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	099b      	lsrs	r3, r3, #6
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10f      	bne.n	8007214 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	099b      	lsrs	r3, r3, #6
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
    return;
 8007212:	e0d7      	b.n	80073c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	085b      	lsrs	r3, r3, #1
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <HAL_SPI_IRQHandler+0x66>
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	09db      	lsrs	r3, r3, #7
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d004      	beq.n	8007236 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
    return;
 8007234:	e0c6      	b.n	80073c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10c      	bne.n	800725c <HAL_SPI_IRQHandler+0x8c>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	099b      	lsrs	r3, r3, #6
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	0a1b      	lsrs	r3, r3, #8
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 80b4 	beq.w	80073c4 <HAL_SPI_IRQHandler+0x1f4>
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	095b      	lsrs	r3, r3, #5
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80ad 	beq.w	80073c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	099b      	lsrs	r3, r3, #6
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d023      	beq.n	80072be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b03      	cmp	r3, #3
 8007280:	d011      	beq.n	80072a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007286:	f043 0204 	orr.w	r2, r3, #4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800728e:	2300      	movs	r3, #0
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	e00b      	b.n	80072be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	693b      	ldr	r3, [r7, #16]
        return;
 80072bc:	e082      	b.n	80073c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d014      	beq.n	80072f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ce:	f043 0201 	orr.w	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00c      	beq.n	800731a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007304:	f043 0208 	orr.w	r2, r3, #8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800730c:	2300      	movs	r3, #0
 800730e:	60bb      	str	r3, [r7, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	2b00      	cmp	r3, #0
 8007320:	d04f      	beq.n	80073c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007330:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <HAL_SPI_IRQHandler+0x17e>
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d034      	beq.n	80073b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0203 	bic.w	r2, r2, #3
 800735c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d011      	beq.n	800738a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736a:	4a18      	ldr	r2, [pc, #96]	; (80073cc <HAL_SPI_IRQHandler+0x1fc>)
 800736c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007372:	4618      	mov	r0, r3
 8007374:	f7fa ff1c 	bl	80021b0 <HAL_DMA_Abort_IT>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007396:	4a0d      	ldr	r2, [pc, #52]	; (80073cc <HAL_SPI_IRQHandler+0x1fc>)
 8007398:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fa ff06 	bl	80021b0 <HAL_DMA_Abort_IT>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80073b6:	e003      	b.n	80073c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f83b 	bl	8007434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80073be:	e000      	b.n	80073c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80073c0:	bf00      	nop
    return;
 80073c2:	bf00      	nop
  }
}
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	080076bd 	.word	0x080076bd

080073d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007456:	f7fa fbf3 	bl	8001c40 <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800746a:	d03b      	beq.n	80074e4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0220 	bic.w	r2, r2, #32
 800747a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0202 	bic.w	r2, r2, #2
 800748a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	2164      	movs	r1, #100	; 0x64
 8007490:	6978      	ldr	r0, [r7, #20]
 8007492:	f000 fa15 	bl	80078c0 <SPI_EndRxTxTransaction>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a0:	f043 0220 	orr.w	r2, r3, #32
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2200      	movs	r2, #0
 80074ca:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80074dc:	6978      	ldr	r0, [r7, #20]
 80074de:	f7ff ffa9 	bl	8007434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80074e2:	e002      	b.n	80074ea <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80074e4:	6978      	ldr	r0, [r7, #20]
 80074e6:	f7ff ff73 	bl	80073d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074fe:	f7fa fb9f 	bl	8001c40 <HAL_GetTick>
 8007502:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007512:	d03b      	beq.n	800758c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0220 	bic.w	r2, r2, #32
 8007522:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <SPI_DMAReceiveCplt+0x58>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007534:	d108      	bne.n	8007548 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0203 	bic.w	r2, r2, #3
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	e007      	b.n	8007558 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0201 	bic.w	r2, r2, #1
 8007556:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	2164      	movs	r1, #100	; 0x64
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f949 	bl	80077f4 <SPI_EndRxTransaction>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2220      	movs	r2, #32
 800756c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff ff55 	bl	8007434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800758a:	e002      	b.n	8007592 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7f9 f801 	bl	8000594 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075a6:	f7fa fb4b 	bl	8001c40 <HAL_GetTick>
 80075aa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ba:	d02f      	beq.n	800761c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0220 	bic.w	r2, r2, #32
 80075ca:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	2164      	movs	r1, #100	; 0x64
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f975 	bl	80078c0 <SPI_EndRxTxTransaction>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e0:	f043 0220 	orr.w	r2, r3, #32
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0203 	bic.w	r2, r2, #3
 80075f6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff ff0d 	bl	8007434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800761a:	e002      	b.n	8007622 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff fee1 	bl	80073e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff fede 	bl	80073f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7ff feda 	bl	800740c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff fed6 	bl	8007420 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0203 	bic.w	r2, r2, #3
 8007698:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769e:	f043 0210 	orr.w	r2, r3, #16
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff fec0 	bl	8007434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff feac 	bl	8007434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	4613      	mov	r3, r2
 80076f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076f4:	f7fa faa4 	bl	8001c40 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	4413      	add	r3, r2
 8007702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007704:	f7fa fa9c 	bl	8001c40 <HAL_GetTick>
 8007708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800770a:	4b39      	ldr	r3, [pc, #228]	; (80077f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	015b      	lsls	r3, r3, #5
 8007710:	0d1b      	lsrs	r3, r3, #20
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	fb02 f303 	mul.w	r3, r2, r3
 8007718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800771a:	e054      	b.n	80077c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d050      	beq.n	80077c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007724:	f7fa fa8c 	bl	8001c40 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	429a      	cmp	r2, r3
 8007732:	d902      	bls.n	800773a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d13d      	bne.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007752:	d111      	bne.n	8007778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775c:	d004      	beq.n	8007768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007766:	d107      	bne.n	8007778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007780:	d10f      	bne.n	80077a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e017      	b.n	80077e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	4013      	ands	r3, r2
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	bf0c      	ite	eq
 80077d6:	2301      	moveq	r3, #1
 80077d8:	2300      	movne	r3, #0
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d19b      	bne.n	800771c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3720      	adds	r7, #32
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000014 	.word	0x20000014

080077f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007808:	d111      	bne.n	800782e <SPI_EndRxTransaction+0x3a>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007812:	d004      	beq.n	800781e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781c:	d107      	bne.n	800782e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800782c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007836:	d12a      	bne.n	800788e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007840:	d012      	beq.n	8007868 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2200      	movs	r2, #0
 800784a:	2180      	movs	r1, #128	; 0x80
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7ff ff49 	bl	80076e4 <SPI_WaitFlagStateUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d02d      	beq.n	80078b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e026      	b.n	80078b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	2101      	movs	r1, #1
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff ff36 	bl	80076e4 <SPI_WaitFlagStateUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d01a      	beq.n	80078b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	f043 0220 	orr.w	r2, r3, #32
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e013      	b.n	80078b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	2101      	movs	r1, #1
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7ff ff23 	bl	80076e4 <SPI_WaitFlagStateUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a8:	f043 0220 	orr.w	r2, r3, #32
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e000      	b.n	80078b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078cc:	4b1b      	ldr	r3, [pc, #108]	; (800793c <SPI_EndRxTxTransaction+0x7c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a1b      	ldr	r2, [pc, #108]	; (8007940 <SPI_EndRxTxTransaction+0x80>)
 80078d2:	fba2 2303 	umull	r2, r3, r2, r3
 80078d6:	0d5b      	lsrs	r3, r3, #21
 80078d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078dc:	fb02 f303 	mul.w	r3, r2, r3
 80078e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ea:	d112      	bne.n	8007912 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	2180      	movs	r1, #128	; 0x80
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff fef4 	bl	80076e4 <SPI_WaitFlagStateUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d016      	beq.n	8007930 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	f043 0220 	orr.w	r2, r3, #32
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e00f      	b.n	8007932 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	3b01      	subs	r3, #1
 800791c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d0f2      	beq.n	8007912 <SPI_EndRxTxTransaction+0x52>
 800792c:	e000      	b.n	8007930 <SPI_EndRxTxTransaction+0x70>
        break;
 800792e:	bf00      	nop
  }

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000014 	.word	0x20000014
 8007940:	165e9f81 	.word	0x165e9f81

08007944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e03f      	b.n	80079d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7f9 fc64 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2224      	movs	r2, #36	; 0x24
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fd7b 	bl	8008484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800799c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695a      	ldr	r2, [r3, #20]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b08a      	sub	sp, #40	; 0x28
 80079e2:	af02      	add	r7, sp, #8
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	603b      	str	r3, [r7, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	d17c      	bne.n	8007af8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_UART_Transmit+0x2c>
 8007a04:	88fb      	ldrh	r3, [r7, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e075      	b.n	8007afa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_UART_Transmit+0x3e>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e06e      	b.n	8007afa <HAL_UART_Transmit+0x11c>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2221      	movs	r2, #33	; 0x21
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a32:	f7fa f905 	bl	8001c40 <HAL_GetTick>
 8007a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	88fa      	ldrh	r2, [r7, #6]
 8007a42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4c:	d108      	bne.n	8007a60 <HAL_UART_Transmit+0x82>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	e003      	b.n	8007a68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a70:	e02a      	b.n	8007ac8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2180      	movs	r1, #128	; 0x80
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 faf9 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e036      	b.n	8007afa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	e007      	b.n	8007aba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1cf      	bne.n	8007a72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2140      	movs	r1, #64	; 0x40
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fac9 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e006      	b.n	8007afa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e000      	b.n	8007afa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007af8:	2302      	movs	r3, #2
  }
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b0ba      	sub	sp, #232	; 0xe8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10f      	bne.n	8007b6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d009      	beq.n	8007b6a <HAL_UART_IRQHandler+0x66>
 8007b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fbd3 	bl	800830e <UART_Receive_IT>
      return;
 8007b68:	e256      	b.n	8008018 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 80de 	beq.w	8007d30 <HAL_UART_IRQHandler+0x22c>
 8007b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80d1 	beq.w	8007d30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00b      	beq.n	8007bb2 <HAL_UART_IRQHandler+0xae>
 8007b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	f043 0201 	orr.w	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00b      	beq.n	8007bd6 <HAL_UART_IRQHandler+0xd2>
 8007bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d005      	beq.n	8007bd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	f043 0202 	orr.w	r2, r3, #2
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00b      	beq.n	8007bfa <HAL_UART_IRQHandler+0xf6>
 8007be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f043 0204 	orr.w	r2, r3, #4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d011      	beq.n	8007c2a <HAL_UART_IRQHandler+0x126>
 8007c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d105      	bne.n	8007c1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	f043 0208 	orr.w	r2, r3, #8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 81ed 	beq.w	800800e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c38:	f003 0320 	and.w	r3, r3, #32
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d008      	beq.n	8007c52 <HAL_UART_IRQHandler+0x14e>
 8007c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fb5e 	bl	800830e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5c:	2b40      	cmp	r3, #64	; 0x40
 8007c5e:	bf0c      	ite	eq
 8007c60:	2301      	moveq	r3, #1
 8007c62:	2300      	movne	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <HAL_UART_IRQHandler+0x17a>
 8007c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d04f      	beq.n	8007d1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa66 	bl	8008150 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b40      	cmp	r3, #64	; 0x40
 8007c90:	d141      	bne.n	8007d16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3314      	adds	r3, #20
 8007c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3314      	adds	r3, #20
 8007cba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1d9      	bne.n	8007c92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d013      	beq.n	8007d0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	4a7d      	ldr	r2, [pc, #500]	; (8007ee0 <HAL_UART_IRQHandler+0x3dc>)
 8007cec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fa fa5c 	bl	80021b0 <HAL_DMA_Abort_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d016      	beq.n	8007d2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	e00e      	b.n	8007d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f99a 	bl	8008048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d14:	e00a      	b.n	8007d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f996 	bl	8008048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1c:	e006      	b.n	8007d2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f992 	bl	8008048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d2a:	e170      	b.n	800800e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2c:	bf00      	nop
    return;
 8007d2e:	e16e      	b.n	800800e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	f040 814a 	bne.w	8007fce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 8143 	beq.w	8007fce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 813c 	beq.w	8007fce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60bb      	str	r3, [r7, #8]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	60bb      	str	r3, [r7, #8]
 8007d6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d76:	2b40      	cmp	r3, #64	; 0x40
 8007d78:	f040 80b4 	bne.w	8007ee4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 8140 	beq.w	8008012 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	f080 8139 	bcs.w	8008012 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007da6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db2:	f000 8088 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1d9      	bne.n	8007db6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3314      	adds	r3, #20
 8007e08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3314      	adds	r3, #20
 8007e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e1      	bne.n	8007e02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3314      	adds	r3, #20
 8007e44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3314      	adds	r3, #20
 8007e5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e3      	bne.n	8007e3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	330c      	adds	r3, #12
 8007e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e96:	f023 0310 	bic.w	r3, r3, #16
 8007e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	330c      	adds	r3, #12
 8007ea4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ea8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007eaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e3      	bne.n	8007e84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fa f905 	bl	80020d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f8c0 	bl	800805c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007edc:	e099      	b.n	8008012 <HAL_UART_IRQHandler+0x50e>
 8007ede:	bf00      	nop
 8007ee0:	08008217 	.word	0x08008217
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 808b 	beq.w	8008016 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8086 	beq.w	8008016 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	330c      	adds	r3, #12
 8007f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	330c      	adds	r3, #12
 8007f2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f2e:	647a      	str	r2, [r7, #68]	; 0x44
 8007f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e3      	bne.n	8007f0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3314      	adds	r3, #20
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	623b      	str	r3, [r7, #32]
   return(result);
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3314      	adds	r3, #20
 8007f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f66:	633a      	str	r2, [r7, #48]	; 0x30
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e3      	bne.n	8007f42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0310 	bic.w	r3, r3, #16
 8007f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fac:	61fa      	str	r2, [r7, #28]
 8007fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	69b9      	ldr	r1, [r7, #24]
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e3      	bne.n	8007f88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f848 	bl	800805c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fcc:	e023      	b.n	8008016 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d009      	beq.n	8007fee <HAL_UART_IRQHandler+0x4ea>
 8007fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f929 	bl	800823e <UART_Transmit_IT>
    return;
 8007fec:	e014      	b.n	8008018 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00e      	beq.n	8008018 <HAL_UART_IRQHandler+0x514>
 8007ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d008      	beq.n	8008018 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f969 	bl	80082de <UART_EndTransmit_IT>
    return;
 800800c:	e004      	b.n	8008018 <HAL_UART_IRQHandler+0x514>
    return;
 800800e:	bf00      	nop
 8008010:	e002      	b.n	8008018 <HAL_UART_IRQHandler+0x514>
      return;
 8008012:	bf00      	nop
 8008014:	e000      	b.n	8008018 <HAL_UART_IRQHandler+0x514>
      return;
 8008016:	bf00      	nop
  }
}
 8008018:	37e8      	adds	r7, #232	; 0xe8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop

08008020 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b090      	sub	sp, #64	; 0x40
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008084:	e050      	b.n	8008128 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d04c      	beq.n	8008128 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800808e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008090:	2b00      	cmp	r3, #0
 8008092:	d007      	beq.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008094:	f7f9 fdd4 	bl	8001c40 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d241      	bcs.n	8008128 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	330c      	adds	r3, #12
 80080aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080c4:	637a      	str	r2, [r7, #52]	; 0x34
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3314      	adds	r3, #20
 80080de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	613b      	str	r3, [r7, #16]
   return(result);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f023 0301 	bic.w	r3, r3, #1
 80080ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3314      	adds	r3, #20
 80080f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f8:	623a      	str	r2, [r7, #32]
 80080fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	69f9      	ldr	r1, [r7, #28]
 80080fe:	6a3a      	ldr	r2, [r7, #32]
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	61bb      	str	r3, [r7, #24]
   return(result);
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e5      	bne.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2220      	movs	r2, #32
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e00f      	b.n	8008148 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4013      	ands	r3, r2
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	429a      	cmp	r2, r3
 8008136:	bf0c      	ite	eq
 8008138:	2301      	moveq	r3, #1
 800813a:	2300      	movne	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	429a      	cmp	r2, r3
 8008144:	d09f      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3740      	adds	r7, #64	; 0x40
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b095      	sub	sp, #84	; 0x54
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	330c      	adds	r3, #12
 800815e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800816e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	330c      	adds	r3, #12
 8008176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008178:	643a      	str	r2, [r7, #64]	; 0x40
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800817e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3314      	adds	r3, #20
 8008192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	e853 3f00 	ldrex	r3, [r3]
 800819a:	61fb      	str	r3, [r7, #28]
   return(result);
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	f023 0301 	bic.w	r3, r3, #1
 80081a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3314      	adds	r3, #20
 80081aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e5      	bne.n	800818c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d119      	bne.n	80081fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	330c      	adds	r3, #12
 80081ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f023 0310 	bic.w	r3, r3, #16
 80081de:	647b      	str	r3, [r7, #68]	; 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	330c      	adds	r3, #12
 80081e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e8:	61ba      	str	r2, [r7, #24]
 80081ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	6979      	ldr	r1, [r7, #20]
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	613b      	str	r3, [r7, #16]
   return(result);
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e5      	bne.n	80081c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
}
 800820a:	bf00      	nop
 800820c:	3754      	adds	r7, #84	; 0x54
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff ff09 	bl	8008048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800823e:	b480      	push	{r7}
 8008240:	b085      	sub	sp, #20
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b21      	cmp	r3, #33	; 0x21
 8008250:	d13e      	bne.n	80082d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800825a:	d114      	bne.n	8008286 <UART_Transmit_IT+0x48>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d110      	bne.n	8008286 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008278:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	1c9a      	adds	r2, r3, #2
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	621a      	str	r2, [r3, #32]
 8008284:	e008      	b.n	8008298 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	1c59      	adds	r1, r3, #1
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6211      	str	r1, [r2, #32]
 8008290:	781a      	ldrb	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4619      	mov	r1, r3
 80082a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10f      	bne.n	80082cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e000      	b.n	80082d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
  }
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff fe8e 	bl	8008020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b08c      	sub	sp, #48	; 0x30
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b22      	cmp	r3, #34	; 0x22
 8008320:	f040 80ab 	bne.w	800847a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832c:	d117      	bne.n	800835e <UART_Receive_IT+0x50>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d113      	bne.n	800835e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834c:	b29a      	uxth	r2, r3
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	1c9a      	adds	r2, r3, #2
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	629a      	str	r2, [r3, #40]	; 0x28
 800835c:	e026      	b.n	80083ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008370:	d007      	beq.n	8008382 <UART_Receive_IT+0x74>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <UART_Receive_IT+0x82>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	b2da      	uxtb	r2, r3
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	e008      	b.n	80083a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839c:	b2da      	uxtb	r2, r3
 800839e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	4619      	mov	r1, r3
 80083ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d15a      	bne.n	8008476 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0220 	bic.w	r2, r2, #32
 80083ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695a      	ldr	r2, [r3, #20]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0201 	bic.w	r2, r2, #1
 80083ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d135      	bne.n	800846c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	330c      	adds	r3, #12
 800840c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	613b      	str	r3, [r7, #16]
   return(result);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f023 0310 	bic.w	r3, r3, #16
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	330c      	adds	r3, #12
 8008424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008426:	623a      	str	r2, [r7, #32]
 8008428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	69f9      	ldr	r1, [r7, #28]
 800842c:	6a3a      	ldr	r2, [r7, #32]
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	61bb      	str	r3, [r7, #24]
   return(result);
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e5      	bne.n	8008406 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b10      	cmp	r3, #16
 8008446:	d10a      	bne.n	800845e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff fdf9 	bl	800805c <HAL_UARTEx_RxEventCallback>
 800846a:	e002      	b.n	8008472 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fde1 	bl	8008034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	e002      	b.n	800847c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	e000      	b.n	800847c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800847a:	2302      	movs	r3, #2
  }
}
 800847c:	4618      	mov	r0, r3
 800847e:	3730      	adds	r7, #48	; 0x30
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008488:	b0c0      	sub	sp, #256	; 0x100
 800848a:	af00      	add	r7, sp, #0
 800848c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a0:	68d9      	ldr	r1, [r3, #12]
 80084a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	ea40 0301 	orr.w	r3, r0, r1
 80084ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	431a      	orrs	r2, r3
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084dc:	f021 010c 	bic.w	r1, r1, #12
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084ea:	430b      	orrs	r3, r1
 80084ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fe:	6999      	ldr	r1, [r3, #24]
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	ea40 0301 	orr.w	r3, r0, r1
 800850a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b8f      	ldr	r3, [pc, #572]	; (8008750 <UART_SetConfig+0x2cc>)
 8008514:	429a      	cmp	r2, r3
 8008516:	d005      	beq.n	8008524 <UART_SetConfig+0xa0>
 8008518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	4b8d      	ldr	r3, [pc, #564]	; (8008754 <UART_SetConfig+0x2d0>)
 8008520:	429a      	cmp	r2, r3
 8008522:	d104      	bne.n	800852e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008524:	f7fe fb36 	bl	8006b94 <HAL_RCC_GetPCLK2Freq>
 8008528:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800852c:	e003      	b.n	8008536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800852e:	f7fe fb1d 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 8008532:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008540:	f040 810c 	bne.w	800875c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008548:	2200      	movs	r2, #0
 800854a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800854e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008556:	4622      	mov	r2, r4
 8008558:	462b      	mov	r3, r5
 800855a:	1891      	adds	r1, r2, r2
 800855c:	65b9      	str	r1, [r7, #88]	; 0x58
 800855e:	415b      	adcs	r3, r3
 8008560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008566:	4621      	mov	r1, r4
 8008568:	eb12 0801 	adds.w	r8, r2, r1
 800856c:	4629      	mov	r1, r5
 800856e:	eb43 0901 	adc.w	r9, r3, r1
 8008572:	f04f 0200 	mov.w	r2, #0
 8008576:	f04f 0300 	mov.w	r3, #0
 800857a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800857e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008586:	4690      	mov	r8, r2
 8008588:	4699      	mov	r9, r3
 800858a:	4623      	mov	r3, r4
 800858c:	eb18 0303 	adds.w	r3, r8, r3
 8008590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008594:	462b      	mov	r3, r5
 8008596:	eb49 0303 	adc.w	r3, r9, r3
 800859a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085b2:	460b      	mov	r3, r1
 80085b4:	18db      	adds	r3, r3, r3
 80085b6:	653b      	str	r3, [r7, #80]	; 0x50
 80085b8:	4613      	mov	r3, r2
 80085ba:	eb42 0303 	adc.w	r3, r2, r3
 80085be:	657b      	str	r3, [r7, #84]	; 0x54
 80085c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085c8:	f7f7 fe62 	bl	8000290 <__aeabi_uldivmod>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4b61      	ldr	r3, [pc, #388]	; (8008758 <UART_SetConfig+0x2d4>)
 80085d2:	fba3 2302 	umull	r2, r3, r3, r2
 80085d6:	095b      	lsrs	r3, r3, #5
 80085d8:	011c      	lsls	r4, r3, #4
 80085da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085ec:	4642      	mov	r2, r8
 80085ee:	464b      	mov	r3, r9
 80085f0:	1891      	adds	r1, r2, r2
 80085f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80085f4:	415b      	adcs	r3, r3
 80085f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085fc:	4641      	mov	r1, r8
 80085fe:	eb12 0a01 	adds.w	sl, r2, r1
 8008602:	4649      	mov	r1, r9
 8008604:	eb43 0b01 	adc.w	fp, r3, r1
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800861c:	4692      	mov	sl, r2
 800861e:	469b      	mov	fp, r3
 8008620:	4643      	mov	r3, r8
 8008622:	eb1a 0303 	adds.w	r3, sl, r3
 8008626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800862a:	464b      	mov	r3, r9
 800862c:	eb4b 0303 	adc.w	r3, fp, r3
 8008630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008640:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008648:	460b      	mov	r3, r1
 800864a:	18db      	adds	r3, r3, r3
 800864c:	643b      	str	r3, [r7, #64]	; 0x40
 800864e:	4613      	mov	r3, r2
 8008650:	eb42 0303 	adc.w	r3, r2, r3
 8008654:	647b      	str	r3, [r7, #68]	; 0x44
 8008656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800865a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800865e:	f7f7 fe17 	bl	8000290 <__aeabi_uldivmod>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4611      	mov	r1, r2
 8008668:	4b3b      	ldr	r3, [pc, #236]	; (8008758 <UART_SetConfig+0x2d4>)
 800866a:	fba3 2301 	umull	r2, r3, r3, r1
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	2264      	movs	r2, #100	; 0x64
 8008672:	fb02 f303 	mul.w	r3, r2, r3
 8008676:	1acb      	subs	r3, r1, r3
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800867e:	4b36      	ldr	r3, [pc, #216]	; (8008758 <UART_SetConfig+0x2d4>)
 8008680:	fba3 2302 	umull	r2, r3, r3, r2
 8008684:	095b      	lsrs	r3, r3, #5
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800868c:	441c      	add	r4, r3
 800868e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008692:	2200      	movs	r2, #0
 8008694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008698:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800869c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086a0:	4642      	mov	r2, r8
 80086a2:	464b      	mov	r3, r9
 80086a4:	1891      	adds	r1, r2, r2
 80086a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80086a8:	415b      	adcs	r3, r3
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086b0:	4641      	mov	r1, r8
 80086b2:	1851      	adds	r1, r2, r1
 80086b4:	6339      	str	r1, [r7, #48]	; 0x30
 80086b6:	4649      	mov	r1, r9
 80086b8:	414b      	adcs	r3, r1
 80086ba:	637b      	str	r3, [r7, #52]	; 0x34
 80086bc:	f04f 0200 	mov.w	r2, #0
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086c8:	4659      	mov	r1, fp
 80086ca:	00cb      	lsls	r3, r1, #3
 80086cc:	4651      	mov	r1, sl
 80086ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086d2:	4651      	mov	r1, sl
 80086d4:	00ca      	lsls	r2, r1, #3
 80086d6:	4610      	mov	r0, r2
 80086d8:	4619      	mov	r1, r3
 80086da:	4603      	mov	r3, r0
 80086dc:	4642      	mov	r2, r8
 80086de:	189b      	adds	r3, r3, r2
 80086e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086e4:	464b      	mov	r3, r9
 80086e6:	460a      	mov	r2, r1
 80086e8:	eb42 0303 	adc.w	r3, r2, r3
 80086ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008704:	460b      	mov	r3, r1
 8008706:	18db      	adds	r3, r3, r3
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
 800870a:	4613      	mov	r3, r2
 800870c:	eb42 0303 	adc.w	r3, r2, r3
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800871a:	f7f7 fdb9 	bl	8000290 <__aeabi_uldivmod>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <UART_SetConfig+0x2d4>)
 8008724:	fba3 1302 	umull	r1, r3, r3, r2
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	2164      	movs	r1, #100	; 0x64
 800872c:	fb01 f303 	mul.w	r3, r1, r3
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	3332      	adds	r3, #50	; 0x32
 8008736:	4a08      	ldr	r2, [pc, #32]	; (8008758 <UART_SetConfig+0x2d4>)
 8008738:	fba2 2303 	umull	r2, r3, r2, r3
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	f003 0207 	and.w	r2, r3, #7
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4422      	add	r2, r4
 800874a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800874c:	e105      	b.n	800895a <UART_SetConfig+0x4d6>
 800874e:	bf00      	nop
 8008750:	40011000 	.word	0x40011000
 8008754:	40011400 	.word	0x40011400
 8008758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800875c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008760:	2200      	movs	r2, #0
 8008762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008766:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800876a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800876e:	4642      	mov	r2, r8
 8008770:	464b      	mov	r3, r9
 8008772:	1891      	adds	r1, r2, r2
 8008774:	6239      	str	r1, [r7, #32]
 8008776:	415b      	adcs	r3, r3
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
 800877a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800877e:	4641      	mov	r1, r8
 8008780:	1854      	adds	r4, r2, r1
 8008782:	4649      	mov	r1, r9
 8008784:	eb43 0501 	adc.w	r5, r3, r1
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	00eb      	lsls	r3, r5, #3
 8008792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008796:	00e2      	lsls	r2, r4, #3
 8008798:	4614      	mov	r4, r2
 800879a:	461d      	mov	r5, r3
 800879c:	4643      	mov	r3, r8
 800879e:	18e3      	adds	r3, r4, r3
 80087a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087a4:	464b      	mov	r3, r9
 80087a6:	eb45 0303 	adc.w	r3, r5, r3
 80087aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087ca:	4629      	mov	r1, r5
 80087cc:	008b      	lsls	r3, r1, #2
 80087ce:	4621      	mov	r1, r4
 80087d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087d4:	4621      	mov	r1, r4
 80087d6:	008a      	lsls	r2, r1, #2
 80087d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087dc:	f7f7 fd58 	bl	8000290 <__aeabi_uldivmod>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4b60      	ldr	r3, [pc, #384]	; (8008968 <UART_SetConfig+0x4e4>)
 80087e6:	fba3 2302 	umull	r2, r3, r3, r2
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	011c      	lsls	r4, r3, #4
 80087ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008800:	4642      	mov	r2, r8
 8008802:	464b      	mov	r3, r9
 8008804:	1891      	adds	r1, r2, r2
 8008806:	61b9      	str	r1, [r7, #24]
 8008808:	415b      	adcs	r3, r3
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008810:	4641      	mov	r1, r8
 8008812:	1851      	adds	r1, r2, r1
 8008814:	6139      	str	r1, [r7, #16]
 8008816:	4649      	mov	r1, r9
 8008818:	414b      	adcs	r3, r1
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008828:	4659      	mov	r1, fp
 800882a:	00cb      	lsls	r3, r1, #3
 800882c:	4651      	mov	r1, sl
 800882e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008832:	4651      	mov	r1, sl
 8008834:	00ca      	lsls	r2, r1, #3
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	4603      	mov	r3, r0
 800883c:	4642      	mov	r2, r8
 800883e:	189b      	adds	r3, r3, r2
 8008840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008844:	464b      	mov	r3, r9
 8008846:	460a      	mov	r2, r1
 8008848:	eb42 0303 	adc.w	r3, r2, r3
 800884c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	67bb      	str	r3, [r7, #120]	; 0x78
 800885a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008868:	4649      	mov	r1, r9
 800886a:	008b      	lsls	r3, r1, #2
 800886c:	4641      	mov	r1, r8
 800886e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008872:	4641      	mov	r1, r8
 8008874:	008a      	lsls	r2, r1, #2
 8008876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800887a:	f7f7 fd09 	bl	8000290 <__aeabi_uldivmod>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4b39      	ldr	r3, [pc, #228]	; (8008968 <UART_SetConfig+0x4e4>)
 8008884:	fba3 1302 	umull	r1, r3, r3, r2
 8008888:	095b      	lsrs	r3, r3, #5
 800888a:	2164      	movs	r1, #100	; 0x64
 800888c:	fb01 f303 	mul.w	r3, r1, r3
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	3332      	adds	r3, #50	; 0x32
 8008896:	4a34      	ldr	r2, [pc, #208]	; (8008968 <UART_SetConfig+0x4e4>)
 8008898:	fba2 2303 	umull	r2, r3, r2, r3
 800889c:	095b      	lsrs	r3, r3, #5
 800889e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088a2:	441c      	add	r4, r3
 80088a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088a8:	2200      	movs	r2, #0
 80088aa:	673b      	str	r3, [r7, #112]	; 0x70
 80088ac:	677a      	str	r2, [r7, #116]	; 0x74
 80088ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088b2:	4642      	mov	r2, r8
 80088b4:	464b      	mov	r3, r9
 80088b6:	1891      	adds	r1, r2, r2
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	415b      	adcs	r3, r3
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088c2:	4641      	mov	r1, r8
 80088c4:	1851      	adds	r1, r2, r1
 80088c6:	6039      	str	r1, [r7, #0]
 80088c8:	4649      	mov	r1, r9
 80088ca:	414b      	adcs	r3, r1
 80088cc:	607b      	str	r3, [r7, #4]
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	f04f 0300 	mov.w	r3, #0
 80088d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088da:	4659      	mov	r1, fp
 80088dc:	00cb      	lsls	r3, r1, #3
 80088de:	4651      	mov	r1, sl
 80088e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088e4:	4651      	mov	r1, sl
 80088e6:	00ca      	lsls	r2, r1, #3
 80088e8:	4610      	mov	r0, r2
 80088ea:	4619      	mov	r1, r3
 80088ec:	4603      	mov	r3, r0
 80088ee:	4642      	mov	r2, r8
 80088f0:	189b      	adds	r3, r3, r2
 80088f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80088f4:	464b      	mov	r3, r9
 80088f6:	460a      	mov	r2, r1
 80088f8:	eb42 0303 	adc.w	r3, r2, r3
 80088fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	663b      	str	r3, [r7, #96]	; 0x60
 8008908:	667a      	str	r2, [r7, #100]	; 0x64
 800890a:	f04f 0200 	mov.w	r2, #0
 800890e:	f04f 0300 	mov.w	r3, #0
 8008912:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008916:	4649      	mov	r1, r9
 8008918:	008b      	lsls	r3, r1, #2
 800891a:	4641      	mov	r1, r8
 800891c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008920:	4641      	mov	r1, r8
 8008922:	008a      	lsls	r2, r1, #2
 8008924:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008928:	f7f7 fcb2 	bl	8000290 <__aeabi_uldivmod>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <UART_SetConfig+0x4e4>)
 8008932:	fba3 1302 	umull	r1, r3, r3, r2
 8008936:	095b      	lsrs	r3, r3, #5
 8008938:	2164      	movs	r1, #100	; 0x64
 800893a:	fb01 f303 	mul.w	r3, r1, r3
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	011b      	lsls	r3, r3, #4
 8008942:	3332      	adds	r3, #50	; 0x32
 8008944:	4a08      	ldr	r2, [pc, #32]	; (8008968 <UART_SetConfig+0x4e4>)
 8008946:	fba2 2303 	umull	r2, r3, r2, r3
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	f003 020f 	and.w	r2, r3, #15
 8008950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4422      	add	r2, r4
 8008958:	609a      	str	r2, [r3, #8]
}
 800895a:	bf00      	nop
 800895c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008960:	46bd      	mov	sp, r7
 8008962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008966:	bf00      	nop
 8008968:	51eb851f 	.word	0x51eb851f

0800896c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800896c:	b084      	sub	sp, #16
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	f107 001c 	add.w	r0, r7, #28
 800897a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2b01      	cmp	r3, #1
 8008982:	d122      	bne.n	80089ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d105      	bne.n	80089be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 faa2 	bl	8008f08 <USB_CoreReset>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]
 80089c8:	e01a      	b.n	8008a00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa96 	bl	8008f08 <USB_CoreReset>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	639a      	str	r2, [r3, #56]	; 0x38
 80089f2:	e005      	b.n	8008a00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d10b      	bne.n	8008a1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f043 0206 	orr.w	r2, r3, #6
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a2a:	b004      	add	sp, #16
 8008a2c:	4770      	bx	lr

08008a2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f023 0201 	bic.w	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d115      	bne.n	8008a9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a7e:	2001      	movs	r0, #1
 8008a80:	f7f9 f8ea 	bl	8001c58 <HAL_Delay>
      ms++;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3301      	adds	r3, #1
 8008a88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa2e 	bl	8008eec <USB_GetMode>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d01e      	beq.n	8008ad4 <USB_SetCurrentMode+0x84>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b31      	cmp	r3, #49	; 0x31
 8008a9a:	d9f0      	bls.n	8008a7e <USB_SetCurrentMode+0x2e>
 8008a9c:	e01a      	b.n	8008ad4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d115      	bne.n	8008ad0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f7f9 f8d1 	bl	8001c58 <HAL_Delay>
      ms++;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fa15 	bl	8008eec <USB_GetMode>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d005      	beq.n	8008ad4 <USB_SetCurrentMode+0x84>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b31      	cmp	r3, #49	; 0x31
 8008acc:	d9f0      	bls.n	8008ab0 <USB_SetCurrentMode+0x60>
 8008ace:	e001      	b.n	8008ad4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e005      	b.n	8008ae0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b32      	cmp	r3, #50	; 0x32
 8008ad8:	d101      	bne.n	8008ade <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ae8:	b084      	sub	sp, #16
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b086      	sub	sp, #24
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	e009      	b.n	8008b1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3340      	adds	r3, #64	; 0x40
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	613b      	str	r3, [r7, #16]
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	2b0e      	cmp	r3, #14
 8008b20:	d9f2      	bls.n	8008b08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11c      	bne.n	8008b62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b36:	f043 0302 	orr.w	r3, r3, #2
 8008b3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38
 8008b60:	e00b      	b.n	8008b7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b80:	461a      	mov	r2, r3
 8008b82:	2300      	movs	r3, #0
 8008b84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b94:	461a      	mov	r2, r3
 8008b96:	680b      	ldr	r3, [r1, #0]
 8008b98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10c      	bne.n	8008bba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d104      	bne.n	8008bb0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f965 	bl	8008e78 <USB_SetDevSpeed>
 8008bae:	e008      	b.n	8008bc2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f960 	bl	8008e78 <USB_SetDevSpeed>
 8008bb8:	e003      	b.n	8008bc2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bba:	2103      	movs	r1, #3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f95b 	bl	8008e78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bc2:	2110      	movs	r1, #16
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f8f3 	bl	8008db0 <USB_FlushTxFifo>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f91f 	bl	8008e18 <USB_FlushRxFifo>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bea:	461a      	mov	r2, r3
 8008bec:	2300      	movs	r3, #0
 8008bee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c02:	461a      	mov	r2, r3
 8008c04:	2300      	movs	r3, #0
 8008c06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	e043      	b.n	8008c96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c24:	d118      	bne.n	8008c58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	e013      	b.n	8008c6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e008      	b.n	8008c6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	461a      	mov	r2, r3
 8008c66:	2300      	movs	r3, #0
 8008c68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c76:	461a      	mov	r2, r3
 8008c78:	2300      	movs	r3, #0
 8008c7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	3301      	adds	r3, #1
 8008c94:	613b      	str	r3, [r7, #16]
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d3b7      	bcc.n	8008c0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	e043      	b.n	8008d2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cba:	d118      	bne.n	8008cee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	e013      	b.n	8008d00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	e008      	b.n	8008d00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	613b      	str	r3, [r7, #16]
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d3b7      	bcc.n	8008ca4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d105      	bne.n	8008d68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	f043 0210 	orr.w	r2, r3, #16
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <USB_DevInit+0x2c4>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f043 0208 	orr.w	r2, r3, #8
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d107      	bne.n	8008d9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d94:	f043 0304 	orr.w	r3, r3, #4
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008da8:	b004      	add	sp, #16
 8008daa:	4770      	bx	lr
 8008dac:	803c3800 	.word	0x803c3800

08008db0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4a13      	ldr	r2, [pc, #76]	; (8008e14 <USB_FlushTxFifo+0x64>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d901      	bls.n	8008dd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e01b      	b.n	8008e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	daf2      	bge.n	8008dbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	019b      	lsls	r3, r3, #6
 8008de0:	f043 0220 	orr.w	r2, r3, #32
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <USB_FlushTxFifo+0x64>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d901      	bls.n	8008dfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e006      	b.n	8008e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d0f0      	beq.n	8008de8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	00030d40 	.word	0x00030d40

08008e18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4a11      	ldr	r2, [pc, #68]	; (8008e74 <USB_FlushRxFifo+0x5c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d901      	bls.n	8008e36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e018      	b.n	8008e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	daf2      	bge.n	8008e24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2210      	movs	r2, #16
 8008e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4a08      	ldr	r2, [pc, #32]	; (8008e74 <USB_FlushRxFifo+0x5c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d901      	bls.n	8008e5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e006      	b.n	8008e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0310 	and.w	r3, r3, #16
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d0f0      	beq.n	8008e48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	00030d40 	.word	0x00030d40

08008e78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b085      	sub	sp, #20
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ec4:	f023 0303 	bic.w	r3, r3, #3
 8008ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ed8:	f043 0302 	orr.w	r3, r3, #2
 8008edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4a13      	ldr	r2, [pc, #76]	; (8008f6c <USB_CoreReset+0x64>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d901      	bls.n	8008f26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e01b      	b.n	8008f5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	daf2      	bge.n	8008f14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f043 0201 	orr.w	r2, r3, #1
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3301      	adds	r3, #1
 8008f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4a09      	ldr	r2, [pc, #36]	; (8008f6c <USB_CoreReset+0x64>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d901      	bls.n	8008f50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e006      	b.n	8008f5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d0f0      	beq.n	8008f3e <USB_CoreReset+0x36>

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	00030d40 	.word	0x00030d40

08008f70 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008f76:	f000 fc73 	bl	8009860 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8008f7a:	4b19      	ldr	r3, [pc, #100]	; (8008fe0 <MX_LWIP_Init+0x70>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008f80:	4b18      	ldr	r3, [pc, #96]	; (8008fe4 <MX_LWIP_Init+0x74>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8008f86:	4b18      	ldr	r3, [pc, #96]	; (8008fe8 <MX_LWIP_Init+0x78>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008f8c:	4b17      	ldr	r3, [pc, #92]	; (8008fec <MX_LWIP_Init+0x7c>)
 8008f8e:	9302      	str	r3, [sp, #8]
 8008f90:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <MX_LWIP_Init+0x80>)
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	2300      	movs	r3, #0
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <MX_LWIP_Init+0x78>)
 8008f9a:	4a12      	ldr	r2, [pc, #72]	; (8008fe4 <MX_LWIP_Init+0x74>)
 8008f9c:	4910      	ldr	r1, [pc, #64]	; (8008fe0 <MX_LWIP_Init+0x70>)
 8008f9e:	4815      	ldr	r0, [pc, #84]	; (8008ff4 <MX_LWIP_Init+0x84>)
 8008fa0:	f001 f946 	bl	800a230 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008fa4:	4813      	ldr	r0, [pc, #76]	; (8008ff4 <MX_LWIP_Init+0x84>)
 8008fa6:	f001 fafd 	bl	800a5a4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008faa:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <MX_LWIP_Init+0x84>)
 8008fac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008fb0:	089b      	lsrs	r3, r3, #2
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008fbc:	480d      	ldr	r0, [pc, #52]	; (8008ff4 <MX_LWIP_Init+0x84>)
 8008fbe:	f001 fb01 	bl	800a5c4 <netif_set_up>
 8008fc2:	e002      	b.n	8008fca <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008fc4:	480b      	ldr	r0, [pc, #44]	; (8008ff4 <MX_LWIP_Init+0x84>)
 8008fc6:	f001 fb69 	bl	800a69c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008fca:	490b      	ldr	r1, [pc, #44]	; (8008ff8 <MX_LWIP_Init+0x88>)
 8008fcc:	4809      	ldr	r0, [pc, #36]	; (8008ff4 <MX_LWIP_Init+0x84>)
 8008fce:	f001 fbff 	bl	800a7d0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8008fd2:	4808      	ldr	r0, [pc, #32]	; (8008ff4 <MX_LWIP_Init+0x84>)
 8008fd4:	f008 fc96 	bl	8011904 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008fd8:	bf00      	nop
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000b40 	.word	0x20000b40
 8008fe4:	20000b44 	.word	0x20000b44
 8008fe8:	20000b48 	.word	0x20000b48
 8008fec:	080153a1 	.word	0x080153a1
 8008ff0:	08009235 	.word	0x08009235
 8008ff4:	20000b08 	.word	0x20000b08
 8008ff8:	08008ffd 	.word	0x08008ffd

08008ffc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800901c:	4b40      	ldr	r3, [pc, #256]	; (8009120 <low_level_init+0x110>)
 800901e:	4a41      	ldr	r2, [pc, #260]	; (8009124 <low_level_init+0x114>)
 8009020:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009022:	2300      	movs	r3, #0
 8009024:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009026:	2380      	movs	r3, #128	; 0x80
 8009028:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800902a:	23e1      	movs	r3, #225	; 0xe1
 800902c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800902e:	2300      	movs	r3, #0
 8009030:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009032:	2300      	movs	r3, #0
 8009034:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009036:	2300      	movs	r3, #0
 8009038:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800903a:	4a39      	ldr	r2, [pc, #228]	; (8009120 <low_level_init+0x110>)
 800903c:	f107 0308 	add.w	r3, r7, #8
 8009040:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009042:	4b37      	ldr	r3, [pc, #220]	; (8009120 <low_level_init+0x110>)
 8009044:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009048:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800904a:	4b35      	ldr	r3, [pc, #212]	; (8009120 <low_level_init+0x110>)
 800904c:	4a36      	ldr	r2, [pc, #216]	; (8009128 <low_level_init+0x118>)
 800904e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009050:	4b33      	ldr	r3, [pc, #204]	; (8009120 <low_level_init+0x110>)
 8009052:	4a36      	ldr	r2, [pc, #216]	; (800912c <low_level_init+0x11c>)
 8009054:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009056:	4b32      	ldr	r3, [pc, #200]	; (8009120 <low_level_init+0x110>)
 8009058:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800905c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800905e:	4830      	ldr	r0, [pc, #192]	; (8009120 <low_level_init+0x110>)
 8009060:	f7f9 fb4c 	bl	80026fc <HAL_ETH_Init>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009068:	2238      	movs	r2, #56	; 0x38
 800906a:	2100      	movs	r1, #0
 800906c:	4830      	ldr	r0, [pc, #192]	; (8009130 <low_level_init+0x120>)
 800906e:	f00c faaf 	bl	80155d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009072:	4b2f      	ldr	r3, [pc, #188]	; (8009130 <low_level_init+0x120>)
 8009074:	2221      	movs	r2, #33	; 0x21
 8009076:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009078:	4b2d      	ldr	r3, [pc, #180]	; (8009130 <low_level_init+0x120>)
 800907a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800907e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009080:	4b2b      	ldr	r3, [pc, #172]	; (8009130 <low_level_init+0x120>)
 8009082:	2200      	movs	r2, #0
 8009084:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009086:	482b      	ldr	r0, [pc, #172]	; (8009134 <low_level_init+0x124>)
 8009088:	f000 ff9a 	bl	8009fc0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2206      	movs	r2, #6
 8009090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009094:	4b22      	ldr	r3, [pc, #136]	; (8009120 <low_level_init+0x110>)
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	781a      	ldrb	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80090a0:	4b1f      	ldr	r3, [pc, #124]	; (8009120 <low_level_init+0x110>)
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	785a      	ldrb	r2, [r3, #1]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80090ac:	4b1c      	ldr	r3, [pc, #112]	; (8009120 <low_level_init+0x110>)
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	789a      	ldrb	r2, [r3, #2]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80090b8:	4b19      	ldr	r3, [pc, #100]	; (8009120 <low_level_init+0x110>)
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	78da      	ldrb	r2, [r3, #3]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80090c4:	4b16      	ldr	r3, [pc, #88]	; (8009120 <low_level_init+0x110>)
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	791a      	ldrb	r2, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80090d0:	4b13      	ldr	r3, [pc, #76]	; (8009120 <low_level_init+0x110>)
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	795a      	ldrb	r2, [r3, #5]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80090e2:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80090ea:	f043 030a 	orr.w	r3, r3, #10
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80090f6:	4910      	ldr	r1, [pc, #64]	; (8009138 <low_level_init+0x128>)
 80090f8:	4810      	ldr	r0, [pc, #64]	; (800913c <low_level_init+0x12c>)
 80090fa:	f7f8 fbda 	bl	80018b2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80090fe:	480f      	ldr	r0, [pc, #60]	; (800913c <low_level_init+0x12c>)
 8009100:	f7f8 fc09 	bl	8001916 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d103      	bne.n	8009112 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fa02 	bl	8009514 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009110:	e001      	b.n	8009116 <low_level_init+0x106>
    Error_Handler();
 8009112:	f7f7 fe0b 	bl	8000d2c <Error_Handler>
}
 8009116:	bf00      	nop
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	2000561c 	.word	0x2000561c
 8009124:	40028000 	.word	0x40028000
 8009128:	2000557c 	.word	0x2000557c
 800912c:	200054dc 	.word	0x200054dc
 8009130:	200056cc 	.word	0x200056cc
 8009134:	08019438 	.word	0x08019438
 8009138:	20000020 	.word	0x20000020
 800913c:	20005704 	.word	0x20005704

08009140 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b092      	sub	sp, #72	; 0x48
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800914e:	2300      	movs	r3, #0
 8009150:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009158:	f107 030c 	add.w	r3, r7, #12
 800915c:	2230      	movs	r2, #48	; 0x30
 800915e:	2100      	movs	r1, #0
 8009160:	4618      	mov	r0, r3
 8009162:	f00c fa35 	bl	80155d0 <memset>

  for(q = p; q != NULL; q = q->next)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	643b      	str	r3, [r7, #64]	; 0x40
 800916a:	e045      	b.n	80091f8 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 800916c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916e:	2b03      	cmp	r3, #3
 8009170:	d902      	bls.n	8009178 <low_level_output+0x38>
      return ERR_IF;
 8009172:	f06f 030b 	mvn.w	r3, #11
 8009176:	e055      	b.n	8009224 <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 8009178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917a:	6859      	ldr	r1, [r3, #4]
 800917c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800917e:	4613      	mov	r3, r2
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	3348      	adds	r3, #72	; 0x48
 8009188:	443b      	add	r3, r7
 800918a:	3b3c      	subs	r3, #60	; 0x3c
 800918c:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800918e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009190:	895b      	ldrh	r3, [r3, #10]
 8009192:	4619      	mov	r1, r3
 8009194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009196:	4613      	mov	r3, r2
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	3348      	adds	r3, #72	; 0x48
 80091a0:	443b      	add	r3, r7
 80091a2:	3b38      	subs	r3, #56	; 0x38
 80091a4:	6019      	str	r1, [r3, #0]

    if(i>0)
 80091a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d011      	beq.n	80091d0 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80091ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ae:	1e5a      	subs	r2, r3, #1
 80091b0:	f107 000c 	add.w	r0, r7, #12
 80091b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091b6:	460b      	mov	r3, r1
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	440b      	add	r3, r1
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	18c1      	adds	r1, r0, r3
 80091c0:	4613      	mov	r3, r2
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	3348      	adds	r3, #72	; 0x48
 80091ca:	443b      	add	r3, r7
 80091cc:	3b34      	subs	r3, #52	; 0x34
 80091ce:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80091d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 80091d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091da:	4613      	mov	r3, r2
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	3348      	adds	r3, #72	; 0x48
 80091e4:	443b      	add	r3, r7
 80091e6:	3b34      	subs	r3, #52	; 0x34
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]
    }

    i++;
 80091ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ee:	3301      	adds	r3, #1
 80091f0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80091f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	643b      	str	r3, [r7, #64]	; 0x40
 80091f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1b6      	bne.n	800916c <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	891b      	ldrh	r3, [r3, #8]
 8009202:	461a      	mov	r2, r3
 8009204:	4b09      	ldr	r3, [pc, #36]	; (800922c <low_level_output+0xec>)
 8009206:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009208:	4a08      	ldr	r2, [pc, #32]	; (800922c <low_level_output+0xec>)
 800920a:	f107 030c 	add.w	r3, r7, #12
 800920e:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009210:	4a06      	ldr	r2, [pc, #24]	; (800922c <low_level_output+0xec>)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009216:	2214      	movs	r2, #20
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <low_level_output+0xec>)
 800921a:	4805      	ldr	r0, [pc, #20]	; (8009230 <low_level_output+0xf0>)
 800921c:	f7f9 fb74 	bl	8002908 <HAL_ETH_Transmit>

  return errval;
 8009220:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009224:	4618      	mov	r0, r3
 8009226:	3748      	adds	r7, #72	; 0x48
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	200056cc 	.word	0x200056cc
 8009230:	2000561c 	.word	0x2000561c

08009234 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <ethernetif_init+0x1c>
 8009242:	4b0e      	ldr	r3, [pc, #56]	; (800927c <ethernetif_init+0x48>)
 8009244:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009248:	490d      	ldr	r1, [pc, #52]	; (8009280 <ethernetif_init+0x4c>)
 800924a:	480e      	ldr	r0, [pc, #56]	; (8009284 <ethernetif_init+0x50>)
 800924c:	f00c f9c8 	bl	80155e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2273      	movs	r2, #115	; 0x73
 8009254:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2274      	movs	r2, #116	; 0x74
 800925c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a09      	ldr	r2, [pc, #36]	; (8009288 <ethernetif_init+0x54>)
 8009264:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a08      	ldr	r2, [pc, #32]	; (800928c <ethernetif_init+0x58>)
 800926a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fecf 	bl	8009010 <low_level_init>

  return ERR_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	08016698 	.word	0x08016698
 8009280:	080166b4 	.word	0x080166b4
 8009284:	080166c4 	.word	0x080166c4
 8009288:	080137d1 	.word	0x080137d1
 800928c:	08009141 	.word	0x08009141

08009290 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800929c:	68f9      	ldr	r1, [r7, #12]
 800929e:	4808      	ldr	r0, [pc, #32]	; (80092c0 <pbuf_free_custom+0x30>)
 80092a0:	f000 ff70 	bl	800a184 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80092a4:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <pbuf_free_custom+0x34>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d105      	bne.n	80092b8 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80092ac:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <pbuf_free_custom+0x34>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 80092b2:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <pbuf_free_custom+0x38>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
  }
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	08019438 	.word	0x08019438
 80092c4:	200054d4 	.word	0x200054d4
 80092c8:	200054d8 	.word	0x200054d8

080092cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80092d0:	f7f8 fcb6 	bl	8001c40 <HAL_GetTick>
 80092d4:	4603      	mov	r3, r0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08e      	sub	sp, #56	; 0x38
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	605a      	str	r2, [r3, #4]
 80092ee:	609a      	str	r2, [r3, #8]
 80092f0:	60da      	str	r2, [r3, #12]
 80092f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a59      	ldr	r2, [pc, #356]	; (8009460 <HAL_ETH_MspInit+0x184>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	f040 80ac 	bne.w	8009458 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009300:	2300      	movs	r3, #0
 8009302:	623b      	str	r3, [r7, #32]
 8009304:	4b57      	ldr	r3, [pc, #348]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009308:	4a56      	ldr	r2, [pc, #344]	; (8009464 <HAL_ETH_MspInit+0x188>)
 800930a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800930e:	6313      	str	r3, [r2, #48]	; 0x30
 8009310:	4b54      	ldr	r3, [pc, #336]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009318:	623b      	str	r3, [r7, #32]
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	2300      	movs	r3, #0
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	4b50      	ldr	r3, [pc, #320]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009324:	4a4f      	ldr	r2, [pc, #316]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800932a:	6313      	str	r3, [r2, #48]	; 0x30
 800932c:	4b4d      	ldr	r3, [pc, #308]	; (8009464 <HAL_ETH_MspInit+0x188>)
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009334:	61fb      	str	r3, [r7, #28]
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	2300      	movs	r3, #0
 800933a:	61bb      	str	r3, [r7, #24]
 800933c:	4b49      	ldr	r3, [pc, #292]	; (8009464 <HAL_ETH_MspInit+0x188>)
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	4a48      	ldr	r2, [pc, #288]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009346:	6313      	str	r3, [r2, #48]	; 0x30
 8009348:	4b46      	ldr	r3, [pc, #280]	; (8009464 <HAL_ETH_MspInit+0x188>)
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	4b42      	ldr	r3, [pc, #264]	; (8009464 <HAL_ETH_MspInit+0x188>)
 800935a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935c:	4a41      	ldr	r2, [pc, #260]	; (8009464 <HAL_ETH_MspInit+0x188>)
 800935e:	f043 0304 	orr.w	r3, r3, #4
 8009362:	6313      	str	r3, [r2, #48]	; 0x30
 8009364:	4b3f      	ldr	r3, [pc, #252]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009370:	2300      	movs	r3, #0
 8009372:	613b      	str	r3, [r7, #16]
 8009374:	4b3b      	ldr	r3, [pc, #236]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	4a3a      	ldr	r2, [pc, #232]	; (8009464 <HAL_ETH_MspInit+0x188>)
 800937a:	f043 0301 	orr.w	r3, r3, #1
 800937e:	6313      	str	r3, [r2, #48]	; 0x30
 8009380:	4b38      	ldr	r3, [pc, #224]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	613b      	str	r3, [r7, #16]
 800938a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800938c:	2300      	movs	r3, #0
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	4b34      	ldr	r3, [pc, #208]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	4a33      	ldr	r2, [pc, #204]	; (8009464 <HAL_ETH_MspInit+0x188>)
 8009396:	f043 0302 	orr.w	r3, r3, #2
 800939a:	6313      	str	r3, [r2, #48]	; 0x30
 800939c:	4b31      	ldr	r3, [pc, #196]	; (8009464 <HAL_ETH_MspInit+0x188>)
 800939e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	60fb      	str	r3, [r7, #12]
 80093a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80093a8:	2300      	movs	r3, #0
 80093aa:	60bb      	str	r3, [r7, #8]
 80093ac:	4b2d      	ldr	r3, [pc, #180]	; (8009464 <HAL_ETH_MspInit+0x188>)
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	4a2c      	ldr	r2, [pc, #176]	; (8009464 <HAL_ETH_MspInit+0x188>)
 80093b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b6:	6313      	str	r3, [r2, #48]	; 0x30
 80093b8:	4b2a      	ldr	r3, [pc, #168]	; (8009464 <HAL_ETH_MspInit+0x188>)
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	60bb      	str	r3, [r7, #8]
 80093c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80093c4:	2332      	movs	r3, #50	; 0x32
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093c8:	2302      	movs	r3, #2
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093d0:	2303      	movs	r3, #3
 80093d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80093d4:	230b      	movs	r3, #11
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093dc:	4619      	mov	r1, r3
 80093de:	4822      	ldr	r0, [pc, #136]	; (8009468 <HAL_ETH_MspInit+0x18c>)
 80093e0:	f7fa fa66 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80093e4:	2386      	movs	r3, #134	; 0x86
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093e8:	2302      	movs	r3, #2
 80093ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093f0:	2303      	movs	r3, #3
 80093f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80093f4:	230b      	movs	r3, #11
 80093f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093fc:	4619      	mov	r1, r3
 80093fe:	481b      	ldr	r0, [pc, #108]	; (800946c <HAL_ETH_MspInit+0x190>)
 8009400:	f7fa fa56 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800940a:	2302      	movs	r3, #2
 800940c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800940e:	2300      	movs	r3, #0
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009412:	2303      	movs	r3, #3
 8009414:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009416:	230b      	movs	r3, #11
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800941a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800941e:	4619      	mov	r1, r3
 8009420:	4813      	ldr	r0, [pc, #76]	; (8009470 <HAL_ETH_MspInit+0x194>)
 8009422:	f7fa fa45 	bl	80038b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009426:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800942a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800942c:	2302      	movs	r3, #2
 800942e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009430:	2300      	movs	r3, #0
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009434:	2303      	movs	r3, #3
 8009436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009438:	230b      	movs	r3, #11
 800943a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800943c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009440:	4619      	mov	r1, r3
 8009442:	480c      	ldr	r0, [pc, #48]	; (8009474 <HAL_ETH_MspInit+0x198>)
 8009444:	f7fa fa34 	bl	80038b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8009448:	2200      	movs	r2, #0
 800944a:	2100      	movs	r1, #0
 800944c:	203d      	movs	r0, #61	; 0x3d
 800944e:	f7f8 fd02 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009452:	203d      	movs	r0, #61	; 0x3d
 8009454:	f7f8 fd1b 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009458:	bf00      	nop
 800945a:	3738      	adds	r7, #56	; 0x38
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	40028000 	.word	0x40028000
 8009464:	40023800 	.word	0x40023800
 8009468:	40020800 	.word	0x40020800
 800946c:	40020000 	.word	0x40020000
 8009470:	40020400 	.word	0x40020400
 8009474:	40021800 	.word	0x40021800

08009478 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800947c:	4802      	ldr	r0, [pc, #8]	; (8009488 <ETH_PHY_IO_Init+0x10>)
 800947e:	f7f9 fdcf 	bl	8003020 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	bd80      	pop	{r7, pc}
 8009488:	2000561c 	.word	0x2000561c

0800948c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0
  return 0;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	68f9      	ldr	r1, [r7, #12]
 80094ae:	4807      	ldr	r0, [pc, #28]	; (80094cc <ETH_PHY_IO_ReadReg+0x30>)
 80094b0:	f7f9 fc24 	bl	8002cfc <HAL_ETH_ReadPHYRegister>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80094ba:	f04f 33ff 	mov.w	r3, #4294967295
 80094be:	e000      	b.n	80094c2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	2000561c 	.word	0x2000561c

080094d0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	68f9      	ldr	r1, [r7, #12]
 80094e2:	4807      	ldr	r0, [pc, #28]	; (8009500 <ETH_PHY_IO_WriteReg+0x30>)
 80094e4:	f7f9 fc55 	bl	8002d92 <HAL_ETH_WritePHYRegister>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80094ee:	f04f 33ff 	mov.w	r3, #4294967295
 80094f2:	e000      	b.n	80094f6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	2000561c 	.word	0x2000561c

08009504 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009508:	f7f8 fb9a 	bl	8001c40 <HAL_GetTick>
 800950c:	4603      	mov	r3, r0
}
 800950e:	4618      	mov	r0, r3
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b0a0      	sub	sp, #128	; 0x80
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	2264      	movs	r2, #100	; 0x64
 8009522:	2100      	movs	r1, #0
 8009524:	4618      	mov	r0, r3
 8009526:	f00c f853 	bl	80155d0 <memset>
  int32_t PHYLinkState = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009532:	2300      	movs	r3, #0
 8009534:	67bb      	str	r3, [r7, #120]	; 0x78
 8009536:	2300      	movs	r3, #0
 8009538:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800953a:	483a      	ldr	r0, [pc, #232]	; (8009624 <ethernet_link_check_state+0x110>)
 800953c:	f7f8 fa93 	bl	8001a66 <LAN8742_GetLinkState>
 8009540:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009548:	089b      	lsrs	r3, r3, #2
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00c      	beq.n	800956e <ethernet_link_check_state+0x5a>
 8009554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009556:	2b01      	cmp	r3, #1
 8009558:	dc09      	bgt.n	800956e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800955a:	4833      	ldr	r0, [pc, #204]	; (8009628 <ethernet_link_check_state+0x114>)
 800955c:	f7f9 f995 	bl	800288a <HAL_ETH_Stop>
    netif_set_down(netif);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 f89b 	bl	800a69c <netif_set_down>
    netif_set_link_down(netif);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 f902 	bl	800a770 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800956c:	e055      	b.n	800961a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d14e      	bne.n	800961a <ethernet_link_check_state+0x106>
 800957c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800957e:	2b01      	cmp	r3, #1
 8009580:	dd4b      	ble.n	800961a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009584:	3b02      	subs	r3, #2
 8009586:	2b03      	cmp	r3, #3
 8009588:	d82a      	bhi.n	80095e0 <ethernet_link_check_state+0xcc>
 800958a:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <ethernet_link_check_state+0x7c>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a1 	.word	0x080095a1
 8009594:	080095b3 	.word	0x080095b3
 8009598:	080095c3 	.word	0x080095c3
 800959c:	080095d3 	.word	0x080095d3
      duplex = ETH_FULLDUPLEX_MODE;
 80095a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80095a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80095ac:	2301      	movs	r3, #1
 80095ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80095b0:	e017      	b.n	80095e2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80095b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80095bc:	2301      	movs	r3, #1
 80095be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80095c0:	e00f      	b.n	80095e2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80095c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095c6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80095c8:	2300      	movs	r3, #0
 80095ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80095cc:	2301      	movs	r3, #1
 80095ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80095d0:	e007      	b.n	80095e2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80095d6:	2300      	movs	r3, #0
 80095d8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80095da:	2301      	movs	r3, #1
 80095dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80095de:	e000      	b.n	80095e2 <ethernet_link_check_state+0xce>
      break;
 80095e0:	bf00      	nop
    if(linkchanged)
 80095e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d018      	beq.n	800961a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80095e8:	f107 030c 	add.w	r3, r7, #12
 80095ec:	4619      	mov	r1, r3
 80095ee:	480e      	ldr	r0, [pc, #56]	; (8009628 <ethernet_link_check_state+0x114>)
 80095f0:	f7f9 fc18 	bl	8002e24 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80095f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80095f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095fa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80095fc:	f107 030c 	add.w	r3, r7, #12
 8009600:	4619      	mov	r1, r3
 8009602:	4809      	ldr	r0, [pc, #36]	; (8009628 <ethernet_link_check_state+0x114>)
 8009604:	f7f9 fcf1 	bl	8002fea <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009608:	4807      	ldr	r0, [pc, #28]	; (8009628 <ethernet_link_check_state+0x114>)
 800960a:	f7f9 f8f5 	bl	80027f8 <HAL_ETH_Start>
      netif_set_up(netif);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 ffd8 	bl	800a5c4 <netif_set_up>
      netif_set_link_up(netif);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 f873 	bl	800a700 <netif_set_link_up>
}
 800961a:	bf00      	nop
 800961c:	3780      	adds	r7, #128	; 0x80
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20005704 	.word	0x20005704
 8009628:	2000561c 	.word	0x2000561c

0800962c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af02      	add	r7, sp, #8
 8009632:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009634:	4812      	ldr	r0, [pc, #72]	; (8009680 <HAL_ETH_RxAllocateCallback+0x54>)
 8009636:	f000 fd37 	bl	800a0a8 <memp_malloc_pool>
 800963a:	60f8      	str	r0, [r7, #12]
  if (p)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d014      	beq.n	800966c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f103 0220 	add.w	r2, r3, #32
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4a0d      	ldr	r2, [pc, #52]	; (8009684 <HAL_ETH_RxAllocateCallback+0x58>)
 8009650:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800965a:	9201      	str	r2, [sp, #4]
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2241      	movs	r2, #65	; 0x41
 8009662:	2100      	movs	r1, #0
 8009664:	2000      	movs	r0, #0
 8009666:	f001 fa59 	bl	800ab1c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800966a:	e005      	b.n	8009678 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <HAL_ETH_RxAllocateCallback+0x5c>)
 800966e:	2201      	movs	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
}
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	08019438 	.word	0x08019438
 8009684:	08009291 	.word	0x08009291
 8009688:	200054d4 	.word	0x200054d4

0800968c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	021b      	lsls	r3, r3, #8
 800969a:	b21a      	sxth	r2, r3
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	4313      	orrs	r3, r2
 80096a6:	b21b      	sxth	r3, r3
 80096a8:	b29b      	uxth	r3, r3
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	061a      	lsls	r2, r3, #24
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	0a1b      	lsrs	r3, r3, #8
 80096d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	0e1b      	lsrs	r3, r3, #24
 80096da:	4313      	orrs	r3, r2
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b089      	sub	sp, #36	; 0x24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00d      	beq.n	8009728 <lwip_standard_chksum+0x40>
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	dd0a      	ble.n	8009728 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	1c53      	adds	r3, r2, #1
 8009716:	61fb      	str	r3, [r7, #28]
 8009718:	f107 030e 	add.w	r3, r7, #14
 800971c:	3301      	adds	r3, #1
 800971e:	7812      	ldrb	r2, [r2, #0]
 8009720:	701a      	strb	r2, [r3, #0]
    len--;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	3b01      	subs	r3, #1
 8009726:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800972c:	e00a      	b.n	8009744 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	1c9a      	adds	r2, r3, #2
 8009732:	61ba      	str	r2, [r7, #24]
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	4413      	add	r3, r2
 800973c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	3b02      	subs	r3, #2
 8009742:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2b01      	cmp	r3, #1
 8009748:	dcf1      	bgt.n	800972e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	dd04      	ble.n	800975a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009750:	f107 030e 	add.w	r3, r7, #14
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	7812      	ldrb	r2, [r2, #0]
 8009758:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800975a:	89fb      	ldrh	r3, [r7, #14]
 800975c:	461a      	mov	r2, r3
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	4413      	add	r3, r2
 8009762:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	0c1a      	lsrs	r2, r3, #16
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	b29b      	uxth	r3, r3
 800976c:	4413      	add	r3, r2
 800976e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	0c1a      	lsrs	r2, r3, #16
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	b29b      	uxth	r3, r3
 8009778:	4413      	add	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d007      	beq.n	8009792 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	b29a      	uxth	r2, r3
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	0a1b      	lsrs	r3, r3, #8
 800978c:	b2db      	uxtb	r3, r3
 800978e:	4313      	orrs	r3, r2
 8009790:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	b29b      	uxth	r3, r3
}
 8009796:	4618      	mov	r0, r3
 8009798:	3724      	adds	r7, #36	; 0x24
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80097ae:	887b      	ldrh	r3, [r7, #2]
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff ff98 	bl	80096e8 <lwip_standard_chksum>
 80097b8:	4603      	mov	r3, r0
 80097ba:	43db      	mvns	r3, r3
 80097bc:	b29b      	uxth	r3, r3
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b086      	sub	sp, #24
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	e02b      	b.n	8009834 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	895b      	ldrh	r3, [r3, #10]
 80097e4:	4619      	mov	r1, r3
 80097e6:	4610      	mov	r0, r2
 80097e8:	f7ff ff7e 	bl	80096e8 <lwip_standard_chksum>
 80097ec:	4603      	mov	r3, r0
 80097ee:	461a      	mov	r2, r3
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	4413      	add	r3, r2
 80097f4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	0c1a      	lsrs	r2, r3, #16
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	4413      	add	r3, r2
 8009800:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	895b      	ldrh	r3, [r3, #10]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00e      	beq.n	800982e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	bf0c      	ite	eq
 8009816:	2301      	moveq	r3, #1
 8009818:	2300      	movne	r3, #0
 800981a:	b2db      	uxtb	r3, r3
 800981c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	021b      	lsls	r3, r3, #8
 8009822:	b29a      	uxth	r2, r3
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	b2db      	uxtb	r3, r3
 800982a:	4313      	orrs	r3, r2
 800982c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1d0      	bne.n	80097dc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	b29a      	uxth	r2, r3
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	0a1b      	lsrs	r3, r3, #8
 800984a:	b2db      	uxtb	r3, r3
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	b29b      	uxth	r3, r3
 8009854:	43db      	mvns	r3, r3
 8009856:	b29b      	uxth	r3, r3
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800986a:	f000 f8d5 	bl	8009a18 <mem_init>
  memp_init();
 800986e:	f000 fbd7 	bl	800a020 <memp_init>
  pbuf_init();
  netif_init();
 8009872:	f000 fcd5 	bl	800a220 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009876:	f007 f80d 	bl	8010894 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800987a:	f001 fda7 	bl	800b3cc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800987e:	f006 ffc1 	bl	8010804 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <ptr_to_mem+0x20>)
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	88fb      	ldrh	r3, [r7, #6]
 800989c:	4413      	add	r3, r2
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	2000573c 	.word	0x2000573c

080098b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <mem_to_ptr+0x20>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	b29b      	uxth	r3, r3
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	2000573c 	.word	0x2000573c

080098d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80098d4:	b590      	push	{r4, r7, lr}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80098dc:	4b45      	ldr	r3, [pc, #276]	; (80099f4 <plug_holes+0x120>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d206      	bcs.n	80098f4 <plug_holes+0x20>
 80098e6:	4b44      	ldr	r3, [pc, #272]	; (80099f8 <plug_holes+0x124>)
 80098e8:	f240 12df 	movw	r2, #479	; 0x1df
 80098ec:	4943      	ldr	r1, [pc, #268]	; (80099fc <plug_holes+0x128>)
 80098ee:	4844      	ldr	r0, [pc, #272]	; (8009a00 <plug_holes+0x12c>)
 80098f0:	f00b fe76 	bl	80155e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80098f4:	4b43      	ldr	r3, [pc, #268]	; (8009a04 <plug_holes+0x130>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d306      	bcc.n	800990c <plug_holes+0x38>
 80098fe:	4b3e      	ldr	r3, [pc, #248]	; (80099f8 <plug_holes+0x124>)
 8009900:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009904:	4940      	ldr	r1, [pc, #256]	; (8009a08 <plug_holes+0x134>)
 8009906:	483e      	ldr	r0, [pc, #248]	; (8009a00 <plug_holes+0x12c>)
 8009908:	f00b fe6a 	bl	80155e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	791b      	ldrb	r3, [r3, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d006      	beq.n	8009922 <plug_holes+0x4e>
 8009914:	4b38      	ldr	r3, [pc, #224]	; (80099f8 <plug_holes+0x124>)
 8009916:	f240 12e1 	movw	r2, #481	; 0x1e1
 800991a:	493c      	ldr	r1, [pc, #240]	; (8009a0c <plug_holes+0x138>)
 800991c:	4838      	ldr	r0, [pc, #224]	; (8009a00 <plug_holes+0x12c>)
 800991e:	f00b fe5f 	bl	80155e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800992a:	d906      	bls.n	800993a <plug_holes+0x66>
 800992c:	4b32      	ldr	r3, [pc, #200]	; (80099f8 <plug_holes+0x124>)
 800992e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009932:	4937      	ldr	r1, [pc, #220]	; (8009a10 <plug_holes+0x13c>)
 8009934:	4832      	ldr	r0, [pc, #200]	; (8009a00 <plug_holes+0x12c>)
 8009936:	f00b fe53 	bl	80155e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff ffa4 	bl	800988c <ptr_to_mem>
 8009944:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	429a      	cmp	r2, r3
 800994c:	d024      	beq.n	8009998 <plug_holes+0xc4>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	791b      	ldrb	r3, [r3, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d120      	bne.n	8009998 <plug_holes+0xc4>
 8009956:	4b2b      	ldr	r3, [pc, #172]	; (8009a04 <plug_holes+0x130>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	429a      	cmp	r2, r3
 800995e:	d01b      	beq.n	8009998 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009960:	4b2c      	ldr	r3, [pc, #176]	; (8009a14 <plug_holes+0x140>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	429a      	cmp	r2, r3
 8009968:	d102      	bne.n	8009970 <plug_holes+0x9c>
      lfree = mem;
 800996a:	4a2a      	ldr	r2, [pc, #168]	; (8009a14 <plug_holes+0x140>)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	881a      	ldrh	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009980:	d00a      	beq.n	8009998 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff ff80 	bl	800988c <ptr_to_mem>
 800998c:	4604      	mov	r4, r0
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff ff8e 	bl	80098b0 <mem_to_ptr>
 8009994:	4603      	mov	r3, r0
 8009996:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	885b      	ldrh	r3, [r3, #2]
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff ff75 	bl	800988c <ptr_to_mem>
 80099a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d01f      	beq.n	80099ec <plug_holes+0x118>
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	791b      	ldrb	r3, [r3, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d11b      	bne.n	80099ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80099b4:	4b17      	ldr	r3, [pc, #92]	; (8009a14 <plug_holes+0x140>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d102      	bne.n	80099c4 <plug_holes+0xf0>
      lfree = pmem;
 80099be:	4a15      	ldr	r2, [pc, #84]	; (8009a14 <plug_holes+0x140>)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	881a      	ldrh	r2, [r3, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099d4:	d00a      	beq.n	80099ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff ff56 	bl	800988c <ptr_to_mem>
 80099e0:	4604      	mov	r4, r0
 80099e2:	68b8      	ldr	r0, [r7, #8]
 80099e4:	f7ff ff64 	bl	80098b0 <mem_to_ptr>
 80099e8:	4603      	mov	r3, r0
 80099ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80099ec:	bf00      	nop
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd90      	pop	{r4, r7, pc}
 80099f4:	2000573c 	.word	0x2000573c
 80099f8:	080166ec 	.word	0x080166ec
 80099fc:	0801671c 	.word	0x0801671c
 8009a00:	08016734 	.word	0x08016734
 8009a04:	20005740 	.word	0x20005740
 8009a08:	0801675c 	.word	0x0801675c
 8009a0c:	08016778 	.word	0x08016778
 8009a10:	08016794 	.word	0x08016794
 8009a14:	20005744 	.word	0x20005744

08009a18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009a1e:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <mem_init+0x60>)
 8009a20:	4a16      	ldr	r2, [pc, #88]	; (8009a7c <mem_init+0x64>)
 8009a22:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009a24:	4b14      	ldr	r3, [pc, #80]	; (8009a78 <mem_init+0x60>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009a30:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009a3e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009a42:	f7ff ff23 	bl	800988c <ptr_to_mem>
 8009a46:	4603      	mov	r3, r0
 8009a48:	4a0d      	ldr	r2, [pc, #52]	; (8009a80 <mem_init+0x68>)
 8009a4a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <mem_init+0x68>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2201      	movs	r2, #1
 8009a52:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009a54:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <mem_init+0x68>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009a5c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009a5e:	4b08      	ldr	r3, [pc, #32]	; (8009a80 <mem_init+0x68>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009a66:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009a68:	4b03      	ldr	r3, [pc, #12]	; (8009a78 <mem_init+0x60>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a05      	ldr	r2, [pc, #20]	; (8009a84 <mem_init+0x6c>)
 8009a6e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	2000573c 	.word	0x2000573c
 8009a7c:	30044000 	.word	0x30044000
 8009a80:	20005740 	.word	0x20005740
 8009a84:	20005744 	.word	0x20005744

08009a88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff ff0d 	bl	80098b0 <mem_to_ptr>
 8009a96:	4603      	mov	r3, r0
 8009a98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff fef4 	bl	800988c <ptr_to_mem>
 8009aa4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff feee 	bl	800988c <ptr_to_mem>
 8009ab0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009aba:	d818      	bhi.n	8009aee <mem_link_valid+0x66>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	885b      	ldrh	r3, [r3, #2]
 8009ac0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ac4:	d813      	bhi.n	8009aee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009aca:	8afa      	ldrh	r2, [r7, #22]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d004      	beq.n	8009ada <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	8afa      	ldrh	r2, [r7, #22]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d109      	bne.n	8009aee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009ada:	4b08      	ldr	r3, [pc, #32]	; (8009afc <mem_link_valid+0x74>)
 8009adc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d006      	beq.n	8009af2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	885b      	ldrh	r3, [r3, #2]
 8009ae8:	8afa      	ldrh	r2, [r7, #22]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d001      	beq.n	8009af2 <mem_link_valid+0x6a>
    return 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	e000      	b.n	8009af4 <mem_link_valid+0x6c>
  }
  return 1;
 8009af2:	2301      	movs	r3, #1
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20005740 	.word	0x20005740

08009b00 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d04c      	beq.n	8009ba8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d007      	beq.n	8009b28 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009b18:	4b25      	ldr	r3, [pc, #148]	; (8009bb0 <mem_free+0xb0>)
 8009b1a:	f240 2273 	movw	r2, #627	; 0x273
 8009b1e:	4925      	ldr	r1, [pc, #148]	; (8009bb4 <mem_free+0xb4>)
 8009b20:	4825      	ldr	r0, [pc, #148]	; (8009bb8 <mem_free+0xb8>)
 8009b22:	f00b fd5d 	bl	80155e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009b26:	e040      	b.n	8009baa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3b08      	subs	r3, #8
 8009b2c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009b2e:	4b23      	ldr	r3, [pc, #140]	; (8009bbc <mem_free+0xbc>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d306      	bcc.n	8009b46 <mem_free+0x46>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f103 020c 	add.w	r2, r3, #12
 8009b3e:	4b20      	ldr	r3, [pc, #128]	; (8009bc0 <mem_free+0xc0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d907      	bls.n	8009b56 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009b46:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <mem_free+0xb0>)
 8009b48:	f240 227f 	movw	r2, #639	; 0x27f
 8009b4c:	491d      	ldr	r1, [pc, #116]	; (8009bc4 <mem_free+0xc4>)
 8009b4e:	481a      	ldr	r0, [pc, #104]	; (8009bb8 <mem_free+0xb8>)
 8009b50:	f00b fd46 	bl	80155e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009b54:	e029      	b.n	8009baa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	791b      	ldrb	r3, [r3, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d107      	bne.n	8009b6e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009b5e:	4b14      	ldr	r3, [pc, #80]	; (8009bb0 <mem_free+0xb0>)
 8009b60:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009b64:	4918      	ldr	r1, [pc, #96]	; (8009bc8 <mem_free+0xc8>)
 8009b66:	4814      	ldr	r0, [pc, #80]	; (8009bb8 <mem_free+0xb8>)
 8009b68:	f00b fd3a 	bl	80155e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009b6c:	e01d      	b.n	8009baa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff ff8a 	bl	8009a88 <mem_link_valid>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d107      	bne.n	8009b8a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <mem_free+0xb0>)
 8009b7c:	f240 2295 	movw	r2, #661	; 0x295
 8009b80:	4912      	ldr	r1, [pc, #72]	; (8009bcc <mem_free+0xcc>)
 8009b82:	480d      	ldr	r0, [pc, #52]	; (8009bb8 <mem_free+0xb8>)
 8009b84:	f00b fd2c 	bl	80155e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009b88:	e00f      	b.n	8009baa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009b90:	4b0f      	ldr	r3, [pc, #60]	; (8009bd0 <mem_free+0xd0>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d202      	bcs.n	8009ba0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009b9a:	4a0d      	ldr	r2, [pc, #52]	; (8009bd0 <mem_free+0xd0>)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff fe97 	bl	80098d4 <plug_holes>
 8009ba6:	e000      	b.n	8009baa <mem_free+0xaa>
    return;
 8009ba8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	080166ec 	.word	0x080166ec
 8009bb4:	080167c0 	.word	0x080167c0
 8009bb8:	08016734 	.word	0x08016734
 8009bbc:	2000573c 	.word	0x2000573c
 8009bc0:	20005740 	.word	0x20005740
 8009bc4:	080167e4 	.word	0x080167e4
 8009bc8:	08016800 	.word	0x08016800
 8009bcc:	08016828 	.word	0x08016828
 8009bd0:	20005744 	.word	0x20005744

08009bd4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009be0:	887b      	ldrh	r3, [r7, #2]
 8009be2:	3303      	adds	r3, #3
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	f023 0303 	bic.w	r3, r3, #3
 8009bea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009bec:	8bfb      	ldrh	r3, [r7, #30]
 8009bee:	2b0b      	cmp	r3, #11
 8009bf0:	d801      	bhi.n	8009bf6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009bf2:	230c      	movs	r3, #12
 8009bf4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009bf6:	8bfb      	ldrh	r3, [r7, #30]
 8009bf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009bfc:	d803      	bhi.n	8009c06 <mem_trim+0x32>
 8009bfe:	8bfa      	ldrh	r2, [r7, #30]
 8009c00:	887b      	ldrh	r3, [r7, #2]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d201      	bcs.n	8009c0a <mem_trim+0x36>
    return NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e0cc      	b.n	8009da4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009c0a:	4b68      	ldr	r3, [pc, #416]	; (8009dac <mem_trim+0x1d8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d304      	bcc.n	8009c1e <mem_trim+0x4a>
 8009c14:	4b66      	ldr	r3, [pc, #408]	; (8009db0 <mem_trim+0x1dc>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d306      	bcc.n	8009c2c <mem_trim+0x58>
 8009c1e:	4b65      	ldr	r3, [pc, #404]	; (8009db4 <mem_trim+0x1e0>)
 8009c20:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009c24:	4964      	ldr	r1, [pc, #400]	; (8009db8 <mem_trim+0x1e4>)
 8009c26:	4865      	ldr	r0, [pc, #404]	; (8009dbc <mem_trim+0x1e8>)
 8009c28:	f00b fcda 	bl	80155e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009c2c:	4b5f      	ldr	r3, [pc, #380]	; (8009dac <mem_trim+0x1d8>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d304      	bcc.n	8009c40 <mem_trim+0x6c>
 8009c36:	4b5e      	ldr	r3, [pc, #376]	; (8009db0 <mem_trim+0x1dc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d301      	bcc.n	8009c44 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	e0af      	b.n	8009da4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3b08      	subs	r3, #8
 8009c48:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009c4a:	69b8      	ldr	r0, [r7, #24]
 8009c4c:	f7ff fe30 	bl	80098b0 <mem_to_ptr>
 8009c50:	4603      	mov	r3, r0
 8009c52:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	881a      	ldrh	r2, [r3, #0]
 8009c58:	8afb      	ldrh	r3, [r7, #22]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3b08      	subs	r3, #8
 8009c60:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009c62:	8bfa      	ldrh	r2, [r7, #30]
 8009c64:	8abb      	ldrh	r3, [r7, #20]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d906      	bls.n	8009c78 <mem_trim+0xa4>
 8009c6a:	4b52      	ldr	r3, [pc, #328]	; (8009db4 <mem_trim+0x1e0>)
 8009c6c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009c70:	4953      	ldr	r1, [pc, #332]	; (8009dc0 <mem_trim+0x1ec>)
 8009c72:	4852      	ldr	r0, [pc, #328]	; (8009dbc <mem_trim+0x1e8>)
 8009c74:	f00b fcb4 	bl	80155e0 <iprintf>
  if (newsize > size) {
 8009c78:	8bfa      	ldrh	r2, [r7, #30]
 8009c7a:	8abb      	ldrh	r3, [r7, #20]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d901      	bls.n	8009c84 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e08f      	b.n	8009da4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009c84:	8bfa      	ldrh	r2, [r7, #30]
 8009c86:	8abb      	ldrh	r3, [r7, #20]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d101      	bne.n	8009c90 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	e089      	b.n	8009da4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fdf9 	bl	800988c <ptr_to_mem>
 8009c9a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	791b      	ldrb	r3, [r3, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d13f      	bne.n	8009d24 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009cac:	d106      	bne.n	8009cbc <mem_trim+0xe8>
 8009cae:	4b41      	ldr	r3, [pc, #260]	; (8009db4 <mem_trim+0x1e0>)
 8009cb0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009cb4:	4943      	ldr	r1, [pc, #268]	; (8009dc4 <mem_trim+0x1f0>)
 8009cb6:	4841      	ldr	r0, [pc, #260]	; (8009dbc <mem_trim+0x1e8>)
 8009cb8:	f00b fc92 	bl	80155e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009cc2:	8afa      	ldrh	r2, [r7, #22]
 8009cc4:	8bfb      	ldrh	r3, [r7, #30]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3308      	adds	r3, #8
 8009ccc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009cce:	4b3e      	ldr	r3, [pc, #248]	; (8009dc8 <mem_trim+0x1f4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d106      	bne.n	8009ce6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009cd8:	89fb      	ldrh	r3, [r7, #14]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff fdd6 	bl	800988c <ptr_to_mem>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4a39      	ldr	r2, [pc, #228]	; (8009dc8 <mem_trim+0x1f4>)
 8009ce4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009ce6:	89fb      	ldrh	r3, [r7, #14]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7ff fdcf 	bl	800988c <ptr_to_mem>
 8009cee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	89ba      	ldrh	r2, [r7, #12]
 8009cfa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	8afa      	ldrh	r2, [r7, #22]
 8009d00:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	89fa      	ldrh	r2, [r7, #14]
 8009d06:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	881b      	ldrh	r3, [r3, #0]
 8009d0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009d10:	d047      	beq.n	8009da2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff fdb8 	bl	800988c <ptr_to_mem>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	89fb      	ldrh	r3, [r7, #14]
 8009d20:	8053      	strh	r3, [r2, #2]
 8009d22:	e03e      	b.n	8009da2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009d24:	8bfb      	ldrh	r3, [r7, #30]
 8009d26:	f103 0214 	add.w	r2, r3, #20
 8009d2a:	8abb      	ldrh	r3, [r7, #20]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d838      	bhi.n	8009da2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009d30:	8afa      	ldrh	r2, [r7, #22]
 8009d32:	8bfb      	ldrh	r3, [r7, #30]
 8009d34:	4413      	add	r3, r2
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	3308      	adds	r3, #8
 8009d3a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009d44:	d106      	bne.n	8009d54 <mem_trim+0x180>
 8009d46:	4b1b      	ldr	r3, [pc, #108]	; (8009db4 <mem_trim+0x1e0>)
 8009d48:	f240 3216 	movw	r2, #790	; 0x316
 8009d4c:	491d      	ldr	r1, [pc, #116]	; (8009dc4 <mem_trim+0x1f0>)
 8009d4e:	481b      	ldr	r0, [pc, #108]	; (8009dbc <mem_trim+0x1e8>)
 8009d50:	f00b fc46 	bl	80155e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009d54:	89fb      	ldrh	r3, [r7, #14]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7ff fd98 	bl	800988c <ptr_to_mem>
 8009d5c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009d5e:	4b1a      	ldr	r3, [pc, #104]	; (8009dc8 <mem_trim+0x1f4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d202      	bcs.n	8009d6e <mem_trim+0x19a>
      lfree = mem2;
 8009d68:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <mem_trim+0x1f4>)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	2200      	movs	r2, #0
 8009d72:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	881a      	ldrh	r2, [r3, #0]
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	8afa      	ldrh	r2, [r7, #22]
 8009d80:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	89fa      	ldrh	r2, [r7, #14]
 8009d86:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009d90:	d007      	beq.n	8009da2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fd78 	bl	800988c <ptr_to_mem>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	89fb      	ldrh	r3, [r7, #14]
 8009da0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009da2:	687b      	ldr	r3, [r7, #4]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3720      	adds	r7, #32
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	2000573c 	.word	0x2000573c
 8009db0:	20005740 	.word	0x20005740
 8009db4:	080166ec 	.word	0x080166ec
 8009db8:	0801685c 	.word	0x0801685c
 8009dbc:	08016734 	.word	0x08016734
 8009dc0:	08016874 	.word	0x08016874
 8009dc4:	08016894 	.word	0x08016894
 8009dc8:	20005744 	.word	0x20005744

08009dcc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <mem_malloc+0x14>
    return NULL;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	e0d9      	b.n	8009f94 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009de0:	88fb      	ldrh	r3, [r7, #6]
 8009de2:	3303      	adds	r3, #3
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	f023 0303 	bic.w	r3, r3, #3
 8009dea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009dec:	8bbb      	ldrh	r3, [r7, #28]
 8009dee:	2b0b      	cmp	r3, #11
 8009df0:	d801      	bhi.n	8009df6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009df2:	230c      	movs	r3, #12
 8009df4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009df6:	8bbb      	ldrh	r3, [r7, #28]
 8009df8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009dfc:	d803      	bhi.n	8009e06 <mem_malloc+0x3a>
 8009dfe:	8bba      	ldrh	r2, [r7, #28]
 8009e00:	88fb      	ldrh	r3, [r7, #6]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d201      	bcs.n	8009e0a <mem_malloc+0x3e>
    return NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e0c4      	b.n	8009f94 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009e0a:	4b64      	ldr	r3, [pc, #400]	; (8009f9c <mem_malloc+0x1d0>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7ff fd4e 	bl	80098b0 <mem_to_ptr>
 8009e14:	4603      	mov	r3, r0
 8009e16:	83fb      	strh	r3, [r7, #30]
 8009e18:	e0b4      	b.n	8009f84 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009e1a:	8bfb      	ldrh	r3, [r7, #30]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff fd35 	bl	800988c <ptr_to_mem>
 8009e22:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	791b      	ldrb	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f040 80a4 	bne.w	8009f76 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	8bfb      	ldrh	r3, [r7, #30]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	f1a3 0208 	sub.w	r2, r3, #8
 8009e3c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	f0c0 8099 	bcc.w	8009f76 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	8bfb      	ldrh	r3, [r7, #30]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	f1a3 0208 	sub.w	r2, r3, #8
 8009e52:	8bbb      	ldrh	r3, [r7, #28]
 8009e54:	3314      	adds	r3, #20
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d333      	bcc.n	8009ec2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009e5a:	8bfa      	ldrh	r2, [r7, #30]
 8009e5c:	8bbb      	ldrh	r3, [r7, #28]
 8009e5e:	4413      	add	r3, r2
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3308      	adds	r3, #8
 8009e64:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009e66:	8a7b      	ldrh	r3, [r7, #18]
 8009e68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e6c:	d106      	bne.n	8009e7c <mem_malloc+0xb0>
 8009e6e:	4b4c      	ldr	r3, [pc, #304]	; (8009fa0 <mem_malloc+0x1d4>)
 8009e70:	f240 3287 	movw	r2, #903	; 0x387
 8009e74:	494b      	ldr	r1, [pc, #300]	; (8009fa4 <mem_malloc+0x1d8>)
 8009e76:	484c      	ldr	r0, [pc, #304]	; (8009fa8 <mem_malloc+0x1dc>)
 8009e78:	f00b fbb2 	bl	80155e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009e7c:	8a7b      	ldrh	r3, [r7, #18]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7ff fd04 	bl	800988c <ptr_to_mem>
 8009e84:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	881a      	ldrh	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8bfa      	ldrh	r2, [r7, #30]
 8009e98:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	8a7a      	ldrh	r2, [r7, #18]
 8009e9e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009eae:	d00b      	beq.n	8009ec8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7ff fce9 	bl	800988c <ptr_to_mem>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	8a7b      	ldrh	r3, [r7, #18]
 8009ebe:	8053      	strh	r3, [r2, #2]
 8009ec0:	e002      	b.n	8009ec8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009ec8:	4b34      	ldr	r3, [pc, #208]	; (8009f9c <mem_malloc+0x1d0>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d127      	bne.n	8009f22 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009ed2:	4b32      	ldr	r3, [pc, #200]	; (8009f9c <mem_malloc+0x1d0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009ed8:	e005      	b.n	8009ee6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff fcd4 	bl	800988c <ptr_to_mem>
 8009ee4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	791b      	ldrb	r3, [r3, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d004      	beq.n	8009ef8 <mem_malloc+0x12c>
 8009eee:	4b2f      	ldr	r3, [pc, #188]	; (8009fac <mem_malloc+0x1e0>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d1f0      	bne.n	8009eda <mem_malloc+0x10e>
          }
          lfree = cur;
 8009ef8:	4a28      	ldr	r2, [pc, #160]	; (8009f9c <mem_malloc+0x1d0>)
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009efe:	4b27      	ldr	r3, [pc, #156]	; (8009f9c <mem_malloc+0x1d0>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	4b2a      	ldr	r3, [pc, #168]	; (8009fac <mem_malloc+0x1e0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d00b      	beq.n	8009f22 <mem_malloc+0x156>
 8009f0a:	4b24      	ldr	r3, [pc, #144]	; (8009f9c <mem_malloc+0x1d0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	791b      	ldrb	r3, [r3, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d006      	beq.n	8009f22 <mem_malloc+0x156>
 8009f14:	4b22      	ldr	r3, [pc, #136]	; (8009fa0 <mem_malloc+0x1d4>)
 8009f16:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009f1a:	4925      	ldr	r1, [pc, #148]	; (8009fb0 <mem_malloc+0x1e4>)
 8009f1c:	4822      	ldr	r0, [pc, #136]	; (8009fa8 <mem_malloc+0x1dc>)
 8009f1e:	f00b fb5f 	bl	80155e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009f22:	8bba      	ldrh	r2, [r7, #28]
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	4413      	add	r3, r2
 8009f28:	3308      	adds	r3, #8
 8009f2a:	4a20      	ldr	r2, [pc, #128]	; (8009fac <mem_malloc+0x1e0>)
 8009f2c:	6812      	ldr	r2, [r2, #0]
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d906      	bls.n	8009f40 <mem_malloc+0x174>
 8009f32:	4b1b      	ldr	r3, [pc, #108]	; (8009fa0 <mem_malloc+0x1d4>)
 8009f34:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009f38:	491e      	ldr	r1, [pc, #120]	; (8009fb4 <mem_malloc+0x1e8>)
 8009f3a:	481b      	ldr	r0, [pc, #108]	; (8009fa8 <mem_malloc+0x1dc>)
 8009f3c:	f00b fb50 	bl	80155e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d006      	beq.n	8009f58 <mem_malloc+0x18c>
 8009f4a:	4b15      	ldr	r3, [pc, #84]	; (8009fa0 <mem_malloc+0x1d4>)
 8009f4c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009f50:	4919      	ldr	r1, [pc, #100]	; (8009fb8 <mem_malloc+0x1ec>)
 8009f52:	4815      	ldr	r0, [pc, #84]	; (8009fa8 <mem_malloc+0x1dc>)
 8009f54:	f00b fb44 	bl	80155e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <mem_malloc+0x1a4>
 8009f62:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <mem_malloc+0x1d4>)
 8009f64:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009f68:	4914      	ldr	r1, [pc, #80]	; (8009fbc <mem_malloc+0x1f0>)
 8009f6a:	480f      	ldr	r0, [pc, #60]	; (8009fa8 <mem_malloc+0x1dc>)
 8009f6c:	f00b fb38 	bl	80155e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	3308      	adds	r3, #8
 8009f74:	e00e      	b.n	8009f94 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009f76:	8bfb      	ldrh	r3, [r7, #30]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff fc87 	bl	800988c <ptr_to_mem>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f84:	8bfa      	ldrh	r2, [r7, #30]
 8009f86:	8bbb      	ldrh	r3, [r7, #28]
 8009f88:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	f4ff af44 	bcc.w	8009e1a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3720      	adds	r7, #32
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	20005744 	.word	0x20005744
 8009fa0:	080166ec 	.word	0x080166ec
 8009fa4:	08016894 	.word	0x08016894
 8009fa8:	08016734 	.word	0x08016734
 8009fac:	20005740 	.word	0x20005740
 8009fb0:	080168a8 	.word	0x080168a8
 8009fb4:	080168c4 	.word	0x080168c4
 8009fb8:	080168f4 	.word	0x080168f4
 8009fbc:	08016924 	.word	0x08016924

08009fc0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	3303      	adds	r3, #3
 8009fd6:	f023 0303 	bic.w	r3, r3, #3
 8009fda:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e011      	b.n	800a006 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	885b      	ldrh	r3, [r3, #2]
 800a00a:	461a      	mov	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4293      	cmp	r3, r2
 800a010:	dbe7      	blt.n	8009fe2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a026:	2300      	movs	r3, #0
 800a028:	80fb      	strh	r3, [r7, #6]
 800a02a:	e009      	b.n	800a040 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a02c:	88fb      	ldrh	r3, [r7, #6]
 800a02e:	4a08      	ldr	r2, [pc, #32]	; (800a050 <memp_init+0x30>)
 800a030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff ffc3 	bl	8009fc0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	3301      	adds	r3, #1
 800a03e:	80fb      	strh	r3, [r7, #6]
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	2b08      	cmp	r3, #8
 800a044:	d9f2      	bls.n	800a02c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a046:	bf00      	nop
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	080194b0 	.word	0x080194b0

0800a054 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d012      	beq.n	800a090 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	6812      	ldr	r2, [r2, #0]
 800a072:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d006      	beq.n	800a08c <do_memp_malloc_pool+0x38>
 800a07e:	4b07      	ldr	r3, [pc, #28]	; (800a09c <do_memp_malloc_pool+0x48>)
 800a080:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a084:	4906      	ldr	r1, [pc, #24]	; (800a0a0 <do_memp_malloc_pool+0x4c>)
 800a086:	4807      	ldr	r0, [pc, #28]	; (800a0a4 <do_memp_malloc_pool+0x50>)
 800a088:	f00b faaa 	bl	80155e0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	e000      	b.n	800a092 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	08016948 	.word	0x08016948
 800a0a0:	08016978 	.word	0x08016978
 800a0a4:	0801699c 	.word	0x0801699c

0800a0a8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d106      	bne.n	800a0c4 <memp_malloc_pool+0x1c>
 800a0b6:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <memp_malloc_pool+0x38>)
 800a0b8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a0bc:	4909      	ldr	r1, [pc, #36]	; (800a0e4 <memp_malloc_pool+0x3c>)
 800a0be:	480a      	ldr	r0, [pc, #40]	; (800a0e8 <memp_malloc_pool+0x40>)
 800a0c0:	f00b fa8e 	bl	80155e0 <iprintf>
  if (desc == NULL) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <memp_malloc_pool+0x26>
    return NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	e003      	b.n	800a0d6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff ffc0 	bl	800a054 <do_memp_malloc_pool>
 800a0d4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	08016948 	.word	0x08016948
 800a0e4:	080169c4 	.word	0x080169c4
 800a0e8:	0801699c 	.word	0x0801699c

0800a0ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	d908      	bls.n	800a10e <memp_malloc+0x22>
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <memp_malloc+0x3c>)
 800a0fe:	f240 1257 	movw	r2, #343	; 0x157
 800a102:	490a      	ldr	r1, [pc, #40]	; (800a12c <memp_malloc+0x40>)
 800a104:	480a      	ldr	r0, [pc, #40]	; (800a130 <memp_malloc+0x44>)
 800a106:	f00b fa6b 	bl	80155e0 <iprintf>
 800a10a:	2300      	movs	r3, #0
 800a10c:	e008      	b.n	800a120 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a10e:	79fb      	ldrb	r3, [r7, #7]
 800a110:	4a08      	ldr	r2, [pc, #32]	; (800a134 <memp_malloc+0x48>)
 800a112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff ff9c 	bl	800a054 <do_memp_malloc_pool>
 800a11c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a11e:	68fb      	ldr	r3, [r7, #12]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	08016948 	.word	0x08016948
 800a12c:	080169d8 	.word	0x080169d8
 800a130:	0801699c 	.word	0x0801699c
 800a134:	080194b0 	.word	0x080194b0

0800a138 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	f003 0303 	and.w	r3, r3, #3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d006      	beq.n	800a15a <do_memp_free_pool+0x22>
 800a14c:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <do_memp_free_pool+0x40>)
 800a14e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a152:	490a      	ldr	r1, [pc, #40]	; (800a17c <do_memp_free_pool+0x44>)
 800a154:	480a      	ldr	r0, [pc, #40]	; (800a180 <do_memp_free_pool+0x48>)
 800a156:	f00b fa43 	bl	80155e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a170:	bf00      	nop
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	08016948 	.word	0x08016948
 800a17c:	080169f8 	.word	0x080169f8
 800a180:	0801699c 	.word	0x0801699c

0800a184 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d106      	bne.n	800a1a2 <memp_free_pool+0x1e>
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <memp_free_pool+0x3c>)
 800a196:	f240 1295 	movw	r2, #405	; 0x195
 800a19a:	490a      	ldr	r1, [pc, #40]	; (800a1c4 <memp_free_pool+0x40>)
 800a19c:	480a      	ldr	r0, [pc, #40]	; (800a1c8 <memp_free_pool+0x44>)
 800a19e:	f00b fa1f 	bl	80155e0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d007      	beq.n	800a1b8 <memp_free_pool+0x34>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d004      	beq.n	800a1b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff ffc1 	bl	800a138 <do_memp_free_pool>
 800a1b6:	e000      	b.n	800a1ba <memp_free_pool+0x36>
    return;
 800a1b8:	bf00      	nop
}
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	08016948 	.word	0x08016948
 800a1c4:	080169c4 	.word	0x080169c4
 800a1c8:	0801699c 	.word	0x0801699c

0800a1cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d907      	bls.n	800a1ee <memp_free+0x22>
 800a1de:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <memp_free+0x44>)
 800a1e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a1e4:	490b      	ldr	r1, [pc, #44]	; (800a214 <memp_free+0x48>)
 800a1e6:	480c      	ldr	r0, [pc, #48]	; (800a218 <memp_free+0x4c>)
 800a1e8:	f00b f9fa 	bl	80155e0 <iprintf>
 800a1ec:	e00c      	b.n	800a208 <memp_free+0x3c>

  if (mem == NULL) {
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d008      	beq.n	800a206 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	4a09      	ldr	r2, [pc, #36]	; (800a21c <memp_free+0x50>)
 800a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7ff ff9a 	bl	800a138 <do_memp_free_pool>
 800a204:	e000      	b.n	800a208 <memp_free+0x3c>
    return;
 800a206:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	08016948 	.word	0x08016948
 800a214:	08016a18 	.word	0x08016a18
 800a218:	0801699c 	.word	0x0801699c
 800a21c:	080194b0 	.word	0x080194b0

0800a220 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a220:	b480      	push	{r7}
 800a222:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a224:	bf00      	nop
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
	...

0800a230 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d108      	bne.n	800a256 <netif_add+0x26>
 800a244:	4b5b      	ldr	r3, [pc, #364]	; (800a3b4 <netif_add+0x184>)
 800a246:	f240 1227 	movw	r2, #295	; 0x127
 800a24a:	495b      	ldr	r1, [pc, #364]	; (800a3b8 <netif_add+0x188>)
 800a24c:	485b      	ldr	r0, [pc, #364]	; (800a3bc <netif_add+0x18c>)
 800a24e:	f00b f9c7 	bl	80155e0 <iprintf>
 800a252:	2300      	movs	r3, #0
 800a254:	e0a9      	b.n	800a3aa <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d108      	bne.n	800a26e <netif_add+0x3e>
 800a25c:	4b55      	ldr	r3, [pc, #340]	; (800a3b4 <netif_add+0x184>)
 800a25e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a262:	4957      	ldr	r1, [pc, #348]	; (800a3c0 <netif_add+0x190>)
 800a264:	4855      	ldr	r0, [pc, #340]	; (800a3bc <netif_add+0x18c>)
 800a266:	f00b f9bb 	bl	80155e0 <iprintf>
 800a26a:	2300      	movs	r3, #0
 800a26c:	e09d      	b.n	800a3aa <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a274:	4b53      	ldr	r3, [pc, #332]	; (800a3c4 <netif_add+0x194>)
 800a276:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a27e:	4b51      	ldr	r3, [pc, #324]	; (800a3c4 <netif_add+0x194>)
 800a280:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a288:	4b4e      	ldr	r3, [pc, #312]	; (800a3c4 <netif_add+0x194>)
 800a28a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	4a49      	ldr	r2, [pc, #292]	; (800a3c8 <netif_add+0x198>)
 800a2a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	3324      	adds	r3, #36	; 0x24
 800a2b6:	2204      	movs	r2, #4
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f00b f988 	bl	80155d0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6a3a      	ldr	r2, [r7, #32]
 800a2ca:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a2cc:	4b3f      	ldr	r3, [pc, #252]	; (800a3cc <netif_add+0x19c>)
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2da:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 f914 	bl	800a510 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	4798      	blx	r3
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <netif_add+0xc8>
    return NULL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	e058      	b.n	800a3aa <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2fe:	2bff      	cmp	r3, #255	; 0xff
 800a300:	d103      	bne.n	800a30a <netif_add+0xda>
        netif->num = 0;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a30e:	4b30      	ldr	r3, [pc, #192]	; (800a3d0 <netif_add+0x1a0>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e02b      	b.n	800a36e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d106      	bne.n	800a32c <netif_add+0xfc>
 800a31e:	4b25      	ldr	r3, [pc, #148]	; (800a3b4 <netif_add+0x184>)
 800a320:	f240 128b 	movw	r2, #395	; 0x18b
 800a324:	492b      	ldr	r1, [pc, #172]	; (800a3d4 <netif_add+0x1a4>)
 800a326:	4825      	ldr	r0, [pc, #148]	; (800a3bc <netif_add+0x18c>)
 800a328:	f00b f95a 	bl	80155e0 <iprintf>
        num_netifs++;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	3301      	adds	r3, #1
 800a330:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2bff      	cmp	r3, #255	; 0xff
 800a336:	dd06      	ble.n	800a346 <netif_add+0x116>
 800a338:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <netif_add+0x184>)
 800a33a:	f240 128d 	movw	r2, #397	; 0x18d
 800a33e:	4926      	ldr	r1, [pc, #152]	; (800a3d8 <netif_add+0x1a8>)
 800a340:	481e      	ldr	r0, [pc, #120]	; (800a3bc <netif_add+0x18c>)
 800a342:	f00b f94d 	bl	80155e0 <iprintf>
        if (netif2->num == netif->num) {
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a352:	429a      	cmp	r2, r3
 800a354:	d108      	bne.n	800a368 <netif_add+0x138>
          netif->num++;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a35c:	3301      	adds	r3, #1
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a366:	e005      	b.n	800a374 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1d0      	bne.n	800a316 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1be      	bne.n	800a2f8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a380:	2bfe      	cmp	r3, #254	; 0xfe
 800a382:	d103      	bne.n	800a38c <netif_add+0x15c>
    netif_num = 0;
 800a384:	4b11      	ldr	r3, [pc, #68]	; (800a3cc <netif_add+0x19c>)
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
 800a38a:	e006      	b.n	800a39a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a392:	3301      	adds	r3, #1
 800a394:	b2da      	uxtb	r2, r3
 800a396:	4b0d      	ldr	r3, [pc, #52]	; (800a3cc <netif_add+0x19c>)
 800a398:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a39a:	4b0d      	ldr	r3, [pc, #52]	; (800a3d0 <netif_add+0x1a0>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a3a2:	4a0b      	ldr	r2, [pc, #44]	; (800a3d0 <netif_add+0x1a0>)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	08016a34 	.word	0x08016a34
 800a3b8:	08016ac8 	.word	0x08016ac8
 800a3bc:	08016a84 	.word	0x08016a84
 800a3c0:	08016ae4 	.word	0x08016ae4
 800a3c4:	08019524 	.word	0x08019524
 800a3c8:	0800a7f3 	.word	0x0800a7f3
 800a3cc:	2000865c 	.word	0x2000865c
 800a3d0:	20008654 	.word	0x20008654
 800a3d4:	08016b08 	.word	0x08016b08
 800a3d8:	08016b1c 	.word	0x08016b1c

0800a3dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f002 fb37 	bl	800ca5c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f006 fedb 	bl	80111ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a3f6:	bf00      	nop
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <netif_do_set_ipaddr+0x20>
 800a412:	4b1d      	ldr	r3, [pc, #116]	; (800a488 <netif_do_set_ipaddr+0x88>)
 800a414:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a418:	491c      	ldr	r1, [pc, #112]	; (800a48c <netif_do_set_ipaddr+0x8c>)
 800a41a:	481d      	ldr	r0, [pc, #116]	; (800a490 <netif_do_set_ipaddr+0x90>)
 800a41c:	f00b f8e0 	bl	80155e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <netif_do_set_ipaddr+0x34>
 800a426:	4b18      	ldr	r3, [pc, #96]	; (800a488 <netif_do_set_ipaddr+0x88>)
 800a428:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a42c:	4917      	ldr	r1, [pc, #92]	; (800a48c <netif_do_set_ipaddr+0x8c>)
 800a42e:	4818      	ldr	r0, [pc, #96]	; (800a490 <netif_do_set_ipaddr+0x90>)
 800a430:	f00b f8d6 	bl	80155e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3304      	adds	r3, #4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d01c      	beq.n	800a47c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3304      	adds	r3, #4
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a452:	f107 0314 	add.w	r3, r7, #20
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff ffbf 	bl	800a3dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <netif_do_set_ipaddr+0x6a>
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	e000      	b.n	800a46c <netif_do_set_ipaddr+0x6c>
 800a46a:	2300      	movs	r3, #0
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a470:	2101      	movs	r1, #1
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 f8d2 	bl	800a61c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a478:	2301      	movs	r3, #1
 800a47a:	e000      	b.n	800a47e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	08016a34 	.word	0x08016a34
 800a48c:	08016b4c 	.word	0x08016b4c
 800a490:	08016a84 	.word	0x08016a84

0800a494 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d00a      	beq.n	800a4c4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <netif_do_set_netmask+0x26>
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	e000      	b.n	800a4bc <netif_do_set_netmask+0x28>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e000      	b.n	800a4c6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	60f8      	str	r0, [r7, #12]
 800a4da:	60b9      	str	r1, [r7, #8]
 800a4dc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	330c      	adds	r3, #12
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d00a      	beq.n	800a502 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <netif_do_set_gw+0x26>
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	e000      	b.n	800a4fa <netif_do_set_gw+0x28>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a4fe:	2301      	movs	r3, #1
 800a500:	e000      	b.n	800a504 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a51e:	2300      	movs	r3, #0
 800a520:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a52c:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <netif_set_addr+0x90>)
 800a52e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a536:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <netif_set_addr+0x90>)
 800a538:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a540:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <netif_set_addr+0x90>)
 800a542:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <netif_set_addr+0x42>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <netif_set_addr+0x46>
 800a552:	2301      	movs	r3, #1
 800a554:	e000      	b.n	800a558 <netif_set_addr+0x48>
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d006      	beq.n	800a56e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a560:	f107 0310 	add.w	r3, r7, #16
 800a564:	461a      	mov	r2, r3
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7ff ff49 	bl	800a400 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a56e:	69fa      	ldr	r2, [r7, #28]
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff ff8e 	bl	800a494 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a578:	69ba      	ldr	r2, [r7, #24]
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f7ff ffa8 	bl	800a4d2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d106      	bne.n	800a596 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a588:	f107 0310 	add.w	r3, r7, #16
 800a58c:	461a      	mov	r2, r3
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff ff35 	bl	800a400 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a596:	bf00      	nop
 800a598:	3720      	adds	r7, #32
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	08019524 	.word	0x08019524

0800a5a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a5ac:	4a04      	ldr	r2, [pc, #16]	; (800a5c0 <netif_set_default+0x1c>)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a5b2:	bf00      	nop
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	20008658 	.word	0x20008658

0800a5c4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d107      	bne.n	800a5e2 <netif_set_up+0x1e>
 800a5d2:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <netif_set_up+0x4c>)
 800a5d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a5d8:	490e      	ldr	r1, [pc, #56]	; (800a614 <netif_set_up+0x50>)
 800a5da:	480f      	ldr	r0, [pc, #60]	; (800a618 <netif_set_up+0x54>)
 800a5dc:	f00b f800 	bl	80155e0 <iprintf>
 800a5e0:	e013      	b.n	800a60a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10c      	bne.n	800a60a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a5f6:	f043 0301 	orr.w	r3, r3, #1
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a602:	2103      	movs	r1, #3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f809 	bl	800a61c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	08016a34 	.word	0x08016a34
 800a614:	08016bbc 	.word	0x08016bbc
 800a618:	08016a84 	.word	0x08016a84

0800a61c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <netif_issue_reports+0x20>
 800a62e:	4b18      	ldr	r3, [pc, #96]	; (800a690 <netif_issue_reports+0x74>)
 800a630:	f240 326d 	movw	r2, #877	; 0x36d
 800a634:	4917      	ldr	r1, [pc, #92]	; (800a694 <netif_issue_reports+0x78>)
 800a636:	4818      	ldr	r0, [pc, #96]	; (800a698 <netif_issue_reports+0x7c>)
 800a638:	f00a ffd2 	bl	80155e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a642:	f003 0304 	and.w	r3, r3, #4
 800a646:	2b00      	cmp	r3, #0
 800a648:	d01e      	beq.n	800a688 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a650:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a654:	2b00      	cmp	r3, #0
 800a656:	d017      	beq.n	800a688 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a658:	78fb      	ldrb	r3, [r7, #3]
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d013      	beq.n	800a68a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3304      	adds	r3, #4
 800a666:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00e      	beq.n	800a68a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a672:	f003 0308 	and.w	r3, r3, #8
 800a676:	2b00      	cmp	r3, #0
 800a678:	d007      	beq.n	800a68a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	3304      	adds	r3, #4
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f009 fb93 	bl	8013dac <etharp_request>
 800a686:	e000      	b.n	800a68a <netif_issue_reports+0x6e>
    return;
 800a688:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	08016a34 	.word	0x08016a34
 800a694:	08016bd8 	.word	0x08016bd8
 800a698:	08016a84 	.word	0x08016a84

0800a69c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d107      	bne.n	800a6ba <netif_set_down+0x1e>
 800a6aa:	4b12      	ldr	r3, [pc, #72]	; (800a6f4 <netif_set_down+0x58>)
 800a6ac:	f240 329b 	movw	r2, #923	; 0x39b
 800a6b0:	4911      	ldr	r1, [pc, #68]	; (800a6f8 <netif_set_down+0x5c>)
 800a6b2:	4812      	ldr	r0, [pc, #72]	; (800a6fc <netif_set_down+0x60>)
 800a6b4:	f00a ff94 	bl	80155e0 <iprintf>
 800a6b8:	e019      	b.n	800a6ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d012      	beq.n	800a6ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a6ce:	f023 0301 	bic.w	r3, r3, #1
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a6e0:	f003 0308 	and.w	r3, r3, #8
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f008 ff19 	bl	8013520 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	08016a34 	.word	0x08016a34
 800a6f8:	08016bfc 	.word	0x08016bfc
 800a6fc:	08016a84 	.word	0x08016a84

0800a700 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d107      	bne.n	800a71e <netif_set_link_up+0x1e>
 800a70e:	4b15      	ldr	r3, [pc, #84]	; (800a764 <netif_set_link_up+0x64>)
 800a710:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a714:	4914      	ldr	r1, [pc, #80]	; (800a768 <netif_set_link_up+0x68>)
 800a716:	4815      	ldr	r0, [pc, #84]	; (800a76c <netif_set_link_up+0x6c>)
 800a718:	f00a ff62 	bl	80155e0 <iprintf>
 800a71c:	e01e      	b.n	800a75c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d117      	bne.n	800a75c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a732:	f043 0304 	orr.w	r3, r3, #4
 800a736:	b2da      	uxtb	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f007 f95e 	bl	8011a00 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a744:	2103      	movs	r1, #3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff ff68 	bl	800a61c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d003      	beq.n	800a75c <netif_set_link_up+0x5c>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	08016a34 	.word	0x08016a34
 800a768:	08016c1c 	.word	0x08016c1c
 800a76c:	08016a84 	.word	0x08016a84

0800a770 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d107      	bne.n	800a78e <netif_set_link_down+0x1e>
 800a77e:	4b11      	ldr	r3, [pc, #68]	; (800a7c4 <netif_set_link_down+0x54>)
 800a780:	f240 4206 	movw	r2, #1030	; 0x406
 800a784:	4910      	ldr	r1, [pc, #64]	; (800a7c8 <netif_set_link_down+0x58>)
 800a786:	4811      	ldr	r0, [pc, #68]	; (800a7cc <netif_set_link_down+0x5c>)
 800a788:	f00a ff2a 	bl	80155e0 <iprintf>
 800a78c:	e017      	b.n	800a7be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d010      	beq.n	800a7be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7a2:	f023 0304 	bic.w	r3, r3, #4
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <netif_set_link_down+0x4e>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	08016a34 	.word	0x08016a34
 800a7c8:	08016c40 	.word	0x08016c40
 800a7cc:	08016a84 	.word	0x08016a84

0800a7d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	61da      	str	r2, [r3, #28]
  }
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b085      	sub	sp, #20
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a7fe:	f06f 030b 	mvn.w	r3, #11
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
	...

0800a810 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d013      	beq.n	800a848 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a820:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <netif_get_by_index+0x48>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	60fb      	str	r3, [r7, #12]
 800a826:	e00c      	b.n	800a842 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a82e:	3301      	adds	r3, #1
 800a830:	b2db      	uxtb	r3, r3
 800a832:	79fa      	ldrb	r2, [r7, #7]
 800a834:	429a      	cmp	r2, r3
 800a836:	d101      	bne.n	800a83c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	e006      	b.n	800a84a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1ef      	bne.n	800a828 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	20008654 	.word	0x20008654

0800a85c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a860:	4b03      	ldr	r3, [pc, #12]	; (800a870 <pbuf_pool_is_empty+0x14>)
 800a862:	2201      	movs	r2, #1
 800a864:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a866:	bf00      	nop
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	2000865d 	.word	0x2000865d

0800a874 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	4611      	mov	r1, r2
 800a880:	461a      	mov	r2, r3
 800a882:	460b      	mov	r3, r1
 800a884:	80fb      	strh	r3, [r7, #6]
 800a886:	4613      	mov	r3, r2
 800a888:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	88fa      	ldrh	r2, [r7, #6]
 800a89a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	88ba      	ldrh	r2, [r7, #4]
 800a8a0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a8a2:	8b3b      	ldrh	r3, [r7, #24]
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	7f3a      	ldrb	r2, [r7, #28]
 800a8ae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	73da      	strb	r2, [r3, #15]
}
 800a8bc:	bf00      	nop
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08c      	sub	sp, #48	; 0x30
 800a8cc:	af02      	add	r7, sp, #8
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	71fb      	strb	r3, [r7, #7]
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	80bb      	strh	r3, [r7, #4]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a8de:	887b      	ldrh	r3, [r7, #2]
 800a8e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a8e4:	d07f      	beq.n	800a9e6 <pbuf_alloc+0x11e>
 800a8e6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a8ea:	f300 80c8 	bgt.w	800aa7e <pbuf_alloc+0x1b6>
 800a8ee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a8f2:	d010      	beq.n	800a916 <pbuf_alloc+0x4e>
 800a8f4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a8f8:	f300 80c1 	bgt.w	800aa7e <pbuf_alloc+0x1b6>
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d002      	beq.n	800a906 <pbuf_alloc+0x3e>
 800a900:	2b41      	cmp	r3, #65	; 0x41
 800a902:	f040 80bc 	bne.w	800aa7e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a906:	887a      	ldrh	r2, [r7, #2]
 800a908:	88bb      	ldrh	r3, [r7, #4]
 800a90a:	4619      	mov	r1, r3
 800a90c:	2000      	movs	r0, #0
 800a90e:	f000 f8d1 	bl	800aab4 <pbuf_alloc_reference>
 800a912:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a914:	e0bd      	b.n	800aa92 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a916:	2300      	movs	r3, #0
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a91e:	88bb      	ldrh	r3, [r7, #4]
 800a920:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a922:	2008      	movs	r0, #8
 800a924:	f7ff fbe2 	bl	800a0ec <memp_malloc>
 800a928:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d109      	bne.n	800a944 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a930:	f7ff ff94 	bl	800a85c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a93a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a93c:	f000 faa8 	bl	800ae90 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a940:	2300      	movs	r3, #0
 800a942:	e0a7      	b.n	800aa94 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a946:	3303      	adds	r3, #3
 800a948:	b29b      	uxth	r3, r3
 800a94a:	f023 0303 	bic.w	r3, r3, #3
 800a94e:	b29b      	uxth	r3, r3
 800a950:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a954:	b29b      	uxth	r3, r3
 800a956:	8b7a      	ldrh	r2, [r7, #26]
 800a958:	4293      	cmp	r3, r2
 800a95a:	bf28      	it	cs
 800a95c:	4613      	movcs	r3, r2
 800a95e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a962:	3310      	adds	r3, #16
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	4413      	add	r3, r2
 800a968:	3303      	adds	r3, #3
 800a96a:	f023 0303 	bic.w	r3, r3, #3
 800a96e:	4618      	mov	r0, r3
 800a970:	89f9      	ldrh	r1, [r7, #14]
 800a972:	8b7a      	ldrh	r2, [r7, #26]
 800a974:	2300      	movs	r3, #0
 800a976:	9301      	str	r3, [sp, #4]
 800a978:	887b      	ldrh	r3, [r7, #2]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	460b      	mov	r3, r1
 800a97e:	4601      	mov	r1, r0
 800a980:	6938      	ldr	r0, [r7, #16]
 800a982:	f7ff ff77 	bl	800a874 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f003 0303 	and.w	r3, r3, #3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d006      	beq.n	800a9a0 <pbuf_alloc+0xd8>
 800a992:	4b42      	ldr	r3, [pc, #264]	; (800aa9c <pbuf_alloc+0x1d4>)
 800a994:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a998:	4941      	ldr	r1, [pc, #260]	; (800aaa0 <pbuf_alloc+0x1d8>)
 800a99a:	4842      	ldr	r0, [pc, #264]	; (800aaa4 <pbuf_alloc+0x1dc>)
 800a99c:	f00a fe20 	bl	80155e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a9a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9a2:	3303      	adds	r3, #3
 800a9a4:	f023 0303 	bic.w	r3, r3, #3
 800a9a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a9ac:	d106      	bne.n	800a9bc <pbuf_alloc+0xf4>
 800a9ae:	4b3b      	ldr	r3, [pc, #236]	; (800aa9c <pbuf_alloc+0x1d4>)
 800a9b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a9b4:	493c      	ldr	r1, [pc, #240]	; (800aaa8 <pbuf_alloc+0x1e0>)
 800a9b6:	483b      	ldr	r0, [pc, #236]	; (800aaa4 <pbuf_alloc+0x1dc>)
 800a9b8:	f00a fe12 	bl	80155e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d102      	bne.n	800a9c8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9c6:	e002      	b.n	800a9ce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a9d2:	8b7a      	ldrh	r2, [r7, #26]
 800a9d4:	89fb      	ldrh	r3, [r7, #14]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a9de:	8b7b      	ldrh	r3, [r7, #26]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d19e      	bne.n	800a922 <pbuf_alloc+0x5a>
      break;
 800a9e4:	e055      	b.n	800aa92 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a9e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9e8:	3303      	adds	r3, #3
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	f023 0303 	bic.w	r3, r3, #3
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	88bb      	ldrh	r3, [r7, #4]
 800a9f4:	3303      	adds	r3, #3
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	f023 0303 	bic.w	r3, r3, #3
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4413      	add	r3, r2
 800aa00:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800aa02:	8b3b      	ldrh	r3, [r7, #24]
 800aa04:	3310      	adds	r3, #16
 800aa06:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aa08:	8b3a      	ldrh	r2, [r7, #24]
 800aa0a:	88bb      	ldrh	r3, [r7, #4]
 800aa0c:	3303      	adds	r3, #3
 800aa0e:	f023 0303 	bic.w	r3, r3, #3
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d306      	bcc.n	800aa24 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800aa16:	8afa      	ldrh	r2, [r7, #22]
 800aa18:	88bb      	ldrh	r3, [r7, #4]
 800aa1a:	3303      	adds	r3, #3
 800aa1c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d201      	bcs.n	800aa28 <pbuf_alloc+0x160>
        return NULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	e035      	b.n	800aa94 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800aa28:	8afb      	ldrh	r3, [r7, #22]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff f9ce 	bl	8009dcc <mem_malloc>
 800aa30:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <pbuf_alloc+0x174>
        return NULL;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	e02b      	b.n	800aa94 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aa3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa3e:	3310      	adds	r3, #16
 800aa40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa42:	4413      	add	r3, r2
 800aa44:	3303      	adds	r3, #3
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	88b9      	ldrh	r1, [r7, #4]
 800aa4e:	88ba      	ldrh	r2, [r7, #4]
 800aa50:	2300      	movs	r3, #0
 800aa52:	9301      	str	r3, [sp, #4]
 800aa54:	887b      	ldrh	r3, [r7, #2]
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4601      	mov	r1, r0
 800aa5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa5e:	f7ff ff09 	bl	800a874 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d010      	beq.n	800aa90 <pbuf_alloc+0x1c8>
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <pbuf_alloc+0x1d4>)
 800aa70:	f44f 7291 	mov.w	r2, #290	; 0x122
 800aa74:	490d      	ldr	r1, [pc, #52]	; (800aaac <pbuf_alloc+0x1e4>)
 800aa76:	480b      	ldr	r0, [pc, #44]	; (800aaa4 <pbuf_alloc+0x1dc>)
 800aa78:	f00a fdb2 	bl	80155e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800aa7c:	e008      	b.n	800aa90 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800aa7e:	4b07      	ldr	r3, [pc, #28]	; (800aa9c <pbuf_alloc+0x1d4>)
 800aa80:	f240 1227 	movw	r2, #295	; 0x127
 800aa84:	490a      	ldr	r1, [pc, #40]	; (800aab0 <pbuf_alloc+0x1e8>)
 800aa86:	4807      	ldr	r0, [pc, #28]	; (800aaa4 <pbuf_alloc+0x1dc>)
 800aa88:	f00a fdaa 	bl	80155e0 <iprintf>
      return NULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e001      	b.n	800aa94 <pbuf_alloc+0x1cc>
      break;
 800aa90:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3728      	adds	r7, #40	; 0x28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	08016c64 	.word	0x08016c64
 800aaa0:	08016c94 	.word	0x08016c94
 800aaa4:	08016cc4 	.word	0x08016cc4
 800aaa8:	08016cec 	.word	0x08016cec
 800aaac:	08016d20 	.word	0x08016d20
 800aab0:	08016d4c 	.word	0x08016d4c

0800aab4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	807b      	strh	r3, [r7, #2]
 800aac0:	4613      	mov	r3, r2
 800aac2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800aac4:	883b      	ldrh	r3, [r7, #0]
 800aac6:	2b41      	cmp	r3, #65	; 0x41
 800aac8:	d009      	beq.n	800aade <pbuf_alloc_reference+0x2a>
 800aaca:	883b      	ldrh	r3, [r7, #0]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d006      	beq.n	800aade <pbuf_alloc_reference+0x2a>
 800aad0:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <pbuf_alloc_reference+0x5c>)
 800aad2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800aad6:	490f      	ldr	r1, [pc, #60]	; (800ab14 <pbuf_alloc_reference+0x60>)
 800aad8:	480f      	ldr	r0, [pc, #60]	; (800ab18 <pbuf_alloc_reference+0x64>)
 800aada:	f00a fd81 	bl	80155e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800aade:	2007      	movs	r0, #7
 800aae0:	f7ff fb04 	bl	800a0ec <memp_malloc>
 800aae4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e00b      	b.n	800ab08 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800aaf0:	8879      	ldrh	r1, [r7, #2]
 800aaf2:	887a      	ldrh	r2, [r7, #2]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	883b      	ldrh	r3, [r7, #0]
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	460b      	mov	r3, r1
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7ff feb7 	bl	800a874 <pbuf_init_alloced_pbuf>
  return p;
 800ab06:	68fb      	ldr	r3, [r7, #12]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	08016c64 	.word	0x08016c64
 800ab14:	08016d68 	.word	0x08016d68
 800ab18:	08016cc4 	.word	0x08016cc4

0800ab1c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af02      	add	r7, sp, #8
 800ab22:	607b      	str	r3, [r7, #4]
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	81bb      	strh	r3, [r7, #12]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ab34:	8a7b      	ldrh	r3, [r7, #18]
 800ab36:	3303      	adds	r3, #3
 800ab38:	f023 0203 	bic.w	r2, r3, #3
 800ab3c:	89bb      	ldrh	r3, [r7, #12]
 800ab3e:	441a      	add	r2, r3
 800ab40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d901      	bls.n	800ab4a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e018      	b.n	800ab7c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d007      	beq.n	800ab60 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ab50:	8a7b      	ldrh	r3, [r7, #18]
 800ab52:	3303      	adds	r3, #3
 800ab54:	f023 0303 	bic.w	r3, r3, #3
 800ab58:	6a3a      	ldr	r2, [r7, #32]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	617b      	str	r3, [r7, #20]
 800ab5e:	e001      	b.n	800ab64 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ab60:	2300      	movs	r3, #0
 800ab62:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	89b9      	ldrh	r1, [r7, #12]
 800ab68:	89ba      	ldrh	r2, [r7, #12]
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	9301      	str	r3, [sp, #4]
 800ab6e:	897b      	ldrh	r3, [r7, #10]
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	460b      	mov	r3, r1
 800ab74:	6979      	ldr	r1, [r7, #20]
 800ab76:	f7ff fe7d 	bl	800a874 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ab7a:	687b      	ldr	r3, [r7, #4]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d106      	bne.n	800aba4 <pbuf_realloc+0x20>
 800ab96:	4b3a      	ldr	r3, [pc, #232]	; (800ac80 <pbuf_realloc+0xfc>)
 800ab98:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ab9c:	4939      	ldr	r1, [pc, #228]	; (800ac84 <pbuf_realloc+0x100>)
 800ab9e:	483a      	ldr	r0, [pc, #232]	; (800ac88 <pbuf_realloc+0x104>)
 800aba0:	f00a fd1e 	bl	80155e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	891b      	ldrh	r3, [r3, #8]
 800aba8:	887a      	ldrh	r2, [r7, #2]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d263      	bcs.n	800ac76 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	891a      	ldrh	r2, [r3, #8]
 800abb2:	887b      	ldrh	r3, [r7, #2]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800abb8:	887b      	ldrh	r3, [r7, #2]
 800abba:	817b      	strh	r3, [r7, #10]
  q = p;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800abc0:	e018      	b.n	800abf4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	895b      	ldrh	r3, [r3, #10]
 800abc6:	897a      	ldrh	r2, [r7, #10]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	891a      	ldrh	r2, [r3, #8]
 800abd0:	893b      	ldrh	r3, [r7, #8]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d106      	bne.n	800abf4 <pbuf_realloc+0x70>
 800abe6:	4b26      	ldr	r3, [pc, #152]	; (800ac80 <pbuf_realloc+0xfc>)
 800abe8:	f240 12af 	movw	r2, #431	; 0x1af
 800abec:	4927      	ldr	r1, [pc, #156]	; (800ac8c <pbuf_realloc+0x108>)
 800abee:	4826      	ldr	r0, [pc, #152]	; (800ac88 <pbuf_realloc+0x104>)
 800abf0:	f00a fcf6 	bl	80155e0 <iprintf>
  while (rem_len > q->len) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	895b      	ldrh	r3, [r3, #10]
 800abf8:	897a      	ldrh	r2, [r7, #10]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d8e1      	bhi.n	800abc2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	7b1b      	ldrb	r3, [r3, #12]
 800ac02:	f003 030f 	and.w	r3, r3, #15
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d121      	bne.n	800ac4e <pbuf_realloc+0xca>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	895b      	ldrh	r3, [r3, #10]
 800ac0e:	897a      	ldrh	r2, [r7, #10]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d01c      	beq.n	800ac4e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	7b5b      	ldrb	r3, [r3, #13]
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d116      	bne.n	800ac4e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	897b      	ldrh	r3, [r7, #10]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	4619      	mov	r1, r3
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f7fe ffce 	bl	8009bd4 <mem_trim>
 800ac38:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d106      	bne.n	800ac4e <pbuf_realloc+0xca>
 800ac40:	4b0f      	ldr	r3, [pc, #60]	; (800ac80 <pbuf_realloc+0xfc>)
 800ac42:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ac46:	4912      	ldr	r1, [pc, #72]	; (800ac90 <pbuf_realloc+0x10c>)
 800ac48:	480f      	ldr	r0, [pc, #60]	; (800ac88 <pbuf_realloc+0x104>)
 800ac4a:	f00a fcc9 	bl	80155e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	897a      	ldrh	r2, [r7, #10]
 800ac52:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	895a      	ldrh	r2, [r3, #10]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d004      	beq.n	800ac6e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 f911 	bl	800ae90 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	e000      	b.n	800ac78 <pbuf_realloc+0xf4>
    return;
 800ac76:	bf00      	nop

}
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	08016c64 	.word	0x08016c64
 800ac84:	08016d7c 	.word	0x08016d7c
 800ac88:	08016cc4 	.word	0x08016cc4
 800ac8c:	08016d94 	.word	0x08016d94
 800ac90:	08016dac 	.word	0x08016dac

0800ac94 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b086      	sub	sp, #24
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d106      	bne.n	800acb6 <pbuf_add_header_impl+0x22>
 800aca8:	4b2b      	ldr	r3, [pc, #172]	; (800ad58 <pbuf_add_header_impl+0xc4>)
 800acaa:	f240 12df 	movw	r2, #479	; 0x1df
 800acae:	492b      	ldr	r1, [pc, #172]	; (800ad5c <pbuf_add_header_impl+0xc8>)
 800acb0:	482b      	ldr	r0, [pc, #172]	; (800ad60 <pbuf_add_header_impl+0xcc>)
 800acb2:	f00a fc95 	bl	80155e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <pbuf_add_header_impl+0x30>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acc2:	d301      	bcc.n	800acc8 <pbuf_add_header_impl+0x34>
    return 1;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e043      	b.n	800ad50 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <pbuf_add_header_impl+0x3e>
    return 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	e03e      	b.n	800ad50 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	891a      	ldrh	r2, [r3, #8]
 800acda:	8a7b      	ldrh	r3, [r7, #18]
 800acdc:	4413      	add	r3, r2
 800acde:	b29b      	uxth	r3, r3
 800ace0:	8a7a      	ldrh	r2, [r7, #18]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d901      	bls.n	800acea <pbuf_add_header_impl+0x56>
    return 1;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e032      	b.n	800ad50 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	7b1b      	ldrb	r3, [r3, #12]
 800acee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800acf0:	8a3b      	ldrh	r3, [r7, #16]
 800acf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00c      	beq.n	800ad14 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	425b      	negs	r3, r3
 800ad02:	4413      	add	r3, r2
 800ad04:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3310      	adds	r3, #16
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d20d      	bcs.n	800ad2c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e01d      	b.n	800ad50 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d006      	beq.n	800ad28 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	425b      	negs	r3, r3
 800ad22:	4413      	add	r3, r2
 800ad24:	617b      	str	r3, [r7, #20]
 800ad26:	e001      	b.n	800ad2c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e011      	b.n	800ad50 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	895a      	ldrh	r2, [r3, #10]
 800ad36:	8a7b      	ldrh	r3, [r7, #18]
 800ad38:	4413      	add	r3, r2
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	891a      	ldrh	r2, [r3, #8]
 800ad44:	8a7b      	ldrh	r3, [r7, #18]
 800ad46:	4413      	add	r3, r2
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	811a      	strh	r2, [r3, #8]


  return 0;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	08016c64 	.word	0x08016c64
 800ad5c:	08016dc8 	.word	0x08016dc8
 800ad60:	08016cc4 	.word	0x08016cc4

0800ad64 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ad6e:	2200      	movs	r2, #0
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff ff8e 	bl	800ac94 <pbuf_add_header_impl>
 800ad78:	4603      	mov	r3, r0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d106      	bne.n	800ada2 <pbuf_remove_header+0x1e>
 800ad94:	4b20      	ldr	r3, [pc, #128]	; (800ae18 <pbuf_remove_header+0x94>)
 800ad96:	f240 224b 	movw	r2, #587	; 0x24b
 800ad9a:	4920      	ldr	r1, [pc, #128]	; (800ae1c <pbuf_remove_header+0x98>)
 800ad9c:	4820      	ldr	r0, [pc, #128]	; (800ae20 <pbuf_remove_header+0x9c>)
 800ad9e:	f00a fc1f 	bl	80155e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <pbuf_remove_header+0x2c>
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adae:	d301      	bcc.n	800adb4 <pbuf_remove_header+0x30>
    return 1;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e02c      	b.n	800ae0e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <pbuf_remove_header+0x3a>
    return 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	e027      	b.n	800ae0e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	895b      	ldrh	r3, [r3, #10]
 800adc6:	89fa      	ldrh	r2, [r7, #14]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d908      	bls.n	800adde <pbuf_remove_header+0x5a>
 800adcc:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <pbuf_remove_header+0x94>)
 800adce:	f240 2255 	movw	r2, #597	; 0x255
 800add2:	4914      	ldr	r1, [pc, #80]	; (800ae24 <pbuf_remove_header+0xa0>)
 800add4:	4812      	ldr	r0, [pc, #72]	; (800ae20 <pbuf_remove_header+0x9c>)
 800add6:	f00a fc03 	bl	80155e0 <iprintf>
 800adda:	2301      	movs	r3, #1
 800addc:	e017      	b.n	800ae0e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	441a      	add	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	895a      	ldrh	r2, [r3, #10]
 800adf4:	89fb      	ldrh	r3, [r7, #14]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	891a      	ldrh	r2, [r3, #8]
 800ae02:	89fb      	ldrh	r3, [r7, #14]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	08016c64 	.word	0x08016c64
 800ae1c:	08016dc8 	.word	0x08016dc8
 800ae20:	08016cc4 	.word	0x08016cc4
 800ae24:	08016dd4 	.word	0x08016dd4

0800ae28 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	807b      	strh	r3, [r7, #2]
 800ae34:	4613      	mov	r3, r2
 800ae36:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ae38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da08      	bge.n	800ae52 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ae40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae44:	425b      	negs	r3, r3
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7ff ff9b 	bl	800ad84 <pbuf_remove_header>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	e007      	b.n	800ae62 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ae52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae56:	787a      	ldrb	r2, [r7, #1]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff ff1a 	bl	800ac94 <pbuf_add_header_impl>
 800ae60:	4603      	mov	r3, r0
  }
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	460b      	mov	r3, r1
 800ae74:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ae76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7ff ffd2 	bl	800ae28 <pbuf_header_impl>
 800ae84:	4603      	mov	r3, r0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10b      	bne.n	800aeb6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <pbuf_free+0x22>
 800aea4:	4b38      	ldr	r3, [pc, #224]	; (800af88 <pbuf_free+0xf8>)
 800aea6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800aeaa:	4938      	ldr	r1, [pc, #224]	; (800af8c <pbuf_free+0xfc>)
 800aeac:	4838      	ldr	r0, [pc, #224]	; (800af90 <pbuf_free+0x100>)
 800aeae:	f00a fb97 	bl	80155e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e063      	b.n	800af7e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800aeba:	e05c      	b.n	800af76 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	7b9b      	ldrb	r3, [r3, #14]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d106      	bne.n	800aed2 <pbuf_free+0x42>
 800aec4:	4b30      	ldr	r3, [pc, #192]	; (800af88 <pbuf_free+0xf8>)
 800aec6:	f240 22f1 	movw	r2, #753	; 0x2f1
 800aeca:	4932      	ldr	r1, [pc, #200]	; (800af94 <pbuf_free+0x104>)
 800aecc:	4830      	ldr	r0, [pc, #192]	; (800af90 <pbuf_free+0x100>)
 800aece:	f00a fb87 	bl	80155e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	7b9b      	ldrb	r3, [r3, #14]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	739a      	strb	r2, [r3, #14]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	7b9b      	ldrb	r3, [r3, #14]
 800aee2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800aee4:	7dbb      	ldrb	r3, [r7, #22]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d143      	bne.n	800af72 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7b1b      	ldrb	r3, [r3, #12]
 800aef4:	f003 030f 	and.w	r3, r3, #15
 800aef8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7b5b      	ldrb	r3, [r3, #13]
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b00      	cmp	r3, #0
 800af04:	d011      	beq.n	800af2a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <pbuf_free+0x90>
 800af12:	4b1d      	ldr	r3, [pc, #116]	; (800af88 <pbuf_free+0xf8>)
 800af14:	f240 22ff 	movw	r2, #767	; 0x2ff
 800af18:	491f      	ldr	r1, [pc, #124]	; (800af98 <pbuf_free+0x108>)
 800af1a:	481d      	ldr	r0, [pc, #116]	; (800af90 <pbuf_free+0x100>)
 800af1c:	f00a fb60 	bl	80155e0 <iprintf>
        pc->custom_free_function(p);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	4798      	blx	r3
 800af28:	e01d      	b.n	800af66 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d104      	bne.n	800af3a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	2008      	movs	r0, #8
 800af34:	f7ff f94a 	bl	800a1cc <memp_free>
 800af38:	e015      	b.n	800af66 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d104      	bne.n	800af4a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	2007      	movs	r0, #7
 800af44:	f7ff f942 	bl	800a1cc <memp_free>
 800af48:	e00d      	b.n	800af66 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d103      	bne.n	800af58 <pbuf_free+0xc8>
          mem_free(p);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7fe fdd5 	bl	8009b00 <mem_free>
 800af56:	e006      	b.n	800af66 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800af58:	4b0b      	ldr	r3, [pc, #44]	; (800af88 <pbuf_free+0xf8>)
 800af5a:	f240 320f 	movw	r2, #783	; 0x30f
 800af5e:	490f      	ldr	r1, [pc, #60]	; (800af9c <pbuf_free+0x10c>)
 800af60:	480b      	ldr	r0, [pc, #44]	; (800af90 <pbuf_free+0x100>)
 800af62:	f00a fb3d 	bl	80155e0 <iprintf>
        }
      }
      count++;
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	3301      	adds	r3, #1
 800af6a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	607b      	str	r3, [r7, #4]
 800af70:	e001      	b.n	800af76 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800af72:	2300      	movs	r3, #0
 800af74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d19f      	bne.n	800aebc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	08016c64 	.word	0x08016c64
 800af8c:	08016dc8 	.word	0x08016dc8
 800af90:	08016cc4 	.word	0x08016cc4
 800af94:	08016df4 	.word	0x08016df4
 800af98:	08016e0c 	.word	0x08016e0c
 800af9c:	08016e30 	.word	0x08016e30

0800afa0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800afac:	e005      	b.n	800afba <pbuf_clen+0x1a>
    ++len;
 800afae:	89fb      	ldrh	r3, [r7, #14]
 800afb0:	3301      	adds	r3, #1
 800afb2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1f6      	bne.n	800afae <pbuf_clen+0xe>
  }
  return len;
 800afc0:	89fb      	ldrh	r3, [r7, #14]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
	...

0800afd0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d010      	beq.n	800b000 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	7b9b      	ldrb	r3, [r3, #14]
 800afe2:	3301      	adds	r3, #1
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	7b9b      	ldrb	r3, [r3, #14]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <pbuf_ref+0x30>
 800aff2:	4b05      	ldr	r3, [pc, #20]	; (800b008 <pbuf_ref+0x38>)
 800aff4:	f240 3242 	movw	r2, #834	; 0x342
 800aff8:	4904      	ldr	r1, [pc, #16]	; (800b00c <pbuf_ref+0x3c>)
 800affa:	4805      	ldr	r0, [pc, #20]	; (800b010 <pbuf_ref+0x40>)
 800affc:	f00a faf0 	bl	80155e0 <iprintf>
  }
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	08016c64 	.word	0x08016c64
 800b00c:	08016e44 	.word	0x08016e44
 800b010:	08016cc4 	.word	0x08016cc4

0800b014 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <pbuf_cat+0x16>
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d107      	bne.n	800b03a <pbuf_cat+0x26>
 800b02a:	4b20      	ldr	r3, [pc, #128]	; (800b0ac <pbuf_cat+0x98>)
 800b02c:	f240 3259 	movw	r2, #857	; 0x359
 800b030:	491f      	ldr	r1, [pc, #124]	; (800b0b0 <pbuf_cat+0x9c>)
 800b032:	4820      	ldr	r0, [pc, #128]	; (800b0b4 <pbuf_cat+0xa0>)
 800b034:	f00a fad4 	bl	80155e0 <iprintf>
 800b038:	e034      	b.n	800b0a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60fb      	str	r3, [r7, #12]
 800b03e:	e00a      	b.n	800b056 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	891a      	ldrh	r2, [r3, #8]
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	891b      	ldrh	r3, [r3, #8]
 800b048:	4413      	add	r3, r2
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	60fb      	str	r3, [r7, #12]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1f0      	bne.n	800b040 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	891a      	ldrh	r2, [r3, #8]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	895b      	ldrh	r3, [r3, #10]
 800b066:	429a      	cmp	r2, r3
 800b068:	d006      	beq.n	800b078 <pbuf_cat+0x64>
 800b06a:	4b10      	ldr	r3, [pc, #64]	; (800b0ac <pbuf_cat+0x98>)
 800b06c:	f240 3262 	movw	r2, #866	; 0x362
 800b070:	4911      	ldr	r1, [pc, #68]	; (800b0b8 <pbuf_cat+0xa4>)
 800b072:	4810      	ldr	r0, [pc, #64]	; (800b0b4 <pbuf_cat+0xa0>)
 800b074:	f00a fab4 	bl	80155e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d006      	beq.n	800b08e <pbuf_cat+0x7a>
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <pbuf_cat+0x98>)
 800b082:	f240 3263 	movw	r2, #867	; 0x363
 800b086:	490d      	ldr	r1, [pc, #52]	; (800b0bc <pbuf_cat+0xa8>)
 800b088:	480a      	ldr	r0, [pc, #40]	; (800b0b4 <pbuf_cat+0xa0>)
 800b08a:	f00a faa9 	bl	80155e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	891a      	ldrh	r2, [r3, #8]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	891b      	ldrh	r3, [r3, #8]
 800b096:	4413      	add	r3, r2
 800b098:	b29a      	uxth	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	08016c64 	.word	0x08016c64
 800b0b0:	08016e58 	.word	0x08016e58
 800b0b4:	08016cc4 	.word	0x08016cc4
 800b0b8:	08016e90 	.word	0x08016e90
 800b0bc:	08016ec0 	.word	0x08016ec0

0800b0c0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff ffa1 	bl	800b014 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b0d2:	6838      	ldr	r0, [r7, #0]
 800b0d4:	f7ff ff7c 	bl	800afd0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	617b      	str	r3, [r7, #20]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d008      	beq.n	800b10a <pbuf_copy+0x2a>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d005      	beq.n	800b10a <pbuf_copy+0x2a>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	891a      	ldrh	r2, [r3, #8]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	891b      	ldrh	r3, [r3, #8]
 800b106:	429a      	cmp	r2, r3
 800b108:	d209      	bcs.n	800b11e <pbuf_copy+0x3e>
 800b10a:	4b57      	ldr	r3, [pc, #348]	; (800b268 <pbuf_copy+0x188>)
 800b10c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b110:	4956      	ldr	r1, [pc, #344]	; (800b26c <pbuf_copy+0x18c>)
 800b112:	4857      	ldr	r0, [pc, #348]	; (800b270 <pbuf_copy+0x190>)
 800b114:	f00a fa64 	bl	80155e0 <iprintf>
 800b118:	f06f 030f 	mvn.w	r3, #15
 800b11c:	e09f      	b.n	800b25e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	895b      	ldrh	r3, [r3, #10]
 800b122:	461a      	mov	r2, r3
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	1ad2      	subs	r2, r2, r3
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	895b      	ldrh	r3, [r3, #10]
 800b12c:	4619      	mov	r1, r3
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	1acb      	subs	r3, r1, r3
 800b132:	429a      	cmp	r2, r3
 800b134:	d306      	bcc.n	800b144 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	895b      	ldrh	r3, [r3, #10]
 800b13a:	461a      	mov	r2, r3
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	e005      	b.n	800b150 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	895b      	ldrh	r3, [r3, #10]
 800b148:	461a      	mov	r2, r3
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	18d0      	adds	r0, r2, r3
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	4413      	add	r3, r2
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4619      	mov	r1, r3
 800b164:	f00a fa26 	bl	80155b4 <memcpy>
    offset_to += len;
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	4413      	add	r3, r2
 800b16e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4413      	add	r3, r2
 800b176:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	895b      	ldrh	r3, [r3, #10]
 800b17c:	461a      	mov	r2, r3
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	4293      	cmp	r3, r2
 800b182:	d906      	bls.n	800b192 <pbuf_copy+0xb2>
 800b184:	4b38      	ldr	r3, [pc, #224]	; (800b268 <pbuf_copy+0x188>)
 800b186:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b18a:	493a      	ldr	r1, [pc, #232]	; (800b274 <pbuf_copy+0x194>)
 800b18c:	4838      	ldr	r0, [pc, #224]	; (800b270 <pbuf_copy+0x190>)
 800b18e:	f00a fa27 	bl	80155e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	895b      	ldrh	r3, [r3, #10]
 800b196:	461a      	mov	r2, r3
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d906      	bls.n	800b1ac <pbuf_copy+0xcc>
 800b19e:	4b32      	ldr	r3, [pc, #200]	; (800b268 <pbuf_copy+0x188>)
 800b1a0:	f240 32da 	movw	r2, #986	; 0x3da
 800b1a4:	4934      	ldr	r1, [pc, #208]	; (800b278 <pbuf_copy+0x198>)
 800b1a6:	4832      	ldr	r0, [pc, #200]	; (800b270 <pbuf_copy+0x190>)
 800b1a8:	f00a fa1a 	bl	80155e0 <iprintf>
    if (offset_from >= p_from->len) {
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	895b      	ldrh	r3, [r3, #10]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d304      	bcc.n	800b1c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	895b      	ldrh	r3, [r3, #10]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d114      	bne.n	800b1f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10c      	bne.n	800b1f8 <pbuf_copy+0x118>
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d009      	beq.n	800b1f8 <pbuf_copy+0x118>
 800b1e4:	4b20      	ldr	r3, [pc, #128]	; (800b268 <pbuf_copy+0x188>)
 800b1e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b1ea:	4924      	ldr	r1, [pc, #144]	; (800b27c <pbuf_copy+0x19c>)
 800b1ec:	4820      	ldr	r0, [pc, #128]	; (800b270 <pbuf_copy+0x190>)
 800b1ee:	f00a f9f7 	bl	80155e0 <iprintf>
 800b1f2:	f06f 030f 	mvn.w	r3, #15
 800b1f6:	e032      	b.n	800b25e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d013      	beq.n	800b226 <pbuf_copy+0x146>
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	895a      	ldrh	r2, [r3, #10]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	891b      	ldrh	r3, [r3, #8]
 800b206:	429a      	cmp	r2, r3
 800b208:	d10d      	bne.n	800b226 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d009      	beq.n	800b226 <pbuf_copy+0x146>
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <pbuf_copy+0x188>)
 800b214:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b218:	4919      	ldr	r1, [pc, #100]	; (800b280 <pbuf_copy+0x1a0>)
 800b21a:	4815      	ldr	r0, [pc, #84]	; (800b270 <pbuf_copy+0x190>)
 800b21c:	f00a f9e0 	bl	80155e0 <iprintf>
 800b220:	f06f 0305 	mvn.w	r3, #5
 800b224:	e01b      	b.n	800b25e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d013      	beq.n	800b254 <pbuf_copy+0x174>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	895a      	ldrh	r2, [r3, #10]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	891b      	ldrh	r3, [r3, #8]
 800b234:	429a      	cmp	r2, r3
 800b236:	d10d      	bne.n	800b254 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d009      	beq.n	800b254 <pbuf_copy+0x174>
 800b240:	4b09      	ldr	r3, [pc, #36]	; (800b268 <pbuf_copy+0x188>)
 800b242:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b246:	490e      	ldr	r1, [pc, #56]	; (800b280 <pbuf_copy+0x1a0>)
 800b248:	4809      	ldr	r0, [pc, #36]	; (800b270 <pbuf_copy+0x190>)
 800b24a:	f00a f9c9 	bl	80155e0 <iprintf>
 800b24e:	f06f 0305 	mvn.w	r3, #5
 800b252:	e004      	b.n	800b25e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	f47f af61 	bne.w	800b11e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	08016c64 	.word	0x08016c64
 800b26c:	08016f0c 	.word	0x08016f0c
 800b270:	08016cc4 	.word	0x08016cc4
 800b274:	08016f3c 	.word	0x08016f3c
 800b278:	08016f54 	.word	0x08016f54
 800b27c:	08016f70 	.word	0x08016f70
 800b280:	08016f80 	.word	0x08016f80

0800b284 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4611      	mov	r1, r2
 800b290:	461a      	mov	r2, r3
 800b292:	460b      	mov	r3, r1
 800b294:	80fb      	strh	r3, [r7, #6]
 800b296:	4613      	mov	r3, r2
 800b298:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d108      	bne.n	800b2ba <pbuf_copy_partial+0x36>
 800b2a8:	4b2b      	ldr	r3, [pc, #172]	; (800b358 <pbuf_copy_partial+0xd4>)
 800b2aa:	f240 420a 	movw	r2, #1034	; 0x40a
 800b2ae:	492b      	ldr	r1, [pc, #172]	; (800b35c <pbuf_copy_partial+0xd8>)
 800b2b0:	482b      	ldr	r0, [pc, #172]	; (800b360 <pbuf_copy_partial+0xdc>)
 800b2b2:	f00a f995 	bl	80155e0 <iprintf>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e04a      	b.n	800b350 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d108      	bne.n	800b2d2 <pbuf_copy_partial+0x4e>
 800b2c0:	4b25      	ldr	r3, [pc, #148]	; (800b358 <pbuf_copy_partial+0xd4>)
 800b2c2:	f240 420b 	movw	r2, #1035	; 0x40b
 800b2c6:	4927      	ldr	r1, [pc, #156]	; (800b364 <pbuf_copy_partial+0xe0>)
 800b2c8:	4825      	ldr	r0, [pc, #148]	; (800b360 <pbuf_copy_partial+0xdc>)
 800b2ca:	f00a f989 	bl	80155e0 <iprintf>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e03e      	b.n	800b350 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	e034      	b.n	800b342 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b2d8:	88bb      	ldrh	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <pbuf_copy_partial+0x70>
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	895b      	ldrh	r3, [r3, #10]
 800b2e2:	88ba      	ldrh	r2, [r7, #4]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d305      	bcc.n	800b2f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	895b      	ldrh	r3, [r3, #10]
 800b2ec:	88ba      	ldrh	r2, [r7, #4]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	80bb      	strh	r3, [r7, #4]
 800b2f2:	e023      	b.n	800b33c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	895a      	ldrh	r2, [r3, #10]
 800b2f8:	88bb      	ldrh	r3, [r7, #4]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b2fe:	8b3a      	ldrh	r2, [r7, #24]
 800b300:	88fb      	ldrh	r3, [r7, #6]
 800b302:	429a      	cmp	r2, r3
 800b304:	d901      	bls.n	800b30a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b306:	88fb      	ldrh	r3, [r7, #6]
 800b308:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b30a:	8b7b      	ldrh	r3, [r7, #26]
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	18d0      	adds	r0, r2, r3
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	88bb      	ldrh	r3, [r7, #4]
 800b316:	4413      	add	r3, r2
 800b318:	8b3a      	ldrh	r2, [r7, #24]
 800b31a:	4619      	mov	r1, r3
 800b31c:	f00a f94a 	bl	80155b4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b320:	8afa      	ldrh	r2, [r7, #22]
 800b322:	8b3b      	ldrh	r3, [r7, #24]
 800b324:	4413      	add	r3, r2
 800b326:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b328:	8b7a      	ldrh	r2, [r7, #26]
 800b32a:	8b3b      	ldrh	r3, [r7, #24]
 800b32c:	4413      	add	r3, r2
 800b32e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b330:	88fa      	ldrh	r2, [r7, #6]
 800b332:	8b3b      	ldrh	r3, [r7, #24]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	88fb      	ldrh	r3, [r7, #6]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <pbuf_copy_partial+0xca>
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1c4      	bne.n	800b2d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b34e:	8afb      	ldrh	r3, [r7, #22]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3720      	adds	r7, #32
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	08016c64 	.word	0x08016c64
 800b35c:	08016fac 	.word	0x08016fac
 800b360:	08016cc4 	.word	0x08016cc4
 800b364:	08016fcc 	.word	0x08016fcc

0800b368 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	603a      	str	r2, [r7, #0]
 800b372:	71fb      	strb	r3, [r7, #7]
 800b374:	460b      	mov	r3, r1
 800b376:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	8919      	ldrh	r1, [r3, #8]
 800b37c:	88ba      	ldrh	r2, [r7, #4]
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff faa1 	bl	800a8c8 <pbuf_alloc>
 800b386:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <pbuf_clone+0x2a>
    return NULL;
 800b38e:	2300      	movs	r3, #0
 800b390:	e011      	b.n	800b3b6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7ff fea3 	bl	800b0e0 <pbuf_copy>
 800b39a:	4603      	mov	r3, r0
 800b39c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b39e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d006      	beq.n	800b3b4 <pbuf_clone+0x4c>
 800b3a6:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <pbuf_clone+0x58>)
 800b3a8:	f240 5224 	movw	r2, #1316	; 0x524
 800b3ac:	4905      	ldr	r1, [pc, #20]	; (800b3c4 <pbuf_clone+0x5c>)
 800b3ae:	4806      	ldr	r0, [pc, #24]	; (800b3c8 <pbuf_clone+0x60>)
 800b3b0:	f00a f916 	bl	80155e0 <iprintf>
  return q;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	08016c64 	.word	0x08016c64
 800b3c4:	080170d8 	.word	0x080170d8
 800b3c8:	08016cc4 	.word	0x08016cc4

0800b3cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b3d0:	f00a f91e 	bl	8015610 <rand>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	4b01      	ldr	r3, [pc, #4]	; (800b3ec <tcp_init+0x20>)
 800b3e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b3e8:	bf00      	nop
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	20000034 	.word	0x20000034

0800b3f0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	7d1b      	ldrb	r3, [r3, #20]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d105      	bne.n	800b40c <tcp_free+0x1c>
 800b400:	4b06      	ldr	r3, [pc, #24]	; (800b41c <tcp_free+0x2c>)
 800b402:	22d4      	movs	r2, #212	; 0xd4
 800b404:	4906      	ldr	r1, [pc, #24]	; (800b420 <tcp_free+0x30>)
 800b406:	4807      	ldr	r0, [pc, #28]	; (800b424 <tcp_free+0x34>)
 800b408:	f00a f8ea 	bl	80155e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b40c:	6879      	ldr	r1, [r7, #4]
 800b40e:	2001      	movs	r0, #1
 800b410:	f7fe fedc 	bl	800a1cc <memp_free>
}
 800b414:	bf00      	nop
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	08017164 	.word	0x08017164
 800b420:	08017194 	.word	0x08017194
 800b424:	080171a8 	.word	0x080171a8

0800b428 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7d1b      	ldrb	r3, [r3, #20]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d105      	bne.n	800b444 <tcp_free_listen+0x1c>
 800b438:	4b06      	ldr	r3, [pc, #24]	; (800b454 <tcp_free_listen+0x2c>)
 800b43a:	22df      	movs	r2, #223	; 0xdf
 800b43c:	4906      	ldr	r1, [pc, #24]	; (800b458 <tcp_free_listen+0x30>)
 800b43e:	4807      	ldr	r0, [pc, #28]	; (800b45c <tcp_free_listen+0x34>)
 800b440:	f00a f8ce 	bl	80155e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	2002      	movs	r0, #2
 800b448:	f7fe fec0 	bl	800a1cc <memp_free>
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	08017164 	.word	0x08017164
 800b458:	080171d0 	.word	0x080171d0
 800b45c:	080171a8 	.word	0x080171a8

0800b460 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b464:	f000 fea2 	bl	800c1ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b468:	4b07      	ldr	r3, [pc, #28]	; (800b488 <tcp_tmr+0x28>)
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	3301      	adds	r3, #1
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	4b05      	ldr	r3, [pc, #20]	; (800b488 <tcp_tmr+0x28>)
 800b472:	701a      	strb	r2, [r3, #0]
 800b474:	4b04      	ldr	r3, [pc, #16]	; (800b488 <tcp_tmr+0x28>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b480:	f000 fb54 	bl	800bb2c <tcp_slowtmr>
  }
}
 800b484:	bf00      	nop
 800b486:	bd80      	pop	{r7, pc}
 800b488:	20008675 	.word	0x20008675

0800b48c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d105      	bne.n	800b4a8 <tcp_remove_listener+0x1c>
 800b49c:	4b0d      	ldr	r3, [pc, #52]	; (800b4d4 <tcp_remove_listener+0x48>)
 800b49e:	22ff      	movs	r2, #255	; 0xff
 800b4a0:	490d      	ldr	r1, [pc, #52]	; (800b4d8 <tcp_remove_listener+0x4c>)
 800b4a2:	480e      	ldr	r0, [pc, #56]	; (800b4dc <tcp_remove_listener+0x50>)
 800b4a4:	f00a f89c 	bl	80155e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e00a      	b.n	800b4c4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d102      	bne.n	800b4be <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1f1      	bne.n	800b4ae <tcp_remove_listener+0x22>
    }
  }
}
 800b4ca:	bf00      	nop
 800b4cc:	bf00      	nop
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	08017164 	.word	0x08017164
 800b4d8:	080171ec 	.word	0x080171ec
 800b4dc:	080171a8 	.word	0x080171a8

0800b4e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <tcp_listen_closed+0x1c>
 800b4ee:	4b14      	ldr	r3, [pc, #80]	; (800b540 <tcp_listen_closed+0x60>)
 800b4f0:	f240 1211 	movw	r2, #273	; 0x111
 800b4f4:	4913      	ldr	r1, [pc, #76]	; (800b544 <tcp_listen_closed+0x64>)
 800b4f6:	4814      	ldr	r0, [pc, #80]	; (800b548 <tcp_listen_closed+0x68>)
 800b4f8:	f00a f872 	bl	80155e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	7d1b      	ldrb	r3, [r3, #20]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d006      	beq.n	800b512 <tcp_listen_closed+0x32>
 800b504:	4b0e      	ldr	r3, [pc, #56]	; (800b540 <tcp_listen_closed+0x60>)
 800b506:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b50a:	4910      	ldr	r1, [pc, #64]	; (800b54c <tcp_listen_closed+0x6c>)
 800b50c:	480e      	ldr	r0, [pc, #56]	; (800b548 <tcp_listen_closed+0x68>)
 800b50e:	f00a f867 	bl	80155e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b512:	2301      	movs	r3, #1
 800b514:	60fb      	str	r3, [r7, #12]
 800b516:	e00b      	b.n	800b530 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b518:	4a0d      	ldr	r2, [pc, #52]	; (800b550 <tcp_listen_closed+0x70>)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6879      	ldr	r1, [r7, #4]
 800b524:	4618      	mov	r0, r3
 800b526:	f7ff ffb1 	bl	800b48c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3301      	adds	r3, #1
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b03      	cmp	r3, #3
 800b534:	d9f0      	bls.n	800b518 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	08017164 	.word	0x08017164
 800b544:	08017214 	.word	0x08017214
 800b548:	080171a8 	.word	0x080171a8
 800b54c:	08017220 	.word	0x08017220
 800b550:	080194ec 	.word	0x080194ec

0800b554 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b554:	b5b0      	push	{r4, r5, r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af04      	add	r7, sp, #16
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <tcp_close_shutdown+0x20>
 800b566:	4b63      	ldr	r3, [pc, #396]	; (800b6f4 <tcp_close_shutdown+0x1a0>)
 800b568:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b56c:	4962      	ldr	r1, [pc, #392]	; (800b6f8 <tcp_close_shutdown+0x1a4>)
 800b56e:	4863      	ldr	r0, [pc, #396]	; (800b6fc <tcp_close_shutdown+0x1a8>)
 800b570:	f00a f836 	bl	80155e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b574:	78fb      	ldrb	r3, [r7, #3]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d066      	beq.n	800b648 <tcp_close_shutdown+0xf4>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	7d1b      	ldrb	r3, [r3, #20]
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d003      	beq.n	800b58a <tcp_close_shutdown+0x36>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	7d1b      	ldrb	r3, [r3, #20]
 800b586:	2b07      	cmp	r3, #7
 800b588:	d15e      	bne.n	800b648 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d104      	bne.n	800b59c <tcp_close_shutdown+0x48>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b596:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b59a:	d055      	beq.n	800b648 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	8b5b      	ldrh	r3, [r3, #26]
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d106      	bne.n	800b5b6 <tcp_close_shutdown+0x62>
 800b5a8:	4b52      	ldr	r3, [pc, #328]	; (800b6f4 <tcp_close_shutdown+0x1a0>)
 800b5aa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b5ae:	4954      	ldr	r1, [pc, #336]	; (800b700 <tcp_close_shutdown+0x1ac>)
 800b5b0:	4852      	ldr	r0, [pc, #328]	; (800b6fc <tcp_close_shutdown+0x1a8>)
 800b5b2:	f00a f815 	bl	80155e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b5be:	687d      	ldr	r5, [r7, #4]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	8ad2      	ldrh	r2, [r2, #22]
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	8b09      	ldrh	r1, [r1, #24]
 800b5cc:	9102      	str	r1, [sp, #8]
 800b5ce:	9201      	str	r2, [sp, #4]
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f004 fe91 	bl	8010300 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f001 f8c6 	bl	800c770 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b5e4:	4b47      	ldr	r3, [pc, #284]	; (800b704 <tcp_close_shutdown+0x1b0>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d105      	bne.n	800b5fa <tcp_close_shutdown+0xa6>
 800b5ee:	4b45      	ldr	r3, [pc, #276]	; (800b704 <tcp_close_shutdown+0x1b0>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	4a43      	ldr	r2, [pc, #268]	; (800b704 <tcp_close_shutdown+0x1b0>)
 800b5f6:	6013      	str	r3, [r2, #0]
 800b5f8:	e013      	b.n	800b622 <tcp_close_shutdown+0xce>
 800b5fa:	4b42      	ldr	r3, [pc, #264]	; (800b704 <tcp_close_shutdown+0x1b0>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	e00c      	b.n	800b61c <tcp_close_shutdown+0xc8>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d104      	bne.n	800b616 <tcp_close_shutdown+0xc2>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	60da      	str	r2, [r3, #12]
 800b614:	e005      	b.n	800b622 <tcp_close_shutdown+0xce>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1ef      	bne.n	800b602 <tcp_close_shutdown+0xae>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	60da      	str	r2, [r3, #12]
 800b628:	4b37      	ldr	r3, [pc, #220]	; (800b708 <tcp_close_shutdown+0x1b4>)
 800b62a:	2201      	movs	r2, #1
 800b62c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b62e:	4b37      	ldr	r3, [pc, #220]	; (800b70c <tcp_close_shutdown+0x1b8>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	429a      	cmp	r2, r3
 800b636:	d102      	bne.n	800b63e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b638:	f003 fd5e 	bl	800f0f8 <tcp_trigger_input_pcb_close>
 800b63c:	e002      	b.n	800b644 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fed6 	bl	800b3f0 <tcp_free>
      }
      return ERR_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	e050      	b.n	800b6ea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	7d1b      	ldrb	r3, [r3, #20]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d03b      	beq.n	800b6c8 <tcp_close_shutdown+0x174>
 800b650:	2b02      	cmp	r3, #2
 800b652:	dc44      	bgt.n	800b6de <tcp_close_shutdown+0x18a>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <tcp_close_shutdown+0x10a>
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d02a      	beq.n	800b6b2 <tcp_close_shutdown+0x15e>
 800b65c:	e03f      	b.n	800b6de <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	8adb      	ldrh	r3, [r3, #22]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d021      	beq.n	800b6aa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b666:	4b2a      	ldr	r3, [pc, #168]	; (800b710 <tcp_close_shutdown+0x1bc>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d105      	bne.n	800b67c <tcp_close_shutdown+0x128>
 800b670:	4b27      	ldr	r3, [pc, #156]	; (800b710 <tcp_close_shutdown+0x1bc>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	4a26      	ldr	r2, [pc, #152]	; (800b710 <tcp_close_shutdown+0x1bc>)
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	e013      	b.n	800b6a4 <tcp_close_shutdown+0x150>
 800b67c:	4b24      	ldr	r3, [pc, #144]	; (800b710 <tcp_close_shutdown+0x1bc>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	60bb      	str	r3, [r7, #8]
 800b682:	e00c      	b.n	800b69e <tcp_close_shutdown+0x14a>
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d104      	bne.n	800b698 <tcp_close_shutdown+0x144>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68da      	ldr	r2, [r3, #12]
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	60da      	str	r2, [r3, #12]
 800b696:	e005      	b.n	800b6a4 <tcp_close_shutdown+0x150>
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	60bb      	str	r3, [r7, #8]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1ef      	bne.n	800b684 <tcp_close_shutdown+0x130>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fea0 	bl	800b3f0 <tcp_free>
      break;
 800b6b0:	e01a      	b.n	800b6e8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7ff ff14 	bl	800b4e0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	4816      	ldr	r0, [pc, #88]	; (800b714 <tcp_close_shutdown+0x1c0>)
 800b6bc:	f001 f8a8 	bl	800c810 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff feb1 	bl	800b428 <tcp_free_listen>
      break;
 800b6c6:	e00f      	b.n	800b6e8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b6c8:	6879      	ldr	r1, [r7, #4]
 800b6ca:	480e      	ldr	r0, [pc, #56]	; (800b704 <tcp_close_shutdown+0x1b0>)
 800b6cc:	f001 f8a0 	bl	800c810 <tcp_pcb_remove>
 800b6d0:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <tcp_close_shutdown+0x1b4>)
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7ff fe8a 	bl	800b3f0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b6dc:	e004      	b.n	800b6e8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f81a 	bl	800b718 <tcp_close_shutdown_fin>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	e000      	b.n	800b6ea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bdb0      	pop	{r4, r5, r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	08017164 	.word	0x08017164
 800b6f8:	08017238 	.word	0x08017238
 800b6fc:	080171a8 	.word	0x080171a8
 800b700:	08017258 	.word	0x08017258
 800b704:	2000866c 	.word	0x2000866c
 800b708:	20008674 	.word	0x20008674
 800b70c:	200086ac 	.word	0x200086ac
 800b710:	20008664 	.word	0x20008664
 800b714:	20008668 	.word	0x20008668

0800b718 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d106      	bne.n	800b734 <tcp_close_shutdown_fin+0x1c>
 800b726:	4b2e      	ldr	r3, [pc, #184]	; (800b7e0 <tcp_close_shutdown_fin+0xc8>)
 800b728:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b72c:	492d      	ldr	r1, [pc, #180]	; (800b7e4 <tcp_close_shutdown_fin+0xcc>)
 800b72e:	482e      	ldr	r0, [pc, #184]	; (800b7e8 <tcp_close_shutdown_fin+0xd0>)
 800b730:	f009 ff56 	bl	80155e0 <iprintf>

  switch (pcb->state) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	7d1b      	ldrb	r3, [r3, #20]
 800b738:	2b07      	cmp	r3, #7
 800b73a:	d020      	beq.n	800b77e <tcp_close_shutdown_fin+0x66>
 800b73c:	2b07      	cmp	r3, #7
 800b73e:	dc2b      	bgt.n	800b798 <tcp_close_shutdown_fin+0x80>
 800b740:	2b03      	cmp	r3, #3
 800b742:	d002      	beq.n	800b74a <tcp_close_shutdown_fin+0x32>
 800b744:	2b04      	cmp	r3, #4
 800b746:	d00d      	beq.n	800b764 <tcp_close_shutdown_fin+0x4c>
 800b748:	e026      	b.n	800b798 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f003 fee6 	bl	800f51c <tcp_send_fin>
 800b750:	4603      	mov	r3, r0
 800b752:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d11f      	bne.n	800b79c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2205      	movs	r2, #5
 800b760:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b762:	e01b      	b.n	800b79c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f003 fed9 	bl	800f51c <tcp_send_fin>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d114      	bne.n	800b7a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2205      	movs	r2, #5
 800b77a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b77c:	e010      	b.n	800b7a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f003 fecc 	bl	800f51c <tcp_send_fin>
 800b784:	4603      	mov	r3, r0
 800b786:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d109      	bne.n	800b7a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2209      	movs	r2, #9
 800b794:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b796:	e005      	b.n	800b7a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	e01c      	b.n	800b7d6 <tcp_close_shutdown_fin+0xbe>
      break;
 800b79c:	bf00      	nop
 800b79e:	e002      	b.n	800b7a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800b7a0:	bf00      	nop
 800b7a2:	e000      	b.n	800b7a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800b7a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d103      	bne.n	800b7b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f003 fff2 	bl	800f798 <tcp_output>
 800b7b4:	e00d      	b.n	800b7d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7be:	d108      	bne.n	800b7d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	8b5b      	ldrh	r3, [r3, #26]
 800b7c4:	f043 0308 	orr.w	r3, r3, #8
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e001      	b.n	800b7d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	08017164 	.word	0x08017164
 800b7e4:	08017214 	.word	0x08017214
 800b7e8:	080171a8 	.word	0x080171a8

0800b7ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <tcp_close+0x22>
 800b7fa:	4b0f      	ldr	r3, [pc, #60]	; (800b838 <tcp_close+0x4c>)
 800b7fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b800:	490e      	ldr	r1, [pc, #56]	; (800b83c <tcp_close+0x50>)
 800b802:	480f      	ldr	r0, [pc, #60]	; (800b840 <tcp_close+0x54>)
 800b804:	f009 feec 	bl	80155e0 <iprintf>
 800b808:	f06f 030f 	mvn.w	r3, #15
 800b80c:	e00f      	b.n	800b82e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	7d1b      	ldrb	r3, [r3, #20]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d006      	beq.n	800b824 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	8b5b      	ldrh	r3, [r3, #26]
 800b81a:	f043 0310 	orr.w	r3, r3, #16
 800b81e:	b29a      	uxth	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b824:	2101      	movs	r1, #1
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7ff fe94 	bl	800b554 <tcp_close_shutdown>
 800b82c:	4603      	mov	r3, r0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	08017164 	.word	0x08017164
 800b83c:	08017274 	.word	0x08017274
 800b840:	080171a8 	.word	0x080171a8

0800b844 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b08e      	sub	sp, #56	; 0x38
 800b848:	af04      	add	r7, sp, #16
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d107      	bne.n	800b864 <tcp_abandon+0x20>
 800b854:	4b52      	ldr	r3, [pc, #328]	; (800b9a0 <tcp_abandon+0x15c>)
 800b856:	f240 223d 	movw	r2, #573	; 0x23d
 800b85a:	4952      	ldr	r1, [pc, #328]	; (800b9a4 <tcp_abandon+0x160>)
 800b85c:	4852      	ldr	r0, [pc, #328]	; (800b9a8 <tcp_abandon+0x164>)
 800b85e:	f009 febf 	bl	80155e0 <iprintf>
 800b862:	e099      	b.n	800b998 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7d1b      	ldrb	r3, [r3, #20]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d106      	bne.n	800b87a <tcp_abandon+0x36>
 800b86c:	4b4c      	ldr	r3, [pc, #304]	; (800b9a0 <tcp_abandon+0x15c>)
 800b86e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b872:	494e      	ldr	r1, [pc, #312]	; (800b9ac <tcp_abandon+0x168>)
 800b874:	484c      	ldr	r0, [pc, #304]	; (800b9a8 <tcp_abandon+0x164>)
 800b876:	f009 feb3 	bl	80155e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	7d1b      	ldrb	r3, [r3, #20]
 800b87e:	2b0a      	cmp	r3, #10
 800b880:	d107      	bne.n	800b892 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	484a      	ldr	r0, [pc, #296]	; (800b9b0 <tcp_abandon+0x16c>)
 800b886:	f000 ffc3 	bl	800c810 <tcp_pcb_remove>
    tcp_free(pcb);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff fdb0 	bl	800b3f0 <tcp_free>
 800b890:	e082      	b.n	800b998 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	7d1b      	ldrb	r3, [r3, #20]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d126      	bne.n	800b90a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8adb      	ldrh	r3, [r3, #22]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d02e      	beq.n	800b922 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b8c4:	4b3b      	ldr	r3, [pc, #236]	; (800b9b4 <tcp_abandon+0x170>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d105      	bne.n	800b8da <tcp_abandon+0x96>
 800b8ce:	4b39      	ldr	r3, [pc, #228]	; (800b9b4 <tcp_abandon+0x170>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	4a37      	ldr	r2, [pc, #220]	; (800b9b4 <tcp_abandon+0x170>)
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	e013      	b.n	800b902 <tcp_abandon+0xbe>
 800b8da:	4b36      	ldr	r3, [pc, #216]	; (800b9b4 <tcp_abandon+0x170>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	61fb      	str	r3, [r7, #28]
 800b8e0:	e00c      	b.n	800b8fc <tcp_abandon+0xb8>
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d104      	bne.n	800b8f6 <tcp_abandon+0xb2>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	60da      	str	r2, [r3, #12]
 800b8f4:	e005      	b.n	800b902 <tcp_abandon+0xbe>
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	61fb      	str	r3, [r7, #28]
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1ef      	bne.n	800b8e2 <tcp_abandon+0x9e>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	60da      	str	r2, [r3, #12]
 800b908:	e00b      	b.n	800b922 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	8adb      	ldrh	r3, [r3, #22]
 800b912:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	4828      	ldr	r0, [pc, #160]	; (800b9b8 <tcp_abandon+0x174>)
 800b918:	f000 ff7a 	bl	800c810 <tcp_pcb_remove>
 800b91c:	4b27      	ldr	r3, [pc, #156]	; (800b9bc <tcp_abandon+0x178>)
 800b91e:	2201      	movs	r2, #1
 800b920:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 fd1c 	bl	800c36c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d004      	beq.n	800b946 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b940:	4618      	mov	r0, r3
 800b942:	f000 fd13 	bl	800c36c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d004      	beq.n	800b958 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b952:	4618      	mov	r0, r3
 800b954:	f000 fd0a 	bl	800c36c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00e      	beq.n	800b97c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b95e:	6879      	ldr	r1, [r7, #4]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3304      	adds	r3, #4
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	8b12      	ldrh	r2, [r2, #24]
 800b968:	9202      	str	r2, [sp, #8]
 800b96a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b96c:	9201      	str	r2, [sp, #4]
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	460b      	mov	r3, r1
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	69b9      	ldr	r1, [r7, #24]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f004 fcc2 	bl	8010300 <tcp_rst>
    }
    last_state = pcb->state;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	7d1b      	ldrb	r3, [r3, #20]
 800b980:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fd34 	bl	800b3f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d004      	beq.n	800b998 <tcp_abandon+0x154>
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	f06f 010c 	mvn.w	r1, #12
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	4798      	blx	r3
  }
}
 800b998:	3728      	adds	r7, #40	; 0x28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	08017164 	.word	0x08017164
 800b9a4:	080172a8 	.word	0x080172a8
 800b9a8:	080171a8 	.word	0x080171a8
 800b9ac:	080172c4 	.word	0x080172c4
 800b9b0:	20008670 	.word	0x20008670
 800b9b4:	20008664 	.word	0x20008664
 800b9b8:	2000866c 	.word	0x2000866c
 800b9bc:	20008674 	.word	0x20008674

0800b9c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7ff ff3a 	bl	800b844 <tcp_abandon>
}
 800b9d0:	bf00      	nop
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <tcp_update_rcv_ann_wnd+0x1c>
 800b9e6:	4b25      	ldr	r3, [pc, #148]	; (800ba7c <tcp_update_rcv_ann_wnd+0xa4>)
 800b9e8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b9ec:	4924      	ldr	r1, [pc, #144]	; (800ba80 <tcp_update_rcv_ann_wnd+0xa8>)
 800b9ee:	4825      	ldr	r0, [pc, #148]	; (800ba84 <tcp_update_rcv_ann_wnd+0xac>)
 800b9f0:	f009 fdf6 	bl	80155e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b9fc:	4413      	add	r3, r2
 800b9fe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ba08:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ba0c:	bf28      	it	cs
 800ba0e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ba12:	b292      	uxth	r2, r2
 800ba14:	4413      	add	r3, r2
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	db08      	blt.n	800ba30 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	e020      	b.n	800ba72 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	dd03      	ble.n	800ba46 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba44:	e014      	b.n	800ba70 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba58:	d306      	bcc.n	800ba68 <tcp_update_rcv_ann_wnd+0x90>
 800ba5a:	4b08      	ldr	r3, [pc, #32]	; (800ba7c <tcp_update_rcv_ann_wnd+0xa4>)
 800ba5c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ba60:	4909      	ldr	r1, [pc, #36]	; (800ba88 <tcp_update_rcv_ann_wnd+0xb0>)
 800ba62:	4808      	ldr	r0, [pc, #32]	; (800ba84 <tcp_update_rcv_ann_wnd+0xac>)
 800ba64:	f009 fdbc 	bl	80155e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ba70:	2300      	movs	r3, #0
  }
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	08017164 	.word	0x08017164
 800ba80:	080173c0 	.word	0x080173c0
 800ba84:	080171a8 	.word	0x080171a8
 800ba88:	080173e4 	.word	0x080173e4

0800ba8c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d107      	bne.n	800baae <tcp_recved+0x22>
 800ba9e:	4b1f      	ldr	r3, [pc, #124]	; (800bb1c <tcp_recved+0x90>)
 800baa0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800baa4:	491e      	ldr	r1, [pc, #120]	; (800bb20 <tcp_recved+0x94>)
 800baa6:	481f      	ldr	r0, [pc, #124]	; (800bb24 <tcp_recved+0x98>)
 800baa8:	f009 fd9a 	bl	80155e0 <iprintf>
 800baac:	e032      	b.n	800bb14 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	7d1b      	ldrb	r3, [r3, #20]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d106      	bne.n	800bac4 <tcp_recved+0x38>
 800bab6:	4b19      	ldr	r3, [pc, #100]	; (800bb1c <tcp_recved+0x90>)
 800bab8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800babc:	491a      	ldr	r1, [pc, #104]	; (800bb28 <tcp_recved+0x9c>)
 800babe:	4819      	ldr	r0, [pc, #100]	; (800bb24 <tcp_recved+0x98>)
 800bac0:	f009 fd8e 	bl	80155e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bac8:	887b      	ldrh	r3, [r7, #2]
 800baca:	4413      	add	r3, r2
 800bacc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bace:	89fb      	ldrh	r3, [r7, #14]
 800bad0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bad4:	d804      	bhi.n	800bae0 <tcp_recved+0x54>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bada:	89fa      	ldrh	r2, [r7, #14]
 800badc:	429a      	cmp	r2, r3
 800bade:	d204      	bcs.n	800baea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bae6:	851a      	strh	r2, [r3, #40]	; 0x28
 800bae8:	e002      	b.n	800baf0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	89fa      	ldrh	r2, [r7, #14]
 800baee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff ff71 	bl	800b9d8 <tcp_update_rcv_ann_wnd>
 800baf6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bafe:	d309      	bcc.n	800bb14 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8b5b      	ldrh	r3, [r3, #26]
 800bb04:	f043 0302 	orr.w	r3, r3, #2
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f003 fe42 	bl	800f798 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	08017164 	.word	0x08017164
 800bb20:	08017400 	.word	0x08017400
 800bb24:	080171a8 	.word	0x080171a8
 800bb28:	08017418 	.word	0x08017418

0800bb2c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bb2c:	b5b0      	push	{r4, r5, r7, lr}
 800bb2e:	b090      	sub	sp, #64	; 0x40
 800bb30:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bb32:	2300      	movs	r3, #0
 800bb34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bb38:	4b94      	ldr	r3, [pc, #592]	; (800bd8c <tcp_slowtmr+0x260>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	4a93      	ldr	r2, [pc, #588]	; (800bd8c <tcp_slowtmr+0x260>)
 800bb40:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bb42:	4b93      	ldr	r3, [pc, #588]	; (800bd90 <tcp_slowtmr+0x264>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	3301      	adds	r3, #1
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	4b91      	ldr	r3, [pc, #580]	; (800bd90 <tcp_slowtmr+0x264>)
 800bb4c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bb52:	4b90      	ldr	r3, [pc, #576]	; (800bd94 <tcp_slowtmr+0x268>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bb58:	e29f      	b.n	800c09a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	7d1b      	ldrb	r3, [r3, #20]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <tcp_slowtmr+0x44>
 800bb62:	4b8d      	ldr	r3, [pc, #564]	; (800bd98 <tcp_slowtmr+0x26c>)
 800bb64:	f240 42be 	movw	r2, #1214	; 0x4be
 800bb68:	498c      	ldr	r1, [pc, #560]	; (800bd9c <tcp_slowtmr+0x270>)
 800bb6a:	488d      	ldr	r0, [pc, #564]	; (800bda0 <tcp_slowtmr+0x274>)
 800bb6c:	f009 fd38 	bl	80155e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	7d1b      	ldrb	r3, [r3, #20]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d106      	bne.n	800bb86 <tcp_slowtmr+0x5a>
 800bb78:	4b87      	ldr	r3, [pc, #540]	; (800bd98 <tcp_slowtmr+0x26c>)
 800bb7a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bb7e:	4989      	ldr	r1, [pc, #548]	; (800bda4 <tcp_slowtmr+0x278>)
 800bb80:	4887      	ldr	r0, [pc, #540]	; (800bda0 <tcp_slowtmr+0x274>)
 800bb82:	f009 fd2d 	bl	80155e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	7d1b      	ldrb	r3, [r3, #20]
 800bb8a:	2b0a      	cmp	r3, #10
 800bb8c:	d106      	bne.n	800bb9c <tcp_slowtmr+0x70>
 800bb8e:	4b82      	ldr	r3, [pc, #520]	; (800bd98 <tcp_slowtmr+0x26c>)
 800bb90:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bb94:	4984      	ldr	r1, [pc, #528]	; (800bda8 <tcp_slowtmr+0x27c>)
 800bb96:	4882      	ldr	r0, [pc, #520]	; (800bda0 <tcp_slowtmr+0x274>)
 800bb98:	f009 fd22 	bl	80155e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	7f9a      	ldrb	r2, [r3, #30]
 800bba0:	4b7b      	ldr	r3, [pc, #492]	; (800bd90 <tcp_slowtmr+0x264>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d105      	bne.n	800bbb4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbaa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bbb2:	e272      	b.n	800c09a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bbb4:	4b76      	ldr	r3, [pc, #472]	; (800bd90 <tcp_slowtmr+0x264>)
 800bbb6:	781a      	ldrb	r2, [r3, #0]
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	7d1b      	ldrb	r3, [r3, #20]
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d10a      	bne.n	800bbe6 <tcp_slowtmr+0xba>
 800bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbd6:	2b05      	cmp	r3, #5
 800bbd8:	d905      	bls.n	800bbe6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bbda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbde:	3301      	adds	r3, #1
 800bbe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbe4:	e11e      	b.n	800be24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbec:	2b0b      	cmp	r3, #11
 800bbee:	d905      	bls.n	800bbfc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbfa:	e113      	b.n	800be24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d075      	beq.n	800bcf2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d006      	beq.n	800bc1c <tcp_slowtmr+0xf0>
 800bc0e:	4b62      	ldr	r3, [pc, #392]	; (800bd98 <tcp_slowtmr+0x26c>)
 800bc10:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bc14:	4965      	ldr	r1, [pc, #404]	; (800bdac <tcp_slowtmr+0x280>)
 800bc16:	4862      	ldr	r0, [pc, #392]	; (800bda0 <tcp_slowtmr+0x274>)
 800bc18:	f009 fce2 	bl	80155e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d106      	bne.n	800bc32 <tcp_slowtmr+0x106>
 800bc24:	4b5c      	ldr	r3, [pc, #368]	; (800bd98 <tcp_slowtmr+0x26c>)
 800bc26:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bc2a:	4961      	ldr	r1, [pc, #388]	; (800bdb0 <tcp_slowtmr+0x284>)
 800bc2c:	485c      	ldr	r0, [pc, #368]	; (800bda0 <tcp_slowtmr+0x274>)
 800bc2e:	f009 fcd7 	bl	80155e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bc38:	2b0b      	cmp	r3, #11
 800bc3a:	d905      	bls.n	800bc48 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc40:	3301      	adds	r3, #1
 800bc42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc46:	e0ed      	b.n	800be24 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	4a58      	ldr	r2, [pc, #352]	; (800bdb4 <tcp_slowtmr+0x288>)
 800bc52:	5cd3      	ldrb	r3, [r2, r3]
 800bc54:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bc5c:	7c7a      	ldrb	r2, [r7, #17]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d907      	bls.n	800bc72 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bc68:	3301      	adds	r3, #1
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bc78:	7c7a      	ldrb	r2, [r7, #17]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	f200 80d2 	bhi.w	800be24 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bc80:	2301      	movs	r3, #1
 800bc82:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d108      	bne.n	800bca0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bc8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc90:	f004 fc2a 	bl	80104e8 <tcp_zero_window_probe>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d014      	beq.n	800bcc4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	623b      	str	r3, [r7, #32]
 800bc9e:	e011      	b.n	800bcc4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bca6:	4619      	mov	r1, r3
 800bca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcaa:	f003 faef 	bl	800f28c <tcp_split_unsent_seg>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d107      	bne.n	800bcc4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bcb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcb6:	f003 fd6f 	bl	800f798 <tcp_output>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f000 80ac 	beq.w	800be24 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bcda:	2b06      	cmp	r3, #6
 800bcdc:	f200 80a2 	bhi.w	800be24 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bce6:	3301      	adds	r3, #1
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bcf0:	e098      	b.n	800be24 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	db0f      	blt.n	800bd1c <tcp_slowtmr+0x1f0>
 800bcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd02:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d008      	beq.n	800bd1c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	3301      	adds	r3, #1
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	b21a      	sxth	r2, r3
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd24:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	db7b      	blt.n	800be24 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bd2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd2e:	f004 f825 	bl	800fd7c <tcp_rexmit_rto_prepare>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d007      	beq.n	800bd48 <tcp_slowtmr+0x21c>
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d171      	bne.n	800be24 <tcp_slowtmr+0x2f8>
 800bd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d06d      	beq.n	800be24 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4a:	7d1b      	ldrb	r3, [r3, #20]
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d03a      	beq.n	800bdc6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd56:	2b0c      	cmp	r3, #12
 800bd58:	bf28      	it	cs
 800bd5a:	230c      	movcs	r3, #12
 800bd5c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bd64:	10db      	asrs	r3, r3, #3
 800bd66:	b21b      	sxth	r3, r3
 800bd68:	461a      	mov	r2, r3
 800bd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bd70:	4413      	add	r3, r2
 800bd72:	7efa      	ldrb	r2, [r7, #27]
 800bd74:	4910      	ldr	r1, [pc, #64]	; (800bdb8 <tcp_slowtmr+0x28c>)
 800bd76:	5c8a      	ldrb	r2, [r1, r2]
 800bd78:	4093      	lsls	r3, r2
 800bd7a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bd82:	4293      	cmp	r3, r2
 800bd84:	dc1a      	bgt.n	800bdbc <tcp_slowtmr+0x290>
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	b21a      	sxth	r2, r3
 800bd8a:	e019      	b.n	800bdc0 <tcp_slowtmr+0x294>
 800bd8c:	20008660 	.word	0x20008660
 800bd90:	20008676 	.word	0x20008676
 800bd94:	2000866c 	.word	0x2000866c
 800bd98:	08017164 	.word	0x08017164
 800bd9c:	080174a8 	.word	0x080174a8
 800bda0:	080171a8 	.word	0x080171a8
 800bda4:	080174d4 	.word	0x080174d4
 800bda8:	08017500 	.word	0x08017500
 800bdac:	08017530 	.word	0x08017530
 800bdb0:	08017564 	.word	0x08017564
 800bdb4:	080194e4 	.word	0x080194e4
 800bdb8:	080194d4 	.word	0x080194d4
 800bdbc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc8:	2200      	movs	r2, #0
 800bdca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	bf28      	it	cs
 800bddc:	4613      	movcs	r3, r2
 800bdde:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bde0:	8a7b      	ldrh	r3, [r7, #18]
 800bde2:	085b      	lsrs	r3, r3, #1
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d206      	bcs.n	800be0c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be02:	005b      	lsls	r3, r3, #1
 800be04:	b29a      	uxth	r2, r3
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be18:	2200      	movs	r2, #0
 800be1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800be1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be20:	f004 f81c 	bl	800fe5c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	7d1b      	ldrb	r3, [r3, #20]
 800be28:	2b06      	cmp	r3, #6
 800be2a:	d111      	bne.n	800be50 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2e:	8b5b      	ldrh	r3, [r3, #26]
 800be30:	f003 0310 	and.w	r3, r3, #16
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00b      	beq.n	800be50 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be38:	4b9d      	ldr	r3, [pc, #628]	; (800c0b0 <tcp_slowtmr+0x584>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	2b28      	cmp	r3, #40	; 0x28
 800be44:	d904      	bls.n	800be50 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800be46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be4a:	3301      	adds	r3, #1
 800be4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800be50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be52:	7a5b      	ldrb	r3, [r3, #9]
 800be54:	f003 0308 	and.w	r3, r3, #8
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d04c      	beq.n	800bef6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800be5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800be60:	2b04      	cmp	r3, #4
 800be62:	d003      	beq.n	800be6c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800be64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be66:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800be68:	2b07      	cmp	r3, #7
 800be6a:	d144      	bne.n	800bef6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be6c:	4b90      	ldr	r3, [pc, #576]	; (800c0b0 <tcp_slowtmr+0x584>)
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	6a1b      	ldr	r3, [r3, #32]
 800be74:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be7c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800be80:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800be84:	498b      	ldr	r1, [pc, #556]	; (800c0b4 <tcp_slowtmr+0x588>)
 800be86:	fba1 1303 	umull	r1, r3, r1, r3
 800be8a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d90a      	bls.n	800bea6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800be90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be94:	3301      	adds	r3, #1
 800be96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800be9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be9e:	3301      	adds	r3, #1
 800bea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bea4:	e027      	b.n	800bef6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bea6:	4b82      	ldr	r3, [pc, #520]	; (800c0b0 <tcp_slowtmr+0x584>)
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800beb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bebc:	4618      	mov	r0, r3
 800bebe:	4b7e      	ldr	r3, [pc, #504]	; (800c0b8 <tcp_slowtmr+0x58c>)
 800bec0:	fb00 f303 	mul.w	r3, r0, r3
 800bec4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bec6:	497b      	ldr	r1, [pc, #492]	; (800c0b4 <tcp_slowtmr+0x588>)
 800bec8:	fba1 1303 	umull	r1, r3, r1, r3
 800becc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bece:	429a      	cmp	r2, r3
 800bed0:	d911      	bls.n	800bef6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bed4:	f004 fac8 	bl	8010468 <tcp_keepalive>
 800bed8:	4603      	mov	r3, r0
 800beda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bede:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d107      	bne.n	800bef6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800beec:	3301      	adds	r3, #1
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800befa:	2b00      	cmp	r3, #0
 800befc:	d011      	beq.n	800bf22 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800befe:	4b6c      	ldr	r3, [pc, #432]	; (800c0b0 <tcp_slowtmr+0x584>)
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	6a1b      	ldr	r3, [r3, #32]
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bf0e:	4619      	mov	r1, r3
 800bf10:	460b      	mov	r3, r1
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	440b      	add	r3, r1
 800bf16:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d302      	bcc.n	800bf22 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bf1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf1e:	f000 fddb 	bl	800cad8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf24:	7d1b      	ldrb	r3, [r3, #20]
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d10b      	bne.n	800bf42 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf2a:	4b61      	ldr	r3, [pc, #388]	; (800c0b0 <tcp_slowtmr+0x584>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	2b28      	cmp	r3, #40	; 0x28
 800bf36:	d904      	bls.n	800bf42 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bf38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	7d1b      	ldrb	r3, [r3, #20]
 800bf46:	2b09      	cmp	r3, #9
 800bf48:	d10b      	bne.n	800bf62 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bf4a:	4b59      	ldr	r3, [pc, #356]	; (800c0b0 <tcp_slowtmr+0x584>)
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	2bf0      	cmp	r3, #240	; 0xf0
 800bf56:	d904      	bls.n	800bf62 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800bf58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bf62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d060      	beq.n	800c02c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf70:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bf72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf74:	f000 fbfc 	bl	800c770 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d010      	beq.n	800bfa0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bf7e:	4b4f      	ldr	r3, [pc, #316]	; (800c0bc <tcp_slowtmr+0x590>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d106      	bne.n	800bf96 <tcp_slowtmr+0x46a>
 800bf88:	4b4d      	ldr	r3, [pc, #308]	; (800c0c0 <tcp_slowtmr+0x594>)
 800bf8a:	f240 526d 	movw	r2, #1389	; 0x56d
 800bf8e:	494d      	ldr	r1, [pc, #308]	; (800c0c4 <tcp_slowtmr+0x598>)
 800bf90:	484d      	ldr	r0, [pc, #308]	; (800c0c8 <tcp_slowtmr+0x59c>)
 800bf92:	f009 fb25 	bl	80155e0 <iprintf>
        prev->next = pcb->next;
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	60da      	str	r2, [r3, #12]
 800bf9e:	e00f      	b.n	800bfc0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bfa0:	4b46      	ldr	r3, [pc, #280]	; (800c0bc <tcp_slowtmr+0x590>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d006      	beq.n	800bfb8 <tcp_slowtmr+0x48c>
 800bfaa:	4b45      	ldr	r3, [pc, #276]	; (800c0c0 <tcp_slowtmr+0x594>)
 800bfac:	f240 5271 	movw	r2, #1393	; 0x571
 800bfb0:	4946      	ldr	r1, [pc, #280]	; (800c0cc <tcp_slowtmr+0x5a0>)
 800bfb2:	4845      	ldr	r0, [pc, #276]	; (800c0c8 <tcp_slowtmr+0x59c>)
 800bfb4:	f009 fb14 	bl	80155e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	4a3f      	ldr	r2, [pc, #252]	; (800c0bc <tcp_slowtmr+0x590>)
 800bfbe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bfc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d013      	beq.n	800bff0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bfd0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfd8:	8ad2      	ldrh	r2, [r2, #22]
 800bfda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfdc:	8b09      	ldrh	r1, [r1, #24]
 800bfde:	9102      	str	r1, [sp, #8]
 800bfe0:	9201      	str	r2, [sp, #4]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	462b      	mov	r3, r5
 800bfe6:	4622      	mov	r2, r4
 800bfe8:	4601      	mov	r1, r0
 800bfea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfec:	f004 f988 	bl	8010300 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	7d1b      	ldrb	r3, [r3, #20]
 800bffa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c006:	6838      	ldr	r0, [r7, #0]
 800c008:	f7ff f9f2 	bl	800b3f0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c00c:	4b30      	ldr	r3, [pc, #192]	; (800c0d0 <tcp_slowtmr+0x5a4>)
 800c00e:	2200      	movs	r2, #0
 800c010:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d004      	beq.n	800c022 <tcp_slowtmr+0x4f6>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f06f 010c 	mvn.w	r1, #12
 800c01e:	68b8      	ldr	r0, [r7, #8]
 800c020:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c022:	4b2b      	ldr	r3, [pc, #172]	; (800c0d0 <tcp_slowtmr+0x5a4>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d037      	beq.n	800c09a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c02a:	e590      	b.n	800bb4e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	7f1b      	ldrb	r3, [r3, #28]
 800c03a:	3301      	adds	r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	7f1a      	ldrb	r2, [r3, #28]
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	7f5b      	ldrb	r3, [r3, #29]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d325      	bcc.n	800c09a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	2200      	movs	r2, #0
 800c052:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c054:	4b1e      	ldr	r3, [pc, #120]	; (800c0d0 <tcp_slowtmr+0x5a4>)
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00b      	beq.n	800c07c <tcp_slowtmr+0x550>
 800c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c06c:	6912      	ldr	r2, [r2, #16]
 800c06e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c070:	4610      	mov	r0, r2
 800c072:	4798      	blx	r3
 800c074:	4603      	mov	r3, r0
 800c076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c07a:	e002      	b.n	800c082 <tcp_slowtmr+0x556>
 800c07c:	2300      	movs	r3, #0
 800c07e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c082:	4b13      	ldr	r3, [pc, #76]	; (800c0d0 <tcp_slowtmr+0x5a4>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d000      	beq.n	800c08c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c08a:	e560      	b.n	800bb4e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c08c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c096:	f003 fb7f 	bl	800f798 <tcp_output>
  while (pcb != NULL) {
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f47f ad5c 	bne.w	800bb5a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c0a6:	4b0b      	ldr	r3, [pc, #44]	; (800c0d4 <tcp_slowtmr+0x5a8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c0ac:	e067      	b.n	800c17e <tcp_slowtmr+0x652>
 800c0ae:	bf00      	nop
 800c0b0:	20008660 	.word	0x20008660
 800c0b4:	10624dd3 	.word	0x10624dd3
 800c0b8:	000124f8 	.word	0x000124f8
 800c0bc:	2000866c 	.word	0x2000866c
 800c0c0:	08017164 	.word	0x08017164
 800c0c4:	0801759c 	.word	0x0801759c
 800c0c8:	080171a8 	.word	0x080171a8
 800c0cc:	080175c8 	.word	0x080175c8
 800c0d0:	20008674 	.word	0x20008674
 800c0d4:	20008670 	.word	0x20008670
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	7d1b      	ldrb	r3, [r3, #20]
 800c0dc:	2b0a      	cmp	r3, #10
 800c0de:	d006      	beq.n	800c0ee <tcp_slowtmr+0x5c2>
 800c0e0:	4b2b      	ldr	r3, [pc, #172]	; (800c190 <tcp_slowtmr+0x664>)
 800c0e2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c0e6:	492b      	ldr	r1, [pc, #172]	; (800c194 <tcp_slowtmr+0x668>)
 800c0e8:	482b      	ldr	r0, [pc, #172]	; (800c198 <tcp_slowtmr+0x66c>)
 800c0ea:	f009 fa79 	bl	80155e0 <iprintf>
    pcb_remove = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c0f4:	4b29      	ldr	r3, [pc, #164]	; (800c19c <tcp_slowtmr+0x670>)
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fa:	6a1b      	ldr	r3, [r3, #32]
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	2bf0      	cmp	r3, #240	; 0xf0
 800c100:	d904      	bls.n	800c10c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c106:	3301      	adds	r3, #1
 800c108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c110:	2b00      	cmp	r3, #0
 800c112:	d02f      	beq.n	800c174 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c116:	f000 fb2b 	bl	800c770 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d010      	beq.n	800c142 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c120:	4b1f      	ldr	r3, [pc, #124]	; (800c1a0 <tcp_slowtmr+0x674>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c126:	429a      	cmp	r2, r3
 800c128:	d106      	bne.n	800c138 <tcp_slowtmr+0x60c>
 800c12a:	4b19      	ldr	r3, [pc, #100]	; (800c190 <tcp_slowtmr+0x664>)
 800c12c:	f240 52af 	movw	r2, #1455	; 0x5af
 800c130:	491c      	ldr	r1, [pc, #112]	; (800c1a4 <tcp_slowtmr+0x678>)
 800c132:	4819      	ldr	r0, [pc, #100]	; (800c198 <tcp_slowtmr+0x66c>)
 800c134:	f009 fa54 	bl	80155e0 <iprintf>
        prev->next = pcb->next;
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	68da      	ldr	r2, [r3, #12]
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	60da      	str	r2, [r3, #12]
 800c140:	e00f      	b.n	800c162 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c142:	4b17      	ldr	r3, [pc, #92]	; (800c1a0 <tcp_slowtmr+0x674>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c148:	429a      	cmp	r2, r3
 800c14a:	d006      	beq.n	800c15a <tcp_slowtmr+0x62e>
 800c14c:	4b10      	ldr	r3, [pc, #64]	; (800c190 <tcp_slowtmr+0x664>)
 800c14e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c152:	4915      	ldr	r1, [pc, #84]	; (800c1a8 <tcp_slowtmr+0x67c>)
 800c154:	4810      	ldr	r0, [pc, #64]	; (800c198 <tcp_slowtmr+0x66c>)
 800c156:	f009 fa43 	bl	80155e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	4a10      	ldr	r2, [pc, #64]	; (800c1a0 <tcp_slowtmr+0x674>)
 800c160:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c164:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c16c:	69f8      	ldr	r0, [r7, #28]
 800c16e:	f7ff f93f 	bl	800b3f0 <tcp_free>
 800c172:	e004      	b.n	800c17e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c176:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1a9      	bne.n	800c0d8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c184:	bf00      	nop
 800c186:	bf00      	nop
 800c188:	3730      	adds	r7, #48	; 0x30
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bdb0      	pop	{r4, r5, r7, pc}
 800c18e:	bf00      	nop
 800c190:	08017164 	.word	0x08017164
 800c194:	080175f4 	.word	0x080175f4
 800c198:	080171a8 	.word	0x080171a8
 800c19c:	20008660 	.word	0x20008660
 800c1a0:	20008670 	.word	0x20008670
 800c1a4:	08017624 	.word	0x08017624
 800c1a8:	0801764c 	.word	0x0801764c

0800c1ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c1b2:	4b2d      	ldr	r3, [pc, #180]	; (800c268 <tcp_fasttmr+0xbc>)
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	4b2b      	ldr	r3, [pc, #172]	; (800c268 <tcp_fasttmr+0xbc>)
 800c1bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c1be:	4b2b      	ldr	r3, [pc, #172]	; (800c26c <tcp_fasttmr+0xc0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c1c4:	e048      	b.n	800c258 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	7f9a      	ldrb	r2, [r3, #30]
 800c1ca:	4b27      	ldr	r3, [pc, #156]	; (800c268 <tcp_fasttmr+0xbc>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d03f      	beq.n	800c252 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c1d2:	4b25      	ldr	r3, [pc, #148]	; (800c268 <tcp_fasttmr+0xbc>)
 800c1d4:	781a      	ldrb	r2, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	8b5b      	ldrh	r3, [r3, #26]
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d010      	beq.n	800c208 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ea:	f043 0302 	orr.w	r3, r3, #2
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f003 facf 	bl	800f798 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	8b5b      	ldrh	r3, [r3, #26]
 800c1fe:	f023 0303 	bic.w	r3, r3, #3
 800c202:	b29a      	uxth	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	8b5b      	ldrh	r3, [r3, #26]
 800c20c:	f003 0308 	and.w	r3, r3, #8
 800c210:	2b00      	cmp	r3, #0
 800c212:	d009      	beq.n	800c228 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	8b5b      	ldrh	r3, [r3, #26]
 800c218:	f023 0308 	bic.w	r3, r3, #8
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff fa78 	bl	800b718 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00a      	beq.n	800c24c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c236:	4b0e      	ldr	r3, [pc, #56]	; (800c270 <tcp_fasttmr+0xc4>)
 800c238:	2200      	movs	r2, #0
 800c23a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f819 	bl	800c274 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c242:	4b0b      	ldr	r3, [pc, #44]	; (800c270 <tcp_fasttmr+0xc4>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d000      	beq.n	800c24c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c24a:	e7b8      	b.n	800c1be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	607b      	str	r3, [r7, #4]
 800c250:	e002      	b.n	800c258 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1b3      	bne.n	800c1c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800c25e:	bf00      	nop
 800c260:	bf00      	nop
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	20008676 	.word	0x20008676
 800c26c:	2000866c 	.word	0x2000866c
 800c270:	20008674 	.word	0x20008674

0800c274 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c274:	b590      	push	{r4, r7, lr}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d109      	bne.n	800c296 <tcp_process_refused_data+0x22>
 800c282:	4b37      	ldr	r3, [pc, #220]	; (800c360 <tcp_process_refused_data+0xec>)
 800c284:	f240 6209 	movw	r2, #1545	; 0x609
 800c288:	4936      	ldr	r1, [pc, #216]	; (800c364 <tcp_process_refused_data+0xf0>)
 800c28a:	4837      	ldr	r0, [pc, #220]	; (800c368 <tcp_process_refused_data+0xf4>)
 800c28c:	f009 f9a8 	bl	80155e0 <iprintf>
 800c290:	f06f 030f 	mvn.w	r3, #15
 800c294:	e060      	b.n	800c358 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c29a:	7b5b      	ldrb	r3, [r3, #13]
 800c29c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00b      	beq.n	800c2cc <tcp_process_refused_data+0x58>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6918      	ldr	r0, [r3, #16]
 800c2be:	2300      	movs	r3, #0
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	47a0      	blx	r4
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73fb      	strb	r3, [r7, #15]
 800c2ca:	e007      	b.n	800c2dc <tcp_process_refused_data+0x68>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	f000 f8a4 	bl	800c420 <tcp_recv_null>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d12a      	bne.n	800c33a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
 800c2e6:	f003 0320 	and.w	r3, r3, #32
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d033      	beq.n	800c356 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c2f6:	d005      	beq.n	800c304 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00b      	beq.n	800c326 <tcp_process_refused_data+0xb2>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6918      	ldr	r0, [r3, #16]
 800c318:	2300      	movs	r3, #0
 800c31a:	2200      	movs	r2, #0
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	47a0      	blx	r4
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]
 800c324:	e001      	b.n	800c32a <tcp_process_refused_data+0xb6>
 800c326:	2300      	movs	r3, #0
 800c328:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c32a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c32e:	f113 0f0d 	cmn.w	r3, #13
 800c332:	d110      	bne.n	800c356 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c334:	f06f 030c 	mvn.w	r3, #12
 800c338:	e00e      	b.n	800c358 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c33e:	f113 0f0d 	cmn.w	r3, #13
 800c342:	d102      	bne.n	800c34a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c344:	f06f 030c 	mvn.w	r3, #12
 800c348:	e006      	b.n	800c358 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c350:	f06f 0304 	mvn.w	r3, #4
 800c354:	e000      	b.n	800c358 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd90      	pop	{r4, r7, pc}
 800c360:	08017164 	.word	0x08017164
 800c364:	08017674 	.word	0x08017674
 800c368:	080171a8 	.word	0x080171a8

0800c36c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c374:	e007      	b.n	800c386 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f80a 	bl	800c396 <tcp_seg_free>
    seg = next;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f4      	bne.n	800c376 <tcp_segs_free+0xa>
  }
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b082      	sub	sp, #8
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00c      	beq.n	800c3be <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d004      	beq.n	800c3b6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe fd6d 	bl	800ae90 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	2003      	movs	r0, #3
 800c3ba:	f7fd ff07 	bl	800a1cc <memp_free>
  }
}
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <tcp_seg_copy+0x1c>
 800c3d6:	4b0f      	ldr	r3, [pc, #60]	; (800c414 <tcp_seg_copy+0x4c>)
 800c3d8:	f240 6282 	movw	r2, #1666	; 0x682
 800c3dc:	490e      	ldr	r1, [pc, #56]	; (800c418 <tcp_seg_copy+0x50>)
 800c3de:	480f      	ldr	r0, [pc, #60]	; (800c41c <tcp_seg_copy+0x54>)
 800c3e0:	f009 f8fe 	bl	80155e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c3e4:	2003      	movs	r0, #3
 800c3e6:	f7fd fe81 	bl	800a0ec <memp_malloc>
 800c3ea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <tcp_seg_copy+0x2e>
    return NULL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e00a      	b.n	800c40c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c3f6:	2210      	movs	r2, #16
 800c3f8:	6879      	ldr	r1, [r7, #4]
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f009 f8da 	bl	80155b4 <memcpy>
  pbuf_ref(cseg->p);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fde3 	bl	800afd0 <pbuf_ref>
  return cseg;
 800c40a:	68fb      	ldr	r3, [r7, #12]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	08017164 	.word	0x08017164
 800c418:	080176b8 	.word	0x080176b8
 800c41c:	080171a8 	.word	0x080171a8

0800c420 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
 800c42c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d109      	bne.n	800c448 <tcp_recv_null+0x28>
 800c434:	4b12      	ldr	r3, [pc, #72]	; (800c480 <tcp_recv_null+0x60>)
 800c436:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c43a:	4912      	ldr	r1, [pc, #72]	; (800c484 <tcp_recv_null+0x64>)
 800c43c:	4812      	ldr	r0, [pc, #72]	; (800c488 <tcp_recv_null+0x68>)
 800c43e:	f009 f8cf 	bl	80155e0 <iprintf>
 800c442:	f06f 030f 	mvn.w	r3, #15
 800c446:	e016      	b.n	800c476 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d009      	beq.n	800c462 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	891b      	ldrh	r3, [r3, #8]
 800c452:	4619      	mov	r1, r3
 800c454:	68b8      	ldr	r0, [r7, #8]
 800c456:	f7ff fb19 	bl	800ba8c <tcp_recved>
    pbuf_free(p);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7fe fd18 	bl	800ae90 <pbuf_free>
 800c460:	e008      	b.n	800c474 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d104      	bne.n	800c474 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c46a:	68b8      	ldr	r0, [r7, #8]
 800c46c:	f7ff f9be 	bl	800b7ec <tcp_close>
 800c470:	4603      	mov	r3, r0
 800c472:	e000      	b.n	800c476 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	08017164 	.word	0x08017164
 800c484:	080176d4 	.word	0x080176d4
 800c488:	080171a8 	.word	0x080171a8

0800c48c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	4603      	mov	r3, r0
 800c494:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	db01      	blt.n	800c4a2 <tcp_kill_prio+0x16>
 800c49e:	79fb      	ldrb	r3, [r7, #7]
 800c4a0:	e000      	b.n	800c4a4 <tcp_kill_prio+0x18>
 800c4a2:	237f      	movs	r3, #127	; 0x7f
 800c4a4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c4a6:	7afb      	ldrb	r3, [r7, #11]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d034      	beq.n	800c516 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4ba:	4b19      	ldr	r3, [pc, #100]	; (800c520 <tcp_kill_prio+0x94>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	e01f      	b.n	800c502 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	7d5b      	ldrb	r3, [r3, #21]
 800c4c6:	7afa      	ldrb	r2, [r7, #11]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d80c      	bhi.n	800c4e6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c4d0:	7afa      	ldrb	r2, [r7, #11]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d112      	bne.n	800c4fc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4d6:	4b13      	ldr	r3, [pc, #76]	; (800c524 <tcp_kill_prio+0x98>)
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d80a      	bhi.n	800c4fc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	; (800c524 <tcp_kill_prio+0x98>)
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	7d5b      	ldrb	r3, [r3, #21]
 800c4fa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1dc      	bne.n	800c4c2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d004      	beq.n	800c518 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c50e:	6938      	ldr	r0, [r7, #16]
 800c510:	f7ff fa56 	bl	800b9c0 <tcp_abort>
 800c514:	e000      	b.n	800c518 <tcp_kill_prio+0x8c>
    return;
 800c516:	bf00      	nop
  }
}
 800c518:	3718      	adds	r7, #24
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	2000866c 	.word	0x2000866c
 800c524:	20008660 	.word	0x20008660

0800c528 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	4603      	mov	r3, r0
 800c530:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	2b08      	cmp	r3, #8
 800c536:	d009      	beq.n	800c54c <tcp_kill_state+0x24>
 800c538:	79fb      	ldrb	r3, [r7, #7]
 800c53a:	2b09      	cmp	r3, #9
 800c53c:	d006      	beq.n	800c54c <tcp_kill_state+0x24>
 800c53e:	4b1a      	ldr	r3, [pc, #104]	; (800c5a8 <tcp_kill_state+0x80>)
 800c540:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c544:	4919      	ldr	r1, [pc, #100]	; (800c5ac <tcp_kill_state+0x84>)
 800c546:	481a      	ldr	r0, [pc, #104]	; (800c5b0 <tcp_kill_state+0x88>)
 800c548:	f009 f84a 	bl	80155e0 <iprintf>

  inactivity = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c550:	2300      	movs	r3, #0
 800c552:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c554:	4b17      	ldr	r3, [pc, #92]	; (800c5b4 <tcp_kill_state+0x8c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	617b      	str	r3, [r7, #20]
 800c55a:	e017      	b.n	800c58c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	7d1b      	ldrb	r3, [r3, #20]
 800c560:	79fa      	ldrb	r2, [r7, #7]
 800c562:	429a      	cmp	r2, r3
 800c564:	d10f      	bne.n	800c586 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c566:	4b14      	ldr	r3, [pc, #80]	; (800c5b8 <tcp_kill_state+0x90>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	1ad3      	subs	r3, r2, r3
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	429a      	cmp	r2, r3
 800c574:	d807      	bhi.n	800c586 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c576:	4b10      	ldr	r3, [pc, #64]	; (800c5b8 <tcp_kill_state+0x90>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	617b      	str	r3, [r7, #20]
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1e4      	bne.n	800c55c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c598:	2100      	movs	r1, #0
 800c59a:	6938      	ldr	r0, [r7, #16]
 800c59c:	f7ff f952 	bl	800b844 <tcp_abandon>
  }
}
 800c5a0:	bf00      	nop
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	08017164 	.word	0x08017164
 800c5ac:	080176f0 	.word	0x080176f0
 800c5b0:	080171a8 	.word	0x080171a8
 800c5b4:	2000866c 	.word	0x2000866c
 800c5b8:	20008660 	.word	0x20008660

0800c5bc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5ca:	4b12      	ldr	r3, [pc, #72]	; (800c614 <tcp_kill_timewait+0x58>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	e012      	b.n	800c5f8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c5d2:	4b11      	ldr	r3, [pc, #68]	; (800c618 <tcp_kill_timewait+0x5c>)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d807      	bhi.n	800c5f2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c5e2:	4b0d      	ldr	r3, [pc, #52]	; (800c618 <tcp_kill_timewait+0x5c>)
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1e9      	bne.n	800c5d2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d002      	beq.n	800c60a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c604:	68b8      	ldr	r0, [r7, #8]
 800c606:	f7ff f9db 	bl	800b9c0 <tcp_abort>
  }
}
 800c60a:	bf00      	nop
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20008670 	.word	0x20008670
 800c618:	20008660 	.word	0x20008660

0800c61c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c622:	4b10      	ldr	r3, [pc, #64]	; (800c664 <tcp_handle_closepend+0x48>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c628:	e014      	b.n	800c654 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	8b5b      	ldrh	r3, [r3, #26]
 800c634:	f003 0308 	and.w	r3, r3, #8
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d009      	beq.n	800c650 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	8b5b      	ldrh	r3, [r3, #26]
 800c640:	f023 0308 	bic.w	r3, r3, #8
 800c644:	b29a      	uxth	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff f864 	bl	800b718 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e7      	bne.n	800c62a <tcp_handle_closepend+0xe>
  }
}
 800c65a:	bf00      	nop
 800c65c:	bf00      	nop
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	2000866c 	.word	0x2000866c

0800c668 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c672:	2001      	movs	r0, #1
 800c674:	f7fd fd3a 	bl	800a0ec <memp_malloc>
 800c678:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d126      	bne.n	800c6ce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c680:	f7ff ffcc 	bl	800c61c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c684:	f7ff ff9a 	bl	800c5bc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c688:	2001      	movs	r0, #1
 800c68a:	f7fd fd2f 	bl	800a0ec <memp_malloc>
 800c68e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d11b      	bne.n	800c6ce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c696:	2009      	movs	r0, #9
 800c698:	f7ff ff46 	bl	800c528 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c69c:	2001      	movs	r0, #1
 800c69e:	f7fd fd25 	bl	800a0ec <memp_malloc>
 800c6a2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d111      	bne.n	800c6ce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c6aa:	2008      	movs	r0, #8
 800c6ac:	f7ff ff3c 	bl	800c528 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f7fd fd1b 	bl	800a0ec <memp_malloc>
 800c6b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d107      	bne.n	800c6ce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7ff fee3 	bl	800c48c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6c6:	2001      	movs	r0, #1
 800c6c8:	f7fd fd10 	bl	800a0ec <memp_malloc>
 800c6cc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d03f      	beq.n	800c754 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c6d4:	229c      	movs	r2, #156	; 0x9c
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f008 ff79 	bl	80155d0 <memset>
    pcb->prio = prio;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	79fa      	ldrb	r2, [r7, #7]
 800c6e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c6ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c6f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	22ff      	movs	r2, #255	; 0xff
 800c702:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c70a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2206      	movs	r2, #6
 800c710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2206      	movs	r2, #6
 800c718:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c720:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2201      	movs	r2, #1
 800c726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c72a:	4b0d      	ldr	r3, [pc, #52]	; (800c760 <tcp_alloc+0xf8>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c732:	4b0c      	ldr	r3, [pc, #48]	; (800c764 <tcp_alloc+0xfc>)
 800c734:	781a      	ldrb	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c740:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4a08      	ldr	r2, [pc, #32]	; (800c768 <tcp_alloc+0x100>)
 800c748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4a07      	ldr	r2, [pc, #28]	; (800c76c <tcp_alloc+0x104>)
 800c750:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c754:	68fb      	ldr	r3, [r7, #12]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20008660 	.word	0x20008660
 800c764:	20008676 	.word	0x20008676
 800c768:	0800c421 	.word	0x0800c421
 800c76c:	006ddd00 	.word	0x006ddd00

0800c770 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d107      	bne.n	800c78e <tcp_pcb_purge+0x1e>
 800c77e:	4b21      	ldr	r3, [pc, #132]	; (800c804 <tcp_pcb_purge+0x94>)
 800c780:	f640 0251 	movw	r2, #2129	; 0x851
 800c784:	4920      	ldr	r1, [pc, #128]	; (800c808 <tcp_pcb_purge+0x98>)
 800c786:	4821      	ldr	r0, [pc, #132]	; (800c80c <tcp_pcb_purge+0x9c>)
 800c788:	f008 ff2a 	bl	80155e0 <iprintf>
 800c78c:	e037      	b.n	800c7fe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	7d1b      	ldrb	r3, [r3, #20]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d033      	beq.n	800c7fe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c79a:	2b0a      	cmp	r3, #10
 800c79c:	d02f      	beq.n	800c7fe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d02b      	beq.n	800c7fe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d007      	beq.n	800c7be <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fb6c 	bl	800ae90 <pbuf_free>
      pcb->refused_data = NULL;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f986 	bl	800cad8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7d2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7ff fdc7 	bl	800c36c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff fdc2 	bl	800c36c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	66da      	str	r2, [r3, #108]	; 0x6c
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	08017164 	.word	0x08017164
 800c808:	080177b0 	.word	0x080177b0
 800c80c:	080171a8 	.word	0x080171a8

0800c810 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d106      	bne.n	800c82e <tcp_pcb_remove+0x1e>
 800c820:	4b3e      	ldr	r3, [pc, #248]	; (800c91c <tcp_pcb_remove+0x10c>)
 800c822:	f640 0283 	movw	r2, #2179	; 0x883
 800c826:	493e      	ldr	r1, [pc, #248]	; (800c920 <tcp_pcb_remove+0x110>)
 800c828:	483e      	ldr	r0, [pc, #248]	; (800c924 <tcp_pcb_remove+0x114>)
 800c82a:	f008 fed9 	bl	80155e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d106      	bne.n	800c842 <tcp_pcb_remove+0x32>
 800c834:	4b39      	ldr	r3, [pc, #228]	; (800c91c <tcp_pcb_remove+0x10c>)
 800c836:	f640 0284 	movw	r2, #2180	; 0x884
 800c83a:	493b      	ldr	r1, [pc, #236]	; (800c928 <tcp_pcb_remove+0x118>)
 800c83c:	4839      	ldr	r0, [pc, #228]	; (800c924 <tcp_pcb_remove+0x114>)
 800c83e:	f008 fecf 	bl	80155e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d105      	bne.n	800c858 <tcp_pcb_remove+0x48>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68da      	ldr	r2, [r3, #12]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	e013      	b.n	800c880 <tcp_pcb_remove+0x70>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	60fb      	str	r3, [r7, #12]
 800c85e:	e00c      	b.n	800c87a <tcp_pcb_remove+0x6a>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	683a      	ldr	r2, [r7, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d104      	bne.n	800c874 <tcp_pcb_remove+0x64>
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	68da      	ldr	r2, [r3, #12]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	60da      	str	r2, [r3, #12]
 800c872:	e005      	b.n	800c880 <tcp_pcb_remove+0x70>
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	60fb      	str	r3, [r7, #12]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1ef      	bne.n	800c860 <tcp_pcb_remove+0x50>
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	2200      	movs	r2, #0
 800c884:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c886:	6838      	ldr	r0, [r7, #0]
 800c888:	f7ff ff72 	bl	800c770 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	7d1b      	ldrb	r3, [r3, #20]
 800c890:	2b0a      	cmp	r3, #10
 800c892:	d013      	beq.n	800c8bc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d00f      	beq.n	800c8bc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	8b5b      	ldrh	r3, [r3, #26]
 800c8a0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d009      	beq.n	800c8bc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	8b5b      	ldrh	r3, [r3, #26]
 800c8ac:	f043 0302 	orr.w	r3, r3, #2
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c8b6:	6838      	ldr	r0, [r7, #0]
 800c8b8:	f002 ff6e 	bl	800f798 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	7d1b      	ldrb	r3, [r3, #20]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d020      	beq.n	800c906 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d006      	beq.n	800c8da <tcp_pcb_remove+0xca>
 800c8cc:	4b13      	ldr	r3, [pc, #76]	; (800c91c <tcp_pcb_remove+0x10c>)
 800c8ce:	f640 0293 	movw	r2, #2195	; 0x893
 800c8d2:	4916      	ldr	r1, [pc, #88]	; (800c92c <tcp_pcb_remove+0x11c>)
 800c8d4:	4813      	ldr	r0, [pc, #76]	; (800c924 <tcp_pcb_remove+0x114>)
 800c8d6:	f008 fe83 	bl	80155e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d006      	beq.n	800c8f0 <tcp_pcb_remove+0xe0>
 800c8e2:	4b0e      	ldr	r3, [pc, #56]	; (800c91c <tcp_pcb_remove+0x10c>)
 800c8e4:	f640 0294 	movw	r2, #2196	; 0x894
 800c8e8:	4911      	ldr	r1, [pc, #68]	; (800c930 <tcp_pcb_remove+0x120>)
 800c8ea:	480e      	ldr	r0, [pc, #56]	; (800c924 <tcp_pcb_remove+0x114>)
 800c8ec:	f008 fe78 	bl	80155e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d006      	beq.n	800c906 <tcp_pcb_remove+0xf6>
 800c8f8:	4b08      	ldr	r3, [pc, #32]	; (800c91c <tcp_pcb_remove+0x10c>)
 800c8fa:	f640 0296 	movw	r2, #2198	; 0x896
 800c8fe:	490d      	ldr	r1, [pc, #52]	; (800c934 <tcp_pcb_remove+0x124>)
 800c900:	4808      	ldr	r0, [pc, #32]	; (800c924 <tcp_pcb_remove+0x114>)
 800c902:	f008 fe6d 	bl	80155e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	2200      	movs	r2, #0
 800c90a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2200      	movs	r2, #0
 800c910:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	08017164 	.word	0x08017164
 800c920:	080177cc 	.word	0x080177cc
 800c924:	080171a8 	.word	0x080171a8
 800c928:	080177e8 	.word	0x080177e8
 800c92c:	08017808 	.word	0x08017808
 800c930:	08017820 	.word	0x08017820
 800c934:	0801783c 	.word	0x0801783c

0800c938 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <tcp_next_iss+0x1c>
 800c946:	4b0a      	ldr	r3, [pc, #40]	; (800c970 <tcp_next_iss+0x38>)
 800c948:	f640 02af 	movw	r2, #2223	; 0x8af
 800c94c:	4909      	ldr	r1, [pc, #36]	; (800c974 <tcp_next_iss+0x3c>)
 800c94e:	480a      	ldr	r0, [pc, #40]	; (800c978 <tcp_next_iss+0x40>)
 800c950:	f008 fe46 	bl	80155e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c954:	4b09      	ldr	r3, [pc, #36]	; (800c97c <tcp_next_iss+0x44>)
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	4b09      	ldr	r3, [pc, #36]	; (800c980 <tcp_next_iss+0x48>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4413      	add	r3, r2
 800c95e:	4a07      	ldr	r2, [pc, #28]	; (800c97c <tcp_next_iss+0x44>)
 800c960:	6013      	str	r3, [r2, #0]
  return iss;
 800c962:	4b06      	ldr	r3, [pc, #24]	; (800c97c <tcp_next_iss+0x44>)
 800c964:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	08017164 	.word	0x08017164
 800c974:	08017854 	.word	0x08017854
 800c978:	080171a8 	.word	0x080171a8
 800c97c:	20000038 	.word	0x20000038
 800c980:	20008660 	.word	0x20008660

0800c984 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4603      	mov	r3, r0
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d106      	bne.n	800c9a6 <tcp_eff_send_mss_netif+0x22>
 800c998:	4b14      	ldr	r3, [pc, #80]	; (800c9ec <tcp_eff_send_mss_netif+0x68>)
 800c99a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c99e:	4914      	ldr	r1, [pc, #80]	; (800c9f0 <tcp_eff_send_mss_netif+0x6c>)
 800c9a0:	4814      	ldr	r0, [pc, #80]	; (800c9f4 <tcp_eff_send_mss_netif+0x70>)
 800c9a2:	f008 fe1d 	bl	80155e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c9ac:	89fb      	ldrh	r3, [r7, #14]
 800c9ae:	e019      	b.n	800c9e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c9b6:	8afb      	ldrh	r3, [r7, #22]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d012      	beq.n	800c9e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c9bc:	2328      	movs	r3, #40	; 0x28
 800c9be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c9c0:	8afa      	ldrh	r2, [r7, #22]
 800c9c2:	8abb      	ldrh	r3, [r7, #20]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d904      	bls.n	800c9d2 <tcp_eff_send_mss_netif+0x4e>
 800c9c8:	8afa      	ldrh	r2, [r7, #22]
 800c9ca:	8abb      	ldrh	r3, [r7, #20]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	e000      	b.n	800c9d4 <tcp_eff_send_mss_netif+0x50>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c9d6:	8a7a      	ldrh	r2, [r7, #18]
 800c9d8:	89fb      	ldrh	r3, [r7, #14]
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	bf28      	it	cs
 800c9de:	4613      	movcs	r3, r2
 800c9e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c9e2:	89fb      	ldrh	r3, [r7, #14]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	08017164 	.word	0x08017164
 800c9f0:	08017870 	.word	0x08017870
 800c9f4:	080171a8 	.word	0x080171a8

0800c9f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d119      	bne.n	800ca40 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ca0c:	4b10      	ldr	r3, [pc, #64]	; (800ca50 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ca0e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ca12:	4910      	ldr	r1, [pc, #64]	; (800ca54 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ca14:	4810      	ldr	r0, [pc, #64]	; (800ca58 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ca16:	f008 fde3 	bl	80155e0 <iprintf>

  while (pcb != NULL) {
 800ca1a:	e011      	b.n	800ca40 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d108      	bne.n	800ca3a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f7fe ffc6 	bl	800b9c0 <tcp_abort>
      pcb = next;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	e002      	b.n	800ca40 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1ea      	bne.n	800ca1c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ca46:	bf00      	nop
 800ca48:	bf00      	nop
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	08017164 	.word	0x08017164
 800ca54:	08017898 	.word	0x08017898
 800ca58:	080171a8 	.word	0x080171a8

0800ca5c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d02a      	beq.n	800cac2 <tcp_netif_ip_addr_changed+0x66>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d026      	beq.n	800cac2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ca74:	4b15      	ldr	r3, [pc, #84]	; (800cacc <tcp_netif_ip_addr_changed+0x70>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff ffbc 	bl	800c9f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ca80:	4b13      	ldr	r3, [pc, #76]	; (800cad0 <tcp_netif_ip_addr_changed+0x74>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4619      	mov	r1, r3
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff ffb6 	bl	800c9f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d017      	beq.n	800cac2 <tcp_netif_ip_addr_changed+0x66>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d013      	beq.n	800cac2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ca9a:	4b0e      	ldr	r3, [pc, #56]	; (800cad4 <tcp_netif_ip_addr_changed+0x78>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e00c      	b.n	800cabc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d103      	bne.n	800cab6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1ef      	bne.n	800caa2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cac2:	bf00      	nop
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	2000866c 	.word	0x2000866c
 800cad0:	20008664 	.word	0x20008664
 800cad4:	20008668 	.word	0x20008668

0800cad8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d007      	beq.n	800caf8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff fc3d 	bl	800c36c <tcp_segs_free>
    pcb->ooseq = NULL;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800caf8:	bf00      	nop
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cb00:	b590      	push	{r4, r7, lr}
 800cb02:	b08d      	sub	sp, #52	; 0x34
 800cb04:	af04      	add	r7, sp, #16
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d105      	bne.n	800cb1c <tcp_input+0x1c>
 800cb10:	4b9b      	ldr	r3, [pc, #620]	; (800cd80 <tcp_input+0x280>)
 800cb12:	2283      	movs	r2, #131	; 0x83
 800cb14:	499b      	ldr	r1, [pc, #620]	; (800cd84 <tcp_input+0x284>)
 800cb16:	489c      	ldr	r0, [pc, #624]	; (800cd88 <tcp_input+0x288>)
 800cb18:	f008 fd62 	bl	80155e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a9a      	ldr	r2, [pc, #616]	; (800cd8c <tcp_input+0x28c>)
 800cb22:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	895b      	ldrh	r3, [r3, #10]
 800cb28:	2b13      	cmp	r3, #19
 800cb2a:	f240 83d1 	bls.w	800d2d0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cb2e:	4b98      	ldr	r3, [pc, #608]	; (800cd90 <tcp_input+0x290>)
 800cb30:	695b      	ldr	r3, [r3, #20]
 800cb32:	4a97      	ldr	r2, [pc, #604]	; (800cd90 <tcp_input+0x290>)
 800cb34:	6812      	ldr	r2, [r2, #0]
 800cb36:	4611      	mov	r1, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f007 fdb1 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f040 83c7 	bne.w	800d2d4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cb46:	4b92      	ldr	r3, [pc, #584]	; (800cd90 <tcp_input+0x290>)
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cb4e:	2be0      	cmp	r3, #224	; 0xe0
 800cb50:	f000 83c0 	beq.w	800d2d4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cb54:	4b8d      	ldr	r3, [pc, #564]	; (800cd8c <tcp_input+0x28c>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	899b      	ldrh	r3, [r3, #12]
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fc fd95 	bl	800968c <lwip_htons>
 800cb62:	4603      	mov	r3, r0
 800cb64:	0b1b      	lsrs	r3, r3, #12
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cb6e:	7cbb      	ldrb	r3, [r7, #18]
 800cb70:	2b13      	cmp	r3, #19
 800cb72:	f240 83b1 	bls.w	800d2d8 <tcp_input+0x7d8>
 800cb76:	7cbb      	ldrb	r3, [r7, #18]
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	891b      	ldrh	r3, [r3, #8]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	f200 83aa 	bhi.w	800d2d8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cb84:	7cbb      	ldrb	r3, [r7, #18]
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	3b14      	subs	r3, #20
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	4b81      	ldr	r3, [pc, #516]	; (800cd94 <tcp_input+0x294>)
 800cb8e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cb90:	4b81      	ldr	r3, [pc, #516]	; (800cd98 <tcp_input+0x298>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	895a      	ldrh	r2, [r3, #10]
 800cb9a:	7cbb      	ldrb	r3, [r7, #18]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d309      	bcc.n	800cbb6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cba2:	4b7c      	ldr	r3, [pc, #496]	; (800cd94 <tcp_input+0x294>)
 800cba4:	881a      	ldrh	r2, [r3, #0]
 800cba6:	4b7d      	ldr	r3, [pc, #500]	; (800cd9c <tcp_input+0x29c>)
 800cba8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cbaa:	7cbb      	ldrb	r3, [r7, #18]
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7fe f8e8 	bl	800ad84 <pbuf_remove_header>
 800cbb4:	e04e      	b.n	800cc54 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d105      	bne.n	800cbca <tcp_input+0xca>
 800cbbe:	4b70      	ldr	r3, [pc, #448]	; (800cd80 <tcp_input+0x280>)
 800cbc0:	22c2      	movs	r2, #194	; 0xc2
 800cbc2:	4977      	ldr	r1, [pc, #476]	; (800cda0 <tcp_input+0x2a0>)
 800cbc4:	4870      	ldr	r0, [pc, #448]	; (800cd88 <tcp_input+0x288>)
 800cbc6:	f008 fd0b 	bl	80155e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cbca:	2114      	movs	r1, #20
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7fe f8d9 	bl	800ad84 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	895a      	ldrh	r2, [r3, #10]
 800cbd6:	4b71      	ldr	r3, [pc, #452]	; (800cd9c <tcp_input+0x29c>)
 800cbd8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cbda:	4b6e      	ldr	r3, [pc, #440]	; (800cd94 <tcp_input+0x294>)
 800cbdc:	881a      	ldrh	r2, [r3, #0]
 800cbde:	4b6f      	ldr	r3, [pc, #444]	; (800cd9c <tcp_input+0x29c>)
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cbe6:	4b6d      	ldr	r3, [pc, #436]	; (800cd9c <tcp_input+0x29c>)
 800cbe8:	881b      	ldrh	r3, [r3, #0]
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7fe f8c9 	bl	800ad84 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	895b      	ldrh	r3, [r3, #10]
 800cbf8:	8a3a      	ldrh	r2, [r7, #16]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	f200 836e 	bhi.w	800d2dc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	4a64      	ldr	r2, [pc, #400]	; (800cd98 <tcp_input+0x298>)
 800cc08:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	8a3a      	ldrh	r2, [r7, #16]
 800cc10:	4611      	mov	r1, r2
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fe f8b6 	bl	800ad84 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	891a      	ldrh	r2, [r3, #8]
 800cc1c:	8a3b      	ldrh	r3, [r7, #16]
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	895b      	ldrh	r3, [r3, #10]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d005      	beq.n	800cc3a <tcp_input+0x13a>
 800cc2e:	4b54      	ldr	r3, [pc, #336]	; (800cd80 <tcp_input+0x280>)
 800cc30:	22df      	movs	r2, #223	; 0xdf
 800cc32:	495c      	ldr	r1, [pc, #368]	; (800cda4 <tcp_input+0x2a4>)
 800cc34:	4854      	ldr	r0, [pc, #336]	; (800cd88 <tcp_input+0x288>)
 800cc36:	f008 fcd3 	bl	80155e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	891a      	ldrh	r2, [r3, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	891b      	ldrh	r3, [r3, #8]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d005      	beq.n	800cc54 <tcp_input+0x154>
 800cc48:	4b4d      	ldr	r3, [pc, #308]	; (800cd80 <tcp_input+0x280>)
 800cc4a:	22e0      	movs	r2, #224	; 0xe0
 800cc4c:	4956      	ldr	r1, [pc, #344]	; (800cda8 <tcp_input+0x2a8>)
 800cc4e:	484e      	ldr	r0, [pc, #312]	; (800cd88 <tcp_input+0x288>)
 800cc50:	f008 fcc6 	bl	80155e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cc54:	4b4d      	ldr	r3, [pc, #308]	; (800cd8c <tcp_input+0x28c>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	4a4b      	ldr	r2, [pc, #300]	; (800cd8c <tcp_input+0x28c>)
 800cc5e:	6814      	ldr	r4, [r2, #0]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fc fd13 	bl	800968c <lwip_htons>
 800cc66:	4603      	mov	r3, r0
 800cc68:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cc6a:	4b48      	ldr	r3, [pc, #288]	; (800cd8c <tcp_input+0x28c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	885b      	ldrh	r3, [r3, #2]
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	4a46      	ldr	r2, [pc, #280]	; (800cd8c <tcp_input+0x28c>)
 800cc74:	6814      	ldr	r4, [r2, #0]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fc fd08 	bl	800968c <lwip_htons>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cc80:	4b42      	ldr	r3, [pc, #264]	; (800cd8c <tcp_input+0x28c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	4a41      	ldr	r2, [pc, #260]	; (800cd8c <tcp_input+0x28c>)
 800cc88:	6814      	ldr	r4, [r2, #0]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fc fd13 	bl	80096b6 <lwip_htonl>
 800cc90:	4603      	mov	r3, r0
 800cc92:	6063      	str	r3, [r4, #4]
 800cc94:	6863      	ldr	r3, [r4, #4]
 800cc96:	4a45      	ldr	r2, [pc, #276]	; (800cdac <tcp_input+0x2ac>)
 800cc98:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cc9a:	4b3c      	ldr	r3, [pc, #240]	; (800cd8c <tcp_input+0x28c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	4a3a      	ldr	r2, [pc, #232]	; (800cd8c <tcp_input+0x28c>)
 800cca2:	6814      	ldr	r4, [r2, #0]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fc fd06 	bl	80096b6 <lwip_htonl>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	60a3      	str	r3, [r4, #8]
 800ccae:	68a3      	ldr	r3, [r4, #8]
 800ccb0:	4a3f      	ldr	r2, [pc, #252]	; (800cdb0 <tcp_input+0x2b0>)
 800ccb2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ccb4:	4b35      	ldr	r3, [pc, #212]	; (800cd8c <tcp_input+0x28c>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	89db      	ldrh	r3, [r3, #14]
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	4a33      	ldr	r2, [pc, #204]	; (800cd8c <tcp_input+0x28c>)
 800ccbe:	6814      	ldr	r4, [r2, #0]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fc fce3 	bl	800968c <lwip_htons>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ccca:	4b30      	ldr	r3, [pc, #192]	; (800cd8c <tcp_input+0x28c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	899b      	ldrh	r3, [r3, #12]
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fc fcda 	bl	800968c <lwip_htons>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	4b34      	ldr	r3, [pc, #208]	; (800cdb4 <tcp_input+0x2b4>)
 800cce4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	891a      	ldrh	r2, [r3, #8]
 800ccea:	4b33      	ldr	r3, [pc, #204]	; (800cdb8 <tcp_input+0x2b8>)
 800ccec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ccee:	4b31      	ldr	r3, [pc, #196]	; (800cdb4 <tcp_input+0x2b4>)
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	f003 0303 	and.w	r3, r3, #3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00c      	beq.n	800cd14 <tcp_input+0x214>
    tcplen++;
 800ccfa:	4b2f      	ldr	r3, [pc, #188]	; (800cdb8 <tcp_input+0x2b8>)
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	4b2d      	ldr	r3, [pc, #180]	; (800cdb8 <tcp_input+0x2b8>)
 800cd04:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	891a      	ldrh	r2, [r3, #8]
 800cd0a:	4b2b      	ldr	r3, [pc, #172]	; (800cdb8 <tcp_input+0x2b8>)
 800cd0c:	881b      	ldrh	r3, [r3, #0]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	f200 82e6 	bhi.w	800d2e0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd18:	4b28      	ldr	r3, [pc, #160]	; (800cdbc <tcp_input+0x2bc>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	61fb      	str	r3, [r7, #28]
 800cd1e:	e09d      	b.n	800ce5c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	7d1b      	ldrb	r3, [r3, #20]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d105      	bne.n	800cd34 <tcp_input+0x234>
 800cd28:	4b15      	ldr	r3, [pc, #84]	; (800cd80 <tcp_input+0x280>)
 800cd2a:	22fb      	movs	r2, #251	; 0xfb
 800cd2c:	4924      	ldr	r1, [pc, #144]	; (800cdc0 <tcp_input+0x2c0>)
 800cd2e:	4816      	ldr	r0, [pc, #88]	; (800cd88 <tcp_input+0x288>)
 800cd30:	f008 fc56 	bl	80155e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	7d1b      	ldrb	r3, [r3, #20]
 800cd38:	2b0a      	cmp	r3, #10
 800cd3a:	d105      	bne.n	800cd48 <tcp_input+0x248>
 800cd3c:	4b10      	ldr	r3, [pc, #64]	; (800cd80 <tcp_input+0x280>)
 800cd3e:	22fc      	movs	r2, #252	; 0xfc
 800cd40:	4920      	ldr	r1, [pc, #128]	; (800cdc4 <tcp_input+0x2c4>)
 800cd42:	4811      	ldr	r0, [pc, #68]	; (800cd88 <tcp_input+0x288>)
 800cd44:	f008 fc4c 	bl	80155e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	7d1b      	ldrb	r3, [r3, #20]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d105      	bne.n	800cd5c <tcp_input+0x25c>
 800cd50:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <tcp_input+0x280>)
 800cd52:	22fd      	movs	r2, #253	; 0xfd
 800cd54:	491c      	ldr	r1, [pc, #112]	; (800cdc8 <tcp_input+0x2c8>)
 800cd56:	480c      	ldr	r0, [pc, #48]	; (800cd88 <tcp_input+0x288>)
 800cd58:	f008 fc42 	bl	80155e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	7a1b      	ldrb	r3, [r3, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d033      	beq.n	800cdcc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	7a1a      	ldrb	r2, [r3, #8]
 800cd68:	4b09      	ldr	r3, [pc, #36]	; (800cd90 <tcp_input+0x290>)
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd70:	3301      	adds	r3, #1
 800cd72:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d029      	beq.n	800cdcc <tcp_input+0x2cc>
      prev = pcb;
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	61bb      	str	r3, [r7, #24]
      continue;
 800cd7c:	e06b      	b.n	800ce56 <tcp_input+0x356>
 800cd7e:	bf00      	nop
 800cd80:	080178cc 	.word	0x080178cc
 800cd84:	08017900 	.word	0x08017900
 800cd88:	08017918 	.word	0x08017918
 800cd8c:	20008688 	.word	0x20008688
 800cd90:	20005724 	.word	0x20005724
 800cd94:	2000868c 	.word	0x2000868c
 800cd98:	20008690 	.word	0x20008690
 800cd9c:	2000868e 	.word	0x2000868e
 800cda0:	08017940 	.word	0x08017940
 800cda4:	08017950 	.word	0x08017950
 800cda8:	0801795c 	.word	0x0801795c
 800cdac:	20008698 	.word	0x20008698
 800cdb0:	2000869c 	.word	0x2000869c
 800cdb4:	200086a4 	.word	0x200086a4
 800cdb8:	200086a2 	.word	0x200086a2
 800cdbc:	2000866c 	.word	0x2000866c
 800cdc0:	0801797c 	.word	0x0801797c
 800cdc4:	080179a4 	.word	0x080179a4
 800cdc8:	080179d0 	.word	0x080179d0
    }

    if (pcb->remote_port == tcphdr->src &&
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	8b1a      	ldrh	r2, [r3, #24]
 800cdd0:	4b72      	ldr	r3, [pc, #456]	; (800cf9c <tcp_input+0x49c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d13a      	bne.n	800ce52 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	8ada      	ldrh	r2, [r3, #22]
 800cde0:	4b6e      	ldr	r3, [pc, #440]	; (800cf9c <tcp_input+0x49c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	885b      	ldrh	r3, [r3, #2]
 800cde6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d132      	bne.n	800ce52 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	685a      	ldr	r2, [r3, #4]
 800cdf0:	4b6b      	ldr	r3, [pc, #428]	; (800cfa0 <tcp_input+0x4a0>)
 800cdf2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d12c      	bne.n	800ce52 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	4b68      	ldr	r3, [pc, #416]	; (800cfa0 <tcp_input+0x4a0>)
 800cdfe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d126      	bne.n	800ce52 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	69fa      	ldr	r2, [r7, #28]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d106      	bne.n	800ce1c <tcp_input+0x31c>
 800ce0e:	4b65      	ldr	r3, [pc, #404]	; (800cfa4 <tcp_input+0x4a4>)
 800ce10:	f240 120d 	movw	r2, #269	; 0x10d
 800ce14:	4964      	ldr	r1, [pc, #400]	; (800cfa8 <tcp_input+0x4a8>)
 800ce16:	4865      	ldr	r0, [pc, #404]	; (800cfac <tcp_input+0x4ac>)
 800ce18:	f008 fbe2 	bl	80155e0 <iprintf>
      if (prev != NULL) {
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00a      	beq.n	800ce38 <tcp_input+0x338>
        prev->next = pcb->next;
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	68da      	ldr	r2, [r3, #12]
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ce2a:	4b61      	ldr	r3, [pc, #388]	; (800cfb0 <tcp_input+0x4b0>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ce32:	4a5f      	ldr	r2, [pc, #380]	; (800cfb0 <tcp_input+0x4b0>)
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	69fa      	ldr	r2, [r7, #28]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d111      	bne.n	800ce66 <tcp_input+0x366>
 800ce42:	4b58      	ldr	r3, [pc, #352]	; (800cfa4 <tcp_input+0x4a4>)
 800ce44:	f240 1215 	movw	r2, #277	; 0x115
 800ce48:	495a      	ldr	r1, [pc, #360]	; (800cfb4 <tcp_input+0x4b4>)
 800ce4a:	4858      	ldr	r0, [pc, #352]	; (800cfac <tcp_input+0x4ac>)
 800ce4c:	f008 fbc8 	bl	80155e0 <iprintf>
      break;
 800ce50:	e009      	b.n	800ce66 <tcp_input+0x366>
    }
    prev = pcb;
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	61fb      	str	r3, [r7, #28]
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f47f af5e 	bne.w	800cd20 <tcp_input+0x220>
 800ce64:	e000      	b.n	800ce68 <tcp_input+0x368>
      break;
 800ce66:	bf00      	nop
  }

  if (pcb == NULL) {
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f040 80aa 	bne.w	800cfc4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce70:	4b51      	ldr	r3, [pc, #324]	; (800cfb8 <tcp_input+0x4b8>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	61fb      	str	r3, [r7, #28]
 800ce76:	e03f      	b.n	800cef8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	7d1b      	ldrb	r3, [r3, #20]
 800ce7c:	2b0a      	cmp	r3, #10
 800ce7e:	d006      	beq.n	800ce8e <tcp_input+0x38e>
 800ce80:	4b48      	ldr	r3, [pc, #288]	; (800cfa4 <tcp_input+0x4a4>)
 800ce82:	f240 121f 	movw	r2, #287	; 0x11f
 800ce86:	494d      	ldr	r1, [pc, #308]	; (800cfbc <tcp_input+0x4bc>)
 800ce88:	4848      	ldr	r0, [pc, #288]	; (800cfac <tcp_input+0x4ac>)
 800ce8a:	f008 fba9 	bl	80155e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	7a1b      	ldrb	r3, [r3, #8]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d009      	beq.n	800ceaa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	7a1a      	ldrb	r2, [r3, #8]
 800ce9a:	4b41      	ldr	r3, [pc, #260]	; (800cfa0 <tcp_input+0x4a0>)
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cea2:	3301      	adds	r3, #1
 800cea4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d122      	bne.n	800cef0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	8b1a      	ldrh	r2, [r3, #24]
 800ceae:	4b3b      	ldr	r3, [pc, #236]	; (800cf9c <tcp_input+0x49c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d11b      	bne.n	800cef2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	8ada      	ldrh	r2, [r3, #22]
 800cebe:	4b37      	ldr	r3, [pc, #220]	; (800cf9c <tcp_input+0x49c>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	885b      	ldrh	r3, [r3, #2]
 800cec4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d113      	bne.n	800cef2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	4b34      	ldr	r3, [pc, #208]	; (800cfa0 <tcp_input+0x4a0>)
 800ced0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d10d      	bne.n	800cef2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	4b31      	ldr	r3, [pc, #196]	; (800cfa0 <tcp_input+0x4a0>)
 800cedc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cede:	429a      	cmp	r2, r3
 800cee0:	d107      	bne.n	800cef2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cee2:	69f8      	ldr	r0, [r7, #28]
 800cee4:	f000 fb56 	bl	800d594 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7fd ffd1 	bl	800ae90 <pbuf_free>
        return;
 800ceee:	e1fd      	b.n	800d2ec <tcp_input+0x7ec>
        continue;
 800cef0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	61fb      	str	r3, [r7, #28]
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1bc      	bne.n	800ce78 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf02:	4b2f      	ldr	r3, [pc, #188]	; (800cfc0 <tcp_input+0x4c0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	617b      	str	r3, [r7, #20]
 800cf08:	e02a      	b.n	800cf60 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	7a1b      	ldrb	r3, [r3, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00c      	beq.n	800cf2c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	7a1a      	ldrb	r2, [r3, #8]
 800cf16:	4b22      	ldr	r3, [pc, #136]	; (800cfa0 <tcp_input+0x4a0>)
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf1e:	3301      	adds	r3, #1
 800cf20:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d002      	beq.n	800cf2c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	61bb      	str	r3, [r7, #24]
        continue;
 800cf2a:	e016      	b.n	800cf5a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	8ada      	ldrh	r2, [r3, #22]
 800cf30:	4b1a      	ldr	r3, [pc, #104]	; (800cf9c <tcp_input+0x49c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	885b      	ldrh	r3, [r3, #2]
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d10c      	bne.n	800cf56 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	4b17      	ldr	r3, [pc, #92]	; (800cfa0 <tcp_input+0x4a0>)
 800cf42:	695b      	ldr	r3, [r3, #20]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d00f      	beq.n	800cf68 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00d      	beq.n	800cf6a <tcp_input+0x46a>
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d009      	beq.n	800cf6a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	617b      	str	r3, [r7, #20]
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1d1      	bne.n	800cf0a <tcp_input+0x40a>
 800cf66:	e000      	b.n	800cf6a <tcp_input+0x46a>
            break;
 800cf68:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d029      	beq.n	800cfc4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	68da      	ldr	r2, [r3, #12]
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cf7e:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <tcp_input+0x4c0>)
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cf86:	4a0e      	ldr	r2, [pc, #56]	; (800cfc0 <tcp_input+0x4c0>)
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cf8c:	6978      	ldr	r0, [r7, #20]
 800cf8e:	f000 fa03 	bl	800d398 <tcp_listen_input>
      }
      pbuf_free(p);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7fd ff7c 	bl	800ae90 <pbuf_free>
      return;
 800cf98:	e1a8      	b.n	800d2ec <tcp_input+0x7ec>
 800cf9a:	bf00      	nop
 800cf9c:	20008688 	.word	0x20008688
 800cfa0:	20005724 	.word	0x20005724
 800cfa4:	080178cc 	.word	0x080178cc
 800cfa8:	080179f8 	.word	0x080179f8
 800cfac:	08017918 	.word	0x08017918
 800cfb0:	2000866c 	.word	0x2000866c
 800cfb4:	08017a24 	.word	0x08017a24
 800cfb8:	20008670 	.word	0x20008670
 800cfbc:	08017a50 	.word	0x08017a50
 800cfc0:	20008668 	.word	0x20008668
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f000 8158 	beq.w	800d27c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cfcc:	4b95      	ldr	r3, [pc, #596]	; (800d224 <tcp_input+0x724>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	891a      	ldrh	r2, [r3, #8]
 800cfd6:	4b93      	ldr	r3, [pc, #588]	; (800d224 <tcp_input+0x724>)
 800cfd8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cfda:	4a92      	ldr	r2, [pc, #584]	; (800d224 <tcp_input+0x724>)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cfe0:	4b91      	ldr	r3, [pc, #580]	; (800d228 <tcp_input+0x728>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a8f      	ldr	r2, [pc, #572]	; (800d224 <tcp_input+0x724>)
 800cfe6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cfe8:	4b90      	ldr	r3, [pc, #576]	; (800d22c <tcp_input+0x72c>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cfee:	4b90      	ldr	r3, [pc, #576]	; (800d230 <tcp_input+0x730>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cff4:	4b8f      	ldr	r3, [pc, #572]	; (800d234 <tcp_input+0x734>)
 800cff6:	2200      	movs	r2, #0
 800cff8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cffa:	4b8f      	ldr	r3, [pc, #572]	; (800d238 <tcp_input+0x738>)
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	f003 0308 	and.w	r3, r3, #8
 800d002:	2b00      	cmp	r3, #0
 800d004:	d006      	beq.n	800d014 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	7b5b      	ldrb	r3, [r3, #13]
 800d00a:	f043 0301 	orr.w	r3, r3, #1
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d017      	beq.n	800d04c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d01c:	69f8      	ldr	r0, [r7, #28]
 800d01e:	f7ff f929 	bl	800c274 <tcp_process_refused_data>
 800d022:	4603      	mov	r3, r0
 800d024:	f113 0f0d 	cmn.w	r3, #13
 800d028:	d007      	beq.n	800d03a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00c      	beq.n	800d04c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d032:	4b82      	ldr	r3, [pc, #520]	; (800d23c <tcp_input+0x73c>)
 800d034:	881b      	ldrh	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d008      	beq.n	800d04c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f040 80e3 	bne.w	800d20a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d044:	69f8      	ldr	r0, [r7, #28]
 800d046:	f003 f9ad 	bl	80103a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d04a:	e0de      	b.n	800d20a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d04c:	4a7c      	ldr	r2, [pc, #496]	; (800d240 <tcp_input+0x740>)
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d052:	69f8      	ldr	r0, [r7, #28]
 800d054:	f000 fb18 	bl	800d688 <tcp_process>
 800d058:	4603      	mov	r3, r0
 800d05a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d05c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d060:	f113 0f0d 	cmn.w	r3, #13
 800d064:	f000 80d3 	beq.w	800d20e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d068:	4b71      	ldr	r3, [pc, #452]	; (800d230 <tcp_input+0x730>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	f003 0308 	and.w	r3, r3, #8
 800d070:	2b00      	cmp	r3, #0
 800d072:	d015      	beq.n	800d0a0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d008      	beq.n	800d090 <tcp_input+0x590>
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d084:	69fa      	ldr	r2, [r7, #28]
 800d086:	6912      	ldr	r2, [r2, #16]
 800d088:	f06f 010d 	mvn.w	r1, #13
 800d08c:	4610      	mov	r0, r2
 800d08e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d090:	69f9      	ldr	r1, [r7, #28]
 800d092:	486c      	ldr	r0, [pc, #432]	; (800d244 <tcp_input+0x744>)
 800d094:	f7ff fbbc 	bl	800c810 <tcp_pcb_remove>
        tcp_free(pcb);
 800d098:	69f8      	ldr	r0, [r7, #28]
 800d09a:	f7fe f9a9 	bl	800b3f0 <tcp_free>
 800d09e:	e0da      	b.n	800d256 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d0a4:	4b63      	ldr	r3, [pc, #396]	; (800d234 <tcp_input+0x734>)
 800d0a6:	881b      	ldrh	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d01d      	beq.n	800d0e8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d0ac:	4b61      	ldr	r3, [pc, #388]	; (800d234 <tcp_input+0x734>)
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00a      	beq.n	800d0d2 <tcp_input+0x5d2>
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0c2:	69fa      	ldr	r2, [r7, #28]
 800d0c4:	6910      	ldr	r0, [r2, #16]
 800d0c6:	89fa      	ldrh	r2, [r7, #14]
 800d0c8:	69f9      	ldr	r1, [r7, #28]
 800d0ca:	4798      	blx	r3
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	74fb      	strb	r3, [r7, #19]
 800d0d0:	e001      	b.n	800d0d6 <tcp_input+0x5d6>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d0d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0da:	f113 0f0d 	cmn.w	r3, #13
 800d0de:	f000 8098 	beq.w	800d212 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d0e2:	4b54      	ldr	r3, [pc, #336]	; (800d234 <tcp_input+0x734>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d0e8:	69f8      	ldr	r0, [r7, #28]
 800d0ea:	f000 f915 	bl	800d318 <tcp_input_delayed_close>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 8090 	bne.w	800d216 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d0f6:	4b4d      	ldr	r3, [pc, #308]	; (800d22c <tcp_input+0x72c>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d041      	beq.n	800d182 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d102:	2b00      	cmp	r3, #0
 800d104:	d006      	beq.n	800d114 <tcp_input+0x614>
 800d106:	4b50      	ldr	r3, [pc, #320]	; (800d248 <tcp_input+0x748>)
 800d108:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d10c:	494f      	ldr	r1, [pc, #316]	; (800d24c <tcp_input+0x74c>)
 800d10e:	4850      	ldr	r0, [pc, #320]	; (800d250 <tcp_input+0x750>)
 800d110:	f008 fa66 	bl	80155e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	8b5b      	ldrh	r3, [r3, #26]
 800d118:	f003 0310 	and.w	r3, r3, #16
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d008      	beq.n	800d132 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d120:	4b42      	ldr	r3, [pc, #264]	; (800d22c <tcp_input+0x72c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4618      	mov	r0, r3
 800d126:	f7fd feb3 	bl	800ae90 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d12a:	69f8      	ldr	r0, [r7, #28]
 800d12c:	f7fe fc48 	bl	800b9c0 <tcp_abort>
            goto aborted;
 800d130:	e091      	b.n	800d256 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00c      	beq.n	800d156 <tcp_input+0x656>
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	6918      	ldr	r0, [r3, #16]
 800d146:	4b39      	ldr	r3, [pc, #228]	; (800d22c <tcp_input+0x72c>)
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	2300      	movs	r3, #0
 800d14c:	69f9      	ldr	r1, [r7, #28]
 800d14e:	47a0      	blx	r4
 800d150:	4603      	mov	r3, r0
 800d152:	74fb      	strb	r3, [r7, #19]
 800d154:	e008      	b.n	800d168 <tcp_input+0x668>
 800d156:	4b35      	ldr	r3, [pc, #212]	; (800d22c <tcp_input+0x72c>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	2300      	movs	r3, #0
 800d15c:	69f9      	ldr	r1, [r7, #28]
 800d15e:	2000      	movs	r0, #0
 800d160:	f7ff f95e 	bl	800c420 <tcp_recv_null>
 800d164:	4603      	mov	r3, r0
 800d166:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d16c:	f113 0f0d 	cmn.w	r3, #13
 800d170:	d053      	beq.n	800d21a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d172:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d003      	beq.n	800d182 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d17a:	4b2c      	ldr	r3, [pc, #176]	; (800d22c <tcp_input+0x72c>)
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d182:	4b2b      	ldr	r3, [pc, #172]	; (800d230 <tcp_input+0x730>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	f003 0320 	and.w	r3, r3, #32
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d030      	beq.n	800d1f0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d192:	2b00      	cmp	r3, #0
 800d194:	d009      	beq.n	800d1aa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d19a:	7b5a      	ldrb	r2, [r3, #13]
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1a0:	f042 0220 	orr.w	r2, r2, #32
 800d1a4:	b2d2      	uxtb	r2, r2
 800d1a6:	735a      	strb	r2, [r3, #13]
 800d1a8:	e022      	b.n	800d1f0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d1b2:	d005      	beq.n	800d1c0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00b      	beq.n	800d1e2 <tcp_input+0x6e2>
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	6918      	ldr	r0, [r3, #16]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	69f9      	ldr	r1, [r7, #28]
 800d1da:	47a0      	blx	r4
 800d1dc:	4603      	mov	r3, r0
 800d1de:	74fb      	strb	r3, [r7, #19]
 800d1e0:	e001      	b.n	800d1e6 <tcp_input+0x6e6>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d1e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1ea:	f113 0f0d 	cmn.w	r3, #13
 800d1ee:	d016      	beq.n	800d21e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d1f0:	4b13      	ldr	r3, [pc, #76]	; (800d240 <tcp_input+0x740>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d1f6:	69f8      	ldr	r0, [r7, #28]
 800d1f8:	f000 f88e 	bl	800d318 <tcp_input_delayed_close>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d128      	bne.n	800d254 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d202:	69f8      	ldr	r0, [r7, #28]
 800d204:	f002 fac8 	bl	800f798 <tcp_output>
 800d208:	e025      	b.n	800d256 <tcp_input+0x756>
        goto aborted;
 800d20a:	bf00      	nop
 800d20c:	e023      	b.n	800d256 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d20e:	bf00      	nop
 800d210:	e021      	b.n	800d256 <tcp_input+0x756>
              goto aborted;
 800d212:	bf00      	nop
 800d214:	e01f      	b.n	800d256 <tcp_input+0x756>
          goto aborted;
 800d216:	bf00      	nop
 800d218:	e01d      	b.n	800d256 <tcp_input+0x756>
            goto aborted;
 800d21a:	bf00      	nop
 800d21c:	e01b      	b.n	800d256 <tcp_input+0x756>
              goto aborted;
 800d21e:	bf00      	nop
 800d220:	e019      	b.n	800d256 <tcp_input+0x756>
 800d222:	bf00      	nop
 800d224:	20008678 	.word	0x20008678
 800d228:	20008688 	.word	0x20008688
 800d22c:	200086a8 	.word	0x200086a8
 800d230:	200086a5 	.word	0x200086a5
 800d234:	200086a0 	.word	0x200086a0
 800d238:	200086a4 	.word	0x200086a4
 800d23c:	200086a2 	.word	0x200086a2
 800d240:	200086ac 	.word	0x200086ac
 800d244:	2000866c 	.word	0x2000866c
 800d248:	080178cc 	.word	0x080178cc
 800d24c:	08017a80 	.word	0x08017a80
 800d250:	08017918 	.word	0x08017918
          goto aborted;
 800d254:	bf00      	nop
    tcp_input_pcb = NULL;
 800d256:	4b27      	ldr	r3, [pc, #156]	; (800d2f4 <tcp_input+0x7f4>)
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d25c:	4b26      	ldr	r3, [pc, #152]	; (800d2f8 <tcp_input+0x7f8>)
 800d25e:	2200      	movs	r2, #0
 800d260:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d262:	4b26      	ldr	r3, [pc, #152]	; (800d2fc <tcp_input+0x7fc>)
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d03f      	beq.n	800d2ea <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d26a:	4b24      	ldr	r3, [pc, #144]	; (800d2fc <tcp_input+0x7fc>)
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fd fe0e 	bl	800ae90 <pbuf_free>
      inseg.p = NULL;
 800d274:	4b21      	ldr	r3, [pc, #132]	; (800d2fc <tcp_input+0x7fc>)
 800d276:	2200      	movs	r2, #0
 800d278:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d27a:	e036      	b.n	800d2ea <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d27c:	4b20      	ldr	r3, [pc, #128]	; (800d300 <tcp_input+0x800>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	899b      	ldrh	r3, [r3, #12]
 800d282:	b29b      	uxth	r3, r3
 800d284:	4618      	mov	r0, r3
 800d286:	f7fc fa01 	bl	800968c <lwip_htons>
 800d28a:	4603      	mov	r3, r0
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	f003 0304 	and.w	r3, r3, #4
 800d292:	2b00      	cmp	r3, #0
 800d294:	d118      	bne.n	800d2c8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d296:	4b1b      	ldr	r3, [pc, #108]	; (800d304 <tcp_input+0x804>)
 800d298:	6819      	ldr	r1, [r3, #0]
 800d29a:	4b1b      	ldr	r3, [pc, #108]	; (800d308 <tcp_input+0x808>)
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	4b1a      	ldr	r3, [pc, #104]	; (800d30c <tcp_input+0x80c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2a6:	4b16      	ldr	r3, [pc, #88]	; (800d300 <tcp_input+0x800>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2aa:	885b      	ldrh	r3, [r3, #2]
 800d2ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2ae:	4a14      	ldr	r2, [pc, #80]	; (800d300 <tcp_input+0x800>)
 800d2b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2b2:	8812      	ldrh	r2, [r2, #0]
 800d2b4:	b292      	uxth	r2, r2
 800d2b6:	9202      	str	r2, [sp, #8]
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	4b15      	ldr	r3, [pc, #84]	; (800d310 <tcp_input+0x810>)
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	4b15      	ldr	r3, [pc, #84]	; (800d314 <tcp_input+0x814>)
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	f003 f81c 	bl	8010300 <tcp_rst>
    pbuf_free(p);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7fd fde1 	bl	800ae90 <pbuf_free>
  return;
 800d2ce:	e00c      	b.n	800d2ea <tcp_input+0x7ea>
    goto dropped;
 800d2d0:	bf00      	nop
 800d2d2:	e006      	b.n	800d2e2 <tcp_input+0x7e2>
    goto dropped;
 800d2d4:	bf00      	nop
 800d2d6:	e004      	b.n	800d2e2 <tcp_input+0x7e2>
    goto dropped;
 800d2d8:	bf00      	nop
 800d2da:	e002      	b.n	800d2e2 <tcp_input+0x7e2>
      goto dropped;
 800d2dc:	bf00      	nop
 800d2de:	e000      	b.n	800d2e2 <tcp_input+0x7e2>
      goto dropped;
 800d2e0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7fd fdd4 	bl	800ae90 <pbuf_free>
 800d2e8:	e000      	b.n	800d2ec <tcp_input+0x7ec>
  return;
 800d2ea:	bf00      	nop
}
 800d2ec:	3724      	adds	r7, #36	; 0x24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd90      	pop	{r4, r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	200086ac 	.word	0x200086ac
 800d2f8:	200086a8 	.word	0x200086a8
 800d2fc:	20008678 	.word	0x20008678
 800d300:	20008688 	.word	0x20008688
 800d304:	2000869c 	.word	0x2000869c
 800d308:	200086a2 	.word	0x200086a2
 800d30c:	20008698 	.word	0x20008698
 800d310:	20005734 	.word	0x20005734
 800d314:	20005738 	.word	0x20005738

0800d318 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d106      	bne.n	800d334 <tcp_input_delayed_close+0x1c>
 800d326:	4b17      	ldr	r3, [pc, #92]	; (800d384 <tcp_input_delayed_close+0x6c>)
 800d328:	f240 225a 	movw	r2, #602	; 0x25a
 800d32c:	4916      	ldr	r1, [pc, #88]	; (800d388 <tcp_input_delayed_close+0x70>)
 800d32e:	4817      	ldr	r0, [pc, #92]	; (800d38c <tcp_input_delayed_close+0x74>)
 800d330:	f008 f956 	bl	80155e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d334:	4b16      	ldr	r3, [pc, #88]	; (800d390 <tcp_input_delayed_close+0x78>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	f003 0310 	and.w	r3, r3, #16
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d01c      	beq.n	800d37a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	8b5b      	ldrh	r3, [r3, #26]
 800d344:	f003 0310 	and.w	r3, r3, #16
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10d      	bne.n	800d368 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d352:	2b00      	cmp	r3, #0
 800d354:	d008      	beq.n	800d368 <tcp_input_delayed_close+0x50>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	6912      	ldr	r2, [r2, #16]
 800d360:	f06f 010e 	mvn.w	r1, #14
 800d364:	4610      	mov	r0, r2
 800d366:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d368:	6879      	ldr	r1, [r7, #4]
 800d36a:	480a      	ldr	r0, [pc, #40]	; (800d394 <tcp_input_delayed_close+0x7c>)
 800d36c:	f7ff fa50 	bl	800c810 <tcp_pcb_remove>
    tcp_free(pcb);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7fe f83d 	bl	800b3f0 <tcp_free>
    return 1;
 800d376:	2301      	movs	r3, #1
 800d378:	e000      	b.n	800d37c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d37a:	2300      	movs	r3, #0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	080178cc 	.word	0x080178cc
 800d388:	08017a9c 	.word	0x08017a9c
 800d38c:	08017918 	.word	0x08017918
 800d390:	200086a5 	.word	0x200086a5
 800d394:	2000866c 	.word	0x2000866c

0800d398 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d398:	b590      	push	{r4, r7, lr}
 800d39a:	b08b      	sub	sp, #44	; 0x2c
 800d39c:	af04      	add	r7, sp, #16
 800d39e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d3a0:	4b6f      	ldr	r3, [pc, #444]	; (800d560 <tcp_listen_input+0x1c8>)
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	f003 0304 	and.w	r3, r3, #4
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f040 80d2 	bne.w	800d552 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d106      	bne.n	800d3c2 <tcp_listen_input+0x2a>
 800d3b4:	4b6b      	ldr	r3, [pc, #428]	; (800d564 <tcp_listen_input+0x1cc>)
 800d3b6:	f240 2281 	movw	r2, #641	; 0x281
 800d3ba:	496b      	ldr	r1, [pc, #428]	; (800d568 <tcp_listen_input+0x1d0>)
 800d3bc:	486b      	ldr	r0, [pc, #428]	; (800d56c <tcp_listen_input+0x1d4>)
 800d3be:	f008 f90f 	bl	80155e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d3c2:	4b67      	ldr	r3, [pc, #412]	; (800d560 <tcp_listen_input+0x1c8>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	f003 0310 	and.w	r3, r3, #16
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d019      	beq.n	800d402 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3ce:	4b68      	ldr	r3, [pc, #416]	; (800d570 <tcp_listen_input+0x1d8>)
 800d3d0:	6819      	ldr	r1, [r3, #0]
 800d3d2:	4b68      	ldr	r3, [pc, #416]	; (800d574 <tcp_listen_input+0x1dc>)
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4b67      	ldr	r3, [pc, #412]	; (800d578 <tcp_listen_input+0x1e0>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3de:	4b67      	ldr	r3, [pc, #412]	; (800d57c <tcp_listen_input+0x1e4>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3e2:	885b      	ldrh	r3, [r3, #2]
 800d3e4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3e6:	4a65      	ldr	r2, [pc, #404]	; (800d57c <tcp_listen_input+0x1e4>)
 800d3e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3ea:	8812      	ldrh	r2, [r2, #0]
 800d3ec:	b292      	uxth	r2, r2
 800d3ee:	9202      	str	r2, [sp, #8]
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	4b63      	ldr	r3, [pc, #396]	; (800d580 <tcp_listen_input+0x1e8>)
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	4b63      	ldr	r3, [pc, #396]	; (800d584 <tcp_listen_input+0x1ec>)
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f002 ff80 	bl	8010300 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d400:	e0a9      	b.n	800d556 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d402:	4b57      	ldr	r3, [pc, #348]	; (800d560 <tcp_listen_input+0x1c8>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	f003 0302 	and.w	r3, r3, #2
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f000 80a3 	beq.w	800d556 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	7d5b      	ldrb	r3, [r3, #21]
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff f927 	bl	800c668 <tcp_alloc>
 800d41a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d111      	bne.n	800d446 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00a      	beq.n	800d440 <tcp_listen_input+0xa8>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	6910      	ldr	r0, [r2, #16]
 800d432:	f04f 32ff 	mov.w	r2, #4294967295
 800d436:	2100      	movs	r1, #0
 800d438:	4798      	blx	r3
 800d43a:	4603      	mov	r3, r0
 800d43c:	73bb      	strb	r3, [r7, #14]
      return;
 800d43e:	e08b      	b.n	800d558 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d440:	23f0      	movs	r3, #240	; 0xf0
 800d442:	73bb      	strb	r3, [r7, #14]
      return;
 800d444:	e088      	b.n	800d558 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d446:	4b50      	ldr	r3, [pc, #320]	; (800d588 <tcp_listen_input+0x1f0>)
 800d448:	695a      	ldr	r2, [r3, #20]
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d44e:	4b4e      	ldr	r3, [pc, #312]	; (800d588 <tcp_listen_input+0x1f0>)
 800d450:	691a      	ldr	r2, [r3, #16]
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	8ada      	ldrh	r2, [r3, #22]
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d45e:	4b47      	ldr	r3, [pc, #284]	; (800d57c <tcp_listen_input+0x1e4>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	881b      	ldrh	r3, [r3, #0]
 800d464:	b29a      	uxth	r2, r3
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2203      	movs	r2, #3
 800d46e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d470:	4b41      	ldr	r3, [pc, #260]	; (800d578 <tcp_listen_input+0x1e0>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	1c5a      	adds	r2, r3, #1
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d482:	6978      	ldr	r0, [r7, #20]
 800d484:	f7ff fa58 	bl	800c938 <tcp_next_iss>
 800d488:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	693a      	ldr	r2, [r7, #16]
 800d48e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	693a      	ldr	r2, [r7, #16]
 800d4a0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d4a2:	4b35      	ldr	r3, [pc, #212]	; (800d578 <tcp_listen_input+0x1e0>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	1e5a      	subs	r2, r3, #1
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	691a      	ldr	r2, [r3, #16]
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	7a5b      	ldrb	r3, [r3, #9]
 800d4be:	f003 030c 	and.w	r3, r3, #12
 800d4c2:	b2da      	uxtb	r2, r3
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	7a1a      	ldrb	r2, [r3, #8]
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d4d0:	4b2e      	ldr	r3, [pc, #184]	; (800d58c <tcp_listen_input+0x1f4>)
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	60da      	str	r2, [r3, #12]
 800d4d8:	4a2c      	ldr	r2, [pc, #176]	; (800d58c <tcp_listen_input+0x1f4>)
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	f003 f8d1 	bl	8010684 <tcp_timer_needed>
 800d4e2:	4b2b      	ldr	r3, [pc, #172]	; (800d590 <tcp_listen_input+0x1f8>)
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d4e8:	6978      	ldr	r0, [r7, #20]
 800d4ea:	f001 fd8f 	bl	800f00c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d4ee:	4b23      	ldr	r3, [pc, #140]	; (800d57c <tcp_listen_input+0x1e4>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	89db      	ldrh	r3, [r3, #14]
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	3304      	adds	r3, #4
 800d510:	4618      	mov	r0, r3
 800d512:	f006 fe11 	bl	8014138 <ip4_route>
 800d516:	4601      	mov	r1, r0
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	3304      	adds	r3, #4
 800d51c:	461a      	mov	r2, r3
 800d51e:	4620      	mov	r0, r4
 800d520:	f7ff fa30 	bl	800c984 <tcp_eff_send_mss_netif>
 800d524:	4603      	mov	r3, r0
 800d526:	461a      	mov	r2, r3
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d52c:	2112      	movs	r1, #18
 800d52e:	6978      	ldr	r0, [r7, #20]
 800d530:	f002 f844 	bl	800f5bc <tcp_enqueue_flags>
 800d534:	4603      	mov	r3, r0
 800d536:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d004      	beq.n	800d54a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d540:	2100      	movs	r1, #0
 800d542:	6978      	ldr	r0, [r7, #20]
 800d544:	f7fe f97e 	bl	800b844 <tcp_abandon>
      return;
 800d548:	e006      	b.n	800d558 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d54a:	6978      	ldr	r0, [r7, #20]
 800d54c:	f002 f924 	bl	800f798 <tcp_output>
  return;
 800d550:	e001      	b.n	800d556 <tcp_listen_input+0x1be>
    return;
 800d552:	bf00      	nop
 800d554:	e000      	b.n	800d558 <tcp_listen_input+0x1c0>
  return;
 800d556:	bf00      	nop
}
 800d558:	371c      	adds	r7, #28
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd90      	pop	{r4, r7, pc}
 800d55e:	bf00      	nop
 800d560:	200086a4 	.word	0x200086a4
 800d564:	080178cc 	.word	0x080178cc
 800d568:	08017ac4 	.word	0x08017ac4
 800d56c:	08017918 	.word	0x08017918
 800d570:	2000869c 	.word	0x2000869c
 800d574:	200086a2 	.word	0x200086a2
 800d578:	20008698 	.word	0x20008698
 800d57c:	20008688 	.word	0x20008688
 800d580:	20005734 	.word	0x20005734
 800d584:	20005738 	.word	0x20005738
 800d588:	20005724 	.word	0x20005724
 800d58c:	2000866c 	.word	0x2000866c
 800d590:	20008674 	.word	0x20008674

0800d594 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af04      	add	r7, sp, #16
 800d59a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d59c:	4b2f      	ldr	r3, [pc, #188]	; (800d65c <tcp_timewait_input+0xc8>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	f003 0304 	and.w	r3, r3, #4
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d153      	bne.n	800d650 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d106      	bne.n	800d5bc <tcp_timewait_input+0x28>
 800d5ae:	4b2c      	ldr	r3, [pc, #176]	; (800d660 <tcp_timewait_input+0xcc>)
 800d5b0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d5b4:	492b      	ldr	r1, [pc, #172]	; (800d664 <tcp_timewait_input+0xd0>)
 800d5b6:	482c      	ldr	r0, [pc, #176]	; (800d668 <tcp_timewait_input+0xd4>)
 800d5b8:	f008 f812 	bl	80155e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d5bc:	4b27      	ldr	r3, [pc, #156]	; (800d65c <tcp_timewait_input+0xc8>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	f003 0302 	and.w	r3, r3, #2
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d02a      	beq.n	800d61e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d5c8:	4b28      	ldr	r3, [pc, #160]	; (800d66c <tcp_timewait_input+0xd8>)
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	db2d      	blt.n	800d632 <tcp_timewait_input+0x9e>
 800d5d6:	4b25      	ldr	r3, [pc, #148]	; (800d66c <tcp_timewait_input+0xd8>)
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d5e2:	440b      	add	r3, r1
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	dc23      	bgt.n	800d632 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5ea:	4b21      	ldr	r3, [pc, #132]	; (800d670 <tcp_timewait_input+0xdc>)
 800d5ec:	6819      	ldr	r1, [r3, #0]
 800d5ee:	4b21      	ldr	r3, [pc, #132]	; (800d674 <tcp_timewait_input+0xe0>)
 800d5f0:	881b      	ldrh	r3, [r3, #0]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	4b1d      	ldr	r3, [pc, #116]	; (800d66c <tcp_timewait_input+0xd8>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5fa:	4b1f      	ldr	r3, [pc, #124]	; (800d678 <tcp_timewait_input+0xe4>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5fe:	885b      	ldrh	r3, [r3, #2]
 800d600:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d602:	4a1d      	ldr	r2, [pc, #116]	; (800d678 <tcp_timewait_input+0xe4>)
 800d604:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d606:	8812      	ldrh	r2, [r2, #0]
 800d608:	b292      	uxth	r2, r2
 800d60a:	9202      	str	r2, [sp, #8]
 800d60c:	9301      	str	r3, [sp, #4]
 800d60e:	4b1b      	ldr	r3, [pc, #108]	; (800d67c <tcp_timewait_input+0xe8>)
 800d610:	9300      	str	r3, [sp, #0]
 800d612:	4b1b      	ldr	r3, [pc, #108]	; (800d680 <tcp_timewait_input+0xec>)
 800d614:	4602      	mov	r2, r0
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f002 fe72 	bl	8010300 <tcp_rst>
      return;
 800d61c:	e01b      	b.n	800d656 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d61e:	4b0f      	ldr	r3, [pc, #60]	; (800d65c <tcp_timewait_input+0xc8>)
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	d003      	beq.n	800d632 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d62a:	4b16      	ldr	r3, [pc, #88]	; (800d684 <tcp_timewait_input+0xf0>)
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d632:	4b10      	ldr	r3, [pc, #64]	; (800d674 <tcp_timewait_input+0xe0>)
 800d634:	881b      	ldrh	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00c      	beq.n	800d654 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	8b5b      	ldrh	r3, [r3, #26]
 800d63e:	f043 0302 	orr.w	r3, r3, #2
 800d642:	b29a      	uxth	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f002 f8a5 	bl	800f798 <tcp_output>
  }
  return;
 800d64e:	e001      	b.n	800d654 <tcp_timewait_input+0xc0>
    return;
 800d650:	bf00      	nop
 800d652:	e000      	b.n	800d656 <tcp_timewait_input+0xc2>
  return;
 800d654:	bf00      	nop
}
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	200086a4 	.word	0x200086a4
 800d660:	080178cc 	.word	0x080178cc
 800d664:	08017ae4 	.word	0x08017ae4
 800d668:	08017918 	.word	0x08017918
 800d66c:	20008698 	.word	0x20008698
 800d670:	2000869c 	.word	0x2000869c
 800d674:	200086a2 	.word	0x200086a2
 800d678:	20008688 	.word	0x20008688
 800d67c:	20005734 	.word	0x20005734
 800d680:	20005738 	.word	0x20005738
 800d684:	20008660 	.word	0x20008660

0800d688 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b08d      	sub	sp, #52	; 0x34
 800d68c:	af04      	add	r7, sp, #16
 800d68e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d690:	2300      	movs	r3, #0
 800d692:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <tcp_process+0x24>
 800d69e:	4b9d      	ldr	r3, [pc, #628]	; (800d914 <tcp_process+0x28c>)
 800d6a0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d6a4:	499c      	ldr	r1, [pc, #624]	; (800d918 <tcp_process+0x290>)
 800d6a6:	489d      	ldr	r0, [pc, #628]	; (800d91c <tcp_process+0x294>)
 800d6a8:	f007 ff9a 	bl	80155e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d6ac:	4b9c      	ldr	r3, [pc, #624]	; (800d920 <tcp_process+0x298>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	f003 0304 	and.w	r3, r3, #4
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d04e      	beq.n	800d756 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	7d1b      	ldrb	r3, [r3, #20]
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d108      	bne.n	800d6d2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6c4:	4b97      	ldr	r3, [pc, #604]	; (800d924 <tcp_process+0x29c>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d123      	bne.n	800d714 <tcp_process+0x8c>
        acceptable = 1;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	76fb      	strb	r3, [r7, #27]
 800d6d0:	e020      	b.n	800d714 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6d6:	4b94      	ldr	r3, [pc, #592]	; (800d928 <tcp_process+0x2a0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d102      	bne.n	800d6e4 <tcp_process+0x5c>
        acceptable = 1;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	76fb      	strb	r3, [r7, #27]
 800d6e2:	e017      	b.n	800d714 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d6e4:	4b90      	ldr	r3, [pc, #576]	; (800d928 <tcp_process+0x2a0>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	db10      	blt.n	800d714 <tcp_process+0x8c>
 800d6f2:	4b8d      	ldr	r3, [pc, #564]	; (800d928 <tcp_process+0x2a0>)
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6fe:	440b      	add	r3, r1
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	2b00      	cmp	r3, #0
 800d704:	dc06      	bgt.n	800d714 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	8b5b      	ldrh	r3, [r3, #26]
 800d70a:	f043 0302 	orr.w	r3, r3, #2
 800d70e:	b29a      	uxth	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d714:	7efb      	ldrb	r3, [r7, #27]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d01b      	beq.n	800d752 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	7d1b      	ldrb	r3, [r3, #20]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d106      	bne.n	800d730 <tcp_process+0xa8>
 800d722:	4b7c      	ldr	r3, [pc, #496]	; (800d914 <tcp_process+0x28c>)
 800d724:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d728:	4980      	ldr	r1, [pc, #512]	; (800d92c <tcp_process+0x2a4>)
 800d72a:	487c      	ldr	r0, [pc, #496]	; (800d91c <tcp_process+0x294>)
 800d72c:	f007 ff58 	bl	80155e0 <iprintf>
      recv_flags |= TF_RESET;
 800d730:	4b7f      	ldr	r3, [pc, #508]	; (800d930 <tcp_process+0x2a8>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	f043 0308 	orr.w	r3, r3, #8
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	4b7d      	ldr	r3, [pc, #500]	; (800d930 <tcp_process+0x2a8>)
 800d73c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	8b5b      	ldrh	r3, [r3, #26]
 800d742:	f023 0301 	bic.w	r3, r3, #1
 800d746:	b29a      	uxth	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d74c:	f06f 030d 	mvn.w	r3, #13
 800d750:	e37a      	b.n	800de48 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d752:	2300      	movs	r3, #0
 800d754:	e378      	b.n	800de48 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d756:	4b72      	ldr	r3, [pc, #456]	; (800d920 <tcp_process+0x298>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d010      	beq.n	800d784 <tcp_process+0xfc>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	7d1b      	ldrb	r3, [r3, #20]
 800d766:	2b02      	cmp	r3, #2
 800d768:	d00c      	beq.n	800d784 <tcp_process+0xfc>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	7d1b      	ldrb	r3, [r3, #20]
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d008      	beq.n	800d784 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	8b5b      	ldrh	r3, [r3, #26]
 800d776:	f043 0302 	orr.w	r3, r3, #2
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	e361      	b.n	800de48 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	8b5b      	ldrh	r3, [r3, #26]
 800d788:	f003 0310 	and.w	r3, r3, #16
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d103      	bne.n	800d798 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d790:	4b68      	ldr	r3, [pc, #416]	; (800d934 <tcp_process+0x2ac>)
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f001 fc2f 	bl	800f00c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7d1b      	ldrb	r3, [r3, #20]
 800d7b2:	3b02      	subs	r3, #2
 800d7b4:	2b07      	cmp	r3, #7
 800d7b6:	f200 8337 	bhi.w	800de28 <tcp_process+0x7a0>
 800d7ba:	a201      	add	r2, pc, #4	; (adr r2, 800d7c0 <tcp_process+0x138>)
 800d7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c0:	0800d7e1 	.word	0x0800d7e1
 800d7c4:	0800da11 	.word	0x0800da11
 800d7c8:	0800db89 	.word	0x0800db89
 800d7cc:	0800dbb3 	.word	0x0800dbb3
 800d7d0:	0800dcd7 	.word	0x0800dcd7
 800d7d4:	0800db89 	.word	0x0800db89
 800d7d8:	0800dd63 	.word	0x0800dd63
 800d7dc:	0800ddf3 	.word	0x0800ddf3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d7e0:	4b4f      	ldr	r3, [pc, #316]	; (800d920 <tcp_process+0x298>)
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	f003 0310 	and.w	r3, r3, #16
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 80e4 	beq.w	800d9b6 <tcp_process+0x32e>
 800d7ee:	4b4c      	ldr	r3, [pc, #304]	; (800d920 <tcp_process+0x298>)
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	f003 0302 	and.w	r3, r3, #2
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 80dd 	beq.w	800d9b6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d800:	1c5a      	adds	r2, r3, #1
 800d802:	4b48      	ldr	r3, [pc, #288]	; (800d924 <tcp_process+0x29c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	429a      	cmp	r2, r3
 800d808:	f040 80d5 	bne.w	800d9b6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d80c:	4b46      	ldr	r3, [pc, #280]	; (800d928 <tcp_process+0x2a0>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d81e:	4b41      	ldr	r3, [pc, #260]	; (800d924 <tcp_process+0x29c>)
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d826:	4b44      	ldr	r3, [pc, #272]	; (800d938 <tcp_process+0x2b0>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	89db      	ldrh	r3, [r3, #14]
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d840:	4b39      	ldr	r3, [pc, #228]	; (800d928 <tcp_process+0x2a0>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	1e5a      	subs	r2, r3, #1
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2204      	movs	r2, #4
 800d84e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	3304      	adds	r3, #4
 800d858:	4618      	mov	r0, r3
 800d85a:	f006 fc6d 	bl	8014138 <ip4_route>
 800d85e:	4601      	mov	r1, r0
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	3304      	adds	r3, #4
 800d864:	461a      	mov	r2, r3
 800d866:	4620      	mov	r0, r4
 800d868:	f7ff f88c 	bl	800c984 <tcp_eff_send_mss_netif>
 800d86c:	4603      	mov	r3, r0
 800d86e:	461a      	mov	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d878:	009a      	lsls	r2, r3, #2
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	f241 111c 	movw	r1, #4380	; 0x111c
 800d884:	428b      	cmp	r3, r1
 800d886:	bf38      	it	cc
 800d888:	460b      	movcc	r3, r1
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d204      	bcs.n	800d898 <tcp_process+0x210>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	b29b      	uxth	r3, r3
 800d896:	e00d      	b.n	800d8b4 <tcp_process+0x22c>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d89c:	005b      	lsls	r3, r3, #1
 800d89e:	f241 121c 	movw	r2, #4380	; 0x111c
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d904      	bls.n	800d8b0 <tcp_process+0x228>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	e001      	b.n	800d8b4 <tcp_process+0x22c>
 800d8b0:	f241 131c 	movw	r3, #4380	; 0x111c
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d106      	bne.n	800d8d2 <tcp_process+0x24a>
 800d8c4:	4b13      	ldr	r3, [pc, #76]	; (800d914 <tcp_process+0x28c>)
 800d8c6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d8ca:	491c      	ldr	r1, [pc, #112]	; (800d93c <tcp_process+0x2b4>)
 800d8cc:	4813      	ldr	r0, [pc, #76]	; (800d91c <tcp_process+0x294>)
 800d8ce:	f007 fe87 	bl	80155e0 <iprintf>
        --pcb->snd_queuelen;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d12a      	bne.n	800d944 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d106      	bne.n	800d908 <tcp_process+0x280>
 800d8fa:	4b06      	ldr	r3, [pc, #24]	; (800d914 <tcp_process+0x28c>)
 800d8fc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d900:	490f      	ldr	r1, [pc, #60]	; (800d940 <tcp_process+0x2b8>)
 800d902:	4806      	ldr	r0, [pc, #24]	; (800d91c <tcp_process+0x294>)
 800d904:	f007 fe6c 	bl	80155e0 <iprintf>
          pcb->unsent = rseg->next;
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	66da      	str	r2, [r3, #108]	; 0x6c
 800d910:	e01c      	b.n	800d94c <tcp_process+0x2c4>
 800d912:	bf00      	nop
 800d914:	080178cc 	.word	0x080178cc
 800d918:	08017b04 	.word	0x08017b04
 800d91c:	08017918 	.word	0x08017918
 800d920:	200086a4 	.word	0x200086a4
 800d924:	2000869c 	.word	0x2000869c
 800d928:	20008698 	.word	0x20008698
 800d92c:	08017b20 	.word	0x08017b20
 800d930:	200086a5 	.word	0x200086a5
 800d934:	20008660 	.word	0x20008660
 800d938:	20008688 	.word	0x20008688
 800d93c:	08017b40 	.word	0x08017b40
 800d940:	08017b58 	.word	0x08017b58
        } else {
          pcb->unacked = rseg->next;
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d94c:	69f8      	ldr	r0, [r7, #28]
 800d94e:	f7fe fd22 	bl	800c396 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d956:	2b00      	cmp	r3, #0
 800d958:	d104      	bne.n	800d964 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d960:	861a      	strh	r2, [r3, #48]	; 0x30
 800d962:	e006      	b.n	800d972 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00a      	beq.n	800d992 <tcp_process+0x30a>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	6910      	ldr	r0, [r2, #16]
 800d986:	2200      	movs	r2, #0
 800d988:	6879      	ldr	r1, [r7, #4]
 800d98a:	4798      	blx	r3
 800d98c:	4603      	mov	r3, r0
 800d98e:	76bb      	strb	r3, [r7, #26]
 800d990:	e001      	b.n	800d996 <tcp_process+0x30e>
 800d992:	2300      	movs	r3, #0
 800d994:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d996:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d99a:	f113 0f0d 	cmn.w	r3, #13
 800d99e:	d102      	bne.n	800d9a6 <tcp_process+0x31e>
          return ERR_ABRT;
 800d9a0:	f06f 030c 	mvn.w	r3, #12
 800d9a4:	e250      	b.n	800de48 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	8b5b      	ldrh	r3, [r3, #26]
 800d9aa:	f043 0302 	orr.w	r3, r3, #2
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d9b4:	e23a      	b.n	800de2c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d9b6:	4b98      	ldr	r3, [pc, #608]	; (800dc18 <tcp_process+0x590>)
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	f003 0310 	and.w	r3, r3, #16
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f000 8234 	beq.w	800de2c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9c4:	4b95      	ldr	r3, [pc, #596]	; (800dc1c <tcp_process+0x594>)
 800d9c6:	6819      	ldr	r1, [r3, #0]
 800d9c8:	4b95      	ldr	r3, [pc, #596]	; (800dc20 <tcp_process+0x598>)
 800d9ca:	881b      	ldrh	r3, [r3, #0]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	4b95      	ldr	r3, [pc, #596]	; (800dc24 <tcp_process+0x59c>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9d4:	4b94      	ldr	r3, [pc, #592]	; (800dc28 <tcp_process+0x5a0>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9d8:	885b      	ldrh	r3, [r3, #2]
 800d9da:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9dc:	4a92      	ldr	r2, [pc, #584]	; (800dc28 <tcp_process+0x5a0>)
 800d9de:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9e0:	8812      	ldrh	r2, [r2, #0]
 800d9e2:	b292      	uxth	r2, r2
 800d9e4:	9202      	str	r2, [sp, #8]
 800d9e6:	9301      	str	r3, [sp, #4]
 800d9e8:	4b90      	ldr	r3, [pc, #576]	; (800dc2c <tcp_process+0x5a4>)
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	4b90      	ldr	r3, [pc, #576]	; (800dc30 <tcp_process+0x5a8>)
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f002 fc85 	bl	8010300 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9fc:	2b05      	cmp	r3, #5
 800d9fe:	f200 8215 	bhi.w	800de2c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f002 fa4f 	bl	800feac <tcp_rexmit_rto>
      break;
 800da0e:	e20d      	b.n	800de2c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800da10:	4b81      	ldr	r3, [pc, #516]	; (800dc18 <tcp_process+0x590>)
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	f003 0310 	and.w	r3, r3, #16
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 80a1 	beq.w	800db60 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da1e:	4b7f      	ldr	r3, [pc, #508]	; (800dc1c <tcp_process+0x594>)
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	3b01      	subs	r3, #1
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	db7e      	blt.n	800db2c <tcp_process+0x4a4>
 800da2e:	4b7b      	ldr	r3, [pc, #492]	; (800dc1c <tcp_process+0x594>)
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	2b00      	cmp	r3, #0
 800da3a:	dc77      	bgt.n	800db2c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2204      	movs	r2, #4
 800da40:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da46:	2b00      	cmp	r3, #0
 800da48:	d102      	bne.n	800da50 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800da4a:	23fa      	movs	r3, #250	; 0xfa
 800da4c:	76bb      	strb	r3, [r7, #26]
 800da4e:	e01d      	b.n	800da8c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d106      	bne.n	800da68 <tcp_process+0x3e0>
 800da5a:	4b76      	ldr	r3, [pc, #472]	; (800dc34 <tcp_process+0x5ac>)
 800da5c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800da60:	4975      	ldr	r1, [pc, #468]	; (800dc38 <tcp_process+0x5b0>)
 800da62:	4876      	ldr	r0, [pc, #472]	; (800dc3c <tcp_process+0x5b4>)
 800da64:	f007 fdbc 	bl	80155e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00a      	beq.n	800da88 <tcp_process+0x400>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	6910      	ldr	r0, [r2, #16]
 800da7c:	2200      	movs	r2, #0
 800da7e:	6879      	ldr	r1, [r7, #4]
 800da80:	4798      	blx	r3
 800da82:	4603      	mov	r3, r0
 800da84:	76bb      	strb	r3, [r7, #26]
 800da86:	e001      	b.n	800da8c <tcp_process+0x404>
 800da88:	23f0      	movs	r3, #240	; 0xf0
 800da8a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800da8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00a      	beq.n	800daaa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800da94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800da98:	f113 0f0d 	cmn.w	r3, #13
 800da9c:	d002      	beq.n	800daa4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7fd ff8e 	bl	800b9c0 <tcp_abort>
            }
            return ERR_ABRT;
 800daa4:	f06f 030c 	mvn.w	r3, #12
 800daa8:	e1ce      	b.n	800de48 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fae0 	bl	800e070 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dab0:	4b63      	ldr	r3, [pc, #396]	; (800dc40 <tcp_process+0x5b8>)
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d005      	beq.n	800dac4 <tcp_process+0x43c>
            recv_acked--;
 800dab8:	4b61      	ldr	r3, [pc, #388]	; (800dc40 <tcp_process+0x5b8>)
 800daba:	881b      	ldrh	r3, [r3, #0]
 800dabc:	3b01      	subs	r3, #1
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	4b5f      	ldr	r3, [pc, #380]	; (800dc40 <tcp_process+0x5b8>)
 800dac2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dac8:	009a      	lsls	r2, r3, #2
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dace:	005b      	lsls	r3, r3, #1
 800dad0:	f241 111c 	movw	r1, #4380	; 0x111c
 800dad4:	428b      	cmp	r3, r1
 800dad6:	bf38      	it	cc
 800dad8:	460b      	movcc	r3, r1
 800dada:	429a      	cmp	r2, r3
 800dadc:	d204      	bcs.n	800dae8 <tcp_process+0x460>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	e00d      	b.n	800db04 <tcp_process+0x47c>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daec:	005b      	lsls	r3, r3, #1
 800daee:	f241 121c 	movw	r2, #4380	; 0x111c
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d904      	bls.n	800db00 <tcp_process+0x478>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	e001      	b.n	800db04 <tcp_process+0x47c>
 800db00:	f241 131c 	movw	r3, #4380	; 0x111c
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800db0a:	4b4e      	ldr	r3, [pc, #312]	; (800dc44 <tcp_process+0x5bc>)
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	f003 0320 	and.w	r3, r3, #32
 800db12:	2b00      	cmp	r3, #0
 800db14:	d037      	beq.n	800db86 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	8b5b      	ldrh	r3, [r3, #26]
 800db1a:	f043 0302 	orr.w	r3, r3, #2
 800db1e:	b29a      	uxth	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2207      	movs	r2, #7
 800db28:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800db2a:	e02c      	b.n	800db86 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db2c:	4b3b      	ldr	r3, [pc, #236]	; (800dc1c <tcp_process+0x594>)
 800db2e:	6819      	ldr	r1, [r3, #0]
 800db30:	4b3b      	ldr	r3, [pc, #236]	; (800dc20 <tcp_process+0x598>)
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	4b3b      	ldr	r3, [pc, #236]	; (800dc24 <tcp_process+0x59c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db3c:	4b3a      	ldr	r3, [pc, #232]	; (800dc28 <tcp_process+0x5a0>)
 800db3e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db40:	885b      	ldrh	r3, [r3, #2]
 800db42:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db44:	4a38      	ldr	r2, [pc, #224]	; (800dc28 <tcp_process+0x5a0>)
 800db46:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db48:	8812      	ldrh	r2, [r2, #0]
 800db4a:	b292      	uxth	r2, r2
 800db4c:	9202      	str	r2, [sp, #8]
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	4b36      	ldr	r3, [pc, #216]	; (800dc2c <tcp_process+0x5a4>)
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	4b36      	ldr	r3, [pc, #216]	; (800dc30 <tcp_process+0x5a8>)
 800db56:	4602      	mov	r2, r0
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f002 fbd1 	bl	8010300 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800db5e:	e167      	b.n	800de30 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800db60:	4b2d      	ldr	r3, [pc, #180]	; (800dc18 <tcp_process+0x590>)
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	f003 0302 	and.w	r3, r3, #2
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f000 8161 	beq.w	800de30 <tcp_process+0x7a8>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db72:	1e5a      	subs	r2, r3, #1
 800db74:	4b2b      	ldr	r3, [pc, #172]	; (800dc24 <tcp_process+0x59c>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	429a      	cmp	r2, r3
 800db7a:	f040 8159 	bne.w	800de30 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f002 f9b6 	bl	800fef0 <tcp_rexmit>
      break;
 800db84:	e154      	b.n	800de30 <tcp_process+0x7a8>
 800db86:	e153      	b.n	800de30 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fa71 	bl	800e070 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800db8e:	4b2d      	ldr	r3, [pc, #180]	; (800dc44 <tcp_process+0x5bc>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	f003 0320 	and.w	r3, r3, #32
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 814c 	beq.w	800de34 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	8b5b      	ldrh	r3, [r3, #26]
 800dba0:	f043 0302 	orr.w	r3, r3, #2
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2207      	movs	r2, #7
 800dbae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dbb0:	e140      	b.n	800de34 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fa5c 	bl	800e070 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dbb8:	4b22      	ldr	r3, [pc, #136]	; (800dc44 <tcp_process+0x5bc>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	f003 0320 	and.w	r3, r3, #32
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d071      	beq.n	800dca8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dbc4:	4b14      	ldr	r3, [pc, #80]	; (800dc18 <tcp_process+0x590>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	f003 0310 	and.w	r3, r3, #16
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d060      	beq.n	800dc92 <tcp_process+0x60a>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbd4:	4b11      	ldr	r3, [pc, #68]	; (800dc1c <tcp_process+0x594>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d15a      	bne.n	800dc92 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d156      	bne.n	800dc92 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	8b5b      	ldrh	r3, [r3, #26]
 800dbe8:	f043 0302 	orr.w	r3, r3, #2
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f7fe fdbc 	bl	800c770 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dbf8:	4b13      	ldr	r3, [pc, #76]	; (800dc48 <tcp_process+0x5c0>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d105      	bne.n	800dc0e <tcp_process+0x586>
 800dc02:	4b11      	ldr	r3, [pc, #68]	; (800dc48 <tcp_process+0x5c0>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	4a0f      	ldr	r2, [pc, #60]	; (800dc48 <tcp_process+0x5c0>)
 800dc0a:	6013      	str	r3, [r2, #0]
 800dc0c:	e02e      	b.n	800dc6c <tcp_process+0x5e4>
 800dc0e:	4b0e      	ldr	r3, [pc, #56]	; (800dc48 <tcp_process+0x5c0>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	617b      	str	r3, [r7, #20]
 800dc14:	e027      	b.n	800dc66 <tcp_process+0x5de>
 800dc16:	bf00      	nop
 800dc18:	200086a4 	.word	0x200086a4
 800dc1c:	2000869c 	.word	0x2000869c
 800dc20:	200086a2 	.word	0x200086a2
 800dc24:	20008698 	.word	0x20008698
 800dc28:	20008688 	.word	0x20008688
 800dc2c:	20005734 	.word	0x20005734
 800dc30:	20005738 	.word	0x20005738
 800dc34:	080178cc 	.word	0x080178cc
 800dc38:	08017b6c 	.word	0x08017b6c
 800dc3c:	08017918 	.word	0x08017918
 800dc40:	200086a0 	.word	0x200086a0
 800dc44:	200086a5 	.word	0x200086a5
 800dc48:	2000866c 	.word	0x2000866c
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d104      	bne.n	800dc60 <tcp_process+0x5d8>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	68da      	ldr	r2, [r3, #12]
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	60da      	str	r2, [r3, #12]
 800dc5e:	e005      	b.n	800dc6c <tcp_process+0x5e4>
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	617b      	str	r3, [r7, #20]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1ef      	bne.n	800dc4c <tcp_process+0x5c4>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	60da      	str	r2, [r3, #12]
 800dc72:	4b77      	ldr	r3, [pc, #476]	; (800de50 <tcp_process+0x7c8>)
 800dc74:	2201      	movs	r2, #1
 800dc76:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	220a      	movs	r2, #10
 800dc7c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dc7e:	4b75      	ldr	r3, [pc, #468]	; (800de54 <tcp_process+0x7cc>)
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	60da      	str	r2, [r3, #12]
 800dc86:	4a73      	ldr	r2, [pc, #460]	; (800de54 <tcp_process+0x7cc>)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6013      	str	r3, [r2, #0]
 800dc8c:	f002 fcfa 	bl	8010684 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dc90:	e0d2      	b.n	800de38 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	8b5b      	ldrh	r3, [r3, #26]
 800dc96:	f043 0302 	orr.w	r3, r3, #2
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2208      	movs	r2, #8
 800dca4:	751a      	strb	r2, [r3, #20]
      break;
 800dca6:	e0c7      	b.n	800de38 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dca8:	4b6b      	ldr	r3, [pc, #428]	; (800de58 <tcp_process+0x7d0>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	f003 0310 	and.w	r3, r3, #16
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f000 80c1 	beq.w	800de38 <tcp_process+0x7b0>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcba:	4b68      	ldr	r3, [pc, #416]	; (800de5c <tcp_process+0x7d4>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	f040 80ba 	bne.w	800de38 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f040 80b5 	bne.w	800de38 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2206      	movs	r2, #6
 800dcd2:	751a      	strb	r2, [r3, #20]
      break;
 800dcd4:	e0b0      	b.n	800de38 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f9ca 	bl	800e070 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dcdc:	4b60      	ldr	r3, [pc, #384]	; (800de60 <tcp_process+0x7d8>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	f003 0320 	and.w	r3, r3, #32
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f000 80a9 	beq.w	800de3c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	8b5b      	ldrh	r3, [r3, #26]
 800dcee:	f043 0302 	orr.w	r3, r3, #2
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7fe fd39 	bl	800c770 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dcfe:	4b59      	ldr	r3, [pc, #356]	; (800de64 <tcp_process+0x7dc>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d105      	bne.n	800dd14 <tcp_process+0x68c>
 800dd08:	4b56      	ldr	r3, [pc, #344]	; (800de64 <tcp_process+0x7dc>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	4a55      	ldr	r2, [pc, #340]	; (800de64 <tcp_process+0x7dc>)
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	e013      	b.n	800dd3c <tcp_process+0x6b4>
 800dd14:	4b53      	ldr	r3, [pc, #332]	; (800de64 <tcp_process+0x7dc>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	e00c      	b.n	800dd36 <tcp_process+0x6ae>
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d104      	bne.n	800dd30 <tcp_process+0x6a8>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68da      	ldr	r2, [r3, #12]
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	60da      	str	r2, [r3, #12]
 800dd2e:	e005      	b.n	800dd3c <tcp_process+0x6b4>
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	613b      	str	r3, [r7, #16]
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1ef      	bne.n	800dd1c <tcp_process+0x694>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	60da      	str	r2, [r3, #12]
 800dd42:	4b43      	ldr	r3, [pc, #268]	; (800de50 <tcp_process+0x7c8>)
 800dd44:	2201      	movs	r2, #1
 800dd46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	220a      	movs	r2, #10
 800dd4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dd4e:	4b41      	ldr	r3, [pc, #260]	; (800de54 <tcp_process+0x7cc>)
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	60da      	str	r2, [r3, #12]
 800dd56:	4a3f      	ldr	r2, [pc, #252]	; (800de54 <tcp_process+0x7cc>)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6013      	str	r3, [r2, #0]
 800dd5c:	f002 fc92 	bl	8010684 <tcp_timer_needed>
      }
      break;
 800dd60:	e06c      	b.n	800de3c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f984 	bl	800e070 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dd68:	4b3b      	ldr	r3, [pc, #236]	; (800de58 <tcp_process+0x7d0>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	f003 0310 	and.w	r3, r3, #16
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d065      	beq.n	800de40 <tcp_process+0x7b8>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd78:	4b38      	ldr	r3, [pc, #224]	; (800de5c <tcp_process+0x7d4>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d15f      	bne.n	800de40 <tcp_process+0x7b8>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d15b      	bne.n	800de40 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7fe fcf1 	bl	800c770 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dd8e:	4b35      	ldr	r3, [pc, #212]	; (800de64 <tcp_process+0x7dc>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d105      	bne.n	800dda4 <tcp_process+0x71c>
 800dd98:	4b32      	ldr	r3, [pc, #200]	; (800de64 <tcp_process+0x7dc>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	4a31      	ldr	r2, [pc, #196]	; (800de64 <tcp_process+0x7dc>)
 800dda0:	6013      	str	r3, [r2, #0]
 800dda2:	e013      	b.n	800ddcc <tcp_process+0x744>
 800dda4:	4b2f      	ldr	r3, [pc, #188]	; (800de64 <tcp_process+0x7dc>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	60fb      	str	r3, [r7, #12]
 800ddaa:	e00c      	b.n	800ddc6 <tcp_process+0x73e>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d104      	bne.n	800ddc0 <tcp_process+0x738>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68da      	ldr	r2, [r3, #12]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	60da      	str	r2, [r3, #12]
 800ddbe:	e005      	b.n	800ddcc <tcp_process+0x744>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	60fb      	str	r3, [r7, #12]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1ef      	bne.n	800ddac <tcp_process+0x724>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	60da      	str	r2, [r3, #12]
 800ddd2:	4b1f      	ldr	r3, [pc, #124]	; (800de50 <tcp_process+0x7c8>)
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	220a      	movs	r2, #10
 800dddc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ddde:	4b1d      	ldr	r3, [pc, #116]	; (800de54 <tcp_process+0x7cc>)
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	60da      	str	r2, [r3, #12]
 800dde6:	4a1b      	ldr	r2, [pc, #108]	; (800de54 <tcp_process+0x7cc>)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6013      	str	r3, [r2, #0]
 800ddec:	f002 fc4a 	bl	8010684 <tcp_timer_needed>
      }
      break;
 800ddf0:	e026      	b.n	800de40 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f93c 	bl	800e070 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ddf8:	4b17      	ldr	r3, [pc, #92]	; (800de58 <tcp_process+0x7d0>)
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	f003 0310 	and.w	r3, r3, #16
 800de00:	2b00      	cmp	r3, #0
 800de02:	d01f      	beq.n	800de44 <tcp_process+0x7bc>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de08:	4b14      	ldr	r3, [pc, #80]	; (800de5c <tcp_process+0x7d4>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d119      	bne.n	800de44 <tcp_process+0x7bc>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de14:	2b00      	cmp	r3, #0
 800de16:	d115      	bne.n	800de44 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800de18:	4b11      	ldr	r3, [pc, #68]	; (800de60 <tcp_process+0x7d8>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	f043 0310 	orr.w	r3, r3, #16
 800de20:	b2da      	uxtb	r2, r3
 800de22:	4b0f      	ldr	r3, [pc, #60]	; (800de60 <tcp_process+0x7d8>)
 800de24:	701a      	strb	r2, [r3, #0]
      }
      break;
 800de26:	e00d      	b.n	800de44 <tcp_process+0x7bc>
    default:
      break;
 800de28:	bf00      	nop
 800de2a:	e00c      	b.n	800de46 <tcp_process+0x7be>
      break;
 800de2c:	bf00      	nop
 800de2e:	e00a      	b.n	800de46 <tcp_process+0x7be>
      break;
 800de30:	bf00      	nop
 800de32:	e008      	b.n	800de46 <tcp_process+0x7be>
      break;
 800de34:	bf00      	nop
 800de36:	e006      	b.n	800de46 <tcp_process+0x7be>
      break;
 800de38:	bf00      	nop
 800de3a:	e004      	b.n	800de46 <tcp_process+0x7be>
      break;
 800de3c:	bf00      	nop
 800de3e:	e002      	b.n	800de46 <tcp_process+0x7be>
      break;
 800de40:	bf00      	nop
 800de42:	e000      	b.n	800de46 <tcp_process+0x7be>
      break;
 800de44:	bf00      	nop
  }
  return ERR_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3724      	adds	r7, #36	; 0x24
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd90      	pop	{r4, r7, pc}
 800de50:	20008674 	.word	0x20008674
 800de54:	20008670 	.word	0x20008670
 800de58:	200086a4 	.word	0x200086a4
 800de5c:	2000869c 	.word	0x2000869c
 800de60:	200086a5 	.word	0x200086a5
 800de64:	2000866c 	.word	0x2000866c

0800de68 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800de68:	b590      	push	{r4, r7, lr}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d106      	bne.n	800de86 <tcp_oos_insert_segment+0x1e>
 800de78:	4b3b      	ldr	r3, [pc, #236]	; (800df68 <tcp_oos_insert_segment+0x100>)
 800de7a:	f240 421f 	movw	r2, #1055	; 0x41f
 800de7e:	493b      	ldr	r1, [pc, #236]	; (800df6c <tcp_oos_insert_segment+0x104>)
 800de80:	483b      	ldr	r0, [pc, #236]	; (800df70 <tcp_oos_insert_segment+0x108>)
 800de82:	f007 fbad 	bl	80155e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	899b      	ldrh	r3, [r3, #12]
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fb fbfc 	bl	800968c <lwip_htons>
 800de94:	4603      	mov	r3, r0
 800de96:	b2db      	uxtb	r3, r3
 800de98:	f003 0301 	and.w	r3, r3, #1
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d028      	beq.n	800def2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800dea0:	6838      	ldr	r0, [r7, #0]
 800dea2:	f7fe fa63 	bl	800c36c <tcp_segs_free>
    next = NULL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	603b      	str	r3, [r7, #0]
 800deaa:	e056      	b.n	800df5a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	899b      	ldrh	r3, [r3, #12]
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fb fbe9 	bl	800968c <lwip_htons>
 800deba:	4603      	mov	r3, r0
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f003 0301 	and.w	r3, r3, #1
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00d      	beq.n	800dee2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	899b      	ldrh	r3, [r3, #12]
 800decc:	b29c      	uxth	r4, r3
 800dece:	2001      	movs	r0, #1
 800ded0:	f7fb fbdc 	bl	800968c <lwip_htons>
 800ded4:	4603      	mov	r3, r0
 800ded6:	461a      	mov	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	4322      	orrs	r2, r4
 800dede:	b292      	uxth	r2, r2
 800dee0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f7fe fa52 	bl	800c396 <tcp_seg_free>
    while (next &&
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00e      	beq.n	800df16 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	891b      	ldrh	r3, [r3, #8]
 800defc:	461a      	mov	r2, r3
 800defe:	4b1d      	ldr	r3, [pc, #116]	; (800df74 <tcp_oos_insert_segment+0x10c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	441a      	add	r2, r3
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	8909      	ldrh	r1, [r1, #8]
 800df0e:	440b      	add	r3, r1
 800df10:	1ad3      	subs	r3, r2, r3
    while (next &&
 800df12:	2b00      	cmp	r3, #0
 800df14:	daca      	bge.n	800deac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d01e      	beq.n	800df5a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	891b      	ldrh	r3, [r3, #8]
 800df20:	461a      	mov	r2, r3
 800df22:	4b14      	ldr	r3, [pc, #80]	; (800df74 <tcp_oos_insert_segment+0x10c>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	441a      	add	r2, r3
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800df30:	2b00      	cmp	r3, #0
 800df32:	dd12      	ble.n	800df5a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	4b0d      	ldr	r3, [pc, #52]	; (800df74 <tcp_oos_insert_segment+0x10c>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	b29b      	uxth	r3, r3
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	b29a      	uxth	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	891b      	ldrh	r3, [r3, #8]
 800df52:	4619      	mov	r1, r3
 800df54:	4610      	mov	r0, r2
 800df56:	f7fc fe15 	bl	800ab84 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	683a      	ldr	r2, [r7, #0]
 800df5e:	601a      	str	r2, [r3, #0]
}
 800df60:	bf00      	nop
 800df62:	3714      	adds	r7, #20
 800df64:	46bd      	mov	sp, r7
 800df66:	bd90      	pop	{r4, r7, pc}
 800df68:	080178cc 	.word	0x080178cc
 800df6c:	08017b8c 	.word	0x08017b8c
 800df70:	08017918 	.word	0x08017918
 800df74:	20008698 	.word	0x20008698

0800df78 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800df78:	b5b0      	push	{r4, r5, r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800df86:	e03e      	b.n	800e006 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	4618      	mov	r0, r3
 800df98:	f7fd f802 	bl	800afa0 <pbuf_clen>
 800df9c:	4603      	mov	r3, r0
 800df9e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dfa6:	8a7a      	ldrh	r2, [r7, #18]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d906      	bls.n	800dfba <tcp_free_acked_segments+0x42>
 800dfac:	4b2a      	ldr	r3, [pc, #168]	; (800e058 <tcp_free_acked_segments+0xe0>)
 800dfae:	f240 4257 	movw	r2, #1111	; 0x457
 800dfb2:	492a      	ldr	r1, [pc, #168]	; (800e05c <tcp_free_acked_segments+0xe4>)
 800dfb4:	482a      	ldr	r0, [pc, #168]	; (800e060 <tcp_free_acked_segments+0xe8>)
 800dfb6:	f007 fb13 	bl	80155e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dfc0:	8a7b      	ldrh	r3, [r7, #18]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	891a      	ldrh	r2, [r3, #8]
 800dfd0:	4b24      	ldr	r3, [pc, #144]	; (800e064 <tcp_free_acked_segments+0xec>)
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	4b22      	ldr	r3, [pc, #136]	; (800e064 <tcp_free_acked_segments+0xec>)
 800dfda:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dfdc:	6978      	ldr	r0, [r7, #20]
 800dfde:	f7fe f9da 	bl	800c396 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00c      	beq.n	800e006 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d109      	bne.n	800e006 <tcp_free_acked_segments+0x8e>
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d106      	bne.n	800e006 <tcp_free_acked_segments+0x8e>
 800dff8:	4b17      	ldr	r3, [pc, #92]	; (800e058 <tcp_free_acked_segments+0xe0>)
 800dffa:	f240 4261 	movw	r2, #1121	; 0x461
 800dffe:	491a      	ldr	r1, [pc, #104]	; (800e068 <tcp_free_acked_segments+0xf0>)
 800e000:	4817      	ldr	r0, [pc, #92]	; (800e060 <tcp_free_acked_segments+0xe8>)
 800e002:	f007 faed 	bl	80155e0 <iprintf>
  while (seg_list != NULL &&
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d020      	beq.n	800e04e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	4618      	mov	r0, r3
 800e014:	f7fb fb4f 	bl	80096b6 <lwip_htonl>
 800e018:	4604      	mov	r4, r0
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	891b      	ldrh	r3, [r3, #8]
 800e01e:	461d      	mov	r5, r3
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	899b      	ldrh	r3, [r3, #12]
 800e026:	b29b      	uxth	r3, r3
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fb fb2f 	bl	800968c <lwip_htons>
 800e02e:	4603      	mov	r3, r0
 800e030:	b2db      	uxtb	r3, r3
 800e032:	f003 0303 	and.w	r3, r3, #3
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <tcp_free_acked_segments+0xc6>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e000      	b.n	800e040 <tcp_free_acked_segments+0xc8>
 800e03e:	2300      	movs	r3, #0
 800e040:	442b      	add	r3, r5
 800e042:	18e2      	adds	r2, r4, r3
 800e044:	4b09      	ldr	r3, [pc, #36]	; (800e06c <tcp_free_acked_segments+0xf4>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	dd9c      	ble.n	800df88 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e04e:	68bb      	ldr	r3, [r7, #8]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bdb0      	pop	{r4, r5, r7, pc}
 800e058:	080178cc 	.word	0x080178cc
 800e05c:	08017bb4 	.word	0x08017bb4
 800e060:	08017918 	.word	0x08017918
 800e064:	200086a0 	.word	0x200086a0
 800e068:	08017bdc 	.word	0x08017bdc
 800e06c:	2000869c 	.word	0x2000869c

0800e070 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e070:	b5b0      	push	{r4, r5, r7, lr}
 800e072:	b094      	sub	sp, #80	; 0x50
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e078:	2300      	movs	r3, #0
 800e07a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <tcp_receive+0x20>
 800e082:	4b91      	ldr	r3, [pc, #580]	; (800e2c8 <tcp_receive+0x258>)
 800e084:	f240 427b 	movw	r2, #1147	; 0x47b
 800e088:	4990      	ldr	r1, [pc, #576]	; (800e2cc <tcp_receive+0x25c>)
 800e08a:	4891      	ldr	r0, [pc, #580]	; (800e2d0 <tcp_receive+0x260>)
 800e08c:	f007 faa8 	bl	80155e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	7d1b      	ldrb	r3, [r3, #20]
 800e094:	2b03      	cmp	r3, #3
 800e096:	d806      	bhi.n	800e0a6 <tcp_receive+0x36>
 800e098:	4b8b      	ldr	r3, [pc, #556]	; (800e2c8 <tcp_receive+0x258>)
 800e09a:	f240 427c 	movw	r2, #1148	; 0x47c
 800e09e:	498d      	ldr	r1, [pc, #564]	; (800e2d4 <tcp_receive+0x264>)
 800e0a0:	488b      	ldr	r0, [pc, #556]	; (800e2d0 <tcp_receive+0x260>)
 800e0a2:	f007 fa9d 	bl	80155e0 <iprintf>

  if (flags & TCP_ACK) {
 800e0a6:	4b8c      	ldr	r3, [pc, #560]	; (800e2d8 <tcp_receive+0x268>)
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	f003 0310 	and.w	r3, r3, #16
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 8264 	beq.w	800e57c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0c0:	4413      	add	r3, r2
 800e0c2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0c8:	4b84      	ldr	r3, [pc, #528]	; (800e2dc <tcp_receive+0x26c>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	db1b      	blt.n	800e10a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0d6:	4b81      	ldr	r3, [pc, #516]	; (800e2dc <tcp_receive+0x26c>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d106      	bne.n	800e0ec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e0e2:	4b7f      	ldr	r3, [pc, #508]	; (800e2e0 <tcp_receive+0x270>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	db0e      	blt.n	800e10a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e0f0:	4b7b      	ldr	r3, [pc, #492]	; (800e2e0 <tcp_receive+0x270>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d125      	bne.n	800e144 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e0f8:	4b7a      	ldr	r3, [pc, #488]	; (800e2e4 <tcp_receive+0x274>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	89db      	ldrh	r3, [r3, #14]
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e106:	429a      	cmp	r2, r3
 800e108:	d91c      	bls.n	800e144 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e10a:	4b76      	ldr	r3, [pc, #472]	; (800e2e4 <tcp_receive+0x274>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	89db      	ldrh	r3, [r3, #14]
 800e110:	b29a      	uxth	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e124:	429a      	cmp	r2, r3
 800e126:	d205      	bcs.n	800e134 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e134:	4b69      	ldr	r3, [pc, #420]	; (800e2dc <tcp_receive+0x26c>)
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e13c:	4b68      	ldr	r3, [pc, #416]	; (800e2e0 <tcp_receive+0x270>)
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e144:	4b66      	ldr	r3, [pc, #408]	; (800e2e0 <tcp_receive+0x270>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	dc58      	bgt.n	800e204 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e152:	4b65      	ldr	r3, [pc, #404]	; (800e2e8 <tcp_receive+0x278>)
 800e154:	881b      	ldrh	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d14b      	bne.n	800e1f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e164:	4413      	add	r3, r2
 800e166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e168:	429a      	cmp	r2, r3
 800e16a:	d142      	bne.n	800e1f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e172:	2b00      	cmp	r3, #0
 800e174:	db3d      	blt.n	800e1f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e17a:	4b59      	ldr	r3, [pc, #356]	; (800e2e0 <tcp_receive+0x270>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d137      	bne.n	800e1f2 <tcp_receive+0x182>
              found_dupack = 1;
 800e182:	2301      	movs	r3, #1
 800e184:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e18c:	2bff      	cmp	r3, #255	; 0xff
 800e18e:	d007      	beq.n	800e1a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e196:	3301      	adds	r3, #1
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e1a6:	2b03      	cmp	r3, #3
 800e1a8:	d91b      	bls.n	800e1e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1b4:	4413      	add	r3, r2
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d30a      	bcc.n	800e1d8 <tcp_receive+0x168>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1cc:	4413      	add	r3, r2
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e1d6:	e004      	b.n	800e1e2 <tcp_receive+0x172>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d902      	bls.n	800e1f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f001 feeb 	bl	800ffc8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e1f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f040 8161 	bne.w	800e4bc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e202:	e15b      	b.n	800e4bc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e204:	4b36      	ldr	r3, [pc, #216]	; (800e2e0 <tcp_receive+0x270>)
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e20c:	1ad3      	subs	r3, r2, r3
 800e20e:	3b01      	subs	r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	f2c0 814e 	blt.w	800e4b2 <tcp_receive+0x442>
 800e216:	4b32      	ldr	r3, [pc, #200]	; (800e2e0 <tcp_receive+0x270>)
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	2b00      	cmp	r3, #0
 800e222:	f300 8146 	bgt.w	800e4b2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	8b5b      	ldrh	r3, [r3, #26]
 800e22a:	f003 0304 	and.w	r3, r3, #4
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d010      	beq.n	800e254 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	8b5b      	ldrh	r3, [r3, #26]
 800e236:	f023 0304 	bic.w	r3, r3, #4
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e262:	10db      	asrs	r3, r3, #3
 800e264:	b21b      	sxth	r3, r3
 800e266:	b29a      	uxth	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e26e:	b29b      	uxth	r3, r3
 800e270:	4413      	add	r3, r2
 800e272:	b29b      	uxth	r3, r3
 800e274:	b21a      	sxth	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e27c:	4b18      	ldr	r3, [pc, #96]	; (800e2e0 <tcp_receive+0x270>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	b29a      	uxth	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e286:	b29b      	uxth	r3, r3
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e294:	4b12      	ldr	r3, [pc, #72]	; (800e2e0 <tcp_receive+0x270>)
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	7d1b      	ldrb	r3, [r3, #20]
 800e2a0:	2b03      	cmp	r3, #3
 800e2a2:	f240 8097 	bls.w	800e3d4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d245      	bcs.n	800e342 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	8b5b      	ldrh	r3, [r3, #26]
 800e2ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d014      	beq.n	800e2ec <tcp_receive+0x27c>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e013      	b.n	800e2ee <tcp_receive+0x27e>
 800e2c6:	bf00      	nop
 800e2c8:	080178cc 	.word	0x080178cc
 800e2cc:	08017bfc 	.word	0x08017bfc
 800e2d0:	08017918 	.word	0x08017918
 800e2d4:	08017c18 	.word	0x08017c18
 800e2d8:	200086a4 	.word	0x200086a4
 800e2dc:	20008698 	.word	0x20008698
 800e2e0:	2000869c 	.word	0x2000869c
 800e2e4:	20008688 	.word	0x20008688
 800e2e8:	200086a2 	.word	0x200086a2
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e2f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2fc:	fb12 f303 	smulbb	r3, r2, r3
 800e300:	b29b      	uxth	r3, r3
 800e302:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e304:	4293      	cmp	r3, r2
 800e306:	bf28      	it	cs
 800e308:	4613      	movcs	r3, r2
 800e30a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e312:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e314:	4413      	add	r3, r2
 800e316:	b29a      	uxth	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e31e:	429a      	cmp	r2, r3
 800e320:	d309      	bcc.n	800e336 <tcp_receive+0x2c6>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e328:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e32a:	4413      	add	r3, r2
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e334:	e04e      	b.n	800e3d4 <tcp_receive+0x364>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e33c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e340:	e048      	b.n	800e3d4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e348:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e34a:	4413      	add	r3, r2
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e354:	429a      	cmp	r2, r3
 800e356:	d309      	bcc.n	800e36c <tcp_receive+0x2fc>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e35e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e360:	4413      	add	r3, r2
 800e362:	b29a      	uxth	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e36a:	e004      	b.n	800e376 <tcp_receive+0x306>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e372:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e382:	429a      	cmp	r2, r3
 800e384:	d326      	bcc.n	800e3d4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	b29a      	uxth	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3a6:	4413      	add	r3, r2
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d30a      	bcc.n	800e3ca <tcp_receive+0x35a>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3be:	4413      	add	r3, r2
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e3c8:	e004      	b.n	800e3d4 <tcp_receive+0x364>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3dc:	4a98      	ldr	r2, [pc, #608]	; (800e640 <tcp_receive+0x5d0>)
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7ff fdca 	bl	800df78 <tcp_free_acked_segments>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3f2:	4a94      	ldr	r2, [pc, #592]	; (800e644 <tcp_receive+0x5d4>)
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f7ff fdbf 	bl	800df78 <tcp_free_acked_segments>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e404:	2b00      	cmp	r3, #0
 800e406:	d104      	bne.n	800e412 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e40e:	861a      	strh	r2, [r3, #48]	; 0x30
 800e410:	e002      	b.n	800e418 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e422:	2b00      	cmp	r3, #0
 800e424:	d103      	bne.n	800e42e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e434:	4b84      	ldr	r3, [pc, #528]	; (800e648 <tcp_receive+0x5d8>)
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	4413      	add	r3, r2
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8b5b      	ldrh	r3, [r3, #26]
 800e446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d035      	beq.n	800e4ba <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e452:	2b00      	cmp	r3, #0
 800e454:	d118      	bne.n	800e488 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00c      	beq.n	800e478 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fb f923 	bl	80096b6 <lwip_htonl>
 800e470:	4603      	mov	r3, r0
 800e472:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e474:	2b00      	cmp	r3, #0
 800e476:	dc20      	bgt.n	800e4ba <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	8b5b      	ldrh	r3, [r3, #26]
 800e47c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e480:	b29a      	uxth	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e486:	e018      	b.n	800e4ba <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	4618      	mov	r0, r3
 800e496:	f7fb f90e 	bl	80096b6 <lwip_htonl>
 800e49a:	4603      	mov	r3, r0
 800e49c:	1ae3      	subs	r3, r4, r3
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	dc0b      	bgt.n	800e4ba <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	8b5b      	ldrh	r3, [r3, #26]
 800e4a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4b0:	e003      	b.n	800e4ba <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f001 ff76 	bl	80103a4 <tcp_send_empty_ack>
 800e4b8:	e000      	b.n	800e4bc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4ba:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d05b      	beq.n	800e57c <tcp_receive+0x50c>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4c8:	4b60      	ldr	r3, [pc, #384]	; (800e64c <tcp_receive+0x5dc>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	da54      	bge.n	800e57c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e4d2:	4b5f      	ldr	r3, [pc, #380]	; (800e650 <tcp_receive+0x5e0>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e4e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e4f0:	10db      	asrs	r3, r3, #3
 800e4f2:	b21b      	sxth	r3, r3
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e504:	b29a      	uxth	r2, r3
 800e506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e50a:	4413      	add	r3, r2
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	b21a      	sxth	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e514:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e518:	2b00      	cmp	r3, #0
 800e51a:	da05      	bge.n	800e528 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e51c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e520:	425b      	negs	r3, r3
 800e522:	b29b      	uxth	r3, r3
 800e524:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e528:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e532:	109b      	asrs	r3, r3, #2
 800e534:	b21b      	sxth	r3, r3
 800e536:	b29b      	uxth	r3, r3
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e546:	b29a      	uxth	r2, r3
 800e548:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e54c:	4413      	add	r3, r2
 800e54e:	b29b      	uxth	r3, r3
 800e550:	b21a      	sxth	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e55c:	10db      	asrs	r3, r3, #3
 800e55e:	b21b      	sxth	r3, r3
 800e560:	b29a      	uxth	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e568:	b29b      	uxth	r3, r3
 800e56a:	4413      	add	r3, r2
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	b21a      	sxth	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e57c:	4b35      	ldr	r3, [pc, #212]	; (800e654 <tcp_receive+0x5e4>)
 800e57e:	881b      	ldrh	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	f000 84e2 	beq.w	800ef4a <tcp_receive+0xeda>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	7d1b      	ldrb	r3, [r3, #20]
 800e58a:	2b06      	cmp	r3, #6
 800e58c:	f200 84dd 	bhi.w	800ef4a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e594:	4b30      	ldr	r3, [pc, #192]	; (800e658 <tcp_receive+0x5e8>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	3b01      	subs	r3, #1
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f2c0 808f 	blt.w	800e6c0 <tcp_receive+0x650>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5a6:	4b2b      	ldr	r3, [pc, #172]	; (800e654 <tcp_receive+0x5e4>)
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	4b2a      	ldr	r3, [pc, #168]	; (800e658 <tcp_receive+0x5e8>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	440b      	add	r3, r1
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f300 8082 	bgt.w	800e6c0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e5bc:	4b27      	ldr	r3, [pc, #156]	; (800e65c <tcp_receive+0x5ec>)
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5c6:	4b24      	ldr	r3, [pc, #144]	; (800e658 <tcp_receive+0x5e8>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e5ce:	4b23      	ldr	r3, [pc, #140]	; (800e65c <tcp_receive+0x5ec>)
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d106      	bne.n	800e5e4 <tcp_receive+0x574>
 800e5d6:	4b22      	ldr	r3, [pc, #136]	; (800e660 <tcp_receive+0x5f0>)
 800e5d8:	f240 5294 	movw	r2, #1428	; 0x594
 800e5dc:	4921      	ldr	r1, [pc, #132]	; (800e664 <tcp_receive+0x5f4>)
 800e5de:	4822      	ldr	r0, [pc, #136]	; (800e668 <tcp_receive+0x5f8>)
 800e5e0:	f006 fffe 	bl	80155e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d906      	bls.n	800e5fc <tcp_receive+0x58c>
 800e5ee:	4b1c      	ldr	r3, [pc, #112]	; (800e660 <tcp_receive+0x5f0>)
 800e5f0:	f240 5295 	movw	r2, #1429	; 0x595
 800e5f4:	491d      	ldr	r1, [pc, #116]	; (800e66c <tcp_receive+0x5fc>)
 800e5f6:	481c      	ldr	r0, [pc, #112]	; (800e668 <tcp_receive+0x5f8>)
 800e5f8:	f006 fff2 	bl	80155e0 <iprintf>
      off = (u16_t)off32;
 800e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e602:	4b16      	ldr	r3, [pc, #88]	; (800e65c <tcp_receive+0x5ec>)
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	891b      	ldrh	r3, [r3, #8]
 800e608:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d906      	bls.n	800e61e <tcp_receive+0x5ae>
 800e610:	4b13      	ldr	r3, [pc, #76]	; (800e660 <tcp_receive+0x5f0>)
 800e612:	f240 5297 	movw	r2, #1431	; 0x597
 800e616:	4916      	ldr	r1, [pc, #88]	; (800e670 <tcp_receive+0x600>)
 800e618:	4813      	ldr	r0, [pc, #76]	; (800e668 <tcp_receive+0x5f8>)
 800e61a:	f006 ffe1 	bl	80155e0 <iprintf>
      inseg.len -= off;
 800e61e:	4b0f      	ldr	r3, [pc, #60]	; (800e65c <tcp_receive+0x5ec>)
 800e620:	891a      	ldrh	r2, [r3, #8]
 800e622:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e626:	1ad3      	subs	r3, r2, r3
 800e628:	b29a      	uxth	r2, r3
 800e62a:	4b0c      	ldr	r3, [pc, #48]	; (800e65c <tcp_receive+0x5ec>)
 800e62c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e62e:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <tcp_receive+0x5ec>)
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	891a      	ldrh	r2, [r3, #8]
 800e634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e63c:	e02a      	b.n	800e694 <tcp_receive+0x624>
 800e63e:	bf00      	nop
 800e640:	08017c34 	.word	0x08017c34
 800e644:	08017c3c 	.word	0x08017c3c
 800e648:	200086a0 	.word	0x200086a0
 800e64c:	2000869c 	.word	0x2000869c
 800e650:	20008660 	.word	0x20008660
 800e654:	200086a2 	.word	0x200086a2
 800e658:	20008698 	.word	0x20008698
 800e65c:	20008678 	.word	0x20008678
 800e660:	080178cc 	.word	0x080178cc
 800e664:	08017c44 	.word	0x08017c44
 800e668:	08017918 	.word	0x08017918
 800e66c:	08017c54 	.word	0x08017c54
 800e670:	08017c64 	.word	0x08017c64
        off -= p->len;
 800e674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e676:	895b      	ldrh	r3, [r3, #10]
 800e678:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e684:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e686:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e68a:	2200      	movs	r2, #0
 800e68c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e68e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e696:	895b      	ldrh	r3, [r3, #10]
 800e698:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d8e9      	bhi.n	800e674 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e6a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e6a8:	f7fc fb6c 	bl	800ad84 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b0:	4a91      	ldr	r2, [pc, #580]	; (800e8f8 <tcp_receive+0x888>)
 800e6b2:	6013      	str	r3, [r2, #0]
 800e6b4:	4b91      	ldr	r3, [pc, #580]	; (800e8fc <tcp_receive+0x88c>)
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	4a8f      	ldr	r2, [pc, #572]	; (800e8f8 <tcp_receive+0x888>)
 800e6ba:	6812      	ldr	r2, [r2, #0]
 800e6bc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e6be:	e00d      	b.n	800e6dc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e6c0:	4b8d      	ldr	r3, [pc, #564]	; (800e8f8 <tcp_receive+0x888>)
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	da06      	bge.n	800e6dc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	8b5b      	ldrh	r3, [r3, #26]
 800e6d2:	f043 0302 	orr.w	r3, r3, #2
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e6dc:	4b86      	ldr	r3, [pc, #536]	; (800e8f8 <tcp_receive+0x888>)
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f2c0 842a 	blt.w	800ef40 <tcp_receive+0xed0>
 800e6ec:	4b82      	ldr	r3, [pc, #520]	; (800e8f8 <tcp_receive+0x888>)
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f4:	6879      	ldr	r1, [r7, #4]
 800e6f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e6f8:	440b      	add	r3, r1
 800e6fa:	1ad3      	subs	r3, r2, r3
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f300 841e 	bgt.w	800ef40 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e708:	4b7b      	ldr	r3, [pc, #492]	; (800e8f8 <tcp_receive+0x888>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	f040 829a 	bne.w	800ec46 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e712:	4b7a      	ldr	r3, [pc, #488]	; (800e8fc <tcp_receive+0x88c>)
 800e714:	891c      	ldrh	r4, [r3, #8]
 800e716:	4b79      	ldr	r3, [pc, #484]	; (800e8fc <tcp_receive+0x88c>)
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	899b      	ldrh	r3, [r3, #12]
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fa ffb4 	bl	800968c <lwip_htons>
 800e724:	4603      	mov	r3, r0
 800e726:	b2db      	uxtb	r3, r3
 800e728:	f003 0303 	and.w	r3, r3, #3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <tcp_receive+0x6c4>
 800e730:	2301      	movs	r3, #1
 800e732:	e000      	b.n	800e736 <tcp_receive+0x6c6>
 800e734:	2300      	movs	r3, #0
 800e736:	4423      	add	r3, r4
 800e738:	b29a      	uxth	r2, r3
 800e73a:	4b71      	ldr	r3, [pc, #452]	; (800e900 <tcp_receive+0x890>)
 800e73c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e742:	4b6f      	ldr	r3, [pc, #444]	; (800e900 <tcp_receive+0x890>)
 800e744:	881b      	ldrh	r3, [r3, #0]
 800e746:	429a      	cmp	r2, r3
 800e748:	d275      	bcs.n	800e836 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e74a:	4b6c      	ldr	r3, [pc, #432]	; (800e8fc <tcp_receive+0x88c>)
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	899b      	ldrh	r3, [r3, #12]
 800e750:	b29b      	uxth	r3, r3
 800e752:	4618      	mov	r0, r3
 800e754:	f7fa ff9a 	bl	800968c <lwip_htons>
 800e758:	4603      	mov	r3, r0
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	f003 0301 	and.w	r3, r3, #1
 800e760:	2b00      	cmp	r3, #0
 800e762:	d01f      	beq.n	800e7a4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e764:	4b65      	ldr	r3, [pc, #404]	; (800e8fc <tcp_receive+0x88c>)
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	899b      	ldrh	r3, [r3, #12]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	b21b      	sxth	r3, r3
 800e76e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e772:	b21c      	sxth	r4, r3
 800e774:	4b61      	ldr	r3, [pc, #388]	; (800e8fc <tcp_receive+0x88c>)
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	899b      	ldrh	r3, [r3, #12]
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7fa ff85 	bl	800968c <lwip_htons>
 800e782:	4603      	mov	r3, r0
 800e784:	b2db      	uxtb	r3, r3
 800e786:	b29b      	uxth	r3, r3
 800e788:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fa ff7c 	bl	800968c <lwip_htons>
 800e794:	4603      	mov	r3, r0
 800e796:	b21b      	sxth	r3, r3
 800e798:	4323      	orrs	r3, r4
 800e79a:	b21a      	sxth	r2, r3
 800e79c:	4b57      	ldr	r3, [pc, #348]	; (800e8fc <tcp_receive+0x88c>)
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	b292      	uxth	r2, r2
 800e7a2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e7a8:	4b54      	ldr	r3, [pc, #336]	; (800e8fc <tcp_receive+0x88c>)
 800e7aa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e7ac:	4b53      	ldr	r3, [pc, #332]	; (800e8fc <tcp_receive+0x88c>)
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	899b      	ldrh	r3, [r3, #12]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fa ff69 	bl	800968c <lwip_htons>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	f003 0302 	and.w	r3, r3, #2
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d005      	beq.n	800e7d2 <tcp_receive+0x762>
            inseg.len -= 1;
 800e7c6:	4b4d      	ldr	r3, [pc, #308]	; (800e8fc <tcp_receive+0x88c>)
 800e7c8:	891b      	ldrh	r3, [r3, #8]
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	4b4b      	ldr	r3, [pc, #300]	; (800e8fc <tcp_receive+0x88c>)
 800e7d0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e7d2:	4b4a      	ldr	r3, [pc, #296]	; (800e8fc <tcp_receive+0x88c>)
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	4a49      	ldr	r2, [pc, #292]	; (800e8fc <tcp_receive+0x88c>)
 800e7d8:	8912      	ldrh	r2, [r2, #8]
 800e7da:	4611      	mov	r1, r2
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fc f9d1 	bl	800ab84 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e7e2:	4b46      	ldr	r3, [pc, #280]	; (800e8fc <tcp_receive+0x88c>)
 800e7e4:	891c      	ldrh	r4, [r3, #8]
 800e7e6:	4b45      	ldr	r3, [pc, #276]	; (800e8fc <tcp_receive+0x88c>)
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	899b      	ldrh	r3, [r3, #12]
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fa ff4c 	bl	800968c <lwip_htons>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	f003 0303 	and.w	r3, r3, #3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <tcp_receive+0x794>
 800e800:	2301      	movs	r3, #1
 800e802:	e000      	b.n	800e806 <tcp_receive+0x796>
 800e804:	2300      	movs	r3, #0
 800e806:	4423      	add	r3, r4
 800e808:	b29a      	uxth	r2, r3
 800e80a:	4b3d      	ldr	r3, [pc, #244]	; (800e900 <tcp_receive+0x890>)
 800e80c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e80e:	4b3c      	ldr	r3, [pc, #240]	; (800e900 <tcp_receive+0x890>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	461a      	mov	r2, r3
 800e814:	4b38      	ldr	r3, [pc, #224]	; (800e8f8 <tcp_receive+0x888>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	441a      	add	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81e:	6879      	ldr	r1, [r7, #4]
 800e820:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e822:	440b      	add	r3, r1
 800e824:	429a      	cmp	r2, r3
 800e826:	d006      	beq.n	800e836 <tcp_receive+0x7c6>
 800e828:	4b36      	ldr	r3, [pc, #216]	; (800e904 <tcp_receive+0x894>)
 800e82a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e82e:	4936      	ldr	r1, [pc, #216]	; (800e908 <tcp_receive+0x898>)
 800e830:	4836      	ldr	r0, [pc, #216]	; (800e90c <tcp_receive+0x89c>)
 800e832:	f006 fed5 	bl	80155e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f000 80e7 	beq.w	800ea0e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e840:	4b2e      	ldr	r3, [pc, #184]	; (800e8fc <tcp_receive+0x88c>)
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	899b      	ldrh	r3, [r3, #12]
 800e846:	b29b      	uxth	r3, r3
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fa ff1f 	bl	800968c <lwip_htons>
 800e84e:	4603      	mov	r3, r0
 800e850:	b2db      	uxtb	r3, r3
 800e852:	f003 0301 	and.w	r3, r3, #1
 800e856:	2b00      	cmp	r3, #0
 800e858:	d010      	beq.n	800e87c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e85a:	e00a      	b.n	800e872 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e860:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f7fd fd92 	bl	800c396 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1f0      	bne.n	800e85c <tcp_receive+0x7ec>
 800e87a:	e0c8      	b.n	800ea0e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e880:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e882:	e052      	b.n	800e92a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	899b      	ldrh	r3, [r3, #12]
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fa fefd 	bl	800968c <lwip_htons>
 800e892:	4603      	mov	r3, r0
 800e894:	b2db      	uxtb	r3, r3
 800e896:	f003 0301 	and.w	r3, r3, #1
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d03d      	beq.n	800e91a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e89e:	4b17      	ldr	r3, [pc, #92]	; (800e8fc <tcp_receive+0x88c>)
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	899b      	ldrh	r3, [r3, #12]
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fa fef0 	bl	800968c <lwip_htons>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d130      	bne.n	800e91a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e8b8:	4b10      	ldr	r3, [pc, #64]	; (800e8fc <tcp_receive+0x88c>)
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	899b      	ldrh	r3, [r3, #12]
 800e8be:	b29c      	uxth	r4, r3
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	f7fa fee3 	bl	800968c <lwip_htons>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	4b0c      	ldr	r3, [pc, #48]	; (800e8fc <tcp_receive+0x88c>)
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	4322      	orrs	r2, r4
 800e8d0:	b292      	uxth	r2, r2
 800e8d2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e8d4:	4b09      	ldr	r3, [pc, #36]	; (800e8fc <tcp_receive+0x88c>)
 800e8d6:	891c      	ldrh	r4, [r3, #8]
 800e8d8:	4b08      	ldr	r3, [pc, #32]	; (800e8fc <tcp_receive+0x88c>)
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	899b      	ldrh	r3, [r3, #12]
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fa fed3 	bl	800968c <lwip_htons>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	f003 0303 	and.w	r3, r3, #3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00e      	beq.n	800e910 <tcp_receive+0x8a0>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e00d      	b.n	800e912 <tcp_receive+0x8a2>
 800e8f6:	bf00      	nop
 800e8f8:	20008698 	.word	0x20008698
 800e8fc:	20008678 	.word	0x20008678
 800e900:	200086a2 	.word	0x200086a2
 800e904:	080178cc 	.word	0x080178cc
 800e908:	08017c74 	.word	0x08017c74
 800e90c:	08017918 	.word	0x08017918
 800e910:	2300      	movs	r3, #0
 800e912:	4423      	add	r3, r4
 800e914:	b29a      	uxth	r2, r3
 800e916:	4b98      	ldr	r3, [pc, #608]	; (800eb78 <tcp_receive+0xb08>)
 800e918:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e924:	6938      	ldr	r0, [r7, #16]
 800e926:	f7fd fd36 	bl	800c396 <tcp_seg_free>
            while (next &&
 800e92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00e      	beq.n	800e94e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e930:	4b91      	ldr	r3, [pc, #580]	; (800eb78 <tcp_receive+0xb08>)
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	461a      	mov	r2, r3
 800e936:	4b91      	ldr	r3, [pc, #580]	; (800eb7c <tcp_receive+0xb0c>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	441a      	add	r2, r3
 800e93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e944:	8909      	ldrh	r1, [r1, #8]
 800e946:	440b      	add	r3, r1
 800e948:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	da9a      	bge.n	800e884 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e950:	2b00      	cmp	r3, #0
 800e952:	d059      	beq.n	800ea08 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e954:	4b88      	ldr	r3, [pc, #544]	; (800eb78 <tcp_receive+0xb08>)
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	461a      	mov	r2, r3
 800e95a:	4b88      	ldr	r3, [pc, #544]	; (800eb7c <tcp_receive+0xb0c>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	441a      	add	r2, r3
 800e960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e968:	2b00      	cmp	r3, #0
 800e96a:	dd4d      	ble.n	800ea08 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	b29a      	uxth	r2, r3
 800e974:	4b81      	ldr	r3, [pc, #516]	; (800eb7c <tcp_receive+0xb0c>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	b29b      	uxth	r3, r3
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	4b80      	ldr	r3, [pc, #512]	; (800eb80 <tcp_receive+0xb10>)
 800e980:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e982:	4b7f      	ldr	r3, [pc, #508]	; (800eb80 <tcp_receive+0xb10>)
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	899b      	ldrh	r3, [r3, #12]
 800e988:	b29b      	uxth	r3, r3
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fa fe7e 	bl	800968c <lwip_htons>
 800e990:	4603      	mov	r3, r0
 800e992:	b2db      	uxtb	r3, r3
 800e994:	f003 0302 	and.w	r3, r3, #2
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d005      	beq.n	800e9a8 <tcp_receive+0x938>
                inseg.len -= 1;
 800e99c:	4b78      	ldr	r3, [pc, #480]	; (800eb80 <tcp_receive+0xb10>)
 800e99e:	891b      	ldrh	r3, [r3, #8]
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	4b76      	ldr	r3, [pc, #472]	; (800eb80 <tcp_receive+0xb10>)
 800e9a6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e9a8:	4b75      	ldr	r3, [pc, #468]	; (800eb80 <tcp_receive+0xb10>)
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	4a74      	ldr	r2, [pc, #464]	; (800eb80 <tcp_receive+0xb10>)
 800e9ae:	8912      	ldrh	r2, [r2, #8]
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fc f8e6 	bl	800ab84 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e9b8:	4b71      	ldr	r3, [pc, #452]	; (800eb80 <tcp_receive+0xb10>)
 800e9ba:	891c      	ldrh	r4, [r3, #8]
 800e9bc:	4b70      	ldr	r3, [pc, #448]	; (800eb80 <tcp_receive+0xb10>)
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	899b      	ldrh	r3, [r3, #12]
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7fa fe61 	bl	800968c <lwip_htons>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	f003 0303 	and.w	r3, r3, #3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d001      	beq.n	800e9da <tcp_receive+0x96a>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e000      	b.n	800e9dc <tcp_receive+0x96c>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	4423      	add	r3, r4
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	4b65      	ldr	r3, [pc, #404]	; (800eb78 <tcp_receive+0xb08>)
 800e9e2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e9e4:	4b64      	ldr	r3, [pc, #400]	; (800eb78 <tcp_receive+0xb08>)
 800e9e6:	881b      	ldrh	r3, [r3, #0]
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	4b64      	ldr	r3, [pc, #400]	; (800eb7c <tcp_receive+0xb0c>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	441a      	add	r2, r3
 800e9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d006      	beq.n	800ea08 <tcp_receive+0x998>
 800e9fa:	4b62      	ldr	r3, [pc, #392]	; (800eb84 <tcp_receive+0xb14>)
 800e9fc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ea00:	4961      	ldr	r1, [pc, #388]	; (800eb88 <tcp_receive+0xb18>)
 800ea02:	4862      	ldr	r0, [pc, #392]	; (800eb8c <tcp_receive+0xb1c>)
 800ea04:	f006 fdec 	bl	80155e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea0c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ea0e:	4b5a      	ldr	r3, [pc, #360]	; (800eb78 <tcp_receive+0xb08>)
 800ea10:	881b      	ldrh	r3, [r3, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	4b59      	ldr	r3, [pc, #356]	; (800eb7c <tcp_receive+0xb0c>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	441a      	add	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea22:	4b55      	ldr	r3, [pc, #340]	; (800eb78 <tcp_receive+0xb08>)
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d206      	bcs.n	800ea38 <tcp_receive+0x9c8>
 800ea2a:	4b56      	ldr	r3, [pc, #344]	; (800eb84 <tcp_receive+0xb14>)
 800ea2c:	f240 6207 	movw	r2, #1543	; 0x607
 800ea30:	4957      	ldr	r1, [pc, #348]	; (800eb90 <tcp_receive+0xb20>)
 800ea32:	4856      	ldr	r0, [pc, #344]	; (800eb8c <tcp_receive+0xb1c>)
 800ea34:	f006 fdd4 	bl	80155e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea3c:	4b4e      	ldr	r3, [pc, #312]	; (800eb78 <tcp_receive+0xb08>)
 800ea3e:	881b      	ldrh	r3, [r3, #0]
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fc ffc5 	bl	800b9d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ea4e:	4b4c      	ldr	r3, [pc, #304]	; (800eb80 <tcp_receive+0xb10>)
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	891b      	ldrh	r3, [r3, #8]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d006      	beq.n	800ea66 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ea58:	4b49      	ldr	r3, [pc, #292]	; (800eb80 <tcp_receive+0xb10>)
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	4a4d      	ldr	r2, [pc, #308]	; (800eb94 <tcp_receive+0xb24>)
 800ea5e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ea60:	4b47      	ldr	r3, [pc, #284]	; (800eb80 <tcp_receive+0xb10>)
 800ea62:	2200      	movs	r2, #0
 800ea64:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ea66:	4b46      	ldr	r3, [pc, #280]	; (800eb80 <tcp_receive+0xb10>)
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	899b      	ldrh	r3, [r3, #12]
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fa fe0c 	bl	800968c <lwip_htons>
 800ea74:	4603      	mov	r3, r0
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	f003 0301 	and.w	r3, r3, #1
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 80b8 	beq.w	800ebf2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ea82:	4b45      	ldr	r3, [pc, #276]	; (800eb98 <tcp_receive+0xb28>)
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	f043 0320 	orr.w	r3, r3, #32
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	4b42      	ldr	r3, [pc, #264]	; (800eb98 <tcp_receive+0xb28>)
 800ea8e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ea90:	e0af      	b.n	800ebf2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea96:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	4a36      	ldr	r2, [pc, #216]	; (800eb7c <tcp_receive+0xb0c>)
 800eaa2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	891b      	ldrh	r3, [r3, #8]
 800eaa8:	461c      	mov	r4, r3
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	899b      	ldrh	r3, [r3, #12]
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fa fdea 	bl	800968c <lwip_htons>
 800eab8:	4603      	mov	r3, r0
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	f003 0303 	and.w	r3, r3, #3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <tcp_receive+0xa58>
 800eac4:	2301      	movs	r3, #1
 800eac6:	e000      	b.n	800eaca <tcp_receive+0xa5a>
 800eac8:	2300      	movs	r3, #0
 800eaca:	191a      	adds	r2, r3, r4
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead0:	441a      	add	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eada:	461c      	mov	r4, r3
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	891b      	ldrh	r3, [r3, #8]
 800eae0:	461d      	mov	r5, r3
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	899b      	ldrh	r3, [r3, #12]
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fa fdce 	bl	800968c <lwip_htons>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	f003 0303 	and.w	r3, r3, #3
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d001      	beq.n	800eb00 <tcp_receive+0xa90>
 800eafc:	2301      	movs	r3, #1
 800eafe:	e000      	b.n	800eb02 <tcp_receive+0xa92>
 800eb00:	2300      	movs	r3, #0
 800eb02:	442b      	add	r3, r5
 800eb04:	429c      	cmp	r4, r3
 800eb06:	d206      	bcs.n	800eb16 <tcp_receive+0xaa6>
 800eb08:	4b1e      	ldr	r3, [pc, #120]	; (800eb84 <tcp_receive+0xb14>)
 800eb0a:	f240 622b 	movw	r2, #1579	; 0x62b
 800eb0e:	4923      	ldr	r1, [pc, #140]	; (800eb9c <tcp_receive+0xb2c>)
 800eb10:	481e      	ldr	r0, [pc, #120]	; (800eb8c <tcp_receive+0xb1c>)
 800eb12:	f006 fd65 	bl	80155e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	891b      	ldrh	r3, [r3, #8]
 800eb1a:	461c      	mov	r4, r3
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	899b      	ldrh	r3, [r3, #12]
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fa fdb1 	bl	800968c <lwip_htons>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	f003 0303 	and.w	r3, r3, #3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d001      	beq.n	800eb3a <tcp_receive+0xaca>
 800eb36:	2301      	movs	r3, #1
 800eb38:	e000      	b.n	800eb3c <tcp_receive+0xacc>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	1919      	adds	r1, r3, r4
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb42:	b28b      	uxth	r3, r1
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7fc ff43 	bl	800b9d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	891b      	ldrh	r3, [r3, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d028      	beq.n	800ebae <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800eb5c:	4b0d      	ldr	r3, [pc, #52]	; (800eb94 <tcp_receive+0xb24>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d01d      	beq.n	800eba0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800eb64:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <tcp_receive+0xb24>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4610      	mov	r0, r2
 800eb70:	f7fc fa50 	bl	800b014 <pbuf_cat>
 800eb74:	e018      	b.n	800eba8 <tcp_receive+0xb38>
 800eb76:	bf00      	nop
 800eb78:	200086a2 	.word	0x200086a2
 800eb7c:	20008698 	.word	0x20008698
 800eb80:	20008678 	.word	0x20008678
 800eb84:	080178cc 	.word	0x080178cc
 800eb88:	08017cac 	.word	0x08017cac
 800eb8c:	08017918 	.word	0x08017918
 800eb90:	08017ce8 	.word	0x08017ce8
 800eb94:	200086a8 	.word	0x200086a8
 800eb98:	200086a5 	.word	0x200086a5
 800eb9c:	08017d08 	.word	0x08017d08
            } else {
              recv_data = cseg->p;
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	4a70      	ldr	r2, [pc, #448]	; (800ed68 <tcp_receive+0xcf8>)
 800eba6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	899b      	ldrh	r3, [r3, #12]
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fa fd68 	bl	800968c <lwip_htons>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	f003 0301 	and.w	r3, r3, #1
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d00d      	beq.n	800ebe4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ebc8:	4b68      	ldr	r3, [pc, #416]	; (800ed6c <tcp_receive+0xcfc>)
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	f043 0320 	orr.w	r3, r3, #32
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	4b66      	ldr	r3, [pc, #408]	; (800ed6c <tcp_receive+0xcfc>)
 800ebd4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	7d1b      	ldrb	r3, [r3, #20]
 800ebda:	2b04      	cmp	r3, #4
 800ebdc:	d102      	bne.n	800ebe4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2207      	movs	r2, #7
 800ebe2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ebec:	68b8      	ldr	r0, [r7, #8]
 800ebee:	f7fd fbd2 	bl	800c396 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d008      	beq.n	800ec0c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	685a      	ldr	r2, [r3, #4]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ec06:	429a      	cmp	r2, r3
 800ec08:	f43f af43 	beq.w	800ea92 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	8b5b      	ldrh	r3, [r3, #26]
 800ec10:	f003 0301 	and.w	r3, r3, #1
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00e      	beq.n	800ec36 <tcp_receive+0xbc6>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	8b5b      	ldrh	r3, [r3, #26]
 800ec1c:	f023 0301 	bic.w	r3, r3, #1
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	835a      	strh	r2, [r3, #26]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	8b5b      	ldrh	r3, [r3, #26]
 800ec2a:	f043 0302 	orr.w	r3, r3, #2
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ec34:	e188      	b.n	800ef48 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	8b5b      	ldrh	r3, [r3, #26]
 800ec3a:	f043 0301 	orr.w	r3, r3, #1
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ec44:	e180      	b.n	800ef48 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d106      	bne.n	800ec5c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ec4e:	4848      	ldr	r0, [pc, #288]	; (800ed70 <tcp_receive+0xd00>)
 800ec50:	f7fd fbba 	bl	800c3c8 <tcp_seg_copy>
 800ec54:	4602      	mov	r2, r0
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	675a      	str	r2, [r3, #116]	; 0x74
 800ec5a:	e16d      	b.n	800ef38 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec64:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec66:	e157      	b.n	800ef18 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ec68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	685a      	ldr	r2, [r3, #4]
 800ec6e:	4b41      	ldr	r3, [pc, #260]	; (800ed74 <tcp_receive+0xd04>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d11d      	bne.n	800ecb2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ec76:	4b3e      	ldr	r3, [pc, #248]	; (800ed70 <tcp_receive+0xd00>)
 800ec78:	891a      	ldrh	r2, [r3, #8]
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	891b      	ldrh	r3, [r3, #8]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	f240 814f 	bls.w	800ef22 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ec84:	483a      	ldr	r0, [pc, #232]	; (800ed70 <tcp_receive+0xd00>)
 800ec86:	f7fd fb9f 	bl	800c3c8 <tcp_seg_copy>
 800ec8a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f000 8149 	beq.w	800ef26 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ec94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d003      	beq.n	800eca2 <tcp_receive+0xc32>
                    prev->next = cseg;
 800ec9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	601a      	str	r2, [r3, #0]
 800eca0:	e002      	b.n	800eca8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	697a      	ldr	r2, [r7, #20]
 800eca6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800eca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ecaa:	6978      	ldr	r0, [r7, #20]
 800ecac:	f7ff f8dc 	bl	800de68 <tcp_oos_insert_segment>
                }
                break;
 800ecb0:	e139      	b.n	800ef26 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ecb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d117      	bne.n	800ece8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ecb8:	4b2e      	ldr	r3, [pc, #184]	; (800ed74 <tcp_receive+0xd04>)
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	da57      	bge.n	800ed78 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ecc8:	4829      	ldr	r0, [pc, #164]	; (800ed70 <tcp_receive+0xd00>)
 800ecca:	f7fd fb7d 	bl	800c3c8 <tcp_seg_copy>
 800ecce:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 8129 	beq.w	800ef2a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	69ba      	ldr	r2, [r7, #24]
 800ecdc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ecde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ece0:	69b8      	ldr	r0, [r7, #24]
 800ece2:	f7ff f8c1 	bl	800de68 <tcp_oos_insert_segment>
                  }
                  break;
 800ece6:	e120      	b.n	800ef2a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ece8:	4b22      	ldr	r3, [pc, #136]	; (800ed74 <tcp_receive+0xd04>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	db3e      	blt.n	800ed78 <tcp_receive+0xd08>
 800ecfa:	4b1e      	ldr	r3, [pc, #120]	; (800ed74 <tcp_receive+0xd04>)
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	1ad3      	subs	r3, r2, r3
 800ed06:	3301      	adds	r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	dc35      	bgt.n	800ed78 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed0c:	4818      	ldr	r0, [pc, #96]	; (800ed70 <tcp_receive+0xd00>)
 800ed0e:	f7fd fb5b 	bl	800c3c8 <tcp_seg_copy>
 800ed12:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f000 8109 	beq.w	800ef2e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ed1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed24:	8912      	ldrh	r2, [r2, #8]
 800ed26:	441a      	add	r2, r3
 800ed28:	4b12      	ldr	r3, [pc, #72]	; (800ed74 <tcp_receive+0xd04>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	dd12      	ble.n	800ed58 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ed32:	4b10      	ldr	r3, [pc, #64]	; (800ed74 <tcp_receive+0xd04>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed46:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ed48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed4e:	891b      	ldrh	r3, [r3, #8]
 800ed50:	4619      	mov	r1, r3
 800ed52:	4610      	mov	r0, r2
 800ed54:	f7fb ff16 	bl	800ab84 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ed58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed5a:	69fa      	ldr	r2, [r7, #28]
 800ed5c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ed5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed60:	69f8      	ldr	r0, [r7, #28]
 800ed62:	f7ff f881 	bl	800de68 <tcp_oos_insert_segment>
                  }
                  break;
 800ed66:	e0e2      	b.n	800ef2e <tcp_receive+0xebe>
 800ed68:	200086a8 	.word	0x200086a8
 800ed6c:	200086a5 	.word	0x200086a5
 800ed70:	20008678 	.word	0x20008678
 800ed74:	20008698 	.word	0x20008698
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ed78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f040 80c6 	bne.w	800ef12 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ed86:	4b80      	ldr	r3, [pc, #512]	; (800ef88 <tcp_receive+0xf18>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f340 80bd 	ble.w	800ef12 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	899b      	ldrh	r3, [r3, #12]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7fa fc73 	bl	800968c <lwip_htons>
 800eda6:	4603      	mov	r3, r0
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	f003 0301 	and.w	r3, r3, #1
 800edae:	2b00      	cmp	r3, #0
 800edb0:	f040 80bf 	bne.w	800ef32 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800edb4:	4875      	ldr	r0, [pc, #468]	; (800ef8c <tcp_receive+0xf1c>)
 800edb6:	f7fd fb07 	bl	800c3c8 <tcp_seg_copy>
 800edba:	4602      	mov	r2, r0
 800edbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edbe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800edc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f000 80b6 	beq.w	800ef36 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800edca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edd2:	8912      	ldrh	r2, [r2, #8]
 800edd4:	441a      	add	r2, r3
 800edd6:	4b6c      	ldr	r3, [pc, #432]	; (800ef88 <tcp_receive+0xf18>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	1ad3      	subs	r3, r2, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	dd12      	ble.n	800ee06 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ede0:	4b69      	ldr	r3, [pc, #420]	; (800ef88 <tcp_receive+0xf18>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	b29b      	uxth	r3, r3
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800edf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf8:	685a      	ldr	r2, [r3, #4]
 800edfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfc:	891b      	ldrh	r3, [r3, #8]
 800edfe:	4619      	mov	r1, r3
 800ee00:	4610      	mov	r0, r2
 800ee02:	f7fb febf 	bl	800ab84 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ee06:	4b62      	ldr	r3, [pc, #392]	; (800ef90 <tcp_receive+0xf20>)
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	4b5e      	ldr	r3, [pc, #376]	; (800ef88 <tcp_receive+0xf18>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	441a      	add	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee16:	6879      	ldr	r1, [r7, #4]
 800ee18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee1a:	440b      	add	r3, r1
 800ee1c:	1ad3      	subs	r3, r2, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f340 8089 	ble.w	800ef36 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ee24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	899b      	ldrh	r3, [r3, #12]
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fa fc2c 	bl	800968c <lwip_htons>
 800ee34:	4603      	mov	r3, r0
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	f003 0301 	and.w	r3, r3, #1
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d022      	beq.n	800ee86 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ee40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	899b      	ldrh	r3, [r3, #12]
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	b21b      	sxth	r3, r3
 800ee4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ee50:	b21c      	sxth	r4, r3
 800ee52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	899b      	ldrh	r3, [r3, #12]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fa fc15 	bl	800968c <lwip_htons>
 800ee62:	4603      	mov	r3, r0
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fa fc0c 	bl	800968c <lwip_htons>
 800ee74:	4603      	mov	r3, r0
 800ee76:	b21b      	sxth	r3, r3
 800ee78:	4323      	orrs	r3, r4
 800ee7a:	b21a      	sxth	r2, r3
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	b292      	uxth	r2, r2
 800ee84:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee90:	4413      	add	r3, r2
 800ee92:	b299      	uxth	r1, r3
 800ee94:	4b3c      	ldr	r3, [pc, #240]	; (800ef88 <tcp_receive+0xf18>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	1a8a      	subs	r2, r1, r2
 800eea0:	b292      	uxth	r2, r2
 800eea2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	685a      	ldr	r2, [r3, #4]
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	891b      	ldrh	r3, [r3, #8]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f7fb fe66 	bl	800ab84 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	891c      	ldrh	r4, [r3, #8]
 800eebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	899b      	ldrh	r3, [r3, #12]
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fa fbdf 	bl	800968c <lwip_htons>
 800eece:	4603      	mov	r3, r0
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	f003 0303 	and.w	r3, r3, #3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d001      	beq.n	800eede <tcp_receive+0xe6e>
 800eeda:	2301      	movs	r3, #1
 800eedc:	e000      	b.n	800eee0 <tcp_receive+0xe70>
 800eede:	2300      	movs	r3, #0
 800eee0:	4423      	add	r3, r4
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	4b2a      	ldr	r3, [pc, #168]	; (800ef90 <tcp_receive+0xf20>)
 800eee6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eee8:	4b29      	ldr	r3, [pc, #164]	; (800ef90 <tcp_receive+0xf20>)
 800eeea:	881b      	ldrh	r3, [r3, #0]
 800eeec:	461a      	mov	r2, r3
 800eeee:	4b26      	ldr	r3, [pc, #152]	; (800ef88 <tcp_receive+0xf18>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	441a      	add	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef8:	6879      	ldr	r1, [r7, #4]
 800eefa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eefc:	440b      	add	r3, r1
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d019      	beq.n	800ef36 <tcp_receive+0xec6>
 800ef02:	4b24      	ldr	r3, [pc, #144]	; (800ef94 <tcp_receive+0xf24>)
 800ef04:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ef08:	4923      	ldr	r1, [pc, #140]	; (800ef98 <tcp_receive+0xf28>)
 800ef0a:	4824      	ldr	r0, [pc, #144]	; (800ef9c <tcp_receive+0xf2c>)
 800ef0c:	f006 fb68 	bl	80155e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ef10:	e011      	b.n	800ef36 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ef12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f47f aea4 	bne.w	800ec68 <tcp_receive+0xbf8>
 800ef20:	e00a      	b.n	800ef38 <tcp_receive+0xec8>
                break;
 800ef22:	bf00      	nop
 800ef24:	e008      	b.n	800ef38 <tcp_receive+0xec8>
                break;
 800ef26:	bf00      	nop
 800ef28:	e006      	b.n	800ef38 <tcp_receive+0xec8>
                  break;
 800ef2a:	bf00      	nop
 800ef2c:	e004      	b.n	800ef38 <tcp_receive+0xec8>
                  break;
 800ef2e:	bf00      	nop
 800ef30:	e002      	b.n	800ef38 <tcp_receive+0xec8>
                  break;
 800ef32:	bf00      	nop
 800ef34:	e000      	b.n	800ef38 <tcp_receive+0xec8>
                break;
 800ef36:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f001 fa33 	bl	80103a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ef3e:	e003      	b.n	800ef48 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f001 fa2f 	bl	80103a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ef46:	e01a      	b.n	800ef7e <tcp_receive+0xf0e>
 800ef48:	e019      	b.n	800ef7e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ef4a:	4b0f      	ldr	r3, [pc, #60]	; (800ef88 <tcp_receive+0xf18>)
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	db0a      	blt.n	800ef6e <tcp_receive+0xefe>
 800ef58:	4b0b      	ldr	r3, [pc, #44]	; (800ef88 <tcp_receive+0xf18>)
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef60:	6879      	ldr	r1, [r7, #4]
 800ef62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef64:	440b      	add	r3, r1
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	3301      	adds	r3, #1
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	dd07      	ble.n	800ef7e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	8b5b      	ldrh	r3, [r3, #26]
 800ef72:	f043 0302 	orr.w	r3, r3, #2
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ef7c:	e7ff      	b.n	800ef7e <tcp_receive+0xf0e>
 800ef7e:	bf00      	nop
 800ef80:	3750      	adds	r7, #80	; 0x50
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bdb0      	pop	{r4, r5, r7, pc}
 800ef86:	bf00      	nop
 800ef88:	20008698 	.word	0x20008698
 800ef8c:	20008678 	.word	0x20008678
 800ef90:	200086a2 	.word	0x200086a2
 800ef94:	080178cc 	.word	0x080178cc
 800ef98:	08017c74 	.word	0x08017c74
 800ef9c:	08017918 	.word	0x08017918

0800efa0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800efa6:	4b15      	ldr	r3, [pc, #84]	; (800effc <tcp_get_next_optbyte+0x5c>)
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	1c5a      	adds	r2, r3, #1
 800efac:	b291      	uxth	r1, r2
 800efae:	4a13      	ldr	r2, [pc, #76]	; (800effc <tcp_get_next_optbyte+0x5c>)
 800efb0:	8011      	strh	r1, [r2, #0]
 800efb2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800efb4:	4b12      	ldr	r3, [pc, #72]	; (800f000 <tcp_get_next_optbyte+0x60>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d004      	beq.n	800efc6 <tcp_get_next_optbyte+0x26>
 800efbc:	4b11      	ldr	r3, [pc, #68]	; (800f004 <tcp_get_next_optbyte+0x64>)
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	88fa      	ldrh	r2, [r7, #6]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d208      	bcs.n	800efd8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800efc6:	4b10      	ldr	r3, [pc, #64]	; (800f008 <tcp_get_next_optbyte+0x68>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	3314      	adds	r3, #20
 800efcc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800efce:	88fb      	ldrh	r3, [r7, #6]
 800efd0:	683a      	ldr	r2, [r7, #0]
 800efd2:	4413      	add	r3, r2
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	e00b      	b.n	800eff0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800efd8:	88fb      	ldrh	r3, [r7, #6]
 800efda:	b2da      	uxtb	r2, r3
 800efdc:	4b09      	ldr	r3, [pc, #36]	; (800f004 <tcp_get_next_optbyte+0x64>)
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800efe6:	4b06      	ldr	r3, [pc, #24]	; (800f000 <tcp_get_next_optbyte+0x60>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	797b      	ldrb	r3, [r7, #5]
 800efec:	4413      	add	r3, r2
 800efee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	20008694 	.word	0x20008694
 800f000:	20008690 	.word	0x20008690
 800f004:	2000868e 	.word	0x2000868e
 800f008:	20008688 	.word	0x20008688

0800f00c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d106      	bne.n	800f028 <tcp_parseopt+0x1c>
 800f01a:	4b32      	ldr	r3, [pc, #200]	; (800f0e4 <tcp_parseopt+0xd8>)
 800f01c:	f240 727d 	movw	r2, #1917	; 0x77d
 800f020:	4931      	ldr	r1, [pc, #196]	; (800f0e8 <tcp_parseopt+0xdc>)
 800f022:	4832      	ldr	r0, [pc, #200]	; (800f0ec <tcp_parseopt+0xe0>)
 800f024:	f006 fadc 	bl	80155e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f028:	4b31      	ldr	r3, [pc, #196]	; (800f0f0 <tcp_parseopt+0xe4>)
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d055      	beq.n	800f0dc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f030:	4b30      	ldr	r3, [pc, #192]	; (800f0f4 <tcp_parseopt+0xe8>)
 800f032:	2200      	movs	r2, #0
 800f034:	801a      	strh	r2, [r3, #0]
 800f036:	e045      	b.n	800f0c4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f038:	f7ff ffb2 	bl	800efa0 <tcp_get_next_optbyte>
 800f03c:	4603      	mov	r3, r0
 800f03e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	2b02      	cmp	r3, #2
 800f044:	d006      	beq.n	800f054 <tcp_parseopt+0x48>
 800f046:	2b02      	cmp	r3, #2
 800f048:	dc2b      	bgt.n	800f0a2 <tcp_parseopt+0x96>
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d041      	beq.n	800f0d2 <tcp_parseopt+0xc6>
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d127      	bne.n	800f0a2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f052:	e037      	b.n	800f0c4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f054:	f7ff ffa4 	bl	800efa0 <tcp_get_next_optbyte>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b04      	cmp	r3, #4
 800f05c:	d13b      	bne.n	800f0d6 <tcp_parseopt+0xca>
 800f05e:	4b25      	ldr	r3, [pc, #148]	; (800f0f4 <tcp_parseopt+0xe8>)
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	3301      	adds	r3, #1
 800f064:	4a22      	ldr	r2, [pc, #136]	; (800f0f0 <tcp_parseopt+0xe4>)
 800f066:	8812      	ldrh	r2, [r2, #0]
 800f068:	4293      	cmp	r3, r2
 800f06a:	da34      	bge.n	800f0d6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f06c:	f7ff ff98 	bl	800efa0 <tcp_get_next_optbyte>
 800f070:	4603      	mov	r3, r0
 800f072:	b29b      	uxth	r3, r3
 800f074:	021b      	lsls	r3, r3, #8
 800f076:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f078:	f7ff ff92 	bl	800efa0 <tcp_get_next_optbyte>
 800f07c:	4603      	mov	r3, r0
 800f07e:	b29a      	uxth	r2, r3
 800f080:	89bb      	ldrh	r3, [r7, #12]
 800f082:	4313      	orrs	r3, r2
 800f084:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f086:	89bb      	ldrh	r3, [r7, #12]
 800f088:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f08c:	d804      	bhi.n	800f098 <tcp_parseopt+0x8c>
 800f08e:	89bb      	ldrh	r3, [r7, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <tcp_parseopt+0x8c>
 800f094:	89ba      	ldrh	r2, [r7, #12]
 800f096:	e001      	b.n	800f09c <tcp_parseopt+0x90>
 800f098:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f0a0:	e010      	b.n	800f0c4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f0a2:	f7ff ff7d 	bl	800efa0 <tcp_get_next_optbyte>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f0aa:	7afb      	ldrb	r3, [r7, #11]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d914      	bls.n	800f0da <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f0b0:	7afb      	ldrb	r3, [r7, #11]
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	4b0f      	ldr	r3, [pc, #60]	; (800f0f4 <tcp_parseopt+0xe8>)
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	3b02      	subs	r3, #2
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	4b0c      	ldr	r3, [pc, #48]	; (800f0f4 <tcp_parseopt+0xe8>)
 800f0c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f0c4:	4b0b      	ldr	r3, [pc, #44]	; (800f0f4 <tcp_parseopt+0xe8>)
 800f0c6:	881a      	ldrh	r2, [r3, #0]
 800f0c8:	4b09      	ldr	r3, [pc, #36]	; (800f0f0 <tcp_parseopt+0xe4>)
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d3b3      	bcc.n	800f038 <tcp_parseopt+0x2c>
 800f0d0:	e004      	b.n	800f0dc <tcp_parseopt+0xd0>
          return;
 800f0d2:	bf00      	nop
 800f0d4:	e002      	b.n	800f0dc <tcp_parseopt+0xd0>
            return;
 800f0d6:	bf00      	nop
 800f0d8:	e000      	b.n	800f0dc <tcp_parseopt+0xd0>
            return;
 800f0da:	bf00      	nop
      }
    }
  }
}
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	080178cc 	.word	0x080178cc
 800f0e8:	08017d30 	.word	0x08017d30
 800f0ec:	08017918 	.word	0x08017918
 800f0f0:	2000868c 	.word	0x2000868c
 800f0f4:	20008694 	.word	0x20008694

0800f0f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f0fc:	4b05      	ldr	r3, [pc, #20]	; (800f114 <tcp_trigger_input_pcb_close+0x1c>)
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	f043 0310 	orr.w	r3, r3, #16
 800f104:	b2da      	uxtb	r2, r3
 800f106:	4b03      	ldr	r3, [pc, #12]	; (800f114 <tcp_trigger_input_pcb_close+0x1c>)
 800f108:	701a      	strb	r2, [r3, #0]
}
 800f10a:	bf00      	nop
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	200086a5 	.word	0x200086a5

0800f118 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00a      	beq.n	800f140 <tcp_route+0x28>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	7a1b      	ldrb	r3, [r3, #8]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d006      	beq.n	800f140 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	7a1b      	ldrb	r3, [r3, #8]
 800f136:	4618      	mov	r0, r3
 800f138:	f7fb fb6a 	bl	800a810 <netif_get_by_index>
 800f13c:	4603      	mov	r3, r0
 800f13e:	e003      	b.n	800f148 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f004 fff9 	bl	8014138 <ip4_route>
 800f146:	4603      	mov	r3, r0
  }
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f150:	b590      	push	{r4, r7, lr}
 800f152:	b087      	sub	sp, #28
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	603b      	str	r3, [r7, #0]
 800f15c:	4613      	mov	r3, r2
 800f15e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d105      	bne.n	800f172 <tcp_create_segment+0x22>
 800f166:	4b44      	ldr	r3, [pc, #272]	; (800f278 <tcp_create_segment+0x128>)
 800f168:	22a3      	movs	r2, #163	; 0xa3
 800f16a:	4944      	ldr	r1, [pc, #272]	; (800f27c <tcp_create_segment+0x12c>)
 800f16c:	4844      	ldr	r0, [pc, #272]	; (800f280 <tcp_create_segment+0x130>)
 800f16e:	f006 fa37 	bl	80155e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d105      	bne.n	800f184 <tcp_create_segment+0x34>
 800f178:	4b3f      	ldr	r3, [pc, #252]	; (800f278 <tcp_create_segment+0x128>)
 800f17a:	22a4      	movs	r2, #164	; 0xa4
 800f17c:	4941      	ldr	r1, [pc, #260]	; (800f284 <tcp_create_segment+0x134>)
 800f17e:	4840      	ldr	r0, [pc, #256]	; (800f280 <tcp_create_segment+0x130>)
 800f180:	f006 fa2e 	bl	80155e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f184:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	f003 0304 	and.w	r3, r3, #4
 800f190:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f192:	2003      	movs	r0, #3
 800f194:	f7fa ffaa 	bl	800a0ec <memp_malloc>
 800f198:	6138      	str	r0, [r7, #16]
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d104      	bne.n	800f1aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f1a0:	68b8      	ldr	r0, [r7, #8]
 800f1a2:	f7fb fe75 	bl	800ae90 <pbuf_free>
    return NULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e061      	b.n	800f26e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f1b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	891a      	ldrh	r2, [r3, #8]
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d205      	bcs.n	800f1d6 <tcp_create_segment+0x86>
 800f1ca:	4b2b      	ldr	r3, [pc, #172]	; (800f278 <tcp_create_segment+0x128>)
 800f1cc:	22b0      	movs	r2, #176	; 0xb0
 800f1ce:	492e      	ldr	r1, [pc, #184]	; (800f288 <tcp_create_segment+0x138>)
 800f1d0:	482b      	ldr	r0, [pc, #172]	; (800f280 <tcp_create_segment+0x130>)
 800f1d2:	f006 fa05 	bl	80155e0 <iprintf>
  seg->len = p->tot_len - optlen;
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	891a      	ldrh	r2, [r3, #8]
 800f1da:	7dfb      	ldrb	r3, [r7, #23]
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f1e6:	2114      	movs	r1, #20
 800f1e8:	68b8      	ldr	r0, [r7, #8]
 800f1ea:	f7fb fdbb 	bl	800ad64 <pbuf_add_header>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d004      	beq.n	800f1fe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f1f4:	6938      	ldr	r0, [r7, #16]
 800f1f6:	f7fd f8ce 	bl	800c396 <tcp_seg_free>
    return NULL;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e037      	b.n	800f26e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	8ada      	ldrh	r2, [r3, #22]
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	68dc      	ldr	r4, [r3, #12]
 800f210:	4610      	mov	r0, r2
 800f212:	f7fa fa3b 	bl	800968c <lwip_htons>
 800f216:	4603      	mov	r3, r0
 800f218:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	8b1a      	ldrh	r2, [r3, #24]
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	68dc      	ldr	r4, [r3, #12]
 800f222:	4610      	mov	r0, r2
 800f224:	f7fa fa32 	bl	800968c <lwip_htons>
 800f228:	4603      	mov	r3, r0
 800f22a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	68dc      	ldr	r4, [r3, #12]
 800f230:	6838      	ldr	r0, [r7, #0]
 800f232:	f7fa fa40 	bl	80096b6 <lwip_htonl>
 800f236:	4603      	mov	r3, r0
 800f238:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f23a:	7dfb      	ldrb	r3, [r7, #23]
 800f23c:	089b      	lsrs	r3, r3, #2
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	b29b      	uxth	r3, r3
 800f242:	3305      	adds	r3, #5
 800f244:	b29b      	uxth	r3, r3
 800f246:	031b      	lsls	r3, r3, #12
 800f248:	b29a      	uxth	r2, r3
 800f24a:	79fb      	ldrb	r3, [r7, #7]
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	4313      	orrs	r3, r2
 800f250:	b29a      	uxth	r2, r3
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	68dc      	ldr	r4, [r3, #12]
 800f256:	4610      	mov	r0, r2
 800f258:	f7fa fa18 	bl	800968c <lwip_htons>
 800f25c:	4603      	mov	r3, r0
 800f25e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	2200      	movs	r2, #0
 800f266:	749a      	strb	r2, [r3, #18]
 800f268:	2200      	movs	r2, #0
 800f26a:	74da      	strb	r2, [r3, #19]
  return seg;
 800f26c:	693b      	ldr	r3, [r7, #16]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	371c      	adds	r7, #28
 800f272:	46bd      	mov	sp, r7
 800f274:	bd90      	pop	{r4, r7, pc}
 800f276:	bf00      	nop
 800f278:	08017d4c 	.word	0x08017d4c
 800f27c:	08017d80 	.word	0x08017d80
 800f280:	08017da0 	.word	0x08017da0
 800f284:	08017dc8 	.word	0x08017dc8
 800f288:	08017dec 	.word	0x08017dec

0800f28c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f28c:	b590      	push	{r4, r7, lr}
 800f28e:	b08b      	sub	sp, #44	; 0x2c
 800f290:	af02      	add	r7, sp, #8
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	460b      	mov	r3, r1
 800f296:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f298:	2300      	movs	r3, #0
 800f29a:	61fb      	str	r3, [r7, #28]
 800f29c:	2300      	movs	r3, #0
 800f29e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d106      	bne.n	800f2b8 <tcp_split_unsent_seg+0x2c>
 800f2aa:	4b95      	ldr	r3, [pc, #596]	; (800f500 <tcp_split_unsent_seg+0x274>)
 800f2ac:	f240 324b 	movw	r2, #843	; 0x34b
 800f2b0:	4994      	ldr	r1, [pc, #592]	; (800f504 <tcp_split_unsent_seg+0x278>)
 800f2b2:	4895      	ldr	r0, [pc, #596]	; (800f508 <tcp_split_unsent_seg+0x27c>)
 800f2b4:	f006 f994 	bl	80155e0 <iprintf>

  useg = pcb->unsent;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d102      	bne.n	800f2ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c8:	e116      	b.n	800f4f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f2ca:	887b      	ldrh	r3, [r7, #2]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d109      	bne.n	800f2e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f2d0:	4b8b      	ldr	r3, [pc, #556]	; (800f500 <tcp_split_unsent_seg+0x274>)
 800f2d2:	f240 3253 	movw	r2, #851	; 0x353
 800f2d6:	498d      	ldr	r1, [pc, #564]	; (800f50c <tcp_split_unsent_seg+0x280>)
 800f2d8:	488b      	ldr	r0, [pc, #556]	; (800f508 <tcp_split_unsent_seg+0x27c>)
 800f2da:	f006 f981 	bl	80155e0 <iprintf>
    return ERR_VAL;
 800f2de:	f06f 0305 	mvn.w	r3, #5
 800f2e2:	e109      	b.n	800f4f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	891b      	ldrh	r3, [r3, #8]
 800f2e8:	887a      	ldrh	r2, [r7, #2]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d301      	bcc.n	800f2f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e102      	b.n	800f4f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2f6:	887a      	ldrh	r2, [r7, #2]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d906      	bls.n	800f30a <tcp_split_unsent_seg+0x7e>
 800f2fc:	4b80      	ldr	r3, [pc, #512]	; (800f500 <tcp_split_unsent_seg+0x274>)
 800f2fe:	f240 325b 	movw	r2, #859	; 0x35b
 800f302:	4983      	ldr	r1, [pc, #524]	; (800f510 <tcp_split_unsent_seg+0x284>)
 800f304:	4880      	ldr	r0, [pc, #512]	; (800f508 <tcp_split_unsent_seg+0x27c>)
 800f306:	f006 f96b 	bl	80155e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	891b      	ldrh	r3, [r3, #8]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d106      	bne.n	800f320 <tcp_split_unsent_seg+0x94>
 800f312:	4b7b      	ldr	r3, [pc, #492]	; (800f500 <tcp_split_unsent_seg+0x274>)
 800f314:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f318:	497e      	ldr	r1, [pc, #504]	; (800f514 <tcp_split_unsent_seg+0x288>)
 800f31a:	487b      	ldr	r0, [pc, #492]	; (800f508 <tcp_split_unsent_seg+0x27c>)
 800f31c:	f006 f960 	bl	80155e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	7a9b      	ldrb	r3, [r3, #10]
 800f324:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f326:	7bfb      	ldrb	r3, [r7, #15]
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	f003 0304 	and.w	r3, r3, #4
 800f330:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	891a      	ldrh	r2, [r3, #8]
 800f336:	887b      	ldrh	r3, [r7, #2]
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f33c:	7bbb      	ldrb	r3, [r7, #14]
 800f33e:	b29a      	uxth	r2, r3
 800f340:	89bb      	ldrh	r3, [r7, #12]
 800f342:	4413      	add	r3, r2
 800f344:	b29b      	uxth	r3, r3
 800f346:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f34a:	4619      	mov	r1, r3
 800f34c:	2036      	movs	r0, #54	; 0x36
 800f34e:	f7fb fabb 	bl	800a8c8 <pbuf_alloc>
 800f352:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 80b7 	beq.w	800f4ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	891a      	ldrh	r2, [r3, #8]
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	891b      	ldrh	r3, [r3, #8]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	b29a      	uxth	r2, r3
 800f36a:	887b      	ldrh	r3, [r7, #2]
 800f36c:	4413      	add	r3, r2
 800f36e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	6858      	ldr	r0, [r3, #4]
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	7bbb      	ldrb	r3, [r7, #14]
 800f37a:	18d1      	adds	r1, r2, r3
 800f37c:	897b      	ldrh	r3, [r7, #10]
 800f37e:	89ba      	ldrh	r2, [r7, #12]
 800f380:	f7fb ff80 	bl	800b284 <pbuf_copy_partial>
 800f384:	4603      	mov	r3, r0
 800f386:	461a      	mov	r2, r3
 800f388:	89bb      	ldrh	r3, [r7, #12]
 800f38a:	4293      	cmp	r3, r2
 800f38c:	f040 809f 	bne.w	800f4ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	899b      	ldrh	r3, [r3, #12]
 800f396:	b29b      	uxth	r3, r3
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fa f977 	bl	800968c <lwip_htons>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f3ac:	7efb      	ldrb	r3, [r7, #27]
 800f3ae:	f003 0308 	and.w	r3, r3, #8
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d007      	beq.n	800f3c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f3b6:	7efb      	ldrb	r3, [r7, #27]
 800f3b8:	f023 0308 	bic.w	r3, r3, #8
 800f3bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f3be:	7ebb      	ldrb	r3, [r7, #26]
 800f3c0:	f043 0308 	orr.w	r3, r3, #8
 800f3c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f3c6:	7efb      	ldrb	r3, [r7, #27]
 800f3c8:	f003 0301 	and.w	r3, r3, #1
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d007      	beq.n	800f3e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f3d0:	7efb      	ldrb	r3, [r7, #27]
 800f3d2:	f023 0301 	bic.w	r3, r3, #1
 800f3d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f3d8:	7ebb      	ldrb	r3, [r7, #26]
 800f3da:	f043 0301 	orr.w	r3, r3, #1
 800f3de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fa f965 	bl	80096b6 <lwip_htonl>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	887b      	ldrh	r3, [r7, #2]
 800f3f0:	18d1      	adds	r1, r2, r3
 800f3f2:	7eba      	ldrb	r2, [r7, #26]
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	6939      	ldr	r1, [r7, #16]
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7ff fea7 	bl	800f150 <tcp_create_segment>
 800f402:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d063      	beq.n	800f4d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fb fdc6 	bl	800afa0 <pbuf_clen>
 800f414:	4603      	mov	r3, r0
 800f416:	461a      	mov	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f41e:	1a9b      	subs	r3, r3, r2
 800f420:	b29a      	uxth	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	6858      	ldr	r0, [r3, #4]
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	891a      	ldrh	r2, [r3, #8]
 800f432:	89bb      	ldrh	r3, [r7, #12]
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	b29b      	uxth	r3, r3
 800f438:	4619      	mov	r1, r3
 800f43a:	f7fb fba3 	bl	800ab84 <pbuf_realloc>
  useg->len -= remainder;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	891a      	ldrh	r2, [r3, #8]
 800f442:	89bb      	ldrh	r3, [r7, #12]
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	b29a      	uxth	r2, r3
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	899b      	ldrh	r3, [r3, #12]
 800f452:	b29c      	uxth	r4, r3
 800f454:	7efb      	ldrb	r3, [r7, #27]
 800f456:	b29b      	uxth	r3, r3
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fa f917 	bl	800968c <lwip_htons>
 800f45e:	4603      	mov	r3, r0
 800f460:	461a      	mov	r2, r3
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	4322      	orrs	r2, r4
 800f468:	b292      	uxth	r2, r2
 800f46a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	4618      	mov	r0, r3
 800f472:	f7fb fd95 	bl	800afa0 <pbuf_clen>
 800f476:	4603      	mov	r3, r0
 800f478:	461a      	mov	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f480:	4413      	add	r3, r2
 800f482:	b29a      	uxth	r2, r3
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	4618      	mov	r0, r3
 800f490:	f7fb fd86 	bl	800afa0 <pbuf_clen>
 800f494:	4603      	mov	r3, r0
 800f496:	461a      	mov	r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f49e:	4413      	add	r3, r2
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	69fa      	ldr	r2, [r7, #28]
 800f4b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d103      	bne.n	800f4c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	e016      	b.n	800f4f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f4ca:	bf00      	nop
 800f4cc:	e002      	b.n	800f4d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f4ce:	bf00      	nop
 800f4d0:	e000      	b.n	800f4d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f4d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d006      	beq.n	800f4e8 <tcp_split_unsent_seg+0x25c>
 800f4da:	4b09      	ldr	r3, [pc, #36]	; (800f500 <tcp_split_unsent_seg+0x274>)
 800f4dc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f4e0:	490d      	ldr	r1, [pc, #52]	; (800f518 <tcp_split_unsent_seg+0x28c>)
 800f4e2:	4809      	ldr	r0, [pc, #36]	; (800f508 <tcp_split_unsent_seg+0x27c>)
 800f4e4:	f006 f87c 	bl	80155e0 <iprintf>
  if (p != NULL) {
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d002      	beq.n	800f4f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f4ee:	6938      	ldr	r0, [r7, #16]
 800f4f0:	f7fb fcce 	bl	800ae90 <pbuf_free>
  }

  return ERR_MEM;
 800f4f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3724      	adds	r7, #36	; 0x24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd90      	pop	{r4, r7, pc}
 800f500:	08017d4c 	.word	0x08017d4c
 800f504:	080180e0 	.word	0x080180e0
 800f508:	08017da0 	.word	0x08017da0
 800f50c:	08018104 	.word	0x08018104
 800f510:	08018128 	.word	0x08018128
 800f514:	08018138 	.word	0x08018138
 800f518:	08018148 	.word	0x08018148

0800f51c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f51c:	b590      	push	{r4, r7, lr}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d106      	bne.n	800f538 <tcp_send_fin+0x1c>
 800f52a:	4b21      	ldr	r3, [pc, #132]	; (800f5b0 <tcp_send_fin+0x94>)
 800f52c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f530:	4920      	ldr	r1, [pc, #128]	; (800f5b4 <tcp_send_fin+0x98>)
 800f532:	4821      	ldr	r0, [pc, #132]	; (800f5b8 <tcp_send_fin+0x9c>)
 800f534:	f006 f854 	bl	80155e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d02e      	beq.n	800f59e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f544:	60fb      	str	r3, [r7, #12]
 800f546:	e002      	b.n	800f54e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1f8      	bne.n	800f548 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	899b      	ldrh	r3, [r3, #12]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fa f894 	bl	800968c <lwip_htons>
 800f564:	4603      	mov	r3, r0
 800f566:	b2db      	uxtb	r3, r3
 800f568:	f003 0307 	and.w	r3, r3, #7
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d116      	bne.n	800f59e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	899b      	ldrh	r3, [r3, #12]
 800f576:	b29c      	uxth	r4, r3
 800f578:	2001      	movs	r0, #1
 800f57a:	f7fa f887 	bl	800968c <lwip_htons>
 800f57e:	4603      	mov	r3, r0
 800f580:	461a      	mov	r2, r3
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	68db      	ldr	r3, [r3, #12]
 800f586:	4322      	orrs	r2, r4
 800f588:	b292      	uxth	r2, r2
 800f58a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	8b5b      	ldrh	r3, [r3, #26]
 800f590:	f043 0320 	orr.w	r3, r3, #32
 800f594:	b29a      	uxth	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f59a:	2300      	movs	r3, #0
 800f59c:	e004      	b.n	800f5a8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f59e:	2101      	movs	r1, #1
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f80b 	bl	800f5bc <tcp_enqueue_flags>
 800f5a6:	4603      	mov	r3, r0
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3714      	adds	r7, #20
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd90      	pop	{r4, r7, pc}
 800f5b0:	08017d4c 	.word	0x08017d4c
 800f5b4:	08018154 	.word	0x08018154
 800f5b8:	08017da0 	.word	0x08017da0

0800f5bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b08a      	sub	sp, #40	; 0x28
 800f5c0:	af02      	add	r7, sp, #8
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f5d0:	78fb      	ldrb	r3, [r7, #3]
 800f5d2:	f003 0303 	and.w	r3, r3, #3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d106      	bne.n	800f5e8 <tcp_enqueue_flags+0x2c>
 800f5da:	4b67      	ldr	r3, [pc, #412]	; (800f778 <tcp_enqueue_flags+0x1bc>)
 800f5dc:	f240 4211 	movw	r2, #1041	; 0x411
 800f5e0:	4966      	ldr	r1, [pc, #408]	; (800f77c <tcp_enqueue_flags+0x1c0>)
 800f5e2:	4867      	ldr	r0, [pc, #412]	; (800f780 <tcp_enqueue_flags+0x1c4>)
 800f5e4:	f005 fffc 	bl	80155e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d106      	bne.n	800f5fc <tcp_enqueue_flags+0x40>
 800f5ee:	4b62      	ldr	r3, [pc, #392]	; (800f778 <tcp_enqueue_flags+0x1bc>)
 800f5f0:	f240 4213 	movw	r2, #1043	; 0x413
 800f5f4:	4963      	ldr	r1, [pc, #396]	; (800f784 <tcp_enqueue_flags+0x1c8>)
 800f5f6:	4862      	ldr	r0, [pc, #392]	; (800f780 <tcp_enqueue_flags+0x1c4>)
 800f5f8:	f005 fff2 	bl	80155e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f5fc:	78fb      	ldrb	r3, [r7, #3]
 800f5fe:	f003 0302 	and.w	r3, r3, #2
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f606:	2301      	movs	r3, #1
 800f608:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f60a:	7ffb      	ldrb	r3, [r7, #31]
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	f003 0304 	and.w	r3, r3, #4
 800f614:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	b29b      	uxth	r3, r3
 800f61a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f61e:	4619      	mov	r1, r3
 800f620:	2036      	movs	r0, #54	; 0x36
 800f622:	f7fb f951 	bl	800a8c8 <pbuf_alloc>
 800f626:	6138      	str	r0, [r7, #16]
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d109      	bne.n	800f642 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	8b5b      	ldrh	r3, [r3, #26]
 800f632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f636:	b29a      	uxth	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f63c:	f04f 33ff 	mov.w	r3, #4294967295
 800f640:	e095      	b.n	800f76e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	895a      	ldrh	r2, [r3, #10]
 800f646:	7dfb      	ldrb	r3, [r7, #23]
 800f648:	b29b      	uxth	r3, r3
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d206      	bcs.n	800f65c <tcp_enqueue_flags+0xa0>
 800f64e:	4b4a      	ldr	r3, [pc, #296]	; (800f778 <tcp_enqueue_flags+0x1bc>)
 800f650:	f240 4239 	movw	r2, #1081	; 0x439
 800f654:	494c      	ldr	r1, [pc, #304]	; (800f788 <tcp_enqueue_flags+0x1cc>)
 800f656:	484a      	ldr	r0, [pc, #296]	; (800f780 <tcp_enqueue_flags+0x1c4>)
 800f658:	f005 ffc2 	bl	80155e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f660:	78fa      	ldrb	r2, [r7, #3]
 800f662:	7ffb      	ldrb	r3, [r7, #31]
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	460b      	mov	r3, r1
 800f668:	6939      	ldr	r1, [r7, #16]
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f7ff fd70 	bl	800f150 <tcp_create_segment>
 800f670:	60f8      	str	r0, [r7, #12]
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d109      	bne.n	800f68c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	8b5b      	ldrh	r3, [r3, #26]
 800f67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f680:	b29a      	uxth	r2, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f686:	f04f 33ff 	mov.w	r3, #4294967295
 800f68a:	e070      	b.n	800f76e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	f003 0303 	and.w	r3, r3, #3
 800f694:	2b00      	cmp	r3, #0
 800f696:	d006      	beq.n	800f6a6 <tcp_enqueue_flags+0xea>
 800f698:	4b37      	ldr	r3, [pc, #220]	; (800f778 <tcp_enqueue_flags+0x1bc>)
 800f69a:	f240 4242 	movw	r2, #1090	; 0x442
 800f69e:	493b      	ldr	r1, [pc, #236]	; (800f78c <tcp_enqueue_flags+0x1d0>)
 800f6a0:	4837      	ldr	r0, [pc, #220]	; (800f780 <tcp_enqueue_flags+0x1c4>)
 800f6a2:	f005 ff9d 	bl	80155e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	891b      	ldrh	r3, [r3, #8]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d006      	beq.n	800f6bc <tcp_enqueue_flags+0x100>
 800f6ae:	4b32      	ldr	r3, [pc, #200]	; (800f778 <tcp_enqueue_flags+0x1bc>)
 800f6b0:	f240 4243 	movw	r2, #1091	; 0x443
 800f6b4:	4936      	ldr	r1, [pc, #216]	; (800f790 <tcp_enqueue_flags+0x1d4>)
 800f6b6:	4832      	ldr	r0, [pc, #200]	; (800f780 <tcp_enqueue_flags+0x1c4>)
 800f6b8:	f005 ff92 	bl	80155e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d103      	bne.n	800f6cc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	66da      	str	r2, [r3, #108]	; 0x6c
 800f6ca:	e00d      	b.n	800f6e8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6d0:	61bb      	str	r3, [r7, #24]
 800f6d2:	e002      	b.n	800f6da <tcp_enqueue_flags+0x11e>
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	61bb      	str	r3, [r7, #24]
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1f8      	bne.n	800f6d4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	68fa      	ldr	r2, [r7, #12]
 800f6e6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	f003 0302 	and.w	r3, r3, #2
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d104      	bne.n	800f704 <tcp_enqueue_flags+0x148>
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	2b00      	cmp	r3, #0
 800f702:	d004      	beq.n	800f70e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f708:	1c5a      	adds	r2, r3, #1
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f70e:	78fb      	ldrb	r3, [r7, #3]
 800f710:	f003 0301 	and.w	r3, r3, #1
 800f714:	2b00      	cmp	r3, #0
 800f716:	d006      	beq.n	800f726 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	8b5b      	ldrh	r3, [r3, #26]
 800f71c:	f043 0320 	orr.w	r3, r3, #32
 800f720:	b29a      	uxth	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fb fc38 	bl	800afa0 <pbuf_clen>
 800f730:	4603      	mov	r3, r0
 800f732:	461a      	mov	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f73a:	4413      	add	r3, r2
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00e      	beq.n	800f76c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f752:	2b00      	cmp	r3, #0
 800f754:	d10a      	bne.n	800f76c <tcp_enqueue_flags+0x1b0>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d106      	bne.n	800f76c <tcp_enqueue_flags+0x1b0>
 800f75e:	4b06      	ldr	r3, [pc, #24]	; (800f778 <tcp_enqueue_flags+0x1bc>)
 800f760:	f240 4265 	movw	r2, #1125	; 0x465
 800f764:	490b      	ldr	r1, [pc, #44]	; (800f794 <tcp_enqueue_flags+0x1d8>)
 800f766:	4806      	ldr	r0, [pc, #24]	; (800f780 <tcp_enqueue_flags+0x1c4>)
 800f768:	f005 ff3a 	bl	80155e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f76c:	2300      	movs	r3, #0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3720      	adds	r7, #32
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	08017d4c 	.word	0x08017d4c
 800f77c:	08018170 	.word	0x08018170
 800f780:	08017da0 	.word	0x08017da0
 800f784:	080181c8 	.word	0x080181c8
 800f788:	080181e8 	.word	0x080181e8
 800f78c:	08018224 	.word	0x08018224
 800f790:	0801823c 	.word	0x0801823c
 800f794:	08018268 	.word	0x08018268

0800f798 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f798:	b5b0      	push	{r4, r5, r7, lr}
 800f79a:	b08a      	sub	sp, #40	; 0x28
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <tcp_output+0x1c>
 800f7a6:	4b8a      	ldr	r3, [pc, #552]	; (800f9d0 <tcp_output+0x238>)
 800f7a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f7ac:	4989      	ldr	r1, [pc, #548]	; (800f9d4 <tcp_output+0x23c>)
 800f7ae:	488a      	ldr	r0, [pc, #552]	; (800f9d8 <tcp_output+0x240>)
 800f7b0:	f005 ff16 	bl	80155e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	7d1b      	ldrb	r3, [r3, #20]
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d106      	bne.n	800f7ca <tcp_output+0x32>
 800f7bc:	4b84      	ldr	r3, [pc, #528]	; (800f9d0 <tcp_output+0x238>)
 800f7be:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f7c2:	4986      	ldr	r1, [pc, #536]	; (800f9dc <tcp_output+0x244>)
 800f7c4:	4884      	ldr	r0, [pc, #528]	; (800f9d8 <tcp_output+0x240>)
 800f7c6:	f005 ff0b 	bl	80155e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f7ca:	4b85      	ldr	r3, [pc, #532]	; (800f9e0 <tcp_output+0x248>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d101      	bne.n	800f7d8 <tcp_output+0x40>
    return ERR_OK;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	e1ce      	b.n	800fb76 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	bf28      	it	cs
 800f7e8:	4613      	movcs	r3, r2
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d10b      	bne.n	800f812 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	8b5b      	ldrh	r3, [r3, #26]
 800f7fe:	f003 0302 	and.w	r3, r3, #2
 800f802:	2b00      	cmp	r3, #0
 800f804:	f000 81aa 	beq.w	800fb5c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 fdcb 	bl	80103a4 <tcp_send_empty_ack>
 800f80e:	4603      	mov	r3, r0
 800f810:	e1b1      	b.n	800fb76 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f812:	6879      	ldr	r1, [r7, #4]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	3304      	adds	r3, #4
 800f818:	461a      	mov	r2, r3
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f7ff fc7c 	bl	800f118 <tcp_route>
 800f820:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d102      	bne.n	800f82e <tcp_output+0x96>
    return ERR_RTE;
 800f828:	f06f 0303 	mvn.w	r3, #3
 800f82c:	e1a3      	b.n	800fb76 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d003      	beq.n	800f83c <tcp_output+0xa4>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d111      	bne.n	800f860 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d002      	beq.n	800f848 <tcp_output+0xb0>
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	3304      	adds	r3, #4
 800f846:	e000      	b.n	800f84a <tcp_output+0xb2>
 800f848:	2300      	movs	r3, #0
 800f84a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d102      	bne.n	800f858 <tcp_output+0xc0>
      return ERR_RTE;
 800f852:	f06f 0303 	mvn.w	r3, #3
 800f856:	e18e      	b.n	800fb76 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	4618      	mov	r0, r3
 800f868:	f7f9 ff25 	bl	80096b6 <lwip_htonl>
 800f86c:	4602      	mov	r2, r0
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f876:	8912      	ldrh	r2, [r2, #8]
 800f878:	4413      	add	r3, r2
 800f87a:	69ba      	ldr	r2, [r7, #24]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d227      	bcs.n	800f8d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f886:	461a      	mov	r2, r3
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d114      	bne.n	800f8b8 <tcp_output+0x120>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f892:	2b00      	cmp	r3, #0
 800f894:	d110      	bne.n	800f8b8 <tcp_output+0x120>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d10b      	bne.n	800f8b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	8b5b      	ldrh	r3, [r3, #26]
 800f8bc:	f003 0302 	and.w	r3, r3, #2
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 814d 	beq.w	800fb60 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 fd6c 	bl	80103a4 <tcp_send_empty_ack>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	e152      	b.n	800fb76 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f8de:	6a3b      	ldr	r3, [r7, #32]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 811c 	beq.w	800fb1e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f8e6:	e002      	b.n	800f8ee <tcp_output+0x156>
 800f8e8:	6a3b      	ldr	r3, [r7, #32]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	623b      	str	r3, [r7, #32]
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1f8      	bne.n	800f8e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f8f6:	e112      	b.n	800fb1e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	899b      	ldrh	r3, [r3, #12]
 800f8fe:	b29b      	uxth	r3, r3
 800f900:	4618      	mov	r0, r3
 800f902:	f7f9 fec3 	bl	800968c <lwip_htons>
 800f906:	4603      	mov	r3, r0
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	f003 0304 	and.w	r3, r3, #4
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d006      	beq.n	800f920 <tcp_output+0x188>
 800f912:	4b2f      	ldr	r3, [pc, #188]	; (800f9d0 <tcp_output+0x238>)
 800f914:	f240 5236 	movw	r2, #1334	; 0x536
 800f918:	4932      	ldr	r1, [pc, #200]	; (800f9e4 <tcp_output+0x24c>)
 800f91a:	482f      	ldr	r0, [pc, #188]	; (800f9d8 <tcp_output+0x240>)
 800f91c:	f005 fe60 	bl	80155e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f924:	2b00      	cmp	r3, #0
 800f926:	d01f      	beq.n	800f968 <tcp_output+0x1d0>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	8b5b      	ldrh	r3, [r3, #26]
 800f92c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f930:	2b00      	cmp	r3, #0
 800f932:	d119      	bne.n	800f968 <tcp_output+0x1d0>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00b      	beq.n	800f954 <tcp_output+0x1bc>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d110      	bne.n	800f968 <tcp_output+0x1d0>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f94a:	891a      	ldrh	r2, [r3, #8]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f950:	429a      	cmp	r2, r3
 800f952:	d209      	bcs.n	800f968 <tcp_output+0x1d0>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d004      	beq.n	800f968 <tcp_output+0x1d0>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f964:	2b08      	cmp	r3, #8
 800f966:	d901      	bls.n	800f96c <tcp_output+0x1d4>
 800f968:	2301      	movs	r3, #1
 800f96a:	e000      	b.n	800f96e <tcp_output+0x1d6>
 800f96c:	2300      	movs	r3, #0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d106      	bne.n	800f980 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8b5b      	ldrh	r3, [r3, #26]
 800f976:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f000 80e4 	beq.w	800fb48 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	7d1b      	ldrb	r3, [r3, #20]
 800f984:	2b02      	cmp	r3, #2
 800f986:	d00d      	beq.n	800f9a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	b29c      	uxth	r4, r3
 800f990:	2010      	movs	r0, #16
 800f992:	f7f9 fe7b 	bl	800968c <lwip_htons>
 800f996:	4603      	mov	r3, r0
 800f998:	461a      	mov	r2, r3
 800f99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	4322      	orrs	r2, r4
 800f9a0:	b292      	uxth	r2, r2
 800f9a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f9a4:	697a      	ldr	r2, [r7, #20]
 800f9a6:	6879      	ldr	r1, [r7, #4]
 800f9a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9aa:	f000 f909 	bl	800fbc0 <tcp_output_segment>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d016      	beq.n	800f9e8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	8b5b      	ldrh	r3, [r3, #26]
 800f9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	835a      	strh	r2, [r3, #26]
      return err;
 800f9c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9cc:	e0d3      	b.n	800fb76 <tcp_output+0x3de>
 800f9ce:	bf00      	nop
 800f9d0:	08017d4c 	.word	0x08017d4c
 800f9d4:	08018290 	.word	0x08018290
 800f9d8:	08017da0 	.word	0x08017da0
 800f9dc:	080182a8 	.word	0x080182a8
 800f9e0:	200086ac 	.word	0x200086ac
 800f9e4:	080182d0 	.word	0x080182d0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	7d1b      	ldrb	r3, [r3, #20]
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	d006      	beq.n	800fa06 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	8b5b      	ldrh	r3, [r3, #26]
 800f9fc:	f023 0303 	bic.w	r3, r3, #3
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7f9 fe52 	bl	80096b6 <lwip_htonl>
 800fa12:	4604      	mov	r4, r0
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	891b      	ldrh	r3, [r3, #8]
 800fa18:	461d      	mov	r5, r3
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	899b      	ldrh	r3, [r3, #12]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7f9 fe32 	bl	800968c <lwip_htons>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	f003 0303 	and.w	r3, r3, #3
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <tcp_output+0x2a0>
 800fa34:	2301      	movs	r3, #1
 800fa36:	e000      	b.n	800fa3a <tcp_output+0x2a2>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	442b      	add	r3, r5
 800fa3c:	4423      	add	r3, r4
 800fa3e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	1ad3      	subs	r3, r2, r3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	da02      	bge.n	800fa52 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68ba      	ldr	r2, [r7, #8]
 800fa50:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa54:	891b      	ldrh	r3, [r3, #8]
 800fa56:	461c      	mov	r4, r3
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	899b      	ldrh	r3, [r3, #12]
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7f9 fe13 	bl	800968c <lwip_htons>
 800fa66:	4603      	mov	r3, r0
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	f003 0303 	and.w	r3, r3, #3
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <tcp_output+0x2de>
 800fa72:	2301      	movs	r3, #1
 800fa74:	e000      	b.n	800fa78 <tcp_output+0x2e0>
 800fa76:	2300      	movs	r3, #0
 800fa78:	4423      	add	r3, r4
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d049      	beq.n	800fb12 <tcp_output+0x37a>
      seg->next = NULL;
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa80:	2200      	movs	r2, #0
 800fa82:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d105      	bne.n	800fa98 <tcp_output+0x300>
        pcb->unacked = seg;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa90:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa94:	623b      	str	r3, [r7, #32]
 800fa96:	e03f      	b.n	800fb18 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7f9 fe09 	bl	80096b6 <lwip_htonl>
 800faa4:	4604      	mov	r4, r0
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	4618      	mov	r0, r3
 800faae:	f7f9 fe02 	bl	80096b6 <lwip_htonl>
 800fab2:	4603      	mov	r3, r0
 800fab4:	1ae3      	subs	r3, r4, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	da24      	bge.n	800fb04 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3370      	adds	r3, #112	; 0x70
 800fabe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fac0:	e002      	b.n	800fac8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d011      	beq.n	800faf4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	68db      	ldr	r3, [r3, #12]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f9 fdec 	bl	80096b6 <lwip_htonl>
 800fade:	4604      	mov	r4, r0
 800fae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7f9 fde5 	bl	80096b6 <lwip_htonl>
 800faec:	4603      	mov	r3, r0
 800faee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	dbe6      	blt.n	800fac2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb00:	601a      	str	r2, [r3, #0]
 800fb02:	e009      	b.n	800fb18 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fb04:	6a3b      	ldr	r3, [r7, #32]
 800fb06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb08:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fb0a:	6a3b      	ldr	r3, [r7, #32]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	623b      	str	r3, [r7, #32]
 800fb10:	e002      	b.n	800fb18 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fb12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb14:	f7fc fc3f 	bl	800c396 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d012      	beq.n	800fb4a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f9 fdc3 	bl	80096b6 <lwip_htonl>
 800fb30:	4602      	mov	r2, r0
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb3a:	8912      	ldrh	r2, [r2, #8]
 800fb3c:	4413      	add	r3, r2
  while (seg != NULL &&
 800fb3e:	69ba      	ldr	r2, [r7, #24]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	f4bf aed9 	bcs.w	800f8f8 <tcp_output+0x160>
 800fb46:	e000      	b.n	800fb4a <tcp_output+0x3b2>
      break;
 800fb48:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d108      	bne.n	800fb64 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fb5a:	e004      	b.n	800fb66 <tcp_output+0x3ce>
    goto output_done;
 800fb5c:	bf00      	nop
 800fb5e:	e002      	b.n	800fb66 <tcp_output+0x3ce>
    goto output_done;
 800fb60:	bf00      	nop
 800fb62:	e000      	b.n	800fb66 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fb64:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	8b5b      	ldrh	r3, [r3, #26]
 800fb6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3728      	adds	r7, #40	; 0x28
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bdb0      	pop	{r4, r5, r7, pc}
 800fb7e:	bf00      	nop

0800fb80 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d106      	bne.n	800fb9c <tcp_output_segment_busy+0x1c>
 800fb8e:	4b09      	ldr	r3, [pc, #36]	; (800fbb4 <tcp_output_segment_busy+0x34>)
 800fb90:	f240 529a 	movw	r2, #1434	; 0x59a
 800fb94:	4908      	ldr	r1, [pc, #32]	; (800fbb8 <tcp_output_segment_busy+0x38>)
 800fb96:	4809      	ldr	r0, [pc, #36]	; (800fbbc <tcp_output_segment_busy+0x3c>)
 800fb98:	f005 fd22 	bl	80155e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	7b9b      	ldrb	r3, [r3, #14]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d001      	beq.n	800fbaa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fba6:	2301      	movs	r3, #1
 800fba8:	e000      	b.n	800fbac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fbaa:	2300      	movs	r3, #0
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	08017d4c 	.word	0x08017d4c
 800fbb8:	080182e8 	.word	0x080182e8
 800fbbc:	08017da0 	.word	0x08017da0

0800fbc0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fbc0:	b5b0      	push	{r4, r5, r7, lr}
 800fbc2:	b08c      	sub	sp, #48	; 0x30
 800fbc4:	af04      	add	r7, sp, #16
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d106      	bne.n	800fbe0 <tcp_output_segment+0x20>
 800fbd2:	4b63      	ldr	r3, [pc, #396]	; (800fd60 <tcp_output_segment+0x1a0>)
 800fbd4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800fbd8:	4962      	ldr	r1, [pc, #392]	; (800fd64 <tcp_output_segment+0x1a4>)
 800fbda:	4863      	ldr	r0, [pc, #396]	; (800fd68 <tcp_output_segment+0x1a8>)
 800fbdc:	f005 fd00 	bl	80155e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d106      	bne.n	800fbf4 <tcp_output_segment+0x34>
 800fbe6:	4b5e      	ldr	r3, [pc, #376]	; (800fd60 <tcp_output_segment+0x1a0>)
 800fbe8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fbec:	495f      	ldr	r1, [pc, #380]	; (800fd6c <tcp_output_segment+0x1ac>)
 800fbee:	485e      	ldr	r0, [pc, #376]	; (800fd68 <tcp_output_segment+0x1a8>)
 800fbf0:	f005 fcf6 	bl	80155e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d106      	bne.n	800fc08 <tcp_output_segment+0x48>
 800fbfa:	4b59      	ldr	r3, [pc, #356]	; (800fd60 <tcp_output_segment+0x1a0>)
 800fbfc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800fc00:	495b      	ldr	r1, [pc, #364]	; (800fd70 <tcp_output_segment+0x1b0>)
 800fc02:	4859      	ldr	r0, [pc, #356]	; (800fd68 <tcp_output_segment+0x1a8>)
 800fc04:	f005 fcec 	bl	80155e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff ffb9 	bl	800fb80 <tcp_output_segment_busy>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d001      	beq.n	800fc18 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fc14:	2300      	movs	r3, #0
 800fc16:	e09f      	b.n	800fd58 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	68dc      	ldr	r4, [r3, #12]
 800fc20:	4610      	mov	r0, r2
 800fc22:	f7f9 fd48 	bl	80096b6 <lwip_htonl>
 800fc26:	4603      	mov	r3, r0
 800fc28:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	68dc      	ldr	r4, [r3, #12]
 800fc32:	4610      	mov	r0, r2
 800fc34:	f7f9 fd2a 	bl	800968c <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc40:	68ba      	ldr	r2, [r7, #8]
 800fc42:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fc44:	441a      	add	r2, r3
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	3314      	adds	r3, #20
 800fc50:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	7a9b      	ldrb	r3, [r3, #10]
 800fc56:	f003 0301 	and.w	r3, r3, #1
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d015      	beq.n	800fc8a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	3304      	adds	r3, #4
 800fc62:	461a      	mov	r2, r3
 800fc64:	6879      	ldr	r1, [r7, #4]
 800fc66:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fc6a:	f7fc fe8b 	bl	800c984 <tcp_eff_send_mss_netif>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fc72:	8b7b      	ldrh	r3, [r7, #26]
 800fc74:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7f9 fd1c 	bl	80096b6 <lwip_htonl>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	3304      	adds	r3, #4
 800fc88:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	da02      	bge.n	800fc9a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	2200      	movs	r2, #0
 800fc98:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d10c      	bne.n	800fcbc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fca2:	4b34      	ldr	r3, [pc, #208]	; (800fd74 <tcp_output_segment+0x1b4>)
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f9 fd00 	bl	80096b6 <lwip_htonl>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	68da      	ldr	r2, [r3, #12]
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	8959      	ldrh	r1, [r3, #10]
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	8b3a      	ldrh	r2, [r7, #24]
 800fcd6:	1a8a      	subs	r2, r1, r2
 800fcd8:	b292      	uxth	r2, r2
 800fcda:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	8919      	ldrh	r1, [r3, #8]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	8b3a      	ldrh	r2, [r7, #24]
 800fce8:	1a8a      	subs	r2, r1, r2
 800fcea:	b292      	uxth	r2, r2
 800fcec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	68fa      	ldr	r2, [r7, #12]
 800fcf4:	68d2      	ldr	r2, [r2, #12]
 800fcf6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	741a      	strb	r2, [r3, #16]
 800fd00:	2200      	movs	r2, #0
 800fd02:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	f103 0214 	add.w	r2, r3, #20
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	7a9b      	ldrb	r3, [r3, #10]
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	f003 0304 	and.w	r3, r3, #4
 800fd16:	4413      	add	r3, r2
 800fd18:	69fa      	ldr	r2, [r7, #28]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d006      	beq.n	800fd2c <tcp_output_segment+0x16c>
 800fd1e:	4b10      	ldr	r3, [pc, #64]	; (800fd60 <tcp_output_segment+0x1a0>)
 800fd20:	f240 621c 	movw	r2, #1564	; 0x61c
 800fd24:	4914      	ldr	r1, [pc, #80]	; (800fd78 <tcp_output_segment+0x1b8>)
 800fd26:	4810      	ldr	r0, [pc, #64]	; (800fd68 <tcp_output_segment+0x1a8>)
 800fd28:	f005 fc5a 	bl	80155e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6858      	ldr	r0, [r3, #4]
 800fd30:	68b9      	ldr	r1, [r7, #8]
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	1d1c      	adds	r4, r3, #4
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	7add      	ldrb	r5, [r3, #11]
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	7a9b      	ldrb	r3, [r3, #10]
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	9202      	str	r2, [sp, #8]
 800fd42:	2206      	movs	r2, #6
 800fd44:	9201      	str	r2, [sp, #4]
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	462b      	mov	r3, r5
 800fd4a:	4622      	mov	r2, r4
 800fd4c:	f004 fbd0 	bl	80144f0 <ip4_output_if>
 800fd50:	4603      	mov	r3, r0
 800fd52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fd54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3720      	adds	r7, #32
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd60:	08017d4c 	.word	0x08017d4c
 800fd64:	08018310 	.word	0x08018310
 800fd68:	08017da0 	.word	0x08017da0
 800fd6c:	08018330 	.word	0x08018330
 800fd70:	08018350 	.word	0x08018350
 800fd74:	20008660 	.word	0x20008660
 800fd78:	08018374 	.word	0x08018374

0800fd7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fd7c:	b5b0      	push	{r4, r5, r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d106      	bne.n	800fd98 <tcp_rexmit_rto_prepare+0x1c>
 800fd8a:	4b31      	ldr	r3, [pc, #196]	; (800fe50 <tcp_rexmit_rto_prepare+0xd4>)
 800fd8c:	f240 6263 	movw	r2, #1635	; 0x663
 800fd90:	4930      	ldr	r1, [pc, #192]	; (800fe54 <tcp_rexmit_rto_prepare+0xd8>)
 800fd92:	4831      	ldr	r0, [pc, #196]	; (800fe58 <tcp_rexmit_rto_prepare+0xdc>)
 800fd94:	f005 fc24 	bl	80155e0 <iprintf>

  if (pcb->unacked == NULL) {
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d102      	bne.n	800fda6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fda0:	f06f 0305 	mvn.w	r3, #5
 800fda4:	e050      	b.n	800fe48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdaa:	60fb      	str	r3, [r7, #12]
 800fdac:	e00b      	b.n	800fdc6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f7ff fee6 	bl	800fb80 <tcp_output_segment_busy>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fdba:	f06f 0305 	mvn.w	r3, #5
 800fdbe:	e043      	b.n	800fe48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	60fb      	str	r3, [r7, #12]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1ef      	bne.n	800fdae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f7ff fed6 	bl	800fb80 <tcp_output_segment_busy>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fdda:	f06f 0305 	mvn.w	r3, #5
 800fdde:	e033      	b.n	800fe48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	8b5b      	ldrh	r3, [r3, #26]
 800fdfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7f9 fc53 	bl	80096b6 <lwip_htonl>
 800fe10:	4604      	mov	r4, r0
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	891b      	ldrh	r3, [r3, #8]
 800fe16:	461d      	mov	r5, r3
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	899b      	ldrh	r3, [r3, #12]
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7f9 fc33 	bl	800968c <lwip_htons>
 800fe26:	4603      	mov	r3, r0
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	f003 0303 	and.w	r3, r3, #3
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d001      	beq.n	800fe36 <tcp_rexmit_rto_prepare+0xba>
 800fe32:	2301      	movs	r3, #1
 800fe34:	e000      	b.n	800fe38 <tcp_rexmit_rto_prepare+0xbc>
 800fe36:	2300      	movs	r3, #0
 800fe38:	442b      	add	r3, r5
 800fe3a:	18e2      	adds	r2, r4, r3
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bdb0      	pop	{r4, r5, r7, pc}
 800fe50:	08017d4c 	.word	0x08017d4c
 800fe54:	08018388 	.word	0x08018388
 800fe58:	08017da0 	.word	0x08017da0

0800fe5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d106      	bne.n	800fe78 <tcp_rexmit_rto_commit+0x1c>
 800fe6a:	4b0d      	ldr	r3, [pc, #52]	; (800fea0 <tcp_rexmit_rto_commit+0x44>)
 800fe6c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fe70:	490c      	ldr	r1, [pc, #48]	; (800fea4 <tcp_rexmit_rto_commit+0x48>)
 800fe72:	480d      	ldr	r0, [pc, #52]	; (800fea8 <tcp_rexmit_rto_commit+0x4c>)
 800fe74:	f005 fbb4 	bl	80155e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe7e:	2bff      	cmp	r3, #255	; 0xff
 800fe80:	d007      	beq.n	800fe92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe88:	3301      	adds	r3, #1
 800fe8a:	b2da      	uxtb	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7ff fc80 	bl	800f798 <tcp_output>
}
 800fe98:	bf00      	nop
 800fe9a:	3708      	adds	r7, #8
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	08017d4c 	.word	0x08017d4c
 800fea4:	080183ac 	.word	0x080183ac
 800fea8:	08017da0 	.word	0x08017da0

0800feac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d106      	bne.n	800fec8 <tcp_rexmit_rto+0x1c>
 800feba:	4b0a      	ldr	r3, [pc, #40]	; (800fee4 <tcp_rexmit_rto+0x38>)
 800febc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fec0:	4909      	ldr	r1, [pc, #36]	; (800fee8 <tcp_rexmit_rto+0x3c>)
 800fec2:	480a      	ldr	r0, [pc, #40]	; (800feec <tcp_rexmit_rto+0x40>)
 800fec4:	f005 fb8c 	bl	80155e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7ff ff57 	bl	800fd7c <tcp_rexmit_rto_prepare>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d102      	bne.n	800feda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f7ff ffc1 	bl	800fe5c <tcp_rexmit_rto_commit>
  }
}
 800feda:	bf00      	nop
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	08017d4c 	.word	0x08017d4c
 800fee8:	080183d0 	.word	0x080183d0
 800feec:	08017da0 	.word	0x08017da0

0800fef0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fef0:	b590      	push	{r4, r7, lr}
 800fef2:	b085      	sub	sp, #20
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d106      	bne.n	800ff0c <tcp_rexmit+0x1c>
 800fefe:	4b2f      	ldr	r3, [pc, #188]	; (800ffbc <tcp_rexmit+0xcc>)
 800ff00:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ff04:	492e      	ldr	r1, [pc, #184]	; (800ffc0 <tcp_rexmit+0xd0>)
 800ff06:	482f      	ldr	r0, [pc, #188]	; (800ffc4 <tcp_rexmit+0xd4>)
 800ff08:	f005 fb6a 	bl	80155e0 <iprintf>

  if (pcb->unacked == NULL) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d102      	bne.n	800ff1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ff14:	f06f 0305 	mvn.w	r3, #5
 800ff18:	e04c      	b.n	800ffb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ff20:	68b8      	ldr	r0, [r7, #8]
 800ff22:	f7ff fe2d 	bl	800fb80 <tcp_output_segment_busy>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ff2c:	f06f 0305 	mvn.w	r3, #5
 800ff30:	e040      	b.n	800ffb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	336c      	adds	r3, #108	; 0x6c
 800ff3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ff40:	e002      	b.n	800ff48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d011      	beq.n	800ff74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7f9 fbac 	bl	80096b6 <lwip_htonl>
 800ff5e:	4604      	mov	r4, r0
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7f9 fba5 	bl	80096b6 <lwip_htonl>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	dbe6      	blt.n	800ff42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	68ba      	ldr	r2, [r7, #8]
 800ff80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d103      	bne.n	800ff92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff98:	2bff      	cmp	r3, #255	; 0xff
 800ff9a:	d007      	beq.n	800ffac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	b2da      	uxtb	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3714      	adds	r7, #20
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd90      	pop	{r4, r7, pc}
 800ffbc:	08017d4c 	.word	0x08017d4c
 800ffc0:	080183ec 	.word	0x080183ec
 800ffc4:	08017da0 	.word	0x08017da0

0800ffc8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d106      	bne.n	800ffe4 <tcp_rexmit_fast+0x1c>
 800ffd6:	4b2a      	ldr	r3, [pc, #168]	; (8010080 <tcp_rexmit_fast+0xb8>)
 800ffd8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ffdc:	4929      	ldr	r1, [pc, #164]	; (8010084 <tcp_rexmit_fast+0xbc>)
 800ffde:	482a      	ldr	r0, [pc, #168]	; (8010088 <tcp_rexmit_fast+0xc0>)
 800ffe0:	f005 fafe 	bl	80155e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d044      	beq.n	8010076 <tcp_rexmit_fast+0xae>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	8b5b      	ldrh	r3, [r3, #26]
 800fff0:	f003 0304 	and.w	r3, r3, #4
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d13e      	bne.n	8010076 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7ff ff79 	bl	800fef0 <tcp_rexmit>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d138      	bne.n	8010076 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010010:	4293      	cmp	r3, r2
 8010012:	bf28      	it	cs
 8010014:	4613      	movcs	r3, r2
 8010016:	b29b      	uxth	r3, r3
 8010018:	0fda      	lsrs	r2, r3, #31
 801001a:	4413      	add	r3, r2
 801001c:	105b      	asrs	r3, r3, #1
 801001e:	b29a      	uxth	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801002c:	461a      	mov	r2, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010032:	005b      	lsls	r3, r3, #1
 8010034:	429a      	cmp	r2, r3
 8010036:	d206      	bcs.n	8010046 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801003c:	005b      	lsls	r3, r3, #1
 801003e:	b29a      	uxth	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010050:	4619      	mov	r1, r3
 8010052:	0049      	lsls	r1, r1, #1
 8010054:	440b      	add	r3, r1
 8010056:	b29b      	uxth	r3, r3
 8010058:	4413      	add	r3, r2
 801005a:	b29a      	uxth	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	8b5b      	ldrh	r3, [r3, #26]
 8010066:	f043 0304 	orr.w	r3, r3, #4
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010076:	bf00      	nop
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	08017d4c 	.word	0x08017d4c
 8010084:	08018404 	.word	0x08018404
 8010088:	08017da0 	.word	0x08017da0

0801008c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	607b      	str	r3, [r7, #4]
 8010096:	460b      	mov	r3, r1
 8010098:	817b      	strh	r3, [r7, #10]
 801009a:	4613      	mov	r3, r2
 801009c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801009e:	897a      	ldrh	r2, [r7, #10]
 80100a0:	893b      	ldrh	r3, [r7, #8]
 80100a2:	4413      	add	r3, r2
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	3314      	adds	r3, #20
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100ae:	4619      	mov	r1, r3
 80100b0:	2022      	movs	r0, #34	; 0x22
 80100b2:	f7fa fc09 	bl	800a8c8 <pbuf_alloc>
 80100b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d04d      	beq.n	801015a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80100be:	897b      	ldrh	r3, [r7, #10]
 80100c0:	3313      	adds	r3, #19
 80100c2:	697a      	ldr	r2, [r7, #20]
 80100c4:	8952      	ldrh	r2, [r2, #10]
 80100c6:	4293      	cmp	r3, r2
 80100c8:	db06      	blt.n	80100d8 <tcp_output_alloc_header_common+0x4c>
 80100ca:	4b26      	ldr	r3, [pc, #152]	; (8010164 <tcp_output_alloc_header_common+0xd8>)
 80100cc:	f240 7223 	movw	r2, #1827	; 0x723
 80100d0:	4925      	ldr	r1, [pc, #148]	; (8010168 <tcp_output_alloc_header_common+0xdc>)
 80100d2:	4826      	ldr	r0, [pc, #152]	; (801016c <tcp_output_alloc_header_common+0xe0>)
 80100d4:	f005 fa84 	bl	80155e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80100de:	8c3b      	ldrh	r3, [r7, #32]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7f9 fad3 	bl	800968c <lwip_htons>
 80100e6:	4603      	mov	r3, r0
 80100e8:	461a      	mov	r2, r3
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80100ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7f9 facb 	bl	800968c <lwip_htons>
 80100f6:	4603      	mov	r3, r0
 80100f8:	461a      	mov	r2, r3
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f7f9 fad6 	bl	80096b6 <lwip_htonl>
 801010a:	4602      	mov	r2, r0
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010110:	897b      	ldrh	r3, [r7, #10]
 8010112:	089b      	lsrs	r3, r3, #2
 8010114:	b29b      	uxth	r3, r3
 8010116:	3305      	adds	r3, #5
 8010118:	b29b      	uxth	r3, r3
 801011a:	031b      	lsls	r3, r3, #12
 801011c:	b29a      	uxth	r2, r3
 801011e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010122:	b29b      	uxth	r3, r3
 8010124:	4313      	orrs	r3, r2
 8010126:	b29b      	uxth	r3, r3
 8010128:	4618      	mov	r0, r3
 801012a:	f7f9 faaf 	bl	800968c <lwip_htons>
 801012e:	4603      	mov	r3, r0
 8010130:	461a      	mov	r2, r3
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010136:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010138:	4618      	mov	r0, r3
 801013a:	f7f9 faa7 	bl	800968c <lwip_htons>
 801013e:	4603      	mov	r3, r0
 8010140:	461a      	mov	r2, r3
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	2200      	movs	r2, #0
 801014a:	741a      	strb	r2, [r3, #16]
 801014c:	2200      	movs	r2, #0
 801014e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	2200      	movs	r2, #0
 8010154:	749a      	strb	r2, [r3, #18]
 8010156:	2200      	movs	r2, #0
 8010158:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801015a:	697b      	ldr	r3, [r7, #20]
}
 801015c:	4618      	mov	r0, r3
 801015e:	3718      	adds	r7, #24
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}
 8010164:	08017d4c 	.word	0x08017d4c
 8010168:	08018424 	.word	0x08018424
 801016c:	08017da0 	.word	0x08017da0

08010170 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010170:	b5b0      	push	{r4, r5, r7, lr}
 8010172:	b08a      	sub	sp, #40	; 0x28
 8010174:	af04      	add	r7, sp, #16
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	607b      	str	r3, [r7, #4]
 801017a:	460b      	mov	r3, r1
 801017c:	817b      	strh	r3, [r7, #10]
 801017e:	4613      	mov	r3, r2
 8010180:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d106      	bne.n	8010196 <tcp_output_alloc_header+0x26>
 8010188:	4b15      	ldr	r3, [pc, #84]	; (80101e0 <tcp_output_alloc_header+0x70>)
 801018a:	f240 7242 	movw	r2, #1858	; 0x742
 801018e:	4915      	ldr	r1, [pc, #84]	; (80101e4 <tcp_output_alloc_header+0x74>)
 8010190:	4815      	ldr	r0, [pc, #84]	; (80101e8 <tcp_output_alloc_header+0x78>)
 8010192:	f005 fa25 	bl	80155e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	8adb      	ldrh	r3, [r3, #22]
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	8b12      	ldrh	r2, [r2, #24]
 80101a2:	68f9      	ldr	r1, [r7, #12]
 80101a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80101a6:	893d      	ldrh	r5, [r7, #8]
 80101a8:	897c      	ldrh	r4, [r7, #10]
 80101aa:	9103      	str	r1, [sp, #12]
 80101ac:	2110      	movs	r1, #16
 80101ae:	9102      	str	r1, [sp, #8]
 80101b0:	9201      	str	r2, [sp, #4]
 80101b2:	9300      	str	r3, [sp, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	462a      	mov	r2, r5
 80101b8:	4621      	mov	r1, r4
 80101ba:	f7ff ff67 	bl	801008c <tcp_output_alloc_header_common>
 80101be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d006      	beq.n	80101d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ca:	68fa      	ldr	r2, [r7, #12]
 80101cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80101ce:	441a      	add	r2, r3
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80101d4:	697b      	ldr	r3, [r7, #20]
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3718      	adds	r7, #24
 80101da:	46bd      	mov	sp, r7
 80101dc:	bdb0      	pop	{r4, r5, r7, pc}
 80101de:	bf00      	nop
 80101e0:	08017d4c 	.word	0x08017d4c
 80101e4:	08018454 	.word	0x08018454
 80101e8:	08017da0 	.word	0x08017da0

080101ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b088      	sub	sp, #32
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	4611      	mov	r1, r2
 80101f8:	461a      	mov	r2, r3
 80101fa:	460b      	mov	r3, r1
 80101fc:	71fb      	strb	r3, [r7, #7]
 80101fe:	4613      	mov	r3, r2
 8010200:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010202:	2300      	movs	r3, #0
 8010204:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d106      	bne.n	801021a <tcp_output_fill_options+0x2e>
 801020c:	4b13      	ldr	r3, [pc, #76]	; (801025c <tcp_output_fill_options+0x70>)
 801020e:	f240 7256 	movw	r2, #1878	; 0x756
 8010212:	4913      	ldr	r1, [pc, #76]	; (8010260 <tcp_output_fill_options+0x74>)
 8010214:	4813      	ldr	r0, [pc, #76]	; (8010264 <tcp_output_fill_options+0x78>)
 8010216:	f005 f9e3 	bl	80155e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	3314      	adds	r3, #20
 8010224:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	f103 0214 	add.w	r2, r3, #20
 801022c:	8bfb      	ldrh	r3, [r7, #30]
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4619      	mov	r1, r3
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	f003 0304 	and.w	r3, r3, #4
 801023a:	440b      	add	r3, r1
 801023c:	4413      	add	r3, r2
 801023e:	697a      	ldr	r2, [r7, #20]
 8010240:	429a      	cmp	r2, r3
 8010242:	d006      	beq.n	8010252 <tcp_output_fill_options+0x66>
 8010244:	4b05      	ldr	r3, [pc, #20]	; (801025c <tcp_output_fill_options+0x70>)
 8010246:	f240 7275 	movw	r2, #1909	; 0x775
 801024a:	4907      	ldr	r1, [pc, #28]	; (8010268 <tcp_output_fill_options+0x7c>)
 801024c:	4805      	ldr	r0, [pc, #20]	; (8010264 <tcp_output_fill_options+0x78>)
 801024e:	f005 f9c7 	bl	80155e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010252:	bf00      	nop
 8010254:	3720      	adds	r7, #32
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	08017d4c 	.word	0x08017d4c
 8010260:	0801847c 	.word	0x0801847c
 8010264:	08017da0 	.word	0x08017da0
 8010268:	08018374 	.word	0x08018374

0801026c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b08a      	sub	sp, #40	; 0x28
 8010270:	af04      	add	r7, sp, #16
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d106      	bne.n	801028e <tcp_output_control_segment+0x22>
 8010280:	4b1c      	ldr	r3, [pc, #112]	; (80102f4 <tcp_output_control_segment+0x88>)
 8010282:	f240 7287 	movw	r2, #1927	; 0x787
 8010286:	491c      	ldr	r1, [pc, #112]	; (80102f8 <tcp_output_control_segment+0x8c>)
 8010288:	481c      	ldr	r0, [pc, #112]	; (80102fc <tcp_output_control_segment+0x90>)
 801028a:	f005 f9a9 	bl	80155e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801028e:	683a      	ldr	r2, [r7, #0]
 8010290:	6879      	ldr	r1, [r7, #4]
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f7fe ff40 	bl	800f118 <tcp_route>
 8010298:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d102      	bne.n	80102a6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80102a0:	23fc      	movs	r3, #252	; 0xfc
 80102a2:	75fb      	strb	r3, [r7, #23]
 80102a4:	e01c      	b.n	80102e0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d006      	beq.n	80102ba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	7adb      	ldrb	r3, [r3, #11]
 80102b0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	7a9b      	ldrb	r3, [r3, #10]
 80102b6:	757b      	strb	r3, [r7, #21]
 80102b8:	e003      	b.n	80102c2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80102ba:	23ff      	movs	r3, #255	; 0xff
 80102bc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80102be:	2300      	movs	r3, #0
 80102c0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80102c2:	7dba      	ldrb	r2, [r7, #22]
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	9302      	str	r3, [sp, #8]
 80102c8:	2306      	movs	r3, #6
 80102ca:	9301      	str	r3, [sp, #4]
 80102cc:	7d7b      	ldrb	r3, [r7, #21]
 80102ce:	9300      	str	r3, [sp, #0]
 80102d0:	4613      	mov	r3, r2
 80102d2:	683a      	ldr	r2, [r7, #0]
 80102d4:	6879      	ldr	r1, [r7, #4]
 80102d6:	68b8      	ldr	r0, [r7, #8]
 80102d8:	f004 f90a 	bl	80144f0 <ip4_output_if>
 80102dc:	4603      	mov	r3, r0
 80102de:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80102e0:	68b8      	ldr	r0, [r7, #8]
 80102e2:	f7fa fdd5 	bl	800ae90 <pbuf_free>
  return err;
 80102e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3718      	adds	r7, #24
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	08017d4c 	.word	0x08017d4c
 80102f8:	080184a4 	.word	0x080184a4
 80102fc:	08017da0 	.word	0x08017da0

08010300 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010300:	b590      	push	{r4, r7, lr}
 8010302:	b08b      	sub	sp, #44	; 0x2c
 8010304:	af04      	add	r7, sp, #16
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	607a      	str	r2, [r7, #4]
 801030c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d106      	bne.n	8010322 <tcp_rst+0x22>
 8010314:	4b1f      	ldr	r3, [pc, #124]	; (8010394 <tcp_rst+0x94>)
 8010316:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801031a:	491f      	ldr	r1, [pc, #124]	; (8010398 <tcp_rst+0x98>)
 801031c:	481f      	ldr	r0, [pc, #124]	; (801039c <tcp_rst+0x9c>)
 801031e:	f005 f95f 	bl	80155e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	2b00      	cmp	r3, #0
 8010326:	d106      	bne.n	8010336 <tcp_rst+0x36>
 8010328:	4b1a      	ldr	r3, [pc, #104]	; (8010394 <tcp_rst+0x94>)
 801032a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801032e:	491c      	ldr	r1, [pc, #112]	; (80103a0 <tcp_rst+0xa0>)
 8010330:	481a      	ldr	r0, [pc, #104]	; (801039c <tcp_rst+0x9c>)
 8010332:	f005 f955 	bl	80155e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010336:	2300      	movs	r3, #0
 8010338:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801033a:	f246 0308 	movw	r3, #24584	; 0x6008
 801033e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010340:	7dfb      	ldrb	r3, [r7, #23]
 8010342:	b29c      	uxth	r4, r3
 8010344:	68b8      	ldr	r0, [r7, #8]
 8010346:	f7f9 f9b6 	bl	80096b6 <lwip_htonl>
 801034a:	4602      	mov	r2, r0
 801034c:	8abb      	ldrh	r3, [r7, #20]
 801034e:	9303      	str	r3, [sp, #12]
 8010350:	2314      	movs	r3, #20
 8010352:	9302      	str	r3, [sp, #8]
 8010354:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	4613      	mov	r3, r2
 801035e:	2200      	movs	r2, #0
 8010360:	4621      	mov	r1, r4
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7ff fe92 	bl	801008c <tcp_output_alloc_header_common>
 8010368:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00c      	beq.n	801038a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010370:	7dfb      	ldrb	r3, [r7, #23]
 8010372:	2200      	movs	r2, #0
 8010374:	6939      	ldr	r1, [r7, #16]
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f7ff ff38 	bl	80101ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037e:	683a      	ldr	r2, [r7, #0]
 8010380:	6939      	ldr	r1, [r7, #16]
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f7ff ff72 	bl	801026c <tcp_output_control_segment>
 8010388:	e000      	b.n	801038c <tcp_rst+0x8c>
    return;
 801038a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801038c:	371c      	adds	r7, #28
 801038e:	46bd      	mov	sp, r7
 8010390:	bd90      	pop	{r4, r7, pc}
 8010392:	bf00      	nop
 8010394:	08017d4c 	.word	0x08017d4c
 8010398:	080184d0 	.word	0x080184d0
 801039c:	08017da0 	.word	0x08017da0
 80103a0:	080184ec 	.word	0x080184ec

080103a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80103a4:	b590      	push	{r4, r7, lr}
 80103a6:	b087      	sub	sp, #28
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80103ac:	2300      	movs	r3, #0
 80103ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80103b0:	2300      	movs	r3, #0
 80103b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d106      	bne.n	80103c8 <tcp_send_empty_ack+0x24>
 80103ba:	4b28      	ldr	r3, [pc, #160]	; (801045c <tcp_send_empty_ack+0xb8>)
 80103bc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80103c0:	4927      	ldr	r1, [pc, #156]	; (8010460 <tcp_send_empty_ack+0xbc>)
 80103c2:	4828      	ldr	r0, [pc, #160]	; (8010464 <tcp_send_empty_ack+0xc0>)
 80103c4:	f005 f90c 	bl	80155e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80103c8:	7dfb      	ldrb	r3, [r7, #23]
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	f003 0304 	and.w	r3, r3, #4
 80103d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80103d4:	7d7b      	ldrb	r3, [r7, #21]
 80103d6:	b29c      	uxth	r4, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103dc:	4618      	mov	r0, r3
 80103de:	f7f9 f96a 	bl	80096b6 <lwip_htonl>
 80103e2:	4603      	mov	r3, r0
 80103e4:	2200      	movs	r2, #0
 80103e6:	4621      	mov	r1, r4
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7ff fec1 	bl	8010170 <tcp_output_alloc_header>
 80103ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d109      	bne.n	801040a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	8b5b      	ldrh	r3, [r3, #26]
 80103fa:	f043 0303 	orr.w	r3, r3, #3
 80103fe:	b29a      	uxth	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010404:	f06f 0301 	mvn.w	r3, #1
 8010408:	e023      	b.n	8010452 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801040a:	7dbb      	ldrb	r3, [r7, #22]
 801040c:	7dfa      	ldrb	r2, [r7, #23]
 801040e:	6939      	ldr	r1, [r7, #16]
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7ff feeb 	bl	80101ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	3304      	adds	r3, #4
 801041c:	6939      	ldr	r1, [r7, #16]
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7ff ff24 	bl	801026c <tcp_output_control_segment>
 8010424:	4603      	mov	r3, r0
 8010426:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d007      	beq.n	8010440 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	8b5b      	ldrh	r3, [r3, #26]
 8010434:	f043 0303 	orr.w	r3, r3, #3
 8010438:	b29a      	uxth	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	835a      	strh	r2, [r3, #26]
 801043e:	e006      	b.n	801044e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	8b5b      	ldrh	r3, [r3, #26]
 8010444:	f023 0303 	bic.w	r3, r3, #3
 8010448:	b29a      	uxth	r2, r3
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801044e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010452:	4618      	mov	r0, r3
 8010454:	371c      	adds	r7, #28
 8010456:	46bd      	mov	sp, r7
 8010458:	bd90      	pop	{r4, r7, pc}
 801045a:	bf00      	nop
 801045c:	08017d4c 	.word	0x08017d4c
 8010460:	08018508 	.word	0x08018508
 8010464:	08017da0 	.word	0x08017da0

08010468 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010468:	b590      	push	{r4, r7, lr}
 801046a:	b087      	sub	sp, #28
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010470:	2300      	movs	r3, #0
 8010472:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d106      	bne.n	8010488 <tcp_keepalive+0x20>
 801047a:	4b18      	ldr	r3, [pc, #96]	; (80104dc <tcp_keepalive+0x74>)
 801047c:	f640 0224 	movw	r2, #2084	; 0x824
 8010480:	4917      	ldr	r1, [pc, #92]	; (80104e0 <tcp_keepalive+0x78>)
 8010482:	4818      	ldr	r0, [pc, #96]	; (80104e4 <tcp_keepalive+0x7c>)
 8010484:	f005 f8ac 	bl	80155e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010488:	7dfb      	ldrb	r3, [r7, #23]
 801048a:	b29c      	uxth	r4, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010490:	3b01      	subs	r3, #1
 8010492:	4618      	mov	r0, r3
 8010494:	f7f9 f90f 	bl	80096b6 <lwip_htonl>
 8010498:	4603      	mov	r3, r0
 801049a:	2200      	movs	r2, #0
 801049c:	4621      	mov	r1, r4
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f7ff fe66 	bl	8010170 <tcp_output_alloc_header>
 80104a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d102      	bne.n	80104b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80104ac:	f04f 33ff 	mov.w	r3, #4294967295
 80104b0:	e010      	b.n	80104d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80104b2:	7dfb      	ldrb	r3, [r7, #23]
 80104b4:	2200      	movs	r2, #0
 80104b6:	6939      	ldr	r1, [r7, #16]
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7ff fe97 	bl	80101ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3304      	adds	r3, #4
 80104c4:	6939      	ldr	r1, [r7, #16]
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7ff fed0 	bl	801026c <tcp_output_control_segment>
 80104cc:	4603      	mov	r3, r0
 80104ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80104d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	371c      	adds	r7, #28
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd90      	pop	{r4, r7, pc}
 80104dc:	08017d4c 	.word	0x08017d4c
 80104e0:	08018528 	.word	0x08018528
 80104e4:	08017da0 	.word	0x08017da0

080104e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80104e8:	b590      	push	{r4, r7, lr}
 80104ea:	b08b      	sub	sp, #44	; 0x2c
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80104f0:	2300      	movs	r3, #0
 80104f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d106      	bne.n	801050a <tcp_zero_window_probe+0x22>
 80104fc:	4b4c      	ldr	r3, [pc, #304]	; (8010630 <tcp_zero_window_probe+0x148>)
 80104fe:	f640 024f 	movw	r2, #2127	; 0x84f
 8010502:	494c      	ldr	r1, [pc, #304]	; (8010634 <tcp_zero_window_probe+0x14c>)
 8010504:	484c      	ldr	r0, [pc, #304]	; (8010638 <tcp_zero_window_probe+0x150>)
 8010506:	f005 f86b 	bl	80155e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801050e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010510:	6a3b      	ldr	r3, [r7, #32]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d101      	bne.n	801051a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010516:	2300      	movs	r3, #0
 8010518:	e086      	b.n	8010628 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010520:	2bff      	cmp	r3, #255	; 0xff
 8010522:	d007      	beq.n	8010534 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801052a:	3301      	adds	r3, #1
 801052c:	b2da      	uxtb	r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010534:	6a3b      	ldr	r3, [r7, #32]
 8010536:	68db      	ldr	r3, [r3, #12]
 8010538:	899b      	ldrh	r3, [r3, #12]
 801053a:	b29b      	uxth	r3, r3
 801053c:	4618      	mov	r0, r3
 801053e:	f7f9 f8a5 	bl	800968c <lwip_htons>
 8010542:	4603      	mov	r3, r0
 8010544:	b2db      	uxtb	r3, r3
 8010546:	f003 0301 	and.w	r3, r3, #1
 801054a:	2b00      	cmp	r3, #0
 801054c:	d005      	beq.n	801055a <tcp_zero_window_probe+0x72>
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	891b      	ldrh	r3, [r3, #8]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d101      	bne.n	801055a <tcp_zero_window_probe+0x72>
 8010556:	2301      	movs	r3, #1
 8010558:	e000      	b.n	801055c <tcp_zero_window_probe+0x74>
 801055a:	2300      	movs	r3, #0
 801055c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801055e:	7ffb      	ldrb	r3, [r7, #31]
 8010560:	2b00      	cmp	r3, #0
 8010562:	bf0c      	ite	eq
 8010564:	2301      	moveq	r3, #1
 8010566:	2300      	movne	r3, #0
 8010568:	b2db      	uxtb	r3, r3
 801056a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801056c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010570:	b299      	uxth	r1, r3
 8010572:	6a3b      	ldr	r3, [r7, #32]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	8bba      	ldrh	r2, [r7, #28]
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f7ff fdf8 	bl	8010170 <tcp_output_alloc_header>
 8010580:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d102      	bne.n	801058e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010588:	f04f 33ff 	mov.w	r3, #4294967295
 801058c:	e04c      	b.n	8010628 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010594:	7ffb      	ldrb	r3, [r7, #31]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d011      	beq.n	80105be <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	899b      	ldrh	r3, [r3, #12]
 801059e:	b29b      	uxth	r3, r3
 80105a0:	b21b      	sxth	r3, r3
 80105a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80105a6:	b21c      	sxth	r4, r3
 80105a8:	2011      	movs	r0, #17
 80105aa:	f7f9 f86f 	bl	800968c <lwip_htons>
 80105ae:	4603      	mov	r3, r0
 80105b0:	b21b      	sxth	r3, r3
 80105b2:	4323      	orrs	r3, r4
 80105b4:	b21b      	sxth	r3, r3
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	819a      	strh	r2, [r3, #12]
 80105bc:	e010      	b.n	80105e0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	3314      	adds	r3, #20
 80105c4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80105c6:	6a3b      	ldr	r3, [r7, #32]
 80105c8:	6858      	ldr	r0, [r3, #4]
 80105ca:	6a3b      	ldr	r3, [r7, #32]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	891a      	ldrh	r2, [r3, #8]
 80105d0:	6a3b      	ldr	r3, [r7, #32]
 80105d2:	891b      	ldrh	r3, [r3, #8]
 80105d4:	1ad3      	subs	r3, r2, r3
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	2201      	movs	r2, #1
 80105da:	6939      	ldr	r1, [r7, #16]
 80105dc:	f7fa fe52 	bl	800b284 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80105e0:	6a3b      	ldr	r3, [r7, #32]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7f9 f865 	bl	80096b6 <lwip_htonl>
 80105ec:	4603      	mov	r3, r0
 80105ee:	3301      	adds	r3, #1
 80105f0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	1ad3      	subs	r3, r2, r3
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	da02      	bge.n	8010604 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010608:	2200      	movs	r2, #0
 801060a:	69b9      	ldr	r1, [r7, #24]
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff fded 	bl	80101ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	3304      	adds	r3, #4
 8010618:	69b9      	ldr	r1, [r7, #24]
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7ff fe26 	bl	801026c <tcp_output_control_segment>
 8010620:	4603      	mov	r3, r0
 8010622:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010624:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010628:	4618      	mov	r0, r3
 801062a:	372c      	adds	r7, #44	; 0x2c
 801062c:	46bd      	mov	sp, r7
 801062e:	bd90      	pop	{r4, r7, pc}
 8010630:	08017d4c 	.word	0x08017d4c
 8010634:	08018544 	.word	0x08018544
 8010638:	08017da0 	.word	0x08017da0

0801063c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010644:	f7fa ff0c 	bl	800b460 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010648:	4b0a      	ldr	r3, [pc, #40]	; (8010674 <tcpip_tcp_timer+0x38>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d103      	bne.n	8010658 <tcpip_tcp_timer+0x1c>
 8010650:	4b09      	ldr	r3, [pc, #36]	; (8010678 <tcpip_tcp_timer+0x3c>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d005      	beq.n	8010664 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010658:	2200      	movs	r2, #0
 801065a:	4908      	ldr	r1, [pc, #32]	; (801067c <tcpip_tcp_timer+0x40>)
 801065c:	20fa      	movs	r0, #250	; 0xfa
 801065e:	f000 f8f3 	bl	8010848 <sys_timeout>
 8010662:	e003      	b.n	801066c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010664:	4b06      	ldr	r3, [pc, #24]	; (8010680 <tcpip_tcp_timer+0x44>)
 8010666:	2200      	movs	r2, #0
 8010668:	601a      	str	r2, [r3, #0]
  }
}
 801066a:	bf00      	nop
 801066c:	bf00      	nop
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	2000866c 	.word	0x2000866c
 8010678:	20008670 	.word	0x20008670
 801067c:	0801063d 	.word	0x0801063d
 8010680:	200086b8 	.word	0x200086b8

08010684 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010688:	4b0a      	ldr	r3, [pc, #40]	; (80106b4 <tcp_timer_needed+0x30>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d10f      	bne.n	80106b0 <tcp_timer_needed+0x2c>
 8010690:	4b09      	ldr	r3, [pc, #36]	; (80106b8 <tcp_timer_needed+0x34>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d103      	bne.n	80106a0 <tcp_timer_needed+0x1c>
 8010698:	4b08      	ldr	r3, [pc, #32]	; (80106bc <tcp_timer_needed+0x38>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d007      	beq.n	80106b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80106a0:	4b04      	ldr	r3, [pc, #16]	; (80106b4 <tcp_timer_needed+0x30>)
 80106a2:	2201      	movs	r2, #1
 80106a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80106a6:	2200      	movs	r2, #0
 80106a8:	4905      	ldr	r1, [pc, #20]	; (80106c0 <tcp_timer_needed+0x3c>)
 80106aa:	20fa      	movs	r0, #250	; 0xfa
 80106ac:	f000 f8cc 	bl	8010848 <sys_timeout>
  }
}
 80106b0:	bf00      	nop
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	200086b8 	.word	0x200086b8
 80106b8:	2000866c 	.word	0x2000866c
 80106bc:	20008670 	.word	0x20008670
 80106c0:	0801063d 	.word	0x0801063d

080106c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80106d0:	2006      	movs	r0, #6
 80106d2:	f7f9 fd0b 	bl	800a0ec <memp_malloc>
 80106d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d109      	bne.n	80106f2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d151      	bne.n	8010788 <sys_timeout_abs+0xc4>
 80106e4:	4b2a      	ldr	r3, [pc, #168]	; (8010790 <sys_timeout_abs+0xcc>)
 80106e6:	22be      	movs	r2, #190	; 0xbe
 80106e8:	492a      	ldr	r1, [pc, #168]	; (8010794 <sys_timeout_abs+0xd0>)
 80106ea:	482b      	ldr	r0, [pc, #172]	; (8010798 <sys_timeout_abs+0xd4>)
 80106ec:	f004 ff78 	bl	80155e0 <iprintf>
    return;
 80106f0:	e04a      	b.n	8010788 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	2200      	movs	r2, #0
 80106f6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	68ba      	ldr	r2, [r7, #8]
 80106fc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801070a:	4b24      	ldr	r3, [pc, #144]	; (801079c <sys_timeout_abs+0xd8>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d103      	bne.n	801071a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010712:	4a22      	ldr	r2, [pc, #136]	; (801079c <sys_timeout_abs+0xd8>)
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	6013      	str	r3, [r2, #0]
    return;
 8010718:	e037      	b.n	801078a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	685a      	ldr	r2, [r3, #4]
 801071e:	4b1f      	ldr	r3, [pc, #124]	; (801079c <sys_timeout_abs+0xd8>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	0fdb      	lsrs	r3, r3, #31
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	b2db      	uxtb	r3, r3
 801072e:	2b00      	cmp	r3, #0
 8010730:	d007      	beq.n	8010742 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010732:	4b1a      	ldr	r3, [pc, #104]	; (801079c <sys_timeout_abs+0xd8>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801073a:	4a18      	ldr	r2, [pc, #96]	; (801079c <sys_timeout_abs+0xd8>)
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	6013      	str	r3, [r2, #0]
 8010740:	e023      	b.n	801078a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010742:	4b16      	ldr	r3, [pc, #88]	; (801079c <sys_timeout_abs+0xd8>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	617b      	str	r3, [r7, #20]
 8010748:	e01a      	b.n	8010780 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00b      	beq.n	801076a <sys_timeout_abs+0xa6>
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	685a      	ldr	r2, [r3, #4]
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	0fdb      	lsrs	r3, r3, #31
 8010760:	f003 0301 	and.w	r3, r3, #1
 8010764:	b2db      	uxtb	r3, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	d007      	beq.n	801077a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	693a      	ldr	r2, [r7, #16]
 8010776:	601a      	str	r2, [r3, #0]
        break;
 8010778:	e007      	b.n	801078a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	617b      	str	r3, [r7, #20]
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d1e1      	bne.n	801074a <sys_timeout_abs+0x86>
 8010786:	e000      	b.n	801078a <sys_timeout_abs+0xc6>
    return;
 8010788:	bf00      	nop
      }
    }
  }
}
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	08018568 	.word	0x08018568
 8010794:	0801859c 	.word	0x0801859c
 8010798:	080185dc 	.word	0x080185dc
 801079c:	200086b0 	.word	0x200086b0

080107a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b086      	sub	sp, #24
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	4798      	blx	r3

  now = sys_now();
 80107b2:	f7f8 fd8b 	bl	80092cc <sys_now>
 80107b6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	4b0f      	ldr	r3, [pc, #60]	; (80107fc <lwip_cyclic_timer+0x5c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4413      	add	r3, r2
 80107c2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	0fdb      	lsrs	r3, r3, #31
 80107cc:	f003 0301 	and.w	r3, r3, #1
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d009      	beq.n	80107ea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	4413      	add	r3, r2
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	4907      	ldr	r1, [pc, #28]	; (8010800 <lwip_cyclic_timer+0x60>)
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7ff ff6e 	bl	80106c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80107e8:	e004      	b.n	80107f4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	4904      	ldr	r1, [pc, #16]	; (8010800 <lwip_cyclic_timer+0x60>)
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7ff ff68 	bl	80106c4 <sys_timeout_abs>
}
 80107f4:	bf00      	nop
 80107f6:	3718      	adds	r7, #24
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	200086b4 	.word	0x200086b4
 8010800:	080107a1 	.word	0x080107a1

08010804 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801080a:	2301      	movs	r3, #1
 801080c:	607b      	str	r3, [r7, #4]
 801080e:	e00e      	b.n	801082e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010810:	4a0b      	ldr	r2, [pc, #44]	; (8010840 <sys_timeouts_init+0x3c>)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	00db      	lsls	r3, r3, #3
 801081c:	4a08      	ldr	r2, [pc, #32]	; (8010840 <sys_timeouts_init+0x3c>)
 801081e:	4413      	add	r3, r2
 8010820:	461a      	mov	r2, r3
 8010822:	4908      	ldr	r1, [pc, #32]	; (8010844 <sys_timeouts_init+0x40>)
 8010824:	f000 f810 	bl	8010848 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	3301      	adds	r3, #1
 801082c:	607b      	str	r3, [r7, #4]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2b04      	cmp	r3, #4
 8010832:	d9ed      	bls.n	8010810 <sys_timeouts_init+0xc>
  }
}
 8010834:	bf00      	nop
 8010836:	bf00      	nop
 8010838:	3708      	adds	r7, #8
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	080194fc 	.word	0x080194fc
 8010844:	080107a1 	.word	0x080107a1

08010848 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b086      	sub	sp, #24
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801085a:	d306      	bcc.n	801086a <sys_timeout+0x22>
 801085c:	4b0a      	ldr	r3, [pc, #40]	; (8010888 <sys_timeout+0x40>)
 801085e:	f240 1229 	movw	r2, #297	; 0x129
 8010862:	490a      	ldr	r1, [pc, #40]	; (801088c <sys_timeout+0x44>)
 8010864:	480a      	ldr	r0, [pc, #40]	; (8010890 <sys_timeout+0x48>)
 8010866:	f004 febb 	bl	80155e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801086a:	f7f8 fd2f 	bl	80092cc <sys_now>
 801086e:	4602      	mov	r2, r0
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	4413      	add	r3, r2
 8010874:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	68b9      	ldr	r1, [r7, #8]
 801087a:	6978      	ldr	r0, [r7, #20]
 801087c:	f7ff ff22 	bl	80106c4 <sys_timeout_abs>
#endif
}
 8010880:	bf00      	nop
 8010882:	3718      	adds	r7, #24
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	08018568 	.word	0x08018568
 801088c:	08018604 	.word	0x08018604
 8010890:	080185dc 	.word	0x080185dc

08010894 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010898:	f004 feba 	bl	8015610 <rand>
 801089c:	4603      	mov	r3, r0
 801089e:	b29b      	uxth	r3, r3
 80108a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	4b01      	ldr	r3, [pc, #4]	; (80108b4 <udp_init+0x20>)
 80108ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80108b0:	bf00      	nop
 80108b2:	bd80      	pop	{r7, pc}
 80108b4:	2000003c 	.word	0x2000003c

080108b8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80108be:	2300      	movs	r3, #0
 80108c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80108c2:	4b17      	ldr	r3, [pc, #92]	; (8010920 <udp_new_port+0x68>)
 80108c4:	881b      	ldrh	r3, [r3, #0]
 80108c6:	1c5a      	adds	r2, r3, #1
 80108c8:	b291      	uxth	r1, r2
 80108ca:	4a15      	ldr	r2, [pc, #84]	; (8010920 <udp_new_port+0x68>)
 80108cc:	8011      	strh	r1, [r2, #0]
 80108ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d103      	bne.n	80108de <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80108d6:	4b12      	ldr	r3, [pc, #72]	; (8010920 <udp_new_port+0x68>)
 80108d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80108dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80108de:	4b11      	ldr	r3, [pc, #68]	; (8010924 <udp_new_port+0x6c>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	603b      	str	r3, [r7, #0]
 80108e4:	e011      	b.n	801090a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	8a5a      	ldrh	r2, [r3, #18]
 80108ea:	4b0d      	ldr	r3, [pc, #52]	; (8010920 <udp_new_port+0x68>)
 80108ec:	881b      	ldrh	r3, [r3, #0]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d108      	bne.n	8010904 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80108f2:	88fb      	ldrh	r3, [r7, #6]
 80108f4:	3301      	adds	r3, #1
 80108f6:	80fb      	strh	r3, [r7, #6]
 80108f8:	88fb      	ldrh	r3, [r7, #6]
 80108fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80108fe:	d3e0      	bcc.n	80108c2 <udp_new_port+0xa>
        return 0;
 8010900:	2300      	movs	r3, #0
 8010902:	e007      	b.n	8010914 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	603b      	str	r3, [r7, #0]
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d1ea      	bne.n	80108e6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010910:	4b03      	ldr	r3, [pc, #12]	; (8010920 <udp_new_port+0x68>)
 8010912:	881b      	ldrh	r3, [r3, #0]
}
 8010914:	4618      	mov	r0, r3
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr
 8010920:	2000003c 	.word	0x2000003c
 8010924:	200086bc 	.word	0x200086bc

08010928 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b084      	sub	sp, #16
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	4613      	mov	r3, r2
 8010934:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d105      	bne.n	8010948 <udp_input_local_match+0x20>
 801093c:	4b27      	ldr	r3, [pc, #156]	; (80109dc <udp_input_local_match+0xb4>)
 801093e:	2287      	movs	r2, #135	; 0x87
 8010940:	4927      	ldr	r1, [pc, #156]	; (80109e0 <udp_input_local_match+0xb8>)
 8010942:	4828      	ldr	r0, [pc, #160]	; (80109e4 <udp_input_local_match+0xbc>)
 8010944:	f004 fe4c 	bl	80155e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d105      	bne.n	801095a <udp_input_local_match+0x32>
 801094e:	4b23      	ldr	r3, [pc, #140]	; (80109dc <udp_input_local_match+0xb4>)
 8010950:	2288      	movs	r2, #136	; 0x88
 8010952:	4925      	ldr	r1, [pc, #148]	; (80109e8 <udp_input_local_match+0xc0>)
 8010954:	4823      	ldr	r0, [pc, #140]	; (80109e4 <udp_input_local_match+0xbc>)
 8010956:	f004 fe43 	bl	80155e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	7a1b      	ldrb	r3, [r3, #8]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00b      	beq.n	801097a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	7a1a      	ldrb	r2, [r3, #8]
 8010966:	4b21      	ldr	r3, [pc, #132]	; (80109ec <udp_input_local_match+0xc4>)
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801096e:	3301      	adds	r3, #1
 8010970:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010972:	429a      	cmp	r2, r3
 8010974:	d001      	beq.n	801097a <udp_input_local_match+0x52>
    return 0;
 8010976:	2300      	movs	r3, #0
 8010978:	e02b      	b.n	80109d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801097a:	79fb      	ldrb	r3, [r7, #7]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d018      	beq.n	80109b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d013      	beq.n	80109ae <udp_input_local_match+0x86>
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00f      	beq.n	80109ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801098e:	4b17      	ldr	r3, [pc, #92]	; (80109ec <udp_input_local_match+0xc4>)
 8010990:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010996:	d00a      	beq.n	80109ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	4b13      	ldr	r3, [pc, #76]	; (80109ec <udp_input_local_match+0xc4>)
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	405a      	eors	r2, r3
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	3308      	adds	r3, #8
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d110      	bne.n	80109d0 <udp_input_local_match+0xa8>
          return 1;
 80109ae:	2301      	movs	r3, #1
 80109b0:	e00f      	b.n	80109d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d009      	beq.n	80109cc <udp_input_local_match+0xa4>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d005      	beq.n	80109cc <udp_input_local_match+0xa4>
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	4b09      	ldr	r3, [pc, #36]	; (80109ec <udp_input_local_match+0xc4>)
 80109c6:	695b      	ldr	r3, [r3, #20]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d101      	bne.n	80109d0 <udp_input_local_match+0xa8>
        return 1;
 80109cc:	2301      	movs	r3, #1
 80109ce:	e000      	b.n	80109d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80109d0:	2300      	movs	r3, #0
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	08018650 	.word	0x08018650
 80109e0:	08018680 	.word	0x08018680
 80109e4:	080186a4 	.word	0x080186a4
 80109e8:	080186cc 	.word	0x080186cc
 80109ec:	20005724 	.word	0x20005724

080109f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80109f0:	b590      	push	{r4, r7, lr}
 80109f2:	b08d      	sub	sp, #52	; 0x34
 80109f4:	af02      	add	r7, sp, #8
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80109fa:	2300      	movs	r3, #0
 80109fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d105      	bne.n	8010a10 <udp_input+0x20>
 8010a04:	4b7c      	ldr	r3, [pc, #496]	; (8010bf8 <udp_input+0x208>)
 8010a06:	22cf      	movs	r2, #207	; 0xcf
 8010a08:	497c      	ldr	r1, [pc, #496]	; (8010bfc <udp_input+0x20c>)
 8010a0a:	487d      	ldr	r0, [pc, #500]	; (8010c00 <udp_input+0x210>)
 8010a0c:	f004 fde8 	bl	80155e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d105      	bne.n	8010a22 <udp_input+0x32>
 8010a16:	4b78      	ldr	r3, [pc, #480]	; (8010bf8 <udp_input+0x208>)
 8010a18:	22d0      	movs	r2, #208	; 0xd0
 8010a1a:	497a      	ldr	r1, [pc, #488]	; (8010c04 <udp_input+0x214>)
 8010a1c:	4878      	ldr	r0, [pc, #480]	; (8010c00 <udp_input+0x210>)
 8010a1e:	f004 fddf 	bl	80155e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	895b      	ldrh	r3, [r3, #10]
 8010a26:	2b07      	cmp	r3, #7
 8010a28:	d803      	bhi.n	8010a32 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7fa fa30 	bl	800ae90 <pbuf_free>
    goto end;
 8010a30:	e0de      	b.n	8010bf0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010a38:	4b73      	ldr	r3, [pc, #460]	; (8010c08 <udp_input+0x218>)
 8010a3a:	695b      	ldr	r3, [r3, #20]
 8010a3c:	4a72      	ldr	r2, [pc, #456]	; (8010c08 <udp_input+0x218>)
 8010a3e:	6812      	ldr	r2, [r2, #0]
 8010a40:	4611      	mov	r1, r2
 8010a42:	4618      	mov	r0, r3
 8010a44:	f003 fe2c 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	881b      	ldrh	r3, [r3, #0]
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7f8 fe1a 	bl	800968c <lwip_htons>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	885b      	ldrh	r3, [r3, #2]
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7f8 fe12 	bl	800968c <lwip_htons>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010a70:	2300      	movs	r3, #0
 8010a72:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a78:	4b64      	ldr	r3, [pc, #400]	; (8010c0c <udp_input+0x21c>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8010a7e:	e054      	b.n	8010b2a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a82:	8a5b      	ldrh	r3, [r3, #18]
 8010a84:	89fa      	ldrh	r2, [r7, #14]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d14a      	bne.n	8010b20 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010a8a:	7cfb      	ldrb	r3, [r7, #19]
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	6839      	ldr	r1, [r7, #0]
 8010a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a92:	f7ff ff49 	bl	8010928 <udp_input_local_match>
 8010a96:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d041      	beq.n	8010b20 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9e:	7c1b      	ldrb	r3, [r3, #16]
 8010aa0:	f003 0304 	and.w	r3, r3, #4
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d11d      	bne.n	8010ae4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d102      	bne.n	8010ab4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab0:	61fb      	str	r3, [r7, #28]
 8010ab2:	e017      	b.n	8010ae4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010ab4:	7cfb      	ldrb	r3, [r7, #19]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d014      	beq.n	8010ae4 <udp_input+0xf4>
 8010aba:	4b53      	ldr	r3, [pc, #332]	; (8010c08 <udp_input+0x218>)
 8010abc:	695b      	ldr	r3, [r3, #20]
 8010abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac2:	d10f      	bne.n	8010ae4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	3304      	adds	r3, #4
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d008      	beq.n	8010ae4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	3304      	adds	r3, #4
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d101      	bne.n	8010ae4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae6:	8a9b      	ldrh	r3, [r3, #20]
 8010ae8:	8a3a      	ldrh	r2, [r7, #16]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d118      	bne.n	8010b20 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d005      	beq.n	8010b02 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af8:	685a      	ldr	r2, [r3, #4]
 8010afa:	4b43      	ldr	r3, [pc, #268]	; (8010c08 <udp_input+0x218>)
 8010afc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d10e      	bne.n	8010b20 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d014      	beq.n	8010b32 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0a:	68da      	ldr	r2, [r3, #12]
 8010b0c:	6a3b      	ldr	r3, [r7, #32]
 8010b0e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010b10:	4b3e      	ldr	r3, [pc, #248]	; (8010c0c <udp_input+0x21c>)
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b16:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010b18:	4a3c      	ldr	r2, [pc, #240]	; (8010c0c <udp_input+0x21c>)
 8010b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010b1e:	e008      	b.n	8010b32 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b22:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	627b      	str	r3, [r7, #36]	; 0x24
 8010b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d1a7      	bne.n	8010a80 <udp_input+0x90>
 8010b30:	e000      	b.n	8010b34 <udp_input+0x144>
        break;
 8010b32:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d101      	bne.n	8010b3e <udp_input+0x14e>
    pcb = uncon_pcb;
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d002      	beq.n	8010b4a <udp_input+0x15a>
    for_us = 1;
 8010b44:	2301      	movs	r3, #1
 8010b46:	76fb      	strb	r3, [r7, #27]
 8010b48:	e00a      	b.n	8010b60 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	3304      	adds	r3, #4
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	4b2d      	ldr	r3, [pc, #180]	; (8010c08 <udp_input+0x218>)
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	bf0c      	ite	eq
 8010b58:	2301      	moveq	r3, #1
 8010b5a:	2300      	movne	r3, #0
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010b60:	7efb      	ldrb	r3, [r7, #27]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d041      	beq.n	8010bea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010b66:	2108      	movs	r1, #8
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7fa f90b 	bl	800ad84 <pbuf_remove_header>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d00a      	beq.n	8010b8a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010b74:	4b20      	ldr	r3, [pc, #128]	; (8010bf8 <udp_input+0x208>)
 8010b76:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010b7a:	4925      	ldr	r1, [pc, #148]	; (8010c10 <udp_input+0x220>)
 8010b7c:	4820      	ldr	r0, [pc, #128]	; (8010c00 <udp_input+0x210>)
 8010b7e:	f004 fd2f 	bl	80155e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f7fa f984 	bl	800ae90 <pbuf_free>
      goto end;
 8010b88:	e032      	b.n	8010bf0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d012      	beq.n	8010bb6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b92:	699b      	ldr	r3, [r3, #24]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d00a      	beq.n	8010bae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	699c      	ldr	r4, [r3, #24]
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9e:	69d8      	ldr	r0, [r3, #28]
 8010ba0:	8a3b      	ldrh	r3, [r7, #16]
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	4b1b      	ldr	r3, [pc, #108]	; (8010c14 <udp_input+0x224>)
 8010ba6:	687a      	ldr	r2, [r7, #4]
 8010ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010baa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010bac:	e021      	b.n	8010bf2 <udp_input+0x202>
        pbuf_free(p);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f7fa f96e 	bl	800ae90 <pbuf_free>
        goto end;
 8010bb4:	e01c      	b.n	8010bf0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010bb6:	7cfb      	ldrb	r3, [r7, #19]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d112      	bne.n	8010be2 <udp_input+0x1f2>
 8010bbc:	4b12      	ldr	r3, [pc, #72]	; (8010c08 <udp_input+0x218>)
 8010bbe:	695b      	ldr	r3, [r3, #20]
 8010bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bc4:	2be0      	cmp	r3, #224	; 0xe0
 8010bc6:	d00c      	beq.n	8010be2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010bc8:	4b0f      	ldr	r3, [pc, #60]	; (8010c08 <udp_input+0x218>)
 8010bca:	899b      	ldrh	r3, [r3, #12]
 8010bcc:	3308      	adds	r3, #8
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	b21b      	sxth	r3, r3
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7fa f948 	bl	800ae6a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010bda:	2103      	movs	r1, #3
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f003 fa17 	bl	8014010 <icmp_dest_unreach>
      pbuf_free(p);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7fa f954 	bl	800ae90 <pbuf_free>
  return;
 8010be8:	e003      	b.n	8010bf2 <udp_input+0x202>
    pbuf_free(p);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f7fa f950 	bl	800ae90 <pbuf_free>
  return;
 8010bf0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010bf2:	372c      	adds	r7, #44	; 0x2c
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd90      	pop	{r4, r7, pc}
 8010bf8:	08018650 	.word	0x08018650
 8010bfc:	080186f4 	.word	0x080186f4
 8010c00:	080186a4 	.word	0x080186a4
 8010c04:	0801870c 	.word	0x0801870c
 8010c08:	20005724 	.word	0x20005724
 8010c0c:	200086bc 	.word	0x200086bc
 8010c10:	08018728 	.word	0x08018728
 8010c14:	20005734 	.word	0x20005734

08010c18 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b088      	sub	sp, #32
 8010c1c:	af02      	add	r7, sp, #8
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d109      	bne.n	8010c40 <udp_sendto_if+0x28>
 8010c2c:	4b2e      	ldr	r3, [pc, #184]	; (8010ce8 <udp_sendto_if+0xd0>)
 8010c2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c32:	492e      	ldr	r1, [pc, #184]	; (8010cec <udp_sendto_if+0xd4>)
 8010c34:	482e      	ldr	r0, [pc, #184]	; (8010cf0 <udp_sendto_if+0xd8>)
 8010c36:	f004 fcd3 	bl	80155e0 <iprintf>
 8010c3a:	f06f 030f 	mvn.w	r3, #15
 8010c3e:	e04f      	b.n	8010ce0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d109      	bne.n	8010c5a <udp_sendto_if+0x42>
 8010c46:	4b28      	ldr	r3, [pc, #160]	; (8010ce8 <udp_sendto_if+0xd0>)
 8010c48:	f240 2281 	movw	r2, #641	; 0x281
 8010c4c:	4929      	ldr	r1, [pc, #164]	; (8010cf4 <udp_sendto_if+0xdc>)
 8010c4e:	4828      	ldr	r0, [pc, #160]	; (8010cf0 <udp_sendto_if+0xd8>)
 8010c50:	f004 fcc6 	bl	80155e0 <iprintf>
 8010c54:	f06f 030f 	mvn.w	r3, #15
 8010c58:	e042      	b.n	8010ce0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d109      	bne.n	8010c74 <udp_sendto_if+0x5c>
 8010c60:	4b21      	ldr	r3, [pc, #132]	; (8010ce8 <udp_sendto_if+0xd0>)
 8010c62:	f240 2282 	movw	r2, #642	; 0x282
 8010c66:	4924      	ldr	r1, [pc, #144]	; (8010cf8 <udp_sendto_if+0xe0>)
 8010c68:	4821      	ldr	r0, [pc, #132]	; (8010cf0 <udp_sendto_if+0xd8>)
 8010c6a:	f004 fcb9 	bl	80155e0 <iprintf>
 8010c6e:	f06f 030f 	mvn.w	r3, #15
 8010c72:	e035      	b.n	8010ce0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010c74:	6a3b      	ldr	r3, [r7, #32]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d109      	bne.n	8010c8e <udp_sendto_if+0x76>
 8010c7a:	4b1b      	ldr	r3, [pc, #108]	; (8010ce8 <udp_sendto_if+0xd0>)
 8010c7c:	f240 2283 	movw	r2, #643	; 0x283
 8010c80:	491e      	ldr	r1, [pc, #120]	; (8010cfc <udp_sendto_if+0xe4>)
 8010c82:	481b      	ldr	r0, [pc, #108]	; (8010cf0 <udp_sendto_if+0xd8>)
 8010c84:	f004 fcac 	bl	80155e0 <iprintf>
 8010c88:	f06f 030f 	mvn.w	r3, #15
 8010c8c:	e028      	b.n	8010ce0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d009      	beq.n	8010ca8 <udp_sendto_if+0x90>
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d005      	beq.n	8010ca8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ca4:	2be0      	cmp	r3, #224	; 0xe0
 8010ca6:	d103      	bne.n	8010cb0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	3304      	adds	r3, #4
 8010cac:	617b      	str	r3, [r7, #20]
 8010cae:	e00b      	b.n	8010cc8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	6a3b      	ldr	r3, [r7, #32]
 8010cb6:	3304      	adds	r3, #4
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d002      	beq.n	8010cc4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010cbe:	f06f 0303 	mvn.w	r3, #3
 8010cc2:	e00d      	b.n	8010ce0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010cc8:	887a      	ldrh	r2, [r7, #2]
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	6a3b      	ldr	r3, [r7, #32]
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	68b9      	ldr	r1, [r7, #8]
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f000 f811 	bl	8010d00 <udp_sendto_if_src>
 8010cde:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3718      	adds	r7, #24
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	08018650 	.word	0x08018650
 8010cec:	080187c4 	.word	0x080187c4
 8010cf0:	080186a4 	.word	0x080186a4
 8010cf4:	080187e0 	.word	0x080187e0
 8010cf8:	080187fc 	.word	0x080187fc
 8010cfc:	0801881c 	.word	0x0801881c

08010d00 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b08c      	sub	sp, #48	; 0x30
 8010d04:	af04      	add	r7, sp, #16
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
 8010d0c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d109      	bne.n	8010d28 <udp_sendto_if_src+0x28>
 8010d14:	4b65      	ldr	r3, [pc, #404]	; (8010eac <udp_sendto_if_src+0x1ac>)
 8010d16:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010d1a:	4965      	ldr	r1, [pc, #404]	; (8010eb0 <udp_sendto_if_src+0x1b0>)
 8010d1c:	4865      	ldr	r0, [pc, #404]	; (8010eb4 <udp_sendto_if_src+0x1b4>)
 8010d1e:	f004 fc5f 	bl	80155e0 <iprintf>
 8010d22:	f06f 030f 	mvn.w	r3, #15
 8010d26:	e0bc      	b.n	8010ea2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d109      	bne.n	8010d42 <udp_sendto_if_src+0x42>
 8010d2e:	4b5f      	ldr	r3, [pc, #380]	; (8010eac <udp_sendto_if_src+0x1ac>)
 8010d30:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010d34:	4960      	ldr	r1, [pc, #384]	; (8010eb8 <udp_sendto_if_src+0x1b8>)
 8010d36:	485f      	ldr	r0, [pc, #380]	; (8010eb4 <udp_sendto_if_src+0x1b4>)
 8010d38:	f004 fc52 	bl	80155e0 <iprintf>
 8010d3c:	f06f 030f 	mvn.w	r3, #15
 8010d40:	e0af      	b.n	8010ea2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d109      	bne.n	8010d5c <udp_sendto_if_src+0x5c>
 8010d48:	4b58      	ldr	r3, [pc, #352]	; (8010eac <udp_sendto_if_src+0x1ac>)
 8010d4a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8010d4e:	495b      	ldr	r1, [pc, #364]	; (8010ebc <udp_sendto_if_src+0x1bc>)
 8010d50:	4858      	ldr	r0, [pc, #352]	; (8010eb4 <udp_sendto_if_src+0x1b4>)
 8010d52:	f004 fc45 	bl	80155e0 <iprintf>
 8010d56:	f06f 030f 	mvn.w	r3, #15
 8010d5a:	e0a2      	b.n	8010ea2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d109      	bne.n	8010d76 <udp_sendto_if_src+0x76>
 8010d62:	4b52      	ldr	r3, [pc, #328]	; (8010eac <udp_sendto_if_src+0x1ac>)
 8010d64:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010d68:	4955      	ldr	r1, [pc, #340]	; (8010ec0 <udp_sendto_if_src+0x1c0>)
 8010d6a:	4852      	ldr	r0, [pc, #328]	; (8010eb4 <udp_sendto_if_src+0x1b4>)
 8010d6c:	f004 fc38 	bl	80155e0 <iprintf>
 8010d70:	f06f 030f 	mvn.w	r3, #15
 8010d74:	e095      	b.n	8010ea2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d109      	bne.n	8010d90 <udp_sendto_if_src+0x90>
 8010d7c:	4b4b      	ldr	r3, [pc, #300]	; (8010eac <udp_sendto_if_src+0x1ac>)
 8010d7e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010d82:	4950      	ldr	r1, [pc, #320]	; (8010ec4 <udp_sendto_if_src+0x1c4>)
 8010d84:	484b      	ldr	r0, [pc, #300]	; (8010eb4 <udp_sendto_if_src+0x1b4>)
 8010d86:	f004 fc2b 	bl	80155e0 <iprintf>
 8010d8a:	f06f 030f 	mvn.w	r3, #15
 8010d8e:	e088      	b.n	8010ea2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	8a5b      	ldrh	r3, [r3, #18]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d10f      	bne.n	8010db8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010d98:	68f9      	ldr	r1, [r7, #12]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	8a5b      	ldrh	r3, [r3, #18]
 8010d9e:	461a      	mov	r2, r3
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f000 f893 	bl	8010ecc <udp_bind>
 8010da6:	4603      	mov	r3, r0
 8010da8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010daa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d002      	beq.n	8010db8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010db2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010db6:	e074      	b.n	8010ea2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	891b      	ldrh	r3, [r3, #8]
 8010dbc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d902      	bls.n	8010dca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8010dc8:	e06b      	b.n	8010ea2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010dca:	2108      	movs	r1, #8
 8010dcc:	68b8      	ldr	r0, [r7, #8]
 8010dce:	f7f9 ffc9 	bl	800ad64 <pbuf_add_header>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d015      	beq.n	8010e04 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010dd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ddc:	2108      	movs	r1, #8
 8010dde:	2022      	movs	r0, #34	; 0x22
 8010de0:	f7f9 fd72 	bl	800a8c8 <pbuf_alloc>
 8010de4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d102      	bne.n	8010df2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010dec:	f04f 33ff 	mov.w	r3, #4294967295
 8010df0:	e057      	b.n	8010ea2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	891b      	ldrh	r3, [r3, #8]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d006      	beq.n	8010e08 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010dfa:	68b9      	ldr	r1, [r7, #8]
 8010dfc:	69f8      	ldr	r0, [r7, #28]
 8010dfe:	f7fa f95f 	bl	800b0c0 <pbuf_chain>
 8010e02:	e001      	b.n	8010e08 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	895b      	ldrh	r3, [r3, #10]
 8010e0c:	2b07      	cmp	r3, #7
 8010e0e:	d806      	bhi.n	8010e1e <udp_sendto_if_src+0x11e>
 8010e10:	4b26      	ldr	r3, [pc, #152]	; (8010eac <udp_sendto_if_src+0x1ac>)
 8010e12:	f240 320d 	movw	r2, #781	; 0x30d
 8010e16:	492c      	ldr	r1, [pc, #176]	; (8010ec8 <udp_sendto_if_src+0x1c8>)
 8010e18:	4826      	ldr	r0, [pc, #152]	; (8010eb4 <udp_sendto_if_src+0x1b4>)
 8010e1a:	f004 fbe1 	bl	80155e0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	8a5b      	ldrh	r3, [r3, #18]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7f8 fc2f 	bl	800968c <lwip_htons>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	461a      	mov	r2, r3
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010e36:	887b      	ldrh	r3, [r7, #2]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7f8 fc27 	bl	800968c <lwip_htons>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	461a      	mov	r2, r3
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	719a      	strb	r2, [r3, #6]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	891b      	ldrh	r3, [r3, #8]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7f8 fc19 	bl	800968c <lwip_htons>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010e62:	2311      	movs	r3, #17
 8010e64:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	7adb      	ldrb	r3, [r3, #11]
 8010e6a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	7a9b      	ldrb	r3, [r3, #10]
 8010e70:	7cb9      	ldrb	r1, [r7, #18]
 8010e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e74:	9202      	str	r2, [sp, #8]
 8010e76:	7cfa      	ldrb	r2, [r7, #19]
 8010e78:	9201      	str	r2, [sp, #4]
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e82:	69f8      	ldr	r0, [r7, #28]
 8010e84:	f003 fb5e 	bl	8014544 <ip4_output_if_src>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010e8c:	69fa      	ldr	r2, [r7, #28]
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d004      	beq.n	8010e9e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010e94:	69f8      	ldr	r0, [r7, #28]
 8010e96:	f7f9 fffb 	bl	800ae90 <pbuf_free>
    q = NULL;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010e9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3720      	adds	r7, #32
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	08018650 	.word	0x08018650
 8010eb0:	0801883c 	.word	0x0801883c
 8010eb4:	080186a4 	.word	0x080186a4
 8010eb8:	0801885c 	.word	0x0801885c
 8010ebc:	0801887c 	.word	0x0801887c
 8010ec0:	080188a0 	.word	0x080188a0
 8010ec4:	080188c4 	.word	0x080188c4
 8010ec8:	080188e8 	.word	0x080188e8

08010ecc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b086      	sub	sp, #24
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d101      	bne.n	8010ee4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010ee0:	4b39      	ldr	r3, [pc, #228]	; (8010fc8 <udp_bind+0xfc>)
 8010ee2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d109      	bne.n	8010efe <udp_bind+0x32>
 8010eea:	4b38      	ldr	r3, [pc, #224]	; (8010fcc <udp_bind+0x100>)
 8010eec:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010ef0:	4937      	ldr	r1, [pc, #220]	; (8010fd0 <udp_bind+0x104>)
 8010ef2:	4838      	ldr	r0, [pc, #224]	; (8010fd4 <udp_bind+0x108>)
 8010ef4:	f004 fb74 	bl	80155e0 <iprintf>
 8010ef8:	f06f 030f 	mvn.w	r3, #15
 8010efc:	e060      	b.n	8010fc0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010efe:	2300      	movs	r3, #0
 8010f00:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010f02:	4b35      	ldr	r3, [pc, #212]	; (8010fd8 <udp_bind+0x10c>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	617b      	str	r3, [r7, #20]
 8010f08:	e009      	b.n	8010f1e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010f0a:	68fa      	ldr	r2, [r7, #12]
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d102      	bne.n	8010f18 <udp_bind+0x4c>
      rebind = 1;
 8010f12:	2301      	movs	r3, #1
 8010f14:	74fb      	strb	r3, [r7, #19]
      break;
 8010f16:	e005      	b.n	8010f24 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	617b      	str	r3, [r7, #20]
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1f2      	bne.n	8010f0a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010f24:	88fb      	ldrh	r3, [r7, #6]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d109      	bne.n	8010f3e <udp_bind+0x72>
    port = udp_new_port();
 8010f2a:	f7ff fcc5 	bl	80108b8 <udp_new_port>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010f32:	88fb      	ldrh	r3, [r7, #6]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d12c      	bne.n	8010f92 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010f38:	f06f 0307 	mvn.w	r3, #7
 8010f3c:	e040      	b.n	8010fc0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010f3e:	4b26      	ldr	r3, [pc, #152]	; (8010fd8 <udp_bind+0x10c>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	617b      	str	r3, [r7, #20]
 8010f44:	e022      	b.n	8010f8c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d01b      	beq.n	8010f86 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	8a5b      	ldrh	r3, [r3, #18]
 8010f52:	88fa      	ldrh	r2, [r7, #6]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d116      	bne.n	8010f86 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d00d      	beq.n	8010f80 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00a      	beq.n	8010f80 <udp_bind+0xb4>
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d006      	beq.n	8010f80 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010f72:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d003      	beq.n	8010f80 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d102      	bne.n	8010f86 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010f80:	f06f 0307 	mvn.w	r3, #7
 8010f84:	e01c      	b.n	8010fc0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	68db      	ldr	r3, [r3, #12]
 8010f8a:	617b      	str	r3, [r7, #20]
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d1d9      	bne.n	8010f46 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <udp_bind+0xd2>
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	e000      	b.n	8010fa0 <udp_bind+0xd4>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	88fa      	ldrh	r2, [r7, #6]
 8010fa8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010faa:	7cfb      	ldrb	r3, [r7, #19]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d106      	bne.n	8010fbe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010fb0:	4b09      	ldr	r3, [pc, #36]	; (8010fd8 <udp_bind+0x10c>)
 8010fb2:	681a      	ldr	r2, [r3, #0]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010fb8:	4a07      	ldr	r2, [pc, #28]	; (8010fd8 <udp_bind+0x10c>)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010fbe:	2300      	movs	r3, #0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3718      	adds	r7, #24
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	08019524 	.word	0x08019524
 8010fcc:	08018650 	.word	0x08018650
 8010fd0:	08018918 	.word	0x08018918
 8010fd4:	080186a4 	.word	0x080186a4
 8010fd8:	200086bc 	.word	0x200086bc

08010fdc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b086      	sub	sp, #24
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d109      	bne.n	8011004 <udp_connect+0x28>
 8010ff0:	4b2c      	ldr	r3, [pc, #176]	; (80110a4 <udp_connect+0xc8>)
 8010ff2:	f240 4235 	movw	r2, #1077	; 0x435
 8010ff6:	492c      	ldr	r1, [pc, #176]	; (80110a8 <udp_connect+0xcc>)
 8010ff8:	482c      	ldr	r0, [pc, #176]	; (80110ac <udp_connect+0xd0>)
 8010ffa:	f004 faf1 	bl	80155e0 <iprintf>
 8010ffe:	f06f 030f 	mvn.w	r3, #15
 8011002:	e04b      	b.n	801109c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d109      	bne.n	801101e <udp_connect+0x42>
 801100a:	4b26      	ldr	r3, [pc, #152]	; (80110a4 <udp_connect+0xc8>)
 801100c:	f240 4236 	movw	r2, #1078	; 0x436
 8011010:	4927      	ldr	r1, [pc, #156]	; (80110b0 <udp_connect+0xd4>)
 8011012:	4826      	ldr	r0, [pc, #152]	; (80110ac <udp_connect+0xd0>)
 8011014:	f004 fae4 	bl	80155e0 <iprintf>
 8011018:	f06f 030f 	mvn.w	r3, #15
 801101c:	e03e      	b.n	801109c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	8a5b      	ldrh	r3, [r3, #18]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d10f      	bne.n	8011046 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011026:	68f9      	ldr	r1, [r7, #12]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	8a5b      	ldrh	r3, [r3, #18]
 801102c:	461a      	mov	r2, r3
 801102e:	68f8      	ldr	r0, [r7, #12]
 8011030:	f7ff ff4c 	bl	8010ecc <udp_bind>
 8011034:	4603      	mov	r3, r0
 8011036:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011038:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d002      	beq.n	8011046 <udp_connect+0x6a>
      return err;
 8011040:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011044:	e02a      	b.n	801109c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d002      	beq.n	8011052 <udp_connect+0x76>
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	e000      	b.n	8011054 <udp_connect+0x78>
 8011052:	2300      	movs	r3, #0
 8011054:	68fa      	ldr	r2, [r7, #12]
 8011056:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	88fa      	ldrh	r2, [r7, #6]
 801105c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	7c1b      	ldrb	r3, [r3, #16]
 8011062:	f043 0304 	orr.w	r3, r3, #4
 8011066:	b2da      	uxtb	r2, r3
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801106c:	4b11      	ldr	r3, [pc, #68]	; (80110b4 <udp_connect+0xd8>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	617b      	str	r3, [r7, #20]
 8011072:	e008      	b.n	8011086 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	429a      	cmp	r2, r3
 801107a:	d101      	bne.n	8011080 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	e00d      	b.n	801109c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	617b      	str	r3, [r7, #20]
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d1f3      	bne.n	8011074 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801108c:	4b09      	ldr	r3, [pc, #36]	; (80110b4 <udp_connect+0xd8>)
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011094:	4a07      	ldr	r2, [pc, #28]	; (80110b4 <udp_connect+0xd8>)
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801109a:	2300      	movs	r3, #0
}
 801109c:	4618      	mov	r0, r3
 801109e:	3718      	adds	r7, #24
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	08018650 	.word	0x08018650
 80110a8:	08018930 	.word	0x08018930
 80110ac:	080186a4 	.word	0x080186a4
 80110b0:	0801894c 	.word	0x0801894c
 80110b4:	200086bc 	.word	0x200086bc

080110b8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b084      	sub	sp, #16
 80110bc:	af00      	add	r7, sp, #0
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d107      	bne.n	80110da <udp_recv+0x22>
 80110ca:	4b08      	ldr	r3, [pc, #32]	; (80110ec <udp_recv+0x34>)
 80110cc:	f240 428a 	movw	r2, #1162	; 0x48a
 80110d0:	4907      	ldr	r1, [pc, #28]	; (80110f0 <udp_recv+0x38>)
 80110d2:	4808      	ldr	r0, [pc, #32]	; (80110f4 <udp_recv+0x3c>)
 80110d4:	f004 fa84 	bl	80155e0 <iprintf>
 80110d8:	e005      	b.n	80110e6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	61da      	str	r2, [r3, #28]
}
 80110e6:	3710      	adds	r7, #16
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	08018650 	.word	0x08018650
 80110f0:	08018984 	.word	0x08018984
 80110f4:	080186a4 	.word	0x080186a4

080110f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d107      	bne.n	8011116 <udp_remove+0x1e>
 8011106:	4b19      	ldr	r3, [pc, #100]	; (801116c <udp_remove+0x74>)
 8011108:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801110c:	4918      	ldr	r1, [pc, #96]	; (8011170 <udp_remove+0x78>)
 801110e:	4819      	ldr	r0, [pc, #100]	; (8011174 <udp_remove+0x7c>)
 8011110:	f004 fa66 	bl	80155e0 <iprintf>
 8011114:	e026      	b.n	8011164 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011116:	4b18      	ldr	r3, [pc, #96]	; (8011178 <udp_remove+0x80>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	429a      	cmp	r2, r3
 801111e:	d105      	bne.n	801112c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011120:	4b15      	ldr	r3, [pc, #84]	; (8011178 <udp_remove+0x80>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	4a14      	ldr	r2, [pc, #80]	; (8011178 <udp_remove+0x80>)
 8011128:	6013      	str	r3, [r2, #0]
 801112a:	e017      	b.n	801115c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801112c:	4b12      	ldr	r3, [pc, #72]	; (8011178 <udp_remove+0x80>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	60fb      	str	r3, [r7, #12]
 8011132:	e010      	b.n	8011156 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d009      	beq.n	8011150 <udp_remove+0x58>
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d104      	bne.n	8011150 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	68da      	ldr	r2, [r3, #12]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	60da      	str	r2, [r3, #12]
        break;
 801114e:	e005      	b.n	801115c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	60fb      	str	r3, [r7, #12]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d1eb      	bne.n	8011134 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801115c:	6879      	ldr	r1, [r7, #4]
 801115e:	2000      	movs	r0, #0
 8011160:	f7f9 f834 	bl	800a1cc <memp_free>
}
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	08018650 	.word	0x08018650
 8011170:	0801899c 	.word	0x0801899c
 8011174:	080186a4 	.word	0x080186a4
 8011178:	200086bc 	.word	0x200086bc

0801117c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011182:	2000      	movs	r0, #0
 8011184:	f7f8 ffb2 	bl	800a0ec <memp_malloc>
 8011188:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d007      	beq.n	80111a0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011190:	2220      	movs	r2, #32
 8011192:	2100      	movs	r1, #0
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f004 fa1b 	bl	80155d0 <memset>
    pcb->ttl = UDP_TTL;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	22ff      	movs	r2, #255	; 0xff
 801119e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80111a0:	687b      	ldr	r3, [r7, #4]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
	...

080111ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d01e      	beq.n	80111fa <udp_netif_ip_addr_changed+0x4e>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d01a      	beq.n	80111fa <udp_netif_ip_addr_changed+0x4e>
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d017      	beq.n	80111fa <udp_netif_ip_addr_changed+0x4e>
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d013      	beq.n	80111fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80111d2:	4b0d      	ldr	r3, [pc, #52]	; (8011208 <udp_netif_ip_addr_changed+0x5c>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	60fb      	str	r3, [r7, #12]
 80111d8:	e00c      	b.n	80111f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d103      	bne.n	80111ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d1ef      	bne.n	80111da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80111fa:	bf00      	nop
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	200086bc 	.word	0x200086bc

0801120c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011210:	4b20      	ldr	r3, [pc, #128]	; (8011294 <dhcp_inc_pcb_refcount+0x88>)
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d133      	bne.n	8011280 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011218:	4b1f      	ldr	r3, [pc, #124]	; (8011298 <dhcp_inc_pcb_refcount+0x8c>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d005      	beq.n	801122c <dhcp_inc_pcb_refcount+0x20>
 8011220:	4b1e      	ldr	r3, [pc, #120]	; (801129c <dhcp_inc_pcb_refcount+0x90>)
 8011222:	22e5      	movs	r2, #229	; 0xe5
 8011224:	491e      	ldr	r1, [pc, #120]	; (80112a0 <dhcp_inc_pcb_refcount+0x94>)
 8011226:	481f      	ldr	r0, [pc, #124]	; (80112a4 <dhcp_inc_pcb_refcount+0x98>)
 8011228:	f004 f9da 	bl	80155e0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801122c:	f7ff ffa6 	bl	801117c <udp_new>
 8011230:	4603      	mov	r3, r0
 8011232:	4a19      	ldr	r2, [pc, #100]	; (8011298 <dhcp_inc_pcb_refcount+0x8c>)
 8011234:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8011236:	4b18      	ldr	r3, [pc, #96]	; (8011298 <dhcp_inc_pcb_refcount+0x8c>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d102      	bne.n	8011244 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801123e:	f04f 33ff 	mov.w	r3, #4294967295
 8011242:	e024      	b.n	801128e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011244:	4b14      	ldr	r3, [pc, #80]	; (8011298 <dhcp_inc_pcb_refcount+0x8c>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	7a5a      	ldrb	r2, [r3, #9]
 801124a:	4b13      	ldr	r3, [pc, #76]	; (8011298 <dhcp_inc_pcb_refcount+0x8c>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f042 0220 	orr.w	r2, r2, #32
 8011252:	b2d2      	uxtb	r2, r2
 8011254:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011256:	4b10      	ldr	r3, [pc, #64]	; (8011298 <dhcp_inc_pcb_refcount+0x8c>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	2244      	movs	r2, #68	; 0x44
 801125c:	4912      	ldr	r1, [pc, #72]	; (80112a8 <dhcp_inc_pcb_refcount+0x9c>)
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff fe34 	bl	8010ecc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011264:	4b0c      	ldr	r3, [pc, #48]	; (8011298 <dhcp_inc_pcb_refcount+0x8c>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2243      	movs	r2, #67	; 0x43
 801126a:	490f      	ldr	r1, [pc, #60]	; (80112a8 <dhcp_inc_pcb_refcount+0x9c>)
 801126c:	4618      	mov	r0, r3
 801126e:	f7ff feb5 	bl	8010fdc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011272:	4b09      	ldr	r3, [pc, #36]	; (8011298 <dhcp_inc_pcb_refcount+0x8c>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2200      	movs	r2, #0
 8011278:	490c      	ldr	r1, [pc, #48]	; (80112ac <dhcp_inc_pcb_refcount+0xa0>)
 801127a:	4618      	mov	r0, r3
 801127c:	f7ff ff1c 	bl	80110b8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011280:	4b04      	ldr	r3, [pc, #16]	; (8011294 <dhcp_inc_pcb_refcount+0x88>)
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	3301      	adds	r3, #1
 8011286:	b2da      	uxtb	r2, r3
 8011288:	4b02      	ldr	r3, [pc, #8]	; (8011294 <dhcp_inc_pcb_refcount+0x88>)
 801128a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	200086ec 	.word	0x200086ec
 8011298:	200086e8 	.word	0x200086e8
 801129c:	080189b4 	.word	0x080189b4
 80112a0:	080189ec 	.word	0x080189ec
 80112a4:	08018a14 	.word	0x08018a14
 80112a8:	08019524 	.word	0x08019524
 80112ac:	08012b41 	.word	0x08012b41

080112b0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80112b4:	4b0e      	ldr	r3, [pc, #56]	; (80112f0 <dhcp_dec_pcb_refcount+0x40>)
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d105      	bne.n	80112c8 <dhcp_dec_pcb_refcount+0x18>
 80112bc:	4b0d      	ldr	r3, [pc, #52]	; (80112f4 <dhcp_dec_pcb_refcount+0x44>)
 80112be:	22ff      	movs	r2, #255	; 0xff
 80112c0:	490d      	ldr	r1, [pc, #52]	; (80112f8 <dhcp_dec_pcb_refcount+0x48>)
 80112c2:	480e      	ldr	r0, [pc, #56]	; (80112fc <dhcp_dec_pcb_refcount+0x4c>)
 80112c4:	f004 f98c 	bl	80155e0 <iprintf>
  dhcp_pcb_refcount--;
 80112c8:	4b09      	ldr	r3, [pc, #36]	; (80112f0 <dhcp_dec_pcb_refcount+0x40>)
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	3b01      	subs	r3, #1
 80112ce:	b2da      	uxtb	r2, r3
 80112d0:	4b07      	ldr	r3, [pc, #28]	; (80112f0 <dhcp_dec_pcb_refcount+0x40>)
 80112d2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80112d4:	4b06      	ldr	r3, [pc, #24]	; (80112f0 <dhcp_dec_pcb_refcount+0x40>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d107      	bne.n	80112ec <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80112dc:	4b08      	ldr	r3, [pc, #32]	; (8011300 <dhcp_dec_pcb_refcount+0x50>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff ff09 	bl	80110f8 <udp_remove>
    dhcp_pcb = NULL;
 80112e6:	4b06      	ldr	r3, [pc, #24]	; (8011300 <dhcp_dec_pcb_refcount+0x50>)
 80112e8:	2200      	movs	r2, #0
 80112ea:	601a      	str	r2, [r3, #0]
  }
}
 80112ec:	bf00      	nop
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	200086ec 	.word	0x200086ec
 80112f4:	080189b4 	.word	0x080189b4
 80112f8:	08018a3c 	.word	0x08018a3c
 80112fc:	08018a14 	.word	0x08018a14
 8011300:	200086e8 	.word	0x200086e8

08011304 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011310:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011312:	210c      	movs	r1, #12
 8011314:	68f8      	ldr	r0, [r7, #12]
 8011316:	f001 f855 	bl	80123c4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801131a:	4b06      	ldr	r3, [pc, #24]	; (8011334 <dhcp_handle_nak+0x30>)
 801131c:	4a05      	ldr	r2, [pc, #20]	; (8011334 <dhcp_handle_nak+0x30>)
 801131e:	4905      	ldr	r1, [pc, #20]	; (8011334 <dhcp_handle_nak+0x30>)
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f7f9 f8f5 	bl	800a510 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 fc48 	bl	8011bbc <dhcp_discover>
}
 801132c:	bf00      	nop
 801132e:	3710      	adds	r7, #16
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	08019524 	.word	0x08019524

08011338 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011344:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011346:	2108      	movs	r1, #8
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f001 f83b 	bl	80123c4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	331c      	adds	r3, #28
 8011352:	2200      	movs	r2, #0
 8011354:	4619      	mov	r1, r3
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f002 fb3c 	bl	80139d4 <etharp_query>
 801135c:	4603      	mov	r3, r0
 801135e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	799b      	ldrb	r3, [r3, #6]
 8011364:	2bff      	cmp	r3, #255	; 0xff
 8011366:	d005      	beq.n	8011374 <dhcp_check+0x3c>
    dhcp->tries++;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	799b      	ldrb	r3, [r3, #6]
 801136c:	3301      	adds	r3, #1
 801136e:	b2da      	uxtb	r2, r3
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011374:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011378:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801137a:	893b      	ldrh	r3, [r7, #8]
 801137c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011380:	4a06      	ldr	r2, [pc, #24]	; (801139c <dhcp_check+0x64>)
 8011382:	fb82 1203 	smull	r1, r2, r2, r3
 8011386:	1152      	asrs	r2, r2, #5
 8011388:	17db      	asrs	r3, r3, #31
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	b29a      	uxth	r2, r3
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8011392:	bf00      	nop
 8011394:	3710      	adds	r7, #16
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	10624dd3 	.word	0x10624dd3

080113a0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80113b0:	4b0c      	ldr	r3, [pc, #48]	; (80113e4 <dhcp_handle_offer+0x44>)
 80113b2:	789b      	ldrb	r3, [r3, #2]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d011      	beq.n	80113dc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2200      	movs	r2, #0
 80113bc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80113be:	4b0a      	ldr	r3, [pc, #40]	; (80113e8 <dhcp_handle_offer+0x48>)
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7f8 f977 	bl	80096b6 <lwip_htonl>
 80113c8:	4602      	mov	r2, r0
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	691a      	ldr	r2, [r3, #16]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 f808 	bl	80113ec <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80113dc:	bf00      	nop
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	200086e0 	.word	0x200086e0
 80113e8:	200086c0 	.word	0x200086c0

080113ec <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80113ec:	b5b0      	push	{r4, r5, r7, lr}
 80113ee:	b08a      	sub	sp, #40	; 0x28
 80113f0:	af02      	add	r7, sp, #8
 80113f2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d109      	bne.n	801140e <dhcp_select+0x22>
 80113fa:	4b71      	ldr	r3, [pc, #452]	; (80115c0 <dhcp_select+0x1d4>)
 80113fc:	f240 1277 	movw	r2, #375	; 0x177
 8011400:	4970      	ldr	r1, [pc, #448]	; (80115c4 <dhcp_select+0x1d8>)
 8011402:	4871      	ldr	r0, [pc, #452]	; (80115c8 <dhcp_select+0x1dc>)
 8011404:	f004 f8ec 	bl	80155e0 <iprintf>
 8011408:	f06f 030f 	mvn.w	r3, #15
 801140c:	e0d3      	b.n	80115b6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011412:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d109      	bne.n	801142e <dhcp_select+0x42>
 801141a:	4b69      	ldr	r3, [pc, #420]	; (80115c0 <dhcp_select+0x1d4>)
 801141c:	f240 1279 	movw	r2, #377	; 0x179
 8011420:	496a      	ldr	r1, [pc, #424]	; (80115cc <dhcp_select+0x1e0>)
 8011422:	4869      	ldr	r0, [pc, #420]	; (80115c8 <dhcp_select+0x1dc>)
 8011424:	f004 f8dc 	bl	80155e0 <iprintf>
 8011428:	f06f 0305 	mvn.w	r3, #5
 801142c:	e0c3      	b.n	80115b6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801142e:	2101      	movs	r1, #1
 8011430:	69b8      	ldr	r0, [r7, #24]
 8011432:	f000 ffc7 	bl	80123c4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011436:	f107 030c 	add.w	r3, r7, #12
 801143a:	2203      	movs	r2, #3
 801143c:	69b9      	ldr	r1, [r7, #24]
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f001 fc4c 	bl	8012cdc <dhcp_create_msg>
 8011444:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	2b00      	cmp	r3, #0
 801144a:	f000 8085 	beq.w	8011558 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011454:	89b8      	ldrh	r0, [r7, #12]
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801145c:	2302      	movs	r3, #2
 801145e:	2239      	movs	r2, #57	; 0x39
 8011460:	f000 ffca 	bl	80123f8 <dhcp_option>
 8011464:	4603      	mov	r3, r0
 8011466:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011468:	89b8      	ldrh	r0, [r7, #12]
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011474:	461a      	mov	r2, r3
 8011476:	f001 f819 	bl	80124ac <dhcp_option_short>
 801147a:	4603      	mov	r3, r0
 801147c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801147e:	89b8      	ldrh	r0, [r7, #12]
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011486:	2304      	movs	r3, #4
 8011488:	2232      	movs	r2, #50	; 0x32
 801148a:	f000 ffb5 	bl	80123f8 <dhcp_option>
 801148e:	4603      	mov	r3, r0
 8011490:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011492:	89bc      	ldrh	r4, [r7, #12]
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	69db      	ldr	r3, [r3, #28]
 801149e:	4618      	mov	r0, r3
 80114a0:	f7f8 f909 	bl	80096b6 <lwip_htonl>
 80114a4:	4603      	mov	r3, r0
 80114a6:	461a      	mov	r2, r3
 80114a8:	4629      	mov	r1, r5
 80114aa:	4620      	mov	r0, r4
 80114ac:	f001 f830 	bl	8012510 <dhcp_option_long>
 80114b0:	4603      	mov	r3, r0
 80114b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80114b4:	89b8      	ldrh	r0, [r7, #12]
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80114bc:	2304      	movs	r3, #4
 80114be:	2236      	movs	r2, #54	; 0x36
 80114c0:	f000 ff9a 	bl	80123f8 <dhcp_option>
 80114c4:	4603      	mov	r3, r0
 80114c6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80114c8:	89bc      	ldrh	r4, [r7, #12]
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	699b      	ldr	r3, [r3, #24]
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7f8 f8ee 	bl	80096b6 <lwip_htonl>
 80114da:	4603      	mov	r3, r0
 80114dc:	461a      	mov	r2, r3
 80114de:	4629      	mov	r1, r5
 80114e0:	4620      	mov	r0, r4
 80114e2:	f001 f815 	bl	8012510 <dhcp_option_long>
 80114e6:	4603      	mov	r3, r0
 80114e8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80114ea:	89b8      	ldrh	r0, [r7, #12]
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80114f2:	2303      	movs	r3, #3
 80114f4:	2237      	movs	r2, #55	; 0x37
 80114f6:	f000 ff7f 	bl	80123f8 <dhcp_option>
 80114fa:	4603      	mov	r3, r0
 80114fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80114fe:	2300      	movs	r3, #0
 8011500:	77bb      	strb	r3, [r7, #30]
 8011502:	e00e      	b.n	8011522 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011504:	89b8      	ldrh	r0, [r7, #12]
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801150c:	7fbb      	ldrb	r3, [r7, #30]
 801150e:	4a30      	ldr	r2, [pc, #192]	; (80115d0 <dhcp_select+0x1e4>)
 8011510:	5cd3      	ldrb	r3, [r2, r3]
 8011512:	461a      	mov	r2, r3
 8011514:	f000 ffa4 	bl	8012460 <dhcp_option_byte>
 8011518:	4603      	mov	r3, r0
 801151a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801151c:	7fbb      	ldrb	r3, [r7, #30]
 801151e:	3301      	adds	r3, #1
 8011520:	77bb      	strb	r3, [r7, #30]
 8011522:	7fbb      	ldrb	r3, [r7, #30]
 8011524:	2b02      	cmp	r3, #2
 8011526:	d9ed      	bls.n	8011504 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011528:	89b8      	ldrh	r0, [r7, #12]
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	33f0      	adds	r3, #240	; 0xf0
 801152e:	697a      	ldr	r2, [r7, #20]
 8011530:	4619      	mov	r1, r3
 8011532:	f001 fca9 	bl	8012e88 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011536:	4b27      	ldr	r3, [pc, #156]	; (80115d4 <dhcp_select+0x1e8>)
 8011538:	6818      	ldr	r0, [r3, #0]
 801153a:	4b27      	ldr	r3, [pc, #156]	; (80115d8 <dhcp_select+0x1ec>)
 801153c:	9301      	str	r3, [sp, #4]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	2343      	movs	r3, #67	; 0x43
 8011544:	4a25      	ldr	r2, [pc, #148]	; (80115dc <dhcp_select+0x1f0>)
 8011546:	6979      	ldr	r1, [r7, #20]
 8011548:	f7ff fbda 	bl	8010d00 <udp_sendto_if_src>
 801154c:	4603      	mov	r3, r0
 801154e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011550:	6978      	ldr	r0, [r7, #20]
 8011552:	f7f9 fc9d 	bl	800ae90 <pbuf_free>
 8011556:	e001      	b.n	801155c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011558:	23ff      	movs	r3, #255	; 0xff
 801155a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	799b      	ldrb	r3, [r3, #6]
 8011560:	2bff      	cmp	r3, #255	; 0xff
 8011562:	d005      	beq.n	8011570 <dhcp_select+0x184>
    dhcp->tries++;
 8011564:	69bb      	ldr	r3, [r7, #24]
 8011566:	799b      	ldrb	r3, [r3, #6]
 8011568:	3301      	adds	r3, #1
 801156a:	b2da      	uxtb	r2, r3
 801156c:	69bb      	ldr	r3, [r7, #24]
 801156e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011570:	69bb      	ldr	r3, [r7, #24]
 8011572:	799b      	ldrb	r3, [r3, #6]
 8011574:	2b05      	cmp	r3, #5
 8011576:	d80d      	bhi.n	8011594 <dhcp_select+0x1a8>
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	799b      	ldrb	r3, [r3, #6]
 801157c:	461a      	mov	r2, r3
 801157e:	2301      	movs	r3, #1
 8011580:	4093      	lsls	r3, r2
 8011582:	b29b      	uxth	r3, r3
 8011584:	461a      	mov	r2, r3
 8011586:	0152      	lsls	r2, r2, #5
 8011588:	1ad2      	subs	r2, r2, r3
 801158a:	0092      	lsls	r2, r2, #2
 801158c:	4413      	add	r3, r2
 801158e:	00db      	lsls	r3, r3, #3
 8011590:	b29b      	uxth	r3, r3
 8011592:	e001      	b.n	8011598 <dhcp_select+0x1ac>
 8011594:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011598:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801159a:	89fb      	ldrh	r3, [r7, #14]
 801159c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80115a0:	4a0f      	ldr	r2, [pc, #60]	; (80115e0 <dhcp_select+0x1f4>)
 80115a2:	fb82 1203 	smull	r1, r2, r2, r3
 80115a6:	1152      	asrs	r2, r2, #5
 80115a8:	17db      	asrs	r3, r3, #31
 80115aa:	1ad3      	subs	r3, r2, r3
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	69bb      	ldr	r3, [r7, #24]
 80115b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80115b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3720      	adds	r7, #32
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bdb0      	pop	{r4, r5, r7, pc}
 80115be:	bf00      	nop
 80115c0:	080189b4 	.word	0x080189b4
 80115c4:	08018a60 	.word	0x08018a60
 80115c8:	08018a14 	.word	0x08018a14
 80115cc:	08018a7c 	.word	0x08018a7c
 80115d0:	20000040 	.word	0x20000040
 80115d4:	200086e8 	.word	0x200086e8
 80115d8:	08019524 	.word	0x08019524
 80115dc:	08019528 	.word	0x08019528
 80115e0:	10624dd3 	.word	0x10624dd3

080115e4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80115ea:	4b27      	ldr	r3, [pc, #156]	; (8011688 <dhcp_coarse_tmr+0xa4>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	607b      	str	r3, [r7, #4]
 80115f0:	e042      	b.n	8011678 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115f6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d039      	beq.n	8011672 <dhcp_coarse_tmr+0x8e>
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	795b      	ldrb	r3, [r3, #5]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d035      	beq.n	8011672 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	8a9b      	ldrh	r3, [r3, #20]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d012      	beq.n	8011634 <dhcp_coarse_tmr+0x50>
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	8a5b      	ldrh	r3, [r3, #18]
 8011612:	3301      	adds	r3, #1
 8011614:	b29a      	uxth	r2, r3
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	825a      	strh	r2, [r3, #18]
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	8a5a      	ldrh	r2, [r3, #18]
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	8a9b      	ldrh	r3, [r3, #20]
 8011622:	429a      	cmp	r2, r3
 8011624:	d106      	bne.n	8011634 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 fe32 	bl	8012290 <dhcp_release_and_stop>
        dhcp_start(netif);
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 f969 	bl	8011904 <dhcp_start>
 8011632:	e01e      	b.n	8011672 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	8a1b      	ldrh	r3, [r3, #16]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00b      	beq.n	8011654 <dhcp_coarse_tmr+0x70>
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	8a1b      	ldrh	r3, [r3, #16]
 8011640:	1e5a      	subs	r2, r3, #1
 8011642:	b291      	uxth	r1, r2
 8011644:	683a      	ldr	r2, [r7, #0]
 8011646:	8211      	strh	r1, [r2, #16]
 8011648:	2b01      	cmp	r3, #1
 801164a:	d103      	bne.n	8011654 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f000 f8c6 	bl	80117de <dhcp_t2_timeout>
 8011652:	e00e      	b.n	8011672 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	89db      	ldrh	r3, [r3, #14]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d00a      	beq.n	8011672 <dhcp_coarse_tmr+0x8e>
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	89db      	ldrh	r3, [r3, #14]
 8011660:	1e5a      	subs	r2, r3, #1
 8011662:	b291      	uxth	r1, r2
 8011664:	683a      	ldr	r2, [r7, #0]
 8011666:	81d1      	strh	r1, [r2, #14]
 8011668:	2b01      	cmp	r3, #1
 801166a:	d102      	bne.n	8011672 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f000 f888 	bl	8011782 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	607b      	str	r3, [r7, #4]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d1b9      	bne.n	80115f2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801167e:	bf00      	nop
 8011680:	bf00      	nop
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	20008654 	.word	0x20008654

0801168c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8011692:	4b16      	ldr	r3, [pc, #88]	; (80116ec <dhcp_fine_tmr+0x60>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	607b      	str	r3, [r7, #4]
 8011698:	e020      	b.n	80116dc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801169e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d017      	beq.n	80116d6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	891b      	ldrh	r3, [r3, #8]
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d906      	bls.n	80116bc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	891b      	ldrh	r3, [r3, #8]
 80116b2:	3b01      	subs	r3, #1
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	811a      	strh	r2, [r3, #8]
 80116ba:	e00c      	b.n	80116d6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	891b      	ldrh	r3, [r3, #8]
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d108      	bne.n	80116d6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	891b      	ldrh	r3, [r3, #8]
 80116c8:	3b01      	subs	r3, #1
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f000 f80d 	bl	80116f0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	607b      	str	r3, [r7, #4]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d1db      	bne.n	801169a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80116e2:	bf00      	nop
 80116e4:	bf00      	nop
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	20008654 	.word	0x20008654

080116f0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	795b      	ldrb	r3, [r3, #5]
 8011702:	2b0c      	cmp	r3, #12
 8011704:	d003      	beq.n	801170e <dhcp_timeout+0x1e>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	795b      	ldrb	r3, [r3, #5]
 801170a:	2b06      	cmp	r3, #6
 801170c:	d103      	bne.n	8011716 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 fa54 	bl	8011bbc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011714:	e031      	b.n	801177a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	795b      	ldrb	r3, [r3, #5]
 801171a:	2b01      	cmp	r3, #1
 801171c:	d10e      	bne.n	801173c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	799b      	ldrb	r3, [r3, #6]
 8011722:	2b05      	cmp	r3, #5
 8011724:	d803      	bhi.n	801172e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7ff fe60 	bl	80113ec <dhcp_select>
}
 801172c:	e025      	b.n	801177a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 fdae 	bl	8012290 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 f8e5 	bl	8011904 <dhcp_start>
}
 801173a:	e01e      	b.n	801177a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	795b      	ldrb	r3, [r3, #5]
 8011740:	2b08      	cmp	r3, #8
 8011742:	d10b      	bne.n	801175c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	799b      	ldrb	r3, [r3, #6]
 8011748:	2b01      	cmp	r3, #1
 801174a:	d803      	bhi.n	8011754 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7ff fdf3 	bl	8011338 <dhcp_check>
}
 8011752:	e012      	b.n	801177a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 fad3 	bl	8011d00 <dhcp_bind>
}
 801175a:	e00e      	b.n	801177a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	795b      	ldrb	r3, [r3, #5]
 8011760:	2b03      	cmp	r3, #3
 8011762:	d10a      	bne.n	801177a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	799b      	ldrb	r3, [r3, #6]
 8011768:	2b01      	cmp	r3, #1
 801176a:	d803      	bhi.n	8011774 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f000 fcd9 	bl	8012124 <dhcp_reboot>
}
 8011772:	e002      	b.n	801177a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 fa21 	bl	8011bbc <dhcp_discover>
}
 801177a:	bf00      	nop
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}

08011782 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b084      	sub	sp, #16
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801178e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	795b      	ldrb	r3, [r3, #5]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d007      	beq.n	80117a8 <dhcp_t1_timeout+0x26>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	795b      	ldrb	r3, [r3, #5]
 801179c:	2b0a      	cmp	r3, #10
 801179e:	d003      	beq.n	80117a8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80117a4:	2b05      	cmp	r3, #5
 80117a6:	d116      	bne.n	80117d6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f000 fb83 	bl	8011eb4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	899b      	ldrh	r3, [r3, #12]
 80117b2:	461a      	mov	r2, r3
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	8a5b      	ldrh	r3, [r3, #18]
 80117b8:	1ad3      	subs	r3, r2, r3
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	dd0b      	ble.n	80117d6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	899b      	ldrh	r3, [r3, #12]
 80117c2:	461a      	mov	r2, r3
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	8a5b      	ldrh	r3, [r3, #18]
 80117c8:	1ad3      	subs	r3, r2, r3
 80117ca:	0fda      	lsrs	r2, r3, #31
 80117cc:	4413      	add	r3, r2
 80117ce:	105b      	asrs	r3, r3, #1
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80117d6:	bf00      	nop
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80117de:	b580      	push	{r7, lr}
 80117e0:	b084      	sub	sp, #16
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	795b      	ldrb	r3, [r3, #5]
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	d00b      	beq.n	801180c <dhcp_t2_timeout+0x2e>
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	795b      	ldrb	r3, [r3, #5]
 80117f8:	2b0a      	cmp	r3, #10
 80117fa:	d007      	beq.n	801180c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011800:	2b05      	cmp	r3, #5
 8011802:	d003      	beq.n	801180c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	795b      	ldrb	r3, [r3, #5]
 8011808:	2b04      	cmp	r3, #4
 801180a:	d116      	bne.n	801183a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f000 fbed 	bl	8011fec <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	8a9b      	ldrh	r3, [r3, #20]
 8011816:	461a      	mov	r2, r3
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	8a5b      	ldrh	r3, [r3, #18]
 801181c:	1ad3      	subs	r3, r2, r3
 801181e:	2b01      	cmp	r3, #1
 8011820:	dd0b      	ble.n	801183a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	8a9b      	ldrh	r3, [r3, #20]
 8011826:	461a      	mov	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	8a5b      	ldrh	r3, [r3, #18]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	0fda      	lsrs	r2, r3, #31
 8011830:	4413      	add	r3, r2
 8011832:	105b      	asrs	r3, r3, #1
 8011834:	b29a      	uxth	r2, r3
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801183a:	bf00      	nop
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}
	...

08011844 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011852:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	2200      	movs	r2, #0
 8011858:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	2200      	movs	r2, #0
 801185e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011860:	4b26      	ldr	r3, [pc, #152]	; (80118fc <dhcp_handle_ack+0xb8>)
 8011862:	78db      	ldrb	r3, [r3, #3]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d003      	beq.n	8011870 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011868:	4b25      	ldr	r3, [pc, #148]	; (8011900 <dhcp_handle_ack+0xbc>)
 801186a:	68da      	ldr	r2, [r3, #12]
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011870:	4b22      	ldr	r3, [pc, #136]	; (80118fc <dhcp_handle_ack+0xb8>)
 8011872:	791b      	ldrb	r3, [r3, #4]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d004      	beq.n	8011882 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011878:	4b21      	ldr	r3, [pc, #132]	; (8011900 <dhcp_handle_ack+0xbc>)
 801187a:	691a      	ldr	r2, [r3, #16]
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	62da      	str	r2, [r3, #44]	; 0x2c
 8011880:	e004      	b.n	801188c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011886:	085a      	lsrs	r2, r3, #1
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801188c:	4b1b      	ldr	r3, [pc, #108]	; (80118fc <dhcp_handle_ack+0xb8>)
 801188e:	795b      	ldrb	r3, [r3, #5]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d004      	beq.n	801189e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011894:	4b1a      	ldr	r3, [pc, #104]	; (8011900 <dhcp_handle_ack+0xbc>)
 8011896:	695a      	ldr	r2, [r3, #20]
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	631a      	str	r2, [r3, #48]	; 0x30
 801189c:	e007      	b.n	80118ae <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80118a2:	4613      	mov	r3, r2
 80118a4:	00db      	lsls	r3, r3, #3
 80118a6:	1a9b      	subs	r3, r3, r2
 80118a8:	08da      	lsrs	r2, r3, #3
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	691a      	ldr	r2, [r3, #16]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80118b6:	4b11      	ldr	r3, [pc, #68]	; (80118fc <dhcp_handle_ack+0xb8>)
 80118b8:	799b      	ldrb	r3, [r3, #6]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00b      	beq.n	80118d6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80118be:	4b10      	ldr	r3, [pc, #64]	; (8011900 <dhcp_handle_ack+0xbc>)
 80118c0:	699b      	ldr	r3, [r3, #24]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7f7 fef7 	bl	80096b6 <lwip_htonl>
 80118c8:	4602      	mov	r2, r0
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	2201      	movs	r2, #1
 80118d2:	71da      	strb	r2, [r3, #7]
 80118d4:	e002      	b.n	80118dc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2200      	movs	r2, #0
 80118da:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80118dc:	4b07      	ldr	r3, [pc, #28]	; (80118fc <dhcp_handle_ack+0xb8>)
 80118de:	79db      	ldrb	r3, [r3, #7]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d007      	beq.n	80118f4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80118e4:	4b06      	ldr	r3, [pc, #24]	; (8011900 <dhcp_handle_ack+0xbc>)
 80118e6:	69db      	ldr	r3, [r3, #28]
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7f7 fee4 	bl	80096b6 <lwip_htonl>
 80118ee:	4602      	mov	r2, r0
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80118f4:	bf00      	nop
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	200086e0 	.word	0x200086e0
 8011900:	200086c0 	.word	0x200086c0

08011904 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d109      	bne.n	8011926 <dhcp_start+0x22>
 8011912:	4b37      	ldr	r3, [pc, #220]	; (80119f0 <dhcp_start+0xec>)
 8011914:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011918:	4936      	ldr	r1, [pc, #216]	; (80119f4 <dhcp_start+0xf0>)
 801191a:	4837      	ldr	r0, [pc, #220]	; (80119f8 <dhcp_start+0xf4>)
 801191c:	f003 fe60 	bl	80155e0 <iprintf>
 8011920:	f06f 030f 	mvn.w	r3, #15
 8011924:	e060      	b.n	80119e8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801192c:	f003 0301 	and.w	r3, r3, #1
 8011930:	2b00      	cmp	r3, #0
 8011932:	d109      	bne.n	8011948 <dhcp_start+0x44>
 8011934:	4b2e      	ldr	r3, [pc, #184]	; (80119f0 <dhcp_start+0xec>)
 8011936:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801193a:	4930      	ldr	r1, [pc, #192]	; (80119fc <dhcp_start+0xf8>)
 801193c:	482e      	ldr	r0, [pc, #184]	; (80119f8 <dhcp_start+0xf4>)
 801193e:	f003 fe4f 	bl	80155e0 <iprintf>
 8011942:	f06f 030f 	mvn.w	r3, #15
 8011946:	e04f      	b.n	80119e8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801194c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011952:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8011956:	d202      	bcs.n	801195e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011958:	f04f 33ff 	mov.w	r3, #4294967295
 801195c:	e044      	b.n	80119e8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d10d      	bne.n	8011980 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011964:	2034      	movs	r0, #52	; 0x34
 8011966:	f7f8 fa31 	bl	8009dcc <mem_malloc>
 801196a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d102      	bne.n	8011978 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8011972:	f04f 33ff 	mov.w	r3, #4294967295
 8011976:	e037      	b.n	80119e8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	68fa      	ldr	r2, [r7, #12]
 801197c:	625a      	str	r2, [r3, #36]	; 0x24
 801197e:	e005      	b.n	801198c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	791b      	ldrb	r3, [r3, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d001      	beq.n	801198c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011988:	f7ff fc92 	bl	80112b0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801198c:	2234      	movs	r2, #52	; 0x34
 801198e:	2100      	movs	r1, #0
 8011990:	68f8      	ldr	r0, [r7, #12]
 8011992:	f003 fe1d 	bl	80155d0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011996:	f7ff fc39 	bl	801120c <dhcp_inc_pcb_refcount>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	d002      	beq.n	80119a6 <dhcp_start+0xa2>
    return ERR_MEM;
 80119a0:	f04f 33ff 	mov.w	r3, #4294967295
 80119a4:	e020      	b.n	80119e8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2201      	movs	r2, #1
 80119aa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119b2:	f003 0304 	and.w	r3, r3, #4
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d105      	bne.n	80119c6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80119ba:	2102      	movs	r1, #2
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f000 fd01 	bl	80123c4 <dhcp_set_state>
    return ERR_OK;
 80119c2:	2300      	movs	r3, #0
 80119c4:	e010      	b.n	80119e8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 f8f8 	bl	8011bbc <dhcp_discover>
 80119cc:	4603      	mov	r3, r0
 80119ce:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80119d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d005      	beq.n	80119e4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 fc59 	bl	8012290 <dhcp_release_and_stop>
    return ERR_MEM;
 80119de:	f04f 33ff 	mov.w	r3, #4294967295
 80119e2:	e001      	b.n	80119e8 <dhcp_start+0xe4>
  }
  return result;
 80119e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	080189b4 	.word	0x080189b4
 80119f4:	08018a98 	.word	0x08018a98
 80119f8:	08018a14 	.word	0x08018a14
 80119fc:	08018adc 	.word	0x08018adc

08011a00 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d025      	beq.n	8011a60 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	795b      	ldrb	r3, [r3, #5]
 8011a18:	2b0a      	cmp	r3, #10
 8011a1a:	d008      	beq.n	8011a2e <dhcp_network_changed+0x2e>
 8011a1c:	2b0a      	cmp	r3, #10
 8011a1e:	dc0d      	bgt.n	8011a3c <dhcp_network_changed+0x3c>
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d01f      	beq.n	8011a64 <dhcp_network_changed+0x64>
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	db09      	blt.n	8011a3c <dhcp_network_changed+0x3c>
 8011a28:	3b03      	subs	r3, #3
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d806      	bhi.n	8011a3c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2200      	movs	r2, #0
 8011a32:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f000 fb75 	bl	8012124 <dhcp_reboot>
      break;
 8011a3a:	e014      	b.n	8011a66 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	795b      	ldrb	r3, [r3, #5]
 8011a40:	2b0c      	cmp	r3, #12
 8011a42:	d906      	bls.n	8011a52 <dhcp_network_changed+0x52>
 8011a44:	4b09      	ldr	r3, [pc, #36]	; (8011a6c <dhcp_network_changed+0x6c>)
 8011a46:	f240 326d 	movw	r2, #877	; 0x36d
 8011a4a:	4909      	ldr	r1, [pc, #36]	; (8011a70 <dhcp_network_changed+0x70>)
 8011a4c:	4809      	ldr	r0, [pc, #36]	; (8011a74 <dhcp_network_changed+0x74>)
 8011a4e:	f003 fdc7 	bl	80155e0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	2200      	movs	r2, #0
 8011a56:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 f8af 	bl	8011bbc <dhcp_discover>
      break;
 8011a5e:	e002      	b.n	8011a66 <dhcp_network_changed+0x66>
    return;
 8011a60:	bf00      	nop
 8011a62:	e000      	b.n	8011a66 <dhcp_network_changed+0x66>
      break;
 8011a64:	bf00      	nop
  }
}
 8011a66:	3710      	adds	r7, #16
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	080189b4 	.word	0x080189b4
 8011a70:	08018b00 	.word	0x08018b00
 8011a74:	08018a14 	.word	0x08018a14

08011a78 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d107      	bne.n	8011a98 <dhcp_arp_reply+0x20>
 8011a88:	4b0e      	ldr	r3, [pc, #56]	; (8011ac4 <dhcp_arp_reply+0x4c>)
 8011a8a:	f240 328b 	movw	r2, #907	; 0x38b
 8011a8e:	490e      	ldr	r1, [pc, #56]	; (8011ac8 <dhcp_arp_reply+0x50>)
 8011a90:	480e      	ldr	r0, [pc, #56]	; (8011acc <dhcp_arp_reply+0x54>)
 8011a92:	f003 fda5 	bl	80155e0 <iprintf>
 8011a96:	e012      	b.n	8011abe <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a9c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d00c      	beq.n	8011abe <dhcp_arp_reply+0x46>
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	795b      	ldrb	r3, [r3, #5]
 8011aa8:	2b08      	cmp	r3, #8
 8011aaa:	d108      	bne.n	8011abe <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	69db      	ldr	r3, [r3, #28]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d102      	bne.n	8011abe <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f000 f809 	bl	8011ad0 <dhcp_decline>
    }
  }
}
 8011abe:	3710      	adds	r7, #16
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	080189b4 	.word	0x080189b4
 8011ac8:	08018a98 	.word	0x08018a98
 8011acc:	08018a14 	.word	0x08018a14

08011ad0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011ad0:	b5b0      	push	{r4, r5, r7, lr}
 8011ad2:	b08a      	sub	sp, #40	; 0x28
 8011ad4:	af02      	add	r7, sp, #8
 8011ad6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011adc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011ade:	210c      	movs	r1, #12
 8011ae0:	69b8      	ldr	r0, [r7, #24]
 8011ae2:	f000 fc6f 	bl	80123c4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8011ae6:	f107 030c 	add.w	r3, r7, #12
 8011aea:	2204      	movs	r2, #4
 8011aec:	69b9      	ldr	r1, [r7, #24]
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f001 f8f4 	bl	8012cdc <dhcp_create_msg>
 8011af4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d035      	beq.n	8011b68 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011b02:	89b8      	ldrh	r0, [r7, #12]
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b0a:	2304      	movs	r3, #4
 8011b0c:	2232      	movs	r2, #50	; 0x32
 8011b0e:	f000 fc73 	bl	80123f8 <dhcp_option>
 8011b12:	4603      	mov	r3, r0
 8011b14:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011b16:	89bc      	ldrh	r4, [r7, #12]
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	69db      	ldr	r3, [r3, #28]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7f7 fdc7 	bl	80096b6 <lwip_htonl>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f000 fcee 	bl	8012510 <dhcp_option_long>
 8011b34:	4603      	mov	r3, r0
 8011b36:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011b38:	89b8      	ldrh	r0, [r7, #12]
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	33f0      	adds	r3, #240	; 0xf0
 8011b3e:	697a      	ldr	r2, [r7, #20]
 8011b40:	4619      	mov	r1, r3
 8011b42:	f001 f9a1 	bl	8012e88 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011b46:	4b19      	ldr	r3, [pc, #100]	; (8011bac <dhcp_decline+0xdc>)
 8011b48:	6818      	ldr	r0, [r3, #0]
 8011b4a:	4b19      	ldr	r3, [pc, #100]	; (8011bb0 <dhcp_decline+0xe0>)
 8011b4c:	9301      	str	r3, [sp, #4]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	9300      	str	r3, [sp, #0]
 8011b52:	2343      	movs	r3, #67	; 0x43
 8011b54:	4a17      	ldr	r2, [pc, #92]	; (8011bb4 <dhcp_decline+0xe4>)
 8011b56:	6979      	ldr	r1, [r7, #20]
 8011b58:	f7ff f8d2 	bl	8010d00 <udp_sendto_if_src>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011b60:	6978      	ldr	r0, [r7, #20]
 8011b62:	f7f9 f995 	bl	800ae90 <pbuf_free>
 8011b66:	e001      	b.n	8011b6c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011b68:	23ff      	movs	r3, #255	; 0xff
 8011b6a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	799b      	ldrb	r3, [r3, #6]
 8011b70:	2bff      	cmp	r3, #255	; 0xff
 8011b72:	d005      	beq.n	8011b80 <dhcp_decline+0xb0>
    dhcp->tries++;
 8011b74:	69bb      	ldr	r3, [r7, #24]
 8011b76:	799b      	ldrb	r3, [r3, #6]
 8011b78:	3301      	adds	r3, #1
 8011b7a:	b2da      	uxtb	r2, r3
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8011b80:	f242 7310 	movw	r3, #10000	; 0x2710
 8011b84:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011b86:	89fb      	ldrh	r3, [r7, #14]
 8011b88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011b8c:	4a0a      	ldr	r2, [pc, #40]	; (8011bb8 <dhcp_decline+0xe8>)
 8011b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8011b92:	1152      	asrs	r2, r2, #5
 8011b94:	17db      	asrs	r3, r3, #31
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011b9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3720      	adds	r7, #32
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8011baa:	bf00      	nop
 8011bac:	200086e8 	.word	0x200086e8
 8011bb0:	08019524 	.word	0x08019524
 8011bb4:	08019528 	.word	0x08019528
 8011bb8:	10624dd3 	.word	0x10624dd3

08011bbc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b08a      	sub	sp, #40	; 0x28
 8011bc0:	af02      	add	r7, sp, #8
 8011bc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011bce:	69bb      	ldr	r3, [r7, #24]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011bd4:	2106      	movs	r1, #6
 8011bd6:	69b8      	ldr	r0, [r7, #24]
 8011bd8:	f000 fbf4 	bl	80123c4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011bdc:	f107 0308 	add.w	r3, r7, #8
 8011be0:	2201      	movs	r2, #1
 8011be2:	69b9      	ldr	r1, [r7, #24]
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f001 f879 	bl	8012cdc <dhcp_create_msg>
 8011bea:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d04b      	beq.n	8011c8a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011bf8:	8938      	ldrh	r0, [r7, #8]
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c00:	2302      	movs	r3, #2
 8011c02:	2239      	movs	r2, #57	; 0x39
 8011c04:	f000 fbf8 	bl	80123f8 <dhcp_option>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011c0c:	8938      	ldrh	r0, [r7, #8]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c18:	461a      	mov	r2, r3
 8011c1a:	f000 fc47 	bl	80124ac <dhcp_option_short>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011c22:	8938      	ldrh	r0, [r7, #8]
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c2a:	2303      	movs	r3, #3
 8011c2c:	2237      	movs	r2, #55	; 0x37
 8011c2e:	f000 fbe3 	bl	80123f8 <dhcp_option>
 8011c32:	4603      	mov	r3, r0
 8011c34:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011c36:	2300      	movs	r3, #0
 8011c38:	77fb      	strb	r3, [r7, #31]
 8011c3a:	e00e      	b.n	8011c5a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011c3c:	8938      	ldrh	r0, [r7, #8]
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c44:	7ffb      	ldrb	r3, [r7, #31]
 8011c46:	4a29      	ldr	r2, [pc, #164]	; (8011cec <dhcp_discover+0x130>)
 8011c48:	5cd3      	ldrb	r3, [r2, r3]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	f000 fc08 	bl	8012460 <dhcp_option_byte>
 8011c50:	4603      	mov	r3, r0
 8011c52:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011c54:	7ffb      	ldrb	r3, [r7, #31]
 8011c56:	3301      	adds	r3, #1
 8011c58:	77fb      	strb	r3, [r7, #31]
 8011c5a:	7ffb      	ldrb	r3, [r7, #31]
 8011c5c:	2b02      	cmp	r3, #2
 8011c5e:	d9ed      	bls.n	8011c3c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011c60:	8938      	ldrh	r0, [r7, #8]
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	33f0      	adds	r3, #240	; 0xf0
 8011c66:	693a      	ldr	r2, [r7, #16]
 8011c68:	4619      	mov	r1, r3
 8011c6a:	f001 f90d 	bl	8012e88 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011c6e:	4b20      	ldr	r3, [pc, #128]	; (8011cf0 <dhcp_discover+0x134>)
 8011c70:	6818      	ldr	r0, [r3, #0]
 8011c72:	4b20      	ldr	r3, [pc, #128]	; (8011cf4 <dhcp_discover+0x138>)
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	2343      	movs	r3, #67	; 0x43
 8011c7c:	4a1e      	ldr	r2, [pc, #120]	; (8011cf8 <dhcp_discover+0x13c>)
 8011c7e:	6939      	ldr	r1, [r7, #16]
 8011c80:	f7ff f83e 	bl	8010d00 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8011c84:	6938      	ldr	r0, [r7, #16]
 8011c86:	f7f9 f903 	bl	800ae90 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	799b      	ldrb	r3, [r3, #6]
 8011c8e:	2bff      	cmp	r3, #255	; 0xff
 8011c90:	d005      	beq.n	8011c9e <dhcp_discover+0xe2>
    dhcp->tries++;
 8011c92:	69bb      	ldr	r3, [r7, #24]
 8011c94:	799b      	ldrb	r3, [r3, #6]
 8011c96:	3301      	adds	r3, #1
 8011c98:	b2da      	uxtb	r2, r3
 8011c9a:	69bb      	ldr	r3, [r7, #24]
 8011c9c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	799b      	ldrb	r3, [r3, #6]
 8011ca2:	2b05      	cmp	r3, #5
 8011ca4:	d80d      	bhi.n	8011cc2 <dhcp_discover+0x106>
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	799b      	ldrb	r3, [r3, #6]
 8011caa:	461a      	mov	r2, r3
 8011cac:	2301      	movs	r3, #1
 8011cae:	4093      	lsls	r3, r2
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	0152      	lsls	r2, r2, #5
 8011cb6:	1ad2      	subs	r2, r2, r3
 8011cb8:	0092      	lsls	r2, r2, #2
 8011cba:	4413      	add	r3, r2
 8011cbc:	00db      	lsls	r3, r3, #3
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	e001      	b.n	8011cc6 <dhcp_discover+0x10a>
 8011cc2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011cc6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011cc8:	897b      	ldrh	r3, [r7, #10]
 8011cca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011cce:	4a0b      	ldr	r2, [pc, #44]	; (8011cfc <dhcp_discover+0x140>)
 8011cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8011cd4:	1152      	asrs	r2, r2, #5
 8011cd6:	17db      	asrs	r3, r3, #31
 8011cd8:	1ad3      	subs	r3, r2, r3
 8011cda:	b29a      	uxth	r2, r3
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011ce0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3720      	adds	r7, #32
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}
 8011cec:	20000040 	.word	0x20000040
 8011cf0:	200086e8 	.word	0x200086e8
 8011cf4:	08019524 	.word	0x08019524
 8011cf8:	08019528 	.word	0x08019528
 8011cfc:	10624dd3 	.word	0x10624dd3

08011d00 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b088      	sub	sp, #32
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d107      	bne.n	8011d1e <dhcp_bind+0x1e>
 8011d0e:	4b64      	ldr	r3, [pc, #400]	; (8011ea0 <dhcp_bind+0x1a0>)
 8011d10:	f240 4215 	movw	r2, #1045	; 0x415
 8011d14:	4963      	ldr	r1, [pc, #396]	; (8011ea4 <dhcp_bind+0x1a4>)
 8011d16:	4864      	ldr	r0, [pc, #400]	; (8011ea8 <dhcp_bind+0x1a8>)
 8011d18:	f003 fc62 	bl	80155e0 <iprintf>
 8011d1c:	e0bc      	b.n	8011e98 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d22:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d107      	bne.n	8011d3a <dhcp_bind+0x3a>
 8011d2a:	4b5d      	ldr	r3, [pc, #372]	; (8011ea0 <dhcp_bind+0x1a0>)
 8011d2c:	f240 4217 	movw	r2, #1047	; 0x417
 8011d30:	495e      	ldr	r1, [pc, #376]	; (8011eac <dhcp_bind+0x1ac>)
 8011d32:	485d      	ldr	r0, [pc, #372]	; (8011ea8 <dhcp_bind+0x1a8>)
 8011d34:	f003 fc54 	bl	80155e0 <iprintf>
 8011d38:	e0ae      	b.n	8011e98 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8011d3a:	69bb      	ldr	r3, [r7, #24]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d48:	d019      	beq.n	8011d7e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d4e:	331e      	adds	r3, #30
 8011d50:	4a57      	ldr	r2, [pc, #348]	; (8011eb0 <dhcp_bind+0x1b0>)
 8011d52:	fba2 2303 	umull	r2, r3, r2, r3
 8011d56:	095b      	lsrs	r3, r3, #5
 8011d58:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d60:	d302      	bcc.n	8011d68 <dhcp_bind+0x68>
      timeout = 0xffff;
 8011d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d66:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	69bb      	ldr	r3, [r7, #24]
 8011d6e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	8a9b      	ldrh	r3, [r3, #20]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d102      	bne.n	8011d7e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d86:	d01d      	beq.n	8011dc4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8c:	331e      	adds	r3, #30
 8011d8e:	4a48      	ldr	r2, [pc, #288]	; (8011eb0 <dhcp_bind+0x1b0>)
 8011d90:	fba2 2303 	umull	r2, r3, r2, r3
 8011d94:	095b      	lsrs	r3, r3, #5
 8011d96:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d9e:	d302      	bcc.n	8011da6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8011da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011da4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8011da6:	69fb      	ldr	r3, [r7, #28]
 8011da8:	b29a      	uxth	r2, r3
 8011daa:	69bb      	ldr	r3, [r7, #24]
 8011dac:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011dae:	69bb      	ldr	r3, [r7, #24]
 8011db0:	895b      	ldrh	r3, [r3, #10]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d102      	bne.n	8011dbc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8011db6:	69bb      	ldr	r3, [r7, #24]
 8011db8:	2201      	movs	r2, #1
 8011dba:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	895a      	ldrh	r2, [r3, #10]
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dcc:	d01d      	beq.n	8011e0a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dd2:	331e      	adds	r3, #30
 8011dd4:	4a36      	ldr	r2, [pc, #216]	; (8011eb0 <dhcp_bind+0x1b0>)
 8011dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8011dda:	095b      	lsrs	r3, r3, #5
 8011ddc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011dde:	69fb      	ldr	r3, [r7, #28]
 8011de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011de4:	d302      	bcc.n	8011dec <dhcp_bind+0xec>
      timeout = 0xffff;
 8011de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011df4:	69bb      	ldr	r3, [r7, #24]
 8011df6:	899b      	ldrh	r3, [r3, #12]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d102      	bne.n	8011e02 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	899a      	ldrh	r2, [r3, #12]
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	895a      	ldrh	r2, [r3, #10]
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	899b      	ldrh	r3, [r3, #12]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d306      	bcc.n	8011e24 <dhcp_bind+0x124>
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	899b      	ldrh	r3, [r3, #12]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d002      	beq.n	8011e24 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	2200      	movs	r2, #0
 8011e22:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	79db      	ldrb	r3, [r3, #7]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d003      	beq.n	8011e34 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	6a1b      	ldr	r3, [r3, #32]
 8011e30:	613b      	str	r3, [r7, #16]
 8011e32:	e014      	b.n	8011e5e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	331c      	adds	r3, #28
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8011e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	db02      	blt.n	8011e4a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011e44:	23ff      	movs	r3, #255	; 0xff
 8011e46:	613b      	str	r3, [r7, #16]
 8011e48:	e009      	b.n	8011e5e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8011e4a:	7dfb      	ldrb	r3, [r7, #23]
 8011e4c:	2bbf      	cmp	r3, #191	; 0xbf
 8011e4e:	d903      	bls.n	8011e58 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8011e50:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011e54:	613b      	str	r3, [r7, #16]
 8011e56:	e002      	b.n	8011e5e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8011e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e5c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e62:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d108      	bne.n	8011e7c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	69da      	ldr	r2, [r3, #28]
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	4013      	ands	r3, r2
 8011e72:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011e7a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8011e7c:	210a      	movs	r1, #10
 8011e7e:	69b8      	ldr	r0, [r7, #24]
 8011e80:	f000 faa0 	bl	80123c4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8011e84:	69bb      	ldr	r3, [r7, #24]
 8011e86:	f103 011c 	add.w	r1, r3, #28
 8011e8a:	f107 030c 	add.w	r3, r7, #12
 8011e8e:	f107 0210 	add.w	r2, r7, #16
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f7f8 fb3c 	bl	800a510 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8011e98:	3720      	adds	r7, #32
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	080189b4 	.word	0x080189b4
 8011ea4:	08018b14 	.word	0x08018b14
 8011ea8:	08018a14 	.word	0x08018a14
 8011eac:	08018b30 	.word	0x08018b30
 8011eb0:	88888889 	.word	0x88888889

08011eb4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b08a      	sub	sp, #40	; 0x28
 8011eb8:	af02      	add	r7, sp, #8
 8011eba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011ec2:	2105      	movs	r1, #5
 8011ec4:	69b8      	ldr	r0, [r7, #24]
 8011ec6:	f000 fa7d 	bl	80123c4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011eca:	f107 030c 	add.w	r3, r7, #12
 8011ece:	2203      	movs	r2, #3
 8011ed0:	69b9      	ldr	r1, [r7, #24]
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 ff02 	bl	8012cdc <dhcp_create_msg>
 8011ed8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d04e      	beq.n	8011f7e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011ee6:	89b8      	ldrh	r0, [r7, #12]
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011eee:	2302      	movs	r3, #2
 8011ef0:	2239      	movs	r2, #57	; 0x39
 8011ef2:	f000 fa81 	bl	80123f8 <dhcp_option>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011efa:	89b8      	ldrh	r0, [r7, #12]
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f06:	461a      	mov	r2, r3
 8011f08:	f000 fad0 	bl	80124ac <dhcp_option_short>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011f10:	89b8      	ldrh	r0, [r7, #12]
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f18:	2303      	movs	r3, #3
 8011f1a:	2237      	movs	r2, #55	; 0x37
 8011f1c:	f000 fa6c 	bl	80123f8 <dhcp_option>
 8011f20:	4603      	mov	r3, r0
 8011f22:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011f24:	2300      	movs	r3, #0
 8011f26:	77bb      	strb	r3, [r7, #30]
 8011f28:	e00e      	b.n	8011f48 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011f2a:	89b8      	ldrh	r0, [r7, #12]
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f32:	7fbb      	ldrb	r3, [r7, #30]
 8011f34:	4a2a      	ldr	r2, [pc, #168]	; (8011fe0 <dhcp_renew+0x12c>)
 8011f36:	5cd3      	ldrb	r3, [r2, r3]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	f000 fa91 	bl	8012460 <dhcp_option_byte>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011f42:	7fbb      	ldrb	r3, [r7, #30]
 8011f44:	3301      	adds	r3, #1
 8011f46:	77bb      	strb	r3, [r7, #30]
 8011f48:	7fbb      	ldrb	r3, [r7, #30]
 8011f4a:	2b02      	cmp	r3, #2
 8011f4c:	d9ed      	bls.n	8011f2a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011f4e:	89b8      	ldrh	r0, [r7, #12]
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	33f0      	adds	r3, #240	; 0xf0
 8011f54:	697a      	ldr	r2, [r7, #20]
 8011f56:	4619      	mov	r1, r3
 8011f58:	f000 ff96 	bl	8012e88 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011f5c:	4b21      	ldr	r3, [pc, #132]	; (8011fe4 <dhcp_renew+0x130>)
 8011f5e:	6818      	ldr	r0, [r3, #0]
 8011f60:	69bb      	ldr	r3, [r7, #24]
 8011f62:	f103 0218 	add.w	r2, r3, #24
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	2343      	movs	r3, #67	; 0x43
 8011f6c:	6979      	ldr	r1, [r7, #20]
 8011f6e:	f7fe fe53 	bl	8010c18 <udp_sendto_if>
 8011f72:	4603      	mov	r3, r0
 8011f74:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011f76:	6978      	ldr	r0, [r7, #20]
 8011f78:	f7f8 ff8a 	bl	800ae90 <pbuf_free>
 8011f7c:	e001      	b.n	8011f82 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011f7e:	23ff      	movs	r3, #255	; 0xff
 8011f80:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011f82:	69bb      	ldr	r3, [r7, #24]
 8011f84:	799b      	ldrb	r3, [r3, #6]
 8011f86:	2bff      	cmp	r3, #255	; 0xff
 8011f88:	d005      	beq.n	8011f96 <dhcp_renew+0xe2>
    dhcp->tries++;
 8011f8a:	69bb      	ldr	r3, [r7, #24]
 8011f8c:	799b      	ldrb	r3, [r3, #6]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	b2da      	uxtb	r2, r3
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8011f96:	69bb      	ldr	r3, [r7, #24]
 8011f98:	799b      	ldrb	r3, [r3, #6]
 8011f9a:	2b09      	cmp	r3, #9
 8011f9c:	d80a      	bhi.n	8011fb4 <dhcp_renew+0x100>
 8011f9e:	69bb      	ldr	r3, [r7, #24]
 8011fa0:	799b      	ldrb	r3, [r3, #6]
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	0152      	lsls	r2, r2, #5
 8011fa8:	1ad2      	subs	r2, r2, r3
 8011faa:	0092      	lsls	r2, r2, #2
 8011fac:	4413      	add	r3, r2
 8011fae:	011b      	lsls	r3, r3, #4
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	e001      	b.n	8011fb8 <dhcp_renew+0x104>
 8011fb4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8011fb8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011fba:	89fb      	ldrh	r3, [r7, #14]
 8011fbc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011fc0:	4a09      	ldr	r2, [pc, #36]	; (8011fe8 <dhcp_renew+0x134>)
 8011fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8011fc6:	1152      	asrs	r2, r2, #5
 8011fc8:	17db      	asrs	r3, r3, #31
 8011fca:	1ad3      	subs	r3, r2, r3
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011fd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3720      	adds	r7, #32
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	20000040 	.word	0x20000040
 8011fe4:	200086e8 	.word	0x200086e8
 8011fe8:	10624dd3 	.word	0x10624dd3

08011fec <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b08a      	sub	sp, #40	; 0x28
 8011ff0:	af02      	add	r7, sp, #8
 8011ff2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ff8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8011ffa:	2104      	movs	r1, #4
 8011ffc:	69b8      	ldr	r0, [r7, #24]
 8011ffe:	f000 f9e1 	bl	80123c4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012002:	f107 030c 	add.w	r3, r7, #12
 8012006:	2203      	movs	r2, #3
 8012008:	69b9      	ldr	r1, [r7, #24]
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 fe66 	bl	8012cdc <dhcp_create_msg>
 8012010:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d04c      	beq.n	80120b2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801201e:	89b8      	ldrh	r0, [r7, #12]
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012026:	2302      	movs	r3, #2
 8012028:	2239      	movs	r2, #57	; 0x39
 801202a:	f000 f9e5 	bl	80123f8 <dhcp_option>
 801202e:	4603      	mov	r3, r0
 8012030:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012032:	89b8      	ldrh	r0, [r7, #12]
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801203e:	461a      	mov	r2, r3
 8012040:	f000 fa34 	bl	80124ac <dhcp_option_short>
 8012044:	4603      	mov	r3, r0
 8012046:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012048:	89b8      	ldrh	r0, [r7, #12]
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012050:	2303      	movs	r3, #3
 8012052:	2237      	movs	r2, #55	; 0x37
 8012054:	f000 f9d0 	bl	80123f8 <dhcp_option>
 8012058:	4603      	mov	r3, r0
 801205a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801205c:	2300      	movs	r3, #0
 801205e:	77bb      	strb	r3, [r7, #30]
 8012060:	e00e      	b.n	8012080 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012062:	89b8      	ldrh	r0, [r7, #12]
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801206a:	7fbb      	ldrb	r3, [r7, #30]
 801206c:	4a29      	ldr	r2, [pc, #164]	; (8012114 <dhcp_rebind+0x128>)
 801206e:	5cd3      	ldrb	r3, [r2, r3]
 8012070:	461a      	mov	r2, r3
 8012072:	f000 f9f5 	bl	8012460 <dhcp_option_byte>
 8012076:	4603      	mov	r3, r0
 8012078:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801207a:	7fbb      	ldrb	r3, [r7, #30]
 801207c:	3301      	adds	r3, #1
 801207e:	77bb      	strb	r3, [r7, #30]
 8012080:	7fbb      	ldrb	r3, [r7, #30]
 8012082:	2b02      	cmp	r3, #2
 8012084:	d9ed      	bls.n	8012062 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012086:	89b8      	ldrh	r0, [r7, #12]
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	33f0      	adds	r3, #240	; 0xf0
 801208c:	697a      	ldr	r2, [r7, #20]
 801208e:	4619      	mov	r1, r3
 8012090:	f000 fefa 	bl	8012e88 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012094:	4b20      	ldr	r3, [pc, #128]	; (8012118 <dhcp_rebind+0x12c>)
 8012096:	6818      	ldr	r0, [r3, #0]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	2343      	movs	r3, #67	; 0x43
 801209e:	4a1f      	ldr	r2, [pc, #124]	; (801211c <dhcp_rebind+0x130>)
 80120a0:	6979      	ldr	r1, [r7, #20]
 80120a2:	f7fe fdb9 	bl	8010c18 <udp_sendto_if>
 80120a6:	4603      	mov	r3, r0
 80120a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80120aa:	6978      	ldr	r0, [r7, #20]
 80120ac:	f7f8 fef0 	bl	800ae90 <pbuf_free>
 80120b0:	e001      	b.n	80120b6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80120b2:	23ff      	movs	r3, #255	; 0xff
 80120b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80120b6:	69bb      	ldr	r3, [r7, #24]
 80120b8:	799b      	ldrb	r3, [r3, #6]
 80120ba:	2bff      	cmp	r3, #255	; 0xff
 80120bc:	d005      	beq.n	80120ca <dhcp_rebind+0xde>
    dhcp->tries++;
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	799b      	ldrb	r3, [r3, #6]
 80120c2:	3301      	adds	r3, #1
 80120c4:	b2da      	uxtb	r2, r3
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80120ca:	69bb      	ldr	r3, [r7, #24]
 80120cc:	799b      	ldrb	r3, [r3, #6]
 80120ce:	2b09      	cmp	r3, #9
 80120d0:	d80a      	bhi.n	80120e8 <dhcp_rebind+0xfc>
 80120d2:	69bb      	ldr	r3, [r7, #24]
 80120d4:	799b      	ldrb	r3, [r3, #6]
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	461a      	mov	r2, r3
 80120da:	0152      	lsls	r2, r2, #5
 80120dc:	1ad2      	subs	r2, r2, r3
 80120de:	0092      	lsls	r2, r2, #2
 80120e0:	4413      	add	r3, r2
 80120e2:	00db      	lsls	r3, r3, #3
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	e001      	b.n	80120ec <dhcp_rebind+0x100>
 80120e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80120ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80120ee:	89fb      	ldrh	r3, [r7, #14]
 80120f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80120f4:	4a0a      	ldr	r2, [pc, #40]	; (8012120 <dhcp_rebind+0x134>)
 80120f6:	fb82 1203 	smull	r1, r2, r2, r3
 80120fa:	1152      	asrs	r2, r2, #5
 80120fc:	17db      	asrs	r3, r3, #31
 80120fe:	1ad3      	subs	r3, r2, r3
 8012100:	b29a      	uxth	r2, r3
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012106:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3720      	adds	r7, #32
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	20000040 	.word	0x20000040
 8012118:	200086e8 	.word	0x200086e8
 801211c:	08019528 	.word	0x08019528
 8012120:	10624dd3 	.word	0x10624dd3

08012124 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012124:	b5b0      	push	{r4, r5, r7, lr}
 8012126:	b08a      	sub	sp, #40	; 0x28
 8012128:	af02      	add	r7, sp, #8
 801212a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012130:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012132:	2103      	movs	r1, #3
 8012134:	69b8      	ldr	r0, [r7, #24]
 8012136:	f000 f945 	bl	80123c4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801213a:	f107 030c 	add.w	r3, r7, #12
 801213e:	2203      	movs	r2, #3
 8012140:	69b9      	ldr	r1, [r7, #24]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 fdca 	bl	8012cdc <dhcp_create_msg>
 8012148:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d066      	beq.n	801221e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012156:	89b8      	ldrh	r0, [r7, #12]
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801215e:	2302      	movs	r3, #2
 8012160:	2239      	movs	r2, #57	; 0x39
 8012162:	f000 f949 	bl	80123f8 <dhcp_option>
 8012166:	4603      	mov	r3, r0
 8012168:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801216a:	89b8      	ldrh	r0, [r7, #12]
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	33f0      	adds	r3, #240	; 0xf0
 8012170:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012174:	4619      	mov	r1, r3
 8012176:	f000 f999 	bl	80124ac <dhcp_option_short>
 801217a:	4603      	mov	r3, r0
 801217c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801217e:	89b8      	ldrh	r0, [r7, #12]
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012186:	2304      	movs	r3, #4
 8012188:	2232      	movs	r2, #50	; 0x32
 801218a:	f000 f935 	bl	80123f8 <dhcp_option>
 801218e:	4603      	mov	r3, r0
 8012190:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012192:	89bc      	ldrh	r4, [r7, #12]
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	69db      	ldr	r3, [r3, #28]
 801219e:	4618      	mov	r0, r3
 80121a0:	f7f7 fa89 	bl	80096b6 <lwip_htonl>
 80121a4:	4603      	mov	r3, r0
 80121a6:	461a      	mov	r2, r3
 80121a8:	4629      	mov	r1, r5
 80121aa:	4620      	mov	r0, r4
 80121ac:	f000 f9b0 	bl	8012510 <dhcp_option_long>
 80121b0:	4603      	mov	r3, r0
 80121b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80121b4:	89b8      	ldrh	r0, [r7, #12]
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80121bc:	2303      	movs	r3, #3
 80121be:	2237      	movs	r2, #55	; 0x37
 80121c0:	f000 f91a 	bl	80123f8 <dhcp_option>
 80121c4:	4603      	mov	r3, r0
 80121c6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80121c8:	2300      	movs	r3, #0
 80121ca:	77bb      	strb	r3, [r7, #30]
 80121cc:	e00e      	b.n	80121ec <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80121ce:	89b8      	ldrh	r0, [r7, #12]
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80121d6:	7fbb      	ldrb	r3, [r7, #30]
 80121d8:	4a29      	ldr	r2, [pc, #164]	; (8012280 <dhcp_reboot+0x15c>)
 80121da:	5cd3      	ldrb	r3, [r2, r3]
 80121dc:	461a      	mov	r2, r3
 80121de:	f000 f93f 	bl	8012460 <dhcp_option_byte>
 80121e2:	4603      	mov	r3, r0
 80121e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80121e6:	7fbb      	ldrb	r3, [r7, #30]
 80121e8:	3301      	adds	r3, #1
 80121ea:	77bb      	strb	r3, [r7, #30]
 80121ec:	7fbb      	ldrb	r3, [r7, #30]
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d9ed      	bls.n	80121ce <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80121f2:	89b8      	ldrh	r0, [r7, #12]
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	33f0      	adds	r3, #240	; 0xf0
 80121f8:	697a      	ldr	r2, [r7, #20]
 80121fa:	4619      	mov	r1, r3
 80121fc:	f000 fe44 	bl	8012e88 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012200:	4b20      	ldr	r3, [pc, #128]	; (8012284 <dhcp_reboot+0x160>)
 8012202:	6818      	ldr	r0, [r3, #0]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	2343      	movs	r3, #67	; 0x43
 801220a:	4a1f      	ldr	r2, [pc, #124]	; (8012288 <dhcp_reboot+0x164>)
 801220c:	6979      	ldr	r1, [r7, #20]
 801220e:	f7fe fd03 	bl	8010c18 <udp_sendto_if>
 8012212:	4603      	mov	r3, r0
 8012214:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012216:	6978      	ldr	r0, [r7, #20]
 8012218:	f7f8 fe3a 	bl	800ae90 <pbuf_free>
 801221c:	e001      	b.n	8012222 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801221e:	23ff      	movs	r3, #255	; 0xff
 8012220:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	799b      	ldrb	r3, [r3, #6]
 8012226:	2bff      	cmp	r3, #255	; 0xff
 8012228:	d005      	beq.n	8012236 <dhcp_reboot+0x112>
    dhcp->tries++;
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	799b      	ldrb	r3, [r3, #6]
 801222e:	3301      	adds	r3, #1
 8012230:	b2da      	uxtb	r2, r3
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	799b      	ldrb	r3, [r3, #6]
 801223a:	2b09      	cmp	r3, #9
 801223c:	d80a      	bhi.n	8012254 <dhcp_reboot+0x130>
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	799b      	ldrb	r3, [r3, #6]
 8012242:	b29b      	uxth	r3, r3
 8012244:	461a      	mov	r2, r3
 8012246:	0152      	lsls	r2, r2, #5
 8012248:	1ad2      	subs	r2, r2, r3
 801224a:	0092      	lsls	r2, r2, #2
 801224c:	4413      	add	r3, r2
 801224e:	00db      	lsls	r3, r3, #3
 8012250:	b29b      	uxth	r3, r3
 8012252:	e001      	b.n	8012258 <dhcp_reboot+0x134>
 8012254:	f242 7310 	movw	r3, #10000	; 0x2710
 8012258:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801225a:	89fb      	ldrh	r3, [r7, #14]
 801225c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012260:	4a0a      	ldr	r2, [pc, #40]	; (801228c <dhcp_reboot+0x168>)
 8012262:	fb82 1203 	smull	r1, r2, r2, r3
 8012266:	1152      	asrs	r2, r2, #5
 8012268:	17db      	asrs	r3, r3, #31
 801226a:	1ad3      	subs	r3, r2, r3
 801226c:	b29a      	uxth	r2, r3
 801226e:	69bb      	ldr	r3, [r7, #24]
 8012270:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012272:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012276:	4618      	mov	r0, r3
 8012278:	3720      	adds	r7, #32
 801227a:	46bd      	mov	sp, r7
 801227c:	bdb0      	pop	{r4, r5, r7, pc}
 801227e:	bf00      	nop
 8012280:	20000040 	.word	0x20000040
 8012284:	200086e8 	.word	0x200086e8
 8012288:	08019528 	.word	0x08019528
 801228c:	10624dd3 	.word	0x10624dd3

08012290 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012290:	b5b0      	push	{r4, r5, r7, lr}
 8012292:	b08a      	sub	sp, #40	; 0x28
 8012294:	af02      	add	r7, sp, #8
 8012296:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801229c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801229e:	69fb      	ldr	r3, [r7, #28]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	f000 8084 	beq.w	80123ae <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	795b      	ldrb	r3, [r3, #5]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	f000 8081 	beq.w	80123b2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	699b      	ldr	r3, [r3, #24]
 80122b4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80122b6:	69fb      	ldr	r3, [r7, #28]
 80122b8:	2200      	movs	r2, #0
 80122ba:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	2200      	movs	r2, #0
 80122c0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80122c2:	69fb      	ldr	r3, [r7, #28]
 80122c4:	2200      	movs	r2, #0
 80122c6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80122c8:	69fb      	ldr	r3, [r7, #28]
 80122ca:	2200      	movs	r2, #0
 80122cc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80122ce:	69fb      	ldr	r3, [r7, #28]
 80122d0:	2200      	movs	r2, #0
 80122d2:	631a      	str	r2, [r3, #48]	; 0x30
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	62da      	str	r2, [r3, #44]	; 0x2c
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	2200      	movs	r2, #0
 80122e8:	829a      	strh	r2, [r3, #20]
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	8a9a      	ldrh	r2, [r3, #20]
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	825a      	strh	r2, [r3, #18]
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	8a5a      	ldrh	r2, [r3, #18]
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	821a      	strh	r2, [r3, #16]
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	8a1a      	ldrh	r2, [r3, #16]
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fdee 	bl	8012ee4 <dhcp_supplied_address>
 8012308:	4603      	mov	r3, r0
 801230a:	2b00      	cmp	r3, #0
 801230c:	d03b      	beq.n	8012386 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801230e:	f107 030e 	add.w	r3, r7, #14
 8012312:	2207      	movs	r2, #7
 8012314:	69f9      	ldr	r1, [r7, #28]
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 fce0 	bl	8012cdc <dhcp_create_msg>
 801231c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801231e:	69bb      	ldr	r3, [r7, #24]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d030      	beq.n	8012386 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801232a:	89f8      	ldrh	r0, [r7, #14]
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012332:	2304      	movs	r3, #4
 8012334:	2236      	movs	r2, #54	; 0x36
 8012336:	f000 f85f 	bl	80123f8 <dhcp_option>
 801233a:	4603      	mov	r3, r0
 801233c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801233e:	89fc      	ldrh	r4, [r7, #14]
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	4618      	mov	r0, r3
 801234a:	f7f7 f9b4 	bl	80096b6 <lwip_htonl>
 801234e:	4603      	mov	r3, r0
 8012350:	461a      	mov	r2, r3
 8012352:	4629      	mov	r1, r5
 8012354:	4620      	mov	r0, r4
 8012356:	f000 f8db 	bl	8012510 <dhcp_option_long>
 801235a:	4603      	mov	r3, r0
 801235c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801235e:	89f8      	ldrh	r0, [r7, #14]
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	33f0      	adds	r3, #240	; 0xf0
 8012364:	69ba      	ldr	r2, [r7, #24]
 8012366:	4619      	mov	r1, r3
 8012368:	f000 fd8e 	bl	8012e88 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801236c:	4b13      	ldr	r3, [pc, #76]	; (80123bc <dhcp_release_and_stop+0x12c>)
 801236e:	6818      	ldr	r0, [r3, #0]
 8012370:	f107 0210 	add.w	r2, r7, #16
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	9300      	str	r3, [sp, #0]
 8012378:	2343      	movs	r3, #67	; 0x43
 801237a:	69b9      	ldr	r1, [r7, #24]
 801237c:	f7fe fc4c 	bl	8010c18 <udp_sendto_if>
      pbuf_free(p_out);
 8012380:	69b8      	ldr	r0, [r7, #24]
 8012382:	f7f8 fd85 	bl	800ae90 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012386:	4b0e      	ldr	r3, [pc, #56]	; (80123c0 <dhcp_release_and_stop+0x130>)
 8012388:	4a0d      	ldr	r2, [pc, #52]	; (80123c0 <dhcp_release_and_stop+0x130>)
 801238a:	490d      	ldr	r1, [pc, #52]	; (80123c0 <dhcp_release_and_stop+0x130>)
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7f8 f8bf 	bl	800a510 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012392:	2100      	movs	r1, #0
 8012394:	69f8      	ldr	r0, [r7, #28]
 8012396:	f000 f815 	bl	80123c4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	791b      	ldrb	r3, [r3, #4]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d008      	beq.n	80123b4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80123a2:	f7fe ff85 	bl	80112b0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	2200      	movs	r2, #0
 80123aa:	711a      	strb	r2, [r3, #4]
 80123ac:	e002      	b.n	80123b4 <dhcp_release_and_stop+0x124>
    return;
 80123ae:	bf00      	nop
 80123b0:	e000      	b.n	80123b4 <dhcp_release_and_stop+0x124>
    return;
 80123b2:	bf00      	nop
  }
}
 80123b4:	3720      	adds	r7, #32
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bdb0      	pop	{r4, r5, r7, pc}
 80123ba:	bf00      	nop
 80123bc:	200086e8 	.word	0x200086e8
 80123c0:	08019524 	.word	0x08019524

080123c4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80123c4:	b480      	push	{r7}
 80123c6:	b083      	sub	sp, #12
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	460b      	mov	r3, r1
 80123ce:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	795b      	ldrb	r3, [r3, #5]
 80123d4:	78fa      	ldrb	r2, [r7, #3]
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d008      	beq.n	80123ec <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	78fa      	ldrb	r2, [r7, #3]
 80123de:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2200      	movs	r2, #0
 80123e4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2200      	movs	r2, #0
 80123ea:	811a      	strh	r2, [r3, #8]
  }
}
 80123ec:	bf00      	nop
 80123ee:	370c      	adds	r7, #12
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6039      	str	r1, [r7, #0]
 8012400:	4611      	mov	r1, r2
 8012402:	461a      	mov	r2, r3
 8012404:	4603      	mov	r3, r0
 8012406:	80fb      	strh	r3, [r7, #6]
 8012408:	460b      	mov	r3, r1
 801240a:	717b      	strb	r3, [r7, #5]
 801240c:	4613      	mov	r3, r2
 801240e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012410:	88fa      	ldrh	r2, [r7, #6]
 8012412:	793b      	ldrb	r3, [r7, #4]
 8012414:	4413      	add	r3, r2
 8012416:	3302      	adds	r3, #2
 8012418:	2b44      	cmp	r3, #68	; 0x44
 801241a:	d906      	bls.n	801242a <dhcp_option+0x32>
 801241c:	4b0d      	ldr	r3, [pc, #52]	; (8012454 <dhcp_option+0x5c>)
 801241e:	f240 529a 	movw	r2, #1434	; 0x59a
 8012422:	490d      	ldr	r1, [pc, #52]	; (8012458 <dhcp_option+0x60>)
 8012424:	480d      	ldr	r0, [pc, #52]	; (801245c <dhcp_option+0x64>)
 8012426:	f003 f8db 	bl	80155e0 <iprintf>
  options[options_out_len++] = option_type;
 801242a:	88fb      	ldrh	r3, [r7, #6]
 801242c:	1c5a      	adds	r2, r3, #1
 801242e:	80fa      	strh	r2, [r7, #6]
 8012430:	461a      	mov	r2, r3
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	4413      	add	r3, r2
 8012436:	797a      	ldrb	r2, [r7, #5]
 8012438:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801243a:	88fb      	ldrh	r3, [r7, #6]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	80fa      	strh	r2, [r7, #6]
 8012440:	461a      	mov	r2, r3
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	4413      	add	r3, r2
 8012446:	793a      	ldrb	r2, [r7, #4]
 8012448:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801244a:	88fb      	ldrh	r3, [r7, #6]
}
 801244c:	4618      	mov	r0, r3
 801244e:	3708      	adds	r7, #8
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	080189b4 	.word	0x080189b4
 8012458:	08018b48 	.word	0x08018b48
 801245c:	08018a14 	.word	0x08018a14

08012460 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	4603      	mov	r3, r0
 8012468:	6039      	str	r1, [r7, #0]
 801246a:	80fb      	strh	r3, [r7, #6]
 801246c:	4613      	mov	r3, r2
 801246e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012470:	88fb      	ldrh	r3, [r7, #6]
 8012472:	2b43      	cmp	r3, #67	; 0x43
 8012474:	d906      	bls.n	8012484 <dhcp_option_byte+0x24>
 8012476:	4b0a      	ldr	r3, [pc, #40]	; (80124a0 <dhcp_option_byte+0x40>)
 8012478:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801247c:	4909      	ldr	r1, [pc, #36]	; (80124a4 <dhcp_option_byte+0x44>)
 801247e:	480a      	ldr	r0, [pc, #40]	; (80124a8 <dhcp_option_byte+0x48>)
 8012480:	f003 f8ae 	bl	80155e0 <iprintf>
  options[options_out_len++] = value;
 8012484:	88fb      	ldrh	r3, [r7, #6]
 8012486:	1c5a      	adds	r2, r3, #1
 8012488:	80fa      	strh	r2, [r7, #6]
 801248a:	461a      	mov	r2, r3
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	4413      	add	r3, r2
 8012490:	797a      	ldrb	r2, [r7, #5]
 8012492:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012494:	88fb      	ldrh	r3, [r7, #6]
}
 8012496:	4618      	mov	r0, r3
 8012498:	3708      	adds	r7, #8
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	080189b4 	.word	0x080189b4
 80124a4:	08018b8c 	.word	0x08018b8c
 80124a8:	08018a14 	.word	0x08018a14

080124ac <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	4603      	mov	r3, r0
 80124b4:	6039      	str	r1, [r7, #0]
 80124b6:	80fb      	strh	r3, [r7, #6]
 80124b8:	4613      	mov	r3, r2
 80124ba:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80124bc:	88fb      	ldrh	r3, [r7, #6]
 80124be:	3302      	adds	r3, #2
 80124c0:	2b44      	cmp	r3, #68	; 0x44
 80124c2:	d906      	bls.n	80124d2 <dhcp_option_short+0x26>
 80124c4:	4b0f      	ldr	r3, [pc, #60]	; (8012504 <dhcp_option_short+0x58>)
 80124c6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80124ca:	490f      	ldr	r1, [pc, #60]	; (8012508 <dhcp_option_short+0x5c>)
 80124cc:	480f      	ldr	r0, [pc, #60]	; (801250c <dhcp_option_short+0x60>)
 80124ce:	f003 f887 	bl	80155e0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80124d2:	88bb      	ldrh	r3, [r7, #4]
 80124d4:	0a1b      	lsrs	r3, r3, #8
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	88fb      	ldrh	r3, [r7, #6]
 80124da:	1c59      	adds	r1, r3, #1
 80124dc:	80f9      	strh	r1, [r7, #6]
 80124de:	4619      	mov	r1, r3
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	440b      	add	r3, r1
 80124e4:	b2d2      	uxtb	r2, r2
 80124e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80124e8:	88fb      	ldrh	r3, [r7, #6]
 80124ea:	1c5a      	adds	r2, r3, #1
 80124ec:	80fa      	strh	r2, [r7, #6]
 80124ee:	461a      	mov	r2, r3
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	4413      	add	r3, r2
 80124f4:	88ba      	ldrh	r2, [r7, #4]
 80124f6:	b2d2      	uxtb	r2, r2
 80124f8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80124fa:	88fb      	ldrh	r3, [r7, #6]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3708      	adds	r7, #8
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	080189b4 	.word	0x080189b4
 8012508:	08018bc4 	.word	0x08018bc4
 801250c:	08018a14 	.word	0x08018a14

08012510 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
 801251c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801251e:	89fb      	ldrh	r3, [r7, #14]
 8012520:	3304      	adds	r3, #4
 8012522:	2b44      	cmp	r3, #68	; 0x44
 8012524:	d906      	bls.n	8012534 <dhcp_option_long+0x24>
 8012526:	4b19      	ldr	r3, [pc, #100]	; (801258c <dhcp_option_long+0x7c>)
 8012528:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801252c:	4918      	ldr	r1, [pc, #96]	; (8012590 <dhcp_option_long+0x80>)
 801252e:	4819      	ldr	r0, [pc, #100]	; (8012594 <dhcp_option_long+0x84>)
 8012530:	f003 f856 	bl	80155e0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	0e1a      	lsrs	r2, r3, #24
 8012538:	89fb      	ldrh	r3, [r7, #14]
 801253a:	1c59      	adds	r1, r3, #1
 801253c:	81f9      	strh	r1, [r7, #14]
 801253e:	4619      	mov	r1, r3
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	440b      	add	r3, r1
 8012544:	b2d2      	uxtb	r2, r2
 8012546:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	0c1a      	lsrs	r2, r3, #16
 801254c:	89fb      	ldrh	r3, [r7, #14]
 801254e:	1c59      	adds	r1, r3, #1
 8012550:	81f9      	strh	r1, [r7, #14]
 8012552:	4619      	mov	r1, r3
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	440b      	add	r3, r1
 8012558:	b2d2      	uxtb	r2, r2
 801255a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	0a1a      	lsrs	r2, r3, #8
 8012560:	89fb      	ldrh	r3, [r7, #14]
 8012562:	1c59      	adds	r1, r3, #1
 8012564:	81f9      	strh	r1, [r7, #14]
 8012566:	4619      	mov	r1, r3
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	440b      	add	r3, r1
 801256c:	b2d2      	uxtb	r2, r2
 801256e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8012570:	89fb      	ldrh	r3, [r7, #14]
 8012572:	1c5a      	adds	r2, r3, #1
 8012574:	81fa      	strh	r2, [r7, #14]
 8012576:	461a      	mov	r2, r3
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	4413      	add	r3, r2
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	b2d2      	uxtb	r2, r2
 8012580:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012582:	89fb      	ldrh	r3, [r7, #14]
}
 8012584:	4618      	mov	r0, r3
 8012586:	3710      	adds	r7, #16
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}
 801258c:	080189b4 	.word	0x080189b4
 8012590:	08018c00 	.word	0x08018c00
 8012594:	08018a14 	.word	0x08018a14

08012598 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b090      	sub	sp, #64	; 0x40
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80125a2:	2300      	movs	r3, #0
 80125a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80125a6:	2300      	movs	r3, #0
 80125a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80125aa:	2208      	movs	r2, #8
 80125ac:	2100      	movs	r1, #0
 80125ae:	48b5      	ldr	r0, [pc, #724]	; (8012884 <dhcp_parse_reply+0x2ec>)
 80125b0:	f003 f80e 	bl	80155d0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	895b      	ldrh	r3, [r3, #10]
 80125b8:	2b2b      	cmp	r3, #43	; 0x2b
 80125ba:	d802      	bhi.n	80125c2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80125bc:	f06f 0301 	mvn.w	r3, #1
 80125c0:	e2a7      	b.n	8012b12 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80125c8:	23f0      	movs	r3, #240	; 0xf0
 80125ca:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	891b      	ldrh	r3, [r3, #8]
 80125d0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80125d6:	e00c      	b.n	80125f2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80125d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125da:	895b      	ldrh	r3, [r3, #10]
 80125dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80125de:	1ad3      	subs	r3, r2, r3
 80125e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80125e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e4:	895b      	ldrh	r3, [r3, #10]
 80125e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80125e8:	1ad3      	subs	r3, r2, r3
 80125ea:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80125ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80125f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d004      	beq.n	8012602 <dhcp_parse_reply+0x6a>
 80125f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fa:	895b      	ldrh	r3, [r3, #10]
 80125fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80125fe:	429a      	cmp	r2, r3
 8012600:	d2ea      	bcs.n	80125d8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8012602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012604:	2b00      	cmp	r3, #0
 8012606:	d102      	bne.n	801260e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012608:	f06f 0301 	mvn.w	r3, #1
 801260c:	e281      	b.n	8012b12 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801260e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012610:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8012612:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012614:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8012616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801261c:	e239      	b.n	8012a92 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801261e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012622:	4413      	add	r3, r2
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012628:	2300      	movs	r3, #0
 801262a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801262e:	f04f 33ff 	mov.w	r3, #4294967295
 8012632:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8012634:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012636:	3302      	adds	r3, #2
 8012638:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801263a:	8bfa      	ldrh	r2, [r7, #30]
 801263c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801263e:	429a      	cmp	r2, r3
 8012640:	d202      	bcs.n	8012648 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8012642:	f06f 0301 	mvn.w	r3, #1
 8012646:	e264      	b.n	8012b12 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8012648:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801264a:	3301      	adds	r3, #1
 801264c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801264e:	8952      	ldrh	r2, [r2, #10]
 8012650:	4293      	cmp	r3, r2
 8012652:	da07      	bge.n	8012664 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8012654:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012656:	3301      	adds	r3, #1
 8012658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801265a:	4413      	add	r3, r2
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012662:	e00b      	b.n	801267c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8012664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d004      	beq.n	8012676 <dhcp_parse_reply+0xde>
 801266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	e000      	b.n	8012678 <dhcp_parse_reply+0xe0>
 8012676:	2300      	movs	r3, #0
 8012678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801267c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8012684:	7dfb      	ldrb	r3, [r7, #23]
 8012686:	2b3b      	cmp	r3, #59	; 0x3b
 8012688:	f200 812c 	bhi.w	80128e4 <dhcp_parse_reply+0x34c>
 801268c:	a201      	add	r2, pc, #4	; (adr r2, 8012694 <dhcp_parse_reply+0xfc>)
 801268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012692:	bf00      	nop
 8012694:	08012785 	.word	0x08012785
 8012698:	08012795 	.word	0x08012795
 801269c:	080128e5 	.word	0x080128e5
 80126a0:	080127b7 	.word	0x080127b7
 80126a4:	080128e5 	.word	0x080128e5
 80126a8:	080128e5 	.word	0x080128e5
 80126ac:	080128e5 	.word	0x080128e5
 80126b0:	080128e5 	.word	0x080128e5
 80126b4:	080128e5 	.word	0x080128e5
 80126b8:	080128e5 	.word	0x080128e5
 80126bc:	080128e5 	.word	0x080128e5
 80126c0:	080128e5 	.word	0x080128e5
 80126c4:	080128e5 	.word	0x080128e5
 80126c8:	080128e5 	.word	0x080128e5
 80126cc:	080128e5 	.word	0x080128e5
 80126d0:	080128e5 	.word	0x080128e5
 80126d4:	080128e5 	.word	0x080128e5
 80126d8:	080128e5 	.word	0x080128e5
 80126dc:	080128e5 	.word	0x080128e5
 80126e0:	080128e5 	.word	0x080128e5
 80126e4:	080128e5 	.word	0x080128e5
 80126e8:	080128e5 	.word	0x080128e5
 80126ec:	080128e5 	.word	0x080128e5
 80126f0:	080128e5 	.word	0x080128e5
 80126f4:	080128e5 	.word	0x080128e5
 80126f8:	080128e5 	.word	0x080128e5
 80126fc:	080128e5 	.word	0x080128e5
 8012700:	080128e5 	.word	0x080128e5
 8012704:	080128e5 	.word	0x080128e5
 8012708:	080128e5 	.word	0x080128e5
 801270c:	080128e5 	.word	0x080128e5
 8012710:	080128e5 	.word	0x080128e5
 8012714:	080128e5 	.word	0x080128e5
 8012718:	080128e5 	.word	0x080128e5
 801271c:	080128e5 	.word	0x080128e5
 8012720:	080128e5 	.word	0x080128e5
 8012724:	080128e5 	.word	0x080128e5
 8012728:	080128e5 	.word	0x080128e5
 801272c:	080128e5 	.word	0x080128e5
 8012730:	080128e5 	.word	0x080128e5
 8012734:	080128e5 	.word	0x080128e5
 8012738:	080128e5 	.word	0x080128e5
 801273c:	080128e5 	.word	0x080128e5
 8012740:	080128e5 	.word	0x080128e5
 8012744:	080128e5 	.word	0x080128e5
 8012748:	080128e5 	.word	0x080128e5
 801274c:	080128e5 	.word	0x080128e5
 8012750:	080128e5 	.word	0x080128e5
 8012754:	080128e5 	.word	0x080128e5
 8012758:	080128e5 	.word	0x080128e5
 801275c:	080128e5 	.word	0x080128e5
 8012760:	080127e3 	.word	0x080127e3
 8012764:	08012805 	.word	0x08012805
 8012768:	08012841 	.word	0x08012841
 801276c:	08012863 	.word	0x08012863
 8012770:	080128e5 	.word	0x080128e5
 8012774:	080128e5 	.word	0x080128e5
 8012778:	080128e5 	.word	0x080128e5
 801277c:	080128a1 	.word	0x080128a1
 8012780:	080128c3 	.word	0x080128c3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8012784:	2300      	movs	r3, #0
 8012786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801278a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801278e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8012792:	e0ab      	b.n	80128ec <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012798:	2b04      	cmp	r3, #4
 801279a:	d009      	beq.n	80127b0 <dhcp_parse_reply+0x218>
 801279c:	4b3a      	ldr	r3, [pc, #232]	; (8012888 <dhcp_parse_reply+0x2f0>)
 801279e:	f240 622e 	movw	r2, #1582	; 0x62e
 80127a2:	493a      	ldr	r1, [pc, #232]	; (801288c <dhcp_parse_reply+0x2f4>)
 80127a4:	483a      	ldr	r0, [pc, #232]	; (8012890 <dhcp_parse_reply+0x2f8>)
 80127a6:	f002 ff1b 	bl	80155e0 <iprintf>
 80127aa:	f06f 0305 	mvn.w	r3, #5
 80127ae:	e1b0      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80127b0:	2306      	movs	r3, #6
 80127b2:	623b      	str	r3, [r7, #32]
        break;
 80127b4:	e09a      	b.n	80128ec <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80127b6:	2304      	movs	r3, #4
 80127b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80127bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80127c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d209      	bcs.n	80127dc <dhcp_parse_reply+0x244>
 80127c8:	4b2f      	ldr	r3, [pc, #188]	; (8012888 <dhcp_parse_reply+0x2f0>)
 80127ca:	f240 6233 	movw	r2, #1587	; 0x633
 80127ce:	4931      	ldr	r1, [pc, #196]	; (8012894 <dhcp_parse_reply+0x2fc>)
 80127d0:	482f      	ldr	r0, [pc, #188]	; (8012890 <dhcp_parse_reply+0x2f8>)
 80127d2:	f002 ff05 	bl	80155e0 <iprintf>
 80127d6:	f06f 0305 	mvn.w	r3, #5
 80127da:	e19a      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80127dc:	2307      	movs	r3, #7
 80127de:	623b      	str	r3, [r7, #32]
        break;
 80127e0:	e084      	b.n	80128ec <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80127e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127e6:	2b04      	cmp	r3, #4
 80127e8:	d009      	beq.n	80127fe <dhcp_parse_reply+0x266>
 80127ea:	4b27      	ldr	r3, [pc, #156]	; (8012888 <dhcp_parse_reply+0x2f0>)
 80127ec:	f240 6241 	movw	r2, #1601	; 0x641
 80127f0:	4926      	ldr	r1, [pc, #152]	; (801288c <dhcp_parse_reply+0x2f4>)
 80127f2:	4827      	ldr	r0, [pc, #156]	; (8012890 <dhcp_parse_reply+0x2f8>)
 80127f4:	f002 fef4 	bl	80155e0 <iprintf>
 80127f8:	f06f 0305 	mvn.w	r3, #5
 80127fc:	e189      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80127fe:	2303      	movs	r3, #3
 8012800:	623b      	str	r3, [r7, #32]
        break;
 8012802:	e073      	b.n	80128ec <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012808:	2b01      	cmp	r3, #1
 801280a:	d009      	beq.n	8012820 <dhcp_parse_reply+0x288>
 801280c:	4b1e      	ldr	r3, [pc, #120]	; (8012888 <dhcp_parse_reply+0x2f0>)
 801280e:	f240 624f 	movw	r2, #1615	; 0x64f
 8012812:	4921      	ldr	r1, [pc, #132]	; (8012898 <dhcp_parse_reply+0x300>)
 8012814:	481e      	ldr	r0, [pc, #120]	; (8012890 <dhcp_parse_reply+0x2f8>)
 8012816:	f002 fee3 	bl	80155e0 <iprintf>
 801281a:	f06f 0305 	mvn.w	r3, #5
 801281e:	e178      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012822:	2bf0      	cmp	r3, #240	; 0xf0
 8012824:	d009      	beq.n	801283a <dhcp_parse_reply+0x2a2>
 8012826:	4b18      	ldr	r3, [pc, #96]	; (8012888 <dhcp_parse_reply+0x2f0>)
 8012828:	f240 6251 	movw	r2, #1617	; 0x651
 801282c:	491b      	ldr	r1, [pc, #108]	; (801289c <dhcp_parse_reply+0x304>)
 801282e:	4818      	ldr	r0, [pc, #96]	; (8012890 <dhcp_parse_reply+0x2f8>)
 8012830:	f002 fed6 	bl	80155e0 <iprintf>
 8012834:	f06f 0305 	mvn.w	r3, #5
 8012838:	e16b      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801283a:	2300      	movs	r3, #0
 801283c:	623b      	str	r3, [r7, #32]
        break;
 801283e:	e055      	b.n	80128ec <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012844:	2b01      	cmp	r3, #1
 8012846:	d009      	beq.n	801285c <dhcp_parse_reply+0x2c4>
 8012848:	4b0f      	ldr	r3, [pc, #60]	; (8012888 <dhcp_parse_reply+0x2f0>)
 801284a:	f240 6255 	movw	r2, #1621	; 0x655
 801284e:	4912      	ldr	r1, [pc, #72]	; (8012898 <dhcp_parse_reply+0x300>)
 8012850:	480f      	ldr	r0, [pc, #60]	; (8012890 <dhcp_parse_reply+0x2f8>)
 8012852:	f002 fec5 	bl	80155e0 <iprintf>
 8012856:	f06f 0305 	mvn.w	r3, #5
 801285a:	e15a      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801285c:	2301      	movs	r3, #1
 801285e:	623b      	str	r3, [r7, #32]
        break;
 8012860:	e044      	b.n	80128ec <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012866:	2b04      	cmp	r3, #4
 8012868:	d009      	beq.n	801287e <dhcp_parse_reply+0x2e6>
 801286a:	4b07      	ldr	r3, [pc, #28]	; (8012888 <dhcp_parse_reply+0x2f0>)
 801286c:	f240 6259 	movw	r2, #1625	; 0x659
 8012870:	4906      	ldr	r1, [pc, #24]	; (801288c <dhcp_parse_reply+0x2f4>)
 8012872:	4807      	ldr	r0, [pc, #28]	; (8012890 <dhcp_parse_reply+0x2f8>)
 8012874:	f002 feb4 	bl	80155e0 <iprintf>
 8012878:	f06f 0305 	mvn.w	r3, #5
 801287c:	e149      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801287e:	2302      	movs	r3, #2
 8012880:	623b      	str	r3, [r7, #32]
        break;
 8012882:	e033      	b.n	80128ec <dhcp_parse_reply+0x354>
 8012884:	200086e0 	.word	0x200086e0
 8012888:	080189b4 	.word	0x080189b4
 801288c:	08018c3c 	.word	0x08018c3c
 8012890:	08018a14 	.word	0x08018a14
 8012894:	08018c48 	.word	0x08018c48
 8012898:	08018c5c 	.word	0x08018c5c
 801289c:	08018c68 	.word	0x08018c68
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80128a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128a4:	2b04      	cmp	r3, #4
 80128a6:	d009      	beq.n	80128bc <dhcp_parse_reply+0x324>
 80128a8:	4b9c      	ldr	r3, [pc, #624]	; (8012b1c <dhcp_parse_reply+0x584>)
 80128aa:	f240 625d 	movw	r2, #1629	; 0x65d
 80128ae:	499c      	ldr	r1, [pc, #624]	; (8012b20 <dhcp_parse_reply+0x588>)
 80128b0:	489c      	ldr	r0, [pc, #624]	; (8012b24 <dhcp_parse_reply+0x58c>)
 80128b2:	f002 fe95 	bl	80155e0 <iprintf>
 80128b6:	f06f 0305 	mvn.w	r3, #5
 80128ba:	e12a      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80128bc:	2304      	movs	r3, #4
 80128be:	623b      	str	r3, [r7, #32]
        break;
 80128c0:	e014      	b.n	80128ec <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80128c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128c6:	2b04      	cmp	r3, #4
 80128c8:	d009      	beq.n	80128de <dhcp_parse_reply+0x346>
 80128ca:	4b94      	ldr	r3, [pc, #592]	; (8012b1c <dhcp_parse_reply+0x584>)
 80128cc:	f240 6261 	movw	r2, #1633	; 0x661
 80128d0:	4993      	ldr	r1, [pc, #588]	; (8012b20 <dhcp_parse_reply+0x588>)
 80128d2:	4894      	ldr	r0, [pc, #592]	; (8012b24 <dhcp_parse_reply+0x58c>)
 80128d4:	f002 fe84 	bl	80155e0 <iprintf>
 80128d8:	f06f 0305 	mvn.w	r3, #5
 80128dc:	e119      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80128de:	2305      	movs	r3, #5
 80128e0:	623b      	str	r3, [r7, #32]
        break;
 80128e2:	e003      	b.n	80128ec <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80128e4:	2300      	movs	r3, #0
 80128e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80128ea:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80128ec:	7dfb      	ldrb	r3, [r7, #23]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d103      	bne.n	80128fa <dhcp_parse_reply+0x362>
      offset++;
 80128f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80128f4:	3301      	adds	r3, #1
 80128f6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80128f8:	e0a1      	b.n	8012a3e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80128fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80128fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012900:	4413      	add	r3, r2
 8012902:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8012906:	4293      	cmp	r3, r2
 8012908:	dd02      	ble.n	8012910 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801290a:	f06f 0301 	mvn.w	r3, #1
 801290e:	e100      	b.n	8012b12 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8012910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012914:	b29a      	uxth	r2, r3
 8012916:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012918:	4413      	add	r3, r2
 801291a:	b29b      	uxth	r3, r3
 801291c:	3302      	adds	r3, #2
 801291e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012924:	2b00      	cmp	r3, #0
 8012926:	f000 808a 	beq.w	8012a3e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801292a:	2300      	movs	r3, #0
 801292c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801292e:	6a3b      	ldr	r3, [r7, #32]
 8012930:	2b00      	cmp	r3, #0
 8012932:	db02      	blt.n	801293a <dhcp_parse_reply+0x3a2>
 8012934:	6a3b      	ldr	r3, [r7, #32]
 8012936:	2b07      	cmp	r3, #7
 8012938:	dd06      	ble.n	8012948 <dhcp_parse_reply+0x3b0>
 801293a:	4b78      	ldr	r3, [pc, #480]	; (8012b1c <dhcp_parse_reply+0x584>)
 801293c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012940:	4979      	ldr	r1, [pc, #484]	; (8012b28 <dhcp_parse_reply+0x590>)
 8012942:	4878      	ldr	r0, [pc, #480]	; (8012b24 <dhcp_parse_reply+0x58c>)
 8012944:	f002 fe4c 	bl	80155e0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012948:	4a78      	ldr	r2, [pc, #480]	; (8012b2c <dhcp_parse_reply+0x594>)
 801294a:	6a3b      	ldr	r3, [r7, #32]
 801294c:	4413      	add	r3, r2
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d174      	bne.n	8012a3e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8012954:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012958:	2b04      	cmp	r3, #4
 801295a:	bf28      	it	cs
 801295c:	2304      	movcs	r3, #4
 801295e:	b2db      	uxtb	r3, r3
 8012960:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8012962:	8bfb      	ldrh	r3, [r7, #30]
 8012964:	8aba      	ldrh	r2, [r7, #20]
 8012966:	f107 0108 	add.w	r1, r7, #8
 801296a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801296c:	f7f8 fc8a 	bl	800b284 <pbuf_copy_partial>
 8012970:	4603      	mov	r3, r0
 8012972:	461a      	mov	r2, r3
 8012974:	8abb      	ldrh	r3, [r7, #20]
 8012976:	4293      	cmp	r3, r2
 8012978:	d002      	beq.n	8012980 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801297a:	f06f 0301 	mvn.w	r3, #1
 801297e:	e0c8      	b.n	8012b12 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8012980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012984:	2b04      	cmp	r3, #4
 8012986:	d933      	bls.n	80129f0 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801298c:	f003 0303 	and.w	r3, r3, #3
 8012990:	b2db      	uxtb	r3, r3
 8012992:	2b00      	cmp	r3, #0
 8012994:	d009      	beq.n	80129aa <dhcp_parse_reply+0x412>
 8012996:	4b61      	ldr	r3, [pc, #388]	; (8012b1c <dhcp_parse_reply+0x584>)
 8012998:	f240 6281 	movw	r2, #1665	; 0x681
 801299c:	4964      	ldr	r1, [pc, #400]	; (8012b30 <dhcp_parse_reply+0x598>)
 801299e:	4861      	ldr	r0, [pc, #388]	; (8012b24 <dhcp_parse_reply+0x58c>)
 80129a0:	f002 fe1e 	bl	80155e0 <iprintf>
 80129a4:	f06f 0305 	mvn.w	r3, #5
 80129a8:	e0b3      	b.n	8012b12 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80129aa:	4a60      	ldr	r2, [pc, #384]	; (8012b2c <dhcp_parse_reply+0x594>)
 80129ac:	6a3b      	ldr	r3, [r7, #32]
 80129ae:	4413      	add	r3, r2
 80129b0:	2201      	movs	r2, #1
 80129b2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7f6 fe7d 	bl	80096b6 <lwip_htonl>
 80129bc:	4602      	mov	r2, r0
 80129be:	495d      	ldr	r1, [pc, #372]	; (8012b34 <dhcp_parse_reply+0x59c>)
 80129c0:	6a3b      	ldr	r3, [r7, #32]
 80129c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80129c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129ca:	3b04      	subs	r3, #4
 80129cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80129d0:	8bfb      	ldrh	r3, [r7, #30]
 80129d2:	3304      	adds	r3, #4
 80129d4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80129d6:	8a7a      	ldrh	r2, [r7, #18]
 80129d8:	8bfb      	ldrh	r3, [r7, #30]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d202      	bcs.n	80129e4 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80129de:	f06f 0301 	mvn.w	r3, #1
 80129e2:	e096      	b.n	8012b12 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80129e4:	8a7b      	ldrh	r3, [r7, #18]
 80129e6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80129e8:	6a3b      	ldr	r3, [r7, #32]
 80129ea:	3301      	adds	r3, #1
 80129ec:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80129ee:	e79e      	b.n	801292e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80129f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129f4:	2b04      	cmp	r3, #4
 80129f6:	d106      	bne.n	8012a06 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7f6 fe5b 	bl	80096b6 <lwip_htonl>
 8012a00:	4603      	mov	r3, r0
 8012a02:	60bb      	str	r3, [r7, #8]
 8012a04:	e011      	b.n	8012a2a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a0a:	2b01      	cmp	r3, #1
 8012a0c:	d009      	beq.n	8012a22 <dhcp_parse_reply+0x48a>
 8012a0e:	4b43      	ldr	r3, [pc, #268]	; (8012b1c <dhcp_parse_reply+0x584>)
 8012a10:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012a14:	4948      	ldr	r1, [pc, #288]	; (8012b38 <dhcp_parse_reply+0x5a0>)
 8012a16:	4843      	ldr	r0, [pc, #268]	; (8012b24 <dhcp_parse_reply+0x58c>)
 8012a18:	f002 fde2 	bl	80155e0 <iprintf>
 8012a1c:	f06f 0305 	mvn.w	r3, #5
 8012a20:	e077      	b.n	8012b12 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8012a22:	f107 0308 	add.w	r3, r7, #8
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012a2a:	4a40      	ldr	r2, [pc, #256]	; (8012b2c <dhcp_parse_reply+0x594>)
 8012a2c:	6a3b      	ldr	r3, [r7, #32]
 8012a2e:	4413      	add	r3, r2
 8012a30:	2201      	movs	r2, #1
 8012a32:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012a34:	68ba      	ldr	r2, [r7, #8]
 8012a36:	493f      	ldr	r1, [pc, #252]	; (8012b34 <dhcp_parse_reply+0x59c>)
 8012a38:	6a3b      	ldr	r3, [r7, #32]
 8012a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a40:	895b      	ldrh	r3, [r3, #10]
 8012a42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d324      	bcc.n	8012a92 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8012a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a4a:	895b      	ldrh	r3, [r3, #10]
 8012a4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a54:	895b      	ldrh	r3, [r3, #10]
 8012a56:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012a58:	1ad3      	subs	r3, r2, r3
 8012a5a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8012a5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d213      	bcs.n	8012a8c <dhcp_parse_reply+0x4f4>
        q = q->next;
 8012a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d109      	bne.n	8012a84 <dhcp_parse_reply+0x4ec>
 8012a70:	4b2a      	ldr	r3, [pc, #168]	; (8012b1c <dhcp_parse_reply+0x584>)
 8012a72:	f240 629d 	movw	r2, #1693	; 0x69d
 8012a76:	4931      	ldr	r1, [pc, #196]	; (8012b3c <dhcp_parse_reply+0x5a4>)
 8012a78:	482a      	ldr	r0, [pc, #168]	; (8012b24 <dhcp_parse_reply+0x58c>)
 8012a7a:	f002 fdb1 	bl	80155e0 <iprintf>
 8012a7e:	f06f 0305 	mvn.w	r3, #5
 8012a82:	e046      	b.n	8012b12 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8012a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a8a:	e002      	b.n	8012a92 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012a8c:	f06f 0301 	mvn.w	r3, #1
 8012a90:	e03f      	b.n	8012b12 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d00a      	beq.n	8012aae <dhcp_parse_reply+0x516>
 8012a98:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d206      	bcs.n	8012aae <dhcp_parse_reply+0x516>
 8012aa0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012aa4:	4413      	add	r3, r2
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	2bff      	cmp	r3, #255	; 0xff
 8012aaa:	f47f adb8 	bne.w	801261e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012aae:	4b1f      	ldr	r3, [pc, #124]	; (8012b2c <dhcp_parse_reply+0x594>)
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d018      	beq.n	8012ae8 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012ab6:	4b1f      	ldr	r3, [pc, #124]	; (8012b34 <dhcp_parse_reply+0x59c>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012abc:	4b1b      	ldr	r3, [pc, #108]	; (8012b2c <dhcp_parse_reply+0x594>)
 8012abe:	2200      	movs	r2, #0
 8012ac0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	2b01      	cmp	r3, #1
 8012ac6:	d102      	bne.n	8012ace <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012acc:	e00c      	b.n	8012ae8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	2b02      	cmp	r3, #2
 8012ad2:	d102      	bne.n	8012ada <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ad8:	e006      	b.n	8012ae8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2b03      	cmp	r3, #3
 8012ade:	d103      	bne.n	8012ae8 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d006      	beq.n	8012afc <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012aee:	2300      	movs	r3, #0
 8012af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012af2:	236c      	movs	r3, #108	; 0x6c
 8012af4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012af6:	23ec      	movs	r3, #236	; 0xec
 8012af8:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012afa:	e56a      	b.n	80125d2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8012afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d006      	beq.n	8012b10 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8012b06:	232c      	movs	r3, #44	; 0x2c
 8012b08:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012b0a:	236c      	movs	r3, #108	; 0x6c
 8012b0c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8012b0e:	e560      	b.n	80125d2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3740      	adds	r7, #64	; 0x40
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	080189b4 	.word	0x080189b4
 8012b20:	08018c3c 	.word	0x08018c3c
 8012b24:	08018a14 	.word	0x08018a14
 8012b28:	08018c80 	.word	0x08018c80
 8012b2c:	200086e0 	.word	0x200086e0
 8012b30:	08018c94 	.word	0x08018c94
 8012b34:	200086c0 	.word	0x200086c0
 8012b38:	08018cac 	.word	0x08018cac
 8012b3c:	08018cc0 	.word	0x08018cc0

08012b40 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b08a      	sub	sp, #40	; 0x28
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	607a      	str	r2, [r7, #4]
 8012b4c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8012b4e:	4b60      	ldr	r3, [pc, #384]	; (8012cd0 <dhcp_recv+0x190>)
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b54:	6a3b      	ldr	r3, [r7, #32]
 8012b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b58:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f000 809d 	beq.w	8012ca2 <dhcp_recv+0x162>
 8012b68:	69fb      	ldr	r3, [r7, #28]
 8012b6a:	791b      	ldrb	r3, [r3, #4]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	f000 8098 	beq.w	8012ca2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	895b      	ldrh	r3, [r3, #10]
 8012b76:	2b2b      	cmp	r3, #43	; 0x2b
 8012b78:	f240 8095 	bls.w	8012ca6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	2b02      	cmp	r3, #2
 8012b82:	f040 8092 	bne.w	8012caa <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012b86:	2300      	movs	r3, #0
 8012b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b8c:	e012      	b.n	8012bb4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b92:	6a3a      	ldr	r2, [r7, #32]
 8012b94:	4413      	add	r3, r2
 8012b96:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b9e:	69b9      	ldr	r1, [r7, #24]
 8012ba0:	440b      	add	r3, r1
 8012ba2:	7f1b      	ldrb	r3, [r3, #28]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	f040 8082 	bne.w	8012cae <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bae:	3301      	adds	r3, #1
 8012bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012bb4:	6a3b      	ldr	r3, [r7, #32]
 8012bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012bba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d203      	bcs.n	8012bca <dhcp_recv+0x8a>
 8012bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bc6:	2b05      	cmp	r3, #5
 8012bc8:	d9e1      	bls.n	8012b8e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7f6 fd71 	bl	80096b6 <lwip_htonl>
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d169      	bne.n	8012cb2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012bde:	69f9      	ldr	r1, [r7, #28]
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f7ff fcd9 	bl	8012598 <dhcp_parse_reply>
 8012be6:	4603      	mov	r3, r0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d164      	bne.n	8012cb6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012bec:	4b39      	ldr	r3, [pc, #228]	; (8012cd4 <dhcp_recv+0x194>)
 8012bee:	785b      	ldrb	r3, [r3, #1]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d062      	beq.n	8012cba <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	685b      	ldr	r3, [r3, #4]
 8012bf8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8012bfa:	4b37      	ldr	r3, [pc, #220]	; (8012cd8 <dhcp_recv+0x198>)
 8012bfc:	685b      	ldr	r3, [r3, #4]
 8012bfe:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012c00:	7cfb      	ldrb	r3, [r7, #19]
 8012c02:	2b05      	cmp	r3, #5
 8012c04:	d12a      	bne.n	8012c5c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	795b      	ldrb	r3, [r3, #5]
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	d112      	bne.n	8012c34 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8012c0e:	6979      	ldr	r1, [r7, #20]
 8012c10:	6a38      	ldr	r0, [r7, #32]
 8012c12:	f7fe fe17 	bl	8011844 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8012c16:	6a3b      	ldr	r3, [r7, #32]
 8012c18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c1c:	f003 0308 	and.w	r3, r3, #8
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d003      	beq.n	8012c2c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012c24:	6a38      	ldr	r0, [r7, #32]
 8012c26:	f7fe fb87 	bl	8011338 <dhcp_check>
 8012c2a:	e049      	b.n	8012cc0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012c2c:	6a38      	ldr	r0, [r7, #32]
 8012c2e:	f7ff f867 	bl	8011d00 <dhcp_bind>
 8012c32:	e045      	b.n	8012cc0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	795b      	ldrb	r3, [r3, #5]
 8012c38:	2b03      	cmp	r3, #3
 8012c3a:	d007      	beq.n	8012c4c <dhcp_recv+0x10c>
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	795b      	ldrb	r3, [r3, #5]
 8012c40:	2b04      	cmp	r3, #4
 8012c42:	d003      	beq.n	8012c4c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012c48:	2b05      	cmp	r3, #5
 8012c4a:	d139      	bne.n	8012cc0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8012c4c:	6979      	ldr	r1, [r7, #20]
 8012c4e:	6a38      	ldr	r0, [r7, #32]
 8012c50:	f7fe fdf8 	bl	8011844 <dhcp_handle_ack>
      dhcp_bind(netif);
 8012c54:	6a38      	ldr	r0, [r7, #32]
 8012c56:	f7ff f853 	bl	8011d00 <dhcp_bind>
 8012c5a:	e031      	b.n	8012cc0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012c5c:	7cfb      	ldrb	r3, [r7, #19]
 8012c5e:	2b06      	cmp	r3, #6
 8012c60:	d113      	bne.n	8012c8a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8012c66:	2b03      	cmp	r3, #3
 8012c68:	d00b      	beq.n	8012c82 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012c6a:	69fb      	ldr	r3, [r7, #28]
 8012c6c:	795b      	ldrb	r3, [r3, #5]
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	d007      	beq.n	8012c82 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012c76:	2b04      	cmp	r3, #4
 8012c78:	d003      	beq.n	8012c82 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012c7a:	69fb      	ldr	r3, [r7, #28]
 8012c7c:	795b      	ldrb	r3, [r3, #5]
 8012c7e:	2b05      	cmp	r3, #5
 8012c80:	d103      	bne.n	8012c8a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8012c82:	6a38      	ldr	r0, [r7, #32]
 8012c84:	f7fe fb3e 	bl	8011304 <dhcp_handle_nak>
 8012c88:	e01a      	b.n	8012cc0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8012c8a:	7cfb      	ldrb	r3, [r7, #19]
 8012c8c:	2b02      	cmp	r3, #2
 8012c8e:	d116      	bne.n	8012cbe <dhcp_recv+0x17e>
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	795b      	ldrb	r3, [r3, #5]
 8012c94:	2b06      	cmp	r3, #6
 8012c96:	d112      	bne.n	8012cbe <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8012c98:	6979      	ldr	r1, [r7, #20]
 8012c9a:	6a38      	ldr	r0, [r7, #32]
 8012c9c:	f7fe fb80 	bl	80113a0 <dhcp_handle_offer>
 8012ca0:	e00e      	b.n	8012cc0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012ca2:	bf00      	nop
 8012ca4:	e00c      	b.n	8012cc0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012ca6:	bf00      	nop
 8012ca8:	e00a      	b.n	8012cc0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012caa:	bf00      	nop
 8012cac:	e008      	b.n	8012cc0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8012cae:	bf00      	nop
 8012cb0:	e006      	b.n	8012cc0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012cb2:	bf00      	nop
 8012cb4:	e004      	b.n	8012cc0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012cb6:	bf00      	nop
 8012cb8:	e002      	b.n	8012cc0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012cba:	bf00      	nop
 8012cbc:	e000      	b.n	8012cc0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8012cbe:	bf00      	nop
  pbuf_free(p);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7f8 f8e5 	bl	800ae90 <pbuf_free>
}
 8012cc6:	bf00      	nop
 8012cc8:	3728      	adds	r7, #40	; 0x28
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	20005724 	.word	0x20005724
 8012cd4:	200086e0 	.word	0x200086e0
 8012cd8:	200086c0 	.word	0x200086c0

08012cdc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b088      	sub	sp, #32
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	60f8      	str	r0, [r7, #12]
 8012ce4:	60b9      	str	r1, [r7, #8]
 8012ce6:	603b      	str	r3, [r7, #0]
 8012ce8:	4613      	mov	r3, r2
 8012cea:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d108      	bne.n	8012d04 <dhcp_create_msg+0x28>
 8012cf2:	4b5f      	ldr	r3, [pc, #380]	; (8012e70 <dhcp_create_msg+0x194>)
 8012cf4:	f240 7269 	movw	r2, #1897	; 0x769
 8012cf8:	495e      	ldr	r1, [pc, #376]	; (8012e74 <dhcp_create_msg+0x198>)
 8012cfa:	485f      	ldr	r0, [pc, #380]	; (8012e78 <dhcp_create_msg+0x19c>)
 8012cfc:	f002 fc70 	bl	80155e0 <iprintf>
 8012d00:	2300      	movs	r3, #0
 8012d02:	e0b1      	b.n	8012e68 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d108      	bne.n	8012d1c <dhcp_create_msg+0x40>
 8012d0a:	4b59      	ldr	r3, [pc, #356]	; (8012e70 <dhcp_create_msg+0x194>)
 8012d0c:	f240 726a 	movw	r2, #1898	; 0x76a
 8012d10:	495a      	ldr	r1, [pc, #360]	; (8012e7c <dhcp_create_msg+0x1a0>)
 8012d12:	4859      	ldr	r0, [pc, #356]	; (8012e78 <dhcp_create_msg+0x19c>)
 8012d14:	f002 fc64 	bl	80155e0 <iprintf>
 8012d18:	2300      	movs	r3, #0
 8012d1a:	e0a5      	b.n	8012e68 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012d1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d20:	f44f 719a 	mov.w	r1, #308	; 0x134
 8012d24:	2036      	movs	r0, #54	; 0x36
 8012d26:	f7f7 fdcf 	bl	800a8c8 <pbuf_alloc>
 8012d2a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d101      	bne.n	8012d36 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8012d32:	2300      	movs	r3, #0
 8012d34:	e098      	b.n	8012e68 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	895b      	ldrh	r3, [r3, #10]
 8012d3a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8012d3e:	d206      	bcs.n	8012d4e <dhcp_create_msg+0x72>
 8012d40:	4b4b      	ldr	r3, [pc, #300]	; (8012e70 <dhcp_create_msg+0x194>)
 8012d42:	f240 7271 	movw	r2, #1905	; 0x771
 8012d46:	494e      	ldr	r1, [pc, #312]	; (8012e80 <dhcp_create_msg+0x1a4>)
 8012d48:	484b      	ldr	r0, [pc, #300]	; (8012e78 <dhcp_create_msg+0x19c>)
 8012d4a:	f002 fc49 	bl	80155e0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8012d4e:	79fb      	ldrb	r3, [r7, #7]
 8012d50:	2b03      	cmp	r3, #3
 8012d52:	d103      	bne.n	8012d5c <dhcp_create_msg+0x80>
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	795b      	ldrb	r3, [r3, #5]
 8012d58:	2b03      	cmp	r3, #3
 8012d5a:	d10d      	bne.n	8012d78 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	799b      	ldrb	r3, [r3, #6]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d105      	bne.n	8012d70 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8012d64:	f002 fc54 	bl	8015610 <rand>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	4b45      	ldr	r3, [pc, #276]	; (8012e84 <dhcp_create_msg+0x1a8>)
 8012d6e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8012d70:	4b44      	ldr	r3, [pc, #272]	; (8012e84 <dhcp_create_msg+0x1a8>)
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8012d7e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8012d82:	2100      	movs	r1, #0
 8012d84:	6978      	ldr	r0, [r7, #20]
 8012d86:	f002 fc23 	bl	80155d0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	2201      	movs	r2, #1
 8012d94:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7f6 fc86 	bl	80096b6 <lwip_htonl>
 8012daa:	4602      	mov	r2, r0
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012db0:	79fb      	ldrb	r3, [r7, #7]
 8012db2:	2b08      	cmp	r3, #8
 8012db4:	d010      	beq.n	8012dd8 <dhcp_create_msg+0xfc>
 8012db6:	79fb      	ldrb	r3, [r7, #7]
 8012db8:	2b04      	cmp	r3, #4
 8012dba:	d00d      	beq.n	8012dd8 <dhcp_create_msg+0xfc>
 8012dbc:	79fb      	ldrb	r3, [r7, #7]
 8012dbe:	2b07      	cmp	r3, #7
 8012dc0:	d00a      	beq.n	8012dd8 <dhcp_create_msg+0xfc>
 8012dc2:	79fb      	ldrb	r3, [r7, #7]
 8012dc4:	2b03      	cmp	r3, #3
 8012dc6:	d10c      	bne.n	8012de2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012dcc:	2b05      	cmp	r3, #5
 8012dce:	d003      	beq.n	8012dd8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	795b      	ldrb	r3, [r3, #5]
 8012dd4:	2b04      	cmp	r3, #4
 8012dd6:	d104      	bne.n	8012de2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	3304      	adds	r3, #4
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012de2:	2300      	movs	r3, #0
 8012de4:	83fb      	strh	r3, [r7, #30]
 8012de6:	e00c      	b.n	8012e02 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012de8:	8bfa      	ldrh	r2, [r7, #30]
 8012dea:	8bfb      	ldrh	r3, [r7, #30]
 8012dec:	68f9      	ldr	r1, [r7, #12]
 8012dee:	440a      	add	r2, r1
 8012df0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8012df4:	697a      	ldr	r2, [r7, #20]
 8012df6:	4413      	add	r3, r2
 8012df8:	460a      	mov	r2, r1
 8012dfa:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012dfc:	8bfb      	ldrh	r3, [r7, #30]
 8012dfe:	3301      	adds	r3, #1
 8012e00:	83fb      	strh	r3, [r7, #30]
 8012e02:	8bfb      	ldrh	r3, [r7, #30]
 8012e04:	2b05      	cmp	r3, #5
 8012e06:	d9ef      	bls.n	8012de8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012e10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8012e14:	2200      	movs	r2, #0
 8012e16:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8012e1a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012e24:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012e2e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e38:	2301      	movs	r3, #1
 8012e3a:	2235      	movs	r2, #53	; 0x35
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	f7ff fadb 	bl	80123f8 <dhcp_option>
 8012e42:	4603      	mov	r3, r0
 8012e44:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e4c:	79fa      	ldrb	r2, [r7, #7]
 8012e4e:	8a7b      	ldrh	r3, [r7, #18]
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7ff fb05 	bl	8012460 <dhcp_option_byte>
 8012e56:	4603      	mov	r3, r0
 8012e58:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d002      	beq.n	8012e66 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	8a7a      	ldrh	r2, [r7, #18]
 8012e64:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8012e66:	69bb      	ldr	r3, [r7, #24]
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3720      	adds	r7, #32
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	080189b4 	.word	0x080189b4
 8012e74:	08018cd4 	.word	0x08018cd4
 8012e78:	08018a14 	.word	0x08018a14
 8012e7c:	08018cf4 	.word	0x08018cf4
 8012e80:	08018d14 	.word	0x08018d14
 8012e84:	200086f0 	.word	0x200086f0

08012e88 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	4603      	mov	r3, r0
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	607a      	str	r2, [r7, #4]
 8012e94:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8012e96:	89fb      	ldrh	r3, [r7, #14]
 8012e98:	1c5a      	adds	r2, r3, #1
 8012e9a:	81fa      	strh	r2, [r7, #14]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	22ff      	movs	r2, #255	; 0xff
 8012ea4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012ea6:	e007      	b.n	8012eb8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8012ea8:	89fb      	ldrh	r3, [r7, #14]
 8012eaa:	1c5a      	adds	r2, r3, #1
 8012eac:	81fa      	strh	r2, [r7, #14]
 8012eae:	461a      	mov	r2, r3
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	4413      	add	r3, r2
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012eb8:	89fb      	ldrh	r3, [r7, #14]
 8012eba:	2b43      	cmp	r3, #67	; 0x43
 8012ebc:	d904      	bls.n	8012ec8 <dhcp_option_trailer+0x40>
 8012ebe:	89fb      	ldrh	r3, [r7, #14]
 8012ec0:	f003 0303 	and.w	r3, r3, #3
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d002      	beq.n	8012ece <dhcp_option_trailer+0x46>
 8012ec8:	89fb      	ldrh	r3, [r7, #14]
 8012eca:	2b43      	cmp	r3, #67	; 0x43
 8012ecc:	d9ec      	bls.n	8012ea8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012ece:	89fb      	ldrh	r3, [r7, #14]
 8012ed0:	33f0      	adds	r3, #240	; 0xf0
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7f7 fe54 	bl	800ab84 <pbuf_realloc>
}
 8012edc:	bf00      	nop
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b085      	sub	sp, #20
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d017      	beq.n	8012f22 <dhcp_supplied_address+0x3e>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d013      	beq.n	8012f22 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012efe:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	795b      	ldrb	r3, [r3, #5]
 8012f04:	2b0a      	cmp	r3, #10
 8012f06:	d007      	beq.n	8012f18 <dhcp_supplied_address+0x34>
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	795b      	ldrb	r3, [r3, #5]
 8012f0c:	2b05      	cmp	r3, #5
 8012f0e:	d003      	beq.n	8012f18 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012f14:	2b04      	cmp	r3, #4
 8012f16:	d101      	bne.n	8012f1c <dhcp_supplied_address+0x38>
 8012f18:	2301      	movs	r3, #1
 8012f1a:	e000      	b.n	8012f1e <dhcp_supplied_address+0x3a>
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	e000      	b.n	8012f24 <dhcp_supplied_address+0x40>
  }
  return 0;
 8012f22:	2300      	movs	r3, #0
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3714      	adds	r7, #20
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2e:	4770      	bx	lr

08012f30 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012f38:	4915      	ldr	r1, [pc, #84]	; (8012f90 <etharp_free_entry+0x60>)
 8012f3a:	687a      	ldr	r2, [r7, #4]
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	005b      	lsls	r3, r3, #1
 8012f40:	4413      	add	r3, r2
 8012f42:	00db      	lsls	r3, r3, #3
 8012f44:	440b      	add	r3, r1
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d013      	beq.n	8012f74 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012f4c:	4910      	ldr	r1, [pc, #64]	; (8012f90 <etharp_free_entry+0x60>)
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	4613      	mov	r3, r2
 8012f52:	005b      	lsls	r3, r3, #1
 8012f54:	4413      	add	r3, r2
 8012f56:	00db      	lsls	r3, r3, #3
 8012f58:	440b      	add	r3, r1
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7f7 ff97 	bl	800ae90 <pbuf_free>
    arp_table[i].q = NULL;
 8012f62:	490b      	ldr	r1, [pc, #44]	; (8012f90 <etharp_free_entry+0x60>)
 8012f64:	687a      	ldr	r2, [r7, #4]
 8012f66:	4613      	mov	r3, r2
 8012f68:	005b      	lsls	r3, r3, #1
 8012f6a:	4413      	add	r3, r2
 8012f6c:	00db      	lsls	r3, r3, #3
 8012f6e:	440b      	add	r3, r1
 8012f70:	2200      	movs	r2, #0
 8012f72:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012f74:	4906      	ldr	r1, [pc, #24]	; (8012f90 <etharp_free_entry+0x60>)
 8012f76:	687a      	ldr	r2, [r7, #4]
 8012f78:	4613      	mov	r3, r2
 8012f7a:	005b      	lsls	r3, r3, #1
 8012f7c:	4413      	add	r3, r2
 8012f7e:	00db      	lsls	r3, r3, #3
 8012f80:	440b      	add	r3, r1
 8012f82:	3314      	adds	r3, #20
 8012f84:	2200      	movs	r2, #0
 8012f86:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012f88:	bf00      	nop
 8012f8a:	3708      	adds	r7, #8
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}
 8012f90:	200086f4 	.word	0x200086f4

08012f94 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	607b      	str	r3, [r7, #4]
 8012f9e:	e096      	b.n	80130ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012fa0:	494f      	ldr	r1, [pc, #316]	; (80130e0 <etharp_tmr+0x14c>)
 8012fa2:	687a      	ldr	r2, [r7, #4]
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	005b      	lsls	r3, r3, #1
 8012fa8:	4413      	add	r3, r2
 8012faa:	00db      	lsls	r3, r3, #3
 8012fac:	440b      	add	r3, r1
 8012fae:	3314      	adds	r3, #20
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012fb4:	78fb      	ldrb	r3, [r7, #3]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	f000 8086 	beq.w	80130c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012fbc:	4948      	ldr	r1, [pc, #288]	; (80130e0 <etharp_tmr+0x14c>)
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	005b      	lsls	r3, r3, #1
 8012fc4:	4413      	add	r3, r2
 8012fc6:	00db      	lsls	r3, r3, #3
 8012fc8:	440b      	add	r3, r1
 8012fca:	3312      	adds	r3, #18
 8012fcc:	881b      	ldrh	r3, [r3, #0]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	b298      	uxth	r0, r3
 8012fd2:	4943      	ldr	r1, [pc, #268]	; (80130e0 <etharp_tmr+0x14c>)
 8012fd4:	687a      	ldr	r2, [r7, #4]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	005b      	lsls	r3, r3, #1
 8012fda:	4413      	add	r3, r2
 8012fdc:	00db      	lsls	r3, r3, #3
 8012fde:	440b      	add	r3, r1
 8012fe0:	3312      	adds	r3, #18
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012fe6:	493e      	ldr	r1, [pc, #248]	; (80130e0 <etharp_tmr+0x14c>)
 8012fe8:	687a      	ldr	r2, [r7, #4]
 8012fea:	4613      	mov	r3, r2
 8012fec:	005b      	lsls	r3, r3, #1
 8012fee:	4413      	add	r3, r2
 8012ff0:	00db      	lsls	r3, r3, #3
 8012ff2:	440b      	add	r3, r1
 8012ff4:	3312      	adds	r3, #18
 8012ff6:	881b      	ldrh	r3, [r3, #0]
 8012ff8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012ffc:	d215      	bcs.n	801302a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012ffe:	4938      	ldr	r1, [pc, #224]	; (80130e0 <etharp_tmr+0x14c>)
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	4613      	mov	r3, r2
 8013004:	005b      	lsls	r3, r3, #1
 8013006:	4413      	add	r3, r2
 8013008:	00db      	lsls	r3, r3, #3
 801300a:	440b      	add	r3, r1
 801300c:	3314      	adds	r3, #20
 801300e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013010:	2b01      	cmp	r3, #1
 8013012:	d10e      	bne.n	8013032 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013014:	4932      	ldr	r1, [pc, #200]	; (80130e0 <etharp_tmr+0x14c>)
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	4613      	mov	r3, r2
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	4413      	add	r3, r2
 801301e:	00db      	lsls	r3, r3, #3
 8013020:	440b      	add	r3, r1
 8013022:	3312      	adds	r3, #18
 8013024:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013026:	2b04      	cmp	r3, #4
 8013028:	d903      	bls.n	8013032 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f7ff ff80 	bl	8012f30 <etharp_free_entry>
 8013030:	e04a      	b.n	80130c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013032:	492b      	ldr	r1, [pc, #172]	; (80130e0 <etharp_tmr+0x14c>)
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	4613      	mov	r3, r2
 8013038:	005b      	lsls	r3, r3, #1
 801303a:	4413      	add	r3, r2
 801303c:	00db      	lsls	r3, r3, #3
 801303e:	440b      	add	r3, r1
 8013040:	3314      	adds	r3, #20
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	2b03      	cmp	r3, #3
 8013046:	d10a      	bne.n	801305e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013048:	4925      	ldr	r1, [pc, #148]	; (80130e0 <etharp_tmr+0x14c>)
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	4613      	mov	r3, r2
 801304e:	005b      	lsls	r3, r3, #1
 8013050:	4413      	add	r3, r2
 8013052:	00db      	lsls	r3, r3, #3
 8013054:	440b      	add	r3, r1
 8013056:	3314      	adds	r3, #20
 8013058:	2204      	movs	r2, #4
 801305a:	701a      	strb	r2, [r3, #0]
 801305c:	e034      	b.n	80130c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801305e:	4920      	ldr	r1, [pc, #128]	; (80130e0 <etharp_tmr+0x14c>)
 8013060:	687a      	ldr	r2, [r7, #4]
 8013062:	4613      	mov	r3, r2
 8013064:	005b      	lsls	r3, r3, #1
 8013066:	4413      	add	r3, r2
 8013068:	00db      	lsls	r3, r3, #3
 801306a:	440b      	add	r3, r1
 801306c:	3314      	adds	r3, #20
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	2b04      	cmp	r3, #4
 8013072:	d10a      	bne.n	801308a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013074:	491a      	ldr	r1, [pc, #104]	; (80130e0 <etharp_tmr+0x14c>)
 8013076:	687a      	ldr	r2, [r7, #4]
 8013078:	4613      	mov	r3, r2
 801307a:	005b      	lsls	r3, r3, #1
 801307c:	4413      	add	r3, r2
 801307e:	00db      	lsls	r3, r3, #3
 8013080:	440b      	add	r3, r1
 8013082:	3314      	adds	r3, #20
 8013084:	2202      	movs	r2, #2
 8013086:	701a      	strb	r2, [r3, #0]
 8013088:	e01e      	b.n	80130c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801308a:	4915      	ldr	r1, [pc, #84]	; (80130e0 <etharp_tmr+0x14c>)
 801308c:	687a      	ldr	r2, [r7, #4]
 801308e:	4613      	mov	r3, r2
 8013090:	005b      	lsls	r3, r3, #1
 8013092:	4413      	add	r3, r2
 8013094:	00db      	lsls	r3, r3, #3
 8013096:	440b      	add	r3, r1
 8013098:	3314      	adds	r3, #20
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	2b01      	cmp	r3, #1
 801309e:	d113      	bne.n	80130c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80130a0:	490f      	ldr	r1, [pc, #60]	; (80130e0 <etharp_tmr+0x14c>)
 80130a2:	687a      	ldr	r2, [r7, #4]
 80130a4:	4613      	mov	r3, r2
 80130a6:	005b      	lsls	r3, r3, #1
 80130a8:	4413      	add	r3, r2
 80130aa:	00db      	lsls	r3, r3, #3
 80130ac:	440b      	add	r3, r1
 80130ae:	3308      	adds	r3, #8
 80130b0:	6818      	ldr	r0, [r3, #0]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	4613      	mov	r3, r2
 80130b6:	005b      	lsls	r3, r3, #1
 80130b8:	4413      	add	r3, r2
 80130ba:	00db      	lsls	r3, r3, #3
 80130bc:	4a08      	ldr	r2, [pc, #32]	; (80130e0 <etharp_tmr+0x14c>)
 80130be:	4413      	add	r3, r2
 80130c0:	3304      	adds	r3, #4
 80130c2:	4619      	mov	r1, r3
 80130c4:	f000 fe72 	bl	8013dac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	3301      	adds	r3, #1
 80130cc:	607b      	str	r3, [r7, #4]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2b09      	cmp	r3, #9
 80130d2:	f77f af65 	ble.w	8012fa0 <etharp_tmr+0xc>
      }
    }
  }
}
 80130d6:	bf00      	nop
 80130d8:	bf00      	nop
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	200086f4 	.word	0x200086f4

080130e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b08a      	sub	sp, #40	; 0x28
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	460b      	mov	r3, r1
 80130ee:	607a      	str	r2, [r7, #4]
 80130f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80130f2:	230a      	movs	r3, #10
 80130f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80130f6:	230a      	movs	r3, #10
 80130f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80130fa:	230a      	movs	r3, #10
 80130fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80130fe:	2300      	movs	r3, #0
 8013100:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013102:	230a      	movs	r3, #10
 8013104:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013106:	2300      	movs	r3, #0
 8013108:	83bb      	strh	r3, [r7, #28]
 801310a:	2300      	movs	r3, #0
 801310c:	837b      	strh	r3, [r7, #26]
 801310e:	2300      	movs	r3, #0
 8013110:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013112:	2300      	movs	r3, #0
 8013114:	843b      	strh	r3, [r7, #32]
 8013116:	e0ae      	b.n	8013276 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013118:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801311c:	49a6      	ldr	r1, [pc, #664]	; (80133b8 <etharp_find_entry+0x2d4>)
 801311e:	4613      	mov	r3, r2
 8013120:	005b      	lsls	r3, r3, #1
 8013122:	4413      	add	r3, r2
 8013124:	00db      	lsls	r3, r3, #3
 8013126:	440b      	add	r3, r1
 8013128:	3314      	adds	r3, #20
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801312e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013132:	2b0a      	cmp	r3, #10
 8013134:	d105      	bne.n	8013142 <etharp_find_entry+0x5e>
 8013136:	7dfb      	ldrb	r3, [r7, #23]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d102      	bne.n	8013142 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801313c:	8c3b      	ldrh	r3, [r7, #32]
 801313e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013140:	e095      	b.n	801326e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013142:	7dfb      	ldrb	r3, [r7, #23]
 8013144:	2b00      	cmp	r3, #0
 8013146:	f000 8092 	beq.w	801326e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801314a:	7dfb      	ldrb	r3, [r7, #23]
 801314c:	2b01      	cmp	r3, #1
 801314e:	d009      	beq.n	8013164 <etharp_find_entry+0x80>
 8013150:	7dfb      	ldrb	r3, [r7, #23]
 8013152:	2b01      	cmp	r3, #1
 8013154:	d806      	bhi.n	8013164 <etharp_find_entry+0x80>
 8013156:	4b99      	ldr	r3, [pc, #612]	; (80133bc <etharp_find_entry+0x2d8>)
 8013158:	f240 1223 	movw	r2, #291	; 0x123
 801315c:	4998      	ldr	r1, [pc, #608]	; (80133c0 <etharp_find_entry+0x2dc>)
 801315e:	4899      	ldr	r0, [pc, #612]	; (80133c4 <etharp_find_entry+0x2e0>)
 8013160:	f002 fa3e 	bl	80155e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d020      	beq.n	80131ac <etharp_find_entry+0xc8>
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	6819      	ldr	r1, [r3, #0]
 801316e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013172:	4891      	ldr	r0, [pc, #580]	; (80133b8 <etharp_find_entry+0x2d4>)
 8013174:	4613      	mov	r3, r2
 8013176:	005b      	lsls	r3, r3, #1
 8013178:	4413      	add	r3, r2
 801317a:	00db      	lsls	r3, r3, #3
 801317c:	4403      	add	r3, r0
 801317e:	3304      	adds	r3, #4
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	4299      	cmp	r1, r3
 8013184:	d112      	bne.n	80131ac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00c      	beq.n	80131a6 <etharp_find_entry+0xc2>
 801318c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013190:	4989      	ldr	r1, [pc, #548]	; (80133b8 <etharp_find_entry+0x2d4>)
 8013192:	4613      	mov	r3, r2
 8013194:	005b      	lsls	r3, r3, #1
 8013196:	4413      	add	r3, r2
 8013198:	00db      	lsls	r3, r3, #3
 801319a:	440b      	add	r3, r1
 801319c:	3308      	adds	r3, #8
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d102      	bne.n	80131ac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80131a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80131aa:	e100      	b.n	80133ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80131ac:	7dfb      	ldrb	r3, [r7, #23]
 80131ae:	2b01      	cmp	r3, #1
 80131b0:	d140      	bne.n	8013234 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80131b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131b6:	4980      	ldr	r1, [pc, #512]	; (80133b8 <etharp_find_entry+0x2d4>)
 80131b8:	4613      	mov	r3, r2
 80131ba:	005b      	lsls	r3, r3, #1
 80131bc:	4413      	add	r3, r2
 80131be:	00db      	lsls	r3, r3, #3
 80131c0:	440b      	add	r3, r1
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d01a      	beq.n	80131fe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80131c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131cc:	497a      	ldr	r1, [pc, #488]	; (80133b8 <etharp_find_entry+0x2d4>)
 80131ce:	4613      	mov	r3, r2
 80131d0:	005b      	lsls	r3, r3, #1
 80131d2:	4413      	add	r3, r2
 80131d4:	00db      	lsls	r3, r3, #3
 80131d6:	440b      	add	r3, r1
 80131d8:	3312      	adds	r3, #18
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	8bba      	ldrh	r2, [r7, #28]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d845      	bhi.n	801326e <etharp_find_entry+0x18a>
            old_queue = i;
 80131e2:	8c3b      	ldrh	r3, [r7, #32]
 80131e4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80131e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131ea:	4973      	ldr	r1, [pc, #460]	; (80133b8 <etharp_find_entry+0x2d4>)
 80131ec:	4613      	mov	r3, r2
 80131ee:	005b      	lsls	r3, r3, #1
 80131f0:	4413      	add	r3, r2
 80131f2:	00db      	lsls	r3, r3, #3
 80131f4:	440b      	add	r3, r1
 80131f6:	3312      	adds	r3, #18
 80131f8:	881b      	ldrh	r3, [r3, #0]
 80131fa:	83bb      	strh	r3, [r7, #28]
 80131fc:	e037      	b.n	801326e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80131fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013202:	496d      	ldr	r1, [pc, #436]	; (80133b8 <etharp_find_entry+0x2d4>)
 8013204:	4613      	mov	r3, r2
 8013206:	005b      	lsls	r3, r3, #1
 8013208:	4413      	add	r3, r2
 801320a:	00db      	lsls	r3, r3, #3
 801320c:	440b      	add	r3, r1
 801320e:	3312      	adds	r3, #18
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	8b7a      	ldrh	r2, [r7, #26]
 8013214:	429a      	cmp	r2, r3
 8013216:	d82a      	bhi.n	801326e <etharp_find_entry+0x18a>
            old_pending = i;
 8013218:	8c3b      	ldrh	r3, [r7, #32]
 801321a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801321c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013220:	4965      	ldr	r1, [pc, #404]	; (80133b8 <etharp_find_entry+0x2d4>)
 8013222:	4613      	mov	r3, r2
 8013224:	005b      	lsls	r3, r3, #1
 8013226:	4413      	add	r3, r2
 8013228:	00db      	lsls	r3, r3, #3
 801322a:	440b      	add	r3, r1
 801322c:	3312      	adds	r3, #18
 801322e:	881b      	ldrh	r3, [r3, #0]
 8013230:	837b      	strh	r3, [r7, #26]
 8013232:	e01c      	b.n	801326e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013234:	7dfb      	ldrb	r3, [r7, #23]
 8013236:	2b01      	cmp	r3, #1
 8013238:	d919      	bls.n	801326e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801323a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801323e:	495e      	ldr	r1, [pc, #376]	; (80133b8 <etharp_find_entry+0x2d4>)
 8013240:	4613      	mov	r3, r2
 8013242:	005b      	lsls	r3, r3, #1
 8013244:	4413      	add	r3, r2
 8013246:	00db      	lsls	r3, r3, #3
 8013248:	440b      	add	r3, r1
 801324a:	3312      	adds	r3, #18
 801324c:	881b      	ldrh	r3, [r3, #0]
 801324e:	8b3a      	ldrh	r2, [r7, #24]
 8013250:	429a      	cmp	r2, r3
 8013252:	d80c      	bhi.n	801326e <etharp_find_entry+0x18a>
            old_stable = i;
 8013254:	8c3b      	ldrh	r3, [r7, #32]
 8013256:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013258:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801325c:	4956      	ldr	r1, [pc, #344]	; (80133b8 <etharp_find_entry+0x2d4>)
 801325e:	4613      	mov	r3, r2
 8013260:	005b      	lsls	r3, r3, #1
 8013262:	4413      	add	r3, r2
 8013264:	00db      	lsls	r3, r3, #3
 8013266:	440b      	add	r3, r1
 8013268:	3312      	adds	r3, #18
 801326a:	881b      	ldrh	r3, [r3, #0]
 801326c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801326e:	8c3b      	ldrh	r3, [r7, #32]
 8013270:	3301      	adds	r3, #1
 8013272:	b29b      	uxth	r3, r3
 8013274:	843b      	strh	r3, [r7, #32]
 8013276:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801327a:	2b09      	cmp	r3, #9
 801327c:	f77f af4c 	ble.w	8013118 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013280:	7afb      	ldrb	r3, [r7, #11]
 8013282:	f003 0302 	and.w	r3, r3, #2
 8013286:	2b00      	cmp	r3, #0
 8013288:	d108      	bne.n	801329c <etharp_find_entry+0x1b8>
 801328a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801328e:	2b0a      	cmp	r3, #10
 8013290:	d107      	bne.n	80132a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013292:	7afb      	ldrb	r3, [r7, #11]
 8013294:	f003 0301 	and.w	r3, r3, #1
 8013298:	2b00      	cmp	r3, #0
 801329a:	d102      	bne.n	80132a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801329c:	f04f 33ff 	mov.w	r3, #4294967295
 80132a0:	e085      	b.n	80133ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80132a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80132a6:	2b09      	cmp	r3, #9
 80132a8:	dc02      	bgt.n	80132b0 <etharp_find_entry+0x1cc>
    i = empty;
 80132aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132ac:	843b      	strh	r3, [r7, #32]
 80132ae:	e039      	b.n	8013324 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80132b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80132b4:	2b09      	cmp	r3, #9
 80132b6:	dc14      	bgt.n	80132e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80132b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80132bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132c0:	493d      	ldr	r1, [pc, #244]	; (80133b8 <etharp_find_entry+0x2d4>)
 80132c2:	4613      	mov	r3, r2
 80132c4:	005b      	lsls	r3, r3, #1
 80132c6:	4413      	add	r3, r2
 80132c8:	00db      	lsls	r3, r3, #3
 80132ca:	440b      	add	r3, r1
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d018      	beq.n	8013304 <etharp_find_entry+0x220>
 80132d2:	4b3a      	ldr	r3, [pc, #232]	; (80133bc <etharp_find_entry+0x2d8>)
 80132d4:	f240 126d 	movw	r2, #365	; 0x16d
 80132d8:	493b      	ldr	r1, [pc, #236]	; (80133c8 <etharp_find_entry+0x2e4>)
 80132da:	483a      	ldr	r0, [pc, #232]	; (80133c4 <etharp_find_entry+0x2e0>)
 80132dc:	f002 f980 	bl	80155e0 <iprintf>
 80132e0:	e010      	b.n	8013304 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80132e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80132e6:	2b09      	cmp	r3, #9
 80132e8:	dc02      	bgt.n	80132f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80132ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80132ec:	843b      	strh	r3, [r7, #32]
 80132ee:	e009      	b.n	8013304 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80132f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80132f4:	2b09      	cmp	r3, #9
 80132f6:	dc02      	bgt.n	80132fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80132f8:	8bfb      	ldrh	r3, [r7, #30]
 80132fa:	843b      	strh	r3, [r7, #32]
 80132fc:	e002      	b.n	8013304 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80132fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013302:	e054      	b.n	80133ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013304:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013308:	2b09      	cmp	r3, #9
 801330a:	dd06      	ble.n	801331a <etharp_find_entry+0x236>
 801330c:	4b2b      	ldr	r3, [pc, #172]	; (80133bc <etharp_find_entry+0x2d8>)
 801330e:	f240 127f 	movw	r2, #383	; 0x17f
 8013312:	492e      	ldr	r1, [pc, #184]	; (80133cc <etharp_find_entry+0x2e8>)
 8013314:	482b      	ldr	r0, [pc, #172]	; (80133c4 <etharp_find_entry+0x2e0>)
 8013316:	f002 f963 	bl	80155e0 <iprintf>
    etharp_free_entry(i);
 801331a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801331e:	4618      	mov	r0, r3
 8013320:	f7ff fe06 	bl	8012f30 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013324:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013328:	2b09      	cmp	r3, #9
 801332a:	dd06      	ble.n	801333a <etharp_find_entry+0x256>
 801332c:	4b23      	ldr	r3, [pc, #140]	; (80133bc <etharp_find_entry+0x2d8>)
 801332e:	f240 1283 	movw	r2, #387	; 0x183
 8013332:	4926      	ldr	r1, [pc, #152]	; (80133cc <etharp_find_entry+0x2e8>)
 8013334:	4823      	ldr	r0, [pc, #140]	; (80133c4 <etharp_find_entry+0x2e0>)
 8013336:	f002 f953 	bl	80155e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801333a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801333e:	491e      	ldr	r1, [pc, #120]	; (80133b8 <etharp_find_entry+0x2d4>)
 8013340:	4613      	mov	r3, r2
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	4413      	add	r3, r2
 8013346:	00db      	lsls	r3, r3, #3
 8013348:	440b      	add	r3, r1
 801334a:	3314      	adds	r3, #20
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d006      	beq.n	8013360 <etharp_find_entry+0x27c>
 8013352:	4b1a      	ldr	r3, [pc, #104]	; (80133bc <etharp_find_entry+0x2d8>)
 8013354:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013358:	491d      	ldr	r1, [pc, #116]	; (80133d0 <etharp_find_entry+0x2ec>)
 801335a:	481a      	ldr	r0, [pc, #104]	; (80133c4 <etharp_find_entry+0x2e0>)
 801335c:	f002 f940 	bl	80155e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d00b      	beq.n	801337e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013366:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	6819      	ldr	r1, [r3, #0]
 801336e:	4812      	ldr	r0, [pc, #72]	; (80133b8 <etharp_find_entry+0x2d4>)
 8013370:	4613      	mov	r3, r2
 8013372:	005b      	lsls	r3, r3, #1
 8013374:	4413      	add	r3, r2
 8013376:	00db      	lsls	r3, r3, #3
 8013378:	4403      	add	r3, r0
 801337a:	3304      	adds	r3, #4
 801337c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801337e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013382:	490d      	ldr	r1, [pc, #52]	; (80133b8 <etharp_find_entry+0x2d4>)
 8013384:	4613      	mov	r3, r2
 8013386:	005b      	lsls	r3, r3, #1
 8013388:	4413      	add	r3, r2
 801338a:	00db      	lsls	r3, r3, #3
 801338c:	440b      	add	r3, r1
 801338e:	3312      	adds	r3, #18
 8013390:	2200      	movs	r2, #0
 8013392:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013394:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013398:	4907      	ldr	r1, [pc, #28]	; (80133b8 <etharp_find_entry+0x2d4>)
 801339a:	4613      	mov	r3, r2
 801339c:	005b      	lsls	r3, r3, #1
 801339e:	4413      	add	r3, r2
 80133a0:	00db      	lsls	r3, r3, #3
 80133a2:	440b      	add	r3, r1
 80133a4:	3308      	adds	r3, #8
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80133aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3728      	adds	r7, #40	; 0x28
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	200086f4 	.word	0x200086f4
 80133bc:	08018d54 	.word	0x08018d54
 80133c0:	08018d8c 	.word	0x08018d8c
 80133c4:	08018dcc 	.word	0x08018dcc
 80133c8:	08018df4 	.word	0x08018df4
 80133cc:	08018e0c 	.word	0x08018e0c
 80133d0:	08018e20 	.word	0x08018e20

080133d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b088      	sub	sp, #32
 80133d8:	af02      	add	r7, sp, #8
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
 80133e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80133e8:	2b06      	cmp	r3, #6
 80133ea:	d006      	beq.n	80133fa <etharp_update_arp_entry+0x26>
 80133ec:	4b48      	ldr	r3, [pc, #288]	; (8013510 <etharp_update_arp_entry+0x13c>)
 80133ee:	f240 12a9 	movw	r2, #425	; 0x1a9
 80133f2:	4948      	ldr	r1, [pc, #288]	; (8013514 <etharp_update_arp_entry+0x140>)
 80133f4:	4848      	ldr	r0, [pc, #288]	; (8013518 <etharp_update_arp_entry+0x144>)
 80133f6:	f002 f8f3 	bl	80155e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d012      	beq.n	8013426 <etharp_update_arp_entry+0x52>
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d00e      	beq.n	8013426 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	68f9      	ldr	r1, [r7, #12]
 801340e:	4618      	mov	r0, r3
 8013410:	f001 f946 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 8013414:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013416:	2b00      	cmp	r3, #0
 8013418:	d105      	bne.n	8013426 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013422:	2be0      	cmp	r3, #224	; 0xe0
 8013424:	d102      	bne.n	801342c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013426:	f06f 030f 	mvn.w	r3, #15
 801342a:	e06c      	b.n	8013506 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801342c:	78fb      	ldrb	r3, [r7, #3]
 801342e:	68fa      	ldr	r2, [r7, #12]
 8013430:	4619      	mov	r1, r3
 8013432:	68b8      	ldr	r0, [r7, #8]
 8013434:	f7ff fe56 	bl	80130e4 <etharp_find_entry>
 8013438:	4603      	mov	r3, r0
 801343a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801343c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013440:	2b00      	cmp	r3, #0
 8013442:	da02      	bge.n	801344a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013444:	8afb      	ldrh	r3, [r7, #22]
 8013446:	b25b      	sxtb	r3, r3
 8013448:	e05d      	b.n	8013506 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801344a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801344e:	4933      	ldr	r1, [pc, #204]	; (801351c <etharp_update_arp_entry+0x148>)
 8013450:	4613      	mov	r3, r2
 8013452:	005b      	lsls	r3, r3, #1
 8013454:	4413      	add	r3, r2
 8013456:	00db      	lsls	r3, r3, #3
 8013458:	440b      	add	r3, r1
 801345a:	3314      	adds	r3, #20
 801345c:	2202      	movs	r2, #2
 801345e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013460:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013464:	492d      	ldr	r1, [pc, #180]	; (801351c <etharp_update_arp_entry+0x148>)
 8013466:	4613      	mov	r3, r2
 8013468:	005b      	lsls	r3, r3, #1
 801346a:	4413      	add	r3, r2
 801346c:	00db      	lsls	r3, r3, #3
 801346e:	440b      	add	r3, r1
 8013470:	3308      	adds	r3, #8
 8013472:	68fa      	ldr	r2, [r7, #12]
 8013474:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013476:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801347a:	4613      	mov	r3, r2
 801347c:	005b      	lsls	r3, r3, #1
 801347e:	4413      	add	r3, r2
 8013480:	00db      	lsls	r3, r3, #3
 8013482:	3308      	adds	r3, #8
 8013484:	4a25      	ldr	r2, [pc, #148]	; (801351c <etharp_update_arp_entry+0x148>)
 8013486:	4413      	add	r3, r2
 8013488:	3304      	adds	r3, #4
 801348a:	2206      	movs	r2, #6
 801348c:	6879      	ldr	r1, [r7, #4]
 801348e:	4618      	mov	r0, r3
 8013490:	f002 f890 	bl	80155b4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013494:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013498:	4920      	ldr	r1, [pc, #128]	; (801351c <etharp_update_arp_entry+0x148>)
 801349a:	4613      	mov	r3, r2
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	4413      	add	r3, r2
 80134a0:	00db      	lsls	r3, r3, #3
 80134a2:	440b      	add	r3, r1
 80134a4:	3312      	adds	r3, #18
 80134a6:	2200      	movs	r2, #0
 80134a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80134aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80134ae:	491b      	ldr	r1, [pc, #108]	; (801351c <etharp_update_arp_entry+0x148>)
 80134b0:	4613      	mov	r3, r2
 80134b2:	005b      	lsls	r3, r3, #1
 80134b4:	4413      	add	r3, r2
 80134b6:	00db      	lsls	r3, r3, #3
 80134b8:	440b      	add	r3, r1
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d021      	beq.n	8013504 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80134c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80134c4:	4915      	ldr	r1, [pc, #84]	; (801351c <etharp_update_arp_entry+0x148>)
 80134c6:	4613      	mov	r3, r2
 80134c8:	005b      	lsls	r3, r3, #1
 80134ca:	4413      	add	r3, r2
 80134cc:	00db      	lsls	r3, r3, #3
 80134ce:	440b      	add	r3, r1
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80134d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80134d8:	4910      	ldr	r1, [pc, #64]	; (801351c <etharp_update_arp_entry+0x148>)
 80134da:	4613      	mov	r3, r2
 80134dc:	005b      	lsls	r3, r3, #1
 80134de:	4413      	add	r3, r2
 80134e0:	00db      	lsls	r3, r3, #3
 80134e2:	440b      	add	r3, r1
 80134e4:	2200      	movs	r2, #0
 80134e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80134ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80134f2:	9300      	str	r3, [sp, #0]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6939      	ldr	r1, [r7, #16]
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f001 ffdf 	bl	80154bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80134fe:	6938      	ldr	r0, [r7, #16]
 8013500:	f7f7 fcc6 	bl	800ae90 <pbuf_free>
  }
  return ERR_OK;
 8013504:	2300      	movs	r3, #0
}
 8013506:	4618      	mov	r0, r3
 8013508:	3718      	adds	r7, #24
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
 801350e:	bf00      	nop
 8013510:	08018d54 	.word	0x08018d54
 8013514:	08018e4c 	.word	0x08018e4c
 8013518:	08018dcc 	.word	0x08018dcc
 801351c:	200086f4 	.word	0x200086f4

08013520 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013528:	2300      	movs	r3, #0
 801352a:	60fb      	str	r3, [r7, #12]
 801352c:	e01e      	b.n	801356c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801352e:	4913      	ldr	r1, [pc, #76]	; (801357c <etharp_cleanup_netif+0x5c>)
 8013530:	68fa      	ldr	r2, [r7, #12]
 8013532:	4613      	mov	r3, r2
 8013534:	005b      	lsls	r3, r3, #1
 8013536:	4413      	add	r3, r2
 8013538:	00db      	lsls	r3, r3, #3
 801353a:	440b      	add	r3, r1
 801353c:	3314      	adds	r3, #20
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013542:	7afb      	ldrb	r3, [r7, #11]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d00e      	beq.n	8013566 <etharp_cleanup_netif+0x46>
 8013548:	490c      	ldr	r1, [pc, #48]	; (801357c <etharp_cleanup_netif+0x5c>)
 801354a:	68fa      	ldr	r2, [r7, #12]
 801354c:	4613      	mov	r3, r2
 801354e:	005b      	lsls	r3, r3, #1
 8013550:	4413      	add	r3, r2
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	440b      	add	r3, r1
 8013556:	3308      	adds	r3, #8
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	429a      	cmp	r2, r3
 801355e:	d102      	bne.n	8013566 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013560:	68f8      	ldr	r0, [r7, #12]
 8013562:	f7ff fce5 	bl	8012f30 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	3301      	adds	r3, #1
 801356a:	60fb      	str	r3, [r7, #12]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2b09      	cmp	r3, #9
 8013570:	dddd      	ble.n	801352e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013572:	bf00      	nop
 8013574:	bf00      	nop
 8013576:	3710      	adds	r7, #16
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}
 801357c:	200086f4 	.word	0x200086f4

08013580 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013580:	b5b0      	push	{r4, r5, r7, lr}
 8013582:	b08a      	sub	sp, #40	; 0x28
 8013584:	af04      	add	r7, sp, #16
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d107      	bne.n	80135a0 <etharp_input+0x20>
 8013590:	4b3f      	ldr	r3, [pc, #252]	; (8013690 <etharp_input+0x110>)
 8013592:	f240 228a 	movw	r2, #650	; 0x28a
 8013596:	493f      	ldr	r1, [pc, #252]	; (8013694 <etharp_input+0x114>)
 8013598:	483f      	ldr	r0, [pc, #252]	; (8013698 <etharp_input+0x118>)
 801359a:	f002 f821 	bl	80155e0 <iprintf>
 801359e:	e074      	b.n	801368a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	881b      	ldrh	r3, [r3, #0]
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80135b0:	d10c      	bne.n	80135cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80135b6:	2b06      	cmp	r3, #6
 80135b8:	d108      	bne.n	80135cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80135be:	2b04      	cmp	r3, #4
 80135c0:	d104      	bne.n	80135cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	885b      	ldrh	r3, [r3, #2]
 80135c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80135c8:	2b08      	cmp	r3, #8
 80135ca:	d003      	beq.n	80135d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f7f7 fc5f 	bl	800ae90 <pbuf_free>
    return;
 80135d2:	e05a      	b.n	801368a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	330e      	adds	r3, #14
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	3318      	adds	r3, #24
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	3304      	adds	r3, #4
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d102      	bne.n	80135f4 <etharp_input+0x74>
    for_us = 0;
 80135ee:	2300      	movs	r3, #0
 80135f0:	75fb      	strb	r3, [r7, #23]
 80135f2:	e009      	b.n	8013608 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80135f4:	68ba      	ldr	r2, [r7, #8]
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	3304      	adds	r3, #4
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	bf0c      	ite	eq
 8013600:	2301      	moveq	r3, #1
 8013602:	2300      	movne	r3, #0
 8013604:	b2db      	uxtb	r3, r3
 8013606:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	f103 0208 	add.w	r2, r3, #8
 801360e:	7dfb      	ldrb	r3, [r7, #23]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d001      	beq.n	8013618 <etharp_input+0x98>
 8013614:	2301      	movs	r3, #1
 8013616:	e000      	b.n	801361a <etharp_input+0x9a>
 8013618:	2302      	movs	r3, #2
 801361a:	f107 010c 	add.w	r1, r7, #12
 801361e:	6838      	ldr	r0, [r7, #0]
 8013620:	f7ff fed8 	bl	80133d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	88db      	ldrh	r3, [r3, #6]
 8013628:	b29b      	uxth	r3, r3
 801362a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801362e:	d003      	beq.n	8013638 <etharp_input+0xb8>
 8013630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013634:	d01e      	beq.n	8013674 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013636:	e025      	b.n	8013684 <etharp_input+0x104>
      if (for_us) {
 8013638:	7dfb      	ldrb	r3, [r7, #23]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d021      	beq.n	8013682 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013654:	693a      	ldr	r2, [r7, #16]
 8013656:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013658:	2102      	movs	r1, #2
 801365a:	9103      	str	r1, [sp, #12]
 801365c:	f107 010c 	add.w	r1, r7, #12
 8013660:	9102      	str	r1, [sp, #8]
 8013662:	9201      	str	r2, [sp, #4]
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	462b      	mov	r3, r5
 8013668:	4622      	mov	r2, r4
 801366a:	4601      	mov	r1, r0
 801366c:	6838      	ldr	r0, [r7, #0]
 801366e:	f000 faef 	bl	8013c50 <etharp_raw>
      break;
 8013672:	e006      	b.n	8013682 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8013674:	f107 030c 	add.w	r3, r7, #12
 8013678:	4619      	mov	r1, r3
 801367a:	6838      	ldr	r0, [r7, #0]
 801367c:	f7fe f9fc 	bl	8011a78 <dhcp_arp_reply>
      break;
 8013680:	e000      	b.n	8013684 <etharp_input+0x104>
      break;
 8013682:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7f7 fc03 	bl	800ae90 <pbuf_free>
}
 801368a:	3718      	adds	r7, #24
 801368c:	46bd      	mov	sp, r7
 801368e:	bdb0      	pop	{r4, r5, r7, pc}
 8013690:	08018d54 	.word	0x08018d54
 8013694:	08018ea4 	.word	0x08018ea4
 8013698:	08018dcc 	.word	0x08018dcc

0801369c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b086      	sub	sp, #24
 80136a0:	af02      	add	r7, sp, #8
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	4613      	mov	r3, r2
 80136a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80136aa:	79fa      	ldrb	r2, [r7, #7]
 80136ac:	4944      	ldr	r1, [pc, #272]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 80136ae:	4613      	mov	r3, r2
 80136b0:	005b      	lsls	r3, r3, #1
 80136b2:	4413      	add	r3, r2
 80136b4:	00db      	lsls	r3, r3, #3
 80136b6:	440b      	add	r3, r1
 80136b8:	3314      	adds	r3, #20
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	2b01      	cmp	r3, #1
 80136be:	d806      	bhi.n	80136ce <etharp_output_to_arp_index+0x32>
 80136c0:	4b40      	ldr	r3, [pc, #256]	; (80137c4 <etharp_output_to_arp_index+0x128>)
 80136c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80136c6:	4940      	ldr	r1, [pc, #256]	; (80137c8 <etharp_output_to_arp_index+0x12c>)
 80136c8:	4840      	ldr	r0, [pc, #256]	; (80137cc <etharp_output_to_arp_index+0x130>)
 80136ca:	f001 ff89 	bl	80155e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80136ce:	79fa      	ldrb	r2, [r7, #7]
 80136d0:	493b      	ldr	r1, [pc, #236]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 80136d2:	4613      	mov	r3, r2
 80136d4:	005b      	lsls	r3, r3, #1
 80136d6:	4413      	add	r3, r2
 80136d8:	00db      	lsls	r3, r3, #3
 80136da:	440b      	add	r3, r1
 80136dc:	3314      	adds	r3, #20
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	2b02      	cmp	r3, #2
 80136e2:	d153      	bne.n	801378c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80136e4:	79fa      	ldrb	r2, [r7, #7]
 80136e6:	4936      	ldr	r1, [pc, #216]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 80136e8:	4613      	mov	r3, r2
 80136ea:	005b      	lsls	r3, r3, #1
 80136ec:	4413      	add	r3, r2
 80136ee:	00db      	lsls	r3, r3, #3
 80136f0:	440b      	add	r3, r1
 80136f2:	3312      	adds	r3, #18
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80136fa:	d919      	bls.n	8013730 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80136fc:	79fa      	ldrb	r2, [r7, #7]
 80136fe:	4613      	mov	r3, r2
 8013700:	005b      	lsls	r3, r3, #1
 8013702:	4413      	add	r3, r2
 8013704:	00db      	lsls	r3, r3, #3
 8013706:	4a2e      	ldr	r2, [pc, #184]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 8013708:	4413      	add	r3, r2
 801370a:	3304      	adds	r3, #4
 801370c:	4619      	mov	r1, r3
 801370e:	68f8      	ldr	r0, [r7, #12]
 8013710:	f000 fb4c 	bl	8013dac <etharp_request>
 8013714:	4603      	mov	r3, r0
 8013716:	2b00      	cmp	r3, #0
 8013718:	d138      	bne.n	801378c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801371a:	79fa      	ldrb	r2, [r7, #7]
 801371c:	4928      	ldr	r1, [pc, #160]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 801371e:	4613      	mov	r3, r2
 8013720:	005b      	lsls	r3, r3, #1
 8013722:	4413      	add	r3, r2
 8013724:	00db      	lsls	r3, r3, #3
 8013726:	440b      	add	r3, r1
 8013728:	3314      	adds	r3, #20
 801372a:	2203      	movs	r2, #3
 801372c:	701a      	strb	r2, [r3, #0]
 801372e:	e02d      	b.n	801378c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013730:	79fa      	ldrb	r2, [r7, #7]
 8013732:	4923      	ldr	r1, [pc, #140]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 8013734:	4613      	mov	r3, r2
 8013736:	005b      	lsls	r3, r3, #1
 8013738:	4413      	add	r3, r2
 801373a:	00db      	lsls	r3, r3, #3
 801373c:	440b      	add	r3, r1
 801373e:	3312      	adds	r3, #18
 8013740:	881b      	ldrh	r3, [r3, #0]
 8013742:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013746:	d321      	bcc.n	801378c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013748:	79fa      	ldrb	r2, [r7, #7]
 801374a:	4613      	mov	r3, r2
 801374c:	005b      	lsls	r3, r3, #1
 801374e:	4413      	add	r3, r2
 8013750:	00db      	lsls	r3, r3, #3
 8013752:	4a1b      	ldr	r2, [pc, #108]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 8013754:	4413      	add	r3, r2
 8013756:	1d19      	adds	r1, r3, #4
 8013758:	79fa      	ldrb	r2, [r7, #7]
 801375a:	4613      	mov	r3, r2
 801375c:	005b      	lsls	r3, r3, #1
 801375e:	4413      	add	r3, r2
 8013760:	00db      	lsls	r3, r3, #3
 8013762:	3308      	adds	r3, #8
 8013764:	4a16      	ldr	r2, [pc, #88]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 8013766:	4413      	add	r3, r2
 8013768:	3304      	adds	r3, #4
 801376a:	461a      	mov	r2, r3
 801376c:	68f8      	ldr	r0, [r7, #12]
 801376e:	f000 fafb 	bl	8013d68 <etharp_request_dst>
 8013772:	4603      	mov	r3, r0
 8013774:	2b00      	cmp	r3, #0
 8013776:	d109      	bne.n	801378c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013778:	79fa      	ldrb	r2, [r7, #7]
 801377a:	4911      	ldr	r1, [pc, #68]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 801377c:	4613      	mov	r3, r2
 801377e:	005b      	lsls	r3, r3, #1
 8013780:	4413      	add	r3, r2
 8013782:	00db      	lsls	r3, r3, #3
 8013784:	440b      	add	r3, r1
 8013786:	3314      	adds	r3, #20
 8013788:	2203      	movs	r2, #3
 801378a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8013792:	79fa      	ldrb	r2, [r7, #7]
 8013794:	4613      	mov	r3, r2
 8013796:	005b      	lsls	r3, r3, #1
 8013798:	4413      	add	r3, r2
 801379a:	00db      	lsls	r3, r3, #3
 801379c:	3308      	adds	r3, #8
 801379e:	4a08      	ldr	r2, [pc, #32]	; (80137c0 <etharp_output_to_arp_index+0x124>)
 80137a0:	4413      	add	r3, r2
 80137a2:	3304      	adds	r3, #4
 80137a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80137a8:	9200      	str	r2, [sp, #0]
 80137aa:	460a      	mov	r2, r1
 80137ac:	68b9      	ldr	r1, [r7, #8]
 80137ae:	68f8      	ldr	r0, [r7, #12]
 80137b0:	f001 fe84 	bl	80154bc <ethernet_output>
 80137b4:	4603      	mov	r3, r0
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3710      	adds	r7, #16
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	200086f4 	.word	0x200086f4
 80137c4:	08018d54 	.word	0x08018d54
 80137c8:	08018ec4 	.word	0x08018ec4
 80137cc:	08018dcc 	.word	0x08018dcc

080137d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b08a      	sub	sp, #40	; 0x28
 80137d4:	af02      	add	r7, sp, #8
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d106      	bne.n	80137f4 <etharp_output+0x24>
 80137e6:	4b73      	ldr	r3, [pc, #460]	; (80139b4 <etharp_output+0x1e4>)
 80137e8:	f240 321e 	movw	r2, #798	; 0x31e
 80137ec:	4972      	ldr	r1, [pc, #456]	; (80139b8 <etharp_output+0x1e8>)
 80137ee:	4873      	ldr	r0, [pc, #460]	; (80139bc <etharp_output+0x1ec>)
 80137f0:	f001 fef6 	bl	80155e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d106      	bne.n	8013808 <etharp_output+0x38>
 80137fa:	4b6e      	ldr	r3, [pc, #440]	; (80139b4 <etharp_output+0x1e4>)
 80137fc:	f240 321f 	movw	r2, #799	; 0x31f
 8013800:	496f      	ldr	r1, [pc, #444]	; (80139c0 <etharp_output+0x1f0>)
 8013802:	486e      	ldr	r0, [pc, #440]	; (80139bc <etharp_output+0x1ec>)
 8013804:	f001 feec 	bl	80155e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d106      	bne.n	801381c <etharp_output+0x4c>
 801380e:	4b69      	ldr	r3, [pc, #420]	; (80139b4 <etharp_output+0x1e4>)
 8013810:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013814:	496b      	ldr	r1, [pc, #428]	; (80139c4 <etharp_output+0x1f4>)
 8013816:	4869      	ldr	r0, [pc, #420]	; (80139bc <etharp_output+0x1ec>)
 8013818:	f001 fee2 	bl	80155e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	68f9      	ldr	r1, [r7, #12]
 8013822:	4618      	mov	r0, r3
 8013824:	f000 ff3c 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 8013828:	4603      	mov	r3, r0
 801382a:	2b00      	cmp	r3, #0
 801382c:	d002      	beq.n	8013834 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801382e:	4b66      	ldr	r3, [pc, #408]	; (80139c8 <etharp_output+0x1f8>)
 8013830:	61fb      	str	r3, [r7, #28]
 8013832:	e0af      	b.n	8013994 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801383c:	2be0      	cmp	r3, #224	; 0xe0
 801383e:	d118      	bne.n	8013872 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013840:	2301      	movs	r3, #1
 8013842:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013844:	2300      	movs	r3, #0
 8013846:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013848:	235e      	movs	r3, #94	; 0x5e
 801384a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	3301      	adds	r3, #1
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013856:	b2db      	uxtb	r3, r3
 8013858:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	3302      	adds	r3, #2
 801385e:	781b      	ldrb	r3, [r3, #0]
 8013860:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	3303      	adds	r3, #3
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801386a:	f107 0310 	add.w	r3, r7, #16
 801386e:	61fb      	str	r3, [r7, #28]
 8013870:	e090      	b.n	8013994 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681a      	ldr	r2, [r3, #0]
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	3304      	adds	r3, #4
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	405a      	eors	r2, r3
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	3308      	adds	r3, #8
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	4013      	ands	r3, r2
 8013886:	2b00      	cmp	r3, #0
 8013888:	d012      	beq.n	80138b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013890:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013894:	4293      	cmp	r3, r2
 8013896:	d00b      	beq.n	80138b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	330c      	adds	r3, #12
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d003      	beq.n	80138aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	330c      	adds	r3, #12
 80138a6:	61bb      	str	r3, [r7, #24]
 80138a8:	e002      	b.n	80138b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80138aa:	f06f 0303 	mvn.w	r3, #3
 80138ae:	e07d      	b.n	80139ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80138b0:	4b46      	ldr	r3, [pc, #280]	; (80139cc <etharp_output+0x1fc>)
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	4619      	mov	r1, r3
 80138b6:	4a46      	ldr	r2, [pc, #280]	; (80139d0 <etharp_output+0x200>)
 80138b8:	460b      	mov	r3, r1
 80138ba:	005b      	lsls	r3, r3, #1
 80138bc:	440b      	add	r3, r1
 80138be:	00db      	lsls	r3, r3, #3
 80138c0:	4413      	add	r3, r2
 80138c2:	3314      	adds	r3, #20
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	d925      	bls.n	8013916 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80138ca:	4b40      	ldr	r3, [pc, #256]	; (80139cc <etharp_output+0x1fc>)
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	4619      	mov	r1, r3
 80138d0:	4a3f      	ldr	r2, [pc, #252]	; (80139d0 <etharp_output+0x200>)
 80138d2:	460b      	mov	r3, r1
 80138d4:	005b      	lsls	r3, r3, #1
 80138d6:	440b      	add	r3, r1
 80138d8:	00db      	lsls	r3, r3, #3
 80138da:	4413      	add	r3, r2
 80138dc:	3308      	adds	r3, #8
 80138de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80138e0:	68fa      	ldr	r2, [r7, #12]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d117      	bne.n	8013916 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	4b38      	ldr	r3, [pc, #224]	; (80139cc <etharp_output+0x1fc>)
 80138ec:	781b      	ldrb	r3, [r3, #0]
 80138ee:	4618      	mov	r0, r3
 80138f0:	4937      	ldr	r1, [pc, #220]	; (80139d0 <etharp_output+0x200>)
 80138f2:	4603      	mov	r3, r0
 80138f4:	005b      	lsls	r3, r3, #1
 80138f6:	4403      	add	r3, r0
 80138f8:	00db      	lsls	r3, r3, #3
 80138fa:	440b      	add	r3, r1
 80138fc:	3304      	adds	r3, #4
 80138fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013900:	429a      	cmp	r2, r3
 8013902:	d108      	bne.n	8013916 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013904:	4b31      	ldr	r3, [pc, #196]	; (80139cc <etharp_output+0x1fc>)
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	461a      	mov	r2, r3
 801390a:	68b9      	ldr	r1, [r7, #8]
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f7ff fec5 	bl	801369c <etharp_output_to_arp_index>
 8013912:	4603      	mov	r3, r0
 8013914:	e04a      	b.n	80139ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013916:	2300      	movs	r3, #0
 8013918:	75fb      	strb	r3, [r7, #23]
 801391a:	e031      	b.n	8013980 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801391c:	7dfa      	ldrb	r2, [r7, #23]
 801391e:	492c      	ldr	r1, [pc, #176]	; (80139d0 <etharp_output+0x200>)
 8013920:	4613      	mov	r3, r2
 8013922:	005b      	lsls	r3, r3, #1
 8013924:	4413      	add	r3, r2
 8013926:	00db      	lsls	r3, r3, #3
 8013928:	440b      	add	r3, r1
 801392a:	3314      	adds	r3, #20
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	2b01      	cmp	r3, #1
 8013930:	d923      	bls.n	801397a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013932:	7dfa      	ldrb	r2, [r7, #23]
 8013934:	4926      	ldr	r1, [pc, #152]	; (80139d0 <etharp_output+0x200>)
 8013936:	4613      	mov	r3, r2
 8013938:	005b      	lsls	r3, r3, #1
 801393a:	4413      	add	r3, r2
 801393c:	00db      	lsls	r3, r3, #3
 801393e:	440b      	add	r3, r1
 8013940:	3308      	adds	r3, #8
 8013942:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013944:	68fa      	ldr	r2, [r7, #12]
 8013946:	429a      	cmp	r2, r3
 8013948:	d117      	bne.n	801397a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801394a:	69bb      	ldr	r3, [r7, #24]
 801394c:	6819      	ldr	r1, [r3, #0]
 801394e:	7dfa      	ldrb	r2, [r7, #23]
 8013950:	481f      	ldr	r0, [pc, #124]	; (80139d0 <etharp_output+0x200>)
 8013952:	4613      	mov	r3, r2
 8013954:	005b      	lsls	r3, r3, #1
 8013956:	4413      	add	r3, r2
 8013958:	00db      	lsls	r3, r3, #3
 801395a:	4403      	add	r3, r0
 801395c:	3304      	adds	r3, #4
 801395e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013960:	4299      	cmp	r1, r3
 8013962:	d10a      	bne.n	801397a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013964:	4a19      	ldr	r2, [pc, #100]	; (80139cc <etharp_output+0x1fc>)
 8013966:	7dfb      	ldrb	r3, [r7, #23]
 8013968:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801396a:	7dfb      	ldrb	r3, [r7, #23]
 801396c:	461a      	mov	r2, r3
 801396e:	68b9      	ldr	r1, [r7, #8]
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f7ff fe93 	bl	801369c <etharp_output_to_arp_index>
 8013976:	4603      	mov	r3, r0
 8013978:	e018      	b.n	80139ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801397a:	7dfb      	ldrb	r3, [r7, #23]
 801397c:	3301      	adds	r3, #1
 801397e:	75fb      	strb	r3, [r7, #23]
 8013980:	7dfb      	ldrb	r3, [r7, #23]
 8013982:	2b09      	cmp	r3, #9
 8013984:	d9ca      	bls.n	801391c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013986:	68ba      	ldr	r2, [r7, #8]
 8013988:	69b9      	ldr	r1, [r7, #24]
 801398a:	68f8      	ldr	r0, [r7, #12]
 801398c:	f000 f822 	bl	80139d4 <etharp_query>
 8013990:	4603      	mov	r3, r0
 8013992:	e00b      	b.n	80139ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801399a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801399e:	9300      	str	r3, [sp, #0]
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	68b9      	ldr	r1, [r7, #8]
 80139a4:	68f8      	ldr	r0, [r7, #12]
 80139a6:	f001 fd89 	bl	80154bc <ethernet_output>
 80139aa:	4603      	mov	r3, r0
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3720      	adds	r7, #32
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}
 80139b4:	08018d54 	.word	0x08018d54
 80139b8:	08018ea4 	.word	0x08018ea4
 80139bc:	08018dcc 	.word	0x08018dcc
 80139c0:	08018ef4 	.word	0x08018ef4
 80139c4:	08018e94 	.word	0x08018e94
 80139c8:	0801952c 	.word	0x0801952c
 80139cc:	200087e4 	.word	0x200087e4
 80139d0:	200086f4 	.word	0x200086f4

080139d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b08c      	sub	sp, #48	; 0x30
 80139d8:	af02      	add	r7, sp, #8
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	332a      	adds	r3, #42	; 0x2a
 80139e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80139e6:	23ff      	movs	r3, #255	; 0xff
 80139e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80139ec:	2300      	movs	r3, #0
 80139ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	68f9      	ldr	r1, [r7, #12]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 fe52 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d10c      	bne.n	8013a1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013a0a:	2be0      	cmp	r3, #224	; 0xe0
 8013a0c:	d006      	beq.n	8013a1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d003      	beq.n	8013a1c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d102      	bne.n	8013a22 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013a1c:	f06f 030f 	mvn.w	r3, #15
 8013a20:	e101      	b.n	8013c26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013a22:	68fa      	ldr	r2, [r7, #12]
 8013a24:	2101      	movs	r1, #1
 8013a26:	68b8      	ldr	r0, [r7, #8]
 8013a28:	f7ff fb5c 	bl	80130e4 <etharp_find_entry>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013a30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	da02      	bge.n	8013a3e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013a38:	8a7b      	ldrh	r3, [r7, #18]
 8013a3a:	b25b      	sxtb	r3, r3
 8013a3c:	e0f3      	b.n	8013c26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013a3e:	8a7b      	ldrh	r3, [r7, #18]
 8013a40:	2b7e      	cmp	r3, #126	; 0x7e
 8013a42:	d906      	bls.n	8013a52 <etharp_query+0x7e>
 8013a44:	4b7a      	ldr	r3, [pc, #488]	; (8013c30 <etharp_query+0x25c>)
 8013a46:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013a4a:	497a      	ldr	r1, [pc, #488]	; (8013c34 <etharp_query+0x260>)
 8013a4c:	487a      	ldr	r0, [pc, #488]	; (8013c38 <etharp_query+0x264>)
 8013a4e:	f001 fdc7 	bl	80155e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013a52:	8a7b      	ldrh	r3, [r7, #18]
 8013a54:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013a56:	7c7a      	ldrb	r2, [r7, #17]
 8013a58:	4978      	ldr	r1, [pc, #480]	; (8013c3c <etharp_query+0x268>)
 8013a5a:	4613      	mov	r3, r2
 8013a5c:	005b      	lsls	r3, r3, #1
 8013a5e:	4413      	add	r3, r2
 8013a60:	00db      	lsls	r3, r3, #3
 8013a62:	440b      	add	r3, r1
 8013a64:	3314      	adds	r3, #20
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d115      	bne.n	8013a98 <etharp_query+0xc4>
    is_new_entry = 1;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013a70:	7c7a      	ldrb	r2, [r7, #17]
 8013a72:	4972      	ldr	r1, [pc, #456]	; (8013c3c <etharp_query+0x268>)
 8013a74:	4613      	mov	r3, r2
 8013a76:	005b      	lsls	r3, r3, #1
 8013a78:	4413      	add	r3, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	440b      	add	r3, r1
 8013a7e:	3314      	adds	r3, #20
 8013a80:	2201      	movs	r2, #1
 8013a82:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013a84:	7c7a      	ldrb	r2, [r7, #17]
 8013a86:	496d      	ldr	r1, [pc, #436]	; (8013c3c <etharp_query+0x268>)
 8013a88:	4613      	mov	r3, r2
 8013a8a:	005b      	lsls	r3, r3, #1
 8013a8c:	4413      	add	r3, r2
 8013a8e:	00db      	lsls	r3, r3, #3
 8013a90:	440b      	add	r3, r1
 8013a92:	3308      	adds	r3, #8
 8013a94:	68fa      	ldr	r2, [r7, #12]
 8013a96:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013a98:	7c7a      	ldrb	r2, [r7, #17]
 8013a9a:	4968      	ldr	r1, [pc, #416]	; (8013c3c <etharp_query+0x268>)
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	005b      	lsls	r3, r3, #1
 8013aa0:	4413      	add	r3, r2
 8013aa2:	00db      	lsls	r3, r3, #3
 8013aa4:	440b      	add	r3, r1
 8013aa6:	3314      	adds	r3, #20
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	2b01      	cmp	r3, #1
 8013aac:	d011      	beq.n	8013ad2 <etharp_query+0xfe>
 8013aae:	7c7a      	ldrb	r2, [r7, #17]
 8013ab0:	4962      	ldr	r1, [pc, #392]	; (8013c3c <etharp_query+0x268>)
 8013ab2:	4613      	mov	r3, r2
 8013ab4:	005b      	lsls	r3, r3, #1
 8013ab6:	4413      	add	r3, r2
 8013ab8:	00db      	lsls	r3, r3, #3
 8013aba:	440b      	add	r3, r1
 8013abc:	3314      	adds	r3, #20
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d806      	bhi.n	8013ad2 <etharp_query+0xfe>
 8013ac4:	4b5a      	ldr	r3, [pc, #360]	; (8013c30 <etharp_query+0x25c>)
 8013ac6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013aca:	495d      	ldr	r1, [pc, #372]	; (8013c40 <etharp_query+0x26c>)
 8013acc:	485a      	ldr	r0, [pc, #360]	; (8013c38 <etharp_query+0x264>)
 8013ace:	f001 fd87 	bl	80155e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013ad2:	6a3b      	ldr	r3, [r7, #32]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d102      	bne.n	8013ade <etharp_query+0x10a>
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d10c      	bne.n	8013af8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013ade:	68b9      	ldr	r1, [r7, #8]
 8013ae0:	68f8      	ldr	r0, [r7, #12]
 8013ae2:	f000 f963 	bl	8013dac <etharp_request>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d102      	bne.n	8013af8 <etharp_query+0x124>
      return result;
 8013af2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013af6:	e096      	b.n	8013c26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d106      	bne.n	8013b0c <etharp_query+0x138>
 8013afe:	4b4c      	ldr	r3, [pc, #304]	; (8013c30 <etharp_query+0x25c>)
 8013b00:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013b04:	494f      	ldr	r1, [pc, #316]	; (8013c44 <etharp_query+0x270>)
 8013b06:	484c      	ldr	r0, [pc, #304]	; (8013c38 <etharp_query+0x264>)
 8013b08:	f001 fd6a 	bl	80155e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013b0c:	7c7a      	ldrb	r2, [r7, #17]
 8013b0e:	494b      	ldr	r1, [pc, #300]	; (8013c3c <etharp_query+0x268>)
 8013b10:	4613      	mov	r3, r2
 8013b12:	005b      	lsls	r3, r3, #1
 8013b14:	4413      	add	r3, r2
 8013b16:	00db      	lsls	r3, r3, #3
 8013b18:	440b      	add	r3, r1
 8013b1a:	3314      	adds	r3, #20
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	2b01      	cmp	r3, #1
 8013b20:	d917      	bls.n	8013b52 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013b22:	4a49      	ldr	r2, [pc, #292]	; (8013c48 <etharp_query+0x274>)
 8013b24:	7c7b      	ldrb	r3, [r7, #17]
 8013b26:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013b28:	7c7a      	ldrb	r2, [r7, #17]
 8013b2a:	4613      	mov	r3, r2
 8013b2c:	005b      	lsls	r3, r3, #1
 8013b2e:	4413      	add	r3, r2
 8013b30:	00db      	lsls	r3, r3, #3
 8013b32:	3308      	adds	r3, #8
 8013b34:	4a41      	ldr	r2, [pc, #260]	; (8013c3c <etharp_query+0x268>)
 8013b36:	4413      	add	r3, r2
 8013b38:	3304      	adds	r3, #4
 8013b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013b3e:	9200      	str	r2, [sp, #0]
 8013b40:	697a      	ldr	r2, [r7, #20]
 8013b42:	6879      	ldr	r1, [r7, #4]
 8013b44:	68f8      	ldr	r0, [r7, #12]
 8013b46:	f001 fcb9 	bl	80154bc <ethernet_output>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b50:	e067      	b.n	8013c22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013b52:	7c7a      	ldrb	r2, [r7, #17]
 8013b54:	4939      	ldr	r1, [pc, #228]	; (8013c3c <etharp_query+0x268>)
 8013b56:	4613      	mov	r3, r2
 8013b58:	005b      	lsls	r3, r3, #1
 8013b5a:	4413      	add	r3, r2
 8013b5c:	00db      	lsls	r3, r3, #3
 8013b5e:	440b      	add	r3, r1
 8013b60:	3314      	adds	r3, #20
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d15c      	bne.n	8013c22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013b70:	e01c      	b.n	8013bac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	895a      	ldrh	r2, [r3, #10]
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	891b      	ldrh	r3, [r3, #8]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d10a      	bne.n	8013b94 <etharp_query+0x1c0>
 8013b7e:	69fb      	ldr	r3, [r7, #28]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d006      	beq.n	8013b94 <etharp_query+0x1c0>
 8013b86:	4b2a      	ldr	r3, [pc, #168]	; (8013c30 <etharp_query+0x25c>)
 8013b88:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013b8c:	492f      	ldr	r1, [pc, #188]	; (8013c4c <etharp_query+0x278>)
 8013b8e:	482a      	ldr	r0, [pc, #168]	; (8013c38 <etharp_query+0x264>)
 8013b90:	f001 fd26 	bl	80155e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	7b1b      	ldrb	r3, [r3, #12]
 8013b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <etharp_query+0x1d2>
        copy_needed = 1;
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	61bb      	str	r3, [r7, #24]
        break;
 8013ba4:	e005      	b.n	8013bb2 <etharp_query+0x1de>
      }
      p = p->next;
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d1df      	bne.n	8013b72 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013bb2:	69bb      	ldr	r3, [r7, #24]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d007      	beq.n	8013bc8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013bb8:	687a      	ldr	r2, [r7, #4]
 8013bba:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013bbe:	200e      	movs	r0, #14
 8013bc0:	f7f7 fbd2 	bl	800b368 <pbuf_clone>
 8013bc4:	61f8      	str	r0, [r7, #28]
 8013bc6:	e004      	b.n	8013bd2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013bcc:	69f8      	ldr	r0, [r7, #28]
 8013bce:	f7f7 f9ff 	bl	800afd0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013bd2:	69fb      	ldr	r3, [r7, #28]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d021      	beq.n	8013c1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013bd8:	7c7a      	ldrb	r2, [r7, #17]
 8013bda:	4918      	ldr	r1, [pc, #96]	; (8013c3c <etharp_query+0x268>)
 8013bdc:	4613      	mov	r3, r2
 8013bde:	005b      	lsls	r3, r3, #1
 8013be0:	4413      	add	r3, r2
 8013be2:	00db      	lsls	r3, r3, #3
 8013be4:	440b      	add	r3, r1
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d00a      	beq.n	8013c02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013bec:	7c7a      	ldrb	r2, [r7, #17]
 8013bee:	4913      	ldr	r1, [pc, #76]	; (8013c3c <etharp_query+0x268>)
 8013bf0:	4613      	mov	r3, r2
 8013bf2:	005b      	lsls	r3, r3, #1
 8013bf4:	4413      	add	r3, r2
 8013bf6:	00db      	lsls	r3, r3, #3
 8013bf8:	440b      	add	r3, r1
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7f7 f947 	bl	800ae90 <pbuf_free>
      }
      arp_table[i].q = p;
 8013c02:	7c7a      	ldrb	r2, [r7, #17]
 8013c04:	490d      	ldr	r1, [pc, #52]	; (8013c3c <etharp_query+0x268>)
 8013c06:	4613      	mov	r3, r2
 8013c08:	005b      	lsls	r3, r3, #1
 8013c0a:	4413      	add	r3, r2
 8013c0c:	00db      	lsls	r3, r3, #3
 8013c0e:	440b      	add	r3, r1
 8013c10:	69fa      	ldr	r2, [r7, #28]
 8013c12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013c14:	2300      	movs	r3, #0
 8013c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c1a:	e002      	b.n	8013c22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013c1c:	23ff      	movs	r3, #255	; 0xff
 8013c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013c22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3728      	adds	r7, #40	; 0x28
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	08018d54 	.word	0x08018d54
 8013c34:	08018f00 	.word	0x08018f00
 8013c38:	08018dcc 	.word	0x08018dcc
 8013c3c:	200086f4 	.word	0x200086f4
 8013c40:	08018f10 	.word	0x08018f10
 8013c44:	08018ef4 	.word	0x08018ef4
 8013c48:	200087e4 	.word	0x200087e4
 8013c4c:	08018f38 	.word	0x08018f38

08013c50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b08a      	sub	sp, #40	; 0x28
 8013c54:	af02      	add	r7, sp, #8
 8013c56:	60f8      	str	r0, [r7, #12]
 8013c58:	60b9      	str	r1, [r7, #8]
 8013c5a:	607a      	str	r2, [r7, #4]
 8013c5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d106      	bne.n	8013c76 <etharp_raw+0x26>
 8013c68:	4b3a      	ldr	r3, [pc, #232]	; (8013d54 <etharp_raw+0x104>)
 8013c6a:	f240 4257 	movw	r2, #1111	; 0x457
 8013c6e:	493a      	ldr	r1, [pc, #232]	; (8013d58 <etharp_raw+0x108>)
 8013c70:	483a      	ldr	r0, [pc, #232]	; (8013d5c <etharp_raw+0x10c>)
 8013c72:	f001 fcb5 	bl	80155e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013c76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c7a:	211c      	movs	r1, #28
 8013c7c:	200e      	movs	r0, #14
 8013c7e:	f7f6 fe23 	bl	800a8c8 <pbuf_alloc>
 8013c82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d102      	bne.n	8013c90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c8e:	e05d      	b.n	8013d4c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013c90:	69bb      	ldr	r3, [r7, #24]
 8013c92:	895b      	ldrh	r3, [r3, #10]
 8013c94:	2b1b      	cmp	r3, #27
 8013c96:	d806      	bhi.n	8013ca6 <etharp_raw+0x56>
 8013c98:	4b2e      	ldr	r3, [pc, #184]	; (8013d54 <etharp_raw+0x104>)
 8013c9a:	f240 4262 	movw	r2, #1122	; 0x462
 8013c9e:	4930      	ldr	r1, [pc, #192]	; (8013d60 <etharp_raw+0x110>)
 8013ca0:	482e      	ldr	r0, [pc, #184]	; (8013d5c <etharp_raw+0x10c>)
 8013ca2:	f001 fc9d 	bl	80155e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013ca6:	69bb      	ldr	r3, [r7, #24]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013cac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7f5 fcec 	bl	800968c <lwip_htons>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013cc2:	2b06      	cmp	r3, #6
 8013cc4:	d006      	beq.n	8013cd4 <etharp_raw+0x84>
 8013cc6:	4b23      	ldr	r3, [pc, #140]	; (8013d54 <etharp_raw+0x104>)
 8013cc8:	f240 4269 	movw	r2, #1129	; 0x469
 8013ccc:	4925      	ldr	r1, [pc, #148]	; (8013d64 <etharp_raw+0x114>)
 8013cce:	4823      	ldr	r0, [pc, #140]	; (8013d5c <etharp_raw+0x10c>)
 8013cd0:	f001 fc86 	bl	80155e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	3308      	adds	r3, #8
 8013cd8:	2206      	movs	r2, #6
 8013cda:	6839      	ldr	r1, [r7, #0]
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f001 fc69 	bl	80155b4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	3312      	adds	r3, #18
 8013ce6:	2206      	movs	r2, #6
 8013ce8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013cea:	4618      	mov	r0, r3
 8013cec:	f001 fc62 	bl	80155b4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	330e      	adds	r3, #14
 8013cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cf6:	6812      	ldr	r2, [r2, #0]
 8013cf8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013cfa:	697b      	ldr	r3, [r7, #20]
 8013cfc:	3318      	adds	r3, #24
 8013cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d00:	6812      	ldr	r2, [r2, #0]
 8013d02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	2200      	movs	r2, #0
 8013d08:	701a      	strb	r2, [r3, #0]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	f042 0201 	orr.w	r2, r2, #1
 8013d10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	2200      	movs	r2, #0
 8013d16:	f042 0208 	orr.w	r2, r2, #8
 8013d1a:	709a      	strb	r2, [r3, #2]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	2206      	movs	r2, #6
 8013d24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	2204      	movs	r2, #4
 8013d2a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013d2c:	f640 0306 	movw	r3, #2054	; 0x806
 8013d30:	9300      	str	r3, [sp, #0]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	68ba      	ldr	r2, [r7, #8]
 8013d36:	69b9      	ldr	r1, [r7, #24]
 8013d38:	68f8      	ldr	r0, [r7, #12]
 8013d3a:	f001 fbbf 	bl	80154bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013d3e:	69b8      	ldr	r0, [r7, #24]
 8013d40:	f7f7 f8a6 	bl	800ae90 <pbuf_free>
  p = NULL;
 8013d44:	2300      	movs	r3, #0
 8013d46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013d48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3720      	adds	r7, #32
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	08018d54 	.word	0x08018d54
 8013d58:	08018ea4 	.word	0x08018ea4
 8013d5c:	08018dcc 	.word	0x08018dcc
 8013d60:	08018f54 	.word	0x08018f54
 8013d64:	08018f88 	.word	0x08018f88

08013d68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b088      	sub	sp, #32
 8013d6c:	af04      	add	r7, sp, #16
 8013d6e:	60f8      	str	r0, [r7, #12]
 8013d70:	60b9      	str	r1, [r7, #8]
 8013d72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013d84:	2201      	movs	r2, #1
 8013d86:	9203      	str	r2, [sp, #12]
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	9202      	str	r2, [sp, #8]
 8013d8c:	4a06      	ldr	r2, [pc, #24]	; (8013da8 <etharp_request_dst+0x40>)
 8013d8e:	9201      	str	r2, [sp, #4]
 8013d90:	9300      	str	r3, [sp, #0]
 8013d92:	4603      	mov	r3, r0
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	f7ff ff5a 	bl	8013c50 <etharp_raw>
 8013d9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3710      	adds	r7, #16
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}
 8013da6:	bf00      	nop
 8013da8:	08019534 	.word	0x08019534

08013dac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013db6:	4a05      	ldr	r2, [pc, #20]	; (8013dcc <etharp_request+0x20>)
 8013db8:	6839      	ldr	r1, [r7, #0]
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f7ff ffd4 	bl	8013d68 <etharp_request_dst>
 8013dc0:	4603      	mov	r3, r0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	0801952c 	.word	0x0801952c

08013dd0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b08e      	sub	sp, #56	; 0x38
 8013dd4:	af04      	add	r7, sp, #16
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013dda:	4b87      	ldr	r3, [pc, #540]	; (8013ff8 <icmp_input+0x228>)
 8013ddc:	689b      	ldr	r3, [r3, #8]
 8013dde:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	f003 030f 	and.w	r3, r3, #15
 8013de8:	b2db      	uxtb	r3, r3
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	b2db      	uxtb	r3, r3
 8013dee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013df2:	2b13      	cmp	r3, #19
 8013df4:	f240 80e8 	bls.w	8013fc8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	895b      	ldrh	r3, [r3, #10]
 8013dfc:	2b03      	cmp	r3, #3
 8013dfe:	f240 80e5 	bls.w	8013fcc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013e0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	f000 80d2 	beq.w	8013fba <icmp_input+0x1ea>
 8013e16:	2b08      	cmp	r3, #8
 8013e18:	f040 80d2 	bne.w	8013fc0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013e1c:	4b77      	ldr	r3, [pc, #476]	; (8013ffc <icmp_input+0x22c>)
 8013e1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013e20:	4b75      	ldr	r3, [pc, #468]	; (8013ff8 <icmp_input+0x228>)
 8013e22:	695b      	ldr	r3, [r3, #20]
 8013e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e28:	2be0      	cmp	r3, #224	; 0xe0
 8013e2a:	f000 80d6 	beq.w	8013fda <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013e2e:	4b72      	ldr	r3, [pc, #456]	; (8013ff8 <icmp_input+0x228>)
 8013e30:	695b      	ldr	r3, [r3, #20]
 8013e32:	4a71      	ldr	r2, [pc, #452]	; (8013ff8 <icmp_input+0x228>)
 8013e34:	6812      	ldr	r2, [r2, #0]
 8013e36:	4611      	mov	r1, r2
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f000 fc31 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f040 80cc 	bne.w	8013fde <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	891b      	ldrh	r3, [r3, #8]
 8013e4a:	2b07      	cmp	r3, #7
 8013e4c:	f240 80c0 	bls.w	8013fd0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f7f5 fcb8 	bl	80097c6 <inet_chksum_pbuf>
 8013e56:	4603      	mov	r3, r0
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d003      	beq.n	8013e64 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7f7 f817 	bl	800ae90 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013e62:	e0c5      	b.n	8013ff0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013e64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e66:	330e      	adds	r3, #14
 8013e68:	4619      	mov	r1, r3
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7f6 ff7a 	bl	800ad64 <pbuf_add_header>
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d04b      	beq.n	8013f0e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	891a      	ldrh	r2, [r3, #8]
 8013e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e7c:	4413      	add	r3, r2
 8013e7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	891b      	ldrh	r3, [r3, #8]
 8013e84:	8b7a      	ldrh	r2, [r7, #26]
 8013e86:	429a      	cmp	r2, r3
 8013e88:	f0c0 80ab 	bcc.w	8013fe2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013e8c:	8b7b      	ldrh	r3, [r7, #26]
 8013e8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e92:	4619      	mov	r1, r3
 8013e94:	200e      	movs	r0, #14
 8013e96:	f7f6 fd17 	bl	800a8c8 <pbuf_alloc>
 8013e9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	f000 80a1 	beq.w	8013fe6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	895b      	ldrh	r3, [r3, #10]
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013eac:	3308      	adds	r3, #8
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d203      	bcs.n	8013eba <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013eb2:	6978      	ldr	r0, [r7, #20]
 8013eb4:	f7f6 ffec 	bl	800ae90 <pbuf_free>
          goto icmperr;
 8013eb8:	e096      	b.n	8013fe8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f001 fb76 	bl	80155b4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013eca:	4619      	mov	r1, r3
 8013ecc:	6978      	ldr	r0, [r7, #20]
 8013ece:	f7f6 ff59 	bl	800ad84 <pbuf_remove_header>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d009      	beq.n	8013eec <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013ed8:	4b49      	ldr	r3, [pc, #292]	; (8014000 <icmp_input+0x230>)
 8013eda:	22b6      	movs	r2, #182	; 0xb6
 8013edc:	4949      	ldr	r1, [pc, #292]	; (8014004 <icmp_input+0x234>)
 8013ede:	484a      	ldr	r0, [pc, #296]	; (8014008 <icmp_input+0x238>)
 8013ee0:	f001 fb7e 	bl	80155e0 <iprintf>
          pbuf_free(r);
 8013ee4:	6978      	ldr	r0, [r7, #20]
 8013ee6:	f7f6 ffd3 	bl	800ae90 <pbuf_free>
          goto icmperr;
 8013eea:	e07d      	b.n	8013fe8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013eec:	6879      	ldr	r1, [r7, #4]
 8013eee:	6978      	ldr	r0, [r7, #20]
 8013ef0:	f7f7 f8f6 	bl	800b0e0 <pbuf_copy>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d003      	beq.n	8013f02 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013efa:	6978      	ldr	r0, [r7, #20]
 8013efc:	f7f6 ffc8 	bl	800ae90 <pbuf_free>
          goto icmperr;
 8013f00:	e072      	b.n	8013fe8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8013f02:	6878      	ldr	r0, [r7, #4]
 8013f04:	f7f6 ffc4 	bl	800ae90 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	607b      	str	r3, [r7, #4]
 8013f0c:	e00f      	b.n	8013f2e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f10:	330e      	adds	r3, #14
 8013f12:	4619      	mov	r1, r3
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f7f6 ff35 	bl	800ad84 <pbuf_remove_header>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d006      	beq.n	8013f2e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013f20:	4b37      	ldr	r3, [pc, #220]	; (8014000 <icmp_input+0x230>)
 8013f22:	22c7      	movs	r2, #199	; 0xc7
 8013f24:	4939      	ldr	r1, [pc, #228]	; (801400c <icmp_input+0x23c>)
 8013f26:	4838      	ldr	r0, [pc, #224]	; (8014008 <icmp_input+0x238>)
 8013f28:	f001 fb5a 	bl	80155e0 <iprintf>
          goto icmperr;
 8013f2c:	e05c      	b.n	8013fe8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013f34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f36:	4619      	mov	r1, r3
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f7f6 ff13 	bl	800ad64 <pbuf_add_header>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d13c      	bne.n	8013fbe <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	681a      	ldr	r2, [r3, #0]
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013f52:	4b29      	ldr	r3, [pc, #164]	; (8013ff8 <icmp_input+0x228>)
 8013f54:	691a      	ldr	r2, [r3, #16]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	885b      	ldrh	r3, [r3, #2]
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013f6a:	4293      	cmp	r3, r2
 8013f6c:	d907      	bls.n	8013f7e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	885b      	ldrh	r3, [r3, #2]
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	3309      	adds	r3, #9
 8013f76:	b29a      	uxth	r2, r3
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	805a      	strh	r2, [r3, #2]
 8013f7c:	e006      	b.n	8013f8c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013f7e:	693b      	ldr	r3, [r7, #16]
 8013f80:	885b      	ldrh	r3, [r3, #2]
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	3308      	adds	r3, #8
 8013f86:	b29a      	uxth	r2, r3
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	22ff      	movs	r2, #255	; 0xff
 8013f90:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2200      	movs	r2, #0
 8013f96:	729a      	strb	r2, [r3, #10]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	9302      	str	r3, [sp, #8]
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	9301      	str	r3, [sp, #4]
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	9300      	str	r3, [sp, #0]
 8013fa8:	23ff      	movs	r3, #255	; 0xff
 8013faa:	2200      	movs	r2, #0
 8013fac:	69f9      	ldr	r1, [r7, #28]
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f000 fa9e 	bl	80144f0 <ip4_output_if>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013fb8:	e001      	b.n	8013fbe <icmp_input+0x1ee>
      break;
 8013fba:	bf00      	nop
 8013fbc:	e000      	b.n	8013fc0 <icmp_input+0x1f0>
      break;
 8013fbe:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f7f6 ff65 	bl	800ae90 <pbuf_free>
  return;
 8013fc6:	e013      	b.n	8013ff0 <icmp_input+0x220>
    goto lenerr;
 8013fc8:	bf00      	nop
 8013fca:	e002      	b.n	8013fd2 <icmp_input+0x202>
    goto lenerr;
 8013fcc:	bf00      	nop
 8013fce:	e000      	b.n	8013fd2 <icmp_input+0x202>
        goto lenerr;
 8013fd0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f7f6 ff5c 	bl	800ae90 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013fd8:	e00a      	b.n	8013ff0 <icmp_input+0x220>
        goto icmperr;
 8013fda:	bf00      	nop
 8013fdc:	e004      	b.n	8013fe8 <icmp_input+0x218>
        goto icmperr;
 8013fde:	bf00      	nop
 8013fe0:	e002      	b.n	8013fe8 <icmp_input+0x218>
          goto icmperr;
 8013fe2:	bf00      	nop
 8013fe4:	e000      	b.n	8013fe8 <icmp_input+0x218>
          goto icmperr;
 8013fe6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f7f6 ff51 	bl	800ae90 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013fee:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013ff0:	3728      	adds	r7, #40	; 0x28
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	20005724 	.word	0x20005724
 8013ffc:	20005738 	.word	0x20005738
 8014000:	08018fcc 	.word	0x08018fcc
 8014004:	08019004 	.word	0x08019004
 8014008:	0801903c 	.word	0x0801903c
 801400c:	08019064 	.word	0x08019064

08014010 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	460b      	mov	r3, r1
 801401a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801401c:	78fb      	ldrb	r3, [r7, #3]
 801401e:	461a      	mov	r2, r3
 8014020:	2103      	movs	r1, #3
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	f000 f814 	bl	8014050 <icmp_send_response>
}
 8014028:	bf00      	nop
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	460b      	mov	r3, r1
 801403a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801403c:	78fb      	ldrb	r3, [r7, #3]
 801403e:	461a      	mov	r2, r3
 8014040:	210b      	movs	r1, #11
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f000 f804 	bl	8014050 <icmp_send_response>
}
 8014048:	bf00      	nop
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b08c      	sub	sp, #48	; 0x30
 8014054:	af04      	add	r7, sp, #16
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	460b      	mov	r3, r1
 801405a:	70fb      	strb	r3, [r7, #3]
 801405c:	4613      	mov	r3, r2
 801405e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014060:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014064:	2124      	movs	r1, #36	; 0x24
 8014066:	2022      	movs	r0, #34	; 0x22
 8014068:	f7f6 fc2e 	bl	800a8c8 <pbuf_alloc>
 801406c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801406e:	69fb      	ldr	r3, [r7, #28]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d056      	beq.n	8014122 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	895b      	ldrh	r3, [r3, #10]
 8014078:	2b23      	cmp	r3, #35	; 0x23
 801407a:	d806      	bhi.n	801408a <icmp_send_response+0x3a>
 801407c:	4b2b      	ldr	r3, [pc, #172]	; (801412c <icmp_send_response+0xdc>)
 801407e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014082:	492b      	ldr	r1, [pc, #172]	; (8014130 <icmp_send_response+0xe0>)
 8014084:	482b      	ldr	r0, [pc, #172]	; (8014134 <icmp_send_response+0xe4>)
 8014086:	f001 faab 	bl	80155e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014090:	69fb      	ldr	r3, [r7, #28]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	78fa      	ldrb	r2, [r7, #3]
 801409a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	78ba      	ldrb	r2, [r7, #2]
 80140a0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	2200      	movs	r2, #0
 80140a6:	711a      	strb	r2, [r3, #4]
 80140a8:	2200      	movs	r2, #0
 80140aa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	2200      	movs	r2, #0
 80140b0:	719a      	strb	r2, [r3, #6]
 80140b2:	2200      	movs	r2, #0
 80140b4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80140b6:	69fb      	ldr	r3, [r7, #28]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	f103 0008 	add.w	r0, r3, #8
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	685b      	ldr	r3, [r3, #4]
 80140c2:	221c      	movs	r2, #28
 80140c4:	4619      	mov	r1, r3
 80140c6:	f001 fa75 	bl	80155b4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80140d0:	f107 030c 	add.w	r3, r7, #12
 80140d4:	4618      	mov	r0, r3
 80140d6:	f000 f82f 	bl	8014138 <ip4_route>
 80140da:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d01b      	beq.n	801411a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80140e2:	697b      	ldr	r3, [r7, #20]
 80140e4:	2200      	movs	r2, #0
 80140e6:	709a      	strb	r2, [r3, #2]
 80140e8:	2200      	movs	r2, #0
 80140ea:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	895b      	ldrh	r3, [r3, #10]
 80140f0:	4619      	mov	r1, r3
 80140f2:	6978      	ldr	r0, [r7, #20]
 80140f4:	f7f5 fb55 	bl	80097a2 <inet_chksum>
 80140f8:	4603      	mov	r3, r0
 80140fa:	461a      	mov	r2, r3
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014100:	f107 020c 	add.w	r2, r7, #12
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	9302      	str	r3, [sp, #8]
 8014108:	2301      	movs	r3, #1
 801410a:	9301      	str	r3, [sp, #4]
 801410c:	2300      	movs	r3, #0
 801410e:	9300      	str	r3, [sp, #0]
 8014110:	23ff      	movs	r3, #255	; 0xff
 8014112:	2100      	movs	r1, #0
 8014114:	69f8      	ldr	r0, [r7, #28]
 8014116:	f000 f9eb 	bl	80144f0 <ip4_output_if>
  }
  pbuf_free(q);
 801411a:	69f8      	ldr	r0, [r7, #28]
 801411c:	f7f6 feb8 	bl	800ae90 <pbuf_free>
 8014120:	e000      	b.n	8014124 <icmp_send_response+0xd4>
    return;
 8014122:	bf00      	nop
}
 8014124:	3720      	adds	r7, #32
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	08018fcc 	.word	0x08018fcc
 8014130:	08019098 	.word	0x08019098
 8014134:	0801903c 	.word	0x0801903c

08014138 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014138:	b480      	push	{r7}
 801413a:	b085      	sub	sp, #20
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014140:	4b33      	ldr	r3, [pc, #204]	; (8014210 <ip4_route+0xd8>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	60fb      	str	r3, [r7, #12]
 8014146:	e036      	b.n	80141b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801414e:	f003 0301 	and.w	r3, r3, #1
 8014152:	b2db      	uxtb	r3, r3
 8014154:	2b00      	cmp	r3, #0
 8014156:	d02b      	beq.n	80141b0 <ip4_route+0x78>
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801415e:	089b      	lsrs	r3, r3, #2
 8014160:	f003 0301 	and.w	r3, r3, #1
 8014164:	b2db      	uxtb	r3, r3
 8014166:	2b00      	cmp	r3, #0
 8014168:	d022      	beq.n	80141b0 <ip4_route+0x78>
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	3304      	adds	r3, #4
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d01d      	beq.n	80141b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	3304      	adds	r3, #4
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	405a      	eors	r2, r3
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	3308      	adds	r3, #8
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	4013      	ands	r3, r2
 8014188:	2b00      	cmp	r3, #0
 801418a:	d101      	bne.n	8014190 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	e038      	b.n	8014202 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014196:	f003 0302 	and.w	r3, r3, #2
 801419a:	2b00      	cmp	r3, #0
 801419c:	d108      	bne.n	80141b0 <ip4_route+0x78>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681a      	ldr	r2, [r3, #0]
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	330c      	adds	r3, #12
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d101      	bne.n	80141b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	e028      	b.n	8014202 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	60fb      	str	r3, [r7, #12]
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d1c5      	bne.n	8014148 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80141bc:	4b15      	ldr	r3, [pc, #84]	; (8014214 <ip4_route+0xdc>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d01a      	beq.n	80141fa <ip4_route+0xc2>
 80141c4:	4b13      	ldr	r3, [pc, #76]	; (8014214 <ip4_route+0xdc>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141cc:	f003 0301 	and.w	r3, r3, #1
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d012      	beq.n	80141fa <ip4_route+0xc2>
 80141d4:	4b0f      	ldr	r3, [pc, #60]	; (8014214 <ip4_route+0xdc>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141dc:	f003 0304 	and.w	r3, r3, #4
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d00a      	beq.n	80141fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80141e4:	4b0b      	ldr	r3, [pc, #44]	; (8014214 <ip4_route+0xdc>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	3304      	adds	r3, #4
 80141ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d004      	beq.n	80141fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	b2db      	uxtb	r3, r3
 80141f6:	2b7f      	cmp	r3, #127	; 0x7f
 80141f8:	d101      	bne.n	80141fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80141fa:	2300      	movs	r3, #0
 80141fc:	e001      	b.n	8014202 <ip4_route+0xca>
  }

  return netif_default;
 80141fe:	4b05      	ldr	r3, [pc, #20]	; (8014214 <ip4_route+0xdc>)
 8014200:	681b      	ldr	r3, [r3, #0]
}
 8014202:	4618      	mov	r0, r3
 8014204:	3714      	adds	r7, #20
 8014206:	46bd      	mov	sp, r7
 8014208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420c:	4770      	bx	lr
 801420e:	bf00      	nop
 8014210:	20008654 	.word	0x20008654
 8014214:	20008658 	.word	0x20008658

08014218 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014226:	f003 0301 	and.w	r3, r3, #1
 801422a:	b2db      	uxtb	r3, r3
 801422c:	2b00      	cmp	r3, #0
 801422e:	d016      	beq.n	801425e <ip4_input_accept+0x46>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	3304      	adds	r3, #4
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d011      	beq.n	801425e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801423a:	4b0b      	ldr	r3, [pc, #44]	; (8014268 <ip4_input_accept+0x50>)
 801423c:	695a      	ldr	r2, [r3, #20]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	3304      	adds	r3, #4
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	429a      	cmp	r2, r3
 8014246:	d008      	beq.n	801425a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014248:	4b07      	ldr	r3, [pc, #28]	; (8014268 <ip4_input_accept+0x50>)
 801424a:	695b      	ldr	r3, [r3, #20]
 801424c:	6879      	ldr	r1, [r7, #4]
 801424e:	4618      	mov	r0, r3
 8014250:	f000 fa26 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 8014254:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014256:	2b00      	cmp	r3, #0
 8014258:	d001      	beq.n	801425e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801425a:	2301      	movs	r3, #1
 801425c:	e000      	b.n	8014260 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801425e:	2300      	movs	r3, #0
}
 8014260:	4618      	mov	r0, r3
 8014262:	3708      	adds	r7, #8
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}
 8014268:	20005724 	.word	0x20005724

0801426c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b088      	sub	sp, #32
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014276:	2301      	movs	r3, #1
 8014278:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	685b      	ldr	r3, [r3, #4]
 801427e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	091b      	lsrs	r3, r3, #4
 8014286:	b2db      	uxtb	r3, r3
 8014288:	2b04      	cmp	r3, #4
 801428a:	d004      	beq.n	8014296 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7f6 fdff 	bl	800ae90 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014292:	2300      	movs	r3, #0
 8014294:	e123      	b.n	80144de <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	f003 030f 	and.w	r3, r3, #15
 801429e:	b2db      	uxtb	r3, r3
 80142a0:	009b      	lsls	r3, r3, #2
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	885b      	ldrh	r3, [r3, #2]
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7f5 f9ed 	bl	800968c <lwip_htons>
 80142b2:	4603      	mov	r3, r0
 80142b4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	891b      	ldrh	r3, [r3, #8]
 80142ba:	8a3a      	ldrh	r2, [r7, #16]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d204      	bcs.n	80142ca <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80142c0:	8a3b      	ldrh	r3, [r7, #16]
 80142c2:	4619      	mov	r1, r3
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f7f6 fc5d 	bl	800ab84 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	895b      	ldrh	r3, [r3, #10]
 80142ce:	8a7a      	ldrh	r2, [r7, #18]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d807      	bhi.n	80142e4 <ip4_input+0x78>
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	891b      	ldrh	r3, [r3, #8]
 80142d8:	8a3a      	ldrh	r2, [r7, #16]
 80142da:	429a      	cmp	r2, r3
 80142dc:	d802      	bhi.n	80142e4 <ip4_input+0x78>
 80142de:	8a7b      	ldrh	r3, [r7, #18]
 80142e0:	2b13      	cmp	r3, #19
 80142e2:	d804      	bhi.n	80142ee <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f7f6 fdd3 	bl	800ae90 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80142ea:	2300      	movs	r3, #0
 80142ec:	e0f7      	b.n	80144de <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	691b      	ldr	r3, [r3, #16]
 80142f2:	4a7d      	ldr	r2, [pc, #500]	; (80144e8 <ip4_input+0x27c>)
 80142f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80142f6:	69fb      	ldr	r3, [r7, #28]
 80142f8:	68db      	ldr	r3, [r3, #12]
 80142fa:	4a7b      	ldr	r2, [pc, #492]	; (80144e8 <ip4_input+0x27c>)
 80142fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80142fe:	4b7a      	ldr	r3, [pc, #488]	; (80144e8 <ip4_input+0x27c>)
 8014300:	695b      	ldr	r3, [r3, #20]
 8014302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014306:	2be0      	cmp	r3, #224	; 0xe0
 8014308:	d112      	bne.n	8014330 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014310:	f003 0301 	and.w	r3, r3, #1
 8014314:	b2db      	uxtb	r3, r3
 8014316:	2b00      	cmp	r3, #0
 8014318:	d007      	beq.n	801432a <ip4_input+0xbe>
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	3304      	adds	r3, #4
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d002      	beq.n	801432a <ip4_input+0xbe>
      netif = inp;
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	61bb      	str	r3, [r7, #24]
 8014328:	e02a      	b.n	8014380 <ip4_input+0x114>
    } else {
      netif = NULL;
 801432a:	2300      	movs	r3, #0
 801432c:	61bb      	str	r3, [r7, #24]
 801432e:	e027      	b.n	8014380 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014330:	6838      	ldr	r0, [r7, #0]
 8014332:	f7ff ff71 	bl	8014218 <ip4_input_accept>
 8014336:	4603      	mov	r3, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	d002      	beq.n	8014342 <ip4_input+0xd6>
      netif = inp;
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	61bb      	str	r3, [r7, #24]
 8014340:	e01e      	b.n	8014380 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014342:	2300      	movs	r3, #0
 8014344:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014346:	4b68      	ldr	r3, [pc, #416]	; (80144e8 <ip4_input+0x27c>)
 8014348:	695b      	ldr	r3, [r3, #20]
 801434a:	b2db      	uxtb	r3, r3
 801434c:	2b7f      	cmp	r3, #127	; 0x7f
 801434e:	d017      	beq.n	8014380 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014350:	4b66      	ldr	r3, [pc, #408]	; (80144ec <ip4_input+0x280>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	61bb      	str	r3, [r7, #24]
 8014356:	e00e      	b.n	8014376 <ip4_input+0x10a>
          if (netif == inp) {
 8014358:	69ba      	ldr	r2, [r7, #24]
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	429a      	cmp	r2, r3
 801435e:	d006      	beq.n	801436e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014360:	69b8      	ldr	r0, [r7, #24]
 8014362:	f7ff ff59 	bl	8014218 <ip4_input_accept>
 8014366:	4603      	mov	r3, r0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d108      	bne.n	801437e <ip4_input+0x112>
 801436c:	e000      	b.n	8014370 <ip4_input+0x104>
            continue;
 801436e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	61bb      	str	r3, [r7, #24]
 8014376:	69bb      	ldr	r3, [r7, #24]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d1ed      	bne.n	8014358 <ip4_input+0xec>
 801437c:	e000      	b.n	8014380 <ip4_input+0x114>
            break;
 801437e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8014380:	69bb      	ldr	r3, [r7, #24]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d111      	bne.n	80143aa <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014386:	69fb      	ldr	r3, [r7, #28]
 8014388:	7a5b      	ldrb	r3, [r3, #9]
 801438a:	2b11      	cmp	r3, #17
 801438c:	d10d      	bne.n	80143aa <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801438e:	8a7b      	ldrh	r3, [r7, #18]
 8014390:	69fa      	ldr	r2, [r7, #28]
 8014392:	4413      	add	r3, r2
 8014394:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	885b      	ldrh	r3, [r3, #2]
 801439a:	b29b      	uxth	r3, r3
 801439c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80143a0:	d103      	bne.n	80143aa <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80143a6:	2300      	movs	r3, #0
 80143a8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d017      	beq.n	80143e0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80143b0:	4b4d      	ldr	r3, [pc, #308]	; (80144e8 <ip4_input+0x27c>)
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d013      	beq.n	80143e0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80143b8:	4b4b      	ldr	r3, [pc, #300]	; (80144e8 <ip4_input+0x27c>)
 80143ba:	691b      	ldr	r3, [r3, #16]
 80143bc:	6839      	ldr	r1, [r7, #0]
 80143be:	4618      	mov	r0, r3
 80143c0:	f000 f96e 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 80143c4:	4603      	mov	r3, r0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d105      	bne.n	80143d6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80143ca:	4b47      	ldr	r3, [pc, #284]	; (80144e8 <ip4_input+0x27c>)
 80143cc:	691b      	ldr	r3, [r3, #16]
 80143ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80143d2:	2be0      	cmp	r3, #224	; 0xe0
 80143d4:	d104      	bne.n	80143e0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f7f6 fd5a 	bl	800ae90 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80143dc:	2300      	movs	r3, #0
 80143de:	e07e      	b.n	80144de <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d104      	bne.n	80143f0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7f6 fd52 	bl	800ae90 <pbuf_free>
    return ERR_OK;
 80143ec:	2300      	movs	r3, #0
 80143ee:	e076      	b.n	80144de <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80143f0:	69fb      	ldr	r3, [r7, #28]
 80143f2:	88db      	ldrh	r3, [r3, #6]
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	461a      	mov	r2, r3
 80143f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80143fc:	4013      	ands	r3, r2
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d00b      	beq.n	801441a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f000 fc92 	bl	8014d2c <ip4_reass>
 8014408:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d101      	bne.n	8014414 <ip4_input+0x1a8>
      return ERR_OK;
 8014410:	2300      	movs	r3, #0
 8014412:	e064      	b.n	80144de <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801441a:	4a33      	ldr	r2, [pc, #204]	; (80144e8 <ip4_input+0x27c>)
 801441c:	69bb      	ldr	r3, [r7, #24]
 801441e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014420:	4a31      	ldr	r2, [pc, #196]	; (80144e8 <ip4_input+0x27c>)
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014426:	4a30      	ldr	r2, [pc, #192]	; (80144e8 <ip4_input+0x27c>)
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	781b      	ldrb	r3, [r3, #0]
 8014430:	f003 030f 	and.w	r3, r3, #15
 8014434:	b2db      	uxtb	r3, r3
 8014436:	009b      	lsls	r3, r3, #2
 8014438:	b2db      	uxtb	r3, r3
 801443a:	b29a      	uxth	r2, r3
 801443c:	4b2a      	ldr	r3, [pc, #168]	; (80144e8 <ip4_input+0x27c>)
 801443e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014440:	8a7b      	ldrh	r3, [r7, #18]
 8014442:	4619      	mov	r1, r3
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f7f6 fc9d 	bl	800ad84 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	7a5b      	ldrb	r3, [r3, #9]
 801444e:	2b11      	cmp	r3, #17
 8014450:	d006      	beq.n	8014460 <ip4_input+0x1f4>
 8014452:	2b11      	cmp	r3, #17
 8014454:	dc13      	bgt.n	801447e <ip4_input+0x212>
 8014456:	2b01      	cmp	r3, #1
 8014458:	d00c      	beq.n	8014474 <ip4_input+0x208>
 801445a:	2b06      	cmp	r3, #6
 801445c:	d005      	beq.n	801446a <ip4_input+0x1fe>
 801445e:	e00e      	b.n	801447e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014460:	6839      	ldr	r1, [r7, #0]
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f7fc fac4 	bl	80109f0 <udp_input>
        break;
 8014468:	e026      	b.n	80144b8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801446a:	6839      	ldr	r1, [r7, #0]
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f7f8 fb47 	bl	800cb00 <tcp_input>
        break;
 8014472:	e021      	b.n	80144b8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014474:	6839      	ldr	r1, [r7, #0]
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f7ff fcaa 	bl	8013dd0 <icmp_input>
        break;
 801447c:	e01c      	b.n	80144b8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801447e:	4b1a      	ldr	r3, [pc, #104]	; (80144e8 <ip4_input+0x27c>)
 8014480:	695b      	ldr	r3, [r3, #20]
 8014482:	69b9      	ldr	r1, [r7, #24]
 8014484:	4618      	mov	r0, r3
 8014486:	f000 f90b 	bl	80146a0 <ip4_addr_isbroadcast_u32>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d10f      	bne.n	80144b0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014490:	4b15      	ldr	r3, [pc, #84]	; (80144e8 <ip4_input+0x27c>)
 8014492:	695b      	ldr	r3, [r3, #20]
 8014494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014498:	2be0      	cmp	r3, #224	; 0xe0
 801449a:	d009      	beq.n	80144b0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801449c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80144a0:	4619      	mov	r1, r3
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7f6 fce1 	bl	800ae6a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80144a8:	2102      	movs	r1, #2
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f7ff fdb0 	bl	8014010 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f7f6 fced 	bl	800ae90 <pbuf_free>
        break;
 80144b6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80144b8:	4b0b      	ldr	r3, [pc, #44]	; (80144e8 <ip4_input+0x27c>)
 80144ba:	2200      	movs	r2, #0
 80144bc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80144be:	4b0a      	ldr	r3, [pc, #40]	; (80144e8 <ip4_input+0x27c>)
 80144c0:	2200      	movs	r2, #0
 80144c2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80144c4:	4b08      	ldr	r3, [pc, #32]	; (80144e8 <ip4_input+0x27c>)
 80144c6:	2200      	movs	r2, #0
 80144c8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80144ca:	4b07      	ldr	r3, [pc, #28]	; (80144e8 <ip4_input+0x27c>)
 80144cc:	2200      	movs	r2, #0
 80144ce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80144d0:	4b05      	ldr	r3, [pc, #20]	; (80144e8 <ip4_input+0x27c>)
 80144d2:	2200      	movs	r2, #0
 80144d4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80144d6:	4b04      	ldr	r3, [pc, #16]	; (80144e8 <ip4_input+0x27c>)
 80144d8:	2200      	movs	r2, #0
 80144da:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80144dc:	2300      	movs	r3, #0
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3720      	adds	r7, #32
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	20005724 	.word	0x20005724
 80144ec:	20008654 	.word	0x20008654

080144f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b08a      	sub	sp, #40	; 0x28
 80144f4:	af04      	add	r7, sp, #16
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	607a      	str	r2, [r7, #4]
 80144fc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d009      	beq.n	801451c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d003      	beq.n	8014516 <ip4_output_if+0x26>
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d102      	bne.n	801451c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014518:	3304      	adds	r3, #4
 801451a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801451c:	78fa      	ldrb	r2, [r7, #3]
 801451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014520:	9302      	str	r3, [sp, #8]
 8014522:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014526:	9301      	str	r3, [sp, #4]
 8014528:	f897 3020 	ldrb.w	r3, [r7, #32]
 801452c:	9300      	str	r3, [sp, #0]
 801452e:	4613      	mov	r3, r2
 8014530:	687a      	ldr	r2, [r7, #4]
 8014532:	6979      	ldr	r1, [r7, #20]
 8014534:	68f8      	ldr	r0, [r7, #12]
 8014536:	f000 f805 	bl	8014544 <ip4_output_if_src>
 801453a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801453c:	4618      	mov	r0, r3
 801453e:	3718      	adds	r7, #24
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b088      	sub	sp, #32
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
 8014550:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	7b9b      	ldrb	r3, [r3, #14]
 8014556:	2b01      	cmp	r3, #1
 8014558:	d006      	beq.n	8014568 <ip4_output_if_src+0x24>
 801455a:	4b4b      	ldr	r3, [pc, #300]	; (8014688 <ip4_output_if_src+0x144>)
 801455c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014560:	494a      	ldr	r1, [pc, #296]	; (801468c <ip4_output_if_src+0x148>)
 8014562:	484b      	ldr	r0, [pc, #300]	; (8014690 <ip4_output_if_src+0x14c>)
 8014564:	f001 f83c 	bl	80155e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d060      	beq.n	8014630 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801456e:	2314      	movs	r3, #20
 8014570:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014572:	2114      	movs	r1, #20
 8014574:	68f8      	ldr	r0, [r7, #12]
 8014576:	f7f6 fbf5 	bl	800ad64 <pbuf_add_header>
 801457a:	4603      	mov	r3, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	d002      	beq.n	8014586 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014580:	f06f 0301 	mvn.w	r3, #1
 8014584:	e07c      	b.n	8014680 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	685b      	ldr	r3, [r3, #4]
 801458a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	895b      	ldrh	r3, [r3, #10]
 8014590:	2b13      	cmp	r3, #19
 8014592:	d806      	bhi.n	80145a2 <ip4_output_if_src+0x5e>
 8014594:	4b3c      	ldr	r3, [pc, #240]	; (8014688 <ip4_output_if_src+0x144>)
 8014596:	f44f 7262 	mov.w	r2, #904	; 0x388
 801459a:	493e      	ldr	r1, [pc, #248]	; (8014694 <ip4_output_if_src+0x150>)
 801459c:	483c      	ldr	r0, [pc, #240]	; (8014690 <ip4_output_if_src+0x14c>)
 801459e:	f001 f81f 	bl	80155e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	78fa      	ldrb	r2, [r7, #3]
 80145a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80145a8:	69fb      	ldr	r3, [r7, #28]
 80145aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80145ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681a      	ldr	r2, [r3, #0]
 80145b4:	69fb      	ldr	r3, [r7, #28]
 80145b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80145b8:	8b7b      	ldrh	r3, [r7, #26]
 80145ba:	089b      	lsrs	r3, r3, #2
 80145bc:	b29b      	uxth	r3, r3
 80145be:	b2db      	uxtb	r3, r3
 80145c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145c4:	b2da      	uxtb	r2, r3
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80145ca:	69fb      	ldr	r3, [r7, #28]
 80145cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80145d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	891b      	ldrh	r3, [r3, #8]
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7f5 f858 	bl	800968c <lwip_htons>
 80145dc:	4603      	mov	r3, r0
 80145de:	461a      	mov	r2, r3
 80145e0:	69fb      	ldr	r3, [r7, #28]
 80145e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80145e4:	69fb      	ldr	r3, [r7, #28]
 80145e6:	2200      	movs	r2, #0
 80145e8:	719a      	strb	r2, [r3, #6]
 80145ea:	2200      	movs	r2, #0
 80145ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80145ee:	4b2a      	ldr	r3, [pc, #168]	; (8014698 <ip4_output_if_src+0x154>)
 80145f0:	881b      	ldrh	r3, [r3, #0]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7f5 f84a 	bl	800968c <lwip_htons>
 80145f8:	4603      	mov	r3, r0
 80145fa:	461a      	mov	r2, r3
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014600:	4b25      	ldr	r3, [pc, #148]	; (8014698 <ip4_output_if_src+0x154>)
 8014602:	881b      	ldrh	r3, [r3, #0]
 8014604:	3301      	adds	r3, #1
 8014606:	b29a      	uxth	r2, r3
 8014608:	4b23      	ldr	r3, [pc, #140]	; (8014698 <ip4_output_if_src+0x154>)
 801460a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d104      	bne.n	801461c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014612:	4b22      	ldr	r3, [pc, #136]	; (801469c <ip4_output_if_src+0x158>)
 8014614:	681a      	ldr	r2, [r3, #0]
 8014616:	69fb      	ldr	r3, [r7, #28]
 8014618:	60da      	str	r2, [r3, #12]
 801461a:	e003      	b.n	8014624 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	681a      	ldr	r2, [r3, #0]
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	2200      	movs	r2, #0
 8014628:	729a      	strb	r2, [r3, #10]
 801462a:	2200      	movs	r2, #0
 801462c:	72da      	strb	r2, [r3, #11]
 801462e:	e00f      	b.n	8014650 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	895b      	ldrh	r3, [r3, #10]
 8014634:	2b13      	cmp	r3, #19
 8014636:	d802      	bhi.n	801463e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014638:	f06f 0301 	mvn.w	r3, #1
 801463c:	e020      	b.n	8014680 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	685b      	ldr	r3, [r3, #4]
 8014642:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	691b      	ldr	r3, [r3, #16]
 8014648:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801464a:	f107 0314 	add.w	r3, r7, #20
 801464e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014654:	2b00      	cmp	r3, #0
 8014656:	d00c      	beq.n	8014672 <ip4_output_if_src+0x12e>
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	891a      	ldrh	r2, [r3, #8]
 801465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014660:	429a      	cmp	r2, r3
 8014662:	d906      	bls.n	8014672 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	f000 fd53 	bl	8015114 <ip4_frag>
 801466e:	4603      	mov	r3, r0
 8014670:	e006      	b.n	8014680 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014674:	695b      	ldr	r3, [r3, #20]
 8014676:	687a      	ldr	r2, [r7, #4]
 8014678:	68f9      	ldr	r1, [r7, #12]
 801467a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801467c:	4798      	blx	r3
 801467e:	4603      	mov	r3, r0
}
 8014680:	4618      	mov	r0, r3
 8014682:	3720      	adds	r7, #32
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	080190c4 	.word	0x080190c4
 801468c:	080190f8 	.word	0x080190f8
 8014690:	08019104 	.word	0x08019104
 8014694:	0801912c 	.word	0x0801912c
 8014698:	200087e6 	.word	0x200087e6
 801469c:	08019524 	.word	0x08019524

080146a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b085      	sub	sp, #20
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
 80146a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146b4:	d002      	beq.n	80146bc <ip4_addr_isbroadcast_u32+0x1c>
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d101      	bne.n	80146c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80146bc:	2301      	movs	r3, #1
 80146be:	e02a      	b.n	8014716 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80146c6:	f003 0302 	and.w	r3, r3, #2
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d101      	bne.n	80146d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80146ce:	2300      	movs	r3, #0
 80146d0:	e021      	b.n	8014716 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	3304      	adds	r3, #4
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d101      	bne.n	80146e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80146de:	2300      	movs	r3, #0
 80146e0:	e019      	b.n	8014716 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80146e2:	68fa      	ldr	r2, [r7, #12]
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	3304      	adds	r3, #4
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	405a      	eors	r2, r3
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	3308      	adds	r3, #8
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	4013      	ands	r3, r2
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d10d      	bne.n	8014714 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	3308      	adds	r3, #8
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	43da      	mvns	r2, r3
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	3308      	adds	r3, #8
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801470c:	429a      	cmp	r2, r3
 801470e:	d101      	bne.n	8014714 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014710:	2301      	movs	r3, #1
 8014712:	e000      	b.n	8014716 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014714:	2300      	movs	r3, #0
  }
}
 8014716:	4618      	mov	r0, r3
 8014718:	3714      	adds	r7, #20
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr
	...

08014724 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801472a:	2300      	movs	r3, #0
 801472c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801472e:	4b12      	ldr	r3, [pc, #72]	; (8014778 <ip_reass_tmr+0x54>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014734:	e018      	b.n	8014768 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	7fdb      	ldrb	r3, [r3, #31]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d00b      	beq.n	8014756 <ip_reass_tmr+0x32>
      r->timer--;
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	7fdb      	ldrb	r3, [r3, #31]
 8014742:	3b01      	subs	r3, #1
 8014744:	b2da      	uxtb	r2, r3
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	60fb      	str	r3, [r7, #12]
 8014754:	e008      	b.n	8014768 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014760:	68b9      	ldr	r1, [r7, #8]
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f000 f80a 	bl	801477c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d1e3      	bne.n	8014736 <ip_reass_tmr+0x12>
    }
  }
}
 801476e:	bf00      	nop
 8014770:	bf00      	nop
 8014772:	3710      	adds	r7, #16
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}
 8014778:	200087e8 	.word	0x200087e8

0801477c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b088      	sub	sp, #32
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014786:	2300      	movs	r3, #0
 8014788:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801478a:	683a      	ldr	r2, [r7, #0]
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	429a      	cmp	r2, r3
 8014790:	d105      	bne.n	801479e <ip_reass_free_complete_datagram+0x22>
 8014792:	4b45      	ldr	r3, [pc, #276]	; (80148a8 <ip_reass_free_complete_datagram+0x12c>)
 8014794:	22ab      	movs	r2, #171	; 0xab
 8014796:	4945      	ldr	r1, [pc, #276]	; (80148ac <ip_reass_free_complete_datagram+0x130>)
 8014798:	4845      	ldr	r0, [pc, #276]	; (80148b0 <ip_reass_free_complete_datagram+0x134>)
 801479a:	f000 ff21 	bl	80155e0 <iprintf>
  if (prev != NULL) {
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d00a      	beq.n	80147ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d005      	beq.n	80147ba <ip_reass_free_complete_datagram+0x3e>
 80147ae:	4b3e      	ldr	r3, [pc, #248]	; (80148a8 <ip_reass_free_complete_datagram+0x12c>)
 80147b0:	22ad      	movs	r2, #173	; 0xad
 80147b2:	4940      	ldr	r1, [pc, #256]	; (80148b4 <ip_reass_free_complete_datagram+0x138>)
 80147b4:	483e      	ldr	r0, [pc, #248]	; (80148b0 <ip_reass_free_complete_datagram+0x134>)
 80147b6:	f000 ff13 	bl	80155e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	889b      	ldrh	r3, [r3, #4]
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d12a      	bne.n	8014822 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80147da:	69bb      	ldr	r3, [r7, #24]
 80147dc:	6858      	ldr	r0, [r3, #4]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	3308      	adds	r3, #8
 80147e2:	2214      	movs	r2, #20
 80147e4:	4619      	mov	r1, r3
 80147e6:	f000 fee5 	bl	80155b4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80147ea:	2101      	movs	r1, #1
 80147ec:	69b8      	ldr	r0, [r7, #24]
 80147ee:	f7ff fc1f 	bl	8014030 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80147f2:	69b8      	ldr	r0, [r7, #24]
 80147f4:	f7f6 fbd4 	bl	800afa0 <pbuf_clen>
 80147f8:	4603      	mov	r3, r0
 80147fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80147fc:	8bfa      	ldrh	r2, [r7, #30]
 80147fe:	8a7b      	ldrh	r3, [r7, #18]
 8014800:	4413      	add	r3, r2
 8014802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014806:	db05      	blt.n	8014814 <ip_reass_free_complete_datagram+0x98>
 8014808:	4b27      	ldr	r3, [pc, #156]	; (80148a8 <ip_reass_free_complete_datagram+0x12c>)
 801480a:	22bc      	movs	r2, #188	; 0xbc
 801480c:	492a      	ldr	r1, [pc, #168]	; (80148b8 <ip_reass_free_complete_datagram+0x13c>)
 801480e:	4828      	ldr	r0, [pc, #160]	; (80148b0 <ip_reass_free_complete_datagram+0x134>)
 8014810:	f000 fee6 	bl	80155e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014814:	8bfa      	ldrh	r2, [r7, #30]
 8014816:	8a7b      	ldrh	r3, [r7, #18]
 8014818:	4413      	add	r3, r2
 801481a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801481c:	69b8      	ldr	r0, [r7, #24]
 801481e:	f7f6 fb37 	bl	800ae90 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014828:	e01f      	b.n	801486a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801482a:	69bb      	ldr	r3, [r7, #24]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801483a:	68f8      	ldr	r0, [r7, #12]
 801483c:	f7f6 fbb0 	bl	800afa0 <pbuf_clen>
 8014840:	4603      	mov	r3, r0
 8014842:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014844:	8bfa      	ldrh	r2, [r7, #30]
 8014846:	8a7b      	ldrh	r3, [r7, #18]
 8014848:	4413      	add	r3, r2
 801484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801484e:	db05      	blt.n	801485c <ip_reass_free_complete_datagram+0xe0>
 8014850:	4b15      	ldr	r3, [pc, #84]	; (80148a8 <ip_reass_free_complete_datagram+0x12c>)
 8014852:	22cc      	movs	r2, #204	; 0xcc
 8014854:	4918      	ldr	r1, [pc, #96]	; (80148b8 <ip_reass_free_complete_datagram+0x13c>)
 8014856:	4816      	ldr	r0, [pc, #88]	; (80148b0 <ip_reass_free_complete_datagram+0x134>)
 8014858:	f000 fec2 	bl	80155e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801485c:	8bfa      	ldrh	r2, [r7, #30]
 801485e:	8a7b      	ldrh	r3, [r7, #18]
 8014860:	4413      	add	r3, r2
 8014862:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	f7f6 fb13 	bl	800ae90 <pbuf_free>
  while (p != NULL) {
 801486a:	69bb      	ldr	r3, [r7, #24]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d1dc      	bne.n	801482a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014870:	6839      	ldr	r1, [r7, #0]
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f000 f8c2 	bl	80149fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014878:	4b10      	ldr	r3, [pc, #64]	; (80148bc <ip_reass_free_complete_datagram+0x140>)
 801487a:	881b      	ldrh	r3, [r3, #0]
 801487c:	8bfa      	ldrh	r2, [r7, #30]
 801487e:	429a      	cmp	r2, r3
 8014880:	d905      	bls.n	801488e <ip_reass_free_complete_datagram+0x112>
 8014882:	4b09      	ldr	r3, [pc, #36]	; (80148a8 <ip_reass_free_complete_datagram+0x12c>)
 8014884:	22d2      	movs	r2, #210	; 0xd2
 8014886:	490e      	ldr	r1, [pc, #56]	; (80148c0 <ip_reass_free_complete_datagram+0x144>)
 8014888:	4809      	ldr	r0, [pc, #36]	; (80148b0 <ip_reass_free_complete_datagram+0x134>)
 801488a:	f000 fea9 	bl	80155e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801488e:	4b0b      	ldr	r3, [pc, #44]	; (80148bc <ip_reass_free_complete_datagram+0x140>)
 8014890:	881a      	ldrh	r2, [r3, #0]
 8014892:	8bfb      	ldrh	r3, [r7, #30]
 8014894:	1ad3      	subs	r3, r2, r3
 8014896:	b29a      	uxth	r2, r3
 8014898:	4b08      	ldr	r3, [pc, #32]	; (80148bc <ip_reass_free_complete_datagram+0x140>)
 801489a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801489c:	8bfb      	ldrh	r3, [r7, #30]
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3720      	adds	r7, #32
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	0801915c 	.word	0x0801915c
 80148ac:	08019198 	.word	0x08019198
 80148b0:	080191a4 	.word	0x080191a4
 80148b4:	080191cc 	.word	0x080191cc
 80148b8:	080191e0 	.word	0x080191e0
 80148bc:	200087ec 	.word	0x200087ec
 80148c0:	08019200 	.word	0x08019200

080148c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b08a      	sub	sp, #40	; 0x28
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
 80148cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80148ce:	2300      	movs	r3, #0
 80148d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80148d2:	2300      	movs	r3, #0
 80148d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80148d6:	2300      	movs	r3, #0
 80148d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80148da:	2300      	movs	r3, #0
 80148dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80148de:	2300      	movs	r3, #0
 80148e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80148e2:	4b28      	ldr	r3, [pc, #160]	; (8014984 <ip_reass_remove_oldest_datagram+0xc0>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80148e8:	e030      	b.n	801494c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80148ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ec:	695a      	ldr	r2, [r3, #20]
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d10c      	bne.n	8014910 <ip_reass_remove_oldest_datagram+0x4c>
 80148f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f8:	699a      	ldr	r2, [r3, #24]
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	691b      	ldr	r3, [r3, #16]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d106      	bne.n	8014910 <ip_reass_remove_oldest_datagram+0x4c>
 8014902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014904:	899a      	ldrh	r2, [r3, #12]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	889b      	ldrh	r3, [r3, #4]
 801490a:	b29b      	uxth	r3, r3
 801490c:	429a      	cmp	r2, r3
 801490e:	d014      	beq.n	801493a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	3301      	adds	r3, #1
 8014914:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014916:	6a3b      	ldr	r3, [r7, #32]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d104      	bne.n	8014926 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801491e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014920:	69fb      	ldr	r3, [r7, #28]
 8014922:	61bb      	str	r3, [r7, #24]
 8014924:	e009      	b.n	801493a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014928:	7fda      	ldrb	r2, [r3, #31]
 801492a:	6a3b      	ldr	r3, [r7, #32]
 801492c:	7fdb      	ldrb	r3, [r3, #31]
 801492e:	429a      	cmp	r2, r3
 8014930:	d803      	bhi.n	801493a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014934:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d001      	beq.n	8014946 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014944:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494e:	2b00      	cmp	r3, #0
 8014950:	d1cb      	bne.n	80148ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014952:	6a3b      	ldr	r3, [r7, #32]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d008      	beq.n	801496a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014958:	69b9      	ldr	r1, [r7, #24]
 801495a:	6a38      	ldr	r0, [r7, #32]
 801495c:	f7ff ff0e 	bl	801477c <ip_reass_free_complete_datagram>
 8014960:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014962:	697a      	ldr	r2, [r7, #20]
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	4413      	add	r3, r2
 8014968:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801496a:	697a      	ldr	r2, [r7, #20]
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	429a      	cmp	r2, r3
 8014970:	da02      	bge.n	8014978 <ip_reass_remove_oldest_datagram+0xb4>
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	2b01      	cmp	r3, #1
 8014976:	dcac      	bgt.n	80148d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014978:	697b      	ldr	r3, [r7, #20]
}
 801497a:	4618      	mov	r0, r3
 801497c:	3728      	adds	r7, #40	; 0x28
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	200087e8 	.word	0x200087e8

08014988 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014992:	2004      	movs	r0, #4
 8014994:	f7f5 fbaa 	bl	800a0ec <memp_malloc>
 8014998:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d110      	bne.n	80149c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80149a0:	6839      	ldr	r1, [r7, #0]
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f7ff ff8e 	bl	80148c4 <ip_reass_remove_oldest_datagram>
 80149a8:	4602      	mov	r2, r0
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	4293      	cmp	r3, r2
 80149ae:	dc03      	bgt.n	80149b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80149b0:	2004      	movs	r0, #4
 80149b2:	f7f5 fb9b 	bl	800a0ec <memp_malloc>
 80149b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d101      	bne.n	80149c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80149be:	2300      	movs	r3, #0
 80149c0:	e016      	b.n	80149f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80149c2:	2220      	movs	r2, #32
 80149c4:	2100      	movs	r1, #0
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	f000 fe02 	bl	80155d0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	220f      	movs	r2, #15
 80149d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80149d2:	4b09      	ldr	r3, [pc, #36]	; (80149f8 <ip_reass_enqueue_new_datagram+0x70>)
 80149d4:	681a      	ldr	r2, [r3, #0]
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80149da:	4a07      	ldr	r2, [pc, #28]	; (80149f8 <ip_reass_enqueue_new_datagram+0x70>)
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	3308      	adds	r3, #8
 80149e4:	2214      	movs	r2, #20
 80149e6:	6879      	ldr	r1, [r7, #4]
 80149e8:	4618      	mov	r0, r3
 80149ea:	f000 fde3 	bl	80155b4 <memcpy>
  return ipr;
 80149ee:	68fb      	ldr	r3, [r7, #12]
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	3710      	adds	r7, #16
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	200087e8 	.word	0x200087e8

080149fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014a06:	4b10      	ldr	r3, [pc, #64]	; (8014a48 <ip_reass_dequeue_datagram+0x4c>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	687a      	ldr	r2, [r7, #4]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d104      	bne.n	8014a1a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4a0c      	ldr	r2, [pc, #48]	; (8014a48 <ip_reass_dequeue_datagram+0x4c>)
 8014a16:	6013      	str	r3, [r2, #0]
 8014a18:	e00d      	b.n	8014a36 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d106      	bne.n	8014a2e <ip_reass_dequeue_datagram+0x32>
 8014a20:	4b0a      	ldr	r3, [pc, #40]	; (8014a4c <ip_reass_dequeue_datagram+0x50>)
 8014a22:	f240 1245 	movw	r2, #325	; 0x145
 8014a26:	490a      	ldr	r1, [pc, #40]	; (8014a50 <ip_reass_dequeue_datagram+0x54>)
 8014a28:	480a      	ldr	r0, [pc, #40]	; (8014a54 <ip_reass_dequeue_datagram+0x58>)
 8014a2a:	f000 fdd9 	bl	80155e0 <iprintf>
    prev->next = ipr->next;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014a36:	6879      	ldr	r1, [r7, #4]
 8014a38:	2004      	movs	r0, #4
 8014a3a:	f7f5 fbc7 	bl	800a1cc <memp_free>
}
 8014a3e:	bf00      	nop
 8014a40:	3708      	adds	r7, #8
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	200087e8 	.word	0x200087e8
 8014a4c:	0801915c 	.word	0x0801915c
 8014a50:	08019224 	.word	0x08019224
 8014a54:	080191a4 	.word	0x080191a4

08014a58 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b08c      	sub	sp, #48	; 0x30
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	60b9      	str	r1, [r7, #8]
 8014a62:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014a64:	2300      	movs	r3, #0
 8014a66:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014a68:	2301      	movs	r3, #1
 8014a6a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014a72:	69fb      	ldr	r3, [r7, #28]
 8014a74:	885b      	ldrh	r3, [r3, #2]
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7f4 fe07 	bl	800968c <lwip_htons>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014a82:	69fb      	ldr	r3, [r7, #28]
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	f003 030f 	and.w	r3, r3, #15
 8014a8a:	b2db      	uxtb	r3, r3
 8014a8c:	009b      	lsls	r3, r3, #2
 8014a8e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014a90:	7e7b      	ldrb	r3, [r7, #25]
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	8b7a      	ldrh	r2, [r7, #26]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d202      	bcs.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a9e:	e135      	b.n	8014d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014aa0:	7e7b      	ldrb	r3, [r7, #25]
 8014aa2:	b29b      	uxth	r3, r3
 8014aa4:	8b7a      	ldrh	r2, [r7, #26]
 8014aa6:	1ad3      	subs	r3, r2, r3
 8014aa8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014aaa:	69fb      	ldr	r3, [r7, #28]
 8014aac:	88db      	ldrh	r3, [r3, #6]
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f4 fdeb 	bl	800968c <lwip_htons>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	00db      	lsls	r3, r3, #3
 8014ac0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aca:	2200      	movs	r2, #0
 8014acc:	701a      	strb	r2, [r3, #0]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	705a      	strb	r2, [r3, #1]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	709a      	strb	r2, [r3, #2]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014adc:	8afa      	ldrh	r2, [r7, #22]
 8014ade:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014ae0:	8afa      	ldrh	r2, [r7, #22]
 8014ae2:	8b7b      	ldrh	r3, [r7, #26]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	b29a      	uxth	r2, r3
 8014ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aee:	88db      	ldrh	r3, [r3, #6]
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	8afa      	ldrh	r2, [r7, #22]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d902      	bls.n	8014afe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014af8:	f04f 33ff 	mov.w	r3, #4294967295
 8014afc:	e106      	b.n	8014d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	627b      	str	r3, [r7, #36]	; 0x24
 8014b04:	e068      	b.n	8014bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b0e:	889b      	ldrh	r3, [r3, #4]
 8014b10:	b29a      	uxth	r2, r3
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	889b      	ldrh	r3, [r3, #4]
 8014b16:	b29b      	uxth	r3, r3
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d235      	bcs.n	8014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b20:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d020      	beq.n	8014b6a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b2a:	889b      	ldrh	r3, [r3, #4]
 8014b2c:	b29a      	uxth	r2, r3
 8014b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b30:	88db      	ldrh	r3, [r3, #6]
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d307      	bcc.n	8014b48 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b3a:	88db      	ldrh	r3, [r3, #6]
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	693b      	ldr	r3, [r7, #16]
 8014b40:	889b      	ldrh	r3, [r3, #4]
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d902      	bls.n	8014b4e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014b48:	f04f 33ff 	mov.w	r3, #4294967295
 8014b4c:	e0de      	b.n	8014d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b50:	68ba      	ldr	r2, [r7, #8]
 8014b52:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b56:	88db      	ldrh	r3, [r3, #6]
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b5c:	889b      	ldrh	r3, [r3, #4]
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d03d      	beq.n	8014be0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014b64:	2300      	movs	r3, #0
 8014b66:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014b68:	e03a      	b.n	8014be0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b6c:	88db      	ldrh	r3, [r3, #6]
 8014b6e:	b29a      	uxth	r2, r3
 8014b70:	693b      	ldr	r3, [r7, #16]
 8014b72:	889b      	ldrh	r3, [r3, #4]
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d902      	bls.n	8014b80 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b7e:	e0c5      	b.n	8014d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	605a      	str	r2, [r3, #4]
      break;
 8014b86:	e02b      	b.n	8014be0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b8a:	889b      	ldrh	r3, [r3, #4]
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	693b      	ldr	r3, [r7, #16]
 8014b90:	889b      	ldrh	r3, [r3, #4]
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d102      	bne.n	8014b9e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014b98:	f04f 33ff 	mov.w	r3, #4294967295
 8014b9c:	e0b6      	b.n	8014d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba0:	889b      	ldrh	r3, [r3, #4]
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	693b      	ldr	r3, [r7, #16]
 8014ba6:	88db      	ldrh	r3, [r3, #6]
 8014ba8:	b29b      	uxth	r3, r3
 8014baa:	429a      	cmp	r2, r3
 8014bac:	d202      	bcs.n	8014bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014bae:	f04f 33ff 	mov.w	r3, #4294967295
 8014bb2:	e0ab      	b.n	8014d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d009      	beq.n	8014bce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbc:	88db      	ldrh	r3, [r3, #6]
 8014bbe:	b29a      	uxth	r2, r3
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	889b      	ldrh	r3, [r3, #4]
 8014bc4:	b29b      	uxth	r3, r3
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d001      	beq.n	8014bce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014bd4:	693b      	ldr	r3, [r7, #16]
 8014bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d193      	bne.n	8014b06 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014bde:	e000      	b.n	8014be2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014be0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d12d      	bne.n	8014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d01c      	beq.n	8014c28 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf0:	88db      	ldrh	r3, [r3, #6]
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf6:	889b      	ldrh	r3, [r3, #4]
 8014bf8:	b29b      	uxth	r3, r3
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d906      	bls.n	8014c0c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014bfe:	4b45      	ldr	r3, [pc, #276]	; (8014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014c00:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014c04:	4944      	ldr	r1, [pc, #272]	; (8014d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014c06:	4845      	ldr	r0, [pc, #276]	; (8014d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014c08:	f000 fcea 	bl	80155e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c0e:	68ba      	ldr	r2, [r7, #8]
 8014c10:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c14:	88db      	ldrh	r3, [r3, #6]
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c1a:	889b      	ldrh	r3, [r3, #4]
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	d010      	beq.n	8014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014c22:	2300      	movs	r3, #0
 8014c24:	623b      	str	r3, [r7, #32]
 8014c26:	e00d      	b.n	8014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d006      	beq.n	8014c3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014c30:	4b38      	ldr	r3, [pc, #224]	; (8014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014c32:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014c36:	493a      	ldr	r1, [pc, #232]	; (8014d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014c38:	4838      	ldr	r0, [pc, #224]	; (8014d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014c3a:	f000 fcd1 	bl	80155e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	68ba      	ldr	r2, [r7, #8]
 8014c42:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d105      	bne.n	8014c56 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	7f9b      	ldrb	r3, [r3, #30]
 8014c4e:	f003 0301 	and.w	r3, r3, #1
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d059      	beq.n	8014d0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014c56:	6a3b      	ldr	r3, [r7, #32]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d04f      	beq.n	8014cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d006      	beq.n	8014c72 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	685b      	ldr	r3, [r3, #4]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	889b      	ldrh	r3, [r3, #4]
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d002      	beq.n	8014c78 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014c72:	2300      	movs	r3, #0
 8014c74:	623b      	str	r3, [r7, #32]
 8014c76:	e041      	b.n	8014cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c7a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014c82:	e012      	b.n	8014caa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c86:	685b      	ldr	r3, [r3, #4]
 8014c88:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c8c:	88db      	ldrh	r3, [r3, #6]
 8014c8e:	b29a      	uxth	r2, r3
 8014c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c92:	889b      	ldrh	r3, [r3, #4]
 8014c94:	b29b      	uxth	r3, r3
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d002      	beq.n	8014ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	623b      	str	r3, [r7, #32]
            break;
 8014c9e:	e007      	b.n	8014cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ca2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1e9      	bne.n	8014c84 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014cb0:	6a3b      	ldr	r3, [r7, #32]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d022      	beq.n	8014cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d106      	bne.n	8014ccc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014cbe:	4b15      	ldr	r3, [pc, #84]	; (8014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014cc0:	f240 12df 	movw	r2, #479	; 0x1df
 8014cc4:	4917      	ldr	r1, [pc, #92]	; (8014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014cc6:	4815      	ldr	r0, [pc, #84]	; (8014d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014cc8:	f000 fc8a 	bl	80155e0 <iprintf>
          LWIP_ASSERT("sanity check",
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d106      	bne.n	8014ce6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014cd8:	4b0e      	ldr	r3, [pc, #56]	; (8014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014cda:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014cde:	4911      	ldr	r1, [pc, #68]	; (8014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014ce0:	480e      	ldr	r0, [pc, #56]	; (8014d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014ce2:	f000 fc7d 	bl	80155e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d006      	beq.n	8014cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014cee:	4b09      	ldr	r3, [pc, #36]	; (8014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014cf0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014cf4:	490c      	ldr	r1, [pc, #48]	; (8014d28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014cf6:	4809      	ldr	r0, [pc, #36]	; (8014d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014cf8:	f000 fc72 	bl	80155e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014cfc:	6a3b      	ldr	r3, [r7, #32]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	bf14      	ite	ne
 8014d02:	2301      	movne	r3, #1
 8014d04:	2300      	moveq	r3, #0
 8014d06:	b2db      	uxtb	r3, r3
 8014d08:	e000      	b.n	8014d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014d0a:	2300      	movs	r3, #0
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3730      	adds	r7, #48	; 0x30
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	0801915c 	.word	0x0801915c
 8014d18:	08019240 	.word	0x08019240
 8014d1c:	080191a4 	.word	0x080191a4
 8014d20:	08019260 	.word	0x08019260
 8014d24:	08019298 	.word	0x08019298
 8014d28:	080192a8 	.word	0x080192a8

08014d2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b08e      	sub	sp, #56	; 0x38
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	f003 030f 	and.w	r3, r3, #15
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	b2db      	uxtb	r3, r3
 8014d48:	2b14      	cmp	r3, #20
 8014d4a:	f040 8171 	bne.w	8015030 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d50:	88db      	ldrh	r3, [r3, #6]
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7f4 fc99 	bl	800968c <lwip_htons>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014d60:	b29b      	uxth	r3, r3
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d68:	885b      	ldrh	r3, [r3, #2]
 8014d6a:	b29b      	uxth	r3, r3
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7f4 fc8d 	bl	800968c <lwip_htons>
 8014d72:	4603      	mov	r3, r0
 8014d74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	f003 030f 	and.w	r3, r3, #15
 8014d7e:	b2db      	uxtb	r3, r3
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	f0c0 8150 	bcc.w	8015034 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014d9c:	1ad3      	subs	r3, r2, r3
 8014d9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7f6 f8fd 	bl	800afa0 <pbuf_clen>
 8014da6:	4603      	mov	r3, r0
 8014da8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014daa:	4b8c      	ldr	r3, [pc, #560]	; (8014fdc <ip4_reass+0x2b0>)
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	461a      	mov	r2, r3
 8014db0:	8c3b      	ldrh	r3, [r7, #32]
 8014db2:	4413      	add	r3, r2
 8014db4:	2b0a      	cmp	r3, #10
 8014db6:	dd10      	ble.n	8014dda <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014db8:	8c3b      	ldrh	r3, [r7, #32]
 8014dba:	4619      	mov	r1, r3
 8014dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014dbe:	f7ff fd81 	bl	80148c4 <ip_reass_remove_oldest_datagram>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	f000 8137 	beq.w	8015038 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014dca:	4b84      	ldr	r3, [pc, #528]	; (8014fdc <ip4_reass+0x2b0>)
 8014dcc:	881b      	ldrh	r3, [r3, #0]
 8014dce:	461a      	mov	r2, r3
 8014dd0:	8c3b      	ldrh	r3, [r7, #32]
 8014dd2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014dd4:	2b0a      	cmp	r3, #10
 8014dd6:	f300 812f 	bgt.w	8015038 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014dda:	4b81      	ldr	r3, [pc, #516]	; (8014fe0 <ip4_reass+0x2b4>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	633b      	str	r3, [r7, #48]	; 0x30
 8014de0:	e015      	b.n	8014e0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de4:	695a      	ldr	r2, [r3, #20]
 8014de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de8:	68db      	ldr	r3, [r3, #12]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d10c      	bne.n	8014e08 <ip4_reass+0xdc>
 8014dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df0:	699a      	ldr	r2, [r3, #24]
 8014df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df4:	691b      	ldr	r3, [r3, #16]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d106      	bne.n	8014e08 <ip4_reass+0xdc>
 8014dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dfc:	899a      	ldrh	r2, [r3, #12]
 8014dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e00:	889b      	ldrh	r3, [r3, #4]
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d006      	beq.n	8014e16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8014e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d1e6      	bne.n	8014de2 <ip4_reass+0xb6>
 8014e14:	e000      	b.n	8014e18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014e16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d109      	bne.n	8014e32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014e1e:	8c3b      	ldrh	r3, [r7, #32]
 8014e20:	4619      	mov	r1, r3
 8014e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e24:	f7ff fdb0 	bl	8014988 <ip_reass_enqueue_new_datagram>
 8014e28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d11c      	bne.n	8014e6a <ip4_reass+0x13e>
      goto nullreturn;
 8014e30:	e105      	b.n	801503e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e34:	88db      	ldrh	r3, [r3, #6]
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7f4 fc27 	bl	800968c <lwip_htons>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d110      	bne.n	8014e6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4a:	89db      	ldrh	r3, [r3, #14]
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7f4 fc1d 	bl	800968c <lwip_htons>
 8014e52:	4603      	mov	r3, r0
 8014e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d006      	beq.n	8014e6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e5e:	3308      	adds	r3, #8
 8014e60:	2214      	movs	r2, #20
 8014e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014e64:	4618      	mov	r0, r3
 8014e66:	f000 fba5 	bl	80155b4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e6c:	88db      	ldrh	r3, [r3, #6]
 8014e6e:	b29b      	uxth	r3, r3
 8014e70:	f003 0320 	and.w	r3, r3, #32
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	bf0c      	ite	eq
 8014e78:	2301      	moveq	r3, #1
 8014e7a:	2300      	movne	r3, #0
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014e80:	69fb      	ldr	r3, [r7, #28]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d00e      	beq.n	8014ea4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014e86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014e8a:	4413      	add	r3, r2
 8014e8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014e8e:	8b7a      	ldrh	r2, [r7, #26]
 8014e90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014e92:	429a      	cmp	r2, r3
 8014e94:	f0c0 80a0 	bcc.w	8014fd8 <ip4_reass+0x2ac>
 8014e98:	8b7b      	ldrh	r3, [r7, #26]
 8014e9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	f200 809a 	bhi.w	8014fd8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014ea4:	69fa      	ldr	r2, [r7, #28]
 8014ea6:	6879      	ldr	r1, [r7, #4]
 8014ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014eaa:	f7ff fdd5 	bl	8014a58 <ip_reass_chain_frag_into_datagram_and_validate>
 8014eae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eb6:	f000 809b 	beq.w	8014ff0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014eba:	4b48      	ldr	r3, [pc, #288]	; (8014fdc <ip4_reass+0x2b0>)
 8014ebc:	881a      	ldrh	r2, [r3, #0]
 8014ebe:	8c3b      	ldrh	r3, [r7, #32]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	4b45      	ldr	r3, [pc, #276]	; (8014fdc <ip4_reass+0x2b0>)
 8014ec6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014ec8:	69fb      	ldr	r3, [r7, #28]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d00d      	beq.n	8014eea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014ece:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ed2:	4413      	add	r3, r2
 8014ed4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed8:	8a7a      	ldrh	r2, [r7, #18]
 8014eda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ede:	7f9b      	ldrb	r3, [r3, #30]
 8014ee0:	f043 0301 	orr.w	r3, r3, #1
 8014ee4:	b2da      	uxtb	r2, r3
 8014ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	2b01      	cmp	r3, #1
 8014eee:	d171      	bne.n	8014fd4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef2:	8b9b      	ldrh	r3, [r3, #28]
 8014ef4:	3314      	adds	r3, #20
 8014ef6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	685b      	ldr	r3, [r3, #4]
 8014f08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f0c:	3308      	adds	r3, #8
 8014f0e:	2214      	movs	r2, #20
 8014f10:	4619      	mov	r1, r3
 8014f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f14:	f000 fb4e 	bl	80155b4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014f18:	8a3b      	ldrh	r3, [r7, #16]
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f4 fbb6 	bl	800968c <lwip_htons>
 8014f20:	4603      	mov	r3, r0
 8014f22:	461a      	mov	r2, r3
 8014f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	719a      	strb	r2, [r3, #6]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f34:	2200      	movs	r2, #0
 8014f36:	729a      	strb	r2, [r3, #10]
 8014f38:	2200      	movs	r2, #0
 8014f3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014f42:	e00d      	b.n	8014f60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f46:	685b      	ldr	r3, [r3, #4]
 8014f48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014f4a:	2114      	movs	r1, #20
 8014f4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014f4e:	f7f5 ff19 	bl	800ad84 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014f52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f7f6 f85d 	bl	800b014 <pbuf_cat>
      r = iprh->next_pbuf;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d1ee      	bne.n	8014f44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014f66:	4b1e      	ldr	r3, [pc, #120]	; (8014fe0 <ip4_reass+0x2b4>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d102      	bne.n	8014f76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014f70:	2300      	movs	r3, #0
 8014f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f74:	e010      	b.n	8014f98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014f76:	4b1a      	ldr	r3, [pc, #104]	; (8014fe0 <ip4_reass+0x2b4>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f7c:	e007      	b.n	8014f8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f84:	429a      	cmp	r2, r3
 8014f86:	d006      	beq.n	8014f96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d1f4      	bne.n	8014f7e <ip4_reass+0x252>
 8014f94:	e000      	b.n	8014f98 <ip4_reass+0x26c>
          break;
 8014f96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014f98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f9c:	f7ff fd2e 	bl	80149fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f7f5 fffd 	bl	800afa0 <pbuf_clen>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014faa:	4b0c      	ldr	r3, [pc, #48]	; (8014fdc <ip4_reass+0x2b0>)
 8014fac:	881b      	ldrh	r3, [r3, #0]
 8014fae:	8c3a      	ldrh	r2, [r7, #32]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d906      	bls.n	8014fc2 <ip4_reass+0x296>
 8014fb4:	4b0b      	ldr	r3, [pc, #44]	; (8014fe4 <ip4_reass+0x2b8>)
 8014fb6:	f240 229b 	movw	r2, #667	; 0x29b
 8014fba:	490b      	ldr	r1, [pc, #44]	; (8014fe8 <ip4_reass+0x2bc>)
 8014fbc:	480b      	ldr	r0, [pc, #44]	; (8014fec <ip4_reass+0x2c0>)
 8014fbe:	f000 fb0f 	bl	80155e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014fc2:	4b06      	ldr	r3, [pc, #24]	; (8014fdc <ip4_reass+0x2b0>)
 8014fc4:	881a      	ldrh	r2, [r3, #0]
 8014fc6:	8c3b      	ldrh	r3, [r7, #32]
 8014fc8:	1ad3      	subs	r3, r2, r3
 8014fca:	b29a      	uxth	r2, r3
 8014fcc:	4b03      	ldr	r3, [pc, #12]	; (8014fdc <ip4_reass+0x2b0>)
 8014fce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	e038      	b.n	8015046 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	e036      	b.n	8015046 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014fd8:	bf00      	nop
 8014fda:	e00a      	b.n	8014ff2 <ip4_reass+0x2c6>
 8014fdc:	200087ec 	.word	0x200087ec
 8014fe0:	200087e8 	.word	0x200087e8
 8014fe4:	0801915c 	.word	0x0801915c
 8014fe8:	080192cc 	.word	0x080192cc
 8014fec:	080191a4 	.word	0x080191a4
    goto nullreturn_ipr;
 8014ff0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d106      	bne.n	8015006 <ip4_reass+0x2da>
 8014ff8:	4b15      	ldr	r3, [pc, #84]	; (8015050 <ip4_reass+0x324>)
 8014ffa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014ffe:	4915      	ldr	r1, [pc, #84]	; (8015054 <ip4_reass+0x328>)
 8015000:	4815      	ldr	r0, [pc, #84]	; (8015058 <ip4_reass+0x32c>)
 8015002:	f000 faed 	bl	80155e0 <iprintf>
  if (ipr->p == NULL) {
 8015006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015008:	685b      	ldr	r3, [r3, #4]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d116      	bne.n	801503c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801500e:	4b13      	ldr	r3, [pc, #76]	; (801505c <ip4_reass+0x330>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015014:	429a      	cmp	r2, r3
 8015016:	d006      	beq.n	8015026 <ip4_reass+0x2fa>
 8015018:	4b0d      	ldr	r3, [pc, #52]	; (8015050 <ip4_reass+0x324>)
 801501a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801501e:	4910      	ldr	r1, [pc, #64]	; (8015060 <ip4_reass+0x334>)
 8015020:	480d      	ldr	r0, [pc, #52]	; (8015058 <ip4_reass+0x32c>)
 8015022:	f000 fadd 	bl	80155e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015026:	2100      	movs	r1, #0
 8015028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801502a:	f7ff fce7 	bl	80149fc <ip_reass_dequeue_datagram>
 801502e:	e006      	b.n	801503e <ip4_reass+0x312>
    goto nullreturn;
 8015030:	bf00      	nop
 8015032:	e004      	b.n	801503e <ip4_reass+0x312>
    goto nullreturn;
 8015034:	bf00      	nop
 8015036:	e002      	b.n	801503e <ip4_reass+0x312>
      goto nullreturn;
 8015038:	bf00      	nop
 801503a:	e000      	b.n	801503e <ip4_reass+0x312>
  }

nullreturn:
 801503c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f7f5 ff26 	bl	800ae90 <pbuf_free>
  return NULL;
 8015044:	2300      	movs	r3, #0
}
 8015046:	4618      	mov	r0, r3
 8015048:	3738      	adds	r7, #56	; 0x38
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	0801915c 	.word	0x0801915c
 8015054:	080192e8 	.word	0x080192e8
 8015058:	080191a4 	.word	0x080191a4
 801505c:	200087e8 	.word	0x200087e8
 8015060:	080192f4 	.word	0x080192f4

08015064 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015068:	2005      	movs	r0, #5
 801506a:	f7f5 f83f 	bl	800a0ec <memp_malloc>
 801506e:	4603      	mov	r3, r0
}
 8015070:	4618      	mov	r0, r3
 8015072:	bd80      	pop	{r7, pc}

08015074 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d106      	bne.n	8015090 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015082:	4b07      	ldr	r3, [pc, #28]	; (80150a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015084:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015088:	4906      	ldr	r1, [pc, #24]	; (80150a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801508a:	4807      	ldr	r0, [pc, #28]	; (80150a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801508c:	f000 faa8 	bl	80155e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015090:	6879      	ldr	r1, [r7, #4]
 8015092:	2005      	movs	r0, #5
 8015094:	f7f5 f89a 	bl	800a1cc <memp_free>
}
 8015098:	bf00      	nop
 801509a:	3708      	adds	r7, #8
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	0801915c 	.word	0x0801915c
 80150a4:	08019314 	.word	0x08019314
 80150a8:	080191a4 	.word	0x080191a4

080150ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d106      	bne.n	80150cc <ipfrag_free_pbuf_custom+0x20>
 80150be:	4b11      	ldr	r3, [pc, #68]	; (8015104 <ipfrag_free_pbuf_custom+0x58>)
 80150c0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80150c4:	4910      	ldr	r1, [pc, #64]	; (8015108 <ipfrag_free_pbuf_custom+0x5c>)
 80150c6:	4811      	ldr	r0, [pc, #68]	; (801510c <ipfrag_free_pbuf_custom+0x60>)
 80150c8:	f000 fa8a 	bl	80155e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80150cc:	68fa      	ldr	r2, [r7, #12]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d006      	beq.n	80150e2 <ipfrag_free_pbuf_custom+0x36>
 80150d4:	4b0b      	ldr	r3, [pc, #44]	; (8015104 <ipfrag_free_pbuf_custom+0x58>)
 80150d6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80150da:	490d      	ldr	r1, [pc, #52]	; (8015110 <ipfrag_free_pbuf_custom+0x64>)
 80150dc:	480b      	ldr	r0, [pc, #44]	; (801510c <ipfrag_free_pbuf_custom+0x60>)
 80150de:	f000 fa7f 	bl	80155e0 <iprintf>
  if (pcr->original != NULL) {
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	695b      	ldr	r3, [r3, #20]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d004      	beq.n	80150f4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	695b      	ldr	r3, [r3, #20]
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7f5 fece 	bl	800ae90 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f7ff ffbd 	bl	8015074 <ip_frag_free_pbuf_custom_ref>
}
 80150fa:	bf00      	nop
 80150fc:	3710      	adds	r7, #16
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	0801915c 	.word	0x0801915c
 8015108:	08019320 	.word	0x08019320
 801510c:	080191a4 	.word	0x080191a4
 8015110:	0801932c 	.word	0x0801932c

08015114 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b094      	sub	sp, #80	; 0x50
 8015118:	af02      	add	r7, sp, #8
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015120:	2300      	movs	r3, #0
 8015122:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801512a:	3b14      	subs	r3, #20
 801512c:	2b00      	cmp	r3, #0
 801512e:	da00      	bge.n	8015132 <ip4_frag+0x1e>
 8015130:	3307      	adds	r3, #7
 8015132:	10db      	asrs	r3, r3, #3
 8015134:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015136:	2314      	movs	r3, #20
 8015138:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015142:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	f003 030f 	and.w	r3, r3, #15
 801514c:	b2db      	uxtb	r3, r3
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	b2db      	uxtb	r3, r3
 8015152:	2b14      	cmp	r3, #20
 8015154:	d002      	beq.n	801515c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015156:	f06f 0305 	mvn.w	r3, #5
 801515a:	e110      	b.n	801537e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	895b      	ldrh	r3, [r3, #10]
 8015160:	2b13      	cmp	r3, #19
 8015162:	d809      	bhi.n	8015178 <ip4_frag+0x64>
 8015164:	4b88      	ldr	r3, [pc, #544]	; (8015388 <ip4_frag+0x274>)
 8015166:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801516a:	4988      	ldr	r1, [pc, #544]	; (801538c <ip4_frag+0x278>)
 801516c:	4888      	ldr	r0, [pc, #544]	; (8015390 <ip4_frag+0x27c>)
 801516e:	f000 fa37 	bl	80155e0 <iprintf>
 8015172:	f06f 0305 	mvn.w	r3, #5
 8015176:	e102      	b.n	801537e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801517a:	88db      	ldrh	r3, [r3, #6]
 801517c:	b29b      	uxth	r3, r3
 801517e:	4618      	mov	r0, r3
 8015180:	f7f4 fa84 	bl	800968c <lwip_htons>
 8015184:	4603      	mov	r3, r0
 8015186:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015188:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801518a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801518e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015198:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	891b      	ldrh	r3, [r3, #8]
 801519e:	3b14      	subs	r3, #20
 80151a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80151a4:	e0e1      	b.n	801536a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80151a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151b0:	4293      	cmp	r3, r2
 80151b2:	bf28      	it	cs
 80151b4:	4613      	movcs	r3, r2
 80151b6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80151b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151bc:	2114      	movs	r1, #20
 80151be:	200e      	movs	r0, #14
 80151c0:	f7f5 fb82 	bl	800a8c8 <pbuf_alloc>
 80151c4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80151c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	f000 80d5 	beq.w	8015378 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80151ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d0:	895b      	ldrh	r3, [r3, #10]
 80151d2:	2b13      	cmp	r3, #19
 80151d4:	d806      	bhi.n	80151e4 <ip4_frag+0xd0>
 80151d6:	4b6c      	ldr	r3, [pc, #432]	; (8015388 <ip4_frag+0x274>)
 80151d8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80151dc:	496d      	ldr	r1, [pc, #436]	; (8015394 <ip4_frag+0x280>)
 80151de:	486c      	ldr	r0, [pc, #432]	; (8015390 <ip4_frag+0x27c>)
 80151e0:	f000 f9fe 	bl	80155e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80151e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	2214      	movs	r2, #20
 80151ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80151ec:	4618      	mov	r0, r3
 80151ee:	f000 f9e1 	bl	80155b4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80151f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80151fe:	e064      	b.n	80152ca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	895a      	ldrh	r2, [r3, #10]
 8015204:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015206:	1ad3      	subs	r3, r2, r3
 8015208:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	895b      	ldrh	r3, [r3, #10]
 801520e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015210:	429a      	cmp	r2, r3
 8015212:	d906      	bls.n	8015222 <ip4_frag+0x10e>
 8015214:	4b5c      	ldr	r3, [pc, #368]	; (8015388 <ip4_frag+0x274>)
 8015216:	f240 322d 	movw	r2, #813	; 0x32d
 801521a:	495f      	ldr	r1, [pc, #380]	; (8015398 <ip4_frag+0x284>)
 801521c:	485c      	ldr	r0, [pc, #368]	; (8015390 <ip4_frag+0x27c>)
 801521e:	f000 f9df 	bl	80155e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015222:	8bfa      	ldrh	r2, [r7, #30]
 8015224:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015228:	4293      	cmp	r3, r2
 801522a:	bf28      	it	cs
 801522c:	4613      	movcs	r3, r2
 801522e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015232:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015236:	2b00      	cmp	r3, #0
 8015238:	d105      	bne.n	8015246 <ip4_frag+0x132>
        poff = 0;
 801523a:	2300      	movs	r3, #0
 801523c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	60fb      	str	r3, [r7, #12]
        continue;
 8015244:	e041      	b.n	80152ca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015246:	f7ff ff0d 	bl	8015064 <ip_frag_alloc_pbuf_custom_ref>
 801524a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801524c:	69bb      	ldr	r3, [r7, #24]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d103      	bne.n	801525a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015254:	f7f5 fe1c 	bl	800ae90 <pbuf_free>
        goto memerr;
 8015258:	e08f      	b.n	801537a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801525a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015260:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015262:	4413      	add	r3, r2
 8015264:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015268:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801526c:	9201      	str	r2, [sp, #4]
 801526e:	9300      	str	r3, [sp, #0]
 8015270:	4603      	mov	r3, r0
 8015272:	2241      	movs	r2, #65	; 0x41
 8015274:	2000      	movs	r0, #0
 8015276:	f7f5 fc51 	bl	800ab1c <pbuf_alloced_custom>
 801527a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801527c:	697b      	ldr	r3, [r7, #20]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d106      	bne.n	8015290 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015282:	69b8      	ldr	r0, [r7, #24]
 8015284:	f7ff fef6 	bl	8015074 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801528a:	f7f5 fe01 	bl	800ae90 <pbuf_free>
        goto memerr;
 801528e:	e074      	b.n	801537a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f7f5 fe9d 	bl	800afd0 <pbuf_ref>
      pcr->original = p;
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	68fa      	ldr	r2, [r7, #12]
 801529a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801529c:	69bb      	ldr	r3, [r7, #24]
 801529e:	4a3f      	ldr	r2, [pc, #252]	; (801539c <ip4_frag+0x288>)
 80152a0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80152a2:	6979      	ldr	r1, [r7, #20]
 80152a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152a6:	f7f5 feb5 	bl	800b014 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80152aa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80152ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80152b2:	1ad3      	subs	r3, r2, r3
 80152b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80152b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d004      	beq.n	80152ca <ip4_frag+0x1b6>
        poff = 0;
 80152c0:	2300      	movs	r3, #0
 80152c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80152ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d196      	bne.n	8015200 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80152d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80152d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80152d8:	4413      	add	r3, r2
 80152da:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80152e0:	f1a3 0213 	sub.w	r2, r3, #19
 80152e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152e8:	429a      	cmp	r2, r3
 80152ea:	bfcc      	ite	gt
 80152ec:	2301      	movgt	r3, #1
 80152ee:	2300      	movle	r3, #0
 80152f0:	b2db      	uxtb	r3, r3
 80152f2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80152f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80152f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80152fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80152fe:	6a3b      	ldr	r3, [r7, #32]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d002      	beq.n	801530a <ip4_frag+0x1f6>
 8015304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015306:	2b00      	cmp	r3, #0
 8015308:	d003      	beq.n	8015312 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801530a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801530c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015310:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015312:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015314:	4618      	mov	r0, r3
 8015316:	f7f4 f9b9 	bl	800968c <lwip_htons>
 801531a:	4603      	mov	r3, r0
 801531c:	461a      	mov	r2, r3
 801531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015320:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015322:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015324:	3314      	adds	r3, #20
 8015326:	b29b      	uxth	r3, r3
 8015328:	4618      	mov	r0, r3
 801532a:	f7f4 f9af 	bl	800968c <lwip_htons>
 801532e:	4603      	mov	r3, r0
 8015330:	461a      	mov	r2, r3
 8015332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015334:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015338:	2200      	movs	r2, #0
 801533a:	729a      	strb	r2, [r3, #10]
 801533c:	2200      	movs	r2, #0
 801533e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	695b      	ldr	r3, [r3, #20]
 8015344:	687a      	ldr	r2, [r7, #4]
 8015346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015348:	68b8      	ldr	r0, [r7, #8]
 801534a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801534c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801534e:	f7f5 fd9f 	bl	800ae90 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015352:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015356:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015358:	1ad3      	subs	r3, r2, r3
 801535a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801535e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015362:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015364:	4413      	add	r3, r2
 8015366:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801536a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801536e:	2b00      	cmp	r3, #0
 8015370:	f47f af19 	bne.w	80151a6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015374:	2300      	movs	r3, #0
 8015376:	e002      	b.n	801537e <ip4_frag+0x26a>
      goto memerr;
 8015378:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801537a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801537e:	4618      	mov	r0, r3
 8015380:	3748      	adds	r7, #72	; 0x48
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}
 8015386:	bf00      	nop
 8015388:	0801915c 	.word	0x0801915c
 801538c:	08019338 	.word	0x08019338
 8015390:	080191a4 	.word	0x080191a4
 8015394:	08019354 	.word	0x08019354
 8015398:	08019374 	.word	0x08019374
 801539c:	080150ad 	.word	0x080150ad

080153a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b086      	sub	sp, #24
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80153aa:	230e      	movs	r3, #14
 80153ac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	895b      	ldrh	r3, [r3, #10]
 80153b2:	2b0e      	cmp	r3, #14
 80153b4:	d96e      	bls.n	8015494 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	7bdb      	ldrb	r3, [r3, #15]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d106      	bne.n	80153cc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80153c4:	3301      	adds	r3, #1
 80153c6:	b2da      	uxtb	r2, r3
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	7b1a      	ldrb	r2, [r3, #12]
 80153d6:	7b5b      	ldrb	r3, [r3, #13]
 80153d8:	021b      	lsls	r3, r3, #8
 80153da:	4313      	orrs	r3, r2
 80153dc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	f003 0301 	and.w	r3, r3, #1
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d023      	beq.n	8015432 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80153ea:	693b      	ldr	r3, [r7, #16]
 80153ec:	781b      	ldrb	r3, [r3, #0]
 80153ee:	2b01      	cmp	r3, #1
 80153f0:	d10f      	bne.n	8015412 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	785b      	ldrb	r3, [r3, #1]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d11b      	bne.n	8015432 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80153fe:	2b5e      	cmp	r3, #94	; 0x5e
 8015400:	d117      	bne.n	8015432 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	7b5b      	ldrb	r3, [r3, #13]
 8015406:	f043 0310 	orr.w	r3, r3, #16
 801540a:	b2da      	uxtb	r2, r3
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	735a      	strb	r2, [r3, #13]
 8015410:	e00f      	b.n	8015432 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015412:	693b      	ldr	r3, [r7, #16]
 8015414:	2206      	movs	r2, #6
 8015416:	4928      	ldr	r1, [pc, #160]	; (80154b8 <ethernet_input+0x118>)
 8015418:	4618      	mov	r0, r3
 801541a:	f000 f8bb 	bl	8015594 <memcmp>
 801541e:	4603      	mov	r3, r0
 8015420:	2b00      	cmp	r3, #0
 8015422:	d106      	bne.n	8015432 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	7b5b      	ldrb	r3, [r3, #13]
 8015428:	f043 0308 	orr.w	r3, r3, #8
 801542c:	b2da      	uxtb	r2, r3
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015432:	89fb      	ldrh	r3, [r7, #14]
 8015434:	2b08      	cmp	r3, #8
 8015436:	d003      	beq.n	8015440 <ethernet_input+0xa0>
 8015438:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801543c:	d014      	beq.n	8015468 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801543e:	e032      	b.n	80154a6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015446:	f003 0308 	and.w	r3, r3, #8
 801544a:	2b00      	cmp	r3, #0
 801544c:	d024      	beq.n	8015498 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801544e:	8afb      	ldrh	r3, [r7, #22]
 8015450:	4619      	mov	r1, r3
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f7f5 fc96 	bl	800ad84 <pbuf_remove_header>
 8015458:	4603      	mov	r3, r0
 801545a:	2b00      	cmp	r3, #0
 801545c:	d11e      	bne.n	801549c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801545e:	6839      	ldr	r1, [r7, #0]
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f7fe ff03 	bl	801426c <ip4_input>
      break;
 8015466:	e013      	b.n	8015490 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801546e:	f003 0308 	and.w	r3, r3, #8
 8015472:	2b00      	cmp	r3, #0
 8015474:	d014      	beq.n	80154a0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015476:	8afb      	ldrh	r3, [r7, #22]
 8015478:	4619      	mov	r1, r3
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	f7f5 fc82 	bl	800ad84 <pbuf_remove_header>
 8015480:	4603      	mov	r3, r0
 8015482:	2b00      	cmp	r3, #0
 8015484:	d10e      	bne.n	80154a4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015486:	6839      	ldr	r1, [r7, #0]
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f7fe f879 	bl	8013580 <etharp_input>
      break;
 801548e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015490:	2300      	movs	r3, #0
 8015492:	e00c      	b.n	80154ae <ethernet_input+0x10e>
    goto free_and_return;
 8015494:	bf00      	nop
 8015496:	e006      	b.n	80154a6 <ethernet_input+0x106>
        goto free_and_return;
 8015498:	bf00      	nop
 801549a:	e004      	b.n	80154a6 <ethernet_input+0x106>
        goto free_and_return;
 801549c:	bf00      	nop
 801549e:	e002      	b.n	80154a6 <ethernet_input+0x106>
        goto free_and_return;
 80154a0:	bf00      	nop
 80154a2:	e000      	b.n	80154a6 <ethernet_input+0x106>
        goto free_and_return;
 80154a4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7f5 fcf2 	bl	800ae90 <pbuf_free>
  return ERR_OK;
 80154ac:	2300      	movs	r3, #0
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3718      	adds	r7, #24
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	0801952c 	.word	0x0801952c

080154bc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80154bc:	b580      	push	{r7, lr}
 80154be:	b086      	sub	sp, #24
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	607a      	str	r2, [r7, #4]
 80154c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80154ca:	8c3b      	ldrh	r3, [r7, #32]
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7f4 f8dd 	bl	800968c <lwip_htons>
 80154d2:	4603      	mov	r3, r0
 80154d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80154d6:	210e      	movs	r1, #14
 80154d8:	68b8      	ldr	r0, [r7, #8]
 80154da:	f7f5 fc43 	bl	800ad64 <pbuf_add_header>
 80154de:	4603      	mov	r3, r0
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d125      	bne.n	8015530 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	685b      	ldr	r3, [r3, #4]
 80154e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	8afa      	ldrh	r2, [r7, #22]
 80154ee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80154f0:	693b      	ldr	r3, [r7, #16]
 80154f2:	2206      	movs	r2, #6
 80154f4:	6839      	ldr	r1, [r7, #0]
 80154f6:	4618      	mov	r0, r3
 80154f8:	f000 f85c 	bl	80155b4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	3306      	adds	r3, #6
 8015500:	2206      	movs	r2, #6
 8015502:	6879      	ldr	r1, [r7, #4]
 8015504:	4618      	mov	r0, r3
 8015506:	f000 f855 	bl	80155b4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015510:	2b06      	cmp	r3, #6
 8015512:	d006      	beq.n	8015522 <ethernet_output+0x66>
 8015514:	4b0a      	ldr	r3, [pc, #40]	; (8015540 <ethernet_output+0x84>)
 8015516:	f44f 7299 	mov.w	r2, #306	; 0x132
 801551a:	490a      	ldr	r1, [pc, #40]	; (8015544 <ethernet_output+0x88>)
 801551c:	480a      	ldr	r0, [pc, #40]	; (8015548 <ethernet_output+0x8c>)
 801551e:	f000 f85f 	bl	80155e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	699b      	ldr	r3, [r3, #24]
 8015526:	68b9      	ldr	r1, [r7, #8]
 8015528:	68f8      	ldr	r0, [r7, #12]
 801552a:	4798      	blx	r3
 801552c:	4603      	mov	r3, r0
 801552e:	e002      	b.n	8015536 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015530:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015532:	f06f 0301 	mvn.w	r3, #1
}
 8015536:	4618      	mov	r0, r3
 8015538:	3718      	adds	r7, #24
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}
 801553e:	bf00      	nop
 8015540:	08019384 	.word	0x08019384
 8015544:	080193bc 	.word	0x080193bc
 8015548:	080193f0 	.word	0x080193f0

0801554c <__libc_init_array>:
 801554c:	b570      	push	{r4, r5, r6, lr}
 801554e:	4d0d      	ldr	r5, [pc, #52]	; (8015584 <__libc_init_array+0x38>)
 8015550:	4c0d      	ldr	r4, [pc, #52]	; (8015588 <__libc_init_array+0x3c>)
 8015552:	1b64      	subs	r4, r4, r5
 8015554:	10a4      	asrs	r4, r4, #2
 8015556:	2600      	movs	r6, #0
 8015558:	42a6      	cmp	r6, r4
 801555a:	d109      	bne.n	8015570 <__libc_init_array+0x24>
 801555c:	4d0b      	ldr	r5, [pc, #44]	; (801558c <__libc_init_array+0x40>)
 801555e:	4c0c      	ldr	r4, [pc, #48]	; (8015590 <__libc_init_array+0x44>)
 8015560:	f001 f88e 	bl	8016680 <_init>
 8015564:	1b64      	subs	r4, r4, r5
 8015566:	10a4      	asrs	r4, r4, #2
 8015568:	2600      	movs	r6, #0
 801556a:	42a6      	cmp	r6, r4
 801556c:	d105      	bne.n	801557a <__libc_init_array+0x2e>
 801556e:	bd70      	pop	{r4, r5, r6, pc}
 8015570:	f855 3b04 	ldr.w	r3, [r5], #4
 8015574:	4798      	blx	r3
 8015576:	3601      	adds	r6, #1
 8015578:	e7ee      	b.n	8015558 <__libc_init_array+0xc>
 801557a:	f855 3b04 	ldr.w	r3, [r5], #4
 801557e:	4798      	blx	r3
 8015580:	3601      	adds	r6, #1
 8015582:	e7f2      	b.n	801556a <__libc_init_array+0x1e>
 8015584:	0801968c 	.word	0x0801968c
 8015588:	0801968c 	.word	0x0801968c
 801558c:	0801968c 	.word	0x0801968c
 8015590:	08019690 	.word	0x08019690

08015594 <memcmp>:
 8015594:	b510      	push	{r4, lr}
 8015596:	3901      	subs	r1, #1
 8015598:	4402      	add	r2, r0
 801559a:	4290      	cmp	r0, r2
 801559c:	d101      	bne.n	80155a2 <memcmp+0xe>
 801559e:	2000      	movs	r0, #0
 80155a0:	e005      	b.n	80155ae <memcmp+0x1a>
 80155a2:	7803      	ldrb	r3, [r0, #0]
 80155a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80155a8:	42a3      	cmp	r3, r4
 80155aa:	d001      	beq.n	80155b0 <memcmp+0x1c>
 80155ac:	1b18      	subs	r0, r3, r4
 80155ae:	bd10      	pop	{r4, pc}
 80155b0:	3001      	adds	r0, #1
 80155b2:	e7f2      	b.n	801559a <memcmp+0x6>

080155b4 <memcpy>:
 80155b4:	440a      	add	r2, r1
 80155b6:	4291      	cmp	r1, r2
 80155b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80155bc:	d100      	bne.n	80155c0 <memcpy+0xc>
 80155be:	4770      	bx	lr
 80155c0:	b510      	push	{r4, lr}
 80155c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155ca:	4291      	cmp	r1, r2
 80155cc:	d1f9      	bne.n	80155c2 <memcpy+0xe>
 80155ce:	bd10      	pop	{r4, pc}

080155d0 <memset>:
 80155d0:	4402      	add	r2, r0
 80155d2:	4603      	mov	r3, r0
 80155d4:	4293      	cmp	r3, r2
 80155d6:	d100      	bne.n	80155da <memset+0xa>
 80155d8:	4770      	bx	lr
 80155da:	f803 1b01 	strb.w	r1, [r3], #1
 80155de:	e7f9      	b.n	80155d4 <memset+0x4>

080155e0 <iprintf>:
 80155e0:	b40f      	push	{r0, r1, r2, r3}
 80155e2:	4b0a      	ldr	r3, [pc, #40]	; (801560c <iprintf+0x2c>)
 80155e4:	b513      	push	{r0, r1, r4, lr}
 80155e6:	681c      	ldr	r4, [r3, #0]
 80155e8:	b124      	cbz	r4, 80155f4 <iprintf+0x14>
 80155ea:	69a3      	ldr	r3, [r4, #24]
 80155ec:	b913      	cbnz	r3, 80155f4 <iprintf+0x14>
 80155ee:	4620      	mov	r0, r4
 80155f0:	f000 f8c2 	bl	8015778 <__sinit>
 80155f4:	ab05      	add	r3, sp, #20
 80155f6:	9a04      	ldr	r2, [sp, #16]
 80155f8:	68a1      	ldr	r1, [r4, #8]
 80155fa:	9301      	str	r3, [sp, #4]
 80155fc:	4620      	mov	r0, r4
 80155fe:	f000 fa7f 	bl	8015b00 <_vfiprintf_r>
 8015602:	b002      	add	sp, #8
 8015604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015608:	b004      	add	sp, #16
 801560a:	4770      	bx	lr
 801560c:	20000044 	.word	0x20000044

08015610 <rand>:
 8015610:	4b16      	ldr	r3, [pc, #88]	; (801566c <rand+0x5c>)
 8015612:	b510      	push	{r4, lr}
 8015614:	681c      	ldr	r4, [r3, #0]
 8015616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015618:	b9b3      	cbnz	r3, 8015648 <rand+0x38>
 801561a:	2018      	movs	r0, #24
 801561c:	f000 f95e 	bl	80158dc <malloc>
 8015620:	63a0      	str	r0, [r4, #56]	; 0x38
 8015622:	b928      	cbnz	r0, 8015630 <rand+0x20>
 8015624:	4602      	mov	r2, r0
 8015626:	4b12      	ldr	r3, [pc, #72]	; (8015670 <rand+0x60>)
 8015628:	4812      	ldr	r0, [pc, #72]	; (8015674 <rand+0x64>)
 801562a:	214e      	movs	r1, #78	; 0x4e
 801562c:	f000 f82e 	bl	801568c <__assert_func>
 8015630:	4a11      	ldr	r2, [pc, #68]	; (8015678 <rand+0x68>)
 8015632:	4b12      	ldr	r3, [pc, #72]	; (801567c <rand+0x6c>)
 8015634:	e9c0 2300 	strd	r2, r3, [r0]
 8015638:	4b11      	ldr	r3, [pc, #68]	; (8015680 <rand+0x70>)
 801563a:	6083      	str	r3, [r0, #8]
 801563c:	230b      	movs	r3, #11
 801563e:	8183      	strh	r3, [r0, #12]
 8015640:	2201      	movs	r2, #1
 8015642:	2300      	movs	r3, #0
 8015644:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015648:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801564a:	4a0e      	ldr	r2, [pc, #56]	; (8015684 <rand+0x74>)
 801564c:	6920      	ldr	r0, [r4, #16]
 801564e:	6963      	ldr	r3, [r4, #20]
 8015650:	490d      	ldr	r1, [pc, #52]	; (8015688 <rand+0x78>)
 8015652:	4342      	muls	r2, r0
 8015654:	fb01 2203 	mla	r2, r1, r3, r2
 8015658:	fba0 0101 	umull	r0, r1, r0, r1
 801565c:	1c43      	adds	r3, r0, #1
 801565e:	eb42 0001 	adc.w	r0, r2, r1
 8015662:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8015666:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801566a:	bd10      	pop	{r4, pc}
 801566c:	20000044 	.word	0x20000044
 8015670:	08019540 	.word	0x08019540
 8015674:	08019557 	.word	0x08019557
 8015678:	abcd330e 	.word	0xabcd330e
 801567c:	e66d1234 	.word	0xe66d1234
 8015680:	0005deec 	.word	0x0005deec
 8015684:	5851f42d 	.word	0x5851f42d
 8015688:	4c957f2d 	.word	0x4c957f2d

0801568c <__assert_func>:
 801568c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801568e:	4614      	mov	r4, r2
 8015690:	461a      	mov	r2, r3
 8015692:	4b09      	ldr	r3, [pc, #36]	; (80156b8 <__assert_func+0x2c>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	4605      	mov	r5, r0
 8015698:	68d8      	ldr	r0, [r3, #12]
 801569a:	b14c      	cbz	r4, 80156b0 <__assert_func+0x24>
 801569c:	4b07      	ldr	r3, [pc, #28]	; (80156bc <__assert_func+0x30>)
 801569e:	9100      	str	r1, [sp, #0]
 80156a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80156a4:	4906      	ldr	r1, [pc, #24]	; (80156c0 <__assert_func+0x34>)
 80156a6:	462b      	mov	r3, r5
 80156a8:	f000 f8e4 	bl	8015874 <fiprintf>
 80156ac:	f000 fe12 	bl	80162d4 <abort>
 80156b0:	4b04      	ldr	r3, [pc, #16]	; (80156c4 <__assert_func+0x38>)
 80156b2:	461c      	mov	r4, r3
 80156b4:	e7f3      	b.n	801569e <__assert_func+0x12>
 80156b6:	bf00      	nop
 80156b8:	20000044 	.word	0x20000044
 80156bc:	080195b2 	.word	0x080195b2
 80156c0:	080195bf 	.word	0x080195bf
 80156c4:	080195ed 	.word	0x080195ed

080156c8 <std>:
 80156c8:	2300      	movs	r3, #0
 80156ca:	b510      	push	{r4, lr}
 80156cc:	4604      	mov	r4, r0
 80156ce:	e9c0 3300 	strd	r3, r3, [r0]
 80156d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80156d6:	6083      	str	r3, [r0, #8]
 80156d8:	8181      	strh	r1, [r0, #12]
 80156da:	6643      	str	r3, [r0, #100]	; 0x64
 80156dc:	81c2      	strh	r2, [r0, #14]
 80156de:	6183      	str	r3, [r0, #24]
 80156e0:	4619      	mov	r1, r3
 80156e2:	2208      	movs	r2, #8
 80156e4:	305c      	adds	r0, #92	; 0x5c
 80156e6:	f7ff ff73 	bl	80155d0 <memset>
 80156ea:	4b05      	ldr	r3, [pc, #20]	; (8015700 <std+0x38>)
 80156ec:	6263      	str	r3, [r4, #36]	; 0x24
 80156ee:	4b05      	ldr	r3, [pc, #20]	; (8015704 <std+0x3c>)
 80156f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80156f2:	4b05      	ldr	r3, [pc, #20]	; (8015708 <std+0x40>)
 80156f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80156f6:	4b05      	ldr	r3, [pc, #20]	; (801570c <std+0x44>)
 80156f8:	6224      	str	r4, [r4, #32]
 80156fa:	6323      	str	r3, [r4, #48]	; 0x30
 80156fc:	bd10      	pop	{r4, pc}
 80156fe:	bf00      	nop
 8015700:	080160a9 	.word	0x080160a9
 8015704:	080160cb 	.word	0x080160cb
 8015708:	08016103 	.word	0x08016103
 801570c:	08016127 	.word	0x08016127

08015710 <_cleanup_r>:
 8015710:	4901      	ldr	r1, [pc, #4]	; (8015718 <_cleanup_r+0x8>)
 8015712:	f000 b8c1 	b.w	8015898 <_fwalk_reent>
 8015716:	bf00      	nop
 8015718:	08016411 	.word	0x08016411

0801571c <__sfmoreglue>:
 801571c:	b570      	push	{r4, r5, r6, lr}
 801571e:	2268      	movs	r2, #104	; 0x68
 8015720:	1e4d      	subs	r5, r1, #1
 8015722:	4355      	muls	r5, r2
 8015724:	460e      	mov	r6, r1
 8015726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801572a:	f000 f94b 	bl	80159c4 <_malloc_r>
 801572e:	4604      	mov	r4, r0
 8015730:	b140      	cbz	r0, 8015744 <__sfmoreglue+0x28>
 8015732:	2100      	movs	r1, #0
 8015734:	e9c0 1600 	strd	r1, r6, [r0]
 8015738:	300c      	adds	r0, #12
 801573a:	60a0      	str	r0, [r4, #8]
 801573c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015740:	f7ff ff46 	bl	80155d0 <memset>
 8015744:	4620      	mov	r0, r4
 8015746:	bd70      	pop	{r4, r5, r6, pc}

08015748 <__sfp_lock_acquire>:
 8015748:	4801      	ldr	r0, [pc, #4]	; (8015750 <__sfp_lock_acquire+0x8>)
 801574a:	f000 b8c5 	b.w	80158d8 <__retarget_lock_acquire_recursive>
 801574e:	bf00      	nop
 8015750:	200087f5 	.word	0x200087f5

08015754 <__sfp_lock_release>:
 8015754:	4801      	ldr	r0, [pc, #4]	; (801575c <__sfp_lock_release+0x8>)
 8015756:	f000 b8c0 	b.w	80158da <__retarget_lock_release_recursive>
 801575a:	bf00      	nop
 801575c:	200087f5 	.word	0x200087f5

08015760 <__sinit_lock_acquire>:
 8015760:	4801      	ldr	r0, [pc, #4]	; (8015768 <__sinit_lock_acquire+0x8>)
 8015762:	f000 b8b9 	b.w	80158d8 <__retarget_lock_acquire_recursive>
 8015766:	bf00      	nop
 8015768:	200087f6 	.word	0x200087f6

0801576c <__sinit_lock_release>:
 801576c:	4801      	ldr	r0, [pc, #4]	; (8015774 <__sinit_lock_release+0x8>)
 801576e:	f000 b8b4 	b.w	80158da <__retarget_lock_release_recursive>
 8015772:	bf00      	nop
 8015774:	200087f6 	.word	0x200087f6

08015778 <__sinit>:
 8015778:	b510      	push	{r4, lr}
 801577a:	4604      	mov	r4, r0
 801577c:	f7ff fff0 	bl	8015760 <__sinit_lock_acquire>
 8015780:	69a3      	ldr	r3, [r4, #24]
 8015782:	b11b      	cbz	r3, 801578c <__sinit+0x14>
 8015784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015788:	f7ff bff0 	b.w	801576c <__sinit_lock_release>
 801578c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015790:	6523      	str	r3, [r4, #80]	; 0x50
 8015792:	4b13      	ldr	r3, [pc, #76]	; (80157e0 <__sinit+0x68>)
 8015794:	4a13      	ldr	r2, [pc, #76]	; (80157e4 <__sinit+0x6c>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	62a2      	str	r2, [r4, #40]	; 0x28
 801579a:	42a3      	cmp	r3, r4
 801579c:	bf04      	itt	eq
 801579e:	2301      	moveq	r3, #1
 80157a0:	61a3      	streq	r3, [r4, #24]
 80157a2:	4620      	mov	r0, r4
 80157a4:	f000 f820 	bl	80157e8 <__sfp>
 80157a8:	6060      	str	r0, [r4, #4]
 80157aa:	4620      	mov	r0, r4
 80157ac:	f000 f81c 	bl	80157e8 <__sfp>
 80157b0:	60a0      	str	r0, [r4, #8]
 80157b2:	4620      	mov	r0, r4
 80157b4:	f000 f818 	bl	80157e8 <__sfp>
 80157b8:	2200      	movs	r2, #0
 80157ba:	60e0      	str	r0, [r4, #12]
 80157bc:	2104      	movs	r1, #4
 80157be:	6860      	ldr	r0, [r4, #4]
 80157c0:	f7ff ff82 	bl	80156c8 <std>
 80157c4:	68a0      	ldr	r0, [r4, #8]
 80157c6:	2201      	movs	r2, #1
 80157c8:	2109      	movs	r1, #9
 80157ca:	f7ff ff7d 	bl	80156c8 <std>
 80157ce:	68e0      	ldr	r0, [r4, #12]
 80157d0:	2202      	movs	r2, #2
 80157d2:	2112      	movs	r1, #18
 80157d4:	f7ff ff78 	bl	80156c8 <std>
 80157d8:	2301      	movs	r3, #1
 80157da:	61a3      	str	r3, [r4, #24]
 80157dc:	e7d2      	b.n	8015784 <__sinit+0xc>
 80157de:	bf00      	nop
 80157e0:	0801953c 	.word	0x0801953c
 80157e4:	08015711 	.word	0x08015711

080157e8 <__sfp>:
 80157e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ea:	4607      	mov	r7, r0
 80157ec:	f7ff ffac 	bl	8015748 <__sfp_lock_acquire>
 80157f0:	4b1e      	ldr	r3, [pc, #120]	; (801586c <__sfp+0x84>)
 80157f2:	681e      	ldr	r6, [r3, #0]
 80157f4:	69b3      	ldr	r3, [r6, #24]
 80157f6:	b913      	cbnz	r3, 80157fe <__sfp+0x16>
 80157f8:	4630      	mov	r0, r6
 80157fa:	f7ff ffbd 	bl	8015778 <__sinit>
 80157fe:	3648      	adds	r6, #72	; 0x48
 8015800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015804:	3b01      	subs	r3, #1
 8015806:	d503      	bpl.n	8015810 <__sfp+0x28>
 8015808:	6833      	ldr	r3, [r6, #0]
 801580a:	b30b      	cbz	r3, 8015850 <__sfp+0x68>
 801580c:	6836      	ldr	r6, [r6, #0]
 801580e:	e7f7      	b.n	8015800 <__sfp+0x18>
 8015810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015814:	b9d5      	cbnz	r5, 801584c <__sfp+0x64>
 8015816:	4b16      	ldr	r3, [pc, #88]	; (8015870 <__sfp+0x88>)
 8015818:	60e3      	str	r3, [r4, #12]
 801581a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801581e:	6665      	str	r5, [r4, #100]	; 0x64
 8015820:	f000 f859 	bl	80158d6 <__retarget_lock_init_recursive>
 8015824:	f7ff ff96 	bl	8015754 <__sfp_lock_release>
 8015828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801582c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015830:	6025      	str	r5, [r4, #0]
 8015832:	61a5      	str	r5, [r4, #24]
 8015834:	2208      	movs	r2, #8
 8015836:	4629      	mov	r1, r5
 8015838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801583c:	f7ff fec8 	bl	80155d0 <memset>
 8015840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015848:	4620      	mov	r0, r4
 801584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801584c:	3468      	adds	r4, #104	; 0x68
 801584e:	e7d9      	b.n	8015804 <__sfp+0x1c>
 8015850:	2104      	movs	r1, #4
 8015852:	4638      	mov	r0, r7
 8015854:	f7ff ff62 	bl	801571c <__sfmoreglue>
 8015858:	4604      	mov	r4, r0
 801585a:	6030      	str	r0, [r6, #0]
 801585c:	2800      	cmp	r0, #0
 801585e:	d1d5      	bne.n	801580c <__sfp+0x24>
 8015860:	f7ff ff78 	bl	8015754 <__sfp_lock_release>
 8015864:	230c      	movs	r3, #12
 8015866:	603b      	str	r3, [r7, #0]
 8015868:	e7ee      	b.n	8015848 <__sfp+0x60>
 801586a:	bf00      	nop
 801586c:	0801953c 	.word	0x0801953c
 8015870:	ffff0001 	.word	0xffff0001

08015874 <fiprintf>:
 8015874:	b40e      	push	{r1, r2, r3}
 8015876:	b503      	push	{r0, r1, lr}
 8015878:	4601      	mov	r1, r0
 801587a:	ab03      	add	r3, sp, #12
 801587c:	4805      	ldr	r0, [pc, #20]	; (8015894 <fiprintf+0x20>)
 801587e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015882:	6800      	ldr	r0, [r0, #0]
 8015884:	9301      	str	r3, [sp, #4]
 8015886:	f000 f93b 	bl	8015b00 <_vfiprintf_r>
 801588a:	b002      	add	sp, #8
 801588c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015890:	b003      	add	sp, #12
 8015892:	4770      	bx	lr
 8015894:	20000044 	.word	0x20000044

08015898 <_fwalk_reent>:
 8015898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801589c:	4606      	mov	r6, r0
 801589e:	4688      	mov	r8, r1
 80158a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80158a4:	2700      	movs	r7, #0
 80158a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80158aa:	f1b9 0901 	subs.w	r9, r9, #1
 80158ae:	d505      	bpl.n	80158bc <_fwalk_reent+0x24>
 80158b0:	6824      	ldr	r4, [r4, #0]
 80158b2:	2c00      	cmp	r4, #0
 80158b4:	d1f7      	bne.n	80158a6 <_fwalk_reent+0xe>
 80158b6:	4638      	mov	r0, r7
 80158b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158bc:	89ab      	ldrh	r3, [r5, #12]
 80158be:	2b01      	cmp	r3, #1
 80158c0:	d907      	bls.n	80158d2 <_fwalk_reent+0x3a>
 80158c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80158c6:	3301      	adds	r3, #1
 80158c8:	d003      	beq.n	80158d2 <_fwalk_reent+0x3a>
 80158ca:	4629      	mov	r1, r5
 80158cc:	4630      	mov	r0, r6
 80158ce:	47c0      	blx	r8
 80158d0:	4307      	orrs	r7, r0
 80158d2:	3568      	adds	r5, #104	; 0x68
 80158d4:	e7e9      	b.n	80158aa <_fwalk_reent+0x12>

080158d6 <__retarget_lock_init_recursive>:
 80158d6:	4770      	bx	lr

080158d8 <__retarget_lock_acquire_recursive>:
 80158d8:	4770      	bx	lr

080158da <__retarget_lock_release_recursive>:
 80158da:	4770      	bx	lr

080158dc <malloc>:
 80158dc:	4b02      	ldr	r3, [pc, #8]	; (80158e8 <malloc+0xc>)
 80158de:	4601      	mov	r1, r0
 80158e0:	6818      	ldr	r0, [r3, #0]
 80158e2:	f000 b86f 	b.w	80159c4 <_malloc_r>
 80158e6:	bf00      	nop
 80158e8:	20000044 	.word	0x20000044

080158ec <_free_r>:
 80158ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158ee:	2900      	cmp	r1, #0
 80158f0:	d044      	beq.n	801597c <_free_r+0x90>
 80158f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158f6:	9001      	str	r0, [sp, #4]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	f1a1 0404 	sub.w	r4, r1, #4
 80158fe:	bfb8      	it	lt
 8015900:	18e4      	addlt	r4, r4, r3
 8015902:	f000 fe39 	bl	8016578 <__malloc_lock>
 8015906:	4a1e      	ldr	r2, [pc, #120]	; (8015980 <_free_r+0x94>)
 8015908:	9801      	ldr	r0, [sp, #4]
 801590a:	6813      	ldr	r3, [r2, #0]
 801590c:	b933      	cbnz	r3, 801591c <_free_r+0x30>
 801590e:	6063      	str	r3, [r4, #4]
 8015910:	6014      	str	r4, [r2, #0]
 8015912:	b003      	add	sp, #12
 8015914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015918:	f000 be34 	b.w	8016584 <__malloc_unlock>
 801591c:	42a3      	cmp	r3, r4
 801591e:	d908      	bls.n	8015932 <_free_r+0x46>
 8015920:	6825      	ldr	r5, [r4, #0]
 8015922:	1961      	adds	r1, r4, r5
 8015924:	428b      	cmp	r3, r1
 8015926:	bf01      	itttt	eq
 8015928:	6819      	ldreq	r1, [r3, #0]
 801592a:	685b      	ldreq	r3, [r3, #4]
 801592c:	1949      	addeq	r1, r1, r5
 801592e:	6021      	streq	r1, [r4, #0]
 8015930:	e7ed      	b.n	801590e <_free_r+0x22>
 8015932:	461a      	mov	r2, r3
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	b10b      	cbz	r3, 801593c <_free_r+0x50>
 8015938:	42a3      	cmp	r3, r4
 801593a:	d9fa      	bls.n	8015932 <_free_r+0x46>
 801593c:	6811      	ldr	r1, [r2, #0]
 801593e:	1855      	adds	r5, r2, r1
 8015940:	42a5      	cmp	r5, r4
 8015942:	d10b      	bne.n	801595c <_free_r+0x70>
 8015944:	6824      	ldr	r4, [r4, #0]
 8015946:	4421      	add	r1, r4
 8015948:	1854      	adds	r4, r2, r1
 801594a:	42a3      	cmp	r3, r4
 801594c:	6011      	str	r1, [r2, #0]
 801594e:	d1e0      	bne.n	8015912 <_free_r+0x26>
 8015950:	681c      	ldr	r4, [r3, #0]
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	6053      	str	r3, [r2, #4]
 8015956:	4421      	add	r1, r4
 8015958:	6011      	str	r1, [r2, #0]
 801595a:	e7da      	b.n	8015912 <_free_r+0x26>
 801595c:	d902      	bls.n	8015964 <_free_r+0x78>
 801595e:	230c      	movs	r3, #12
 8015960:	6003      	str	r3, [r0, #0]
 8015962:	e7d6      	b.n	8015912 <_free_r+0x26>
 8015964:	6825      	ldr	r5, [r4, #0]
 8015966:	1961      	adds	r1, r4, r5
 8015968:	428b      	cmp	r3, r1
 801596a:	bf04      	itt	eq
 801596c:	6819      	ldreq	r1, [r3, #0]
 801596e:	685b      	ldreq	r3, [r3, #4]
 8015970:	6063      	str	r3, [r4, #4]
 8015972:	bf04      	itt	eq
 8015974:	1949      	addeq	r1, r1, r5
 8015976:	6021      	streq	r1, [r4, #0]
 8015978:	6054      	str	r4, [r2, #4]
 801597a:	e7ca      	b.n	8015912 <_free_r+0x26>
 801597c:	b003      	add	sp, #12
 801597e:	bd30      	pop	{r4, r5, pc}
 8015980:	200087f8 	.word	0x200087f8

08015984 <sbrk_aligned>:
 8015984:	b570      	push	{r4, r5, r6, lr}
 8015986:	4e0e      	ldr	r6, [pc, #56]	; (80159c0 <sbrk_aligned+0x3c>)
 8015988:	460c      	mov	r4, r1
 801598a:	6831      	ldr	r1, [r6, #0]
 801598c:	4605      	mov	r5, r0
 801598e:	b911      	cbnz	r1, 8015996 <sbrk_aligned+0x12>
 8015990:	f000 fb7a 	bl	8016088 <_sbrk_r>
 8015994:	6030      	str	r0, [r6, #0]
 8015996:	4621      	mov	r1, r4
 8015998:	4628      	mov	r0, r5
 801599a:	f000 fb75 	bl	8016088 <_sbrk_r>
 801599e:	1c43      	adds	r3, r0, #1
 80159a0:	d00a      	beq.n	80159b8 <sbrk_aligned+0x34>
 80159a2:	1cc4      	adds	r4, r0, #3
 80159a4:	f024 0403 	bic.w	r4, r4, #3
 80159a8:	42a0      	cmp	r0, r4
 80159aa:	d007      	beq.n	80159bc <sbrk_aligned+0x38>
 80159ac:	1a21      	subs	r1, r4, r0
 80159ae:	4628      	mov	r0, r5
 80159b0:	f000 fb6a 	bl	8016088 <_sbrk_r>
 80159b4:	3001      	adds	r0, #1
 80159b6:	d101      	bne.n	80159bc <sbrk_aligned+0x38>
 80159b8:	f04f 34ff 	mov.w	r4, #4294967295
 80159bc:	4620      	mov	r0, r4
 80159be:	bd70      	pop	{r4, r5, r6, pc}
 80159c0:	200087fc 	.word	0x200087fc

080159c4 <_malloc_r>:
 80159c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159c8:	1ccd      	adds	r5, r1, #3
 80159ca:	f025 0503 	bic.w	r5, r5, #3
 80159ce:	3508      	adds	r5, #8
 80159d0:	2d0c      	cmp	r5, #12
 80159d2:	bf38      	it	cc
 80159d4:	250c      	movcc	r5, #12
 80159d6:	2d00      	cmp	r5, #0
 80159d8:	4607      	mov	r7, r0
 80159da:	db01      	blt.n	80159e0 <_malloc_r+0x1c>
 80159dc:	42a9      	cmp	r1, r5
 80159de:	d905      	bls.n	80159ec <_malloc_r+0x28>
 80159e0:	230c      	movs	r3, #12
 80159e2:	603b      	str	r3, [r7, #0]
 80159e4:	2600      	movs	r6, #0
 80159e6:	4630      	mov	r0, r6
 80159e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159ec:	4e2e      	ldr	r6, [pc, #184]	; (8015aa8 <_malloc_r+0xe4>)
 80159ee:	f000 fdc3 	bl	8016578 <__malloc_lock>
 80159f2:	6833      	ldr	r3, [r6, #0]
 80159f4:	461c      	mov	r4, r3
 80159f6:	bb34      	cbnz	r4, 8015a46 <_malloc_r+0x82>
 80159f8:	4629      	mov	r1, r5
 80159fa:	4638      	mov	r0, r7
 80159fc:	f7ff ffc2 	bl	8015984 <sbrk_aligned>
 8015a00:	1c43      	adds	r3, r0, #1
 8015a02:	4604      	mov	r4, r0
 8015a04:	d14d      	bne.n	8015aa2 <_malloc_r+0xde>
 8015a06:	6834      	ldr	r4, [r6, #0]
 8015a08:	4626      	mov	r6, r4
 8015a0a:	2e00      	cmp	r6, #0
 8015a0c:	d140      	bne.n	8015a90 <_malloc_r+0xcc>
 8015a0e:	6823      	ldr	r3, [r4, #0]
 8015a10:	4631      	mov	r1, r6
 8015a12:	4638      	mov	r0, r7
 8015a14:	eb04 0803 	add.w	r8, r4, r3
 8015a18:	f000 fb36 	bl	8016088 <_sbrk_r>
 8015a1c:	4580      	cmp	r8, r0
 8015a1e:	d13a      	bne.n	8015a96 <_malloc_r+0xd2>
 8015a20:	6821      	ldr	r1, [r4, #0]
 8015a22:	3503      	adds	r5, #3
 8015a24:	1a6d      	subs	r5, r5, r1
 8015a26:	f025 0503 	bic.w	r5, r5, #3
 8015a2a:	3508      	adds	r5, #8
 8015a2c:	2d0c      	cmp	r5, #12
 8015a2e:	bf38      	it	cc
 8015a30:	250c      	movcc	r5, #12
 8015a32:	4629      	mov	r1, r5
 8015a34:	4638      	mov	r0, r7
 8015a36:	f7ff ffa5 	bl	8015984 <sbrk_aligned>
 8015a3a:	3001      	adds	r0, #1
 8015a3c:	d02b      	beq.n	8015a96 <_malloc_r+0xd2>
 8015a3e:	6823      	ldr	r3, [r4, #0]
 8015a40:	442b      	add	r3, r5
 8015a42:	6023      	str	r3, [r4, #0]
 8015a44:	e00e      	b.n	8015a64 <_malloc_r+0xa0>
 8015a46:	6822      	ldr	r2, [r4, #0]
 8015a48:	1b52      	subs	r2, r2, r5
 8015a4a:	d41e      	bmi.n	8015a8a <_malloc_r+0xc6>
 8015a4c:	2a0b      	cmp	r2, #11
 8015a4e:	d916      	bls.n	8015a7e <_malloc_r+0xba>
 8015a50:	1961      	adds	r1, r4, r5
 8015a52:	42a3      	cmp	r3, r4
 8015a54:	6025      	str	r5, [r4, #0]
 8015a56:	bf18      	it	ne
 8015a58:	6059      	strne	r1, [r3, #4]
 8015a5a:	6863      	ldr	r3, [r4, #4]
 8015a5c:	bf08      	it	eq
 8015a5e:	6031      	streq	r1, [r6, #0]
 8015a60:	5162      	str	r2, [r4, r5]
 8015a62:	604b      	str	r3, [r1, #4]
 8015a64:	4638      	mov	r0, r7
 8015a66:	f104 060b 	add.w	r6, r4, #11
 8015a6a:	f000 fd8b 	bl	8016584 <__malloc_unlock>
 8015a6e:	f026 0607 	bic.w	r6, r6, #7
 8015a72:	1d23      	adds	r3, r4, #4
 8015a74:	1af2      	subs	r2, r6, r3
 8015a76:	d0b6      	beq.n	80159e6 <_malloc_r+0x22>
 8015a78:	1b9b      	subs	r3, r3, r6
 8015a7a:	50a3      	str	r3, [r4, r2]
 8015a7c:	e7b3      	b.n	80159e6 <_malloc_r+0x22>
 8015a7e:	6862      	ldr	r2, [r4, #4]
 8015a80:	42a3      	cmp	r3, r4
 8015a82:	bf0c      	ite	eq
 8015a84:	6032      	streq	r2, [r6, #0]
 8015a86:	605a      	strne	r2, [r3, #4]
 8015a88:	e7ec      	b.n	8015a64 <_malloc_r+0xa0>
 8015a8a:	4623      	mov	r3, r4
 8015a8c:	6864      	ldr	r4, [r4, #4]
 8015a8e:	e7b2      	b.n	80159f6 <_malloc_r+0x32>
 8015a90:	4634      	mov	r4, r6
 8015a92:	6876      	ldr	r6, [r6, #4]
 8015a94:	e7b9      	b.n	8015a0a <_malloc_r+0x46>
 8015a96:	230c      	movs	r3, #12
 8015a98:	603b      	str	r3, [r7, #0]
 8015a9a:	4638      	mov	r0, r7
 8015a9c:	f000 fd72 	bl	8016584 <__malloc_unlock>
 8015aa0:	e7a1      	b.n	80159e6 <_malloc_r+0x22>
 8015aa2:	6025      	str	r5, [r4, #0]
 8015aa4:	e7de      	b.n	8015a64 <_malloc_r+0xa0>
 8015aa6:	bf00      	nop
 8015aa8:	200087f8 	.word	0x200087f8

08015aac <__sfputc_r>:
 8015aac:	6893      	ldr	r3, [r2, #8]
 8015aae:	3b01      	subs	r3, #1
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	b410      	push	{r4}
 8015ab4:	6093      	str	r3, [r2, #8]
 8015ab6:	da08      	bge.n	8015aca <__sfputc_r+0x1e>
 8015ab8:	6994      	ldr	r4, [r2, #24]
 8015aba:	42a3      	cmp	r3, r4
 8015abc:	db01      	blt.n	8015ac2 <__sfputc_r+0x16>
 8015abe:	290a      	cmp	r1, #10
 8015ac0:	d103      	bne.n	8015aca <__sfputc_r+0x1e>
 8015ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ac6:	f000 bb33 	b.w	8016130 <__swbuf_r>
 8015aca:	6813      	ldr	r3, [r2, #0]
 8015acc:	1c58      	adds	r0, r3, #1
 8015ace:	6010      	str	r0, [r2, #0]
 8015ad0:	7019      	strb	r1, [r3, #0]
 8015ad2:	4608      	mov	r0, r1
 8015ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ad8:	4770      	bx	lr

08015ada <__sfputs_r>:
 8015ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015adc:	4606      	mov	r6, r0
 8015ade:	460f      	mov	r7, r1
 8015ae0:	4614      	mov	r4, r2
 8015ae2:	18d5      	adds	r5, r2, r3
 8015ae4:	42ac      	cmp	r4, r5
 8015ae6:	d101      	bne.n	8015aec <__sfputs_r+0x12>
 8015ae8:	2000      	movs	r0, #0
 8015aea:	e007      	b.n	8015afc <__sfputs_r+0x22>
 8015aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015af0:	463a      	mov	r2, r7
 8015af2:	4630      	mov	r0, r6
 8015af4:	f7ff ffda 	bl	8015aac <__sfputc_r>
 8015af8:	1c43      	adds	r3, r0, #1
 8015afa:	d1f3      	bne.n	8015ae4 <__sfputs_r+0xa>
 8015afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b00 <_vfiprintf_r>:
 8015b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b04:	460d      	mov	r5, r1
 8015b06:	b09d      	sub	sp, #116	; 0x74
 8015b08:	4614      	mov	r4, r2
 8015b0a:	4698      	mov	r8, r3
 8015b0c:	4606      	mov	r6, r0
 8015b0e:	b118      	cbz	r0, 8015b18 <_vfiprintf_r+0x18>
 8015b10:	6983      	ldr	r3, [r0, #24]
 8015b12:	b90b      	cbnz	r3, 8015b18 <_vfiprintf_r+0x18>
 8015b14:	f7ff fe30 	bl	8015778 <__sinit>
 8015b18:	4b89      	ldr	r3, [pc, #548]	; (8015d40 <_vfiprintf_r+0x240>)
 8015b1a:	429d      	cmp	r5, r3
 8015b1c:	d11b      	bne.n	8015b56 <_vfiprintf_r+0x56>
 8015b1e:	6875      	ldr	r5, [r6, #4]
 8015b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b22:	07d9      	lsls	r1, r3, #31
 8015b24:	d405      	bmi.n	8015b32 <_vfiprintf_r+0x32>
 8015b26:	89ab      	ldrh	r3, [r5, #12]
 8015b28:	059a      	lsls	r2, r3, #22
 8015b2a:	d402      	bmi.n	8015b32 <_vfiprintf_r+0x32>
 8015b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b2e:	f7ff fed3 	bl	80158d8 <__retarget_lock_acquire_recursive>
 8015b32:	89ab      	ldrh	r3, [r5, #12]
 8015b34:	071b      	lsls	r3, r3, #28
 8015b36:	d501      	bpl.n	8015b3c <_vfiprintf_r+0x3c>
 8015b38:	692b      	ldr	r3, [r5, #16]
 8015b3a:	b9eb      	cbnz	r3, 8015b78 <_vfiprintf_r+0x78>
 8015b3c:	4629      	mov	r1, r5
 8015b3e:	4630      	mov	r0, r6
 8015b40:	f000 fb5a 	bl	80161f8 <__swsetup_r>
 8015b44:	b1c0      	cbz	r0, 8015b78 <_vfiprintf_r+0x78>
 8015b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b48:	07dc      	lsls	r4, r3, #31
 8015b4a:	d50e      	bpl.n	8015b6a <_vfiprintf_r+0x6a>
 8015b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b50:	b01d      	add	sp, #116	; 0x74
 8015b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b56:	4b7b      	ldr	r3, [pc, #492]	; (8015d44 <_vfiprintf_r+0x244>)
 8015b58:	429d      	cmp	r5, r3
 8015b5a:	d101      	bne.n	8015b60 <_vfiprintf_r+0x60>
 8015b5c:	68b5      	ldr	r5, [r6, #8]
 8015b5e:	e7df      	b.n	8015b20 <_vfiprintf_r+0x20>
 8015b60:	4b79      	ldr	r3, [pc, #484]	; (8015d48 <_vfiprintf_r+0x248>)
 8015b62:	429d      	cmp	r5, r3
 8015b64:	bf08      	it	eq
 8015b66:	68f5      	ldreq	r5, [r6, #12]
 8015b68:	e7da      	b.n	8015b20 <_vfiprintf_r+0x20>
 8015b6a:	89ab      	ldrh	r3, [r5, #12]
 8015b6c:	0598      	lsls	r0, r3, #22
 8015b6e:	d4ed      	bmi.n	8015b4c <_vfiprintf_r+0x4c>
 8015b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b72:	f7ff feb2 	bl	80158da <__retarget_lock_release_recursive>
 8015b76:	e7e9      	b.n	8015b4c <_vfiprintf_r+0x4c>
 8015b78:	2300      	movs	r3, #0
 8015b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8015b7c:	2320      	movs	r3, #32
 8015b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b86:	2330      	movs	r3, #48	; 0x30
 8015b88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015d4c <_vfiprintf_r+0x24c>
 8015b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b90:	f04f 0901 	mov.w	r9, #1
 8015b94:	4623      	mov	r3, r4
 8015b96:	469a      	mov	sl, r3
 8015b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b9c:	b10a      	cbz	r2, 8015ba2 <_vfiprintf_r+0xa2>
 8015b9e:	2a25      	cmp	r2, #37	; 0x25
 8015ba0:	d1f9      	bne.n	8015b96 <_vfiprintf_r+0x96>
 8015ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8015ba6:	d00b      	beq.n	8015bc0 <_vfiprintf_r+0xc0>
 8015ba8:	465b      	mov	r3, fp
 8015baa:	4622      	mov	r2, r4
 8015bac:	4629      	mov	r1, r5
 8015bae:	4630      	mov	r0, r6
 8015bb0:	f7ff ff93 	bl	8015ada <__sfputs_r>
 8015bb4:	3001      	adds	r0, #1
 8015bb6:	f000 80aa 	beq.w	8015d0e <_vfiprintf_r+0x20e>
 8015bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bbc:	445a      	add	r2, fp
 8015bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8015bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	f000 80a2 	beq.w	8015d0e <_vfiprintf_r+0x20e>
 8015bca:	2300      	movs	r3, #0
 8015bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8015bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015bd4:	f10a 0a01 	add.w	sl, sl, #1
 8015bd8:	9304      	str	r3, [sp, #16]
 8015bda:	9307      	str	r3, [sp, #28]
 8015bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015be0:	931a      	str	r3, [sp, #104]	; 0x68
 8015be2:	4654      	mov	r4, sl
 8015be4:	2205      	movs	r2, #5
 8015be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bea:	4858      	ldr	r0, [pc, #352]	; (8015d4c <_vfiprintf_r+0x24c>)
 8015bec:	f7ea fb00 	bl	80001f0 <memchr>
 8015bf0:	9a04      	ldr	r2, [sp, #16]
 8015bf2:	b9d8      	cbnz	r0, 8015c2c <_vfiprintf_r+0x12c>
 8015bf4:	06d1      	lsls	r1, r2, #27
 8015bf6:	bf44      	itt	mi
 8015bf8:	2320      	movmi	r3, #32
 8015bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bfe:	0713      	lsls	r3, r2, #28
 8015c00:	bf44      	itt	mi
 8015c02:	232b      	movmi	r3, #43	; 0x2b
 8015c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c08:	f89a 3000 	ldrb.w	r3, [sl]
 8015c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8015c0e:	d015      	beq.n	8015c3c <_vfiprintf_r+0x13c>
 8015c10:	9a07      	ldr	r2, [sp, #28]
 8015c12:	4654      	mov	r4, sl
 8015c14:	2000      	movs	r0, #0
 8015c16:	f04f 0c0a 	mov.w	ip, #10
 8015c1a:	4621      	mov	r1, r4
 8015c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c20:	3b30      	subs	r3, #48	; 0x30
 8015c22:	2b09      	cmp	r3, #9
 8015c24:	d94e      	bls.n	8015cc4 <_vfiprintf_r+0x1c4>
 8015c26:	b1b0      	cbz	r0, 8015c56 <_vfiprintf_r+0x156>
 8015c28:	9207      	str	r2, [sp, #28]
 8015c2a:	e014      	b.n	8015c56 <_vfiprintf_r+0x156>
 8015c2c:	eba0 0308 	sub.w	r3, r0, r8
 8015c30:	fa09 f303 	lsl.w	r3, r9, r3
 8015c34:	4313      	orrs	r3, r2
 8015c36:	9304      	str	r3, [sp, #16]
 8015c38:	46a2      	mov	sl, r4
 8015c3a:	e7d2      	b.n	8015be2 <_vfiprintf_r+0xe2>
 8015c3c:	9b03      	ldr	r3, [sp, #12]
 8015c3e:	1d19      	adds	r1, r3, #4
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	9103      	str	r1, [sp, #12]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	bfbb      	ittet	lt
 8015c48:	425b      	neglt	r3, r3
 8015c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8015c4e:	9307      	strge	r3, [sp, #28]
 8015c50:	9307      	strlt	r3, [sp, #28]
 8015c52:	bfb8      	it	lt
 8015c54:	9204      	strlt	r2, [sp, #16]
 8015c56:	7823      	ldrb	r3, [r4, #0]
 8015c58:	2b2e      	cmp	r3, #46	; 0x2e
 8015c5a:	d10c      	bne.n	8015c76 <_vfiprintf_r+0x176>
 8015c5c:	7863      	ldrb	r3, [r4, #1]
 8015c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8015c60:	d135      	bne.n	8015cce <_vfiprintf_r+0x1ce>
 8015c62:	9b03      	ldr	r3, [sp, #12]
 8015c64:	1d1a      	adds	r2, r3, #4
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	9203      	str	r2, [sp, #12]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	bfb8      	it	lt
 8015c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c72:	3402      	adds	r4, #2
 8015c74:	9305      	str	r3, [sp, #20]
 8015c76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015d5c <_vfiprintf_r+0x25c>
 8015c7a:	7821      	ldrb	r1, [r4, #0]
 8015c7c:	2203      	movs	r2, #3
 8015c7e:	4650      	mov	r0, sl
 8015c80:	f7ea fab6 	bl	80001f0 <memchr>
 8015c84:	b140      	cbz	r0, 8015c98 <_vfiprintf_r+0x198>
 8015c86:	2340      	movs	r3, #64	; 0x40
 8015c88:	eba0 000a 	sub.w	r0, r0, sl
 8015c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8015c90:	9b04      	ldr	r3, [sp, #16]
 8015c92:	4303      	orrs	r3, r0
 8015c94:	3401      	adds	r4, #1
 8015c96:	9304      	str	r3, [sp, #16]
 8015c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c9c:	482c      	ldr	r0, [pc, #176]	; (8015d50 <_vfiprintf_r+0x250>)
 8015c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ca2:	2206      	movs	r2, #6
 8015ca4:	f7ea faa4 	bl	80001f0 <memchr>
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d03f      	beq.n	8015d2c <_vfiprintf_r+0x22c>
 8015cac:	4b29      	ldr	r3, [pc, #164]	; (8015d54 <_vfiprintf_r+0x254>)
 8015cae:	bb1b      	cbnz	r3, 8015cf8 <_vfiprintf_r+0x1f8>
 8015cb0:	9b03      	ldr	r3, [sp, #12]
 8015cb2:	3307      	adds	r3, #7
 8015cb4:	f023 0307 	bic.w	r3, r3, #7
 8015cb8:	3308      	adds	r3, #8
 8015cba:	9303      	str	r3, [sp, #12]
 8015cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cbe:	443b      	add	r3, r7
 8015cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8015cc2:	e767      	b.n	8015b94 <_vfiprintf_r+0x94>
 8015cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8015cc8:	460c      	mov	r4, r1
 8015cca:	2001      	movs	r0, #1
 8015ccc:	e7a5      	b.n	8015c1a <_vfiprintf_r+0x11a>
 8015cce:	2300      	movs	r3, #0
 8015cd0:	3401      	adds	r4, #1
 8015cd2:	9305      	str	r3, [sp, #20]
 8015cd4:	4619      	mov	r1, r3
 8015cd6:	f04f 0c0a 	mov.w	ip, #10
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ce0:	3a30      	subs	r2, #48	; 0x30
 8015ce2:	2a09      	cmp	r2, #9
 8015ce4:	d903      	bls.n	8015cee <_vfiprintf_r+0x1ee>
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d0c5      	beq.n	8015c76 <_vfiprintf_r+0x176>
 8015cea:	9105      	str	r1, [sp, #20]
 8015cec:	e7c3      	b.n	8015c76 <_vfiprintf_r+0x176>
 8015cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	e7f0      	b.n	8015cda <_vfiprintf_r+0x1da>
 8015cf8:	ab03      	add	r3, sp, #12
 8015cfa:	9300      	str	r3, [sp, #0]
 8015cfc:	462a      	mov	r2, r5
 8015cfe:	4b16      	ldr	r3, [pc, #88]	; (8015d58 <_vfiprintf_r+0x258>)
 8015d00:	a904      	add	r1, sp, #16
 8015d02:	4630      	mov	r0, r6
 8015d04:	f3af 8000 	nop.w
 8015d08:	4607      	mov	r7, r0
 8015d0a:	1c78      	adds	r0, r7, #1
 8015d0c:	d1d6      	bne.n	8015cbc <_vfiprintf_r+0x1bc>
 8015d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d10:	07d9      	lsls	r1, r3, #31
 8015d12:	d405      	bmi.n	8015d20 <_vfiprintf_r+0x220>
 8015d14:	89ab      	ldrh	r3, [r5, #12]
 8015d16:	059a      	lsls	r2, r3, #22
 8015d18:	d402      	bmi.n	8015d20 <_vfiprintf_r+0x220>
 8015d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d1c:	f7ff fddd 	bl	80158da <__retarget_lock_release_recursive>
 8015d20:	89ab      	ldrh	r3, [r5, #12]
 8015d22:	065b      	lsls	r3, r3, #25
 8015d24:	f53f af12 	bmi.w	8015b4c <_vfiprintf_r+0x4c>
 8015d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d2a:	e711      	b.n	8015b50 <_vfiprintf_r+0x50>
 8015d2c:	ab03      	add	r3, sp, #12
 8015d2e:	9300      	str	r3, [sp, #0]
 8015d30:	462a      	mov	r2, r5
 8015d32:	4b09      	ldr	r3, [pc, #36]	; (8015d58 <_vfiprintf_r+0x258>)
 8015d34:	a904      	add	r1, sp, #16
 8015d36:	4630      	mov	r0, r6
 8015d38:	f000 f880 	bl	8015e3c <_printf_i>
 8015d3c:	e7e4      	b.n	8015d08 <_vfiprintf_r+0x208>
 8015d3e:	bf00      	nop
 8015d40:	08019610 	.word	0x08019610
 8015d44:	08019630 	.word	0x08019630
 8015d48:	080195f0 	.word	0x080195f0
 8015d4c:	08019650 	.word	0x08019650
 8015d50:	0801965a 	.word	0x0801965a
 8015d54:	00000000 	.word	0x00000000
 8015d58:	08015adb 	.word	0x08015adb
 8015d5c:	08019656 	.word	0x08019656

08015d60 <_printf_common>:
 8015d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d64:	4616      	mov	r6, r2
 8015d66:	4699      	mov	r9, r3
 8015d68:	688a      	ldr	r2, [r1, #8]
 8015d6a:	690b      	ldr	r3, [r1, #16]
 8015d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015d70:	4293      	cmp	r3, r2
 8015d72:	bfb8      	it	lt
 8015d74:	4613      	movlt	r3, r2
 8015d76:	6033      	str	r3, [r6, #0]
 8015d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015d7c:	4607      	mov	r7, r0
 8015d7e:	460c      	mov	r4, r1
 8015d80:	b10a      	cbz	r2, 8015d86 <_printf_common+0x26>
 8015d82:	3301      	adds	r3, #1
 8015d84:	6033      	str	r3, [r6, #0]
 8015d86:	6823      	ldr	r3, [r4, #0]
 8015d88:	0699      	lsls	r1, r3, #26
 8015d8a:	bf42      	ittt	mi
 8015d8c:	6833      	ldrmi	r3, [r6, #0]
 8015d8e:	3302      	addmi	r3, #2
 8015d90:	6033      	strmi	r3, [r6, #0]
 8015d92:	6825      	ldr	r5, [r4, #0]
 8015d94:	f015 0506 	ands.w	r5, r5, #6
 8015d98:	d106      	bne.n	8015da8 <_printf_common+0x48>
 8015d9a:	f104 0a19 	add.w	sl, r4, #25
 8015d9e:	68e3      	ldr	r3, [r4, #12]
 8015da0:	6832      	ldr	r2, [r6, #0]
 8015da2:	1a9b      	subs	r3, r3, r2
 8015da4:	42ab      	cmp	r3, r5
 8015da6:	dc26      	bgt.n	8015df6 <_printf_common+0x96>
 8015da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015dac:	1e13      	subs	r3, r2, #0
 8015dae:	6822      	ldr	r2, [r4, #0]
 8015db0:	bf18      	it	ne
 8015db2:	2301      	movne	r3, #1
 8015db4:	0692      	lsls	r2, r2, #26
 8015db6:	d42b      	bmi.n	8015e10 <_printf_common+0xb0>
 8015db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015dbc:	4649      	mov	r1, r9
 8015dbe:	4638      	mov	r0, r7
 8015dc0:	47c0      	blx	r8
 8015dc2:	3001      	adds	r0, #1
 8015dc4:	d01e      	beq.n	8015e04 <_printf_common+0xa4>
 8015dc6:	6823      	ldr	r3, [r4, #0]
 8015dc8:	68e5      	ldr	r5, [r4, #12]
 8015dca:	6832      	ldr	r2, [r6, #0]
 8015dcc:	f003 0306 	and.w	r3, r3, #6
 8015dd0:	2b04      	cmp	r3, #4
 8015dd2:	bf08      	it	eq
 8015dd4:	1aad      	subeq	r5, r5, r2
 8015dd6:	68a3      	ldr	r3, [r4, #8]
 8015dd8:	6922      	ldr	r2, [r4, #16]
 8015dda:	bf0c      	ite	eq
 8015ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015de0:	2500      	movne	r5, #0
 8015de2:	4293      	cmp	r3, r2
 8015de4:	bfc4      	itt	gt
 8015de6:	1a9b      	subgt	r3, r3, r2
 8015de8:	18ed      	addgt	r5, r5, r3
 8015dea:	2600      	movs	r6, #0
 8015dec:	341a      	adds	r4, #26
 8015dee:	42b5      	cmp	r5, r6
 8015df0:	d11a      	bne.n	8015e28 <_printf_common+0xc8>
 8015df2:	2000      	movs	r0, #0
 8015df4:	e008      	b.n	8015e08 <_printf_common+0xa8>
 8015df6:	2301      	movs	r3, #1
 8015df8:	4652      	mov	r2, sl
 8015dfa:	4649      	mov	r1, r9
 8015dfc:	4638      	mov	r0, r7
 8015dfe:	47c0      	blx	r8
 8015e00:	3001      	adds	r0, #1
 8015e02:	d103      	bne.n	8015e0c <_printf_common+0xac>
 8015e04:	f04f 30ff 	mov.w	r0, #4294967295
 8015e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e0c:	3501      	adds	r5, #1
 8015e0e:	e7c6      	b.n	8015d9e <_printf_common+0x3e>
 8015e10:	18e1      	adds	r1, r4, r3
 8015e12:	1c5a      	adds	r2, r3, #1
 8015e14:	2030      	movs	r0, #48	; 0x30
 8015e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e1a:	4422      	add	r2, r4
 8015e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e24:	3302      	adds	r3, #2
 8015e26:	e7c7      	b.n	8015db8 <_printf_common+0x58>
 8015e28:	2301      	movs	r3, #1
 8015e2a:	4622      	mov	r2, r4
 8015e2c:	4649      	mov	r1, r9
 8015e2e:	4638      	mov	r0, r7
 8015e30:	47c0      	blx	r8
 8015e32:	3001      	adds	r0, #1
 8015e34:	d0e6      	beq.n	8015e04 <_printf_common+0xa4>
 8015e36:	3601      	adds	r6, #1
 8015e38:	e7d9      	b.n	8015dee <_printf_common+0x8e>
	...

08015e3c <_printf_i>:
 8015e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e40:	7e0f      	ldrb	r7, [r1, #24]
 8015e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e44:	2f78      	cmp	r7, #120	; 0x78
 8015e46:	4691      	mov	r9, r2
 8015e48:	4680      	mov	r8, r0
 8015e4a:	460c      	mov	r4, r1
 8015e4c:	469a      	mov	sl, r3
 8015e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015e52:	d807      	bhi.n	8015e64 <_printf_i+0x28>
 8015e54:	2f62      	cmp	r7, #98	; 0x62
 8015e56:	d80a      	bhi.n	8015e6e <_printf_i+0x32>
 8015e58:	2f00      	cmp	r7, #0
 8015e5a:	f000 80d8 	beq.w	801600e <_printf_i+0x1d2>
 8015e5e:	2f58      	cmp	r7, #88	; 0x58
 8015e60:	f000 80a3 	beq.w	8015faa <_printf_i+0x16e>
 8015e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015e6c:	e03a      	b.n	8015ee4 <_printf_i+0xa8>
 8015e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015e72:	2b15      	cmp	r3, #21
 8015e74:	d8f6      	bhi.n	8015e64 <_printf_i+0x28>
 8015e76:	a101      	add	r1, pc, #4	; (adr r1, 8015e7c <_printf_i+0x40>)
 8015e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e7c:	08015ed5 	.word	0x08015ed5
 8015e80:	08015ee9 	.word	0x08015ee9
 8015e84:	08015e65 	.word	0x08015e65
 8015e88:	08015e65 	.word	0x08015e65
 8015e8c:	08015e65 	.word	0x08015e65
 8015e90:	08015e65 	.word	0x08015e65
 8015e94:	08015ee9 	.word	0x08015ee9
 8015e98:	08015e65 	.word	0x08015e65
 8015e9c:	08015e65 	.word	0x08015e65
 8015ea0:	08015e65 	.word	0x08015e65
 8015ea4:	08015e65 	.word	0x08015e65
 8015ea8:	08015ff5 	.word	0x08015ff5
 8015eac:	08015f19 	.word	0x08015f19
 8015eb0:	08015fd7 	.word	0x08015fd7
 8015eb4:	08015e65 	.word	0x08015e65
 8015eb8:	08015e65 	.word	0x08015e65
 8015ebc:	08016017 	.word	0x08016017
 8015ec0:	08015e65 	.word	0x08015e65
 8015ec4:	08015f19 	.word	0x08015f19
 8015ec8:	08015e65 	.word	0x08015e65
 8015ecc:	08015e65 	.word	0x08015e65
 8015ed0:	08015fdf 	.word	0x08015fdf
 8015ed4:	682b      	ldr	r3, [r5, #0]
 8015ed6:	1d1a      	adds	r2, r3, #4
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	602a      	str	r2, [r5, #0]
 8015edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	e0a3      	b.n	8016030 <_printf_i+0x1f4>
 8015ee8:	6820      	ldr	r0, [r4, #0]
 8015eea:	6829      	ldr	r1, [r5, #0]
 8015eec:	0606      	lsls	r6, r0, #24
 8015eee:	f101 0304 	add.w	r3, r1, #4
 8015ef2:	d50a      	bpl.n	8015f0a <_printf_i+0xce>
 8015ef4:	680e      	ldr	r6, [r1, #0]
 8015ef6:	602b      	str	r3, [r5, #0]
 8015ef8:	2e00      	cmp	r6, #0
 8015efa:	da03      	bge.n	8015f04 <_printf_i+0xc8>
 8015efc:	232d      	movs	r3, #45	; 0x2d
 8015efe:	4276      	negs	r6, r6
 8015f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f04:	485e      	ldr	r0, [pc, #376]	; (8016080 <_printf_i+0x244>)
 8015f06:	230a      	movs	r3, #10
 8015f08:	e019      	b.n	8015f3e <_printf_i+0x102>
 8015f0a:	680e      	ldr	r6, [r1, #0]
 8015f0c:	602b      	str	r3, [r5, #0]
 8015f0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f12:	bf18      	it	ne
 8015f14:	b236      	sxthne	r6, r6
 8015f16:	e7ef      	b.n	8015ef8 <_printf_i+0xbc>
 8015f18:	682b      	ldr	r3, [r5, #0]
 8015f1a:	6820      	ldr	r0, [r4, #0]
 8015f1c:	1d19      	adds	r1, r3, #4
 8015f1e:	6029      	str	r1, [r5, #0]
 8015f20:	0601      	lsls	r1, r0, #24
 8015f22:	d501      	bpl.n	8015f28 <_printf_i+0xec>
 8015f24:	681e      	ldr	r6, [r3, #0]
 8015f26:	e002      	b.n	8015f2e <_printf_i+0xf2>
 8015f28:	0646      	lsls	r6, r0, #25
 8015f2a:	d5fb      	bpl.n	8015f24 <_printf_i+0xe8>
 8015f2c:	881e      	ldrh	r6, [r3, #0]
 8015f2e:	4854      	ldr	r0, [pc, #336]	; (8016080 <_printf_i+0x244>)
 8015f30:	2f6f      	cmp	r7, #111	; 0x6f
 8015f32:	bf0c      	ite	eq
 8015f34:	2308      	moveq	r3, #8
 8015f36:	230a      	movne	r3, #10
 8015f38:	2100      	movs	r1, #0
 8015f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f3e:	6865      	ldr	r5, [r4, #4]
 8015f40:	60a5      	str	r5, [r4, #8]
 8015f42:	2d00      	cmp	r5, #0
 8015f44:	bfa2      	ittt	ge
 8015f46:	6821      	ldrge	r1, [r4, #0]
 8015f48:	f021 0104 	bicge.w	r1, r1, #4
 8015f4c:	6021      	strge	r1, [r4, #0]
 8015f4e:	b90e      	cbnz	r6, 8015f54 <_printf_i+0x118>
 8015f50:	2d00      	cmp	r5, #0
 8015f52:	d04d      	beq.n	8015ff0 <_printf_i+0x1b4>
 8015f54:	4615      	mov	r5, r2
 8015f56:	fbb6 f1f3 	udiv	r1, r6, r3
 8015f5a:	fb03 6711 	mls	r7, r3, r1, r6
 8015f5e:	5dc7      	ldrb	r7, [r0, r7]
 8015f60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015f64:	4637      	mov	r7, r6
 8015f66:	42bb      	cmp	r3, r7
 8015f68:	460e      	mov	r6, r1
 8015f6a:	d9f4      	bls.n	8015f56 <_printf_i+0x11a>
 8015f6c:	2b08      	cmp	r3, #8
 8015f6e:	d10b      	bne.n	8015f88 <_printf_i+0x14c>
 8015f70:	6823      	ldr	r3, [r4, #0]
 8015f72:	07de      	lsls	r6, r3, #31
 8015f74:	d508      	bpl.n	8015f88 <_printf_i+0x14c>
 8015f76:	6923      	ldr	r3, [r4, #16]
 8015f78:	6861      	ldr	r1, [r4, #4]
 8015f7a:	4299      	cmp	r1, r3
 8015f7c:	bfde      	ittt	le
 8015f7e:	2330      	movle	r3, #48	; 0x30
 8015f80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015f84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015f88:	1b52      	subs	r2, r2, r5
 8015f8a:	6122      	str	r2, [r4, #16]
 8015f8c:	f8cd a000 	str.w	sl, [sp]
 8015f90:	464b      	mov	r3, r9
 8015f92:	aa03      	add	r2, sp, #12
 8015f94:	4621      	mov	r1, r4
 8015f96:	4640      	mov	r0, r8
 8015f98:	f7ff fee2 	bl	8015d60 <_printf_common>
 8015f9c:	3001      	adds	r0, #1
 8015f9e:	d14c      	bne.n	801603a <_printf_i+0x1fe>
 8015fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fa4:	b004      	add	sp, #16
 8015fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015faa:	4835      	ldr	r0, [pc, #212]	; (8016080 <_printf_i+0x244>)
 8015fac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015fb0:	6829      	ldr	r1, [r5, #0]
 8015fb2:	6823      	ldr	r3, [r4, #0]
 8015fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8015fb8:	6029      	str	r1, [r5, #0]
 8015fba:	061d      	lsls	r5, r3, #24
 8015fbc:	d514      	bpl.n	8015fe8 <_printf_i+0x1ac>
 8015fbe:	07df      	lsls	r7, r3, #31
 8015fc0:	bf44      	itt	mi
 8015fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8015fc6:	6023      	strmi	r3, [r4, #0]
 8015fc8:	b91e      	cbnz	r6, 8015fd2 <_printf_i+0x196>
 8015fca:	6823      	ldr	r3, [r4, #0]
 8015fcc:	f023 0320 	bic.w	r3, r3, #32
 8015fd0:	6023      	str	r3, [r4, #0]
 8015fd2:	2310      	movs	r3, #16
 8015fd4:	e7b0      	b.n	8015f38 <_printf_i+0xfc>
 8015fd6:	6823      	ldr	r3, [r4, #0]
 8015fd8:	f043 0320 	orr.w	r3, r3, #32
 8015fdc:	6023      	str	r3, [r4, #0]
 8015fde:	2378      	movs	r3, #120	; 0x78
 8015fe0:	4828      	ldr	r0, [pc, #160]	; (8016084 <_printf_i+0x248>)
 8015fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015fe6:	e7e3      	b.n	8015fb0 <_printf_i+0x174>
 8015fe8:	0659      	lsls	r1, r3, #25
 8015fea:	bf48      	it	mi
 8015fec:	b2b6      	uxthmi	r6, r6
 8015fee:	e7e6      	b.n	8015fbe <_printf_i+0x182>
 8015ff0:	4615      	mov	r5, r2
 8015ff2:	e7bb      	b.n	8015f6c <_printf_i+0x130>
 8015ff4:	682b      	ldr	r3, [r5, #0]
 8015ff6:	6826      	ldr	r6, [r4, #0]
 8015ff8:	6961      	ldr	r1, [r4, #20]
 8015ffa:	1d18      	adds	r0, r3, #4
 8015ffc:	6028      	str	r0, [r5, #0]
 8015ffe:	0635      	lsls	r5, r6, #24
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	d501      	bpl.n	8016008 <_printf_i+0x1cc>
 8016004:	6019      	str	r1, [r3, #0]
 8016006:	e002      	b.n	801600e <_printf_i+0x1d2>
 8016008:	0670      	lsls	r0, r6, #25
 801600a:	d5fb      	bpl.n	8016004 <_printf_i+0x1c8>
 801600c:	8019      	strh	r1, [r3, #0]
 801600e:	2300      	movs	r3, #0
 8016010:	6123      	str	r3, [r4, #16]
 8016012:	4615      	mov	r5, r2
 8016014:	e7ba      	b.n	8015f8c <_printf_i+0x150>
 8016016:	682b      	ldr	r3, [r5, #0]
 8016018:	1d1a      	adds	r2, r3, #4
 801601a:	602a      	str	r2, [r5, #0]
 801601c:	681d      	ldr	r5, [r3, #0]
 801601e:	6862      	ldr	r2, [r4, #4]
 8016020:	2100      	movs	r1, #0
 8016022:	4628      	mov	r0, r5
 8016024:	f7ea f8e4 	bl	80001f0 <memchr>
 8016028:	b108      	cbz	r0, 801602e <_printf_i+0x1f2>
 801602a:	1b40      	subs	r0, r0, r5
 801602c:	6060      	str	r0, [r4, #4]
 801602e:	6863      	ldr	r3, [r4, #4]
 8016030:	6123      	str	r3, [r4, #16]
 8016032:	2300      	movs	r3, #0
 8016034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016038:	e7a8      	b.n	8015f8c <_printf_i+0x150>
 801603a:	6923      	ldr	r3, [r4, #16]
 801603c:	462a      	mov	r2, r5
 801603e:	4649      	mov	r1, r9
 8016040:	4640      	mov	r0, r8
 8016042:	47d0      	blx	sl
 8016044:	3001      	adds	r0, #1
 8016046:	d0ab      	beq.n	8015fa0 <_printf_i+0x164>
 8016048:	6823      	ldr	r3, [r4, #0]
 801604a:	079b      	lsls	r3, r3, #30
 801604c:	d413      	bmi.n	8016076 <_printf_i+0x23a>
 801604e:	68e0      	ldr	r0, [r4, #12]
 8016050:	9b03      	ldr	r3, [sp, #12]
 8016052:	4298      	cmp	r0, r3
 8016054:	bfb8      	it	lt
 8016056:	4618      	movlt	r0, r3
 8016058:	e7a4      	b.n	8015fa4 <_printf_i+0x168>
 801605a:	2301      	movs	r3, #1
 801605c:	4632      	mov	r2, r6
 801605e:	4649      	mov	r1, r9
 8016060:	4640      	mov	r0, r8
 8016062:	47d0      	blx	sl
 8016064:	3001      	adds	r0, #1
 8016066:	d09b      	beq.n	8015fa0 <_printf_i+0x164>
 8016068:	3501      	adds	r5, #1
 801606a:	68e3      	ldr	r3, [r4, #12]
 801606c:	9903      	ldr	r1, [sp, #12]
 801606e:	1a5b      	subs	r3, r3, r1
 8016070:	42ab      	cmp	r3, r5
 8016072:	dcf2      	bgt.n	801605a <_printf_i+0x21e>
 8016074:	e7eb      	b.n	801604e <_printf_i+0x212>
 8016076:	2500      	movs	r5, #0
 8016078:	f104 0619 	add.w	r6, r4, #25
 801607c:	e7f5      	b.n	801606a <_printf_i+0x22e>
 801607e:	bf00      	nop
 8016080:	08019661 	.word	0x08019661
 8016084:	08019672 	.word	0x08019672

08016088 <_sbrk_r>:
 8016088:	b538      	push	{r3, r4, r5, lr}
 801608a:	4d06      	ldr	r5, [pc, #24]	; (80160a4 <_sbrk_r+0x1c>)
 801608c:	2300      	movs	r3, #0
 801608e:	4604      	mov	r4, r0
 8016090:	4608      	mov	r0, r1
 8016092:	602b      	str	r3, [r5, #0]
 8016094:	f7eb fb9a 	bl	80017cc <_sbrk>
 8016098:	1c43      	adds	r3, r0, #1
 801609a:	d102      	bne.n	80160a2 <_sbrk_r+0x1a>
 801609c:	682b      	ldr	r3, [r5, #0]
 801609e:	b103      	cbz	r3, 80160a2 <_sbrk_r+0x1a>
 80160a0:	6023      	str	r3, [r4, #0]
 80160a2:	bd38      	pop	{r3, r4, r5, pc}
 80160a4:	200087f0 	.word	0x200087f0

080160a8 <__sread>:
 80160a8:	b510      	push	{r4, lr}
 80160aa:	460c      	mov	r4, r1
 80160ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160b0:	f000 fa6e 	bl	8016590 <_read_r>
 80160b4:	2800      	cmp	r0, #0
 80160b6:	bfab      	itete	ge
 80160b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80160ba:	89a3      	ldrhlt	r3, [r4, #12]
 80160bc:	181b      	addge	r3, r3, r0
 80160be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80160c2:	bfac      	ite	ge
 80160c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80160c6:	81a3      	strhlt	r3, [r4, #12]
 80160c8:	bd10      	pop	{r4, pc}

080160ca <__swrite>:
 80160ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ce:	461f      	mov	r7, r3
 80160d0:	898b      	ldrh	r3, [r1, #12]
 80160d2:	05db      	lsls	r3, r3, #23
 80160d4:	4605      	mov	r5, r0
 80160d6:	460c      	mov	r4, r1
 80160d8:	4616      	mov	r6, r2
 80160da:	d505      	bpl.n	80160e8 <__swrite+0x1e>
 80160dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160e0:	2302      	movs	r3, #2
 80160e2:	2200      	movs	r2, #0
 80160e4:	f000 f9d0 	bl	8016488 <_lseek_r>
 80160e8:	89a3      	ldrh	r3, [r4, #12]
 80160ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80160f2:	81a3      	strh	r3, [r4, #12]
 80160f4:	4632      	mov	r2, r6
 80160f6:	463b      	mov	r3, r7
 80160f8:	4628      	mov	r0, r5
 80160fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160fe:	f000 b869 	b.w	80161d4 <_write_r>

08016102 <__sseek>:
 8016102:	b510      	push	{r4, lr}
 8016104:	460c      	mov	r4, r1
 8016106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801610a:	f000 f9bd 	bl	8016488 <_lseek_r>
 801610e:	1c43      	adds	r3, r0, #1
 8016110:	89a3      	ldrh	r3, [r4, #12]
 8016112:	bf15      	itete	ne
 8016114:	6560      	strne	r0, [r4, #84]	; 0x54
 8016116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801611a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801611e:	81a3      	strheq	r3, [r4, #12]
 8016120:	bf18      	it	ne
 8016122:	81a3      	strhne	r3, [r4, #12]
 8016124:	bd10      	pop	{r4, pc}

08016126 <__sclose>:
 8016126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801612a:	f000 b8db 	b.w	80162e4 <_close_r>
	...

08016130 <__swbuf_r>:
 8016130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016132:	460e      	mov	r6, r1
 8016134:	4614      	mov	r4, r2
 8016136:	4605      	mov	r5, r0
 8016138:	b118      	cbz	r0, 8016142 <__swbuf_r+0x12>
 801613a:	6983      	ldr	r3, [r0, #24]
 801613c:	b90b      	cbnz	r3, 8016142 <__swbuf_r+0x12>
 801613e:	f7ff fb1b 	bl	8015778 <__sinit>
 8016142:	4b21      	ldr	r3, [pc, #132]	; (80161c8 <__swbuf_r+0x98>)
 8016144:	429c      	cmp	r4, r3
 8016146:	d12b      	bne.n	80161a0 <__swbuf_r+0x70>
 8016148:	686c      	ldr	r4, [r5, #4]
 801614a:	69a3      	ldr	r3, [r4, #24]
 801614c:	60a3      	str	r3, [r4, #8]
 801614e:	89a3      	ldrh	r3, [r4, #12]
 8016150:	071a      	lsls	r2, r3, #28
 8016152:	d52f      	bpl.n	80161b4 <__swbuf_r+0x84>
 8016154:	6923      	ldr	r3, [r4, #16]
 8016156:	b36b      	cbz	r3, 80161b4 <__swbuf_r+0x84>
 8016158:	6923      	ldr	r3, [r4, #16]
 801615a:	6820      	ldr	r0, [r4, #0]
 801615c:	1ac0      	subs	r0, r0, r3
 801615e:	6963      	ldr	r3, [r4, #20]
 8016160:	b2f6      	uxtb	r6, r6
 8016162:	4283      	cmp	r3, r0
 8016164:	4637      	mov	r7, r6
 8016166:	dc04      	bgt.n	8016172 <__swbuf_r+0x42>
 8016168:	4621      	mov	r1, r4
 801616a:	4628      	mov	r0, r5
 801616c:	f000 f950 	bl	8016410 <_fflush_r>
 8016170:	bb30      	cbnz	r0, 80161c0 <__swbuf_r+0x90>
 8016172:	68a3      	ldr	r3, [r4, #8]
 8016174:	3b01      	subs	r3, #1
 8016176:	60a3      	str	r3, [r4, #8]
 8016178:	6823      	ldr	r3, [r4, #0]
 801617a:	1c5a      	adds	r2, r3, #1
 801617c:	6022      	str	r2, [r4, #0]
 801617e:	701e      	strb	r6, [r3, #0]
 8016180:	6963      	ldr	r3, [r4, #20]
 8016182:	3001      	adds	r0, #1
 8016184:	4283      	cmp	r3, r0
 8016186:	d004      	beq.n	8016192 <__swbuf_r+0x62>
 8016188:	89a3      	ldrh	r3, [r4, #12]
 801618a:	07db      	lsls	r3, r3, #31
 801618c:	d506      	bpl.n	801619c <__swbuf_r+0x6c>
 801618e:	2e0a      	cmp	r6, #10
 8016190:	d104      	bne.n	801619c <__swbuf_r+0x6c>
 8016192:	4621      	mov	r1, r4
 8016194:	4628      	mov	r0, r5
 8016196:	f000 f93b 	bl	8016410 <_fflush_r>
 801619a:	b988      	cbnz	r0, 80161c0 <__swbuf_r+0x90>
 801619c:	4638      	mov	r0, r7
 801619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161a0:	4b0a      	ldr	r3, [pc, #40]	; (80161cc <__swbuf_r+0x9c>)
 80161a2:	429c      	cmp	r4, r3
 80161a4:	d101      	bne.n	80161aa <__swbuf_r+0x7a>
 80161a6:	68ac      	ldr	r4, [r5, #8]
 80161a8:	e7cf      	b.n	801614a <__swbuf_r+0x1a>
 80161aa:	4b09      	ldr	r3, [pc, #36]	; (80161d0 <__swbuf_r+0xa0>)
 80161ac:	429c      	cmp	r4, r3
 80161ae:	bf08      	it	eq
 80161b0:	68ec      	ldreq	r4, [r5, #12]
 80161b2:	e7ca      	b.n	801614a <__swbuf_r+0x1a>
 80161b4:	4621      	mov	r1, r4
 80161b6:	4628      	mov	r0, r5
 80161b8:	f000 f81e 	bl	80161f8 <__swsetup_r>
 80161bc:	2800      	cmp	r0, #0
 80161be:	d0cb      	beq.n	8016158 <__swbuf_r+0x28>
 80161c0:	f04f 37ff 	mov.w	r7, #4294967295
 80161c4:	e7ea      	b.n	801619c <__swbuf_r+0x6c>
 80161c6:	bf00      	nop
 80161c8:	08019610 	.word	0x08019610
 80161cc:	08019630 	.word	0x08019630
 80161d0:	080195f0 	.word	0x080195f0

080161d4 <_write_r>:
 80161d4:	b538      	push	{r3, r4, r5, lr}
 80161d6:	4d07      	ldr	r5, [pc, #28]	; (80161f4 <_write_r+0x20>)
 80161d8:	4604      	mov	r4, r0
 80161da:	4608      	mov	r0, r1
 80161dc:	4611      	mov	r1, r2
 80161de:	2200      	movs	r2, #0
 80161e0:	602a      	str	r2, [r5, #0]
 80161e2:	461a      	mov	r2, r3
 80161e4:	f7eb faa1 	bl	800172a <_write>
 80161e8:	1c43      	adds	r3, r0, #1
 80161ea:	d102      	bne.n	80161f2 <_write_r+0x1e>
 80161ec:	682b      	ldr	r3, [r5, #0]
 80161ee:	b103      	cbz	r3, 80161f2 <_write_r+0x1e>
 80161f0:	6023      	str	r3, [r4, #0]
 80161f2:	bd38      	pop	{r3, r4, r5, pc}
 80161f4:	200087f0 	.word	0x200087f0

080161f8 <__swsetup_r>:
 80161f8:	4b32      	ldr	r3, [pc, #200]	; (80162c4 <__swsetup_r+0xcc>)
 80161fa:	b570      	push	{r4, r5, r6, lr}
 80161fc:	681d      	ldr	r5, [r3, #0]
 80161fe:	4606      	mov	r6, r0
 8016200:	460c      	mov	r4, r1
 8016202:	b125      	cbz	r5, 801620e <__swsetup_r+0x16>
 8016204:	69ab      	ldr	r3, [r5, #24]
 8016206:	b913      	cbnz	r3, 801620e <__swsetup_r+0x16>
 8016208:	4628      	mov	r0, r5
 801620a:	f7ff fab5 	bl	8015778 <__sinit>
 801620e:	4b2e      	ldr	r3, [pc, #184]	; (80162c8 <__swsetup_r+0xd0>)
 8016210:	429c      	cmp	r4, r3
 8016212:	d10f      	bne.n	8016234 <__swsetup_r+0x3c>
 8016214:	686c      	ldr	r4, [r5, #4]
 8016216:	89a3      	ldrh	r3, [r4, #12]
 8016218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801621c:	0719      	lsls	r1, r3, #28
 801621e:	d42c      	bmi.n	801627a <__swsetup_r+0x82>
 8016220:	06dd      	lsls	r5, r3, #27
 8016222:	d411      	bmi.n	8016248 <__swsetup_r+0x50>
 8016224:	2309      	movs	r3, #9
 8016226:	6033      	str	r3, [r6, #0]
 8016228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801622c:	81a3      	strh	r3, [r4, #12]
 801622e:	f04f 30ff 	mov.w	r0, #4294967295
 8016232:	e03e      	b.n	80162b2 <__swsetup_r+0xba>
 8016234:	4b25      	ldr	r3, [pc, #148]	; (80162cc <__swsetup_r+0xd4>)
 8016236:	429c      	cmp	r4, r3
 8016238:	d101      	bne.n	801623e <__swsetup_r+0x46>
 801623a:	68ac      	ldr	r4, [r5, #8]
 801623c:	e7eb      	b.n	8016216 <__swsetup_r+0x1e>
 801623e:	4b24      	ldr	r3, [pc, #144]	; (80162d0 <__swsetup_r+0xd8>)
 8016240:	429c      	cmp	r4, r3
 8016242:	bf08      	it	eq
 8016244:	68ec      	ldreq	r4, [r5, #12]
 8016246:	e7e6      	b.n	8016216 <__swsetup_r+0x1e>
 8016248:	0758      	lsls	r0, r3, #29
 801624a:	d512      	bpl.n	8016272 <__swsetup_r+0x7a>
 801624c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801624e:	b141      	cbz	r1, 8016262 <__swsetup_r+0x6a>
 8016250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016254:	4299      	cmp	r1, r3
 8016256:	d002      	beq.n	801625e <__swsetup_r+0x66>
 8016258:	4630      	mov	r0, r6
 801625a:	f7ff fb47 	bl	80158ec <_free_r>
 801625e:	2300      	movs	r3, #0
 8016260:	6363      	str	r3, [r4, #52]	; 0x34
 8016262:	89a3      	ldrh	r3, [r4, #12]
 8016264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016268:	81a3      	strh	r3, [r4, #12]
 801626a:	2300      	movs	r3, #0
 801626c:	6063      	str	r3, [r4, #4]
 801626e:	6923      	ldr	r3, [r4, #16]
 8016270:	6023      	str	r3, [r4, #0]
 8016272:	89a3      	ldrh	r3, [r4, #12]
 8016274:	f043 0308 	orr.w	r3, r3, #8
 8016278:	81a3      	strh	r3, [r4, #12]
 801627a:	6923      	ldr	r3, [r4, #16]
 801627c:	b94b      	cbnz	r3, 8016292 <__swsetup_r+0x9a>
 801627e:	89a3      	ldrh	r3, [r4, #12]
 8016280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016288:	d003      	beq.n	8016292 <__swsetup_r+0x9a>
 801628a:	4621      	mov	r1, r4
 801628c:	4630      	mov	r0, r6
 801628e:	f000 f933 	bl	80164f8 <__smakebuf_r>
 8016292:	89a0      	ldrh	r0, [r4, #12]
 8016294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016298:	f010 0301 	ands.w	r3, r0, #1
 801629c:	d00a      	beq.n	80162b4 <__swsetup_r+0xbc>
 801629e:	2300      	movs	r3, #0
 80162a0:	60a3      	str	r3, [r4, #8]
 80162a2:	6963      	ldr	r3, [r4, #20]
 80162a4:	425b      	negs	r3, r3
 80162a6:	61a3      	str	r3, [r4, #24]
 80162a8:	6923      	ldr	r3, [r4, #16]
 80162aa:	b943      	cbnz	r3, 80162be <__swsetup_r+0xc6>
 80162ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80162b0:	d1ba      	bne.n	8016228 <__swsetup_r+0x30>
 80162b2:	bd70      	pop	{r4, r5, r6, pc}
 80162b4:	0781      	lsls	r1, r0, #30
 80162b6:	bf58      	it	pl
 80162b8:	6963      	ldrpl	r3, [r4, #20]
 80162ba:	60a3      	str	r3, [r4, #8]
 80162bc:	e7f4      	b.n	80162a8 <__swsetup_r+0xb0>
 80162be:	2000      	movs	r0, #0
 80162c0:	e7f7      	b.n	80162b2 <__swsetup_r+0xba>
 80162c2:	bf00      	nop
 80162c4:	20000044 	.word	0x20000044
 80162c8:	08019610 	.word	0x08019610
 80162cc:	08019630 	.word	0x08019630
 80162d0:	080195f0 	.word	0x080195f0

080162d4 <abort>:
 80162d4:	b508      	push	{r3, lr}
 80162d6:	2006      	movs	r0, #6
 80162d8:	f000 f994 	bl	8016604 <raise>
 80162dc:	2001      	movs	r0, #1
 80162de:	f7eb f9fd 	bl	80016dc <_exit>
	...

080162e4 <_close_r>:
 80162e4:	b538      	push	{r3, r4, r5, lr}
 80162e6:	4d06      	ldr	r5, [pc, #24]	; (8016300 <_close_r+0x1c>)
 80162e8:	2300      	movs	r3, #0
 80162ea:	4604      	mov	r4, r0
 80162ec:	4608      	mov	r0, r1
 80162ee:	602b      	str	r3, [r5, #0]
 80162f0:	f7eb fa37 	bl	8001762 <_close>
 80162f4:	1c43      	adds	r3, r0, #1
 80162f6:	d102      	bne.n	80162fe <_close_r+0x1a>
 80162f8:	682b      	ldr	r3, [r5, #0]
 80162fa:	b103      	cbz	r3, 80162fe <_close_r+0x1a>
 80162fc:	6023      	str	r3, [r4, #0]
 80162fe:	bd38      	pop	{r3, r4, r5, pc}
 8016300:	200087f0 	.word	0x200087f0

08016304 <__sflush_r>:
 8016304:	898a      	ldrh	r2, [r1, #12]
 8016306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801630a:	4605      	mov	r5, r0
 801630c:	0710      	lsls	r0, r2, #28
 801630e:	460c      	mov	r4, r1
 8016310:	d458      	bmi.n	80163c4 <__sflush_r+0xc0>
 8016312:	684b      	ldr	r3, [r1, #4]
 8016314:	2b00      	cmp	r3, #0
 8016316:	dc05      	bgt.n	8016324 <__sflush_r+0x20>
 8016318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801631a:	2b00      	cmp	r3, #0
 801631c:	dc02      	bgt.n	8016324 <__sflush_r+0x20>
 801631e:	2000      	movs	r0, #0
 8016320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016326:	2e00      	cmp	r6, #0
 8016328:	d0f9      	beq.n	801631e <__sflush_r+0x1a>
 801632a:	2300      	movs	r3, #0
 801632c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016330:	682f      	ldr	r7, [r5, #0]
 8016332:	602b      	str	r3, [r5, #0]
 8016334:	d032      	beq.n	801639c <__sflush_r+0x98>
 8016336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016338:	89a3      	ldrh	r3, [r4, #12]
 801633a:	075a      	lsls	r2, r3, #29
 801633c:	d505      	bpl.n	801634a <__sflush_r+0x46>
 801633e:	6863      	ldr	r3, [r4, #4]
 8016340:	1ac0      	subs	r0, r0, r3
 8016342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016344:	b10b      	cbz	r3, 801634a <__sflush_r+0x46>
 8016346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016348:	1ac0      	subs	r0, r0, r3
 801634a:	2300      	movs	r3, #0
 801634c:	4602      	mov	r2, r0
 801634e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016350:	6a21      	ldr	r1, [r4, #32]
 8016352:	4628      	mov	r0, r5
 8016354:	47b0      	blx	r6
 8016356:	1c43      	adds	r3, r0, #1
 8016358:	89a3      	ldrh	r3, [r4, #12]
 801635a:	d106      	bne.n	801636a <__sflush_r+0x66>
 801635c:	6829      	ldr	r1, [r5, #0]
 801635e:	291d      	cmp	r1, #29
 8016360:	d82c      	bhi.n	80163bc <__sflush_r+0xb8>
 8016362:	4a2a      	ldr	r2, [pc, #168]	; (801640c <__sflush_r+0x108>)
 8016364:	40ca      	lsrs	r2, r1
 8016366:	07d6      	lsls	r6, r2, #31
 8016368:	d528      	bpl.n	80163bc <__sflush_r+0xb8>
 801636a:	2200      	movs	r2, #0
 801636c:	6062      	str	r2, [r4, #4]
 801636e:	04d9      	lsls	r1, r3, #19
 8016370:	6922      	ldr	r2, [r4, #16]
 8016372:	6022      	str	r2, [r4, #0]
 8016374:	d504      	bpl.n	8016380 <__sflush_r+0x7c>
 8016376:	1c42      	adds	r2, r0, #1
 8016378:	d101      	bne.n	801637e <__sflush_r+0x7a>
 801637a:	682b      	ldr	r3, [r5, #0]
 801637c:	b903      	cbnz	r3, 8016380 <__sflush_r+0x7c>
 801637e:	6560      	str	r0, [r4, #84]	; 0x54
 8016380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016382:	602f      	str	r7, [r5, #0]
 8016384:	2900      	cmp	r1, #0
 8016386:	d0ca      	beq.n	801631e <__sflush_r+0x1a>
 8016388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801638c:	4299      	cmp	r1, r3
 801638e:	d002      	beq.n	8016396 <__sflush_r+0x92>
 8016390:	4628      	mov	r0, r5
 8016392:	f7ff faab 	bl	80158ec <_free_r>
 8016396:	2000      	movs	r0, #0
 8016398:	6360      	str	r0, [r4, #52]	; 0x34
 801639a:	e7c1      	b.n	8016320 <__sflush_r+0x1c>
 801639c:	6a21      	ldr	r1, [r4, #32]
 801639e:	2301      	movs	r3, #1
 80163a0:	4628      	mov	r0, r5
 80163a2:	47b0      	blx	r6
 80163a4:	1c41      	adds	r1, r0, #1
 80163a6:	d1c7      	bne.n	8016338 <__sflush_r+0x34>
 80163a8:	682b      	ldr	r3, [r5, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d0c4      	beq.n	8016338 <__sflush_r+0x34>
 80163ae:	2b1d      	cmp	r3, #29
 80163b0:	d001      	beq.n	80163b6 <__sflush_r+0xb2>
 80163b2:	2b16      	cmp	r3, #22
 80163b4:	d101      	bne.n	80163ba <__sflush_r+0xb6>
 80163b6:	602f      	str	r7, [r5, #0]
 80163b8:	e7b1      	b.n	801631e <__sflush_r+0x1a>
 80163ba:	89a3      	ldrh	r3, [r4, #12]
 80163bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163c0:	81a3      	strh	r3, [r4, #12]
 80163c2:	e7ad      	b.n	8016320 <__sflush_r+0x1c>
 80163c4:	690f      	ldr	r7, [r1, #16]
 80163c6:	2f00      	cmp	r7, #0
 80163c8:	d0a9      	beq.n	801631e <__sflush_r+0x1a>
 80163ca:	0793      	lsls	r3, r2, #30
 80163cc:	680e      	ldr	r6, [r1, #0]
 80163ce:	bf08      	it	eq
 80163d0:	694b      	ldreq	r3, [r1, #20]
 80163d2:	600f      	str	r7, [r1, #0]
 80163d4:	bf18      	it	ne
 80163d6:	2300      	movne	r3, #0
 80163d8:	eba6 0807 	sub.w	r8, r6, r7
 80163dc:	608b      	str	r3, [r1, #8]
 80163de:	f1b8 0f00 	cmp.w	r8, #0
 80163e2:	dd9c      	ble.n	801631e <__sflush_r+0x1a>
 80163e4:	6a21      	ldr	r1, [r4, #32]
 80163e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80163e8:	4643      	mov	r3, r8
 80163ea:	463a      	mov	r2, r7
 80163ec:	4628      	mov	r0, r5
 80163ee:	47b0      	blx	r6
 80163f0:	2800      	cmp	r0, #0
 80163f2:	dc06      	bgt.n	8016402 <__sflush_r+0xfe>
 80163f4:	89a3      	ldrh	r3, [r4, #12]
 80163f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163fa:	81a3      	strh	r3, [r4, #12]
 80163fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016400:	e78e      	b.n	8016320 <__sflush_r+0x1c>
 8016402:	4407      	add	r7, r0
 8016404:	eba8 0800 	sub.w	r8, r8, r0
 8016408:	e7e9      	b.n	80163de <__sflush_r+0xda>
 801640a:	bf00      	nop
 801640c:	20400001 	.word	0x20400001

08016410 <_fflush_r>:
 8016410:	b538      	push	{r3, r4, r5, lr}
 8016412:	690b      	ldr	r3, [r1, #16]
 8016414:	4605      	mov	r5, r0
 8016416:	460c      	mov	r4, r1
 8016418:	b913      	cbnz	r3, 8016420 <_fflush_r+0x10>
 801641a:	2500      	movs	r5, #0
 801641c:	4628      	mov	r0, r5
 801641e:	bd38      	pop	{r3, r4, r5, pc}
 8016420:	b118      	cbz	r0, 801642a <_fflush_r+0x1a>
 8016422:	6983      	ldr	r3, [r0, #24]
 8016424:	b90b      	cbnz	r3, 801642a <_fflush_r+0x1a>
 8016426:	f7ff f9a7 	bl	8015778 <__sinit>
 801642a:	4b14      	ldr	r3, [pc, #80]	; (801647c <_fflush_r+0x6c>)
 801642c:	429c      	cmp	r4, r3
 801642e:	d11b      	bne.n	8016468 <_fflush_r+0x58>
 8016430:	686c      	ldr	r4, [r5, #4]
 8016432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d0ef      	beq.n	801641a <_fflush_r+0xa>
 801643a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801643c:	07d0      	lsls	r0, r2, #31
 801643e:	d404      	bmi.n	801644a <_fflush_r+0x3a>
 8016440:	0599      	lsls	r1, r3, #22
 8016442:	d402      	bmi.n	801644a <_fflush_r+0x3a>
 8016444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016446:	f7ff fa47 	bl	80158d8 <__retarget_lock_acquire_recursive>
 801644a:	4628      	mov	r0, r5
 801644c:	4621      	mov	r1, r4
 801644e:	f7ff ff59 	bl	8016304 <__sflush_r>
 8016452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016454:	07da      	lsls	r2, r3, #31
 8016456:	4605      	mov	r5, r0
 8016458:	d4e0      	bmi.n	801641c <_fflush_r+0xc>
 801645a:	89a3      	ldrh	r3, [r4, #12]
 801645c:	059b      	lsls	r3, r3, #22
 801645e:	d4dd      	bmi.n	801641c <_fflush_r+0xc>
 8016460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016462:	f7ff fa3a 	bl	80158da <__retarget_lock_release_recursive>
 8016466:	e7d9      	b.n	801641c <_fflush_r+0xc>
 8016468:	4b05      	ldr	r3, [pc, #20]	; (8016480 <_fflush_r+0x70>)
 801646a:	429c      	cmp	r4, r3
 801646c:	d101      	bne.n	8016472 <_fflush_r+0x62>
 801646e:	68ac      	ldr	r4, [r5, #8]
 8016470:	e7df      	b.n	8016432 <_fflush_r+0x22>
 8016472:	4b04      	ldr	r3, [pc, #16]	; (8016484 <_fflush_r+0x74>)
 8016474:	429c      	cmp	r4, r3
 8016476:	bf08      	it	eq
 8016478:	68ec      	ldreq	r4, [r5, #12]
 801647a:	e7da      	b.n	8016432 <_fflush_r+0x22>
 801647c:	08019610 	.word	0x08019610
 8016480:	08019630 	.word	0x08019630
 8016484:	080195f0 	.word	0x080195f0

08016488 <_lseek_r>:
 8016488:	b538      	push	{r3, r4, r5, lr}
 801648a:	4d07      	ldr	r5, [pc, #28]	; (80164a8 <_lseek_r+0x20>)
 801648c:	4604      	mov	r4, r0
 801648e:	4608      	mov	r0, r1
 8016490:	4611      	mov	r1, r2
 8016492:	2200      	movs	r2, #0
 8016494:	602a      	str	r2, [r5, #0]
 8016496:	461a      	mov	r2, r3
 8016498:	f7eb f98a 	bl	80017b0 <_lseek>
 801649c:	1c43      	adds	r3, r0, #1
 801649e:	d102      	bne.n	80164a6 <_lseek_r+0x1e>
 80164a0:	682b      	ldr	r3, [r5, #0]
 80164a2:	b103      	cbz	r3, 80164a6 <_lseek_r+0x1e>
 80164a4:	6023      	str	r3, [r4, #0]
 80164a6:	bd38      	pop	{r3, r4, r5, pc}
 80164a8:	200087f0 	.word	0x200087f0

080164ac <__swhatbuf_r>:
 80164ac:	b570      	push	{r4, r5, r6, lr}
 80164ae:	460e      	mov	r6, r1
 80164b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164b4:	2900      	cmp	r1, #0
 80164b6:	b096      	sub	sp, #88	; 0x58
 80164b8:	4614      	mov	r4, r2
 80164ba:	461d      	mov	r5, r3
 80164bc:	da08      	bge.n	80164d0 <__swhatbuf_r+0x24>
 80164be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80164c2:	2200      	movs	r2, #0
 80164c4:	602a      	str	r2, [r5, #0]
 80164c6:	061a      	lsls	r2, r3, #24
 80164c8:	d410      	bmi.n	80164ec <__swhatbuf_r+0x40>
 80164ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164ce:	e00e      	b.n	80164ee <__swhatbuf_r+0x42>
 80164d0:	466a      	mov	r2, sp
 80164d2:	f000 f8b3 	bl	801663c <_fstat_r>
 80164d6:	2800      	cmp	r0, #0
 80164d8:	dbf1      	blt.n	80164be <__swhatbuf_r+0x12>
 80164da:	9a01      	ldr	r2, [sp, #4]
 80164dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80164e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80164e4:	425a      	negs	r2, r3
 80164e6:	415a      	adcs	r2, r3
 80164e8:	602a      	str	r2, [r5, #0]
 80164ea:	e7ee      	b.n	80164ca <__swhatbuf_r+0x1e>
 80164ec:	2340      	movs	r3, #64	; 0x40
 80164ee:	2000      	movs	r0, #0
 80164f0:	6023      	str	r3, [r4, #0]
 80164f2:	b016      	add	sp, #88	; 0x58
 80164f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080164f8 <__smakebuf_r>:
 80164f8:	898b      	ldrh	r3, [r1, #12]
 80164fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80164fc:	079d      	lsls	r5, r3, #30
 80164fe:	4606      	mov	r6, r0
 8016500:	460c      	mov	r4, r1
 8016502:	d507      	bpl.n	8016514 <__smakebuf_r+0x1c>
 8016504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016508:	6023      	str	r3, [r4, #0]
 801650a:	6123      	str	r3, [r4, #16]
 801650c:	2301      	movs	r3, #1
 801650e:	6163      	str	r3, [r4, #20]
 8016510:	b002      	add	sp, #8
 8016512:	bd70      	pop	{r4, r5, r6, pc}
 8016514:	ab01      	add	r3, sp, #4
 8016516:	466a      	mov	r2, sp
 8016518:	f7ff ffc8 	bl	80164ac <__swhatbuf_r>
 801651c:	9900      	ldr	r1, [sp, #0]
 801651e:	4605      	mov	r5, r0
 8016520:	4630      	mov	r0, r6
 8016522:	f7ff fa4f 	bl	80159c4 <_malloc_r>
 8016526:	b948      	cbnz	r0, 801653c <__smakebuf_r+0x44>
 8016528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801652c:	059a      	lsls	r2, r3, #22
 801652e:	d4ef      	bmi.n	8016510 <__smakebuf_r+0x18>
 8016530:	f023 0303 	bic.w	r3, r3, #3
 8016534:	f043 0302 	orr.w	r3, r3, #2
 8016538:	81a3      	strh	r3, [r4, #12]
 801653a:	e7e3      	b.n	8016504 <__smakebuf_r+0xc>
 801653c:	4b0d      	ldr	r3, [pc, #52]	; (8016574 <__smakebuf_r+0x7c>)
 801653e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016540:	89a3      	ldrh	r3, [r4, #12]
 8016542:	6020      	str	r0, [r4, #0]
 8016544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016548:	81a3      	strh	r3, [r4, #12]
 801654a:	9b00      	ldr	r3, [sp, #0]
 801654c:	6163      	str	r3, [r4, #20]
 801654e:	9b01      	ldr	r3, [sp, #4]
 8016550:	6120      	str	r0, [r4, #16]
 8016552:	b15b      	cbz	r3, 801656c <__smakebuf_r+0x74>
 8016554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016558:	4630      	mov	r0, r6
 801655a:	f000 f881 	bl	8016660 <_isatty_r>
 801655e:	b128      	cbz	r0, 801656c <__smakebuf_r+0x74>
 8016560:	89a3      	ldrh	r3, [r4, #12]
 8016562:	f023 0303 	bic.w	r3, r3, #3
 8016566:	f043 0301 	orr.w	r3, r3, #1
 801656a:	81a3      	strh	r3, [r4, #12]
 801656c:	89a0      	ldrh	r0, [r4, #12]
 801656e:	4305      	orrs	r5, r0
 8016570:	81a5      	strh	r5, [r4, #12]
 8016572:	e7cd      	b.n	8016510 <__smakebuf_r+0x18>
 8016574:	08015711 	.word	0x08015711

08016578 <__malloc_lock>:
 8016578:	4801      	ldr	r0, [pc, #4]	; (8016580 <__malloc_lock+0x8>)
 801657a:	f7ff b9ad 	b.w	80158d8 <__retarget_lock_acquire_recursive>
 801657e:	bf00      	nop
 8016580:	200087f4 	.word	0x200087f4

08016584 <__malloc_unlock>:
 8016584:	4801      	ldr	r0, [pc, #4]	; (801658c <__malloc_unlock+0x8>)
 8016586:	f7ff b9a8 	b.w	80158da <__retarget_lock_release_recursive>
 801658a:	bf00      	nop
 801658c:	200087f4 	.word	0x200087f4

08016590 <_read_r>:
 8016590:	b538      	push	{r3, r4, r5, lr}
 8016592:	4d07      	ldr	r5, [pc, #28]	; (80165b0 <_read_r+0x20>)
 8016594:	4604      	mov	r4, r0
 8016596:	4608      	mov	r0, r1
 8016598:	4611      	mov	r1, r2
 801659a:	2200      	movs	r2, #0
 801659c:	602a      	str	r2, [r5, #0]
 801659e:	461a      	mov	r2, r3
 80165a0:	f7eb f8a6 	bl	80016f0 <_read>
 80165a4:	1c43      	adds	r3, r0, #1
 80165a6:	d102      	bne.n	80165ae <_read_r+0x1e>
 80165a8:	682b      	ldr	r3, [r5, #0]
 80165aa:	b103      	cbz	r3, 80165ae <_read_r+0x1e>
 80165ac:	6023      	str	r3, [r4, #0]
 80165ae:	bd38      	pop	{r3, r4, r5, pc}
 80165b0:	200087f0 	.word	0x200087f0

080165b4 <_raise_r>:
 80165b4:	291f      	cmp	r1, #31
 80165b6:	b538      	push	{r3, r4, r5, lr}
 80165b8:	4604      	mov	r4, r0
 80165ba:	460d      	mov	r5, r1
 80165bc:	d904      	bls.n	80165c8 <_raise_r+0x14>
 80165be:	2316      	movs	r3, #22
 80165c0:	6003      	str	r3, [r0, #0]
 80165c2:	f04f 30ff 	mov.w	r0, #4294967295
 80165c6:	bd38      	pop	{r3, r4, r5, pc}
 80165c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80165ca:	b112      	cbz	r2, 80165d2 <_raise_r+0x1e>
 80165cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165d0:	b94b      	cbnz	r3, 80165e6 <_raise_r+0x32>
 80165d2:	4620      	mov	r0, r4
 80165d4:	f000 f830 	bl	8016638 <_getpid_r>
 80165d8:	462a      	mov	r2, r5
 80165da:	4601      	mov	r1, r0
 80165dc:	4620      	mov	r0, r4
 80165de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165e2:	f000 b817 	b.w	8016614 <_kill_r>
 80165e6:	2b01      	cmp	r3, #1
 80165e8:	d00a      	beq.n	8016600 <_raise_r+0x4c>
 80165ea:	1c59      	adds	r1, r3, #1
 80165ec:	d103      	bne.n	80165f6 <_raise_r+0x42>
 80165ee:	2316      	movs	r3, #22
 80165f0:	6003      	str	r3, [r0, #0]
 80165f2:	2001      	movs	r0, #1
 80165f4:	e7e7      	b.n	80165c6 <_raise_r+0x12>
 80165f6:	2400      	movs	r4, #0
 80165f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80165fc:	4628      	mov	r0, r5
 80165fe:	4798      	blx	r3
 8016600:	2000      	movs	r0, #0
 8016602:	e7e0      	b.n	80165c6 <_raise_r+0x12>

08016604 <raise>:
 8016604:	4b02      	ldr	r3, [pc, #8]	; (8016610 <raise+0xc>)
 8016606:	4601      	mov	r1, r0
 8016608:	6818      	ldr	r0, [r3, #0]
 801660a:	f7ff bfd3 	b.w	80165b4 <_raise_r>
 801660e:	bf00      	nop
 8016610:	20000044 	.word	0x20000044

08016614 <_kill_r>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	4d07      	ldr	r5, [pc, #28]	; (8016634 <_kill_r+0x20>)
 8016618:	2300      	movs	r3, #0
 801661a:	4604      	mov	r4, r0
 801661c:	4608      	mov	r0, r1
 801661e:	4611      	mov	r1, r2
 8016620:	602b      	str	r3, [r5, #0]
 8016622:	f7eb f849 	bl	80016b8 <_kill>
 8016626:	1c43      	adds	r3, r0, #1
 8016628:	d102      	bne.n	8016630 <_kill_r+0x1c>
 801662a:	682b      	ldr	r3, [r5, #0]
 801662c:	b103      	cbz	r3, 8016630 <_kill_r+0x1c>
 801662e:	6023      	str	r3, [r4, #0]
 8016630:	bd38      	pop	{r3, r4, r5, pc}
 8016632:	bf00      	nop
 8016634:	200087f0 	.word	0x200087f0

08016638 <_getpid_r>:
 8016638:	f7eb b836 	b.w	80016a8 <_getpid>

0801663c <_fstat_r>:
 801663c:	b538      	push	{r3, r4, r5, lr}
 801663e:	4d07      	ldr	r5, [pc, #28]	; (801665c <_fstat_r+0x20>)
 8016640:	2300      	movs	r3, #0
 8016642:	4604      	mov	r4, r0
 8016644:	4608      	mov	r0, r1
 8016646:	4611      	mov	r1, r2
 8016648:	602b      	str	r3, [r5, #0]
 801664a:	f7eb f896 	bl	800177a <_fstat>
 801664e:	1c43      	adds	r3, r0, #1
 8016650:	d102      	bne.n	8016658 <_fstat_r+0x1c>
 8016652:	682b      	ldr	r3, [r5, #0]
 8016654:	b103      	cbz	r3, 8016658 <_fstat_r+0x1c>
 8016656:	6023      	str	r3, [r4, #0]
 8016658:	bd38      	pop	{r3, r4, r5, pc}
 801665a:	bf00      	nop
 801665c:	200087f0 	.word	0x200087f0

08016660 <_isatty_r>:
 8016660:	b538      	push	{r3, r4, r5, lr}
 8016662:	4d06      	ldr	r5, [pc, #24]	; (801667c <_isatty_r+0x1c>)
 8016664:	2300      	movs	r3, #0
 8016666:	4604      	mov	r4, r0
 8016668:	4608      	mov	r0, r1
 801666a:	602b      	str	r3, [r5, #0]
 801666c:	f7eb f895 	bl	800179a <_isatty>
 8016670:	1c43      	adds	r3, r0, #1
 8016672:	d102      	bne.n	801667a <_isatty_r+0x1a>
 8016674:	682b      	ldr	r3, [r5, #0]
 8016676:	b103      	cbz	r3, 801667a <_isatty_r+0x1a>
 8016678:	6023      	str	r3, [r4, #0]
 801667a:	bd38      	pop	{r3, r4, r5, pc}
 801667c:	200087f0 	.word	0x200087f0

08016680 <_init>:
 8016680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016682:	bf00      	nop
 8016684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016686:	bc08      	pop	{r3}
 8016688:	469e      	mov	lr, r3
 801668a:	4770      	bx	lr

0801668c <_fini>:
 801668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801668e:	bf00      	nop
 8016690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016692:	bc08      	pop	{r3}
 8016694:	469e      	mov	lr, r3
 8016696:	4770      	bx	lr
