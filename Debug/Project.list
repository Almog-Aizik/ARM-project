
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a30  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff4  08016be0  08016be0  00026be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019bd4  08019bd4  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08019bd4  08019bd4  00029bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019bdc  08019bdc  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019bdc  08019bdc  00029bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019be0  08019be0  00029be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08019be4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00008754  200000a8  200000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200087fc  200087fc  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000290f2  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000614f  00000000  00000000  000591ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  0005f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d48  00000000  00000000  00061140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031bbd  00000000  00000000  00062e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fa7b  00000000  00000000  00094a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2e5b  00000000  00000000  000c44c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b731b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086a0  00000000  00000000  001b736c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016bc8 	.word	0x08016bc8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	08016bc8 	.word	0x08016bc8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SPI_RxCpltCallback>:
static void MX_I2C2_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
//callbacks for receiving
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	flag = 1;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_SPI_RxCpltCallback+0x1c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000a94 	.word	0x20000a94

080005b4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
//	listen = 1;
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000a94 	.word	0x20000a94

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_UART_RxCpltCallback+0x1c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000a94 	.word	0x20000a94

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 faf4 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f870 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 faca 	bl	8000b98 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f9e8 	bl	80009d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000608:	f000 fa3a 	bl	8000a80 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 800060c:	f000 f9ba 	bl	8000984 <MX_UART4_Init>
  MX_DMA_Init();
 8000610:	f000 fa64 	bl	8000adc <MX_DMA_Init>
  MX_LWIP_Init();
 8000614:	f008 ff50 	bl	80094b8 <MX_LWIP_Init>
  MX_I2C1_Init();
 8000618:	f000 f8cc 	bl	80007b4 <MX_I2C1_Init>
  MX_SPI4_Init();
 800061c:	f000 f97c 	bl	8000918 <MX_SPI4_Init>
  MX_USART6_UART_Init();
 8000620:	f000 fa04 	bl	8000a2c <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000624:	f000 f906 	bl	8000834 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000628:	f000 f944 	bl	80008b4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart3, "start\n\r", 6, 20);
 800062c:	2314      	movs	r3, #20
 800062e:	2206      	movs	r2, #6
 8000630:	491f      	ldr	r1, [pc, #124]	; (80006b0 <main+0xbc>)
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <main+0xc0>)
 8000634:	f007 f9a5 	bl	8007982 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //SPI send and receive
	 if(protocol == 1)
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <main+0xc4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10a      	bne.n	8000656 <main+0x62>
	 {
		 HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)mem, 100);
 8000640:	2264      	movs	r2, #100	; 0x64
 8000642:	491e      	ldr	r1, [pc, #120]	; (80006bc <main+0xc8>)
 8000644:	481e      	ldr	r0, [pc, #120]	; (80006c0 <main+0xcc>)
 8000646:	f006 fbcb 	bl	8006de0 <HAL_SPI_Receive_DMA>
	 	 HAL_SPI_Transmit_DMA(&hspi4, (uint8_t *)send, sizeof(send));
 800064a:	220f      	movs	r2, #15
 800064c:	491d      	ldr	r1, [pc, #116]	; (80006c4 <main+0xd0>)
 800064e:	481e      	ldr	r0, [pc, #120]	; (80006c8 <main+0xd4>)
 8000650:	f006 fb10 	bl	8006c74 <HAL_SPI_Transmit_DMA>
 8000654:	e01d      	b.n	8000692 <main+0x9e>
	 }

//	 else if(protocol == 2 && listen)
	 //I2C send and receive
	 else if(protocol == 2)
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <main+0xc4>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d10b      	bne.n	8000676 <main+0x82>
	 {
		 HAL_I2C_Master_Transmit_DMA(&hi2c1, 20, send, sizeof(send));
 800065e:	230f      	movs	r3, #15
 8000660:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <main+0xd0>)
 8000662:	2114      	movs	r1, #20
 8000664:	4819      	ldr	r0, [pc, #100]	; (80006cc <main+0xd8>)
 8000666:	f003 fc65 	bl	8003f34 <HAL_I2C_Master_Transmit_DMA>
		 HAL_I2C_Slave_Receive_DMA(&hi2c2, mem, sizeof(send));
 800066a:	220f      	movs	r2, #15
 800066c:	4913      	ldr	r1, [pc, #76]	; (80006bc <main+0xc8>)
 800066e:	4818      	ldr	r0, [pc, #96]	; (80006d0 <main+0xdc>)
 8000670:	f003 fd90 	bl	8004194 <HAL_I2C_Slave_Receive_DMA>
 8000674:	e00d      	b.n	8000692 <main+0x9e>
//			 listen = 0;
	 }
	 //UART send and receive
	 else if(protocol == 3)
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <main+0xc4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d109      	bne.n	8000692 <main+0x9e>
	 {
		 HAL_UART_Transmit_DMA(&huart4, send, sizeof(send));
 800067e:	220f      	movs	r2, #15
 8000680:	4910      	ldr	r1, [pc, #64]	; (80006c4 <main+0xd0>)
 8000682:	4814      	ldr	r0, [pc, #80]	; (80006d4 <main+0xe0>)
 8000684:	f007 fa10 	bl	8007aa8 <HAL_UART_Transmit_DMA>
		 HAL_UART_Receive_DMA(&huart6, mem, sizeof(send));
 8000688:	220f      	movs	r2, #15
 800068a:	490c      	ldr	r1, [pc, #48]	; (80006bc <main+0xc8>)
 800068c:	4812      	ldr	r0, [pc, #72]	; (80006d8 <main+0xe4>)
 800068e:	f007 fa89 	bl	8007ba4 <HAL_UART_Receive_DMA>
	 }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //debugging
	 if(flag)
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <main+0xe8>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0ce      	beq.n	8000638 <main+0x44>
	 {
		 HAL_UART_Transmit(&huart3, mem, 15, 20);
 800069a:	2314      	movs	r3, #20
 800069c:	220f      	movs	r2, #15
 800069e:	4907      	ldr	r1, [pc, #28]	; (80006bc <main+0xc8>)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <main+0xc0>)
 80006a2:	f007 f96e 	bl	8007982 <HAL_UART_Transmit>
		 flag = 0;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <main+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	 if(protocol == 1)
 80006ac:	e7c4      	b.n	8000638 <main+0x44>
 80006ae:	bf00      	nop
 80006b0:	08016be0 	.word	0x08016be0
 80006b4:	20000440 	.word	0x20000440
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000a98 	.word	0x20000a98
 80006c0:	2000022c 	.word	0x2000022c
 80006c4:	20000004 	.word	0x20000004
 80006c8:	20000284 	.word	0x20000284
 80006cc:	200000c4 	.word	0x200000c4
 80006d0:	20000118 	.word	0x20000118
 80006d4:	200003fc 	.word	0x200003fc
 80006d8:	20000484 	.word	0x20000484
 80006dc:	20000a94 	.word	0x20000a94

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f015 fa12 	bl	8015b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <SystemClock_Config+0xcc>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd0>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000740:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000754:	23a8      	movs	r3, #168	; 0xa8
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f005 fd63 	bl	8006230 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000770:	f000 faf0 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2105      	movs	r1, #5
 8000792:	4618      	mov	r0, r3
 8000794:	f005 ffc4 	bl	8006720 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079e:	f000 fad9 	bl	8000d54 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C1_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_I2C1_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C1_Init+0x74>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_I2C1_Init+0x74>)
 80007f2:	f003 fa5b 	bl	8003cac <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 faaa 	bl	8000d54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C1_Init+0x74>)
 8000804:	f005 fb7b 	bl	8005efe <HAL_I2CEx_ConfigAnalogFilter>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800080e:	f000 faa1 	bl	8000d54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2C1_Init+0x74>)
 8000816:	f005 fbae 	bl	8005f76 <HAL_I2CEx_ConfigDigitalFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fa98 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000c4 	.word	0x200000c4
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C2_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C2_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C2_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 20;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C2_Init+0x74>)
 800084c:	2214      	movs	r2, #20
 800084e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000872:	f003 fa1b 	bl	8003cac <HAL_I2C_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800087c:	f000 fa6a 	bl	8000d54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000884:	f005 fb3b 	bl	8005efe <HAL_I2CEx_ConfigAnalogFilter>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800088e:	f000 fa61 	bl	8000d54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000896:	f005 fb6e 	bl	8005f76 <HAL_I2CEx_ConfigDigitalFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 fa58 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000118 	.word	0x20000118
 80008ac:	40005800 	.word	0x40005800
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_SPI2_Init+0x60>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008f6:	220a      	movs	r2, #10
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_SPI2_Init+0x5c>)
 80008fc:	f006 f930 	bl	8006b60 <HAL_SPI_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000906:	f000 fa25 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000022c 	.word	0x2000022c
 8000914:	40003800 	.word	0x40003800

08000918 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_SPI4_Init+0x64>)
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <MX_SPI4_Init+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_SPI4_Init+0x64>)
 8000924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000928:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_SPI4_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_SPI4_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_SPI4_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_SPI4_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_SPI4_Init+0x64>)
 8000944:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000948:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_SPI4_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_SPI4_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_SPI4_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_SPI4_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_SPI4_Init+0x64>)
 8000964:	220a      	movs	r2, #10
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_SPI4_Init+0x64>)
 800096a:	f006 f8f9 	bl	8006b60 <HAL_SPI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000974:	f000 f9ee 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000284 	.word	0x20000284
 8000980:	40013400 	.word	0x40013400

08000984 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_UART4_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_UART4_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_UART4_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_UART4_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_UART4_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_UART4_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_UART4_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_UART4_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_UART4_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_UART4_Init+0x4c>)
 80009bc:	f006 ff94 	bl	80078e8 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f9c5 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200003fc 	.word	0x200003fc
 80009d4:	40004c00 	.word	0x40004c00

080009d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_USART3_UART_Init+0x50>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART3_UART_Init+0x4c>)
 8000a10:	f006 ff6a 	bl	80078e8 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a1a:	f000 f99b 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000440 	.word	0x20000440
 8000a28:	40004800 	.word	0x40004800

08000a2c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <MX_USART6_UART_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_USART6_UART_Init+0x4c>)
 8000a64:	f006 ff40 	bl	80078e8 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a6e:	f000 f971 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000484 	.word	0x20000484
 8000a7c:	40011400 	.word	0x40011400

08000a80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	f005 fa96 	bl	8005ff4 <HAL_PCD_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 f941 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000588 	.word	0x20000588

08000adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_DMA_Init+0xb8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <MX_DMA_Init+0xb8>)
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_DMA_Init+0xb8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_DMA_Init+0xb8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <MX_DMA_Init+0xb8>)
 8000b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_DMA_Init+0xb8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200d      	movs	r0, #13
 8000b20:	f001 f9d1 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b24:	200d      	movs	r0, #13
 8000b26:	f001 f9ea 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	200e      	movs	r0, #14
 8000b30:	f001 f9c9 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b34:	200e      	movs	r0, #14
 8000b36:	f001 f9e2 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f001 f9c1 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b44:	200f      	movs	r0, #15
 8000b46:	f001 f9da 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	202f      	movs	r0, #47	; 0x2f
 8000b50:	f001 f9b9 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000b54:	202f      	movs	r0, #47	; 0x2f
 8000b56:	f001 f9d2 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2038      	movs	r0, #56	; 0x38
 8000b60:	f001 f9b1 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b64:	2038      	movs	r0, #56	; 0x38
 8000b66:	f001 f9ca 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2039      	movs	r0, #57	; 0x39
 8000b70:	f001 f9a9 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b74:	2039      	movs	r0, #57	; 0x39
 8000b76:	f001 f9c2 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	203c      	movs	r0, #60	; 0x3c
 8000b80:	f001 f9a1 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b84:	203c      	movs	r0, #60	; 0x3c
 8000b86:	f001 f9ba 	bl	8001efe <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	4b63      	ldr	r3, [pc, #396]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a62      	ldr	r2, [pc, #392]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b60      	ldr	r3, [pc, #384]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a5b      	ldr	r2, [pc, #364]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b55      	ldr	r3, [pc, #340]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a54      	ldr	r2, [pc, #336]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b52      	ldr	r3, [pc, #328]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a4d      	ldr	r2, [pc, #308]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a46      	ldr	r2, [pc, #280]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a3f      	ldr	r2, [pc, #252]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a38      	ldr	r2, [pc, #224]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c78:	4832      	ldr	r0, [pc, #200]	; (8000d44 <MX_GPIO_Init+0x1ac>)
 8000c7a:	f002 fffd 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4831      	ldr	r0, [pc, #196]	; (8000d48 <MX_GPIO_Init+0x1b0>)
 8000c84:	f002 fff8 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	482b      	ldr	r0, [pc, #172]	; (8000d4c <MX_GPIO_Init+0x1b4>)
 8000ca0:	f002 fe3e 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4824      	ldr	r0, [pc, #144]	; (8000d50 <MX_GPIO_Init+0x1b8>)
 8000cc0:	f002 fe2e 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cc4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4819      	ldr	r0, [pc, #100]	; (8000d44 <MX_GPIO_Init+0x1ac>)
 8000cde:	f002 fe1f 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ce2:	2340      	movs	r3, #64	; 0x40
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <MX_GPIO_Init+0x1b0>)
 8000cfa:	f002 fe11 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_GPIO_Init+0x1b0>)
 8000d12:	f002 fe05 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d16:	2318      	movs	r3, #24
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_GPIO_Init+0x1ac>)
 8000d32:	f002 fdf5 	bl	8003920 <HAL_GPIO_Init>

}
 8000d36:	bf00      	nop
 8000d38:	3730      	adds	r7, #48	; 0x30
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40021800 	.word	0x40021800
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020000 	.word	0x40020000

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <HAL_MspInit+0x4c>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_MspInit+0x4c>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a71      	ldr	r2, [pc, #452]	; (8000f94 <HAL_I2C_MspInit+0x1e4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d16b      	bne.n	8000eaa <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	4b70      	ldr	r3, [pc, #448]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a6f      	ldr	r2, [pc, #444]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b6d      	ldr	r3, [pc, #436]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df4:	2312      	movs	r3, #18
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e00:	2304      	movs	r3, #4
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4864      	ldr	r0, [pc, #400]	; (8000f9c <HAL_I2C_MspInit+0x1ec>)
 8000e0c:	f002 fd88 	bl	8003920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	4b60      	ldr	r3, [pc, #384]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a5f      	ldr	r2, [pc, #380]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b5d      	ldr	r3, [pc, #372]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8000e2c:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e2e:	4a5d      	ldr	r2, [pc, #372]	; (8000fa4 <HAL_I2C_MspInit+0x1f4>)
 8000e30:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e32:	4b5b      	ldr	r3, [pc, #364]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e38:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3a:	4b59      	ldr	r3, [pc, #356]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e46:	4b56      	ldr	r3, [pc, #344]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4e:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e54:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e5a:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e60:	4b4f      	ldr	r3, [pc, #316]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e66:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e6c:	484c      	ldr	r0, [pc, #304]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e6e:	f001 f861 	bl	8001f34 <HAL_DMA_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000e78:	f7ff ff6c 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34
 8000e82:	4a47      	ldr	r2, [pc, #284]	; (8000fa0 <HAL_I2C_MspInit+0x1f0>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	201f      	movs	r0, #31
 8000e8e:	f001 f81a 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e92:	201f      	movs	r0, #31
 8000e94:	f001 f833 	bl	8001efe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	f001 f812 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ea2:	2020      	movs	r0, #32
 8000ea4:	f001 f82b 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ea8:	e06f      	b.n	8000f8a <HAL_I2C_MspInit+0x1da>
  else if(hi2c->Instance==I2C2)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a3e      	ldr	r2, [pc, #248]	; (8000fa8 <HAL_I2C_MspInit+0x1f8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d16a      	bne.n	8000f8a <HAL_I2C_MspInit+0x1da>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a36      	ldr	r2, [pc, #216]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ed0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed6:	2312      	movs	r3, #18
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	482b      	ldr	r0, [pc, #172]	; (8000f9c <HAL_I2C_MspInit+0x1ec>)
 8000eee:	f002 fd17 	bl	8003920 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000efc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <HAL_I2C_MspInit+0x1e8>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f10:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <HAL_I2C_MspInit+0x200>)
 8000f12:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f16:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f1a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f22:	4b22      	ldr	r3, [pc, #136]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000f4e:	4817      	ldr	r0, [pc, #92]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f50:	f000 fff0 	bl	8001f34 <HAL_DMA_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_I2C_MspInit+0x1ae>
      Error_Handler();
 8000f5a:	f7ff fefb 	bl	8000d54 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f62:	639a      	str	r2, [r3, #56]	; 0x38
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <HAL_I2C_MspInit+0x1fc>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2021      	movs	r0, #33	; 0x21
 8000f70:	f000 ffa9 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000f74:	2021      	movs	r0, #33	; 0x21
 8000f76:	f000 ffc2 	bl	8001efe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2022      	movs	r0, #34	; 0x22
 8000f80:	f000 ffa1 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000f84:	2022      	movs	r0, #34	; 0x22
 8000f86:	f000 ffba 	bl	8001efe <HAL_NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40005400 	.word	0x40005400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	2000016c 	.word	0x2000016c
 8000fa4:	400260b8 	.word	0x400260b8
 8000fa8:	40005800 	.word	0x40005800
 8000fac:	200001cc 	.word	0x200001cc
 8000fb0:	40026040 	.word	0x40026040

08000fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	; 0x38
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a9e      	ldr	r2, [pc, #632]	; (800124c <HAL_SPI_MspInit+0x298>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	f040 809f 	bne.w	8001116 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
 8000fdc:	4b9c      	ldr	r3, [pc, #624]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a9b      	ldr	r2, [pc, #620]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b99      	ldr	r3, [pc, #612]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff0:	623b      	str	r3, [r7, #32]
 8000ff2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	4b95      	ldr	r3, [pc, #596]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a94      	ldr	r2, [pc, #592]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b92      	ldr	r3, [pc, #584]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	4b8e      	ldr	r3, [pc, #568]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a8d      	ldr	r2, [pc, #564]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	6313      	str	r3, [r2, #48]	; 0x30
 8001020:	4b8b      	ldr	r3, [pc, #556]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	4b87      	ldr	r3, [pc, #540]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	4a86      	ldr	r2, [pc, #536]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6313      	str	r3, [r2, #48]	; 0x30
 800103c:	4b84      	ldr	r3, [pc, #528]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001048:	230c      	movs	r3, #12
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001058:	2305      	movs	r3, #5
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	487c      	ldr	r0, [pc, #496]	; (8001254 <HAL_SPI_MspInit+0x2a0>)
 8001064:	f002 fc5c 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800107a:	2305      	movs	r3, #5
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	4874      	ldr	r0, [pc, #464]	; (8001258 <HAL_SPI_MspInit+0x2a4>)
 8001086:	f002 fc4b 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800108a:	2308      	movs	r3, #8
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109a:	2305      	movs	r3, #5
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	486d      	ldr	r0, [pc, #436]	; (800125c <HAL_SPI_MspInit+0x2a8>)
 80010a6:	f002 fc3b 	bl	8003920 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80010aa:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010ac:	4a6d      	ldr	r2, [pc, #436]	; (8001264 <HAL_SPI_MspInit+0x2b0>)
 80010ae:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80010b0:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b6:	4b6a      	ldr	r3, [pc, #424]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010bc:	4b68      	ldr	r3, [pc, #416]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ca:	4b65      	ldr	r3, [pc, #404]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d0:	4b63      	ldr	r3, [pc, #396]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80010d6:	4b62      	ldr	r3, [pc, #392]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010dc:	4b60      	ldr	r3, [pc, #384]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e2:	4b5f      	ldr	r3, [pc, #380]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80010e8:	485d      	ldr	r0, [pc, #372]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010ea:	f000 ff23 	bl	8001f34 <HAL_DMA_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 80010f4:	f7ff fe2e 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a59      	ldr	r2, [pc, #356]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 80010fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80010fe:	4a58      	ldr	r2, [pc, #352]	; (8001260 <HAL_SPI_MspInit+0x2ac>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2024      	movs	r0, #36	; 0x24
 800110a:	f000 fedc 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800110e:	2024      	movs	r0, #36	; 0x24
 8001110:	f000 fef5 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001114:	e095      	b.n	8001242 <HAL_SPI_MspInit+0x28e>
  else if(hspi->Instance==SPI4)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a53      	ldr	r2, [pc, #332]	; (8001268 <HAL_SPI_MspInit+0x2b4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	f040 8090 	bne.w	8001242 <HAL_SPI_MspInit+0x28e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a49      	ldr	r2, [pc, #292]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 800112c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b43      	ldr	r3, [pc, #268]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a42      	ldr	r2, [pc, #264]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b40      	ldr	r3, [pc, #256]	; (8001250 <HAL_SPI_MspInit+0x29c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800115a:	2374      	movs	r3, #116	; 0x74
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800116a:	2305      	movs	r3, #5
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	483d      	ldr	r0, [pc, #244]	; (800126c <HAL_SPI_MspInit+0x2b8>)
 8001176:	f002 fbd3 	bl	8003920 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 800117c:	4a3d      	ldr	r2, [pc, #244]	; (8001274 <HAL_SPI_MspInit+0x2c0>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 8001182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001186:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b38      	ldr	r3, [pc, #224]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119a:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119c:	4b34      	ldr	r3, [pc, #208]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 80011bc:	f000 feba 	bl	8001f34 <HAL_DMA_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_SPI_MspInit+0x216>
      Error_Handler();
 80011c6:	f7ff fdc5 	bl	8000d54 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a28      	ldr	r2, [pc, #160]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 80011ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_SPI_MspInit+0x2bc>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <HAL_SPI_MspInit+0x2c8>)
 80011da:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 80011de:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80011e2:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 80011f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f6:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 8001218:	f000 fe8c 	bl	8001f34 <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_SPI_MspInit+0x272>
      Error_Handler();
 8001222:	f7ff fd97 	bl	8000d54 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a13      	ldr	r2, [pc, #76]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 800122a:	649a      	str	r2, [r3, #72]	; 0x48
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_SPI_MspInit+0x2c4>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2054      	movs	r0, #84	; 0x54
 8001238:	f000 fe45 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800123c:	2054      	movs	r0, #84	; 0x54
 800123e:	f000 fe5e 	bl	8001efe <HAL_NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3738      	adds	r7, #56	; 0x38
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40003800 	.word	0x40003800
 8001250:	40023800 	.word	0x40023800
 8001254:	40020800 	.word	0x40020800
 8001258:	40020400 	.word	0x40020400
 800125c:	40020c00 	.word	0x40020c00
 8001260:	200002dc 	.word	0x200002dc
 8001264:	40026058 	.word	0x40026058
 8001268:	40013400 	.word	0x40013400
 800126c:	40021000 	.word	0x40021000
 8001270:	2000033c 	.word	0x2000033c
 8001274:	40026410 	.word	0x40026410
 8001278:	2000039c 	.word	0x2000039c
 800127c:	40026470 	.word	0x40026470

08001280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a82      	ldr	r2, [pc, #520]	; (80014a8 <HAL_UART_MspInit+0x228>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d163      	bne.n	800136a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	4b81      	ldr	r3, [pc, #516]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a80      	ldr	r2, [pc, #512]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80012ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b7e      	ldr	r3, [pc, #504]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	4b7a      	ldr	r3, [pc, #488]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a79      	ldr	r2, [pc, #484]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b77      	ldr	r3, [pc, #476]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012ec:	2308      	movs	r3, #8
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	486e      	ldr	r0, [pc, #440]	; (80014b0 <HAL_UART_MspInit+0x230>)
 80012f8:	f002 fb12 	bl	8003920 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80012fc:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <HAL_UART_MspInit+0x234>)
 80012fe:	4a6e      	ldr	r2, [pc, #440]	; (80014b8 <HAL_UART_MspInit+0x238>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001302:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001304:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001308:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130a:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <HAL_UART_MspInit+0x234>)
 800130c:	2240      	movs	r2, #64	; 0x40
 800130e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131e:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001324:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <HAL_UART_MspInit+0x234>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001330:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800133c:	485d      	ldr	r0, [pc, #372]	; (80014b4 <HAL_UART_MspInit+0x234>)
 800133e:	f000 fdf9 	bl	8001f34 <HAL_DMA_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001348:	f7ff fd04 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a59      	ldr	r2, [pc, #356]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001350:	635a      	str	r2, [r3, #52]	; 0x34
 8001352:	4a58      	ldr	r2, [pc, #352]	; (80014b4 <HAL_UART_MspInit+0x234>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2034      	movs	r0, #52	; 0x34
 800135e:	f000 fdb2 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001362:	2034      	movs	r0, #52	; 0x34
 8001364:	f000 fdcb 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001368:	e099      	b.n	800149e <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a53      	ldr	r2, [pc, #332]	; (80014bc <HAL_UART_MspInit+0x23c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d12d      	bne.n	80013d0 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_UART_MspInit+0x22c>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a4b      	ldr	r2, [pc, #300]	; (80014ac <HAL_UART_MspInit+0x22c>)
 800137e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b49      	ldr	r3, [pc, #292]	; (80014ac <HAL_UART_MspInit+0x22c>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	4b45      	ldr	r3, [pc, #276]	; (80014ac <HAL_UART_MspInit+0x22c>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a44      	ldr	r2, [pc, #272]	; (80014ac <HAL_UART_MspInit+0x22c>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013be:	2307      	movs	r3, #7
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	483d      	ldr	r0, [pc, #244]	; (80014c0 <HAL_UART_MspInit+0x240>)
 80013ca:	f002 faa9 	bl	8003920 <HAL_GPIO_Init>
}
 80013ce:	e066      	b.n	800149e <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a3b      	ldr	r2, [pc, #236]	; (80014c4 <HAL_UART_MspInit+0x244>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d161      	bne.n	800149e <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_UART_MspInit+0x22c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <HAL_UART_MspInit+0x22c>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_UART_MspInit+0x22c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001412:	23c0      	movs	r3, #192	; 0xc0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001422:	2308      	movs	r3, #8
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	4820      	ldr	r0, [pc, #128]	; (80014b0 <HAL_UART_MspInit+0x230>)
 800142e:	f002 fa77 	bl	8003920 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_UART_MspInit+0x248>)
 8001434:	4a25      	ldr	r2, [pc, #148]	; (80014cc <HAL_UART_MspInit+0x24c>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <HAL_UART_MspInit+0x248>)
 800143a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800143e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <HAL_UART_MspInit+0x248>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_UART_MspInit+0x248>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_UART_MspInit+0x248>)
 800144e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001452:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_UART_MspInit+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_UART_MspInit+0x248>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_UART_MspInit+0x248>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0x248>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_UART_MspInit+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001472:	4815      	ldr	r0, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0x248>)
 8001474:	f000 fd5e 	bl	8001f34 <HAL_DMA_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_UART_MspInit+0x202>
      Error_Handler();
 800147e:	f7ff fc69 	bl	8000d54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_UART_MspInit+0x248>)
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_UART_MspInit+0x248>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2047      	movs	r0, #71	; 0x47
 8001494:	f000 fd17 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001498:	2047      	movs	r0, #71	; 0x47
 800149a:	f000 fd30 	bl	8001efe <HAL_NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40004c00 	.word	0x40004c00
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	200004c8 	.word	0x200004c8
 80014b8:	40026070 	.word	0x40026070
 80014bc:	40004800 	.word	0x40004800
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40011400 	.word	0x40011400
 80014c8:	20000528 	.word	0x20000528
 80014cc:	40026428 	.word	0x40026428

080014d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f0:	d13f      	bne.n	8001572 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_PCD_MspInit+0xac>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a20      	ldr	r2, [pc, #128]	; (800157c <HAL_PCD_MspInit+0xac>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_PCD_MspInit+0xac>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800150e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001520:	230a      	movs	r3, #10
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	4815      	ldr	r0, [pc, #84]	; (8001580 <HAL_PCD_MspInit+0xb0>)
 800152c:	f002 f9f8 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480e      	ldr	r0, [pc, #56]	; (8001580 <HAL_PCD_MspInit+0xb0>)
 8001546:	f002 f9eb 	bl	8003920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_PCD_MspInit+0xac>)
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_PCD_MspInit+0xac>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6353      	str	r3, [r2, #52]	; 0x34
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_PCD_MspInit+0xac>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_PCD_MspInit+0xac>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_PCD_MspInit+0xac>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 fb5a 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Stream2_IRQHandler+0x10>)
 80015de:	f000 fe41 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200001cc 	.word	0x200001cc

080015ec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA1_Stream3_IRQHandler+0x10>)
 80015f2:	f000 fe37 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002dc 	.word	0x200002dc

08001600 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA1_Stream4_IRQHandler+0x10>)
 8001606:	f000 fe2d 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200004c8 	.word	0x200004c8

08001614 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <I2C1_EV_IRQHandler+0x10>)
 800161a:	f002 fe8d 	bl	8004338 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200000c4 	.word	0x200000c4

08001628 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <I2C1_ER_IRQHandler+0x10>)
 800162e:	f002 fff4 	bl	800461a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200000c4 	.word	0x200000c4

0800163c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <I2C2_EV_IRQHandler+0x10>)
 8001642:	f002 fe79 	bl	8004338 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000118 	.word	0x20000118

08001650 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <I2C2_ER_IRQHandler+0x10>)
 8001656:	f002 ffe0 	bl	800461a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000118 	.word	0x20000118

08001664 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <SPI2_IRQHandler+0x10>)
 800166a:	f005 fd83 	bl	8007174 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000022c 	.word	0x2000022c

08001678 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA1_Stream7_IRQHandler+0x10>)
 800167e:	f000 fdf1 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000016c 	.word	0x2000016c

0800168c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <UART4_IRQHandler+0x10>)
 8001692:	f006 fab7 	bl	8007c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200003fc 	.word	0x200003fc

080016a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA2_Stream0_IRQHandler+0x10>)
 80016a6:	f000 fddd 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000033c 	.word	0x2000033c

080016b4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA2_Stream1_IRQHandler+0x10>)
 80016ba:	f000 fdd3 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000528 	.word	0x20000528

080016c8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA2_Stream4_IRQHandler+0x10>)
 80016ce:	f000 fdc9 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000039c 	.word	0x2000039c

080016dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <ETH_IRQHandler+0x10>)
 80016e2:	f001 fa4f 	bl	8002b84 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20005618 	.word	0x20005618

080016f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <USART6_IRQHandler+0x10>)
 80016f6:	f006 fa85 	bl	8007c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000484 	.word	0x20000484

08001704 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <SPI4_IRQHandler+0x10>)
 800170a:	f005 fd33 	bl	8007174 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000284 	.word	0x20000284

08001718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	return 1;
 800171c:	2301      	movs	r3, #1
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_kill>:

int _kill(int pid, int sig)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <_kill+0x20>)
 8001734:	2216      	movs	r2, #22
 8001736:	601a      	str	r2, [r3, #0]
	return -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	200087ec 	.word	0x200087ec

0800174c <_exit>:

void _exit (int status)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ffe5 	bl	8001728 <_kill>
	while (1) {}		/* Make sure we hang here */
 800175e:	e7fe      	b.n	800175e <_exit+0x12>

08001760 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e00a      	b.n	8001788 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001772:	f3af 8000 	nop.w
 8001776:	4601      	mov	r1, r0
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	b2ca      	uxtb	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbf0      	blt.n	8001772 <_read+0x12>
	}

return len;
 8001790:	687b      	ldr	r3, [r7, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e009      	b.n	80017c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	60ba      	str	r2, [r7, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf1      	blt.n	80017ac <_write+0x12>
	}
	return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_close>:

int _close(int file)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
	return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fa:	605a      	str	r2, [r3, #4]
	return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_isatty>:

int _isatty(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	return 1;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
	return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d205      	bcs.n	8001878 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <_sbrk+0x6c>)
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	20030000 	.word	0x20030000
 800189c:	00000400 	.word	0x00000400
 80018a0:	20000afc 	.word	0x20000afc
 80018a4:	20008800 	.word	0x20008800
 80018a8:	200087ec 	.word	0x200087ec

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ffd7 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f014 f8c9 	bl	8015a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7fe fe77 	bl	80005f4 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001908:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001914:	08019be4 	.word	0x08019be4
  ldr r2, =_sbss
 8001918:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800191c:	200087fc 	.word	0x200087fc

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>

08001922 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <LAN8742_RegisterBusIO+0x28>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <LAN8742_RegisterBusIO+0x28>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <LAN8742_RegisterBusIO+0x28>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e014      	b.n	800197a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d17c      	bne.n	8001aa0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2220      	movs	r2, #32
 80019b8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e01c      	b.n	80019fa <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f107 0208 	add.w	r2, r7, #8
 80019c8:	2112      	movs	r1, #18
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	4798      	blx	r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da03      	bge.n	80019dc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80019d4:	f06f 0304 	mvn.w	r3, #4
 80019d8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80019da:	e00b      	b.n	80019f4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d105      	bne.n	80019f4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
         break;
 80019f2:	e005      	b.n	8001a00 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b1f      	cmp	r3, #31
 80019fe:	d9df      	bls.n	80019c0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b1f      	cmp	r3, #31
 8001a06:	d902      	bls.n	8001a0e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001a08:	f06f 0302 	mvn.w	r3, #2
 8001a0c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d145      	bne.n	8001aa0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6810      	ldr	r0, [r2, #0]
 8001a1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a20:	2100      	movs	r1, #0
 8001a22:	4798      	blx	r3
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db37      	blt.n	8001a9a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6810      	ldr	r0, [r2, #0]
 8001a32:	f107 0208 	add.w	r2, r7, #8
 8001a36:	2100      	movs	r1, #0
 8001a38:	4798      	blx	r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db28      	blt.n	8001a92 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4798      	blx	r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a4a:	e01c      	b.n	8001a86 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4798      	blx	r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a5e:	d80e      	bhi.n	8001a7e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6810      	ldr	r0, [r2, #0]
 8001a68:	f107 0208 	add.w	r2, r7, #8
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4798      	blx	r3
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da07      	bge.n	8001a86 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001a76:	f06f 0304 	mvn.w	r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
                 break;
 8001a7c:	e010      	b.n	8001aa0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001a7e:	f06f 0301 	mvn.w	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
               break;
 8001a84:	e00c      	b.n	8001aa0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1dd      	bne.n	8001a4c <LAN8742_Init+0xc6>
 8001a90:	e006      	b.n	8001aa0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001a92:	f06f 0304 	mvn.w	r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e002      	b.n	8001aa0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001a9a:	f06f 0303 	mvn.w	r3, #3
 8001a9e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d112      	bne.n	8001acc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4798      	blx	r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001ab0:	bf00      	nop
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4798      	blx	r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ac4:	d9f5      	bls.n	8001ab2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001acc:	693b      	ldr	r3, [r7, #16]
 }
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6810      	ldr	r0, [r2, #0]
 8001aea:	f107 020c 	add.w	r2, r7, #12
 8001aee:	2101      	movs	r1, #1
 8001af0:	4798      	blx	r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	da02      	bge.n	8001afe <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001af8:	f06f 0304 	mvn.w	r3, #4
 8001afc:	e06e      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6810      	ldr	r0, [r2, #0]
 8001b06:	f107 020c 	add.w	r2, r7, #12
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4798      	blx	r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da02      	bge.n	8001b1a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b14:	f06f 0304 	mvn.w	r3, #4
 8001b18:	e060      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001b24:	2301      	movs	r3, #1
 8001b26:	e059      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6810      	ldr	r0, [r2, #0]
 8001b30:	f107 020c 	add.w	r2, r7, #12
 8001b34:	2100      	movs	r1, #0
 8001b36:	4798      	blx	r3
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	da02      	bge.n	8001b44 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b3e:	f06f 0304 	mvn.w	r3, #4
 8001b42:	e04b      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d11b      	bne.n	8001b86 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <LAN8742_GetLinkState+0x90>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b62:	2302      	movs	r3, #2
 8001b64:	e03a      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e033      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e02c      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b82:	2305      	movs	r3, #5
 8001b84:	e02a      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6810      	ldr	r0, [r2, #0]
 8001b8e:	f107 020c 	add.w	r2, r7, #12
 8001b92:	211f      	movs	r1, #31
 8001b94:	4798      	blx	r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da02      	bge.n	8001ba2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b9c:	f06f 0304 	mvn.w	r3, #4
 8001ba0:	e01c      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001bac:	2306      	movs	r3, #6
 8001bae:	e015      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 031c 	and.w	r3, r3, #28
 8001bb6:	2b18      	cmp	r3, #24
 8001bb8:	d101      	bne.n	8001bbe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e00e      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 031c 	and.w	r3, r3, #28
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d101      	bne.n	8001bcc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e007      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 031c 	and.w	r3, r3, #28
 8001bd2:	2b14      	cmp	r3, #20
 8001bd4:	d101      	bne.n	8001bda <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e000      	b.n	8001bdc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bda:	2305      	movs	r3, #5
    }				
  }
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f94f 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff f8a2 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f967 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f92f 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000014 	.word	0x20000014
 8001c80:	2000001c 	.word	0x2000001c
 8001c84:	20000018 	.word	0x20000018

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	2000001c 	.word	0x2000001c
 8001cac:	20000b00 	.word	0x20000b00

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000b00 	.word	0x20000b00

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000001c 	.word	0x2000001c

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff3e 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff8e 	bl	8001e04 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5d 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff31 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff feb6 	bl	8001cb0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e099      	b.n	8002084 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f70:	e00f      	b.n	8001f92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f72:	f7ff fe9d 	bl	8001cb0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d908      	bls.n	8001f92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e078      	b.n	8002084 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e8      	bne.n	8001f72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_DMA_Init+0x158>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d107      	bne.n	8001ffc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f023 0307 	bic.w	r3, r3, #7
 8002012:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	2b04      	cmp	r3, #4
 8002024:	d117      	bne.n	8002056 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00e      	beq.n	8002056 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fb1b 	bl	8002674 <DMA_CheckFifoParam>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002052:	2301      	movs	r3, #1
 8002054:	e016      	b.n	8002084 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fad2 	bl	8002608 <DMA_CalcBaseAndBitshift>
 8002064:	4603      	mov	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	223f      	movs	r2, #63	; 0x3f
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	f010803f 	.word	0xf010803f

08002090 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_DMA_Start_IT+0x26>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e040      	b.n	8002138 <HAL_DMA_Start_IT+0xa8>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d12f      	bne.n	800212a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fa64 	bl	80025ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	223f      	movs	r2, #63	; 0x3f
 80020ea:	409a      	lsls	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0216 	orr.w	r2, r2, #22
 80020fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0208 	orr.w	r2, r2, #8
 8002116:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e005      	b.n	8002136 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002132:	2302      	movs	r3, #2
 8002134:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002136:	7dfb      	ldrb	r3, [r7, #23]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800214e:	f7ff fdaf 	bl	8001cb0 <HAL_GetTick>
 8002152:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d008      	beq.n	8002172 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e052      	b.n	8002218 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0216 	bic.w	r2, r2, #22
 8002180:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002190:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <HAL_DMA_Abort+0x62>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0208 	bic.w	r2, r2, #8
 80021b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	e013      	b.n	80021ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c4:	f7ff fd74 	bl	8001cb0 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d90c      	bls.n	80021ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e015      	b.n	8002218 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1e4      	bne.n	80021c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	223f      	movs	r2, #63	; 0x3f
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d004      	beq.n	800223e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00c      	b.n	8002258 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2205      	movs	r2, #5
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002270:	4b8e      	ldr	r3, [pc, #568]	; (80024ac <HAL_DMA_IRQHandler+0x248>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a8e      	ldr	r2, [pc, #568]	; (80024b0 <HAL_DMA_IRQHandler+0x24c>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a9b      	lsrs	r3, r3, #10
 800227c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	2208      	movs	r2, #8
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01a      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2208      	movs	r2, #8
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2201      	movs	r2, #1
 80022f4:	409a      	lsls	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f043 0202 	orr.w	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	2204      	movs	r2, #4
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2204      	movs	r2, #4
 800232a:	409a      	lsls	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	2210      	movs	r2, #16
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d043      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03c      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2210      	movs	r2, #16
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d024      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
 8002392:	e01f      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e016      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0208 	bic.w	r2, r2, #8
 80023c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2220      	movs	r2, #32
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 808f 	beq.w	8002504 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8087 	beq.w	8002504 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2220      	movs	r2, #32
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b05      	cmp	r3, #5
 800240c:	d136      	bne.n	800247c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0216 	bic.w	r2, r2, #22
 800241c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_DMA_IRQHandler+0x1da>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0208 	bic.w	r2, r2, #8
 800244c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	223f      	movs	r2, #63	; 0x3f
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	2b00      	cmp	r3, #0
 8002470:	d07e      	beq.n	8002570 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
        }
        return;
 800247a:	e079      	b.n	8002570 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01d      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	2b00      	cmp	r3, #0
 800249e:	d031      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
 80024a8:	e02c      	b.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
 80024aa:	bf00      	nop
 80024ac:	20000014 	.word	0x20000014
 80024b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
 80024c4:	e01e      	b.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10f      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0210 	bic.w	r2, r2, #16
 80024e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	2b00      	cmp	r3, #0
 800250a:	d032      	beq.n	8002572 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d022      	beq.n	800255e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2205      	movs	r2, #5
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3301      	adds	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	429a      	cmp	r2, r3
 800253a:	d307      	bcc.n	800254c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f2      	bne.n	8002530 <HAL_DMA_IRQHandler+0x2cc>
 800254a:	e000      	b.n	800254e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800254c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
 800256e:	e000      	b.n	8002572 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002570:	bf00      	nop
    }
  }
}
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002586:	b2db      	uxtb	r3, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d108      	bne.n	80025ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ea:	e007      	b.n	80025fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3b10      	subs	r3, #16
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <DMA_CalcBaseAndBitshift+0x64>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002622:	4a13      	ldr	r2, [pc, #76]	; (8002670 <DMA_CalcBaseAndBitshift+0x68>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d909      	bls.n	800264a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	; 0x58
 8002648:	e007      	b.n	800265a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002652:	f023 0303 	bic.w	r3, r3, #3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	aaaaaaab 	.word	0xaaaaaaab
 8002670:	08019980 	.word	0x08019980

08002674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11f      	bne.n	80026ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d856      	bhi.n	8002742 <DMA_CheckFifoParam+0xce>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <DMA_CheckFifoParam+0x28>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026bf 	.word	0x080026bf
 80026a4:	080026ad 	.word	0x080026ad
 80026a8:	08002743 	.word	0x08002743
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d046      	beq.n	8002746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e043      	b.n	8002746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026c6:	d140      	bne.n	800274a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e03d      	b.n	800274a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d6:	d121      	bne.n	800271c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d837      	bhi.n	800274e <DMA_CheckFifoParam+0xda>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <DMA_CheckFifoParam+0x70>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	080026fb 	.word	0x080026fb
 80026ec:	080026f5 	.word	0x080026f5
 80026f0:	0800270d 	.word	0x0800270d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e030      	b.n	800275c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d025      	beq.n	8002752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e022      	b.n	8002752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800271a:	e01c      	b.n	8002756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d903      	bls.n	800272a <DMA_CheckFifoParam+0xb6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002728:	e018      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      break;
 800272e:	e015      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e00b      	b.n	800275a <DMA_CheckFifoParam+0xe6>
      break;
 8002742:	bf00      	nop
 8002744:	e00a      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e008      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e006      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e004      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;   
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
    }
  } 
  
  return status; 
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06c      	b.n	8002858 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2223      	movs	r2, #35	; 0x23
 800278c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f007 f847 	bl	8009824 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_ETH_Init+0xf4>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a30      	ldr	r2, [pc, #192]	; (8002860 <HAL_ETH_Init+0xf4>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_ETH_Init+0xf4>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80027b2:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <HAL_ETH_Init+0xf8>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a2b      	ldr	r2, [pc, #172]	; (8002864 <HAL_ETH_Init+0xf8>)
 80027b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80027be:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_ETH_Init+0xf8>)
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4927      	ldr	r1, [pc, #156]	; (8002864 <HAL_ETH_Init+0xf8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_ETH_Init+0xf8>)
 80027ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e8:	f7ff fa62 	bl	8001cb0 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027ee:	e011      	b.n	8002814 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80027f0:	f7ff fa5e 	bl	8001cb0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027fe:	d909      	bls.n	8002814 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2204      	movs	r2, #4
 8002804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	22e0      	movs	r2, #224	; 0xe0
 800280c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e021      	b.n	8002858 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e4      	bne.n	80027f0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fdd4 	bl	80033d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fe7b 	bl	8003528 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fed1 	bl	80035da <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	461a      	mov	r2, r3
 800283e:	2100      	movs	r1, #0
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fe39 	bl	80034b8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2210      	movs	r2, #16
 8002852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800

08002868 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002876:	2b10      	cmp	r3, #16
 8002878:	d13a      	bne.n	80028f0 <HAL_ETH_Start+0x88>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2223      	movs	r2, #35	; 0x23
 800287e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2204      	movs	r2, #4
 8002886:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f909 	bl	8002aa0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0208 	orr.w	r2, r2, #8
 800289c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0204 	orr.w	r2, r2, #4
 80028ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fc44 	bl	800313c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028ca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028e2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2223      	movs	r2, #35	; 0x23
 80028e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_ETH_Start+0x8a>
  }
  else
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002908:	2b23      	cmp	r3, #35	; 0x23
 800290a:	d130      	bne.n	800296e <HAL_ETH_Stop+0x74>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2223      	movs	r2, #35	; 0x23
 8002910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0208 	bic.w	r2, r2, #8
 8002922:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	f023 0302 	bic.w	r3, r3, #2
 8002936:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800293a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0204 	bic.w	r2, r2, #4
 800294a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fbf5 	bl	800313c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0208 	bic.w	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2210      	movs	r2, #16
 8002966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_ETH_Stop+0x76>
  }
  else
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07c      	b.n	8002a98 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a4:	2b23      	cmp	r3, #35	; 0x23
 80029a6:	d176      	bne.n	8002a96 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80029a8:	2200      	movs	r2, #0
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fe81 	bl	80036b4 <ETH_Prepare_Tx_Descriptors>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f043 0202 	orr.w	r2, r3, #2
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e065      	b.n	8002a98 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029cc:	f3bf 8f4f 	dsb	sy
}
 80029d0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3206      	adds	r2, #6
 80029da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029de:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d904      	bls.n	80029fc <HAL_ETH_Transmit+0x84>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	1f1a      	subs	r2, r3, #4
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3106      	adds	r1, #6
 8002a08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a10:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002a12:	f7ff f94d 	bl	8001cb0 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a18:	e037      	b.n	8002a8a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d011      	beq.n	8002a50 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f043 0208 	orr.w	r2, r3, #8
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e023      	b.n	8002a98 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d018      	beq.n	8002a8a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7ff f92a 	bl	8001cb0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <HAL_ETH_Transmit+0xf6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f043 0204 	orr.w	r2, r3, #4
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002a84:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e006      	b.n	8002a98 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	dbc3      	blt.n	8002a1a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e000      	b.n	8002a98 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002aac:	2301      	movs	r3, #1
 8002aae:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	3212      	adds	r2, #18
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002ac8:	e03e      	b.n	8002b48 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d112      	bne.n	8002af8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f007 f84c 	bl	8009b74 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	74fb      	strb	r3, [r7, #19]
 8002ae6:	e007      	b.n	8002af8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	461a      	mov	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d024      	beq.n	8002b48 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002afe:	f3bf 8f5f 	dmb	sy
}
 8002b02:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b0a:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4a1a      	ldr	r2, [pc, #104]	; (8002b80 <ETH_UpdateDescriptor+0xe0>)
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e003      	b.n	8002b24 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8002b22:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d902      	bls.n	8002b36 <ETH_UpdateDescriptor+0x96>
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3b04      	subs	r3, #4
 8002b34:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	3212      	adds	r2, #18
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	617b      	str	r3, [r7, #20]
      desccount--;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <ETH_UpdateDescriptor+0xb4>
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1ba      	bne.n	8002aca <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d00c      	beq.n	8002b78 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b66:	461a      	mov	r2, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	800043e8 	.word	0x800043e8

08002b84 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d112      	bne.n	8002bc4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d109      	bne.n	8002bc4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_ETH_IRQHandler+0x178>)
 8002bbc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f8ac 	bl	8002d1c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d113      	bne.n	8002bfe <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10a      	bne.n	8002bfe <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002bf6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f885 	bl	8002d08 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	d14c      	bne.n	8002cac <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c24:	d142      	bne.n	8002cac <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f043 0208 	orr.w	r2, r3, #8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c48:	d11a      	bne.n	8002c80 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_ETH_IRQHandler+0x17c>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002c70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c74:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	22e0      	movs	r2, #224	; 0xe0
 8002c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002c7e:	e012      	b.n	8002ca6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	f248 6380 	movw	r3, #34432	; 0x8680
 8002c8e:	4013      	ands	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f248 6380 	movw	r3, #34432	; 0x8680
 8002ca4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f842 	bl	8002d30 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f83a 	bl	8002d44 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_ETH_IRQHandler+0x180>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_ETH_IRQHandler+0x180>)
 8002ce6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cea:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f833 	bl	8002d58 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	00010040 	.word	0x00010040
 8002d00:	007e2000 	.word	0x007e2000
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 031c 	and.w	r3, r3, #28
 8002d88:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	02db      	lsls	r3, r3, #11
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002dbc:	f7fe ff78 	bl	8001cb0 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dc2:	e00d      	b.n	8002de0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002dc4:	f7fe ff74 	bl	8001cb0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd2:	d301      	bcc.n	8002dd8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e010      	b.n	8002dfa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ec      	bne.n	8002dc4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 031c 	and.w	r3, r3, #28
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	02db      	lsls	r3, r3, #11
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	019b      	lsls	r3, r3, #6
 8002e30:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e5c:	f7fe ff28 	bl	8001cb0 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e62:	e00d      	b.n	8002e80 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002e64:	f7fe ff24 	bl	8001cb0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e72:	d301      	bcc.n	8002e78 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e009      	b.n	8002e8c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ec      	bne.n	8002e64 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0d2      	b.n	800304e <HAL_ETH_GetMACConfig+0x1ba>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	b29a      	uxth	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e00b      	b.n	8003086 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003074:	2b10      	cmp	r3, #16
 8003076:	d105      	bne.n	8003084 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003078:	6839      	ldr	r1, [r7, #0]
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f884 	bl	8003188 <ETH_SetMACConfig>

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 031c 	bic.w	r3, r3, #28
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80030a8:	f003 fd26 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 80030ac:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_ETH_SetMDIOClockRange+0x98>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d908      	bls.n	80030c8 <HAL_ETH_SetMDIOClockRange+0x38>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4a1c      	ldr	r2, [pc, #112]	; (800312c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d804      	bhi.n	80030c8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e027      	b.n	8003118 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d908      	bls.n	80030e2 <HAL_ETH_SetMDIOClockRange+0x52>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d204      	bcs.n	80030e2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f043 030c 	orr.w	r3, r3, #12
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e01a      	b.n	8003118 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4a12      	ldr	r2, [pc, #72]	; (8003130 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d303      	bcc.n	80030f2 <HAL_ETH_SetMDIOClockRange+0x62>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d911      	bls.n	8003116 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d908      	bls.n	800310c <HAL_ETH_SetMDIOClockRange+0x7c>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d804      	bhi.n	800310c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e005      	b.n	8003118 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f043 0310 	orr.w	r3, r3, #16
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e000      	b.n	8003118 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003116:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	611a      	str	r2, [r3, #16]
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	01312cff 	.word	0x01312cff
 800312c:	02160ebf 	.word	0x02160ebf
 8003130:	03938700 	.word	0x03938700
 8003134:	05f5e0ff 	.word	0x05f5e0ff
 8003138:	08f0d17f 	.word	0x08f0d17f

0800313c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800315a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800315e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800316c:	2001      	movs	r0, #1
 800316e:	f7fe fdab 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800317c:	6193      	str	r3, [r2, #24]
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4b47      	ldr	r3, [pc, #284]	; (80032bc <ETH_SetMACConfig+0x134>)
 800319e:	4013      	ands	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	7c1b      	ldrb	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <ETH_SetMACConfig+0x28>
 80031aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031ae:	e000      	b.n	80031b2 <ETH_SetMACConfig+0x2a>
 80031b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	7c5b      	ldrb	r3, [r3, #17]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <ETH_SetMACConfig+0x38>
 80031ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031be:	e000      	b.n	80031c2 <ETH_SetMACConfig+0x3a>
 80031c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	7fdb      	ldrb	r3, [r3, #31]
 80031ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80031d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	7f92      	ldrb	r2, [r2, #30]
 80031dc:	2a00      	cmp	r2, #0
 80031de:	d102      	bne.n	80031e6 <ETH_SetMACConfig+0x5e>
 80031e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e4:	e000      	b.n	80031e8 <ETH_SetMACConfig+0x60>
 80031e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80031e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	7f1b      	ldrb	r3, [r3, #28]
 80031ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	791b      	ldrb	r3, [r3, #4]
 80031fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80031fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003206:	2a00      	cmp	r2, #0
 8003208:	d102      	bne.n	8003210 <ETH_SetMACConfig+0x88>
 800320a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800320e:	e000      	b.n	8003212 <ETH_SetMACConfig+0x8a>
 8003210:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003212:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	7bdb      	ldrb	r3, [r3, #15]
 8003218:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800321a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003220:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003228:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800322a:	4313      	orrs	r3, r2
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003242:	2001      	movs	r0, #1
 8003244:	f7fe fd40 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800325e:	4013      	ands	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003266:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800326e:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8003274:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 800327c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8003284:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800328c:	4313      	orrs	r3, r2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032a4:	2001      	movs	r0, #1
 80032a6:	f7fe fd0f 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	619a      	str	r2, [r3, #24]
}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	ff20810f 	.word	0xff20810f

080032c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <ETH_SetDMAConfig+0x110>)
 80032da:	4013      	ands	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	7b1b      	ldrb	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <ETH_SetDMAConfig+0x2c>
 80032e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032ea:	e000      	b.n	80032ee <ETH_SetDMAConfig+0x2e>
 80032ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	7b5b      	ldrb	r3, [r3, #13]
 80032f2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032f4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	7f52      	ldrb	r2, [r2, #29]
 80032fa:	2a00      	cmp	r2, #0
 80032fc:	d102      	bne.n	8003304 <ETH_SetDMAConfig+0x44>
 80032fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003302:	e000      	b.n	8003306 <ETH_SetDMAConfig+0x46>
 8003304:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003306:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	7b9b      	ldrb	r3, [r3, #14]
 800330c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800330e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003314:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	7f1b      	ldrb	r3, [r3, #28]
 800331a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800331c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	7f9b      	ldrb	r3, [r3, #30]
 8003322:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003324:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800332a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003332:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003334:	4313      	orrs	r3, r2
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003344:	461a      	mov	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003356:	2001      	movs	r0, #1
 8003358:	f7fe fcb6 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003364:	461a      	mov	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	791b      	ldrb	r3, [r3, #4]
 800336e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003374:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800337a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003380:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003388:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800338a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003392:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003398:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033b4:	2001      	movs	r0, #1
 80033b6:	f7fe fc87 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	f8de3f23 	.word	0xf8de3f23

080033d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0a6      	sub	sp, #152	; 0x98
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80033e8:	2300      	movs	r3, #0
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003410:	2300      	movs	r3, #0
 8003412:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800341a:	2300      	movs	r3, #0
 800341c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800341e:	2300      	movs	r3, #0
 8003420:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003436:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800343a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800343c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003440:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003448:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fe9a 	bl	8003188 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003454:	2301      	movs	r3, #1
 8003456:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003458:	2301      	movs	r3, #1
 800345a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003462:	2301      	movs	r3, #1
 8003464:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003470:	2300      	movs	r3, #0
 8003472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003476:	2300      	movs	r3, #0
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003480:	2301      	movs	r3, #1
 8003482:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003488:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800348a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800348e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003494:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800349c:	2300      	movs	r3, #0
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff08 	bl	80032c0 <ETH_SetDMAConfig>
}
 80034b0:	bf00      	nop
 80034b2:	3798      	adds	r7, #152	; 0x98
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3305      	adds	r3, #5
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	3204      	adds	r2, #4
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <ETH_MACAddressConfig+0x68>)
 80034da:	4413      	add	r3, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3303      	adds	r3, #3
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	061a      	lsls	r2, r3, #24
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3302      	adds	r3, #2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3301      	adds	r3, #1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	4313      	orrs	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <ETH_MACAddressConfig+0x6c>)
 800350a:	4413      	add	r3, r2
 800350c:	461a      	mov	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6013      	str	r3, [r2, #0]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40028040 	.word	0x40028040
 8003524:	40028044 	.word	0x40028044

08003528 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e03e      	b.n	80035b4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68d9      	ldr	r1, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	440b      	add	r3, r1
 8003546:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	3206      	adds	r2, #6
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d80c      	bhi.n	8003598 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68d9      	ldr	r1, [r3, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	e004      	b.n	80035a2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	461a      	mov	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3301      	adds	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d9bd      	bls.n	8003536 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035cc:	611a      	str	r2, [r3, #16]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e046      	b.n	8003676 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6919      	ldr	r1, [r3, #16]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2200      	movs	r2, #0
 8003604:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2200      	movs	r2, #0
 8003616:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003624:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800362c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	3212      	adds	r2, #18
 8003642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d80c      	bhi.n	8003666 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6919      	ldr	r1, [r3, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	440b      	add	r3, r1
 800365e:	461a      	mov	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	e004      	b.n	8003670 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	461a      	mov	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3301      	adds	r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d9b5      	bls.n	80035e8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a6:	60da      	str	r2, [r3, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b08d      	sub	sp, #52	; 0x34
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3318      	adds	r3, #24
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036de:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f6:	d007      	beq.n	8003708 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	3304      	adds	r3, #4
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003708:	2302      	movs	r3, #2
 800370a:	e103      	b.n	8003914 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	3301      	adds	r3, #1
 8003710:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003724:	f023 031f 	bic.w	r3, r3, #31
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	6852      	ldr	r2, [r2, #4]
 800372c:	431a      	orrs	r2, r3
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	431a      	orrs	r2, r3
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	431a      	orrs	r2, r3
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003792:	f3bf 8f5f 	dmb	sy
}
 8003796:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80037a4:	e084      	b.n	80038b0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e005      	b.n	80037d2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	3301      	adds	r3, #1
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d902      	bls.n	80037e4 <ETH_Prepare_Tx_Descriptors+0x130>
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	3b04      	subs	r3, #4
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003806:	d007      	beq.n	8003818 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	3304      	adds	r3, #4
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d029      	beq.n	800386c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003824:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003826:	2300      	movs	r3, #0
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
 800382a:	e019      	b.n	8003860 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800382c:	f3bf 8f5f 	dmb	sy
}
 8003830:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	3301      	adds	r3, #1
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	2b03      	cmp	r3, #3
 8003848:	d902      	bls.n	8003850 <ETH_Prepare_Tx_Descriptors+0x19c>
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	3b04      	subs	r3, #4
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003858:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	3301      	adds	r3, #1
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	429a      	cmp	r2, r3
 8003866:	d3e1      	bcc.n	800382c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003868:	2302      	movs	r3, #2
 800386a:	e053      	b.n	8003914 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	3301      	adds	r3, #1
 8003870:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800388a:	f023 031f 	bic.w	r3, r3, #31
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	6852      	ldr	r2, [r2, #4]
 8003892:	431a      	orrs	r2, r3
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	3301      	adds	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800389e:	f3bf 8f5f 	dmb	sy
}
 80038a2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f af76 	bne.w	80037a6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e005      	b.n	80038da <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ea:	6979      	ldr	r1, [r7, #20]
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	3304      	adds	r3, #4
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80038fc:	b672      	cpsid	i
}
 80038fe:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	4413      	add	r3, r2
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800390e:	b662      	cpsie	i
}
 8003910:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3734      	adds	r7, #52	; 0x34
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e177      	b.n	8003c2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800393c:	2201      	movs	r2, #1
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	429a      	cmp	r2, r3
 8003956:	f040 8166 	bne.w	8003c26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b01      	cmp	r3, #1
 8003964:	d005      	beq.n	8003972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800396e:	2b02      	cmp	r3, #2
 8003970:	d130      	bne.n	80039d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a8:	2201      	movs	r2, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 0201 	and.w	r2, r3, #1
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d017      	beq.n	8003a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d123      	bne.n	8003a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	08da      	lsrs	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3208      	adds	r2, #8
 8003a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	220f      	movs	r2, #15
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	08da      	lsrs	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3208      	adds	r2, #8
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0203 	and.w	r2, r3, #3
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80c0 	beq.w	8003c26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	4b66      	ldr	r3, [pc, #408]	; (8003c44 <HAL_GPIO_Init+0x324>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	4a65      	ldr	r2, [pc, #404]	; (8003c44 <HAL_GPIO_Init+0x324>)
 8003ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_GPIO_Init+0x324>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ac2:	4a61      	ldr	r2, [pc, #388]	; (8003c48 <HAL_GPIO_Init+0x328>)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	3302      	adds	r3, #2
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	220f      	movs	r2, #15
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_GPIO_Init+0x32c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d037      	beq.n	8003b5e <HAL_GPIO_Init+0x23e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a57      	ldr	r2, [pc, #348]	; (8003c50 <HAL_GPIO_Init+0x330>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d031      	beq.n	8003b5a <HAL_GPIO_Init+0x23a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a56      	ldr	r2, [pc, #344]	; (8003c54 <HAL_GPIO_Init+0x334>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02b      	beq.n	8003b56 <HAL_GPIO_Init+0x236>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a55      	ldr	r2, [pc, #340]	; (8003c58 <HAL_GPIO_Init+0x338>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d025      	beq.n	8003b52 <HAL_GPIO_Init+0x232>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a54      	ldr	r2, [pc, #336]	; (8003c5c <HAL_GPIO_Init+0x33c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01f      	beq.n	8003b4e <HAL_GPIO_Init+0x22e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a53      	ldr	r2, [pc, #332]	; (8003c60 <HAL_GPIO_Init+0x340>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d019      	beq.n	8003b4a <HAL_GPIO_Init+0x22a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a52      	ldr	r2, [pc, #328]	; (8003c64 <HAL_GPIO_Init+0x344>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_GPIO_Init+0x226>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a51      	ldr	r2, [pc, #324]	; (8003c68 <HAL_GPIO_Init+0x348>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00d      	beq.n	8003b42 <HAL_GPIO_Init+0x222>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a50      	ldr	r2, [pc, #320]	; (8003c6c <HAL_GPIO_Init+0x34c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <HAL_GPIO_Init+0x21e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4f      	ldr	r2, [pc, #316]	; (8003c70 <HAL_GPIO_Init+0x350>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_GPIO_Init+0x21a>
 8003b36:	2309      	movs	r3, #9
 8003b38:	e012      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b3a:	230a      	movs	r3, #10
 8003b3c:	e010      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	e00e      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b42:	2307      	movs	r3, #7
 8003b44:	e00c      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b46:	2306      	movs	r3, #6
 8003b48:	e00a      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b4a:	2305      	movs	r3, #5
 8003b4c:	e008      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b52:	2303      	movs	r3, #3
 8003b54:	e004      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_GPIO_Init+0x240>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	f002 0203 	and.w	r2, r2, #3
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b70:	4935      	ldr	r1, [pc, #212]	; (8003c48 <HAL_GPIO_Init+0x328>)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_GPIO_Init+0x354>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ba2:	4a34      	ldr	r2, [pc, #208]	; (8003c74 <HAL_GPIO_Init+0x354>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba8:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <HAL_GPIO_Init+0x354>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bcc:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <HAL_GPIO_Init+0x354>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bd2:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <HAL_GPIO_Init+0x354>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <HAL_GPIO_Init+0x354>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_GPIO_Init+0x354>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <HAL_GPIO_Init+0x354>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b0f      	cmp	r3, #15
 8003c30:	f67f ae84 	bls.w	800393c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	40020400 	.word	0x40020400
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020c00 	.word	0x40020c00
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40021400 	.word	0x40021400
 8003c64:	40021800 	.word	0x40021800
 8003c68:	40021c00 	.word	0x40021c00
 8003c6c:	40022000 	.word	0x40022000
 8003c70:	40022400 	.word	0x40022400
 8003c74:	40013c00 	.word	0x40013c00

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c94:	e003      	b.n	8003c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e12b      	b.n	8003f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd f86c 	bl	8000db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d10:	f002 fefe 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8003d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a81      	ldr	r2, [pc, #516]	; (8003f20 <HAL_I2C_Init+0x274>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d807      	bhi.n	8003d30 <HAL_I2C_Init+0x84>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a80      	ldr	r2, [pc, #512]	; (8003f24 <HAL_I2C_Init+0x278>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	bf94      	ite	ls
 8003d28:	2301      	movls	r3, #1
 8003d2a:	2300      	movhi	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e006      	b.n	8003d3e <HAL_I2C_Init+0x92>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a7d      	ldr	r2, [pc, #500]	; (8003f28 <HAL_I2C_Init+0x27c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	bf94      	ite	ls
 8003d38:	2301      	movls	r3, #1
 8003d3a:	2300      	movhi	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0e7      	b.n	8003f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a78      	ldr	r2, [pc, #480]	; (8003f2c <HAL_I2C_Init+0x280>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0c9b      	lsrs	r3, r3, #18
 8003d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a6a      	ldr	r2, [pc, #424]	; (8003f20 <HAL_I2C_Init+0x274>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d802      	bhi.n	8003d80 <HAL_I2C_Init+0xd4>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	e009      	b.n	8003d94 <HAL_I2C_Init+0xe8>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	4a69      	ldr	r2, [pc, #420]	; (8003f30 <HAL_I2C_Init+0x284>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	3301      	adds	r3, #1
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	495c      	ldr	r1, [pc, #368]	; (8003f20 <HAL_I2C_Init+0x274>)
 8003db0:	428b      	cmp	r3, r1
 8003db2:	d819      	bhi.n	8003de8 <HAL_I2C_Init+0x13c>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1e59      	subs	r1, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dc8:	400b      	ands	r3, r1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_I2C_Init+0x138>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1e59      	subs	r1, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de2:	e051      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003de4:	2304      	movs	r3, #4
 8003de6:	e04f      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d111      	bne.n	8003e14 <HAL_I2C_Init+0x168>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	440b      	add	r3, r1
 8003dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e012      	b.n	8003e3a <HAL_I2C_Init+0x18e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e58      	subs	r0, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	0099      	lsls	r1, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x196>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e022      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10e      	bne.n	8003e68 <HAL_I2C_Init+0x1bc>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e58      	subs	r0, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	440b      	add	r3, r1
 8003e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e66:	e00f      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e58      	subs	r0, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	0099      	lsls	r1, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	6809      	ldr	r1, [r1, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6911      	ldr	r1, [r2, #16]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68d2      	ldr	r2, [r2, #12]
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	000186a0 	.word	0x000186a0
 8003f24:	001e847f 	.word	0x001e847f
 8003f28:	003d08ff 	.word	0x003d08ff
 8003f2c:	431bde83 	.word	0x431bde83
 8003f30:	10624dd3 	.word	0x10624dd3

08003f34 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	460b      	mov	r3, r1
 8003f42:	817b      	strh	r3, [r7, #10]
 8003f44:	4613      	mov	r3, r2
 8003f46:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	f040 810d 	bne.w	8004174 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f5a:	4b89      	ldr	r3, [pc, #548]	; (8004180 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	08db      	lsrs	r3, r3, #3
 8003f60:	4a88      	ldr	r2, [pc, #544]	; (8004184 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	0a1a      	lsrs	r2, r3, #8
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009a      	lsls	r2, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d116      	bne.n	8003fae <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0e3      	b.n	8004176 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d0db      	beq.n	8003f74 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_I2C_Master_Transmit_DMA+0x96>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e0d5      	b.n	8004176 <HAL_I2C_Master_Transmit_DMA+0x242>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d007      	beq.n	8003ff0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2221      	movs	r2, #33	; 0x21
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2210      	movs	r2, #16
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	893a      	ldrh	r2, [r7, #8]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a56      	ldr	r2, [pc, #344]	; (8004188 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8004030:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004032:	897a      	ldrh	r2, [r7, #10]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d07b      	beq.n	8004138 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02a      	beq.n	800409e <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	4a4f      	ldr	r2, [pc, #316]	; (800418c <HAL_I2C_Master_Transmit_DMA+0x258>)
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	4a4e      	ldr	r2, [pc, #312]	; (8004190 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8004056:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	2200      	movs	r2, #0
 8004066:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	2200      	movs	r2, #0
 800406e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	2200      	movs	r2, #0
 8004076:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4619      	mov	r1, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3310      	adds	r3, #16
 8004088:	461a      	mov	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	f7fd ffff 	bl	8002090 <HAL_DMA_Start_IT>
 8004092:	4603      	mov	r3, r0
 8004094:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d139      	bne.n	8004110 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800409c:	e013      	b.n	80040c6 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e057      	b.n	8004176 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80040dc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ec:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e02f      	b.n	8004170 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f043 0210 	orr.w	r2, r3, #16
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e01e      	b.n	8004176 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004146:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004156:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800416e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000014 	.word	0x20000014
 8004184:	14f8b589 	.word	0x14f8b589
 8004188:	ffff0000 	.word	0xffff0000
 800418c:	08005af1 	.word	0x08005af1
 8004190:	08005c9b 	.word	0x08005c9b

08004194 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	f040 80b8 	bne.w	8004320 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_I2C_Slave_Receive_DMA+0x28>
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0b0      	b.n	8004322 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_I2C_Slave_Receive_DMA+0x3a>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0a9      	b.n	8004322 <HAL_I2C_Slave_Receive_DMA+0x18e>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d007      	beq.n	80041f4 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2222      	movs	r2, #34	; 0x22
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a3e      	ldr	r2, [pc, #248]	; (800432c <HAL_I2C_Slave_Receive_DMA+0x198>)
 8004234:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02a      	beq.n	8004294 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	4a3b      	ldr	r2, [pc, #236]	; (8004330 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	4a3a      	ldr	r2, [pc, #232]	; (8004334 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800424c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	2200      	movs	r2, #0
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	2200      	movs	r2, #0
 800425c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	2200      	movs	r2, #0
 8004264:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	2200      	movs	r2, #0
 800426c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3310      	adds	r3, #16
 8004278:	4619      	mov	r1, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	f7fd ff04 	bl	8002090 <HAL_DMA_Start_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d132      	bne.n	80042f8 <HAL_I2C_Slave_Receive_DMA+0x164>
 8004292:	e013      	b.n	80042bc <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2228      	movs	r2, #40	; 0x28
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e032      	b.n	8004322 <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ca:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80042e2:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f2:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e014      	b.n	8004322 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f043 0210 	orr.w	r2, r3, #16
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	ffff0000 	.word	0xffff0000
 8004330:	08005af1 	.word	0x08005af1
 8004334:	08005c9b 	.word	0x08005c9b

08004338 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004358:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b10      	cmp	r3, #16
 8004366:	d003      	beq.n	8004370 <HAL_I2C_EV_IRQHandler+0x38>
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	f040 80c1 	bne.w	80044f2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10d      	bne.n	80043a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004390:	d003      	beq.n	800439a <HAL_I2C_EV_IRQHandler+0x62>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004398:	d101      	bne.n	800439e <HAL_I2C_EV_IRQHandler+0x66>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x68>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f000 8132 	beq.w	800460a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00c      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x92>
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	0a5b      	lsrs	r3, r3, #9
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d006      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f001 fd83 	bl	8005ec8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fd79 	bl	8004eba <I2C_Master_SB>
 80043c8:	e092      	b.n	80044f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	08db      	lsrs	r3, r3, #3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_I2C_EV_IRQHandler+0xb2>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	0a5b      	lsrs	r3, r3, #9
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fdef 	bl	8004fc6 <I2C_Master_ADD10>
 80043e8:	e082      	b.n	80044f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_I2C_EV_IRQHandler+0xd2>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	0a5b      	lsrs	r3, r3, #9
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fe09 	bl	800501a <I2C_Master_ADDR>
 8004408:	e072      	b.n	80044f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d03b      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004424:	f000 80f3 	beq.w	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	09db      	lsrs	r3, r3, #7
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00f      	beq.n	8004454 <HAL_I2C_EV_IRQHandler+0x11c>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	0a9b      	lsrs	r3, r3, #10
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_I2C_EV_IRQHandler+0x11c>
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9e9 	bl	8004824 <I2C_MasterTransmit_TXE>
 8004452:	e04d      	b.n	80044f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80d6 	beq.w	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	0a5b      	lsrs	r3, r3, #9
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80cf 	beq.w	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004470:	7bbb      	ldrb	r3, [r7, #14]
 8004472:	2b21      	cmp	r3, #33	; 0x21
 8004474:	d103      	bne.n	800447e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa70 	bl	800495c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800447c:	e0c7      	b.n	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	f040 80c4 	bne.w	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fade 	bl	8004a48 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800448c:	e0bf      	b.n	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449c:	f000 80b7 	beq.w	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00f      	beq.n	80044cc <HAL_I2C_EV_IRQHandler+0x194>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	0a9b      	lsrs	r3, r3, #10
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <HAL_I2C_EV_IRQHandler+0x194>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fb53 	bl	8004b70 <I2C_MasterReceive_RXNE>
 80044ca:	e011      	b.n	80044f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 809a 	beq.w	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	0a5b      	lsrs	r3, r3, #9
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8093 	beq.w	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fbfc 	bl	8004ce6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ee:	e08e      	b.n	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
 80044f0:	e08d      	b.n	800460e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	e007      	b.n	8004514 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	085b      	lsrs	r3, r3, #1
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <HAL_I2C_EV_IRQHandler+0x20e>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	0a5b      	lsrs	r3, r3, #9
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00c      	beq.n	8004546 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800453c:	69b9      	ldr	r1, [r7, #24]
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 ffba 	bl	80054b8 <I2C_Slave_ADDR>
 8004544:	e066      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x22e>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	0a5b      	lsrs	r3, r3, #9
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fff4 	bl	800554c <I2C_Slave_STOPF>
 8004564:	e056      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004566:	7bbb      	ldrb	r3, [r7, #14]
 8004568:	2b21      	cmp	r3, #33	; 0x21
 800456a:	d002      	beq.n	8004572 <HAL_I2C_EV_IRQHandler+0x23a>
 800456c:	7bbb      	ldrb	r3, [r7, #14]
 800456e:	2b29      	cmp	r3, #41	; 0x29
 8004570:	d125      	bne.n	80045be <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	09db      	lsrs	r3, r3, #7
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00f      	beq.n	800459e <HAL_I2C_EV_IRQHandler+0x266>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	0a9b      	lsrs	r3, r3, #10
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_I2C_EV_IRQHandler+0x266>
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fed0 	bl	800533c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800459c:	e039      	b.n	8004612 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d033      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0x2da>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	0a5b      	lsrs	r3, r3, #9
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d02d      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fefd 	bl	80053b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045bc:	e029      	b.n	8004612 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00f      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	0a9b      	lsrs	r3, r3, #10
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	089b      	lsrs	r3, r3, #2
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 ff08 	bl	80053f8 <I2C_SlaveReceive_RXNE>
 80045e8:	e014      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00e      	beq.n	8004614 <HAL_I2C_EV_IRQHandler+0x2dc>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	0a5b      	lsrs	r3, r3, #9
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d008      	beq.n	8004614 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 ff36 	bl	8005474 <I2C_SlaveReceive_BTF>
 8004608:	e004      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800460a:	bf00      	nop
 800460c:	e002      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004612:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b08a      	sub	sp, #40	; 0x28
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00e      	beq.n	8004668 <HAL_I2C_ER_IRQHandler+0x4e>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	0a1b      	lsrs	r3, r3, #8
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004666:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	0a5b      	lsrs	r3, r3, #9
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00e      	beq.n	8004692 <HAL_I2C_ER_IRQHandler+0x78>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	f043 0302 	orr.w	r3, r3, #2
 8004686:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004690:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	0a9b      	lsrs	r3, r3, #10
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d03f      	beq.n	800471e <HAL_I2C_ER_IRQHandler+0x104>
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d039      	beq.n	800471e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80046aa:	7efb      	ldrb	r3, [r7, #27]
 80046ac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80046c4:	7ebb      	ldrb	r3, [r7, #26]
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d112      	bne.n	80046f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10f      	bne.n	80046f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b21      	cmp	r3, #33	; 0x21
 80046d4:	d008      	beq.n	80046e8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	2b29      	cmp	r3, #41	; 0x29
 80046da:	d005      	beq.n	80046e8 <HAL_I2C_ER_IRQHandler+0xce>
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	2b28      	cmp	r3, #40	; 0x28
 80046e0:	d106      	bne.n	80046f0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b21      	cmp	r3, #33	; 0x21
 80046e6:	d103      	bne.n	80046f0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f001 f85f 	bl	80057ac <I2C_Slave_AF>
 80046ee:	e016      	b.n	800471e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046f8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	f043 0304 	orr.w	r3, r3, #4
 8004700:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004702:	7efb      	ldrb	r3, [r7, #27]
 8004704:	2b10      	cmp	r3, #16
 8004706:	d002      	beq.n	800470e <HAL_I2C_ER_IRQHandler+0xf4>
 8004708:	7efb      	ldrb	r3, [r7, #27]
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d107      	bne.n	800471e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	0adb      	lsrs	r3, r3, #11
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <HAL_I2C_ER_IRQHandler+0x12e>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	f043 0308 	orr.w	r3, r3, #8
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004746:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f001 f896 	bl	800588c <I2C_ITError>
  }
}
 8004760:	bf00      	nop
 8004762:	3728      	adds	r7, #40	; 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
 80047b0:	4613      	mov	r3, r2
 80047b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d150      	bne.n	80048ec <I2C_MasterTransmit_TXE+0xc8>
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	2b21      	cmp	r3, #33	; 0x21
 800484e:	d14d      	bne.n	80048ec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d01d      	beq.n	8004892 <I2C_MasterTransmit_TXE+0x6e>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b20      	cmp	r3, #32
 800485a:	d01a      	beq.n	8004892 <I2C_MasterTransmit_TXE+0x6e>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004862:	d016      	beq.n	8004892 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004872:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2211      	movs	r2, #17
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ff6c 	bl	8004768 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004890:	e060      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048a0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d107      	bne.n	80048dc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ff7d 	bl	80047d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048da:	e03b      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff3f 	bl	8004768 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048ea:	e033      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b21      	cmp	r3, #33	; 0x21
 80048f0:	d005      	beq.n	80048fe <I2C_MasterTransmit_TXE+0xda>
 80048f2:	7bbb      	ldrb	r3, [r7, #14]
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d12d      	bne.n	8004954 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b22      	cmp	r3, #34	; 0x22
 80048fc:	d12a      	bne.n	8004954 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d108      	bne.n	800491a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004918:	e01c      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d103      	bne.n	800492e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f88e 	bl	8004a48 <I2C_MemoryTransmit_TXE_BTF>
}
 800492c:	e012      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	781a      	ldrb	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004952:	e7ff      	b.n	8004954 <I2C_MasterTransmit_TXE+0x130>
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b21      	cmp	r3, #33	; 0x21
 8004974:	d164      	bne.n	8004a40 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d012      	beq.n	80049a6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80049a4:	e04c      	b.n	8004a40 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d01d      	beq.n	80049e8 <I2C_MasterTransmit_BTF+0x8c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d01a      	beq.n	80049e8 <I2C_MasterTransmit_BTF+0x8c>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049b8:	d016      	beq.n	80049e8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2211      	movs	r2, #17
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fec1 	bl	8004768 <HAL_I2C_MasterTxCpltCallback>
}
 80049e6:	e02b      	b.n	8004a40 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a06:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d107      	bne.n	8004a32 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fed2 	bl	80047d4 <HAL_I2C_MemTxCpltCallback>
}
 8004a30:	e006      	b.n	8004a40 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fe94 	bl	8004768 <HAL_I2C_MasterTxCpltCallback>
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d11d      	bne.n	8004a9c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d10b      	bne.n	8004a80 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	1c9a      	adds	r2, r3, #2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a7e:	e073      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	121b      	asrs	r3, r3, #8
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a9a:	e065      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d10b      	bne.n	8004abc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004aba:	e055      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d151      	bne.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b22      	cmp	r3, #34	; 0x22
 8004ac8:	d10d      	bne.n	8004ae6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ae4:	e040      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b21      	cmp	r3, #33	; 0x21
 8004af4:	d112      	bne.n	8004b1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b1a:	e025      	b.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d120      	bne.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b21      	cmp	r3, #33	; 0x21
 8004b2a:	d11d      	bne.n	8004b68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fe36 	bl	80047d4 <HAL_I2C_MemTxCpltCallback>
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b22      	cmp	r3, #34	; 0x22
 8004b82:	f040 80ac 	bne.w	8004cde <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d921      	bls.n	8004bd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	f040 808c 	bne.w	8004cde <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004bd6:	e082      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d075      	beq.n	8004ccc <I2C_MasterReceive_RXNE+0x15c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d002      	beq.n	8004bec <I2C_MasterReceive_RXNE+0x7c>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d16f      	bne.n	8004ccc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 f939 	bl	8005e64 <I2C_WaitOnSTOPRequestThroughIT>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d142      	bne.n	8004c7e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c06:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	d10a      	bne.n	8004c68 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fdc1 	bl	80047e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c66:	e03a      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2212      	movs	r2, #18
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff fd80 	bl	800477c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c7c:	e02f      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff fd99 	bl	80047fc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cca:	e008      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	605a      	str	r2, [r3, #4]
}
 8004cdc:	e7ff      	b.n	8004cde <I2C_MasterReceive_RXNE+0x16e>
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d11b      	bne.n	8004d36 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d34:	e0bd      	b.n	8004eb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d129      	bne.n	8004d94 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d00a      	beq.n	8004d6c <I2C_MasterReceive_BTF+0x86>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d007      	beq.n	8004d6c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d92:	e08e      	b.n	8004eb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d176      	bne.n	8004e8c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d002      	beq.n	8004daa <I2C_MasterReceive_BTF+0xc4>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d108      	bne.n	8004dbc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e019      	b.n	8004df0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d002      	beq.n	8004dc8 <I2C_MasterReceive_BTF+0xe2>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d108      	bne.n	8004dda <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e00a      	b.n	8004df0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d007      	beq.n	8004df0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d10a      	bne.n	8004e76 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fcba 	bl	80047e8 <HAL_I2C_MemRxCpltCallback>
}
 8004e74:	e01d      	b.n	8004eb2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2212      	movs	r2, #18
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fc79 	bl	800477c <HAL_I2C_MasterRxCpltCallback>
}
 8004e8a:	e012      	b.n	8004eb2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d117      	bne.n	8004efe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ee6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ee8:	e067      	b.n	8004fba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	611a      	str	r2, [r3, #16]
}
 8004efc:	e05d      	b.n	8004fba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f06:	d133      	bne.n	8004f70 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b21      	cmp	r3, #33	; 0x21
 8004f12:	d109      	bne.n	8004f28 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f24:	611a      	str	r2, [r3, #16]
 8004f26:	e008      	b.n	8004f3a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <I2C_Master_SB+0x92>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d108      	bne.n	8004f5e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d032      	beq.n	8004fba <I2C_Master_SB+0x100>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d02d      	beq.n	8004fba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6c:	605a      	str	r2, [r3, #4]
}
 8004f6e:	e024      	b.n	8004fba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10e      	bne.n	8004f96 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	11db      	asrs	r3, r3, #7
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0306 	and.w	r3, r3, #6
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f063 030f 	orn	r3, r3, #15
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]
}
 8004f94:	e011      	b.n	8004fba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10d      	bne.n	8004fba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	11db      	asrs	r3, r3, #7
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 0306 	and.w	r3, r3, #6
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f063 030e 	orn	r3, r3, #14
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <I2C_Master_ADD10+0x26>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <I2C_Master_ADD10+0x48>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500c:	605a      	str	r2, [r3, #4]
  }
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800501a:	b480      	push	{r7}
 800501c:	b091      	sub	sp, #68	; 0x44
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005028:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b22      	cmp	r3, #34	; 0x22
 8005042:	f040 8169 	bne.w	8005318 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <I2C_Master_ADDR+0x54>
 800504e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d10b      	bne.n	800506e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005056:	2300      	movs	r3, #0
 8005058:	633b      	str	r3, [r7, #48]	; 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	633b      	str	r3, [r7, #48]	; 0x30
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	e160      	b.n	8005330 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11d      	bne.n	80050b2 <I2C_Master_ADDR+0x98>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800507e:	d118      	bne.n	80050b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005080:	2300      	movs	r3, #0
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	651a      	str	r2, [r3, #80]	; 0x50
 80050b0:	e13e      	b.n	8005330 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d113      	bne.n	80050e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050bc:	2300      	movs	r3, #0
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e115      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	f040 808a 	bne.w	8005204 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f6:	d137      	bne.n	8005168 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005106:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005116:	d113      	bne.n	8005140 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005126:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005128:	2300      	movs	r3, #0
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	e0e7      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	623b      	str	r3, [r7, #32]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	623b      	str	r3, [r7, #32]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	623b      	str	r3, [r7, #32]
 8005154:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e0d3      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	2b08      	cmp	r3, #8
 800516c:	d02e      	beq.n	80051cc <I2C_Master_ADDR+0x1b2>
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	2b20      	cmp	r3, #32
 8005172:	d02b      	beq.n	80051cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005176:	2b12      	cmp	r3, #18
 8005178:	d102      	bne.n	8005180 <I2C_Master_ADDR+0x166>
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2b01      	cmp	r3, #1
 800517e:	d125      	bne.n	80051cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	2b04      	cmp	r3, #4
 8005184:	d00e      	beq.n	80051a4 <I2C_Master_ADDR+0x18a>
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2b02      	cmp	r3, #2
 800518a:	d00b      	beq.n	80051a4 <I2C_Master_ADDR+0x18a>
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	2b10      	cmp	r3, #16
 8005190:	d008      	beq.n	80051a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e007      	b.n	80051b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b4:	2300      	movs	r3, #0
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	e0a1      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e085      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d14d      	bne.n	80052aa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	2b04      	cmp	r3, #4
 8005212:	d016      	beq.n	8005242 <I2C_Master_ADDR+0x228>
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	2b02      	cmp	r3, #2
 8005218:	d013      	beq.n	8005242 <I2C_Master_ADDR+0x228>
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2b10      	cmp	r3, #16
 800521e:	d010      	beq.n	8005242 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e007      	b.n	8005252 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005250:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005260:	d117      	bne.n	8005292 <I2C_Master_ADDR+0x278>
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005268:	d00b      	beq.n	8005282 <I2C_Master_ADDR+0x268>
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2b01      	cmp	r3, #1
 800526e:	d008      	beq.n	8005282 <I2C_Master_ADDR+0x268>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	2b08      	cmp	r3, #8
 8005274:	d005      	beq.n	8005282 <I2C_Master_ADDR+0x268>
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2b10      	cmp	r3, #16
 800527a:	d002      	beq.n	8005282 <I2C_Master_ADDR+0x268>
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	2b20      	cmp	r3, #32
 8005280:	d107      	bne.n	8005292 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005290:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	e032      	b.n	8005310 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c8:	d117      	bne.n	80052fa <I2C_Master_ADDR+0x2e0>
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052d0:	d00b      	beq.n	80052ea <I2C_Master_ADDR+0x2d0>
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d008      	beq.n	80052ea <I2C_Master_ADDR+0x2d0>
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d005      	beq.n	80052ea <I2C_Master_ADDR+0x2d0>
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d002      	beq.n	80052ea <I2C_Master_ADDR+0x2d0>
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d107      	bne.n	80052fa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005316:	e00b      	b.n	8005330 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
}
 800532e:	e7ff      	b.n	8005330 <I2C_Master_ADDR+0x316>
 8005330:	bf00      	nop
 8005332:	3744      	adds	r7, #68	; 0x44
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02b      	beq.n	80053ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d114      	bne.n	80053ae <I2C_SlaveTransmit_TXE+0x72>
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b29      	cmp	r3, #41	; 0x29
 8005388:	d111      	bne.n	80053ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005398:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2221      	movs	r2, #33	; 0x21
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2228      	movs	r2, #40	; 0x28
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff f9f1 	bl	8004790 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d011      	beq.n	80053ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02c      	beq.n	800546c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d114      	bne.n	800546c <I2C_SlaveReceive_RXNE+0x74>
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b2a      	cmp	r3, #42	; 0x2a
 8005446:	d111      	bne.n	800546c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005456:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2222      	movs	r2, #34	; 0x22
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2228      	movs	r2, #40	; 0x28
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb f8a4 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d012      	beq.n	80054ac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054d2:	2b28      	cmp	r3, #40	; 0x28
 80054d4:	d127      	bne.n	8005526 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	09db      	lsrs	r3, r3, #7
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	81bb      	strh	r3, [r7, #12]
 8005508:	e002      	b.n	8005510 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005518:	89ba      	ldrh	r2, [r7, #12]
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff f940 	bl	80047a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005524:	e00e      	b.n	8005544 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800556a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800556c:	2300      	movs	r3, #0
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	60bb      	str	r3, [r7, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a8:	d172      	bne.n	8005690 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b22      	cmp	r3, #34	; 0x22
 80055ae:	d002      	beq.n	80055b6 <I2C_Slave_STOPF+0x6a>
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b2a      	cmp	r3, #42	; 0x2a
 80055b4:	d135      	bne.n	8005622 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f043 0204 	orr.w	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fc ffc2 	bl	8002578 <HAL_DMA_GetState>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d049      	beq.n	800568e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	4a69      	ldr	r2, [pc, #420]	; (80057a4 <I2C_Slave_STOPF+0x258>)
 8005600:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	4618      	mov	r0, r3
 8005608:	f7fc fe0a 	bl	8002220 <HAL_DMA_Abort_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d03d      	beq.n	800568e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800561c:	4610      	mov	r0, r2
 800561e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005620:	e035      	b.n	800568e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b29a      	uxth	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0204 	orr.w	r2, r3, #4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005654:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc ff8c 	bl	8002578 <HAL_DMA_GetState>
 8005660:	4603      	mov	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	d014      	beq.n	8005690 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566a:	4a4e      	ldr	r2, [pc, #312]	; (80057a4 <I2C_Slave_STOPF+0x258>)
 800566c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	4618      	mov	r0, r3
 8005674:	f7fc fdd4 	bl	8002220 <HAL_DMA_Abort_IT>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
 800568c:	e000      	b.n	8005690 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800568e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d03e      	beq.n	8005718 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d112      	bne.n	80056ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d112      	bne.n	8005702 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f043 0204 	orr.w	r2, r3, #4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f8b3 	bl	800588c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005726:	e039      	b.n	800579c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b2a      	cmp	r3, #42	; 0x2a
 800572c:	d109      	bne.n	8005742 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2228      	movs	r2, #40	; 0x28
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fa ff39 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b28      	cmp	r3, #40	; 0x28
 800574c:	d111      	bne.n	8005772 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <I2C_Slave_STOPF+0x25c>)
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff f828 	bl	80047c0 <HAL_I2C_ListenCpltCallback>
}
 8005770:	e014      	b.n	800579c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	2b22      	cmp	r3, #34	; 0x22
 8005778:	d002      	beq.n	8005780 <I2C_Slave_STOPF+0x234>
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b22      	cmp	r3, #34	; 0x22
 800577e:	d10d      	bne.n	800579c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fa ff0c 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	08005d15 	.word	0x08005d15
 80057a8:	ffff0000 	.word	0xffff0000

080057ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d002      	beq.n	80057ce <I2C_Slave_AF+0x22>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d129      	bne.n	8005822 <I2C_Slave_AF+0x76>
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b28      	cmp	r3, #40	; 0x28
 80057d2:	d126      	bne.n	8005822 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a2c      	ldr	r2, [pc, #176]	; (8005888 <I2C_Slave_AF+0xdc>)
 80057d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005802:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fe ffd0 	bl	80047c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005820:	e02e      	b.n	8005880 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2b21      	cmp	r3, #33	; 0x21
 8005826:	d126      	bne.n	8005876 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <I2C_Slave_AF+0xdc>)
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2221      	movs	r2, #33	; 0x21
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005852:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800585c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fe ff8e 	bl	8004790 <HAL_I2C_SlaveTxCpltCallback>
}
 8005874:	e004      	b.n	8005880 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800587e:	615a      	str	r2, [r3, #20]
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	ffff0000 	.word	0xffff0000

0800588c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d002      	beq.n	80058b0 <I2C_ITError+0x24>
 80058aa:	7bbb      	ldrb	r3, [r7, #14]
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d10a      	bne.n	80058c6 <I2C_ITError+0x3a>
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b22      	cmp	r3, #34	; 0x22
 80058b4:	d107      	bne.n	80058c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058cc:	2b28      	cmp	r3, #40	; 0x28
 80058ce:	d107      	bne.n	80058e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2228      	movs	r2, #40	; 0x28
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058de:	e015      	b.n	800590c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ee:	d00a      	beq.n	8005906 <I2C_ITError+0x7a>
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b60      	cmp	r3, #96	; 0x60
 80058f4:	d007      	beq.n	8005906 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591a:	d162      	bne.n	80059e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800592a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	d020      	beq.n	800597c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593e:	4a6a      	ldr	r2, [pc, #424]	; (8005ae8 <I2C_ITError+0x25c>)
 8005940:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	4618      	mov	r0, r3
 8005948:	f7fc fc6a 	bl	8002220 <HAL_DMA_Abort_IT>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8089 	beq.w	8005a66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005976:	4610      	mov	r0, r2
 8005978:	4798      	blx	r3
 800597a:	e074      	b.n	8005a66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	4a59      	ldr	r2, [pc, #356]	; (8005ae8 <I2C_ITError+0x25c>)
 8005982:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	4618      	mov	r0, r3
 800598a:	f7fc fc49 	bl	8002220 <HAL_DMA_Abort_IT>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d068      	beq.n	8005a66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d10b      	bne.n	80059ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	e041      	b.n	8005a66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b60      	cmp	r3, #96	; 0x60
 80059ec:	d125      	bne.n	8005a3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d10b      	bne.n	8005a22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0201 	bic.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fe feec 	bl	8004810 <HAL_I2C_AbortCpltCallback>
 8005a38:	e015      	b.n	8005a66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d10b      	bne.n	8005a60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fe fecb 	bl	80047fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10e      	bne.n	8005a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aa2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d113      	bne.n	8005ae0 <I2C_ITError+0x254>
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b28      	cmp	r3, #40	; 0x28
 8005abc:	d110      	bne.n	8005ae0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <I2C_ITError+0x260>)
 8005ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fe fe70 	bl	80047c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	08005d15 	.word	0x08005d15
 8005aec:	ffff0000 	.word	0xffff0000

08005af0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b0c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b22:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b30:	2200      	movs	r2, #0
 8005b32:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	2200      	movs	r2, #0
 8005b42:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005b44:	7cfb      	ldrb	r3, [r7, #19]
 8005b46:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005b4a:	2b21      	cmp	r3, #33	; 0x21
 8005b4c:	d007      	beq.n	8005b5e <I2C_DMAXferCplt+0x6e>
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005b54:	2b22      	cmp	r3, #34	; 0x22
 8005b56:	d131      	bne.n	8005bbc <I2C_DMAXferCplt+0xcc>
 8005b58:	7cbb      	ldrb	r3, [r7, #18]
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d12e      	bne.n	8005bbc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b6c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	2b29      	cmp	r3, #41	; 0x29
 8005b78:	d10a      	bne.n	8005b90 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2221      	movs	r2, #33	; 0x21
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2228      	movs	r2, #40	; 0x28
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b88:	6978      	ldr	r0, [r7, #20]
 8005b8a:	f7fe fe01 	bl	8004790 <HAL_I2C_SlaveTxCpltCallback>
 8005b8e:	e00c      	b.n	8005baa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	2b2a      	cmp	r3, #42	; 0x2a
 8005b94:	d109      	bne.n	8005baa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2222      	movs	r2, #34	; 0x22
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2228      	movs	r2, #40	; 0x28
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ba4:	6978      	ldr	r0, [r7, #20]
 8005ba6:	f7fa fd05 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005bb8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005bba:	e06a      	b.n	8005c92 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d064      	beq.n	8005c92 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d107      	bne.n	8005be2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bf0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bf8:	d009      	beq.n	8005c0e <I2C_DMAXferCplt+0x11e>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d006      	beq.n	8005c0e <I2C_DMAXferCplt+0x11e>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c06:	d002      	beq.n	8005c0e <I2C_DMAXferCplt+0x11e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d107      	bne.n	8005c1e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c2c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005c4c:	6978      	ldr	r0, [r7, #20]
 8005c4e:	f7fe fdd5 	bl	80047fc <HAL_I2C_ErrorCallback>
}
 8005c52:	e01e      	b.n	8005c92 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d10a      	bne.n	8005c7e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2200      	movs	r2, #0
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005c76:	6978      	ldr	r0, [r7, #20]
 8005c78:	f7fe fdb6 	bl	80047e8 <HAL_I2C_MemRxCpltCallback>
}
 8005c7c:	e009      	b.n	8005c92 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2212      	movs	r2, #18
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c8c:	6978      	ldr	r0, [r7, #20]
 8005c8e:	f7fe fd75 	bl	800477c <HAL_I2C_MasterRxCpltCallback>
}
 8005c92:	bf00      	nop
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fc fc63 	bl	8002594 <HAL_DMA_GetError>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d01b      	beq.n	8005d0c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f043 0210 	orr.w	r2, r3, #16
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7fe fd78 	bl	80047fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d2e:	4b4b      	ldr	r3, [pc, #300]	; (8005e5c <I2C_DMAAbort+0x148>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	4a4a      	ldr	r2, [pc, #296]	; (8005e60 <I2C_DMAAbort+0x14c>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	0a1a      	lsrs	r2, r3, #8
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00da      	lsls	r2, r3, #3
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005d5a:	e00a      	b.n	8005d72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d70:	d0ea      	beq.n	8005d48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	2200      	movs	r2, #0
 8005d80:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	2200      	movs	r2, #0
 8005d90:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2200      	movs	r2, #0
 8005da6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	2200      	movs	r2, #0
 8005db6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b60      	cmp	r3, #96	; 0x60
 8005de2:	d10e      	bne.n	8005e02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2200      	movs	r2, #0
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dfa:	6978      	ldr	r0, [r7, #20]
 8005dfc:	f7fe fd08 	bl	8004810 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e00:	e027      	b.n	8005e52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e02:	7cfb      	ldrb	r3, [r7, #19]
 8005e04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e08:	2b28      	cmp	r3, #40	; 0x28
 8005e0a:	d117      	bne.n	8005e3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2228      	movs	r2, #40	; 0x28
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e3a:	e007      	b.n	8005e4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e4c:	6978      	ldr	r0, [r7, #20]
 8005e4e:	f7fe fcd5 	bl	80047fc <HAL_I2C_ErrorCallback>
}
 8005e52:	bf00      	nop
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000014 	.word	0x20000014
 8005e60:	14f8b589 	.word	0x14f8b589

08005e64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e70:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	08db      	lsrs	r3, r3, #3
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	0a1a      	lsrs	r2, r3, #8
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d107      	bne.n	8005ea2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e008      	b.n	8005eb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb0:	d0e9      	beq.n	8005e86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000014 	.word	0x20000014
 8005ec4:	14f8b589 	.word	0x14f8b589

08005ec8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ed8:	d103      	bne.n	8005ee2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ee0:	e007      	b.n	8005ef2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005eea:	d102      	bne.n	8005ef2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d129      	bne.n	8005f68 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2224      	movs	r2, #36	; 0x24
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0210 	bic.w	r2, r2, #16
 8005f3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e000      	b.n	8005f6a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d12a      	bne.n	8005fe6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	; 0x24
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	f023 030f 	bic.w	r3, r3, #15
 8005fb6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	89fb      	ldrh	r3, [r7, #14]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	89fa      	ldrh	r2, [r7, #14]
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e000      	b.n	8005fe8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005fe6:	2302      	movs	r3, #2
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ff6:	b08f      	sub	sp, #60	; 0x3c
 8005ff8:	af0a      	add	r7, sp, #40	; 0x28
 8005ffa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e10f      	b.n	8006226 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fb fa55 	bl	80014d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2203      	movs	r2, #3
 800602a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f002 ff96 	bl	8008f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	687e      	ldr	r6, [r7, #4]
 8006052:	466d      	mov	r5, sp
 8006054:	f106 0410 	add.w	r4, r6, #16
 8006058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800605a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800605c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800605e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006064:	e885 0003 	stmia.w	r5, {r0, r1}
 8006068:	1d33      	adds	r3, r6, #4
 800606a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800606c:	6838      	ldr	r0, [r7, #0]
 800606e:	f002 ff21 	bl	8008eb4 <USB_CoreInit>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0d0      	b.n	8006226 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f002 ff84 	bl	8008f98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
 8006094:	e04a      	b.n	800612c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006096:	7bfa      	ldrb	r2, [r7, #15]
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	333d      	adds	r3, #61	; 0x3d
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060aa:	7bfa      	ldrb	r2, [r7, #15]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	333c      	adds	r3, #60	; 0x3c
 80060ba:	7bfa      	ldrb	r2, [r7, #15]
 80060bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060be:	7bfa      	ldrb	r2, [r7, #15]
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	b298      	uxth	r0, r3
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	3344      	adds	r3, #68	; 0x44
 80060d2:	4602      	mov	r2, r0
 80060d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3340      	adds	r3, #64	; 0x40
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060ea:	7bfa      	ldrb	r2, [r7, #15]
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	3348      	adds	r3, #72	; 0x48
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060fe:	7bfa      	ldrb	r2, [r7, #15]
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	334c      	adds	r3, #76	; 0x4c
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006112:	7bfa      	ldrb	r2, [r7, #15]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3354      	adds	r3, #84	; 0x54
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	3301      	adds	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
 800612c:	7bfa      	ldrb	r2, [r7, #15]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d3af      	bcc.n	8006096 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
 800613a:	e044      	b.n	80061c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800613c:	7bfa      	ldrb	r2, [r7, #15]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800614e:	2200      	movs	r2, #0
 8006150:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006152:	7bfa      	ldrb	r2, [r7, #15]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006164:	7bfa      	ldrb	r2, [r7, #15]
 8006166:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006168:	7bfa      	ldrb	r2, [r7, #15]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800617e:	7bfa      	ldrb	r2, [r7, #15]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006194:	7bfa      	ldrb	r2, [r7, #15]
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	3301      	adds	r3, #1
 80061c4:	73fb      	strb	r3, [r7, #15]
 80061c6:	7bfa      	ldrb	r2, [r7, #15]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d3b5      	bcc.n	800613c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	687e      	ldr	r6, [r7, #4]
 80061d8:	466d      	mov	r5, sp
 80061da:	f106 0410 	add.w	r4, r6, #16
 80061de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80061ee:	1d33      	adds	r3, r6, #4
 80061f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061f2:	6838      	ldr	r0, [r7, #0]
 80061f4:	f002 ff1c 	bl	8009030 <USB_DevInit>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e00d      	b.n	8006226 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f003 f8e7 	bl	80093f2 <USB_DevDisconnect>

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e267      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d075      	beq.n	800633a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800624e:	4b88      	ldr	r3, [pc, #544]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 030c 	and.w	r3, r3, #12
 8006256:	2b04      	cmp	r3, #4
 8006258:	d00c      	beq.n	8006274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800625a:	4b85      	ldr	r3, [pc, #532]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006262:	2b08      	cmp	r3, #8
 8006264:	d112      	bne.n	800628c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006266:	4b82      	ldr	r3, [pc, #520]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800626e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006272:	d10b      	bne.n	800628c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006274:	4b7e      	ldr	r3, [pc, #504]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d05b      	beq.n	8006338 <HAL_RCC_OscConfig+0x108>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d157      	bne.n	8006338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e242      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006294:	d106      	bne.n	80062a4 <HAL_RCC_OscConfig+0x74>
 8006296:	4b76      	ldr	r3, [pc, #472]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a75      	ldr	r2, [pc, #468]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 800629c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e01d      	b.n	80062e0 <HAL_RCC_OscConfig+0xb0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ac:	d10c      	bne.n	80062c8 <HAL_RCC_OscConfig+0x98>
 80062ae:	4b70      	ldr	r3, [pc, #448]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a6f      	ldr	r2, [pc, #444]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80062b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4b6d      	ldr	r3, [pc, #436]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a6c      	ldr	r2, [pc, #432]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80062c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e00b      	b.n	80062e0 <HAL_RCC_OscConfig+0xb0>
 80062c8:	4b69      	ldr	r3, [pc, #420]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a68      	ldr	r2, [pc, #416]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80062ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	4b66      	ldr	r3, [pc, #408]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a65      	ldr	r2, [pc, #404]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80062da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d013      	beq.n	8006310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e8:	f7fb fce2 	bl	8001cb0 <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f0:	f7fb fcde 	bl	8001cb0 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b64      	cmp	r3, #100	; 0x64
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e207      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006302:	4b5b      	ldr	r3, [pc, #364]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0f0      	beq.n	80062f0 <HAL_RCC_OscConfig+0xc0>
 800630e:	e014      	b.n	800633a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006310:	f7fb fcce 	bl	8001cb0 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006318:	f7fb fcca 	bl	8001cb0 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b64      	cmp	r3, #100	; 0x64
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e1f3      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800632a:	4b51      	ldr	r3, [pc, #324]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0xe8>
 8006336:	e000      	b.n	800633a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d063      	beq.n	800640e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006346:	4b4a      	ldr	r3, [pc, #296]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 030c 	and.w	r3, r3, #12
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00b      	beq.n	800636a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006352:	4b47      	ldr	r3, [pc, #284]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800635a:	2b08      	cmp	r3, #8
 800635c:	d11c      	bne.n	8006398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800635e:	4b44      	ldr	r3, [pc, #272]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d116      	bne.n	8006398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636a:	4b41      	ldr	r3, [pc, #260]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_RCC_OscConfig+0x152>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d001      	beq.n	8006382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e1c7      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006382:	4b3b      	ldr	r3, [pc, #236]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4937      	ldr	r1, [pc, #220]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006392:	4313      	orrs	r3, r2
 8006394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006396:	e03a      	b.n	800640e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d020      	beq.n	80063e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063a0:	4b34      	ldr	r3, [pc, #208]	; (8006474 <HAL_RCC_OscConfig+0x244>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a6:	f7fb fc83 	bl	8001cb0 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ae:	f7fb fc7f 	bl	8001cb0 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e1a8      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c0:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063cc:	4b28      	ldr	r3, [pc, #160]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	4925      	ldr	r1, [pc, #148]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	600b      	str	r3, [r1, #0]
 80063e0:	e015      	b.n	800640e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063e2:	4b24      	ldr	r3, [pc, #144]	; (8006474 <HAL_RCC_OscConfig+0x244>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7fb fc62 	bl	8001cb0 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063f0:	f7fb fc5e 	bl	8001cb0 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e187      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006402:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f0      	bne.n	80063f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d036      	beq.n	8006488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <HAL_RCC_OscConfig+0x248>)
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006428:	f7fb fc42 	bl	8001cb0 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006430:	f7fb fc3e 	bl	8001cb0 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e167      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006442:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_RCC_OscConfig+0x240>)
 8006444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f0      	beq.n	8006430 <HAL_RCC_OscConfig+0x200>
 800644e:	e01b      	b.n	8006488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006450:	4b09      	ldr	r3, [pc, #36]	; (8006478 <HAL_RCC_OscConfig+0x248>)
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006456:	f7fb fc2b 	bl	8001cb0 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800645c:	e00e      	b.n	800647c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800645e:	f7fb fc27 	bl	8001cb0 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d907      	bls.n	800647c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e150      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
 8006470:	40023800 	.word	0x40023800
 8006474:	42470000 	.word	0x42470000
 8006478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800647c:	4b88      	ldr	r3, [pc, #544]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 800647e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1ea      	bne.n	800645e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8097 	beq.w	80065c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006496:	2300      	movs	r3, #0
 8006498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800649a:	4b81      	ldr	r3, [pc, #516]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10f      	bne.n	80064c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	4b7d      	ldr	r3, [pc, #500]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	4a7c      	ldr	r2, [pc, #496]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 80064b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b4:	6413      	str	r3, [r2, #64]	; 0x40
 80064b6:	4b7a      	ldr	r3, [pc, #488]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c6:	4b77      	ldr	r3, [pc, #476]	; (80066a4 <HAL_RCC_OscConfig+0x474>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d118      	bne.n	8006504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064d2:	4b74      	ldr	r3, [pc, #464]	; (80066a4 <HAL_RCC_OscConfig+0x474>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a73      	ldr	r2, [pc, #460]	; (80066a4 <HAL_RCC_OscConfig+0x474>)
 80064d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064de:	f7fb fbe7 	bl	8001cb0 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e6:	f7fb fbe3 	bl	8001cb0 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e10c      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f8:	4b6a      	ldr	r3, [pc, #424]	; (80066a4 <HAL_RCC_OscConfig+0x474>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d106      	bne.n	800651a <HAL_RCC_OscConfig+0x2ea>
 800650c:	4b64      	ldr	r3, [pc, #400]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a63      	ldr	r2, [pc, #396]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	e01c      	b.n	8006554 <HAL_RCC_OscConfig+0x324>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b05      	cmp	r3, #5
 8006520:	d10c      	bne.n	800653c <HAL_RCC_OscConfig+0x30c>
 8006522:	4b5f      	ldr	r3, [pc, #380]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	4a5e      	ldr	r2, [pc, #376]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006528:	f043 0304 	orr.w	r3, r3, #4
 800652c:	6713      	str	r3, [r2, #112]	; 0x70
 800652e:	4b5c      	ldr	r3, [pc, #368]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	4a5b      	ldr	r2, [pc, #364]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	6713      	str	r3, [r2, #112]	; 0x70
 800653a:	e00b      	b.n	8006554 <HAL_RCC_OscConfig+0x324>
 800653c:	4b58      	ldr	r3, [pc, #352]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	4a57      	ldr	r2, [pc, #348]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	6713      	str	r3, [r2, #112]	; 0x70
 8006548:	4b55      	ldr	r3, [pc, #340]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 800654a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654c:	4a54      	ldr	r2, [pc, #336]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 800654e:	f023 0304 	bic.w	r3, r3, #4
 8006552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d015      	beq.n	8006588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800655c:	f7fb fba8 	bl	8001cb0 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006562:	e00a      	b.n	800657a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006564:	f7fb fba4 	bl	8001cb0 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e0cb      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800657a:	4b49      	ldr	r3, [pc, #292]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0ee      	beq.n	8006564 <HAL_RCC_OscConfig+0x334>
 8006586:	e014      	b.n	80065b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006588:	f7fb fb92 	bl	8001cb0 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800658e:	e00a      	b.n	80065a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006590:	f7fb fb8e 	bl	8001cb0 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	; 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e0b5      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065a6:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1ee      	bne.n	8006590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d105      	bne.n	80065c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065b8:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	4a38      	ldr	r2, [pc, #224]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 80065be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80a1 	beq.w	8006710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065ce:	4b34      	ldr	r3, [pc, #208]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d05c      	beq.n	8006694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d141      	bne.n	8006666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e2:	4b31      	ldr	r3, [pc, #196]	; (80066a8 <HAL_RCC_OscConfig+0x478>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e8:	f7fb fb62 	bl	8001cb0 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f0:	f7fb fb5e 	bl	8001cb0 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e087      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006602:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69da      	ldr	r2, [r3, #28]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	019b      	lsls	r3, r3, #6
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	085b      	lsrs	r3, r3, #1
 8006626:	3b01      	subs	r3, #1
 8006628:	041b      	lsls	r3, r3, #16
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	491b      	ldr	r1, [pc, #108]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006638:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <HAL_RCC_OscConfig+0x478>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663e:	f7fb fb37 	bl	8001cb0 <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006646:	f7fb fb33 	bl	8001cb0 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e05c      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006658:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f0      	beq.n	8006646 <HAL_RCC_OscConfig+0x416>
 8006664:	e054      	b.n	8006710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <HAL_RCC_OscConfig+0x478>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fb fb20 	bl	8001cb0 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006674:	f7fb fb1c 	bl	8001cb0 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e045      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006686:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <HAL_RCC_OscConfig+0x470>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f0      	bne.n	8006674 <HAL_RCC_OscConfig+0x444>
 8006692:	e03d      	b.n	8006710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d107      	bne.n	80066ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e038      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
 80066a0:	40023800 	.word	0x40023800
 80066a4:	40007000 	.word	0x40007000
 80066a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066ac:	4b1b      	ldr	r3, [pc, #108]	; (800671c <HAL_RCC_OscConfig+0x4ec>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d028      	beq.n	800670c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d121      	bne.n	800670c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d11a      	bne.n	800670c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066dc:	4013      	ands	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d111      	bne.n	800670c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	3b01      	subs	r3, #1
 80066f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d107      	bne.n	800670c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006708:	429a      	cmp	r2, r3
 800670a:	d001      	beq.n	8006710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40023800 	.word	0x40023800

08006720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0cc      	b.n	80068ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006734:	4b68      	ldr	r3, [pc, #416]	; (80068d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d90c      	bls.n	800675c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006742:	4b65      	ldr	r3, [pc, #404]	; (80068d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800674a:	4b63      	ldr	r3, [pc, #396]	; (80068d8 <HAL_RCC_ClockConfig+0x1b8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d001      	beq.n	800675c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0b8      	b.n	80068ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d020      	beq.n	80067aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006774:	4b59      	ldr	r3, [pc, #356]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4a58      	ldr	r2, [pc, #352]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800677e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800678c:	4b53      	ldr	r3, [pc, #332]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4a52      	ldr	r2, [pc, #328]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006798:	4b50      	ldr	r3, [pc, #320]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	494d      	ldr	r1, [pc, #308]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d044      	beq.n	8006840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d107      	bne.n	80067ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067be:	4b47      	ldr	r3, [pc, #284]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d119      	bne.n	80067fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e07f      	b.n	80068ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d003      	beq.n	80067de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d107      	bne.n	80067ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067de:	4b3f      	ldr	r3, [pc, #252]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e06f      	b.n	80068ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ee:	4b3b      	ldr	r3, [pc, #236]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e067      	b.n	80068ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067fe:	4b37      	ldr	r3, [pc, #220]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f023 0203 	bic.w	r2, r3, #3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4934      	ldr	r1, [pc, #208]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 800680c:	4313      	orrs	r3, r2
 800680e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006810:	f7fb fa4e 	bl	8001cb0 <HAL_GetTick>
 8006814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006816:	e00a      	b.n	800682e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006818:	f7fb fa4a 	bl	8001cb0 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	f241 3288 	movw	r2, #5000	; 0x1388
 8006826:	4293      	cmp	r3, r2
 8006828:	d901      	bls.n	800682e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e04f      	b.n	80068ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800682e:	4b2b      	ldr	r3, [pc, #172]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 020c 	and.w	r2, r3, #12
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	429a      	cmp	r2, r3
 800683e:	d1eb      	bne.n	8006818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006840:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d20c      	bcs.n	8006868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684e:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006856:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e032      	b.n	80068ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006874:	4b19      	ldr	r3, [pc, #100]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	4916      	ldr	r1, [pc, #88]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006892:	4b12      	ldr	r3, [pc, #72]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	490e      	ldr	r1, [pc, #56]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068a6:	f000 f821 	bl	80068ec <HAL_RCC_GetSysClockFreq>
 80068aa:	4602      	mov	r2, r0
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	091b      	lsrs	r3, r3, #4
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	490a      	ldr	r1, [pc, #40]	; (80068e0 <HAL_RCC_ClockConfig+0x1c0>)
 80068b8:	5ccb      	ldrb	r3, [r1, r3]
 80068ba:	fa22 f303 	lsr.w	r3, r2, r3
 80068be:	4a09      	ldr	r2, [pc, #36]	; (80068e4 <HAL_RCC_ClockConfig+0x1c4>)
 80068c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <HAL_RCC_ClockConfig+0x1c8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fb f9ae 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40023c00 	.word	0x40023c00
 80068dc:	40023800 	.word	0x40023800
 80068e0:	08019968 	.word	0x08019968
 80068e4:	20000014 	.word	0x20000014
 80068e8:	20000018 	.word	0x20000018

080068ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f0:	b094      	sub	sp, #80	; 0x50
 80068f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	647b      	str	r3, [r7, #68]	; 0x44
 80068f8:	2300      	movs	r3, #0
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	2300      	movs	r3, #0
 80068fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006904:	4b79      	ldr	r3, [pc, #484]	; (8006aec <HAL_RCC_GetSysClockFreq+0x200>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f003 030c 	and.w	r3, r3, #12
 800690c:	2b08      	cmp	r3, #8
 800690e:	d00d      	beq.n	800692c <HAL_RCC_GetSysClockFreq+0x40>
 8006910:	2b08      	cmp	r3, #8
 8006912:	f200 80e1 	bhi.w	8006ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_RCC_GetSysClockFreq+0x34>
 800691a:	2b04      	cmp	r3, #4
 800691c:	d003      	beq.n	8006926 <HAL_RCC_GetSysClockFreq+0x3a>
 800691e:	e0db      	b.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006920:	4b73      	ldr	r3, [pc, #460]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006922:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006924:	e0db      	b.n	8006ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006926:	4b73      	ldr	r3, [pc, #460]	; (8006af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800692a:	e0d8      	b.n	8006ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800692c:	4b6f      	ldr	r3, [pc, #444]	; (8006aec <HAL_RCC_GetSysClockFreq+0x200>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006934:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006936:	4b6d      	ldr	r3, [pc, #436]	; (8006aec <HAL_RCC_GetSysClockFreq+0x200>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d063      	beq.n	8006a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006942:	4b6a      	ldr	r3, [pc, #424]	; (8006aec <HAL_RCC_GetSysClockFreq+0x200>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	099b      	lsrs	r3, r3, #6
 8006948:	2200      	movs	r2, #0
 800694a:	63bb      	str	r3, [r7, #56]	; 0x38
 800694c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006954:	633b      	str	r3, [r7, #48]	; 0x30
 8006956:	2300      	movs	r3, #0
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
 800695a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	f04f 0000 	mov.w	r0, #0
 8006966:	f04f 0100 	mov.w	r1, #0
 800696a:	0159      	lsls	r1, r3, #5
 800696c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006970:	0150      	lsls	r0, r2, #5
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4621      	mov	r1, r4
 8006978:	1a51      	subs	r1, r2, r1
 800697a:	6139      	str	r1, [r7, #16]
 800697c:	4629      	mov	r1, r5
 800697e:	eb63 0301 	sbc.w	r3, r3, r1
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006990:	4659      	mov	r1, fp
 8006992:	018b      	lsls	r3, r1, #6
 8006994:	4651      	mov	r1, sl
 8006996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800699a:	4651      	mov	r1, sl
 800699c:	018a      	lsls	r2, r1, #6
 800699e:	4651      	mov	r1, sl
 80069a0:	ebb2 0801 	subs.w	r8, r2, r1
 80069a4:	4659      	mov	r1, fp
 80069a6:	eb63 0901 	sbc.w	r9, r3, r1
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069be:	4690      	mov	r8, r2
 80069c0:	4699      	mov	r9, r3
 80069c2:	4623      	mov	r3, r4
 80069c4:	eb18 0303 	adds.w	r3, r8, r3
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	462b      	mov	r3, r5
 80069cc:	eb49 0303 	adc.w	r3, r9, r3
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069de:	4629      	mov	r1, r5
 80069e0:	024b      	lsls	r3, r1, #9
 80069e2:	4621      	mov	r1, r4
 80069e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069e8:	4621      	mov	r1, r4
 80069ea:	024a      	lsls	r2, r1, #9
 80069ec:	4610      	mov	r0, r2
 80069ee:	4619      	mov	r1, r3
 80069f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f2:	2200      	movs	r2, #0
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069fc:	f7f9 fc48 	bl	8000290 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4613      	mov	r3, r2
 8006a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a08:	e058      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a0a:	4b38      	ldr	r3, [pc, #224]	; (8006aec <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	099b      	lsrs	r3, r3, #6
 8006a10:	2200      	movs	r2, #0
 8006a12:	4618      	mov	r0, r3
 8006a14:	4611      	mov	r1, r2
 8006a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a1a:	623b      	str	r3, [r7, #32]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a24:	4642      	mov	r2, r8
 8006a26:	464b      	mov	r3, r9
 8006a28:	f04f 0000 	mov.w	r0, #0
 8006a2c:	f04f 0100 	mov.w	r1, #0
 8006a30:	0159      	lsls	r1, r3, #5
 8006a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a36:	0150      	lsls	r0, r2, #5
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a42:	4649      	mov	r1, r9
 8006a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8006a60:	eb63 050b 	sbc.w	r5, r3, fp
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	00eb      	lsls	r3, r5, #3
 8006a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a72:	00e2      	lsls	r2, r4, #3
 8006a74:	4614      	mov	r4, r2
 8006a76:	461d      	mov	r5, r3
 8006a78:	4643      	mov	r3, r8
 8006a7a:	18e3      	adds	r3, r4, r3
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	464b      	mov	r3, r9
 8006a80:	eb45 0303 	adc.w	r3, r5, r3
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a92:	4629      	mov	r1, r5
 8006a94:	028b      	lsls	r3, r1, #10
 8006a96:	4621      	mov	r1, r4
 8006a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	028a      	lsls	r2, r1, #10
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	61fa      	str	r2, [r7, #28]
 8006aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ab0:	f7f9 fbee 	bl	8000290 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4613      	mov	r3, r2
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <HAL_RCC_GetSysClockFreq+0x200>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	0c1b      	lsrs	r3, r3, #16
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ad6:	e002      	b.n	8006ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3750      	adds	r7, #80	; 0x50
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aea:	bf00      	nop
 8006aec:	40023800 	.word	0x40023800
 8006af0:	00f42400 	.word	0x00f42400
 8006af4:	007a1200 	.word	0x007a1200

08006af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006afc:	4b03      	ldr	r3, [pc, #12]	; (8006b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006afe:	681b      	ldr	r3, [r3, #0]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000014 	.word	0x20000014

08006b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b14:	f7ff fff0 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	0a9b      	lsrs	r3, r3, #10
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	4903      	ldr	r1, [pc, #12]	; (8006b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b26:	5ccb      	ldrb	r3, [r1, r3]
 8006b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40023800 	.word	0x40023800
 8006b34:	08019978 	.word	0x08019978

08006b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b3c:	f7ff ffdc 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 8006b40:	4602      	mov	r2, r0
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	0b5b      	lsrs	r3, r3, #13
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	4903      	ldr	r1, [pc, #12]	; (8006b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b4e:	5ccb      	ldrb	r3, [r1, r3]
 8006b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	08019978 	.word	0x08019978

08006b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e07b      	b.n	8006c6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d108      	bne.n	8006b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b82:	d009      	beq.n	8006b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	61da      	str	r2, [r3, #28]
 8006b8a:	e005      	b.n	8006b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fa f9fe 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1c:	ea42 0103 	orr.w	r1, r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	0c1b      	lsrs	r3, r3, #16
 8006c36:	f003 0104 	and.w	r1, r3, #4
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	f003 0210 	and.w	r2, r3, #16
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_SPI_Transmit_DMA+0x20>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e09b      	b.n	8006dcc <HAL_SPI_Transmit_DMA+0x158>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d002      	beq.n	8006cae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cac:	e089      	b.n	8006dc2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_SPI_Transmit_DMA+0x46>
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cbe:	e080      	b.n	8006dc2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	88fa      	ldrh	r2, [r7, #6]
 8006cde:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d06:	d10f      	bne.n	8006d28 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2c:	4a29      	ldr	r2, [pc, #164]	; (8006dd4 <HAL_SPI_Transmit_DMA+0x160>)
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d34:	4a28      	ldr	r2, [pc, #160]	; (8006dd8 <HAL_SPI_Transmit_DMA+0x164>)
 8006d36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d3c:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <HAL_SPI_Transmit_DMA+0x168>)
 8006d3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d44:	2200      	movs	r2, #0
 8006d46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	4619      	mov	r1, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	330c      	adds	r3, #12
 8006d58:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d60:	f7fb f996 	bl	8002090 <HAL_DMA_Start_IT>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00c      	beq.n	8006d84 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	f043 0210 	orr.w	r2, r3, #16
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006d82:	e01e      	b.n	8006dc2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	d007      	beq.n	8006da2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0220 	orr.w	r2, r2, #32
 8006db0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0202 	orr.w	r2, r2, #2
 8006dc0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	080075cd 	.word	0x080075cd
 8006dd8:	080073ed 	.word	0x080073ed
 8006ddc:	08007621 	.word	0x08007621

08006de0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	4613      	mov	r3, r2
 8006dec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d110      	bne.n	8006e1c <HAL_SPI_Receive_DMA+0x3c>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e02:	d10b      	bne.n	8006e1c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2204      	movs	r2, #4
 8006e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f8ac 	bl	8006f70 <HAL_SPI_TransmitReceive_DMA>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	e09f      	b.n	8006f5c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <HAL_SPI_Receive_DMA+0x4a>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e098      	b.n	8006f5c <HAL_SPI_Receive_DMA+0x17c>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d002      	beq.n	8006e44 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e42:	e086      	b.n	8006f52 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_SPI_Receive_DMA+0x70>
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d102      	bne.n	8006e56 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e54:	e07d      	b.n	8006f52 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2204      	movs	r2, #4
 8006e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	88fa      	ldrh	r2, [r7, #6]
 8006e6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e96:	d10f      	bne.n	8006eb8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006eb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebc:	4a29      	ldr	r2, [pc, #164]	; (8006f64 <HAL_SPI_Receive_DMA+0x184>)
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec4:	4a28      	ldr	r2, [pc, #160]	; (8006f68 <HAL_SPI_Receive_DMA+0x188>)
 8006ec6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ecc:	4a27      	ldr	r2, [pc, #156]	; (8006f6c <HAL_SPI_Receive_DMA+0x18c>)
 8006ece:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ef0:	f7fb f8ce 	bl	8002090 <HAL_DMA_Start_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00c      	beq.n	8006f14 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efe:	f043 0210 	orr.w	r2, r3, #16
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006f12:	e01e      	b.n	8006f52 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d007      	beq.n	8006f32 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f30:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f042 0220 	orr.w	r2, r2, #32
 8006f40:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0201 	orr.w	r2, r2, #1
 8006f50:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	080075e9 	.word	0x080075e9
 8006f68:	08007495 	.word	0x08007495
 8006f6c:	08007621 	.word	0x08007621

08006f70 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e0e3      	b.n	8007158 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f9e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006fa6:	7dbb      	ldrb	r3, [r7, #22]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d00d      	beq.n	8006fc8 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fb2:	d106      	bne.n	8006fc2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006fbc:	7dbb      	ldrb	r3, [r7, #22]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d002      	beq.n	8006fc8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fc6:	e0c2      	b.n	800714e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fde:	e0b6      	b.n	800714e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d003      	beq.n	8006ff4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2205      	movs	r2, #5
 8006ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	887a      	ldrh	r2, [r7, #2]
 8007004:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	887a      	ldrh	r2, [r7, #2]
 800700a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	887a      	ldrh	r2, [r7, #2]
 8007016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	887a      	ldrh	r2, [r7, #2]
 800701c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b04      	cmp	r3, #4
 8007034:	d108      	bne.n	8007048 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703a:	4a49      	ldr	r2, [pc, #292]	; (8007160 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800703c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007042:	4a48      	ldr	r2, [pc, #288]	; (8007164 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007044:	63da      	str	r2, [r3, #60]	; 0x3c
 8007046:	e007      	b.n	8007058 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704c:	4a46      	ldr	r2, [pc, #280]	; (8007168 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800704e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007054:	4a45      	ldr	r2, [pc, #276]	; (800716c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007056:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705c:	4a44      	ldr	r2, [pc, #272]	; (8007170 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800705e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007064:	2200      	movs	r2, #0
 8007066:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	4619      	mov	r1, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007080:	f7fb f806 	bl	8002090 <HAL_DMA_Start_IT>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00c      	beq.n	80070a4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	f043 0210 	orr.w	r2, r3, #16
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80070a2:	e054      	b.n	800714e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b8:	2200      	movs	r2, #0
 80070ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c0:	2200      	movs	r2, #0
 80070c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c8:	2200      	movs	r2, #0
 80070ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d0:	2200      	movs	r2, #0
 80070d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	4619      	mov	r1, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80070ec:	f7fa ffd0 	bl	8002090 <HAL_DMA_Start_IT>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	f043 0210 	orr.w	r2, r3, #16
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800710e:	e01e      	b.n	800714e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d007      	beq.n	800712e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800712c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0220 	orr.w	r2, r2, #32
 800713c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0202 	orr.w	r2, r2, #2
 800714c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	080075e9 	.word	0x080075e9
 8007164:	08007495 	.word	0x08007495
 8007168:	08007605 	.word	0x08007605
 800716c:	0800753d 	.word	0x0800753d
 8007170:	08007621 	.word	0x08007621

08007174 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	099b      	lsrs	r3, r3, #6
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10f      	bne.n	80071b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	099b      	lsrs	r3, r3, #6
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d004      	beq.n	80071b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
    return;
 80071b6:	e0d7      	b.n	8007368 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <HAL_SPI_IRQHandler+0x66>
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	09db      	lsrs	r3, r3, #7
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
    return;
 80071d8:	e0c6      	b.n	8007368 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	095b      	lsrs	r3, r3, #5
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10c      	bne.n	8007200 <HAL_SPI_IRQHandler+0x8c>
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	099b      	lsrs	r3, r3, #6
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	0a1b      	lsrs	r3, r3, #8
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80b4 	beq.w	8007368 <HAL_SPI_IRQHandler+0x1f4>
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	095b      	lsrs	r3, r3, #5
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80ad 	beq.w	8007368 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	099b      	lsrs	r3, r3, #6
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d023      	beq.n	8007262 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b03      	cmp	r3, #3
 8007224:	d011      	beq.n	800724a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	f043 0204 	orr.w	r2, r3, #4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	e00b      	b.n	8007262 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	693b      	ldr	r3, [r7, #16]
        return;
 8007260:	e082      	b.n	8007368 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d014      	beq.n	8007298 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007272:	f043 0201 	orr.w	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00c      	beq.n	80072be <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a8:	f043 0208 	orr.w	r2, r3, #8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072b0:	2300      	movs	r3, #0
 80072b2:	60bb      	str	r3, [r7, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d04f      	beq.n	8007366 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <HAL_SPI_IRQHandler+0x17e>
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d034      	beq.n	800735c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f022 0203 	bic.w	r2, r2, #3
 8007300:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d011      	beq.n	800732e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730e:	4a18      	ldr	r2, [pc, #96]	; (8007370 <HAL_SPI_IRQHandler+0x1fc>)
 8007310:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007316:	4618      	mov	r0, r3
 8007318:	f7fa ff82 	bl	8002220 <HAL_DMA_Abort_IT>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007332:	2b00      	cmp	r3, #0
 8007334:	d016      	beq.n	8007364 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733a:	4a0d      	ldr	r2, [pc, #52]	; (8007370 <HAL_SPI_IRQHandler+0x1fc>)
 800733c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007342:	4618      	mov	r0, r3
 8007344:	f7fa ff6c 	bl	8002220 <HAL_DMA_Abort_IT>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007352:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800735a:	e003      	b.n	8007364 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f83b 	bl	80073d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007362:	e000      	b.n	8007366 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007364:	bf00      	nop
    return;
 8007366:	bf00      	nop
  }
}
 8007368:	3720      	adds	r7, #32
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	08007661 	.word	0x08007661

08007374 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073fa:	f7fa fc59 	bl	8001cb0 <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740e:	d03b      	beq.n	8007488 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0220 	bic.w	r2, r2, #32
 800741e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0202 	bic.w	r2, r2, #2
 800742e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	2164      	movs	r1, #100	; 0x64
 8007434:	6978      	ldr	r0, [r7, #20]
 8007436:	f000 fa15 	bl	8007864 <SPI_EndRxTxTransaction>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2200      	movs	r2, #0
 800746e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007480:	6978      	ldr	r0, [r7, #20]
 8007482:	f7ff ffa9 	bl	80073d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007486:	e002      	b.n	800748e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007488:	6978      	ldr	r0, [r7, #20]
 800748a:	f7ff ff73 	bl	8007374 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074a2:	f7fa fc05 	bl	8001cb0 <HAL_GetTick>
 80074a6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b6:	d03b      	beq.n	8007530 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0220 	bic.w	r2, r2, #32
 80074c6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10d      	bne.n	80074ec <SPI_DMAReceiveCplt+0x58>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074d8:	d108      	bne.n	80074ec <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0203 	bic.w	r2, r2, #3
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	e007      	b.n	80074fc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0201 	bic.w	r2, r2, #1
 80074fa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	2164      	movs	r1, #100	; 0x64
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f949 	bl	8007798 <SPI_EndRxTransaction>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff ff55 	bl	80073d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800752e:	e002      	b.n	8007536 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7f9 f82f 	bl	8000594 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007548:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800754a:	f7fa fbb1 	bl	8001cb0 <HAL_GetTick>
 800754e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755e:	d02f      	beq.n	80075c0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0220 	bic.w	r2, r2, #32
 800756e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	2164      	movs	r1, #100	; 0x64
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f975 	bl	8007864 <SPI_EndRxTxTransaction>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007584:	f043 0220 	orr.w	r2, r3, #32
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0203 	bic.w	r2, r2, #3
 800759a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f7ff ff0d 	bl	80073d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80075be:	e002      	b.n	80075c6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff fee1 	bl	8007388 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff fede 	bl	800739c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075e0:	bf00      	nop
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff feda 	bl	80073b0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff fed6 	bl	80073c4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0203 	bic.w	r2, r2, #3
 800763c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007642:	f043 0210 	orr.w	r2, r3, #16
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7ff fec0 	bl	80073d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff feac 	bl	80073d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	4613      	mov	r3, r2
 8007696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007698:	f7fa fb0a 	bl	8001cb0 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a0:	1a9b      	subs	r3, r3, r2
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076a8:	f7fa fb02 	bl	8001cb0 <HAL_GetTick>
 80076ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076ae:	4b39      	ldr	r3, [pc, #228]	; (8007794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	015b      	lsls	r3, r3, #5
 80076b4:	0d1b      	lsrs	r3, r3, #20
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	fb02 f303 	mul.w	r3, r2, r3
 80076bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076be:	e054      	b.n	800776a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d050      	beq.n	800776a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076c8:	f7fa faf2 	bl	8001cb0 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d902      	bls.n	80076de <SPI_WaitFlagStateUntilTimeout+0x56>
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d13d      	bne.n	800775a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076f6:	d111      	bne.n	800771c <SPI_WaitFlagStateUntilTimeout+0x94>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007700:	d004      	beq.n	800770c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770a:	d107      	bne.n	800771c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800771a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007724:	d10f      	bne.n	8007746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e017      	b.n	800778a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	3b01      	subs	r3, #1
 8007768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4013      	ands	r3, r2
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	bf0c      	ite	eq
 800777a:	2301      	moveq	r3, #1
 800777c:	2300      	movne	r3, #0
 800777e:	b2db      	uxtb	r3, r3
 8007780:	461a      	mov	r2, r3
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	429a      	cmp	r2, r3
 8007786:	d19b      	bne.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3720      	adds	r7, #32
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000014 	.word	0x20000014

08007798 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ac:	d111      	bne.n	80077d2 <SPI_EndRxTransaction+0x3a>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b6:	d004      	beq.n	80077c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c0:	d107      	bne.n	80077d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077da:	d12a      	bne.n	8007832 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e4:	d012      	beq.n	800780c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2180      	movs	r1, #128	; 0x80
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f7ff ff49 	bl	8007688 <SPI_WaitFlagStateUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d02d      	beq.n	8007858 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	f043 0220 	orr.w	r2, r3, #32
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e026      	b.n	800785a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2200      	movs	r2, #0
 8007814:	2101      	movs	r1, #1
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7ff ff36 	bl	8007688 <SPI_WaitFlagStateUntilTimeout>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01a      	beq.n	8007858 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	f043 0220 	orr.w	r2, r3, #32
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e013      	b.n	800785a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2200      	movs	r2, #0
 800783a:	2101      	movs	r1, #1
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff ff23 	bl	8007688 <SPI_WaitFlagStateUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	f043 0220 	orr.w	r2, r3, #32
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e000      	b.n	800785a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af02      	add	r7, sp, #8
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007870:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <SPI_EndRxTxTransaction+0x7c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a1b      	ldr	r2, [pc, #108]	; (80078e4 <SPI_EndRxTxTransaction+0x80>)
 8007876:	fba2 2303 	umull	r2, r3, r2, r3
 800787a:	0d5b      	lsrs	r3, r3, #21
 800787c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007880:	fb02 f303 	mul.w	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800788e:	d112      	bne.n	80078b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2200      	movs	r2, #0
 8007898:	2180      	movs	r1, #128	; 0x80
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff fef4 	bl	8007688 <SPI_WaitFlagStateUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d016      	beq.n	80078d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078aa:	f043 0220 	orr.w	r2, r3, #32
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e00f      	b.n	80078d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	3b01      	subs	r3, #1
 80078c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078cc:	2b80      	cmp	r3, #128	; 0x80
 80078ce:	d0f2      	beq.n	80078b6 <SPI_EndRxTxTransaction+0x52>
 80078d0:	e000      	b.n	80078d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80078d2:	bf00      	nop
  }

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000014 	.word	0x20000014
 80078e4:	165e9f81 	.word	0x165e9f81

080078e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e03f      	b.n	800797a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7f9 fcb6 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2224      	movs	r2, #36	; 0x24
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800792a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f84d 	bl	80089cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b08a      	sub	sp, #40	; 0x28
 8007986:	af02      	add	r7, sp, #8
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d17c      	bne.n	8007a9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_UART_Transmit+0x2c>
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e075      	b.n	8007a9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_UART_Transmit+0x3e>
 80079bc:	2302      	movs	r3, #2
 80079be:	e06e      	b.n	8007a9e <HAL_UART_Transmit+0x11c>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2221      	movs	r2, #33	; 0x21
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079d6:	f7fa f96b 	bl	8001cb0 <HAL_GetTick>
 80079da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	88fa      	ldrh	r2, [r7, #6]
 80079e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	88fa      	ldrh	r2, [r7, #6]
 80079e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f0:	d108      	bne.n	8007a04 <HAL_UART_Transmit+0x82>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	61bb      	str	r3, [r7, #24]
 8007a02:	e003      	b.n	8007a0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a14:	e02a      	b.n	8007a6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2180      	movs	r1, #128	; 0x80
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fd04 	bl	800842e <UART_WaitOnFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e036      	b.n	8007a9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	3302      	adds	r3, #2
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e007      	b.n	8007a5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1cf      	bne.n	8007a16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2140      	movs	r1, #64	; 0x40
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fcd4 	bl	800842e <UART_WaitOnFlagUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e006      	b.n	8007a9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e000      	b.n	8007a9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a9c:	2302      	movs	r3, #2
  }
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3720      	adds	r7, #32
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08c      	sub	sp, #48	; 0x30
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	d165      	bne.n	8007b8e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <HAL_UART_Transmit_DMA+0x26>
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e05e      	b.n	8007b90 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_UART_Transmit_DMA+0x38>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e057      	b.n	8007b90 <HAL_UART_Transmit_DMA+0xe8>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2221      	movs	r2, #33	; 0x21
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0c:	4a22      	ldr	r2, [pc, #136]	; (8007b98 <HAL_UART_Transmit_DMA+0xf0>)
 8007b0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	4a21      	ldr	r2, [pc, #132]	; (8007b9c <HAL_UART_Transmit_DMA+0xf4>)
 8007b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1c:	4a20      	ldr	r2, [pc, #128]	; (8007ba0 <HAL_UART_Transmit_DMA+0xf8>)
 8007b1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b24:	2200      	movs	r2, #0
 8007b26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007b28:	f107 0308 	add.w	r3, r7, #8
 8007b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	6819      	ldr	r1, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	f7fa faa6 	bl	8002090 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b4c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3314      	adds	r3, #20
 8007b5c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	617b      	str	r3, [r7, #20]
   return(result);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3314      	adds	r3, #20
 8007b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b76:	627a      	str	r2, [r7, #36]	; 0x24
 8007b78:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6a39      	ldr	r1, [r7, #32]
 8007b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e5      	bne.n	8007b56 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e000      	b.n	8007b90 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007b8e:	2302      	movs	r3, #2
  }
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3730      	adds	r7, #48	; 0x30
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	08008189 	.word	0x08008189
 8007b9c:	08008223 	.word	0x08008223
 8007ba0:	0800839b 	.word	0x0800839b

08007ba4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d11d      	bne.n	8007bfa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_UART_Receive_DMA+0x26>
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e016      	b.n	8007bfc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_UART_Receive_DMA+0x38>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e00f      	b.n	8007bfc <HAL_UART_Receive_DMA+0x58>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	461a      	mov	r2, r3
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fc8b 	bl	800850c <UART_Start_Receive_DMA>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	e000      	b.n	8007bfc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007bfa:	2302      	movs	r3, #2
  }
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b0ba      	sub	sp, #232	; 0xe8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10f      	bne.n	8007c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <HAL_UART_IRQHandler+0x66>
 8007c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fdf7 	bl	8008856 <UART_Receive_IT>
      return;
 8007c68:	e256      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 80de 	beq.w	8007e30 <HAL_UART_IRQHandler+0x22c>
 8007c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d106      	bne.n	8007c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80d1 	beq.w	8007e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00b      	beq.n	8007cb2 <HAL_UART_IRQHandler+0xae>
 8007c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	f043 0201 	orr.w	r2, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <HAL_UART_IRQHandler+0xd2>
 8007cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	f043 0202 	orr.w	r2, r3, #2
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <HAL_UART_IRQHandler+0xf6>
 8007ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	f043 0204 	orr.w	r2, r3, #4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d011      	beq.n	8007d2a <HAL_UART_IRQHandler+0x126>
 8007d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f043 0208 	orr.w	r2, r3, #8
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 81ed 	beq.w	800810e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <HAL_UART_IRQHandler+0x14e>
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fd82 	bl	8008856 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	f003 0308 	and.w	r3, r3, #8
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <HAL_UART_IRQHandler+0x17a>
 8007d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d04f      	beq.n	8007e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fc8a 	bl	8008698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d141      	bne.n	8007e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3314      	adds	r3, #20
 8007d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3314      	adds	r3, #20
 8007dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1d9      	bne.n	8007d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d013      	beq.n	8007e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	4a7d      	ldr	r2, [pc, #500]	; (8007fe0 <HAL_UART_IRQHandler+0x3dc>)
 8007dec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fa fa14 	bl	8002220 <HAL_DMA_Abort_IT>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d016      	beq.n	8007e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0c:	e00e      	b.n	8007e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f9a4 	bl	800815c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e14:	e00a      	b.n	8007e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f9a0 	bl	800815c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1c:	e006      	b.n	8007e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f99c 	bl	800815c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e2a:	e170      	b.n	800810e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2c:	bf00      	nop
    return;
 8007e2e:	e16e      	b.n	800810e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	f040 814a 	bne.w	80080ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 8143 	beq.w	80080ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 813c 	beq.w	80080ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e56:	2300      	movs	r3, #0
 8007e58:	60bb      	str	r3, [r7, #8]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	60bb      	str	r3, [r7, #8]
 8007e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	f040 80b4 	bne.w	8007fe4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 8140 	beq.w	8008112 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	f080 8139 	bcs.w	8008112 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ea6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb2:	f000 8088 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	330c      	adds	r3, #12
 8007ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	330c      	adds	r3, #12
 8007ede:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1d9      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3314      	adds	r3, #20
 8007f08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3314      	adds	r3, #20
 8007f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e1      	bne.n	8007f02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3314      	adds	r3, #20
 8007f44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3314      	adds	r3, #20
 8007f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e3      	bne.n	8007f3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f96:	f023 0310 	bic.w	r3, r3, #16
 8007f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	330c      	adds	r3, #12
 8007fa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007faa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e3      	bne.n	8007f84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fa f8bd 	bl	8002140 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8ca 	bl	8008170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fdc:	e099      	b.n	8008112 <HAL_UART_IRQHandler+0x50e>
 8007fde:	bf00      	nop
 8007fe0:	0800875f 	.word	0x0800875f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 808b 	beq.w	8008116 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8086 	beq.w	8008116 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	330c      	adds	r3, #12
 8008010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	330c      	adds	r3, #12
 800802a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800802e:	647a      	str	r2, [r7, #68]	; 0x44
 8008030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800803c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e3      	bne.n	800800a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3314      	adds	r3, #20
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	623b      	str	r3, [r7, #32]
   return(result);
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	f023 0301 	bic.w	r3, r3, #1
 8008058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3314      	adds	r3, #20
 8008062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008066:	633a      	str	r2, [r7, #48]	; 0x30
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800806c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e3      	bne.n	8008042 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	60fb      	str	r3, [r7, #12]
   return(result);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0310 	bic.w	r3, r3, #16
 800809e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	330c      	adds	r3, #12
 80080a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80080ac:	61fa      	str	r2, [r7, #28]
 80080ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	69b9      	ldr	r1, [r7, #24]
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e3      	bne.n	8008088 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f852 	bl	8008170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080cc:	e023      	b.n	8008116 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <HAL_UART_IRQHandler+0x4ea>
 80080da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fb4d 	bl	8008786 <UART_Transmit_IT>
    return;
 80080ec:	e014      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00e      	beq.n	8008118 <HAL_UART_IRQHandler+0x514>
 80080fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d008      	beq.n	8008118 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fb8d 	bl	8008826 <UART_EndTransmit_IT>
    return;
 800810c:	e004      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
    return;
 800810e:	bf00      	nop
 8008110:	e002      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
      return;
 8008112:	bf00      	nop
 8008114:	e000      	b.n	8008118 <HAL_UART_IRQHandler+0x514>
      return;
 8008116:	bf00      	nop
  }
}
 8008118:	37e8      	adds	r7, #232	; 0xe8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop

08008120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b090      	sub	sp, #64	; 0x40
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d137      	bne.n	8008214 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80081a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a6:	2200      	movs	r2, #0
 80081a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3314      	adds	r3, #20
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	623b      	str	r3, [r7, #32]
   return(result);
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80081c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3314      	adds	r3, #20
 80081c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ca:	633a      	str	r2, [r7, #48]	; 0x30
 80081cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e5      	bne.n	80081aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	330c      	adds	r3, #12
 80081e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
 80081f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330c      	adds	r3, #12
 80081fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fe:	61fa      	str	r2, [r7, #28]
 8008200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	69b9      	ldr	r1, [r7, #24]
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	617b      	str	r3, [r7, #20]
   return(result);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e5      	bne.n	80081de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008212:	e002      	b.n	800821a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008214:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008216:	f7ff ff83 	bl	8008120 <HAL_UART_TxCpltCallback>
}
 800821a:	bf00      	nop
 800821c:	3740      	adds	r7, #64	; 0x40
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff ff7f 	bl	8008134 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b09c      	sub	sp, #112	; 0x70
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008256:	2b00      	cmp	r3, #0
 8008258:	d172      	bne.n	8008340 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800825a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825c:	2200      	movs	r2, #0
 800825e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800826a:	e853 3f00 	ldrex	r3, [r3]
 800826e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008276:	66bb      	str	r3, [r7, #104]	; 0x68
 8008278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	330c      	adds	r3, #12
 800827e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008280:	65ba      	str	r2, [r7, #88]	; 0x58
 8008282:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800828e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e5      	bne.n	8008260 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3314      	adds	r3, #20
 800829a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a6:	f023 0301 	bic.w	r3, r3, #1
 80082aa:	667b      	str	r3, [r7, #100]	; 0x64
 80082ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3314      	adds	r3, #20
 80082b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80082b4:	647a      	str	r2, [r7, #68]	; 0x44
 80082b6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e5      	bne.n	8008294 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3314      	adds	r3, #20
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	623b      	str	r3, [r7, #32]
   return(result);
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082de:	663b      	str	r3, [r7, #96]	; 0x60
 80082e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3314      	adds	r3, #20
 80082e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082e8:	633a      	str	r2, [r7, #48]	; 0x30
 80082ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fe:	2220      	movs	r2, #32
 8008300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	2b01      	cmp	r3, #1
 800830a:	d119      	bne.n	8008340 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	330c      	adds	r3, #12
 8008312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	60fb      	str	r3, [r7, #12]
   return(result);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f023 0310 	bic.w	r3, r3, #16
 8008322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	330c      	adds	r3, #12
 800832a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800832c:	61fa      	str	r2, [r7, #28]
 800832e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	69b9      	ldr	r1, [r7, #24]
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	617b      	str	r3, [r7, #20]
   return(result);
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e5      	bne.n	800830c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	2b01      	cmp	r3, #1
 8008346:	d106      	bne.n	8008356 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800834c:	4619      	mov	r1, r3
 800834e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008350:	f7ff ff0e 	bl	8008170 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008354:	e002      	b.n	800835c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008356:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008358:	f7f8 f93c 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 800835c:	bf00      	nop
 800835e:	3770      	adds	r7, #112	; 0x70
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008370:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008376:	2b01      	cmp	r3, #1
 8008378:	d108      	bne.n	800838c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	b29b      	uxth	r3, r3
 8008382:	4619      	mov	r1, r3
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff fef3 	bl	8008170 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800838a:	e002      	b.n	8008392 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7ff fedb 	bl	8008148 <HAL_UART_RxHalfCpltCallback>
}
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b6:	2b80      	cmp	r3, #128	; 0x80
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b21      	cmp	r3, #33	; 0x21
 80083cc:	d108      	bne.n	80083e0 <UART_DMAError+0x46>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083da:	68b8      	ldr	r0, [r7, #8]
 80083dc:	f000 f934 	bl	8008648 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ea:	2b40      	cmp	r3, #64	; 0x40
 80083ec:	bf0c      	ite	eq
 80083ee:	2301      	moveq	r3, #1
 80083f0:	2300      	movne	r3, #0
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b22      	cmp	r3, #34	; 0x22
 8008400:	d108      	bne.n	8008414 <UART_DMAError+0x7a>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800840e:	68b8      	ldr	r0, [r7, #8]
 8008410:	f000 f942 	bl	8008698 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	f043 0210 	orr.w	r2, r3, #16
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008420:	68b8      	ldr	r0, [r7, #8]
 8008422:	f7ff fe9b 	bl	800815c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b090      	sub	sp, #64	; 0x40
 8008432:	af00      	add	r7, sp, #0
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	603b      	str	r3, [r7, #0]
 800843a:	4613      	mov	r3, r2
 800843c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800843e:	e050      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008446:	d04c      	beq.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0x30>
 800844e:	f7f9 fc2f 	bl	8001cb0 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800845a:	429a      	cmp	r2, r3
 800845c:	d241      	bcs.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800847e:	637a      	str	r2, [r7, #52]	; 0x34
 8008480:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e5      	bne.n	800845e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3314      	adds	r3, #20
 8008498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	613b      	str	r3, [r7, #16]
   return(result);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f023 0301 	bic.w	r3, r3, #1
 80084a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3314      	adds	r3, #20
 80084b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084b2:	623a      	str	r2, [r7, #32]
 80084b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	69f9      	ldr	r1, [r7, #28]
 80084b8:	6a3a      	ldr	r2, [r7, #32]
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e5      	bne.n	8008492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e00f      	b.n	8008502 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4013      	ands	r3, r2
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	bf0c      	ite	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	2300      	movne	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d09f      	beq.n	8008440 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3740      	adds	r7, #64	; 0x40
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b098      	sub	sp, #96	; 0x60
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	88fa      	ldrh	r2, [r7, #6]
 8008524:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2222      	movs	r2, #34	; 0x22
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008538:	4a40      	ldr	r2, [pc, #256]	; (800863c <UART_Start_Receive_DMA+0x130>)
 800853a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	4a3f      	ldr	r2, [pc, #252]	; (8008640 <UART_Start_Receive_DMA+0x134>)
 8008542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	4a3e      	ldr	r2, [pc, #248]	; (8008644 <UART_Start_Receive_DMA+0x138>)
 800854a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	2200      	movs	r2, #0
 8008552:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3304      	adds	r3, #4
 8008564:	4619      	mov	r1, r3
 8008566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	f7f9 fd90 	bl	8002090 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008570:	2300      	movs	r3, #0
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d019      	beq.n	80085ca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	330c      	adds	r3, #12
 800859c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	330c      	adds	r3, #12
 80085b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80085b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80085bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80085c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e5      	bne.n	8008596 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3314      	adds	r3, #20
 80085d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	657b      	str	r3, [r7, #84]	; 0x54
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3314      	adds	r3, #20
 80085e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80085f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e5      	bne.n	80085ca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3314      	adds	r3, #20
 8008604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	617b      	str	r3, [r7, #20]
   return(result);
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008614:	653b      	str	r3, [r7, #80]	; 0x50
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3314      	adds	r3, #20
 800861c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800861e:	627a      	str	r2, [r7, #36]	; 0x24
 8008620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6a39      	ldr	r1, [r7, #32]
 8008624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	61fb      	str	r3, [r7, #28]
   return(result);
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e5      	bne.n	80085fe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3760      	adds	r7, #96	; 0x60
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	0800823f 	.word	0x0800823f
 8008640:	08008365 	.word	0x08008365
 8008644:	0800839b 	.word	0x0800839b

08008648 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008648:	b480      	push	{r7}
 800864a:	b089      	sub	sp, #36	; 0x24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	330c      	adds	r3, #12
 8008656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	330c      	adds	r3, #12
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	61ba      	str	r2, [r7, #24]
 8008672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6979      	ldr	r1, [r7, #20]
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	613b      	str	r3, [r7, #16]
   return(result);
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e5      	bne.n	8008650 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800868c:	bf00      	nop
 800868e:	3724      	adds	r7, #36	; 0x24
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008698:	b480      	push	{r7}
 800869a:	b095      	sub	sp, #84	; 0x54
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	330c      	adds	r3, #12
 80086a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	330c      	adds	r3, #12
 80086be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086c0:	643a      	str	r2, [r7, #64]	; 0x40
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e5      	bne.n	80086a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3314      	adds	r3, #20
 80086da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	e853 3f00 	ldrex	r3, [r3]
 80086e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3314      	adds	r3, #20
 80086f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e5      	bne.n	80086d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870c:	2b01      	cmp	r3, #1
 800870e:	d119      	bne.n	8008744 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	e853 3f00 	ldrex	r3, [r3]
 800871e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f023 0310 	bic.w	r3, r3, #16
 8008726:	647b      	str	r3, [r7, #68]	; 0x44
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	330c      	adds	r3, #12
 800872e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008730:	61ba      	str	r2, [r7, #24]
 8008732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6979      	ldr	r1, [r7, #20]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	613b      	str	r3, [r7, #16]
   return(result);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e5      	bne.n	8008710 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008752:	bf00      	nop
 8008754:	3754      	adds	r7, #84	; 0x54
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7ff fcef 	bl	800815c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b21      	cmp	r3, #33	; 0x21
 8008798:	d13e      	bne.n	8008818 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a2:	d114      	bne.n	80087ce <UART_Transmit_IT+0x48>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d110      	bne.n	80087ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	1c9a      	adds	r2, r3, #2
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	621a      	str	r2, [r3, #32]
 80087cc:	e008      	b.n	80087e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	1c59      	adds	r1, r3, #1
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	6211      	str	r1, [r2, #32]
 80087d8:	781a      	ldrb	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	4619      	mov	r1, r3
 80087ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10f      	bne.n	8008814 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	e000      	b.n	800881a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008818:	2302      	movs	r3, #2
  }
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800883c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff fc6a 	bl	8008120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b08c      	sub	sp, #48	; 0x30
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b22      	cmp	r3, #34	; 0x22
 8008868:	f040 80ab 	bne.w	80089c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008874:	d117      	bne.n	80088a6 <UART_Receive_IT+0x50>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d113      	bne.n	80088a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008894:	b29a      	uxth	r2, r3
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	1c9a      	adds	r2, r3, #2
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	629a      	str	r2, [r3, #40]	; 0x28
 80088a4:	e026      	b.n	80088f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b8:	d007      	beq.n	80088ca <UART_Receive_IT+0x74>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <UART_Receive_IT+0x82>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e008      	b.n	80088ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	4619      	mov	r1, r3
 8008902:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008904:	2b00      	cmp	r3, #0
 8008906:	d15a      	bne.n	80089be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0220 	bic.w	r2, r2, #32
 8008916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f022 0201 	bic.w	r2, r2, #1
 8008936:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2220      	movs	r2, #32
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	2b01      	cmp	r3, #1
 8008946:	d135      	bne.n	80089b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330c      	adds	r3, #12
 8008954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	613b      	str	r3, [r7, #16]
   return(result);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f023 0310 	bic.w	r3, r3, #16
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	330c      	adds	r3, #12
 800896c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896e:	623a      	str	r2, [r7, #32]
 8008970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	69f9      	ldr	r1, [r7, #28]
 8008974:	6a3a      	ldr	r2, [r7, #32]
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	61bb      	str	r3, [r7, #24]
   return(result);
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e5      	bne.n	800894e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b10      	cmp	r3, #16
 800898e:	d10a      	bne.n	80089a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff fbdf 	bl	8008170 <HAL_UARTEx_RxEventCallback>
 80089b2:	e002      	b.n	80089ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7f7 fe0d 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	e002      	b.n	80089c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e000      	b.n	80089c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
  }
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3730      	adds	r7, #48	; 0x30
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089d0:	b0c0      	sub	sp, #256	; 0x100
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e8:	68d9      	ldr	r1, [r3, #12]
 80089ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	ea40 0301 	orr.w	r3, r0, r1
 80089f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a24:	f021 010c 	bic.w	r1, r1, #12
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a32:	430b      	orrs	r3, r1
 8008a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a46:	6999      	ldr	r1, [r3, #24]
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	ea40 0301 	orr.w	r3, r0, r1
 8008a52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b8f      	ldr	r3, [pc, #572]	; (8008c98 <UART_SetConfig+0x2cc>)
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d005      	beq.n	8008a6c <UART_SetConfig+0xa0>
 8008a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4b8d      	ldr	r3, [pc, #564]	; (8008c9c <UART_SetConfig+0x2d0>)
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d104      	bne.n	8008a76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a6c:	f7fe f864 	bl	8006b38 <HAL_RCC_GetPCLK2Freq>
 8008a70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a74:	e003      	b.n	8008a7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a76:	f7fe f84b 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8008a7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a88:	f040 810c 	bne.w	8008ca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	462b      	mov	r3, r5
 8008aa2:	1891      	adds	r1, r2, r2
 8008aa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008aa6:	415b      	adcs	r3, r3
 8008aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008aae:	4621      	mov	r1, r4
 8008ab0:	eb12 0801 	adds.w	r8, r2, r1
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	eb43 0901 	adc.w	r9, r3, r1
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ace:	4690      	mov	r8, r2
 8008ad0:	4699      	mov	r9, r3
 8008ad2:	4623      	mov	r3, r4
 8008ad4:	eb18 0303 	adds.w	r3, r8, r3
 8008ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008adc:	462b      	mov	r3, r5
 8008ade:	eb49 0303 	adc.w	r3, r9, r3
 8008ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008af2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008afa:	460b      	mov	r3, r1
 8008afc:	18db      	adds	r3, r3, r3
 8008afe:	653b      	str	r3, [r7, #80]	; 0x50
 8008b00:	4613      	mov	r3, r2
 8008b02:	eb42 0303 	adc.w	r3, r2, r3
 8008b06:	657b      	str	r3, [r7, #84]	; 0x54
 8008b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b10:	f7f7 fbbe 	bl	8000290 <__aeabi_uldivmod>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4b61      	ldr	r3, [pc, #388]	; (8008ca0 <UART_SetConfig+0x2d4>)
 8008b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	011c      	lsls	r4, r3, #4
 8008b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b34:	4642      	mov	r2, r8
 8008b36:	464b      	mov	r3, r9
 8008b38:	1891      	adds	r1, r2, r2
 8008b3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b3c:	415b      	adcs	r3, r3
 8008b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b44:	4641      	mov	r1, r8
 8008b46:	eb12 0a01 	adds.w	sl, r2, r1
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	eb43 0b01 	adc.w	fp, r3, r1
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	f04f 0300 	mov.w	r3, #0
 8008b58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b64:	4692      	mov	sl, r2
 8008b66:	469b      	mov	fp, r3
 8008b68:	4643      	mov	r3, r8
 8008b6a:	eb1a 0303 	adds.w	r3, sl, r3
 8008b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b72:	464b      	mov	r3, r9
 8008b74:	eb4b 0303 	adc.w	r3, fp, r3
 8008b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b90:	460b      	mov	r3, r1
 8008b92:	18db      	adds	r3, r3, r3
 8008b94:	643b      	str	r3, [r7, #64]	; 0x40
 8008b96:	4613      	mov	r3, r2
 8008b98:	eb42 0303 	adc.w	r3, r2, r3
 8008b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ba6:	f7f7 fb73 	bl	8000290 <__aeabi_uldivmod>
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4b3b      	ldr	r3, [pc, #236]	; (8008ca0 <UART_SetConfig+0x2d4>)
 8008bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8008bb6:	095b      	lsrs	r3, r3, #5
 8008bb8:	2264      	movs	r2, #100	; 0x64
 8008bba:	fb02 f303 	mul.w	r3, r2, r3
 8008bbe:	1acb      	subs	r3, r1, r3
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008bc6:	4b36      	ldr	r3, [pc, #216]	; (8008ca0 <UART_SetConfig+0x2d4>)
 8008bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bd4:	441c      	add	r4, r3
 8008bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008be0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008be4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	1891      	adds	r1, r2, r2
 8008bee:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bf0:	415b      	adcs	r3, r3
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	1851      	adds	r1, r2, r1
 8008bfc:	6339      	str	r1, [r7, #48]	; 0x30
 8008bfe:	4649      	mov	r1, r9
 8008c00:	414b      	adcs	r3, r1
 8008c02:	637b      	str	r3, [r7, #52]	; 0x34
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c10:	4659      	mov	r1, fp
 8008c12:	00cb      	lsls	r3, r1, #3
 8008c14:	4651      	mov	r1, sl
 8008c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c1a:	4651      	mov	r1, sl
 8008c1c:	00ca      	lsls	r2, r1, #3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	4619      	mov	r1, r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	4642      	mov	r2, r8
 8008c26:	189b      	adds	r3, r3, r2
 8008c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	460a      	mov	r2, r1
 8008c30:	eb42 0303 	adc.w	r3, r2, r3
 8008c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	18db      	adds	r3, r3, r3
 8008c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c52:	4613      	mov	r3, r2
 8008c54:	eb42 0303 	adc.w	r3, r2, r3
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c62:	f7f7 fb15 	bl	8000290 <__aeabi_uldivmod>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <UART_SetConfig+0x2d4>)
 8008c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	2164      	movs	r1, #100	; 0x64
 8008c74:	fb01 f303 	mul.w	r3, r1, r3
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	3332      	adds	r3, #50	; 0x32
 8008c7e:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <UART_SetConfig+0x2d4>)
 8008c80:	fba2 2303 	umull	r2, r3, r2, r3
 8008c84:	095b      	lsrs	r3, r3, #5
 8008c86:	f003 0207 	and.w	r2, r3, #7
 8008c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4422      	add	r2, r4
 8008c92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c94:	e105      	b.n	8008ea2 <UART_SetConfig+0x4d6>
 8008c96:	bf00      	nop
 8008c98:	40011000 	.word	0x40011000
 8008c9c:	40011400 	.word	0x40011400
 8008ca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	464b      	mov	r3, r9
 8008cba:	1891      	adds	r1, r2, r2
 8008cbc:	6239      	str	r1, [r7, #32]
 8008cbe:	415b      	adcs	r3, r3
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cc6:	4641      	mov	r1, r8
 8008cc8:	1854      	adds	r4, r2, r1
 8008cca:	4649      	mov	r1, r9
 8008ccc:	eb43 0501 	adc.w	r5, r3, r1
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	00eb      	lsls	r3, r5, #3
 8008cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cde:	00e2      	lsls	r2, r4, #3
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	461d      	mov	r5, r3
 8008ce4:	4643      	mov	r3, r8
 8008ce6:	18e3      	adds	r3, r4, r3
 8008ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cec:	464b      	mov	r3, r9
 8008cee:	eb45 0303 	adc.w	r3, r5, r3
 8008cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	f04f 0300 	mov.w	r3, #0
 8008d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d12:	4629      	mov	r1, r5
 8008d14:	008b      	lsls	r3, r1, #2
 8008d16:	4621      	mov	r1, r4
 8008d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	008a      	lsls	r2, r1, #2
 8008d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d24:	f7f7 fab4 	bl	8000290 <__aeabi_uldivmod>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4b60      	ldr	r3, [pc, #384]	; (8008eb0 <UART_SetConfig+0x4e4>)
 8008d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008d32:	095b      	lsrs	r3, r3, #5
 8008d34:	011c      	lsls	r4, r3, #4
 8008d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d48:	4642      	mov	r2, r8
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	1891      	adds	r1, r2, r2
 8008d4e:	61b9      	str	r1, [r7, #24]
 8008d50:	415b      	adcs	r3, r3
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d58:	4641      	mov	r1, r8
 8008d5a:	1851      	adds	r1, r2, r1
 8008d5c:	6139      	str	r1, [r7, #16]
 8008d5e:	4649      	mov	r1, r9
 8008d60:	414b      	adcs	r3, r1
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d70:	4659      	mov	r1, fp
 8008d72:	00cb      	lsls	r3, r1, #3
 8008d74:	4651      	mov	r1, sl
 8008d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d7a:	4651      	mov	r1, sl
 8008d7c:	00ca      	lsls	r2, r1, #3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	4619      	mov	r1, r3
 8008d82:	4603      	mov	r3, r0
 8008d84:	4642      	mov	r2, r8
 8008d86:	189b      	adds	r3, r3, r2
 8008d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	460a      	mov	r2, r1
 8008d90:	eb42 0303 	adc.w	r3, r2, r3
 8008d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008da2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008db0:	4649      	mov	r1, r9
 8008db2:	008b      	lsls	r3, r1, #2
 8008db4:	4641      	mov	r1, r8
 8008db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dba:	4641      	mov	r1, r8
 8008dbc:	008a      	lsls	r2, r1, #2
 8008dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008dc2:	f7f7 fa65 	bl	8000290 <__aeabi_uldivmod>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4b39      	ldr	r3, [pc, #228]	; (8008eb0 <UART_SetConfig+0x4e4>)
 8008dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	2164      	movs	r1, #100	; 0x64
 8008dd4:	fb01 f303 	mul.w	r3, r1, r3
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	3332      	adds	r3, #50	; 0x32
 8008dde:	4a34      	ldr	r2, [pc, #208]	; (8008eb0 <UART_SetConfig+0x4e4>)
 8008de0:	fba2 2303 	umull	r2, r3, r2, r3
 8008de4:	095b      	lsrs	r3, r3, #5
 8008de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dea:	441c      	add	r4, r3
 8008dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df0:	2200      	movs	r2, #0
 8008df2:	673b      	str	r3, [r7, #112]	; 0x70
 8008df4:	677a      	str	r2, [r7, #116]	; 0x74
 8008df6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	1891      	adds	r1, r2, r2
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	415b      	adcs	r3, r3
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	1851      	adds	r1, r2, r1
 8008e0e:	6039      	str	r1, [r7, #0]
 8008e10:	4649      	mov	r1, r9
 8008e12:	414b      	adcs	r3, r1
 8008e14:	607b      	str	r3, [r7, #4]
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	f04f 0300 	mov.w	r3, #0
 8008e1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e22:	4659      	mov	r1, fp
 8008e24:	00cb      	lsls	r3, r1, #3
 8008e26:	4651      	mov	r1, sl
 8008e28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e2c:	4651      	mov	r1, sl
 8008e2e:	00ca      	lsls	r2, r1, #3
 8008e30:	4610      	mov	r0, r2
 8008e32:	4619      	mov	r1, r3
 8008e34:	4603      	mov	r3, r0
 8008e36:	4642      	mov	r2, r8
 8008e38:	189b      	adds	r3, r3, r2
 8008e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	460a      	mov	r2, r1
 8008e40:	eb42 0303 	adc.w	r3, r2, r3
 8008e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8008e50:	667a      	str	r2, [r7, #100]	; 0x64
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e5e:	4649      	mov	r1, r9
 8008e60:	008b      	lsls	r3, r1, #2
 8008e62:	4641      	mov	r1, r8
 8008e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e68:	4641      	mov	r1, r8
 8008e6a:	008a      	lsls	r2, r1, #2
 8008e6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e70:	f7f7 fa0e 	bl	8000290 <__aeabi_uldivmod>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <UART_SetConfig+0x4e4>)
 8008e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e7e:	095b      	lsrs	r3, r3, #5
 8008e80:	2164      	movs	r1, #100	; 0x64
 8008e82:	fb01 f303 	mul.w	r3, r1, r3
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	011b      	lsls	r3, r3, #4
 8008e8a:	3332      	adds	r3, #50	; 0x32
 8008e8c:	4a08      	ldr	r2, [pc, #32]	; (8008eb0 <UART_SetConfig+0x4e4>)
 8008e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e92:	095b      	lsrs	r3, r3, #5
 8008e94:	f003 020f 	and.w	r2, r3, #15
 8008e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4422      	add	r2, r4
 8008ea0:	609a      	str	r2, [r3, #8]
}
 8008ea2:	bf00      	nop
 8008ea4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eae:	bf00      	nop
 8008eb0:	51eb851f 	.word	0x51eb851f

08008eb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	f107 001c 	add.w	r0, r7, #28
 8008ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d122      	bne.n	8008f12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d105      	bne.n	8008f06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 faa2 	bl	8009450 <USB_CoreReset>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	e01a      	b.n	8008f48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa96 	bl	8009450 <USB_CoreReset>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d106      	bne.n	8008f3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	639a      	str	r2, [r3, #56]	; 0x38
 8008f3a:	e005      	b.n	8008f48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d10b      	bne.n	8008f66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f043 0206 	orr.w	r2, r3, #6
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f043 0220 	orr.w	r2, r3, #32
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f72:	b004      	add	sp, #16
 8008f74:	4770      	bx	lr

08008f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f023 0201 	bic.w	r2, r3, #1
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d115      	bne.n	8008fe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	f7f8 fe7e 	bl	8001cc8 <HAL_Delay>
      ms++;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa2e 	bl	8009434 <USB_GetMode>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d01e      	beq.n	800901c <USB_SetCurrentMode+0x84>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b31      	cmp	r3, #49	; 0x31
 8008fe2:	d9f0      	bls.n	8008fc6 <USB_SetCurrentMode+0x2e>
 8008fe4:	e01a      	b.n	800901c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d115      	bne.n	8009018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	f7f8 fe65 	bl	8001cc8 <HAL_Delay>
      ms++;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fa15 	bl	8009434 <USB_GetMode>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <USB_SetCurrentMode+0x84>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b31      	cmp	r3, #49	; 0x31
 8009014:	d9f0      	bls.n	8008ff8 <USB_SetCurrentMode+0x60>
 8009016:	e001      	b.n	800901c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e005      	b.n	8009028 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b32      	cmp	r3, #50	; 0x32
 8009020:	d101      	bne.n	8009026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009030:	b084      	sub	sp, #16
 8009032:	b580      	push	{r7, lr}
 8009034:	b086      	sub	sp, #24
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800903e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	e009      	b.n	8009064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3340      	adds	r3, #64	; 0x40
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	2200      	movs	r2, #0
 800905c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	3301      	adds	r3, #1
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b0e      	cmp	r3, #14
 8009068:	d9f2      	bls.n	8009050 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d11c      	bne.n	80090aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800907e:	f043 0302 	orr.w	r3, r3, #2
 8009082:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	639a      	str	r2, [r3, #56]	; 0x38
 80090a8:	e00b      	b.n	80090c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090c8:	461a      	mov	r2, r3
 80090ca:	2300      	movs	r3, #0
 80090cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d4:	4619      	mov	r1, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090dc:	461a      	mov	r2, r3
 80090de:	680b      	ldr	r3, [r1, #0]
 80090e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d10c      	bne.n	8009102 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d104      	bne.n	80090f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090ee:	2100      	movs	r1, #0
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f965 	bl	80093c0 <USB_SetDevSpeed>
 80090f6:	e008      	b.n	800910a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090f8:	2101      	movs	r1, #1
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f960 	bl	80093c0 <USB_SetDevSpeed>
 8009100:	e003      	b.n	800910a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009102:	2103      	movs	r1, #3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f95b 	bl	80093c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800910a:	2110      	movs	r1, #16
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f8f3 	bl	80092f8 <USB_FlushTxFifo>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f91f 	bl	8009360 <USB_FlushRxFifo>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009132:	461a      	mov	r2, r3
 8009134:	2300      	movs	r3, #0
 8009136:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913e:	461a      	mov	r2, r3
 8009140:	2300      	movs	r3, #0
 8009142:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914a:	461a      	mov	r2, r3
 800914c:	2300      	movs	r3, #0
 800914e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009150:	2300      	movs	r3, #0
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	e043      	b.n	80091de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800916c:	d118      	bne.n	80091a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	461a      	mov	r2, r3
 8009182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	e013      	b.n	80091b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009196:	461a      	mov	r2, r3
 8009198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	e008      	b.n	80091b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ac:	461a      	mov	r2, r3
 80091ae:	2300      	movs	r3, #0
 80091b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	461a      	mov	r2, r3
 80091c0:	2300      	movs	r3, #0
 80091c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d0:	461a      	mov	r2, r3
 80091d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	3301      	adds	r3, #1
 80091dc:	613b      	str	r3, [r7, #16]
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d3b7      	bcc.n	8009156 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	613b      	str	r3, [r7, #16]
 80091ea:	e043      	b.n	8009274 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009202:	d118      	bne.n	8009236 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009216:	461a      	mov	r2, r3
 8009218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	e013      	b.n	8009248 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922c:	461a      	mov	r2, r3
 800922e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e008      	b.n	8009248 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009242:	461a      	mov	r2, r3
 8009244:	2300      	movs	r3, #0
 8009246:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009254:	461a      	mov	r2, r3
 8009256:	2300      	movs	r3, #0
 8009258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009266:	461a      	mov	r2, r3
 8009268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800926c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	3301      	adds	r3, #1
 8009272:	613b      	str	r3, [r7, #16]
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	429a      	cmp	r2, r3
 800927a:	d3b7      	bcc.n	80091ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800928a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800928e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800929c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f043 0210 	orr.w	r2, r3, #16
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <USB_DevInit+0x2c4>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f043 0208 	orr.w	r2, r3, #8
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d107      	bne.n	80092e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092dc:	f043 0304 	orr.w	r3, r3, #4
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092f0:	b004      	add	sp, #16
 80092f2:	4770      	bx	lr
 80092f4:	803c3800 	.word	0x803c3800

080092f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4a13      	ldr	r2, [pc, #76]	; (800935c <USB_FlushTxFifo+0x64>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d901      	bls.n	8009318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e01b      	b.n	8009350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	daf2      	bge.n	8009306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	019b      	lsls	r3, r3, #6
 8009328:	f043 0220 	orr.w	r2, r3, #32
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3301      	adds	r3, #1
 8009334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4a08      	ldr	r2, [pc, #32]	; (800935c <USB_FlushTxFifo+0x64>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d901      	bls.n	8009342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e006      	b.n	8009350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b20      	cmp	r3, #32
 800934c:	d0f0      	beq.n	8009330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	00030d40 	.word	0x00030d40

08009360 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3301      	adds	r3, #1
 8009370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4a11      	ldr	r2, [pc, #68]	; (80093bc <USB_FlushRxFifo+0x5c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d901      	bls.n	800937e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e018      	b.n	80093b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	daf2      	bge.n	800936c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2210      	movs	r2, #16
 800938e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4a08      	ldr	r2, [pc, #32]	; (80093bc <USB_FlushRxFifo+0x5c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d901      	bls.n	80093a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e006      	b.n	80093b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	f003 0310 	and.w	r3, r3, #16
 80093aa:	2b10      	cmp	r3, #16
 80093ac:	d0f0      	beq.n	8009390 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	00030d40 	.word	0x00030d40

080093c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e0:	4313      	orrs	r3, r2
 80093e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b085      	sub	sp, #20
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800940c:	f023 0303 	bic.w	r3, r3, #3
 8009410:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009420:	f043 0302 	orr.w	r3, r3, #2
 8009424:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	f003 0301 	and.w	r3, r3, #1
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4a13      	ldr	r2, [pc, #76]	; (80094b4 <USB_CoreReset+0x64>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d901      	bls.n	800946e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e01b      	b.n	80094a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	daf2      	bge.n	800945c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f043 0201 	orr.w	r2, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a09      	ldr	r2, [pc, #36]	; (80094b4 <USB_CoreReset+0x64>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d901      	bls.n	8009498 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e006      	b.n	80094a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d0f0      	beq.n	8009486 <USB_CoreReset+0x36>

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	00030d40 	.word	0x00030d40

080094b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80094be:	f000 fc73 	bl	8009da8 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80094c2:	4b19      	ldr	r3, [pc, #100]	; (8009528 <MX_LWIP_Init+0x70>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80094c8:	4b18      	ldr	r3, [pc, #96]	; (800952c <MX_LWIP_Init+0x74>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80094ce:	4b18      	ldr	r3, [pc, #96]	; (8009530 <MX_LWIP_Init+0x78>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80094d4:	4b17      	ldr	r3, [pc, #92]	; (8009534 <MX_LWIP_Init+0x7c>)
 80094d6:	9302      	str	r3, [sp, #8]
 80094d8:	4b17      	ldr	r3, [pc, #92]	; (8009538 <MX_LWIP_Init+0x80>)
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	2300      	movs	r3, #0
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	4b13      	ldr	r3, [pc, #76]	; (8009530 <MX_LWIP_Init+0x78>)
 80094e2:	4a12      	ldr	r2, [pc, #72]	; (800952c <MX_LWIP_Init+0x74>)
 80094e4:	4910      	ldr	r1, [pc, #64]	; (8009528 <MX_LWIP_Init+0x70>)
 80094e6:	4815      	ldr	r0, [pc, #84]	; (800953c <MX_LWIP_Init+0x84>)
 80094e8:	f001 f946 	bl	800a778 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80094ec:	4813      	ldr	r0, [pc, #76]	; (800953c <MX_LWIP_Init+0x84>)
 80094ee:	f001 fafd 	bl	800aaec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80094f2:	4b12      	ldr	r3, [pc, #72]	; (800953c <MX_LWIP_Init+0x84>)
 80094f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80094f8:	089b      	lsrs	r3, r3, #2
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009504:	480d      	ldr	r0, [pc, #52]	; (800953c <MX_LWIP_Init+0x84>)
 8009506:	f001 fb01 	bl	800ab0c <netif_set_up>
 800950a:	e002      	b.n	8009512 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800950c:	480b      	ldr	r0, [pc, #44]	; (800953c <MX_LWIP_Init+0x84>)
 800950e:	f001 fb69 	bl	800abe4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009512:	490b      	ldr	r1, [pc, #44]	; (8009540 <MX_LWIP_Init+0x88>)
 8009514:	4809      	ldr	r0, [pc, #36]	; (800953c <MX_LWIP_Init+0x84>)
 8009516:	f001 fbff 	bl	800ad18 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800951a:	4808      	ldr	r0, [pc, #32]	; (800953c <MX_LWIP_Init+0x84>)
 800951c:	f008 fc96 	bl	8011e4c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009520:	bf00      	nop
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20000b3c 	.word	0x20000b3c
 800952c:	20000b40 	.word	0x20000b40
 8009530:	20000b44 	.word	0x20000b44
 8009534:	080158e9 	.word	0x080158e9
 8009538:	0800977d 	.word	0x0800977d
 800953c:	20000b04 	.word	0x20000b04
 8009540:	08009545 	.word	0x08009545

08009544 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009564:	4b40      	ldr	r3, [pc, #256]	; (8009668 <low_level_init+0x110>)
 8009566:	4a41      	ldr	r2, [pc, #260]	; (800966c <low_level_init+0x114>)
 8009568:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800956a:	2300      	movs	r3, #0
 800956c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800956e:	2380      	movs	r3, #128	; 0x80
 8009570:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009572:	23e1      	movs	r3, #225	; 0xe1
 8009574:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009576:	2300      	movs	r3, #0
 8009578:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800957a:	2300      	movs	r3, #0
 800957c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800957e:	2300      	movs	r3, #0
 8009580:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009582:	4a39      	ldr	r2, [pc, #228]	; (8009668 <low_level_init+0x110>)
 8009584:	f107 0308 	add.w	r3, r7, #8
 8009588:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800958a:	4b37      	ldr	r3, [pc, #220]	; (8009668 <low_level_init+0x110>)
 800958c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009590:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009592:	4b35      	ldr	r3, [pc, #212]	; (8009668 <low_level_init+0x110>)
 8009594:	4a36      	ldr	r2, [pc, #216]	; (8009670 <low_level_init+0x118>)
 8009596:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009598:	4b33      	ldr	r3, [pc, #204]	; (8009668 <low_level_init+0x110>)
 800959a:	4a36      	ldr	r2, [pc, #216]	; (8009674 <low_level_init+0x11c>)
 800959c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800959e:	4b32      	ldr	r3, [pc, #200]	; (8009668 <low_level_init+0x110>)
 80095a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80095a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80095a6:	4830      	ldr	r0, [pc, #192]	; (8009668 <low_level_init+0x110>)
 80095a8:	f7f9 f8e0 	bl	800276c <HAL_ETH_Init>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80095b0:	2238      	movs	r2, #56	; 0x38
 80095b2:	2100      	movs	r1, #0
 80095b4:	4830      	ldr	r0, [pc, #192]	; (8009678 <low_level_init+0x120>)
 80095b6:	f00c faaf 	bl	8015b18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80095ba:	4b2f      	ldr	r3, [pc, #188]	; (8009678 <low_level_init+0x120>)
 80095bc:	2221      	movs	r2, #33	; 0x21
 80095be:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80095c0:	4b2d      	ldr	r3, [pc, #180]	; (8009678 <low_level_init+0x120>)
 80095c2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80095c6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80095c8:	4b2b      	ldr	r3, [pc, #172]	; (8009678 <low_level_init+0x120>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80095ce:	482b      	ldr	r0, [pc, #172]	; (800967c <low_level_init+0x124>)
 80095d0:	f000 ff9a 	bl	800a508 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2206      	movs	r2, #6
 80095d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80095dc:	4b22      	ldr	r3, [pc, #136]	; (8009668 <low_level_init+0x110>)
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	781a      	ldrb	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80095e8:	4b1f      	ldr	r3, [pc, #124]	; (8009668 <low_level_init+0x110>)
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	785a      	ldrb	r2, [r3, #1]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80095f4:	4b1c      	ldr	r3, [pc, #112]	; (8009668 <low_level_init+0x110>)
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	789a      	ldrb	r2, [r3, #2]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009600:	4b19      	ldr	r3, [pc, #100]	; (8009668 <low_level_init+0x110>)
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	78da      	ldrb	r2, [r3, #3]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800960c:	4b16      	ldr	r3, [pc, #88]	; (8009668 <low_level_init+0x110>)
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	791a      	ldrb	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009618:	4b13      	ldr	r3, [pc, #76]	; (8009668 <low_level_init+0x110>)
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	795a      	ldrb	r2, [r3, #5]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800962a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009632:	f043 030a 	orr.w	r3, r3, #10
 8009636:	b2da      	uxtb	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800963e:	4910      	ldr	r1, [pc, #64]	; (8009680 <low_level_init+0x128>)
 8009640:	4810      	ldr	r0, [pc, #64]	; (8009684 <low_level_init+0x12c>)
 8009642:	f7f8 f96e 	bl	8001922 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009646:	480f      	ldr	r0, [pc, #60]	; (8009684 <low_level_init+0x12c>)
 8009648:	f7f8 f99d 	bl	8001986 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fa02 	bl	8009a5c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009658:	e001      	b.n	800965e <low_level_init+0x106>
    Error_Handler();
 800965a:	f7f7 fb7b 	bl	8000d54 <Error_Handler>
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20005618 	.word	0x20005618
 800966c:	40028000 	.word	0x40028000
 8009670:	20005578 	.word	0x20005578
 8009674:	200054d8 	.word	0x200054d8
 8009678:	200056c8 	.word	0x200056c8
 800967c:	08019988 	.word	0x08019988
 8009680:	20000020 	.word	0x20000020
 8009684:	20005700 	.word	0x20005700

08009688 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b092      	sub	sp, #72	; 0x48
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009692:	2300      	movs	r3, #0
 8009694:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80096a0:	f107 030c 	add.w	r3, r7, #12
 80096a4:	2230      	movs	r2, #48	; 0x30
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f00c fa35 	bl	8015b18 <memset>

  for(q = p; q != NULL; q = q->next)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	643b      	str	r3, [r7, #64]	; 0x40
 80096b2:	e045      	b.n	8009740 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 80096b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d902      	bls.n	80096c0 <low_level_output+0x38>
      return ERR_IF;
 80096ba:	f06f 030b 	mvn.w	r3, #11
 80096be:	e055      	b.n	800976c <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 80096c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c2:	6859      	ldr	r1, [r3, #4]
 80096c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096c6:	4613      	mov	r3, r2
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	3348      	adds	r3, #72	; 0x48
 80096d0:	443b      	add	r3, r7
 80096d2:	3b3c      	subs	r3, #60	; 0x3c
 80096d4:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80096d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d8:	895b      	ldrh	r3, [r3, #10]
 80096da:	4619      	mov	r1, r3
 80096dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096de:	4613      	mov	r3, r2
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	3348      	adds	r3, #72	; 0x48
 80096e8:	443b      	add	r3, r7
 80096ea:	3b38      	subs	r3, #56	; 0x38
 80096ec:	6019      	str	r1, [r3, #0]

    if(i>0)
 80096ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d011      	beq.n	8009718 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80096f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096f6:	1e5a      	subs	r2, r3, #1
 80096f8:	f107 000c 	add.w	r0, r7, #12
 80096fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096fe:	460b      	mov	r3, r1
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	440b      	add	r3, r1
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	18c1      	adds	r1, r0, r3
 8009708:	4613      	mov	r3, r2
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	4413      	add	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	3348      	adds	r3, #72	; 0x48
 8009712:	443b      	add	r3, r7
 8009714:	3b34      	subs	r3, #52	; 0x34
 8009716:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d109      	bne.n	8009734 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8009720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009722:	4613      	mov	r3, r2
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	4413      	add	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	3348      	adds	r3, #72	; 0x48
 800972c:	443b      	add	r3, r7
 800972e:	3b34      	subs	r3, #52	; 0x34
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009736:	3301      	adds	r3, #1
 8009738:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800973a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	643b      	str	r3, [r7, #64]	; 0x40
 8009740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1b6      	bne.n	80096b4 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	891b      	ldrh	r3, [r3, #8]
 800974a:	461a      	mov	r2, r3
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <low_level_output+0xec>)
 800974e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009750:	4a08      	ldr	r2, [pc, #32]	; (8009774 <low_level_output+0xec>)
 8009752:	f107 030c 	add.w	r3, r7, #12
 8009756:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009758:	4a06      	ldr	r2, [pc, #24]	; (8009774 <low_level_output+0xec>)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800975e:	2214      	movs	r2, #20
 8009760:	4904      	ldr	r1, [pc, #16]	; (8009774 <low_level_output+0xec>)
 8009762:	4805      	ldr	r0, [pc, #20]	; (8009778 <low_level_output+0xf0>)
 8009764:	f7f9 f908 	bl	8002978 <HAL_ETH_Transmit>

  return errval;
 8009768:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800976c:	4618      	mov	r0, r3
 800976e:	3748      	adds	r7, #72	; 0x48
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	200056c8 	.word	0x200056c8
 8009778:	20005618 	.word	0x20005618

0800977c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d106      	bne.n	8009798 <ethernetif_init+0x1c>
 800978a:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <ethernetif_init+0x48>)
 800978c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009790:	490d      	ldr	r1, [pc, #52]	; (80097c8 <ethernetif_init+0x4c>)
 8009792:	480e      	ldr	r0, [pc, #56]	; (80097cc <ethernetif_init+0x50>)
 8009794:	f00c f9c8 	bl	8015b28 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2273      	movs	r2, #115	; 0x73
 800979c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2274      	movs	r2, #116	; 0x74
 80097a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <ethernetif_init+0x54>)
 80097ac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a08      	ldr	r2, [pc, #32]	; (80097d4 <ethernetif_init+0x58>)
 80097b2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fecf 	bl	8009558 <low_level_init>

  return ERR_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	08016be8 	.word	0x08016be8
 80097c8:	08016c04 	.word	0x08016c04
 80097cc:	08016c14 	.word	0x08016c14
 80097d0:	08013d19 	.word	0x08013d19
 80097d4:	08009689 	.word	0x08009689

080097d8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80097e4:	68f9      	ldr	r1, [r7, #12]
 80097e6:	4808      	ldr	r0, [pc, #32]	; (8009808 <pbuf_free_custom+0x30>)
 80097e8:	f000 ff70 	bl	800a6cc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <pbuf_free_custom+0x34>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d105      	bne.n	8009800 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <pbuf_free_custom+0x34>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 80097fa:	4b05      	ldr	r3, [pc, #20]	; (8009810 <pbuf_free_custom+0x38>)
 80097fc:	2201      	movs	r2, #1
 80097fe:	601a      	str	r2, [r3, #0]
  }
}
 8009800:	bf00      	nop
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	08019988 	.word	0x08019988
 800980c:	200054d0 	.word	0x200054d0
 8009810:	200054d4 	.word	0x200054d4

08009814 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009818:	f7f8 fa4a 	bl	8001cb0 <HAL_GetTick>
 800981c:	4603      	mov	r3, r0
}
 800981e:	4618      	mov	r0, r3
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08e      	sub	sp, #56	; 0x38
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800982c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009830:	2200      	movs	r2, #0
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	605a      	str	r2, [r3, #4]
 8009836:	609a      	str	r2, [r3, #8]
 8009838:	60da      	str	r2, [r3, #12]
 800983a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a59      	ldr	r2, [pc, #356]	; (80099a8 <HAL_ETH_MspInit+0x184>)
 8009842:	4293      	cmp	r3, r2
 8009844:	f040 80ac 	bne.w	80099a0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009848:	2300      	movs	r3, #0
 800984a:	623b      	str	r3, [r7, #32]
 800984c:	4b57      	ldr	r3, [pc, #348]	; (80099ac <HAL_ETH_MspInit+0x188>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009850:	4a56      	ldr	r2, [pc, #344]	; (80099ac <HAL_ETH_MspInit+0x188>)
 8009852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009856:	6313      	str	r3, [r2, #48]	; 0x30
 8009858:	4b54      	ldr	r3, [pc, #336]	; (80099ac <HAL_ETH_MspInit+0x188>)
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009860:	623b      	str	r3, [r7, #32]
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	2300      	movs	r3, #0
 8009866:	61fb      	str	r3, [r7, #28]
 8009868:	4b50      	ldr	r3, [pc, #320]	; (80099ac <HAL_ETH_MspInit+0x188>)
 800986a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986c:	4a4f      	ldr	r2, [pc, #316]	; (80099ac <HAL_ETH_MspInit+0x188>)
 800986e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009872:	6313      	str	r3, [r2, #48]	; 0x30
 8009874:	4b4d      	ldr	r3, [pc, #308]	; (80099ac <HAL_ETH_MspInit+0x188>)
 8009876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800987c:	61fb      	str	r3, [r7, #28]
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	2300      	movs	r3, #0
 8009882:	61bb      	str	r3, [r7, #24]
 8009884:	4b49      	ldr	r3, [pc, #292]	; (80099ac <HAL_ETH_MspInit+0x188>)
 8009886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009888:	4a48      	ldr	r2, [pc, #288]	; (80099ac <HAL_ETH_MspInit+0x188>)
 800988a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800988e:	6313      	str	r3, [r2, #48]	; 0x30
 8009890:	4b46      	ldr	r3, [pc, #280]	; (80099ac <HAL_ETH_MspInit+0x188>)
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	4b42      	ldr	r3, [pc, #264]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	4a41      	ldr	r2, [pc, #260]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098a6:	f043 0304 	orr.w	r3, r3, #4
 80098aa:	6313      	str	r3, [r2, #48]	; 0x30
 80098ac:	4b3f      	ldr	r3, [pc, #252]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098b8:	2300      	movs	r3, #0
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	4b3b      	ldr	r3, [pc, #236]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c0:	4a3a      	ldr	r2, [pc, #232]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098c2:	f043 0301 	orr.w	r3, r3, #1
 80098c6:	6313      	str	r3, [r2, #48]	; 0x30
 80098c8:	4b38      	ldr	r3, [pc, #224]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	613b      	str	r3, [r7, #16]
 80098d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098d4:	2300      	movs	r3, #0
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	4b34      	ldr	r3, [pc, #208]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098dc:	4a33      	ldr	r2, [pc, #204]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098de:	f043 0302 	orr.w	r3, r3, #2
 80098e2:	6313      	str	r3, [r2, #48]	; 0x30
 80098e4:	4b31      	ldr	r3, [pc, #196]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	60fb      	str	r3, [r7, #12]
 80098ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80098f0:	2300      	movs	r3, #0
 80098f2:	60bb      	str	r3, [r7, #8]
 80098f4:	4b2d      	ldr	r3, [pc, #180]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f8:	4a2c      	ldr	r2, [pc, #176]	; (80099ac <HAL_ETH_MspInit+0x188>)
 80098fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098fe:	6313      	str	r3, [r2, #48]	; 0x30
 8009900:	4b2a      	ldr	r3, [pc, #168]	; (80099ac <HAL_ETH_MspInit+0x188>)
 8009902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009908:	60bb      	str	r3, [r7, #8]
 800990a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800990c:	2332      	movs	r3, #50	; 0x32
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009910:	2302      	movs	r3, #2
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009914:	2300      	movs	r3, #0
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009918:	2303      	movs	r3, #3
 800991a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800991c:	230b      	movs	r3, #11
 800991e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009924:	4619      	mov	r1, r3
 8009926:	4822      	ldr	r0, [pc, #136]	; (80099b0 <HAL_ETH_MspInit+0x18c>)
 8009928:	f7f9 fffa 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800992c:	2386      	movs	r3, #134	; 0x86
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009930:	2302      	movs	r3, #2
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009934:	2300      	movs	r3, #0
 8009936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009938:	2303      	movs	r3, #3
 800993a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800993c:	230b      	movs	r3, #11
 800993e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009944:	4619      	mov	r1, r3
 8009946:	481b      	ldr	r0, [pc, #108]	; (80099b4 <HAL_ETH_MspInit+0x190>)
 8009948:	f7f9 ffea 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800994c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009952:	2302      	movs	r3, #2
 8009954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009956:	2300      	movs	r3, #0
 8009958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800995a:	2303      	movs	r3, #3
 800995c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800995e:	230b      	movs	r3, #11
 8009960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8009962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009966:	4619      	mov	r1, r3
 8009968:	4813      	ldr	r0, [pc, #76]	; (80099b8 <HAL_ETH_MspInit+0x194>)
 800996a:	f7f9 ffd9 	bl	8003920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800996e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009974:	2302      	movs	r3, #2
 8009976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009978:	2300      	movs	r3, #0
 800997a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800997c:	2303      	movs	r3, #3
 800997e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009980:	230b      	movs	r3, #11
 8009982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009988:	4619      	mov	r1, r3
 800998a:	480c      	ldr	r0, [pc, #48]	; (80099bc <HAL_ETH_MspInit+0x198>)
 800998c:	f7f9 ffc8 	bl	8003920 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8009990:	2200      	movs	r2, #0
 8009992:	2100      	movs	r1, #0
 8009994:	203d      	movs	r0, #61	; 0x3d
 8009996:	f7f8 fa96 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800999a:	203d      	movs	r0, #61	; 0x3d
 800999c:	f7f8 faaf 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80099a0:	bf00      	nop
 80099a2:	3738      	adds	r7, #56	; 0x38
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	40028000 	.word	0x40028000
 80099ac:	40023800 	.word	0x40023800
 80099b0:	40020800 	.word	0x40020800
 80099b4:	40020000 	.word	0x40020000
 80099b8:	40020400 	.word	0x40020400
 80099bc:	40021800 	.word	0x40021800

080099c0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80099c4:	4802      	ldr	r0, [pc, #8]	; (80099d0 <ETH_PHY_IO_Init+0x10>)
 80099c6:	f7f9 fb63 	bl	8003090 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20005618 	.word	0x20005618

080099d4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
  return 0;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	68f9      	ldr	r1, [r7, #12]
 80099f6:	4807      	ldr	r0, [pc, #28]	; (8009a14 <ETH_PHY_IO_ReadReg+0x30>)
 80099f8:	f7f9 f9b8 	bl	8002d6c <HAL_ETH_ReadPHYRegister>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009a02:	f04f 33ff 	mov.w	r3, #4294967295
 8009a06:	e000      	b.n	8009a0a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20005618 	.word	0x20005618

08009a18 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	68f9      	ldr	r1, [r7, #12]
 8009a2a:	4807      	ldr	r0, [pc, #28]	; (8009a48 <ETH_PHY_IO_WriteReg+0x30>)
 8009a2c:	f7f9 f9e9 	bl	8002e02 <HAL_ETH_WritePHYRegister>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d002      	beq.n	8009a3c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009a36:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3a:	e000      	b.n	8009a3e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20005618 	.word	0x20005618

08009a4c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009a50:	f7f8 f92e 	bl	8001cb0 <HAL_GetTick>
 8009a54:	4603      	mov	r3, r0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b0a0      	sub	sp, #128	; 0x80
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009a64:	f107 030c 	add.w	r3, r7, #12
 8009a68:	2264      	movs	r2, #100	; 0x64
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f00c f853 	bl	8015b18 <memset>
  int32_t PHYLinkState = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a7e:	2300      	movs	r3, #0
 8009a80:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009a82:	483a      	ldr	r0, [pc, #232]	; (8009b6c <ethernet_link_check_state+0x110>)
 8009a84:	f7f8 f827 	bl	8001ad6 <LAN8742_GetLinkState>
 8009a88:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009a90:	089b      	lsrs	r3, r3, #2
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00c      	beq.n	8009ab6 <ethernet_link_check_state+0x5a>
 8009a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	dc09      	bgt.n	8009ab6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8009aa2:	4833      	ldr	r0, [pc, #204]	; (8009b70 <ethernet_link_check_state+0x114>)
 8009aa4:	f7f8 ff29 	bl	80028fa <HAL_ETH_Stop>
    netif_set_down(netif);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 f89b 	bl	800abe4 <netif_set_down>
    netif_set_link_down(netif);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 f902 	bl	800acb8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009ab4:	e055      	b.n	8009b62 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d14e      	bne.n	8009b62 <ethernet_link_check_state+0x106>
 8009ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	dd4b      	ble.n	8009b62 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009acc:	3b02      	subs	r3, #2
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d82a      	bhi.n	8009b28 <ethernet_link_check_state+0xcc>
 8009ad2:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <ethernet_link_check_state+0x7c>)
 8009ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad8:	08009ae9 	.word	0x08009ae9
 8009adc:	08009afb 	.word	0x08009afb
 8009ae0:	08009b0b 	.word	0x08009b0b
 8009ae4:	08009b1b 	.word	0x08009b1b
      duplex = ETH_FULLDUPLEX_MODE;
 8009ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009aec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009aee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009af2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009af4:	2301      	movs	r3, #1
 8009af6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009af8:	e017      	b.n	8009b2a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009afe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b02:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b04:	2301      	movs	r3, #1
 8009b06:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009b08:	e00f      	b.n	8009b2a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8009b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b0e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009b10:	2300      	movs	r3, #0
 8009b12:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b14:	2301      	movs	r3, #1
 8009b16:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009b18:	e007      	b.n	8009b2a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b22:	2301      	movs	r3, #1
 8009b24:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009b26:	e000      	b.n	8009b2a <ethernet_link_check_state+0xce>
      break;
 8009b28:	bf00      	nop
    if(linkchanged)
 8009b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d018      	beq.n	8009b62 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009b30:	f107 030c 	add.w	r3, r7, #12
 8009b34:	4619      	mov	r1, r3
 8009b36:	480e      	ldr	r0, [pc, #56]	; (8009b70 <ethernet_link_check_state+0x114>)
 8009b38:	f7f9 f9ac 	bl	8002e94 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8009b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b42:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009b44:	f107 030c 	add.w	r3, r7, #12
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4809      	ldr	r0, [pc, #36]	; (8009b70 <ethernet_link_check_state+0x114>)
 8009b4c:	f7f9 fa85 	bl	800305a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009b50:	4807      	ldr	r0, [pc, #28]	; (8009b70 <ethernet_link_check_state+0x114>)
 8009b52:	f7f8 fe89 	bl	8002868 <HAL_ETH_Start>
      netif_set_up(netif);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 ffd8 	bl	800ab0c <netif_set_up>
      netif_set_link_up(netif);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 f873 	bl	800ac48 <netif_set_link_up>
}
 8009b62:	bf00      	nop
 8009b64:	3780      	adds	r7, #128	; 0x80
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20005700 	.word	0x20005700
 8009b70:	20005618 	.word	0x20005618

08009b74 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009b7c:	4812      	ldr	r0, [pc, #72]	; (8009bc8 <HAL_ETH_RxAllocateCallback+0x54>)
 8009b7e:	f000 fd37 	bl	800a5f0 <memp_malloc_pool>
 8009b82:	60f8      	str	r0, [r7, #12]
  if (p)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d014      	beq.n	8009bb4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f103 0220 	add.w	r2, r3, #32
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4a0d      	ldr	r2, [pc, #52]	; (8009bcc <HAL_ETH_RxAllocateCallback+0x58>)
 8009b98:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009ba2:	9201      	str	r2, [sp, #4]
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2241      	movs	r2, #65	; 0x41
 8009baa:	2100      	movs	r1, #0
 8009bac:	2000      	movs	r0, #0
 8009bae:	f001 fa59 	bl	800b064 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009bb2:	e005      	b.n	8009bc0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009bb4:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]
}
 8009bc0:	bf00      	nop
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	08019988 	.word	0x08019988
 8009bcc:	080097d9 	.word	0x080097d9
 8009bd0:	200054d0 	.word	0x200054d0

08009bd4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	021b      	lsls	r3, r3, #8
 8009be2:	b21a      	sxth	r2, r3
 8009be4:	88fb      	ldrh	r3, [r7, #6]
 8009be6:	0a1b      	lsrs	r3, r3, #8
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	b21b      	sxth	r3, r3
 8009bec:	4313      	orrs	r3, r2
 8009bee:	b21b      	sxth	r3, r3
 8009bf0:	b29b      	uxth	r3, r3
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	061a      	lsls	r2, r3, #24
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c12:	431a      	orrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	0a1b      	lsrs	r3, r3, #8
 8009c18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	0e1b      	lsrs	r3, r3, #24
 8009c22:	4313      	orrs	r3, r2
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b089      	sub	sp, #36	; 0x24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00d      	beq.n	8009c70 <lwip_standard_chksum+0x40>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dd0a      	ble.n	8009c70 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8009c5a:	69fa      	ldr	r2, [r7, #28]
 8009c5c:	1c53      	adds	r3, r2, #1
 8009c5e:	61fb      	str	r3, [r7, #28]
 8009c60:	f107 030e 	add.w	r3, r7, #14
 8009c64:	3301      	adds	r3, #1
 8009c66:	7812      	ldrb	r2, [r2, #0]
 8009c68:	701a      	strb	r2, [r3, #0]
    len--;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009c74:	e00a      	b.n	8009c8c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	1c9a      	adds	r2, r3, #2
 8009c7a:	61ba      	str	r2, [r7, #24]
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	4413      	add	r3, r2
 8009c84:	617b      	str	r3, [r7, #20]
    len -= 2;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	3b02      	subs	r3, #2
 8009c8a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	dcf1      	bgt.n	8009c76 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dd04      	ble.n	8009ca2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009c98:	f107 030e 	add.w	r3, r7, #14
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	7812      	ldrb	r2, [r2, #0]
 8009ca0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8009ca2:	89fb      	ldrh	r3, [r7, #14]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	4413      	add	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	0c1a      	lsrs	r2, r3, #16
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	0c1a      	lsrs	r2, r3, #16
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	4413      	add	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	021b      	lsls	r3, r3, #8
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	0a1b      	lsrs	r3, r3, #8
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	b29b      	uxth	r3, r3
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3724      	adds	r7, #36	; 0x24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009cf6:	887b      	ldrh	r3, [r7, #2]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff ff98 	bl	8009c30 <lwip_standard_chksum>
 8009d00:	4603      	mov	r3, r0
 8009d02:	43db      	mvns	r3, r3
 8009d04:	b29b      	uxth	r3, r3
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b086      	sub	sp, #24
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	e02b      	b.n	8009d7c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	895b      	ldrh	r3, [r3, #10]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4610      	mov	r0, r2
 8009d30:	f7ff ff7e 	bl	8009c30 <lwip_standard_chksum>
 8009d34:	4603      	mov	r3, r0
 8009d36:	461a      	mov	r2, r3
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	0c1a      	lsrs	r2, r3, #16
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4413      	add	r3, r2
 8009d48:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	895b      	ldrh	r3, [r3, #10]
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00e      	beq.n	8009d76 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	bf0c      	ite	eq
 8009d5e:	2301      	moveq	r3, #1
 8009d60:	2300      	movne	r3, #0
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	021b      	lsls	r3, r3, #8
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	0a1b      	lsrs	r3, r3, #8
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	4313      	orrs	r3, r2
 8009d74:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	613b      	str	r3, [r7, #16]
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1d0      	bne.n	8009d24 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d007      	beq.n	8009d98 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	0a1b      	lsrs	r3, r3, #8
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	4313      	orrs	r3, r2
 8009d96:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	b29b      	uxth	r3, r3
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009db2:	f000 f8d5 	bl	8009f60 <mem_init>
  memp_init();
 8009db6:	f000 fbd7 	bl	800a568 <memp_init>
  pbuf_init();
  netif_init();
 8009dba:	f000 fcd5 	bl	800a768 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009dbe:	f007 f80d 	bl	8010ddc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009dc2:	f001 fda7 	bl	800b914 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009dc6:	f006 ffc1 	bl	8010d4c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009dde:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <ptr_to_mem+0x20>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	4413      	add	r3, r2
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20005738 	.word	0x20005738

08009df8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009e00:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <mem_to_ptr+0x20>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	b29b      	uxth	r3, r3
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20005738 	.word	0x20005738

08009e1c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009e24:	4b45      	ldr	r3, [pc, #276]	; (8009f3c <plug_holes+0x120>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d206      	bcs.n	8009e3c <plug_holes+0x20>
 8009e2e:	4b44      	ldr	r3, [pc, #272]	; (8009f40 <plug_holes+0x124>)
 8009e30:	f240 12df 	movw	r2, #479	; 0x1df
 8009e34:	4943      	ldr	r1, [pc, #268]	; (8009f44 <plug_holes+0x128>)
 8009e36:	4844      	ldr	r0, [pc, #272]	; (8009f48 <plug_holes+0x12c>)
 8009e38:	f00b fe76 	bl	8015b28 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009e3c:	4b43      	ldr	r3, [pc, #268]	; (8009f4c <plug_holes+0x130>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d306      	bcc.n	8009e54 <plug_holes+0x38>
 8009e46:	4b3e      	ldr	r3, [pc, #248]	; (8009f40 <plug_holes+0x124>)
 8009e48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009e4c:	4940      	ldr	r1, [pc, #256]	; (8009f50 <plug_holes+0x134>)
 8009e4e:	483e      	ldr	r0, [pc, #248]	; (8009f48 <plug_holes+0x12c>)
 8009e50:	f00b fe6a 	bl	8015b28 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	791b      	ldrb	r3, [r3, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d006      	beq.n	8009e6a <plug_holes+0x4e>
 8009e5c:	4b38      	ldr	r3, [pc, #224]	; (8009f40 <plug_holes+0x124>)
 8009e5e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009e62:	493c      	ldr	r1, [pc, #240]	; (8009f54 <plug_holes+0x138>)
 8009e64:	4838      	ldr	r0, [pc, #224]	; (8009f48 <plug_holes+0x12c>)
 8009e66:	f00b fe5f 	bl	8015b28 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e72:	d906      	bls.n	8009e82 <plug_holes+0x66>
 8009e74:	4b32      	ldr	r3, [pc, #200]	; (8009f40 <plug_holes+0x124>)
 8009e76:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009e7a:	4937      	ldr	r1, [pc, #220]	; (8009f58 <plug_holes+0x13c>)
 8009e7c:	4832      	ldr	r0, [pc, #200]	; (8009f48 <plug_holes+0x12c>)
 8009e7e:	f00b fe53 	bl	8015b28 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff ffa4 	bl	8009dd4 <ptr_to_mem>
 8009e8c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d024      	beq.n	8009ee0 <plug_holes+0xc4>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	791b      	ldrb	r3, [r3, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d120      	bne.n	8009ee0 <plug_holes+0xc4>
 8009e9e:	4b2b      	ldr	r3, [pc, #172]	; (8009f4c <plug_holes+0x130>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d01b      	beq.n	8009ee0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009ea8:	4b2c      	ldr	r3, [pc, #176]	; (8009f5c <plug_holes+0x140>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d102      	bne.n	8009eb8 <plug_holes+0x9c>
      lfree = mem;
 8009eb2:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <plug_holes+0x140>)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	881a      	ldrh	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ec8:	d00a      	beq.n	8009ee0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff ff80 	bl	8009dd4 <ptr_to_mem>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff ff8e 	bl	8009df8 <mem_to_ptr>
 8009edc:	4603      	mov	r3, r0
 8009ede:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	885b      	ldrh	r3, [r3, #2]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff ff75 	bl	8009dd4 <ptr_to_mem>
 8009eea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d01f      	beq.n	8009f34 <plug_holes+0x118>
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	791b      	ldrb	r3, [r3, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d11b      	bne.n	8009f34 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009efc:	4b17      	ldr	r3, [pc, #92]	; (8009f5c <plug_holes+0x140>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d102      	bne.n	8009f0c <plug_holes+0xf0>
      lfree = pmem;
 8009f06:	4a15      	ldr	r2, [pc, #84]	; (8009f5c <plug_holes+0x140>)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	881a      	ldrh	r2, [r3, #0]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f1c:	d00a      	beq.n	8009f34 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff ff56 	bl	8009dd4 <ptr_to_mem>
 8009f28:	4604      	mov	r4, r0
 8009f2a:	68b8      	ldr	r0, [r7, #8]
 8009f2c:	f7ff ff64 	bl	8009df8 <mem_to_ptr>
 8009f30:	4603      	mov	r3, r0
 8009f32:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd90      	pop	{r4, r7, pc}
 8009f3c:	20005738 	.word	0x20005738
 8009f40:	08016c3c 	.word	0x08016c3c
 8009f44:	08016c6c 	.word	0x08016c6c
 8009f48:	08016c84 	.word	0x08016c84
 8009f4c:	2000573c 	.word	0x2000573c
 8009f50:	08016cac 	.word	0x08016cac
 8009f54:	08016cc8 	.word	0x08016cc8
 8009f58:	08016ce4 	.word	0x08016ce4
 8009f5c:	20005740 	.word	0x20005740

08009f60 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009f66:	4b16      	ldr	r3, [pc, #88]	; (8009fc0 <mem_init+0x60>)
 8009f68:	4a16      	ldr	r2, [pc, #88]	; (8009fc4 <mem_init+0x64>)
 8009f6a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009f6c:	4b14      	ldr	r3, [pc, #80]	; (8009fc0 <mem_init+0x60>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009f78:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009f86:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009f8a:	f7ff ff23 	bl	8009dd4 <ptr_to_mem>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4a0d      	ldr	r2, [pc, #52]	; (8009fc8 <mem_init+0x68>)
 8009f92:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009f94:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <mem_init+0x68>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <mem_init+0x68>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009fa4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009fa6:	4b08      	ldr	r3, [pc, #32]	; (8009fc8 <mem_init+0x68>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009fae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009fb0:	4b03      	ldr	r3, [pc, #12]	; (8009fc0 <mem_init+0x60>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a05      	ldr	r2, [pc, #20]	; (8009fcc <mem_init+0x6c>)
 8009fb6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20005738 	.word	0x20005738
 8009fc4:	30044000 	.word	0x30044000
 8009fc8:	2000573c 	.word	0x2000573c
 8009fcc:	20005740 	.word	0x20005740

08009fd0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff ff0d 	bl	8009df8 <mem_to_ptr>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff fef4 	bl	8009dd4 <ptr_to_mem>
 8009fec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	885b      	ldrh	r3, [r3, #2]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff feee 	bl	8009dd4 <ptr_to_mem>
 8009ff8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a002:	d818      	bhi.n	800a036 <mem_link_valid+0x66>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	885b      	ldrh	r3, [r3, #2]
 800a008:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a00c:	d813      	bhi.n	800a036 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a012:	8afa      	ldrh	r2, [r7, #22]
 800a014:	429a      	cmp	r2, r3
 800a016:	d004      	beq.n	800a022 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	8afa      	ldrh	r2, [r7, #22]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d109      	bne.n	800a036 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a022:	4b08      	ldr	r3, [pc, #32]	; (800a044 <mem_link_valid+0x74>)
 800a024:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d006      	beq.n	800a03a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	885b      	ldrh	r3, [r3, #2]
 800a030:	8afa      	ldrh	r2, [r7, #22]
 800a032:	429a      	cmp	r2, r3
 800a034:	d001      	beq.n	800a03a <mem_link_valid+0x6a>
    return 0;
 800a036:	2300      	movs	r3, #0
 800a038:	e000      	b.n	800a03c <mem_link_valid+0x6c>
  }
  return 1;
 800a03a:	2301      	movs	r3, #1
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	2000573c 	.word	0x2000573c

0800a048 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d04c      	beq.n	800a0f0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f003 0303 	and.w	r3, r3, #3
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d007      	beq.n	800a070 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a060:	4b25      	ldr	r3, [pc, #148]	; (800a0f8 <mem_free+0xb0>)
 800a062:	f240 2273 	movw	r2, #627	; 0x273
 800a066:	4925      	ldr	r1, [pc, #148]	; (800a0fc <mem_free+0xb4>)
 800a068:	4825      	ldr	r0, [pc, #148]	; (800a100 <mem_free+0xb8>)
 800a06a:	f00b fd5d 	bl	8015b28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a06e:	e040      	b.n	800a0f2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3b08      	subs	r3, #8
 800a074:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a076:	4b23      	ldr	r3, [pc, #140]	; (800a104 <mem_free+0xbc>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d306      	bcc.n	800a08e <mem_free+0x46>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 020c 	add.w	r2, r3, #12
 800a086:	4b20      	ldr	r3, [pc, #128]	; (800a108 <mem_free+0xc0>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d907      	bls.n	800a09e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a08e:	4b1a      	ldr	r3, [pc, #104]	; (800a0f8 <mem_free+0xb0>)
 800a090:	f240 227f 	movw	r2, #639	; 0x27f
 800a094:	491d      	ldr	r1, [pc, #116]	; (800a10c <mem_free+0xc4>)
 800a096:	481a      	ldr	r0, [pc, #104]	; (800a100 <mem_free+0xb8>)
 800a098:	f00b fd46 	bl	8015b28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a09c:	e029      	b.n	800a0f2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	791b      	ldrb	r3, [r3, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a0a6:	4b14      	ldr	r3, [pc, #80]	; (800a0f8 <mem_free+0xb0>)
 800a0a8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a0ac:	4918      	ldr	r1, [pc, #96]	; (800a110 <mem_free+0xc8>)
 800a0ae:	4814      	ldr	r0, [pc, #80]	; (800a100 <mem_free+0xb8>)
 800a0b0:	f00b fd3a 	bl	8015b28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a0b4:	e01d      	b.n	800a0f2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff ff8a 	bl	8009fd0 <mem_link_valid>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d107      	bne.n	800a0d2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <mem_free+0xb0>)
 800a0c4:	f240 2295 	movw	r2, #661	; 0x295
 800a0c8:	4912      	ldr	r1, [pc, #72]	; (800a114 <mem_free+0xcc>)
 800a0ca:	480d      	ldr	r0, [pc, #52]	; (800a100 <mem_free+0xb8>)
 800a0cc:	f00b fd2c 	bl	8015b28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a0d0:	e00f      	b.n	800a0f2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a0d8:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <mem_free+0xd0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d202      	bcs.n	800a0e8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a0e2:	4a0d      	ldr	r2, [pc, #52]	; (800a118 <mem_free+0xd0>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f7ff fe97 	bl	8009e1c <plug_holes>
 800a0ee:	e000      	b.n	800a0f2 <mem_free+0xaa>
    return;
 800a0f0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	08016c3c 	.word	0x08016c3c
 800a0fc:	08016d10 	.word	0x08016d10
 800a100:	08016c84 	.word	0x08016c84
 800a104:	20005738 	.word	0x20005738
 800a108:	2000573c 	.word	0x2000573c
 800a10c:	08016d34 	.word	0x08016d34
 800a110:	08016d50 	.word	0x08016d50
 800a114:	08016d78 	.word	0x08016d78
 800a118:	20005740 	.word	0x20005740

0800a11c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a128:	887b      	ldrh	r3, [r7, #2]
 800a12a:	3303      	adds	r3, #3
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a134:	8bfb      	ldrh	r3, [r7, #30]
 800a136:	2b0b      	cmp	r3, #11
 800a138:	d801      	bhi.n	800a13e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a13a:	230c      	movs	r3, #12
 800a13c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a13e:	8bfb      	ldrh	r3, [r7, #30]
 800a140:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a144:	d803      	bhi.n	800a14e <mem_trim+0x32>
 800a146:	8bfa      	ldrh	r2, [r7, #30]
 800a148:	887b      	ldrh	r3, [r7, #2]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d201      	bcs.n	800a152 <mem_trim+0x36>
    return NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	e0cc      	b.n	800a2ec <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a152:	4b68      	ldr	r3, [pc, #416]	; (800a2f4 <mem_trim+0x1d8>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d304      	bcc.n	800a166 <mem_trim+0x4a>
 800a15c:	4b66      	ldr	r3, [pc, #408]	; (800a2f8 <mem_trim+0x1dc>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	429a      	cmp	r2, r3
 800a164:	d306      	bcc.n	800a174 <mem_trim+0x58>
 800a166:	4b65      	ldr	r3, [pc, #404]	; (800a2fc <mem_trim+0x1e0>)
 800a168:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a16c:	4964      	ldr	r1, [pc, #400]	; (800a300 <mem_trim+0x1e4>)
 800a16e:	4865      	ldr	r0, [pc, #404]	; (800a304 <mem_trim+0x1e8>)
 800a170:	f00b fcda 	bl	8015b28 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a174:	4b5f      	ldr	r3, [pc, #380]	; (800a2f4 <mem_trim+0x1d8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d304      	bcc.n	800a188 <mem_trim+0x6c>
 800a17e:	4b5e      	ldr	r3, [pc, #376]	; (800a2f8 <mem_trim+0x1dc>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d301      	bcc.n	800a18c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	e0af      	b.n	800a2ec <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3b08      	subs	r3, #8
 800a190:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a192:	69b8      	ldr	r0, [r7, #24]
 800a194:	f7ff fe30 	bl	8009df8 <mem_to_ptr>
 800a198:	4603      	mov	r3, r0
 800a19a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	881a      	ldrh	r2, [r3, #0]
 800a1a0:	8afb      	ldrh	r3, [r7, #22]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	3b08      	subs	r3, #8
 800a1a8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a1aa:	8bfa      	ldrh	r2, [r7, #30]
 800a1ac:	8abb      	ldrh	r3, [r7, #20]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d906      	bls.n	800a1c0 <mem_trim+0xa4>
 800a1b2:	4b52      	ldr	r3, [pc, #328]	; (800a2fc <mem_trim+0x1e0>)
 800a1b4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a1b8:	4953      	ldr	r1, [pc, #332]	; (800a308 <mem_trim+0x1ec>)
 800a1ba:	4852      	ldr	r0, [pc, #328]	; (800a304 <mem_trim+0x1e8>)
 800a1bc:	f00b fcb4 	bl	8015b28 <iprintf>
  if (newsize > size) {
 800a1c0:	8bfa      	ldrh	r2, [r7, #30]
 800a1c2:	8abb      	ldrh	r3, [r7, #20]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d901      	bls.n	800a1cc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e08f      	b.n	800a2ec <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a1cc:	8bfa      	ldrh	r2, [r7, #30]
 800a1ce:	8abb      	ldrh	r3, [r7, #20]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d101      	bne.n	800a1d8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	e089      	b.n	800a2ec <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff fdf9 	bl	8009dd4 <ptr_to_mem>
 800a1e2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	791b      	ldrb	r3, [r3, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d13f      	bne.n	800a26c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1f4:	d106      	bne.n	800a204 <mem_trim+0xe8>
 800a1f6:	4b41      	ldr	r3, [pc, #260]	; (800a2fc <mem_trim+0x1e0>)
 800a1f8:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a1fc:	4943      	ldr	r1, [pc, #268]	; (800a30c <mem_trim+0x1f0>)
 800a1fe:	4841      	ldr	r0, [pc, #260]	; (800a304 <mem_trim+0x1e8>)
 800a200:	f00b fc92 	bl	8015b28 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a20a:	8afa      	ldrh	r2, [r7, #22]
 800a20c:	8bfb      	ldrh	r3, [r7, #30]
 800a20e:	4413      	add	r3, r2
 800a210:	b29b      	uxth	r3, r3
 800a212:	3308      	adds	r3, #8
 800a214:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a216:	4b3e      	ldr	r3, [pc, #248]	; (800a310 <mem_trim+0x1f4>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d106      	bne.n	800a22e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a220:	89fb      	ldrh	r3, [r7, #14]
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff fdd6 	bl	8009dd4 <ptr_to_mem>
 800a228:	4603      	mov	r3, r0
 800a22a:	4a39      	ldr	r2, [pc, #228]	; (800a310 <mem_trim+0x1f4>)
 800a22c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a22e:	89fb      	ldrh	r3, [r7, #14]
 800a230:	4618      	mov	r0, r3
 800a232:	f7ff fdcf 	bl	8009dd4 <ptr_to_mem>
 800a236:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	2200      	movs	r2, #0
 800a23c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	89ba      	ldrh	r2, [r7, #12]
 800a242:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	8afa      	ldrh	r2, [r7, #22]
 800a248:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	89fa      	ldrh	r2, [r7, #14]
 800a24e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a258:	d047      	beq.n	800a2ea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f7ff fdb8 	bl	8009dd4 <ptr_to_mem>
 800a264:	4602      	mov	r2, r0
 800a266:	89fb      	ldrh	r3, [r7, #14]
 800a268:	8053      	strh	r3, [r2, #2]
 800a26a:	e03e      	b.n	800a2ea <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a26c:	8bfb      	ldrh	r3, [r7, #30]
 800a26e:	f103 0214 	add.w	r2, r3, #20
 800a272:	8abb      	ldrh	r3, [r7, #20]
 800a274:	429a      	cmp	r2, r3
 800a276:	d838      	bhi.n	800a2ea <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a278:	8afa      	ldrh	r2, [r7, #22]
 800a27a:	8bfb      	ldrh	r3, [r7, #30]
 800a27c:	4413      	add	r3, r2
 800a27e:	b29b      	uxth	r3, r3
 800a280:	3308      	adds	r3, #8
 800a282:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a28c:	d106      	bne.n	800a29c <mem_trim+0x180>
 800a28e:	4b1b      	ldr	r3, [pc, #108]	; (800a2fc <mem_trim+0x1e0>)
 800a290:	f240 3216 	movw	r2, #790	; 0x316
 800a294:	491d      	ldr	r1, [pc, #116]	; (800a30c <mem_trim+0x1f0>)
 800a296:	481b      	ldr	r0, [pc, #108]	; (800a304 <mem_trim+0x1e8>)
 800a298:	f00b fc46 	bl	8015b28 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a29c:	89fb      	ldrh	r3, [r7, #14]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff fd98 	bl	8009dd4 <ptr_to_mem>
 800a2a4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a2a6:	4b1a      	ldr	r3, [pc, #104]	; (800a310 <mem_trim+0x1f4>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d202      	bcs.n	800a2b6 <mem_trim+0x19a>
      lfree = mem2;
 800a2b0:	4a17      	ldr	r2, [pc, #92]	; (800a310 <mem_trim+0x1f4>)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	881a      	ldrh	r2, [r3, #0]
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	8afa      	ldrh	r2, [r7, #22]
 800a2c8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	89fa      	ldrh	r2, [r7, #14]
 800a2ce:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2d8:	d007      	beq.n	800a2ea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff fd78 	bl	8009dd4 <ptr_to_mem>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	89fb      	ldrh	r3, [r7, #14]
 800a2e8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a2ea:	687b      	ldr	r3, [r7, #4]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3720      	adds	r7, #32
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	20005738 	.word	0x20005738
 800a2f8:	2000573c 	.word	0x2000573c
 800a2fc:	08016c3c 	.word	0x08016c3c
 800a300:	08016dac 	.word	0x08016dac
 800a304:	08016c84 	.word	0x08016c84
 800a308:	08016dc4 	.word	0x08016dc4
 800a30c:	08016de4 	.word	0x08016de4
 800a310:	20005740 	.word	0x20005740

0800a314 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b088      	sub	sp, #32
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a31e:	88fb      	ldrh	r3, [r7, #6]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <mem_malloc+0x14>
    return NULL;
 800a324:	2300      	movs	r3, #0
 800a326:	e0d9      	b.n	800a4dc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a328:	88fb      	ldrh	r3, [r7, #6]
 800a32a:	3303      	adds	r3, #3
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	f023 0303 	bic.w	r3, r3, #3
 800a332:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a334:	8bbb      	ldrh	r3, [r7, #28]
 800a336:	2b0b      	cmp	r3, #11
 800a338:	d801      	bhi.n	800a33e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a33a:	230c      	movs	r3, #12
 800a33c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a33e:	8bbb      	ldrh	r3, [r7, #28]
 800a340:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a344:	d803      	bhi.n	800a34e <mem_malloc+0x3a>
 800a346:	8bba      	ldrh	r2, [r7, #28]
 800a348:	88fb      	ldrh	r3, [r7, #6]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d201      	bcs.n	800a352 <mem_malloc+0x3e>
    return NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	e0c4      	b.n	800a4dc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a352:	4b64      	ldr	r3, [pc, #400]	; (800a4e4 <mem_malloc+0x1d0>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff fd4e 	bl	8009df8 <mem_to_ptr>
 800a35c:	4603      	mov	r3, r0
 800a35e:	83fb      	strh	r3, [r7, #30]
 800a360:	e0b4      	b.n	800a4cc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a362:	8bfb      	ldrh	r3, [r7, #30]
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff fd35 	bl	8009dd4 <ptr_to_mem>
 800a36a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	791b      	ldrb	r3, [r3, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f040 80a4 	bne.w	800a4be <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	8bfb      	ldrh	r3, [r7, #30]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	f1a3 0208 	sub.w	r2, r3, #8
 800a384:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a386:	429a      	cmp	r2, r3
 800a388:	f0c0 8099 	bcc.w	800a4be <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
 800a392:	8bfb      	ldrh	r3, [r7, #30]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	f1a3 0208 	sub.w	r2, r3, #8
 800a39a:	8bbb      	ldrh	r3, [r7, #28]
 800a39c:	3314      	adds	r3, #20
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d333      	bcc.n	800a40a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a3a2:	8bfa      	ldrh	r2, [r7, #30]
 800a3a4:	8bbb      	ldrh	r3, [r7, #28]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	3308      	adds	r3, #8
 800a3ac:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a3ae:	8a7b      	ldrh	r3, [r7, #18]
 800a3b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3b4:	d106      	bne.n	800a3c4 <mem_malloc+0xb0>
 800a3b6:	4b4c      	ldr	r3, [pc, #304]	; (800a4e8 <mem_malloc+0x1d4>)
 800a3b8:	f240 3287 	movw	r2, #903	; 0x387
 800a3bc:	494b      	ldr	r1, [pc, #300]	; (800a4ec <mem_malloc+0x1d8>)
 800a3be:	484c      	ldr	r0, [pc, #304]	; (800a4f0 <mem_malloc+0x1dc>)
 800a3c0:	f00b fbb2 	bl	8015b28 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a3c4:	8a7b      	ldrh	r3, [r7, #18]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff fd04 	bl	8009dd4 <ptr_to_mem>
 800a3cc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	881a      	ldrh	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	8bfa      	ldrh	r2, [r7, #30]
 800a3e0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	8a7a      	ldrh	r2, [r7, #18]
 800a3e6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3f6:	d00b      	beq.n	800a410 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff fce9 	bl	8009dd4 <ptr_to_mem>
 800a402:	4602      	mov	r2, r0
 800a404:	8a7b      	ldrh	r3, [r7, #18]
 800a406:	8053      	strh	r3, [r2, #2]
 800a408:	e002      	b.n	800a410 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2201      	movs	r2, #1
 800a40e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a410:	4b34      	ldr	r3, [pc, #208]	; (800a4e4 <mem_malloc+0x1d0>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	429a      	cmp	r2, r3
 800a418:	d127      	bne.n	800a46a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a41a:	4b32      	ldr	r3, [pc, #200]	; (800a4e4 <mem_malloc+0x1d0>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a420:	e005      	b.n	800a42e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	4618      	mov	r0, r3
 800a428:	f7ff fcd4 	bl	8009dd4 <ptr_to_mem>
 800a42c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	791b      	ldrb	r3, [r3, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d004      	beq.n	800a440 <mem_malloc+0x12c>
 800a436:	4b2f      	ldr	r3, [pc, #188]	; (800a4f4 <mem_malloc+0x1e0>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d1f0      	bne.n	800a422 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a440:	4a28      	ldr	r2, [pc, #160]	; (800a4e4 <mem_malloc+0x1d0>)
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a446:	4b27      	ldr	r3, [pc, #156]	; (800a4e4 <mem_malloc+0x1d0>)
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4b2a      	ldr	r3, [pc, #168]	; (800a4f4 <mem_malloc+0x1e0>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d00b      	beq.n	800a46a <mem_malloc+0x156>
 800a452:	4b24      	ldr	r3, [pc, #144]	; (800a4e4 <mem_malloc+0x1d0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	791b      	ldrb	r3, [r3, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d006      	beq.n	800a46a <mem_malloc+0x156>
 800a45c:	4b22      	ldr	r3, [pc, #136]	; (800a4e8 <mem_malloc+0x1d4>)
 800a45e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a462:	4925      	ldr	r1, [pc, #148]	; (800a4f8 <mem_malloc+0x1e4>)
 800a464:	4822      	ldr	r0, [pc, #136]	; (800a4f0 <mem_malloc+0x1dc>)
 800a466:	f00b fb5f 	bl	8015b28 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a46a:	8bba      	ldrh	r2, [r7, #28]
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	4413      	add	r3, r2
 800a470:	3308      	adds	r3, #8
 800a472:	4a20      	ldr	r2, [pc, #128]	; (800a4f4 <mem_malloc+0x1e0>)
 800a474:	6812      	ldr	r2, [r2, #0]
 800a476:	4293      	cmp	r3, r2
 800a478:	d906      	bls.n	800a488 <mem_malloc+0x174>
 800a47a:	4b1b      	ldr	r3, [pc, #108]	; (800a4e8 <mem_malloc+0x1d4>)
 800a47c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a480:	491e      	ldr	r1, [pc, #120]	; (800a4fc <mem_malloc+0x1e8>)
 800a482:	481b      	ldr	r0, [pc, #108]	; (800a4f0 <mem_malloc+0x1dc>)
 800a484:	f00b fb50 	bl	8015b28 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f003 0303 	and.w	r3, r3, #3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d006      	beq.n	800a4a0 <mem_malloc+0x18c>
 800a492:	4b15      	ldr	r3, [pc, #84]	; (800a4e8 <mem_malloc+0x1d4>)
 800a494:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a498:	4919      	ldr	r1, [pc, #100]	; (800a500 <mem_malloc+0x1ec>)
 800a49a:	4815      	ldr	r0, [pc, #84]	; (800a4f0 <mem_malloc+0x1dc>)
 800a49c:	f00b fb44 	bl	8015b28 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	f003 0303 	and.w	r3, r3, #3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d006      	beq.n	800a4b8 <mem_malloc+0x1a4>
 800a4aa:	4b0f      	ldr	r3, [pc, #60]	; (800a4e8 <mem_malloc+0x1d4>)
 800a4ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a4b0:	4914      	ldr	r1, [pc, #80]	; (800a504 <mem_malloc+0x1f0>)
 800a4b2:	480f      	ldr	r0, [pc, #60]	; (800a4f0 <mem_malloc+0x1dc>)
 800a4b4:	f00b fb38 	bl	8015b28 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	e00e      	b.n	800a4dc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a4be:	8bfb      	ldrh	r3, [r7, #30]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7ff fc87 	bl	8009dd4 <ptr_to_mem>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a4cc:	8bfa      	ldrh	r2, [r7, #30]
 800a4ce:	8bbb      	ldrh	r3, [r7, #28]
 800a4d0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	f4ff af44 	bcc.w	800a362 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3720      	adds	r7, #32
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	20005740 	.word	0x20005740
 800a4e8:	08016c3c 	.word	0x08016c3c
 800a4ec:	08016de4 	.word	0x08016de4
 800a4f0:	08016c84 	.word	0x08016c84
 800a4f4:	2000573c 	.word	0x2000573c
 800a4f8:	08016df8 	.word	0x08016df8
 800a4fc:	08016e14 	.word	0x08016e14
 800a500:	08016e44 	.word	0x08016e44
 800a504:	08016e74 	.word	0x08016e74

0800a508 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	2200      	movs	r2, #0
 800a516:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	3303      	adds	r3, #3
 800a51e:	f023 0303 	bic.w	r3, r3, #3
 800a522:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e011      	b.n	800a54e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4413      	add	r3, r2
 800a546:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	885b      	ldrh	r3, [r3, #2]
 800a552:	461a      	mov	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4293      	cmp	r3, r2
 800a558:	dbe7      	blt.n	800a52a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a55a:	bf00      	nop
 800a55c:	bf00      	nop
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a56e:	2300      	movs	r3, #0
 800a570:	80fb      	strh	r3, [r7, #6]
 800a572:	e009      	b.n	800a588 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a574:	88fb      	ldrh	r3, [r7, #6]
 800a576:	4a08      	ldr	r2, [pc, #32]	; (800a598 <memp_init+0x30>)
 800a578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7ff ffc3 	bl	800a508 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a582:	88fb      	ldrh	r3, [r7, #6]
 800a584:	3301      	adds	r3, #1
 800a586:	80fb      	strh	r3, [r7, #6]
 800a588:	88fb      	ldrh	r3, [r7, #6]
 800a58a:	2b08      	cmp	r3, #8
 800a58c:	d9f2      	bls.n	800a574 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a58e:	bf00      	nop
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	08019a00 	.word	0x08019a00

0800a59c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d012      	beq.n	800a5d8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	6812      	ldr	r2, [r2, #0]
 800a5ba:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d006      	beq.n	800a5d4 <do_memp_malloc_pool+0x38>
 800a5c6:	4b07      	ldr	r3, [pc, #28]	; (800a5e4 <do_memp_malloc_pool+0x48>)
 800a5c8:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a5cc:	4906      	ldr	r1, [pc, #24]	; (800a5e8 <do_memp_malloc_pool+0x4c>)
 800a5ce:	4807      	ldr	r0, [pc, #28]	; (800a5ec <do_memp_malloc_pool+0x50>)
 800a5d0:	f00b faaa 	bl	8015b28 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	e000      	b.n	800a5da <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	08016e98 	.word	0x08016e98
 800a5e8:	08016ec8 	.word	0x08016ec8
 800a5ec:	08016eec 	.word	0x08016eec

0800a5f0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d106      	bne.n	800a60c <memp_malloc_pool+0x1c>
 800a5fe:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <memp_malloc_pool+0x38>)
 800a600:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a604:	4909      	ldr	r1, [pc, #36]	; (800a62c <memp_malloc_pool+0x3c>)
 800a606:	480a      	ldr	r0, [pc, #40]	; (800a630 <memp_malloc_pool+0x40>)
 800a608:	f00b fa8e 	bl	8015b28 <iprintf>
  if (desc == NULL) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <memp_malloc_pool+0x26>
    return NULL;
 800a612:	2300      	movs	r3, #0
 800a614:	e003      	b.n	800a61e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff ffc0 	bl	800a59c <do_memp_malloc_pool>
 800a61c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	08016e98 	.word	0x08016e98
 800a62c:	08016f14 	.word	0x08016f14
 800a630:	08016eec 	.word	0x08016eec

0800a634 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	2b08      	cmp	r3, #8
 800a642:	d908      	bls.n	800a656 <memp_malloc+0x22>
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <memp_malloc+0x3c>)
 800a646:	f240 1257 	movw	r2, #343	; 0x157
 800a64a:	490a      	ldr	r1, [pc, #40]	; (800a674 <memp_malloc+0x40>)
 800a64c:	480a      	ldr	r0, [pc, #40]	; (800a678 <memp_malloc+0x44>)
 800a64e:	f00b fa6b 	bl	8015b28 <iprintf>
 800a652:	2300      	movs	r3, #0
 800a654:	e008      	b.n	800a668 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	4a08      	ldr	r2, [pc, #32]	; (800a67c <memp_malloc+0x48>)
 800a65a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a65e:	4618      	mov	r0, r3
 800a660:	f7ff ff9c 	bl	800a59c <do_memp_malloc_pool>
 800a664:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a666:	68fb      	ldr	r3, [r7, #12]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	08016e98 	.word	0x08016e98
 800a674:	08016f28 	.word	0x08016f28
 800a678:	08016eec 	.word	0x08016eec
 800a67c:	08019a00 	.word	0x08019a00

0800a680 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d006      	beq.n	800a6a2 <do_memp_free_pool+0x22>
 800a694:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <do_memp_free_pool+0x40>)
 800a696:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a69a:	490a      	ldr	r1, [pc, #40]	; (800a6c4 <do_memp_free_pool+0x44>)
 800a69c:	480a      	ldr	r0, [pc, #40]	; (800a6c8 <do_memp_free_pool+0x48>)
 800a69e:	f00b fa43 	bl	8015b28 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a6b8:	bf00      	nop
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	08016e98 	.word	0x08016e98
 800a6c4:	08016f48 	.word	0x08016f48
 800a6c8:	08016eec 	.word	0x08016eec

0800a6cc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d106      	bne.n	800a6ea <memp_free_pool+0x1e>
 800a6dc:	4b0a      	ldr	r3, [pc, #40]	; (800a708 <memp_free_pool+0x3c>)
 800a6de:	f240 1295 	movw	r2, #405	; 0x195
 800a6e2:	490a      	ldr	r1, [pc, #40]	; (800a70c <memp_free_pool+0x40>)
 800a6e4:	480a      	ldr	r0, [pc, #40]	; (800a710 <memp_free_pool+0x44>)
 800a6e6:	f00b fa1f 	bl	8015b28 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <memp_free_pool+0x34>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d004      	beq.n	800a700 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ffc1 	bl	800a680 <do_memp_free_pool>
 800a6fe:	e000      	b.n	800a702 <memp_free_pool+0x36>
    return;
 800a700:	bf00      	nop
}
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	08016e98 	.word	0x08016e98
 800a70c:	08016f14 	.word	0x08016f14
 800a710:	08016eec 	.word	0x08016eec

0800a714 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	4603      	mov	r3, r0
 800a71c:	6039      	str	r1, [r7, #0]
 800a71e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	2b08      	cmp	r3, #8
 800a724:	d907      	bls.n	800a736 <memp_free+0x22>
 800a726:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <memp_free+0x44>)
 800a728:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a72c:	490b      	ldr	r1, [pc, #44]	; (800a75c <memp_free+0x48>)
 800a72e:	480c      	ldr	r0, [pc, #48]	; (800a760 <memp_free+0x4c>)
 800a730:	f00b f9fa 	bl	8015b28 <iprintf>
 800a734:	e00c      	b.n	800a750 <memp_free+0x3c>

  if (mem == NULL) {
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d008      	beq.n	800a74e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	4a09      	ldr	r2, [pc, #36]	; (800a764 <memp_free+0x50>)
 800a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a744:	6839      	ldr	r1, [r7, #0]
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff ff9a 	bl	800a680 <do_memp_free_pool>
 800a74c:	e000      	b.n	800a750 <memp_free+0x3c>
    return;
 800a74e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	08016e98 	.word	0x08016e98
 800a75c:	08016f68 	.word	0x08016f68
 800a760:	08016eec 	.word	0x08016eec
 800a764:	08019a00 	.word	0x08019a00

0800a768 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a76c:	bf00      	nop
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d108      	bne.n	800a79e <netif_add+0x26>
 800a78c:	4b5b      	ldr	r3, [pc, #364]	; (800a8fc <netif_add+0x184>)
 800a78e:	f240 1227 	movw	r2, #295	; 0x127
 800a792:	495b      	ldr	r1, [pc, #364]	; (800a900 <netif_add+0x188>)
 800a794:	485b      	ldr	r0, [pc, #364]	; (800a904 <netif_add+0x18c>)
 800a796:	f00b f9c7 	bl	8015b28 <iprintf>
 800a79a:	2300      	movs	r3, #0
 800a79c:	e0a9      	b.n	800a8f2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d108      	bne.n	800a7b6 <netif_add+0x3e>
 800a7a4:	4b55      	ldr	r3, [pc, #340]	; (800a8fc <netif_add+0x184>)
 800a7a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a7aa:	4957      	ldr	r1, [pc, #348]	; (800a908 <netif_add+0x190>)
 800a7ac:	4855      	ldr	r0, [pc, #340]	; (800a904 <netif_add+0x18c>)
 800a7ae:	f00b f9bb 	bl	8015b28 <iprintf>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e09d      	b.n	800a8f2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a7bc:	4b53      	ldr	r3, [pc, #332]	; (800a90c <netif_add+0x194>)
 800a7be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a7c6:	4b51      	ldr	r3, [pc, #324]	; (800a90c <netif_add+0x194>)
 800a7c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a7d0:	4b4e      	ldr	r3, [pc, #312]	; (800a90c <netif_add+0x194>)
 800a7d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4a49      	ldr	r2, [pc, #292]	; (800a910 <netif_add+0x198>)
 800a7ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3324      	adds	r3, #36	; 0x24
 800a7fe:	2204      	movs	r2, #4
 800a800:	2100      	movs	r1, #0
 800a802:	4618      	mov	r0, r3
 800a804:	f00b f988 	bl	8015b18 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6a3a      	ldr	r2, [r7, #32]
 800a812:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a814:	4b3f      	ldr	r3, [pc, #252]	; (800a914 <netif_add+0x19c>)
 800a816:	781a      	ldrb	r2, [r3, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a822:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	68b9      	ldr	r1, [r7, #8]
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 f914 	bl	800aa58 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	4798      	blx	r3
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <netif_add+0xc8>
    return NULL;
 800a83c:	2300      	movs	r3, #0
 800a83e:	e058      	b.n	800a8f2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a846:	2bff      	cmp	r3, #255	; 0xff
 800a848:	d103      	bne.n	800a852 <netif_add+0xda>
        netif->num = 0;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a856:	4b30      	ldr	r3, [pc, #192]	; (800a918 <netif_add+0x1a0>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	617b      	str	r3, [r7, #20]
 800a85c:	e02b      	b.n	800a8b6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	429a      	cmp	r2, r3
 800a864:	d106      	bne.n	800a874 <netif_add+0xfc>
 800a866:	4b25      	ldr	r3, [pc, #148]	; (800a8fc <netif_add+0x184>)
 800a868:	f240 128b 	movw	r2, #395	; 0x18b
 800a86c:	492b      	ldr	r1, [pc, #172]	; (800a91c <netif_add+0x1a4>)
 800a86e:	4825      	ldr	r0, [pc, #148]	; (800a904 <netif_add+0x18c>)
 800a870:	f00b f95a 	bl	8015b28 <iprintf>
        num_netifs++;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	3301      	adds	r3, #1
 800a878:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2bff      	cmp	r3, #255	; 0xff
 800a87e:	dd06      	ble.n	800a88e <netif_add+0x116>
 800a880:	4b1e      	ldr	r3, [pc, #120]	; (800a8fc <netif_add+0x184>)
 800a882:	f240 128d 	movw	r2, #397	; 0x18d
 800a886:	4926      	ldr	r1, [pc, #152]	; (800a920 <netif_add+0x1a8>)
 800a888:	481e      	ldr	r0, [pc, #120]	; (800a904 <netif_add+0x18c>)
 800a88a:	f00b f94d 	bl	8015b28 <iprintf>
        if (netif2->num == netif->num) {
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d108      	bne.n	800a8b0 <netif_add+0x138>
          netif->num++;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a8ae:	e005      	b.n	800a8bc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	617b      	str	r3, [r7, #20]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1d0      	bne.n	800a85e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1be      	bne.n	800a840 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8c8:	2bfe      	cmp	r3, #254	; 0xfe
 800a8ca:	d103      	bne.n	800a8d4 <netif_add+0x15c>
    netif_num = 0;
 800a8cc:	4b11      	ldr	r3, [pc, #68]	; (800a914 <netif_add+0x19c>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	e006      	b.n	800a8e2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8da:	3301      	adds	r3, #1
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <netif_add+0x19c>)
 800a8e0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <netif_add+0x1a0>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a8ea:	4a0b      	ldr	r2, [pc, #44]	; (800a918 <netif_add+0x1a0>)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	08016f84 	.word	0x08016f84
 800a900:	08017018 	.word	0x08017018
 800a904:	08016fd4 	.word	0x08016fd4
 800a908:	08017034 	.word	0x08017034
 800a90c:	08019a74 	.word	0x08019a74
 800a910:	0800ad3b 	.word	0x0800ad3b
 800a914:	20008658 	.word	0x20008658
 800a918:	20008650 	.word	0x20008650
 800a91c:	08017058 	.word	0x08017058
 800a920:	0801706c 	.word	0x0801706c

0800a924 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f002 fb37 	bl	800cfa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f006 fedb 	bl	80116f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a93e:	bf00      	nop
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
	...

0800a948 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d106      	bne.n	800a968 <netif_do_set_ipaddr+0x20>
 800a95a:	4b1d      	ldr	r3, [pc, #116]	; (800a9d0 <netif_do_set_ipaddr+0x88>)
 800a95c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a960:	491c      	ldr	r1, [pc, #112]	; (800a9d4 <netif_do_set_ipaddr+0x8c>)
 800a962:	481d      	ldr	r0, [pc, #116]	; (800a9d8 <netif_do_set_ipaddr+0x90>)
 800a964:	f00b f8e0 	bl	8015b28 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d106      	bne.n	800a97c <netif_do_set_ipaddr+0x34>
 800a96e:	4b18      	ldr	r3, [pc, #96]	; (800a9d0 <netif_do_set_ipaddr+0x88>)
 800a970:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a974:	4917      	ldr	r1, [pc, #92]	; (800a9d4 <netif_do_set_ipaddr+0x8c>)
 800a976:	4818      	ldr	r0, [pc, #96]	; (800a9d8 <netif_do_set_ipaddr+0x90>)
 800a978:	f00b f8d6 	bl	8015b28 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3304      	adds	r3, #4
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d01c      	beq.n	800a9c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3304      	adds	r3, #4
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a99a:	f107 0314 	add.w	r3, r7, #20
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff ffbf 	bl	800a924 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <netif_do_set_ipaddr+0x6a>
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	e000      	b.n	800a9b4 <netif_do_set_ipaddr+0x6c>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 f8d2 	bl	800ab64 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e000      	b.n	800a9c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	08016f84 	.word	0x08016f84
 800a9d4:	0801709c 	.word	0x0801709c
 800a9d8:	08016fd4 	.word	0x08016fd4

0800a9dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d00a      	beq.n	800aa0c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <netif_do_set_netmask+0x26>
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	e000      	b.n	800aa04 <netif_do_set_netmask+0x28>
 800aa02:	2300      	movs	r3, #0
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e000      	b.n	800aa0e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d00a      	beq.n	800aa4a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d002      	beq.n	800aa40 <netif_do_set_gw+0x26>
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	e000      	b.n	800aa42 <netif_do_set_gw+0x28>
 800aa40:	2300      	movs	r3, #0
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800aa46:	2301      	movs	r3, #1
 800aa48:	e000      	b.n	800aa4c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aa74:	4b1c      	ldr	r3, [pc, #112]	; (800aae8 <netif_set_addr+0x90>)
 800aa76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aa7e:	4b1a      	ldr	r3, [pc, #104]	; (800aae8 <netif_set_addr+0x90>)
 800aa80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aa88:	4b17      	ldr	r3, [pc, #92]	; (800aae8 <netif_set_addr+0x90>)
 800aa8a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <netif_set_addr+0x42>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <netif_set_addr+0x46>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <netif_set_addr+0x48>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d006      	beq.n	800aab6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aaa8:	f107 0310 	add.w	r3, r7, #16
 800aaac:	461a      	mov	r2, r3
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff ff49 	bl	800a948 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aab6:	69fa      	ldr	r2, [r7, #28]
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f7ff ff8e 	bl	800a9dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7ff ffa8 	bl	800aa1a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d106      	bne.n	800aade <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aad0:	f107 0310 	add.w	r3, r7, #16
 800aad4:	461a      	mov	r2, r3
 800aad6:	68b9      	ldr	r1, [r7, #8]
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7ff ff35 	bl	800a948 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800aade:	bf00      	nop
 800aae0:	3720      	adds	r7, #32
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	08019a74 	.word	0x08019a74

0800aaec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800aaf4:	4a04      	ldr	r2, [pc, #16]	; (800ab08 <netif_set_default+0x1c>)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800aafa:	bf00      	nop
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	20008654 	.word	0x20008654

0800ab0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d107      	bne.n	800ab2a <netif_set_up+0x1e>
 800ab1a:	4b0f      	ldr	r3, [pc, #60]	; (800ab58 <netif_set_up+0x4c>)
 800ab1c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ab20:	490e      	ldr	r1, [pc, #56]	; (800ab5c <netif_set_up+0x50>)
 800ab22:	480f      	ldr	r0, [pc, #60]	; (800ab60 <netif_set_up+0x54>)
 800ab24:	f00b f800 	bl	8015b28 <iprintf>
 800ab28:	e013      	b.n	800ab52 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10c      	bne.n	800ab52 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ab4a:	2103      	movs	r1, #3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f809 	bl	800ab64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	08016f84 	.word	0x08016f84
 800ab5c:	0801710c 	.word	0x0801710c
 800ab60:	08016fd4 	.word	0x08016fd4

0800ab64 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <netif_issue_reports+0x20>
 800ab76:	4b18      	ldr	r3, [pc, #96]	; (800abd8 <netif_issue_reports+0x74>)
 800ab78:	f240 326d 	movw	r2, #877	; 0x36d
 800ab7c:	4917      	ldr	r1, [pc, #92]	; (800abdc <netif_issue_reports+0x78>)
 800ab7e:	4818      	ldr	r0, [pc, #96]	; (800abe0 <netif_issue_reports+0x7c>)
 800ab80:	f00a ffd2 	bl	8015b28 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab8a:	f003 0304 	and.w	r3, r3, #4
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d01e      	beq.n	800abd0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab98:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d017      	beq.n	800abd0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d013      	beq.n	800abd2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	3304      	adds	r3, #4
 800abae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00e      	beq.n	800abd2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abba:	f003 0308 	and.w	r3, r3, #8
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d007      	beq.n	800abd2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f009 fb93 	bl	80142f4 <etharp_request>
 800abce:	e000      	b.n	800abd2 <netif_issue_reports+0x6e>
    return;
 800abd0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	08016f84 	.word	0x08016f84
 800abdc:	08017128 	.word	0x08017128
 800abe0:	08016fd4 	.word	0x08016fd4

0800abe4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d107      	bne.n	800ac02 <netif_set_down+0x1e>
 800abf2:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <netif_set_down+0x58>)
 800abf4:	f240 329b 	movw	r2, #923	; 0x39b
 800abf8:	4911      	ldr	r1, [pc, #68]	; (800ac40 <netif_set_down+0x5c>)
 800abfa:	4812      	ldr	r0, [pc, #72]	; (800ac44 <netif_set_down+0x60>)
 800abfc:	f00a ff94 	bl	8015b28 <iprintf>
 800ac00:	e019      	b.n	800ac36 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d012      	beq.n	800ac36 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac16:	f023 0301 	bic.w	r3, r3, #1
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f008 ff19 	bl	8013a68 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	08016f84 	.word	0x08016f84
 800ac40:	0801714c 	.word	0x0801714c
 800ac44:	08016fd4 	.word	0x08016fd4

0800ac48 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d107      	bne.n	800ac66 <netif_set_link_up+0x1e>
 800ac56:	4b15      	ldr	r3, [pc, #84]	; (800acac <netif_set_link_up+0x64>)
 800ac58:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ac5c:	4914      	ldr	r1, [pc, #80]	; (800acb0 <netif_set_link_up+0x68>)
 800ac5e:	4815      	ldr	r0, [pc, #84]	; (800acb4 <netif_set_link_up+0x6c>)
 800ac60:	f00a ff62 	bl	8015b28 <iprintf>
 800ac64:	e01e      	b.n	800aca4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d117      	bne.n	800aca4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac7a:	f043 0304 	orr.w	r3, r3, #4
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f007 f95e 	bl	8011f48 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac8c:	2103      	movs	r1, #3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7ff ff68 	bl	800ab64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	69db      	ldr	r3, [r3, #28]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d003      	beq.n	800aca4 <netif_set_link_up+0x5c>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	08016f84 	.word	0x08016f84
 800acb0:	0801716c 	.word	0x0801716c
 800acb4:	08016fd4 	.word	0x08016fd4

0800acb8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d107      	bne.n	800acd6 <netif_set_link_down+0x1e>
 800acc6:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <netif_set_link_down+0x54>)
 800acc8:	f240 4206 	movw	r2, #1030	; 0x406
 800accc:	4910      	ldr	r1, [pc, #64]	; (800ad10 <netif_set_link_down+0x58>)
 800acce:	4811      	ldr	r0, [pc, #68]	; (800ad14 <netif_set_link_down+0x5c>)
 800acd0:	f00a ff2a 	bl	8015b28 <iprintf>
 800acd4:	e017      	b.n	800ad06 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d010      	beq.n	800ad06 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800acea:	f023 0304 	bic.w	r3, r3, #4
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d003      	beq.n	800ad06 <netif_set_link_down+0x4e>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	08016f84 	.word	0x08016f84
 800ad10:	08017190 	.word	0x08017190
 800ad14:	08016fd4 	.word	0x08016fd4

0800ad18 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	61da      	str	r2, [r3, #28]
  }
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b085      	sub	sp, #20
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ad46:	f06f 030b 	mvn.w	r3, #11
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
	...

0800ad58 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ad62:	79fb      	ldrb	r3, [r7, #7]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d013      	beq.n	800ad90 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ad68:	4b0d      	ldr	r3, [pc, #52]	; (800ada0 <netif_get_by_index+0x48>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	e00c      	b.n	800ad8a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad76:	3301      	adds	r3, #1
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	79fa      	ldrb	r2, [r7, #7]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d101      	bne.n	800ad84 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	e006      	b.n	800ad92 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1ef      	bne.n	800ad70 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	20008650 	.word	0x20008650

0800ada4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ada4:	b480      	push	{r7}
 800ada6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ada8:	4b03      	ldr	r3, [pc, #12]	; (800adb8 <pbuf_pool_is_empty+0x14>)
 800adaa:	2201      	movs	r2, #1
 800adac:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800adae:	bf00      	nop
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	20008659 	.word	0x20008659

0800adbc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4611      	mov	r1, r2
 800adc8:	461a      	mov	r2, r3
 800adca:	460b      	mov	r3, r1
 800adcc:	80fb      	strh	r3, [r7, #6]
 800adce:	4613      	mov	r3, r2
 800add0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	88fa      	ldrh	r2, [r7, #6]
 800ade2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	88ba      	ldrh	r2, [r7, #4]
 800ade8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800adea:	8b3b      	ldrh	r3, [r7, #24]
 800adec:	b2da      	uxtb	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	7f3a      	ldrb	r2, [r7, #28]
 800adf6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2201      	movs	r2, #1
 800adfc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	73da      	strb	r2, [r3, #15]
}
 800ae04:	bf00      	nop
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08c      	sub	sp, #48	; 0x30
 800ae14:	af02      	add	r7, sp, #8
 800ae16:	4603      	mov	r3, r0
 800ae18:	71fb      	strb	r3, [r7, #7]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	80bb      	strh	r3, [r7, #4]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ae26:	887b      	ldrh	r3, [r7, #2]
 800ae28:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ae2c:	d07f      	beq.n	800af2e <pbuf_alloc+0x11e>
 800ae2e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ae32:	f300 80c8 	bgt.w	800afc6 <pbuf_alloc+0x1b6>
 800ae36:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ae3a:	d010      	beq.n	800ae5e <pbuf_alloc+0x4e>
 800ae3c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ae40:	f300 80c1 	bgt.w	800afc6 <pbuf_alloc+0x1b6>
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d002      	beq.n	800ae4e <pbuf_alloc+0x3e>
 800ae48:	2b41      	cmp	r3, #65	; 0x41
 800ae4a:	f040 80bc 	bne.w	800afc6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ae4e:	887a      	ldrh	r2, [r7, #2]
 800ae50:	88bb      	ldrh	r3, [r7, #4]
 800ae52:	4619      	mov	r1, r3
 800ae54:	2000      	movs	r0, #0
 800ae56:	f000 f8d1 	bl	800affc <pbuf_alloc_reference>
 800ae5a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ae5c:	e0bd      	b.n	800afda <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ae66:	88bb      	ldrh	r3, [r7, #4]
 800ae68:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ae6a:	2008      	movs	r0, #8
 800ae6c:	f7ff fbe2 	bl	800a634 <memp_malloc>
 800ae70:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d109      	bne.n	800ae8c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ae78:	f7ff ff94 	bl	800ada4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ae82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae84:	f000 faa8 	bl	800b3d8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e0a7      	b.n	800afdc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ae8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae8e:	3303      	adds	r3, #3
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	f023 0303 	bic.w	r3, r3, #3
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	8b7a      	ldrh	r2, [r7, #26]
 800aea0:	4293      	cmp	r3, r2
 800aea2:	bf28      	it	cs
 800aea4:	4613      	movcs	r3, r2
 800aea6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800aea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeaa:	3310      	adds	r3, #16
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4413      	add	r3, r2
 800aeb0:	3303      	adds	r3, #3
 800aeb2:	f023 0303 	bic.w	r3, r3, #3
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	89f9      	ldrh	r1, [r7, #14]
 800aeba:	8b7a      	ldrh	r2, [r7, #26]
 800aebc:	2300      	movs	r3, #0
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	887b      	ldrh	r3, [r7, #2]
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	460b      	mov	r3, r1
 800aec6:	4601      	mov	r1, r0
 800aec8:	6938      	ldr	r0, [r7, #16]
 800aeca:	f7ff ff77 	bl	800adbc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d006      	beq.n	800aee8 <pbuf_alloc+0xd8>
 800aeda:	4b42      	ldr	r3, [pc, #264]	; (800afe4 <pbuf_alloc+0x1d4>)
 800aedc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aee0:	4941      	ldr	r1, [pc, #260]	; (800afe8 <pbuf_alloc+0x1d8>)
 800aee2:	4842      	ldr	r0, [pc, #264]	; (800afec <pbuf_alloc+0x1dc>)
 800aee4:	f00a fe20 	bl	8015b28 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800aee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeea:	3303      	adds	r3, #3
 800aeec:	f023 0303 	bic.w	r3, r3, #3
 800aef0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800aef4:	d106      	bne.n	800af04 <pbuf_alloc+0xf4>
 800aef6:	4b3b      	ldr	r3, [pc, #236]	; (800afe4 <pbuf_alloc+0x1d4>)
 800aef8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800aefc:	493c      	ldr	r1, [pc, #240]	; (800aff0 <pbuf_alloc+0x1e0>)
 800aefe:	483b      	ldr	r0, [pc, #236]	; (800afec <pbuf_alloc+0x1dc>)
 800af00:	f00a fe12 	bl	8015b28 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	2b00      	cmp	r3, #0
 800af08:	d102      	bne.n	800af10 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
 800af0e:	e002      	b.n	800af16 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800af1a:	8b7a      	ldrh	r2, [r7, #26]
 800af1c:	89fb      	ldrh	r3, [r7, #14]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800af26:	8b7b      	ldrh	r3, [r7, #26]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d19e      	bne.n	800ae6a <pbuf_alloc+0x5a>
      break;
 800af2c:	e055      	b.n	800afda <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800af2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af30:	3303      	adds	r3, #3
 800af32:	b29b      	uxth	r3, r3
 800af34:	f023 0303 	bic.w	r3, r3, #3
 800af38:	b29a      	uxth	r2, r3
 800af3a:	88bb      	ldrh	r3, [r7, #4]
 800af3c:	3303      	adds	r3, #3
 800af3e:	b29b      	uxth	r3, r3
 800af40:	f023 0303 	bic.w	r3, r3, #3
 800af44:	b29b      	uxth	r3, r3
 800af46:	4413      	add	r3, r2
 800af48:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800af4a:	8b3b      	ldrh	r3, [r7, #24]
 800af4c:	3310      	adds	r3, #16
 800af4e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800af50:	8b3a      	ldrh	r2, [r7, #24]
 800af52:	88bb      	ldrh	r3, [r7, #4]
 800af54:	3303      	adds	r3, #3
 800af56:	f023 0303 	bic.w	r3, r3, #3
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d306      	bcc.n	800af6c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800af5e:	8afa      	ldrh	r2, [r7, #22]
 800af60:	88bb      	ldrh	r3, [r7, #4]
 800af62:	3303      	adds	r3, #3
 800af64:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800af68:	429a      	cmp	r2, r3
 800af6a:	d201      	bcs.n	800af70 <pbuf_alloc+0x160>
        return NULL;
 800af6c:	2300      	movs	r3, #0
 800af6e:	e035      	b.n	800afdc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800af70:	8afb      	ldrh	r3, [r7, #22]
 800af72:	4618      	mov	r0, r3
 800af74:	f7ff f9ce 	bl	800a314 <mem_malloc>
 800af78:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <pbuf_alloc+0x174>
        return NULL;
 800af80:	2300      	movs	r3, #0
 800af82:	e02b      	b.n	800afdc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800af84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af86:	3310      	adds	r3, #16
 800af88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af8a:	4413      	add	r3, r2
 800af8c:	3303      	adds	r3, #3
 800af8e:	f023 0303 	bic.w	r3, r3, #3
 800af92:	4618      	mov	r0, r3
 800af94:	88b9      	ldrh	r1, [r7, #4]
 800af96:	88ba      	ldrh	r2, [r7, #4]
 800af98:	2300      	movs	r3, #0
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	887b      	ldrh	r3, [r7, #2]
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	460b      	mov	r3, r1
 800afa2:	4601      	mov	r1, r0
 800afa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afa6:	f7ff ff09 	bl	800adbc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d010      	beq.n	800afd8 <pbuf_alloc+0x1c8>
 800afb6:	4b0b      	ldr	r3, [pc, #44]	; (800afe4 <pbuf_alloc+0x1d4>)
 800afb8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800afbc:	490d      	ldr	r1, [pc, #52]	; (800aff4 <pbuf_alloc+0x1e4>)
 800afbe:	480b      	ldr	r0, [pc, #44]	; (800afec <pbuf_alloc+0x1dc>)
 800afc0:	f00a fdb2 	bl	8015b28 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800afc4:	e008      	b.n	800afd8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800afc6:	4b07      	ldr	r3, [pc, #28]	; (800afe4 <pbuf_alloc+0x1d4>)
 800afc8:	f240 1227 	movw	r2, #295	; 0x127
 800afcc:	490a      	ldr	r1, [pc, #40]	; (800aff8 <pbuf_alloc+0x1e8>)
 800afce:	4807      	ldr	r0, [pc, #28]	; (800afec <pbuf_alloc+0x1dc>)
 800afd0:	f00a fdaa 	bl	8015b28 <iprintf>
      return NULL;
 800afd4:	2300      	movs	r3, #0
 800afd6:	e001      	b.n	800afdc <pbuf_alloc+0x1cc>
      break;
 800afd8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3728      	adds	r7, #40	; 0x28
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	080171b4 	.word	0x080171b4
 800afe8:	080171e4 	.word	0x080171e4
 800afec:	08017214 	.word	0x08017214
 800aff0:	0801723c 	.word	0x0801723c
 800aff4:	08017270 	.word	0x08017270
 800aff8:	0801729c 	.word	0x0801729c

0800affc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af02      	add	r7, sp, #8
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	807b      	strh	r3, [r7, #2]
 800b008:	4613      	mov	r3, r2
 800b00a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b00c:	883b      	ldrh	r3, [r7, #0]
 800b00e:	2b41      	cmp	r3, #65	; 0x41
 800b010:	d009      	beq.n	800b026 <pbuf_alloc_reference+0x2a>
 800b012:	883b      	ldrh	r3, [r7, #0]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d006      	beq.n	800b026 <pbuf_alloc_reference+0x2a>
 800b018:	4b0f      	ldr	r3, [pc, #60]	; (800b058 <pbuf_alloc_reference+0x5c>)
 800b01a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b01e:	490f      	ldr	r1, [pc, #60]	; (800b05c <pbuf_alloc_reference+0x60>)
 800b020:	480f      	ldr	r0, [pc, #60]	; (800b060 <pbuf_alloc_reference+0x64>)
 800b022:	f00a fd81 	bl	8015b28 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b026:	2007      	movs	r0, #7
 800b028:	f7ff fb04 	bl	800a634 <memp_malloc>
 800b02c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b034:	2300      	movs	r3, #0
 800b036:	e00b      	b.n	800b050 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b038:	8879      	ldrh	r1, [r7, #2]
 800b03a:	887a      	ldrh	r2, [r7, #2]
 800b03c:	2300      	movs	r3, #0
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	883b      	ldrh	r3, [r7, #0]
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	460b      	mov	r3, r1
 800b046:	6879      	ldr	r1, [r7, #4]
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7ff feb7 	bl	800adbc <pbuf_init_alloced_pbuf>
  return p;
 800b04e:	68fb      	ldr	r3, [r7, #12]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	080171b4 	.word	0x080171b4
 800b05c:	080172b8 	.word	0x080172b8
 800b060:	08017214 	.word	0x08017214

0800b064 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b088      	sub	sp, #32
 800b068:	af02      	add	r7, sp, #8
 800b06a:	607b      	str	r3, [r7, #4]
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
 800b070:	460b      	mov	r3, r1
 800b072:	81bb      	strh	r3, [r7, #12]
 800b074:	4613      	mov	r3, r2
 800b076:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b07c:	8a7b      	ldrh	r3, [r7, #18]
 800b07e:	3303      	adds	r3, #3
 800b080:	f023 0203 	bic.w	r2, r3, #3
 800b084:	89bb      	ldrh	r3, [r7, #12]
 800b086:	441a      	add	r2, r3
 800b088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d901      	bls.n	800b092 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b08e:	2300      	movs	r3, #0
 800b090:	e018      	b.n	800b0c4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d007      	beq.n	800b0a8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b098:	8a7b      	ldrh	r3, [r7, #18]
 800b09a:	3303      	adds	r3, #3
 800b09c:	f023 0303 	bic.w	r3, r3, #3
 800b0a0:	6a3a      	ldr	r2, [r7, #32]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	e001      	b.n	800b0ac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	89b9      	ldrh	r1, [r7, #12]
 800b0b0:	89ba      	ldrh	r2, [r7, #12]
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	9301      	str	r3, [sp, #4]
 800b0b6:	897b      	ldrh	r3, [r7, #10]
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	6979      	ldr	r1, [r7, #20]
 800b0be:	f7ff fe7d 	bl	800adbc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b0c2:	687b      	ldr	r3, [r7, #4]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d106      	bne.n	800b0ec <pbuf_realloc+0x20>
 800b0de:	4b3a      	ldr	r3, [pc, #232]	; (800b1c8 <pbuf_realloc+0xfc>)
 800b0e0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b0e4:	4939      	ldr	r1, [pc, #228]	; (800b1cc <pbuf_realloc+0x100>)
 800b0e6:	483a      	ldr	r0, [pc, #232]	; (800b1d0 <pbuf_realloc+0x104>)
 800b0e8:	f00a fd1e 	bl	8015b28 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	891b      	ldrh	r3, [r3, #8]
 800b0f0:	887a      	ldrh	r2, [r7, #2]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d263      	bcs.n	800b1be <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	891a      	ldrh	r2, [r3, #8]
 800b0fa:	887b      	ldrh	r3, [r7, #2]
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b100:	887b      	ldrh	r3, [r7, #2]
 800b102:	817b      	strh	r3, [r7, #10]
  q = p;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b108:	e018      	b.n	800b13c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	895b      	ldrh	r3, [r3, #10]
 800b10e:	897a      	ldrh	r2, [r7, #10]
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	891a      	ldrh	r2, [r3, #8]
 800b118:	893b      	ldrh	r3, [r7, #8]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <pbuf_realloc+0x70>
 800b12e:	4b26      	ldr	r3, [pc, #152]	; (800b1c8 <pbuf_realloc+0xfc>)
 800b130:	f240 12af 	movw	r2, #431	; 0x1af
 800b134:	4927      	ldr	r1, [pc, #156]	; (800b1d4 <pbuf_realloc+0x108>)
 800b136:	4826      	ldr	r0, [pc, #152]	; (800b1d0 <pbuf_realloc+0x104>)
 800b138:	f00a fcf6 	bl	8015b28 <iprintf>
  while (rem_len > q->len) {
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	895b      	ldrh	r3, [r3, #10]
 800b140:	897a      	ldrh	r2, [r7, #10]
 800b142:	429a      	cmp	r2, r3
 800b144:	d8e1      	bhi.n	800b10a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	7b1b      	ldrb	r3, [r3, #12]
 800b14a:	f003 030f 	and.w	r3, r3, #15
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d121      	bne.n	800b196 <pbuf_realloc+0xca>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	895b      	ldrh	r3, [r3, #10]
 800b156:	897a      	ldrh	r2, [r7, #10]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d01c      	beq.n	800b196 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	7b5b      	ldrb	r3, [r3, #13]
 800b160:	f003 0302 	and.w	r3, r3, #2
 800b164:	2b00      	cmp	r3, #0
 800b166:	d116      	bne.n	800b196 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	b29a      	uxth	r2, r3
 800b172:	897b      	ldrh	r3, [r7, #10]
 800b174:	4413      	add	r3, r2
 800b176:	b29b      	uxth	r3, r3
 800b178:	4619      	mov	r1, r3
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7fe ffce 	bl	800a11c <mem_trim>
 800b180:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <pbuf_realloc+0xca>
 800b188:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <pbuf_realloc+0xfc>)
 800b18a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b18e:	4912      	ldr	r1, [pc, #72]	; (800b1d8 <pbuf_realloc+0x10c>)
 800b190:	480f      	ldr	r0, [pc, #60]	; (800b1d0 <pbuf_realloc+0x104>)
 800b192:	f00a fcc9 	bl	8015b28 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	897a      	ldrh	r2, [r7, #10]
 800b19a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	895a      	ldrh	r2, [r3, #10]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d004      	beq.n	800b1b6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f911 	bl	800b3d8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	e000      	b.n	800b1c0 <pbuf_realloc+0xf4>
    return;
 800b1be:	bf00      	nop

}
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	080171b4 	.word	0x080171b4
 800b1cc:	080172cc 	.word	0x080172cc
 800b1d0:	08017214 	.word	0x08017214
 800b1d4:	080172e4 	.word	0x080172e4
 800b1d8:	080172fc 	.word	0x080172fc

0800b1dc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d106      	bne.n	800b1fe <pbuf_add_header_impl+0x22>
 800b1f0:	4b2b      	ldr	r3, [pc, #172]	; (800b2a0 <pbuf_add_header_impl+0xc4>)
 800b1f2:	f240 12df 	movw	r2, #479	; 0x1df
 800b1f6:	492b      	ldr	r1, [pc, #172]	; (800b2a4 <pbuf_add_header_impl+0xc8>)
 800b1f8:	482b      	ldr	r0, [pc, #172]	; (800b2a8 <pbuf_add_header_impl+0xcc>)
 800b1fa:	f00a fc95 	bl	8015b28 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <pbuf_add_header_impl+0x30>
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b20a:	d301      	bcc.n	800b210 <pbuf_add_header_impl+0x34>
    return 1;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e043      	b.n	800b298 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <pbuf_add_header_impl+0x3e>
    return 0;
 800b216:	2300      	movs	r3, #0
 800b218:	e03e      	b.n	800b298 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	891a      	ldrh	r2, [r3, #8]
 800b222:	8a7b      	ldrh	r3, [r7, #18]
 800b224:	4413      	add	r3, r2
 800b226:	b29b      	uxth	r3, r3
 800b228:	8a7a      	ldrh	r2, [r7, #18]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d901      	bls.n	800b232 <pbuf_add_header_impl+0x56>
    return 1;
 800b22e:	2301      	movs	r3, #1
 800b230:	e032      	b.n	800b298 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	7b1b      	ldrb	r3, [r3, #12]
 800b236:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b238:	8a3b      	ldrh	r3, [r7, #16]
 800b23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00c      	beq.n	800b25c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	425b      	negs	r3, r3
 800b24a:	4413      	add	r3, r2
 800b24c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3310      	adds	r3, #16
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	429a      	cmp	r2, r3
 800b256:	d20d      	bcs.n	800b274 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b258:	2301      	movs	r3, #1
 800b25a:	e01d      	b.n	800b298 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b25c:	79fb      	ldrb	r3, [r7, #7]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d006      	beq.n	800b270 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	425b      	negs	r3, r3
 800b26a:	4413      	add	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e001      	b.n	800b274 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b270:	2301      	movs	r3, #1
 800b272:	e011      	b.n	800b298 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	895a      	ldrh	r2, [r3, #10]
 800b27e:	8a7b      	ldrh	r3, [r7, #18]
 800b280:	4413      	add	r3, r2
 800b282:	b29a      	uxth	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	891a      	ldrh	r2, [r3, #8]
 800b28c:	8a7b      	ldrh	r3, [r7, #18]
 800b28e:	4413      	add	r3, r2
 800b290:	b29a      	uxth	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	811a      	strh	r2, [r3, #8]


  return 0;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	080171b4 	.word	0x080171b4
 800b2a4:	08017318 	.word	0x08017318
 800b2a8:	08017214 	.word	0x08017214

0800b2ac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7ff ff8e 	bl	800b1dc <pbuf_add_header_impl>
 800b2c0:	4603      	mov	r3, r0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
	...

0800b2cc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d106      	bne.n	800b2ea <pbuf_remove_header+0x1e>
 800b2dc:	4b20      	ldr	r3, [pc, #128]	; (800b360 <pbuf_remove_header+0x94>)
 800b2de:	f240 224b 	movw	r2, #587	; 0x24b
 800b2e2:	4920      	ldr	r1, [pc, #128]	; (800b364 <pbuf_remove_header+0x98>)
 800b2e4:	4820      	ldr	r0, [pc, #128]	; (800b368 <pbuf_remove_header+0x9c>)
 800b2e6:	f00a fc1f 	bl	8015b28 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <pbuf_remove_header+0x2c>
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2f6:	d301      	bcc.n	800b2fc <pbuf_remove_header+0x30>
    return 1;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e02c      	b.n	800b356 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <pbuf_remove_header+0x3a>
    return 0;
 800b302:	2300      	movs	r3, #0
 800b304:	e027      	b.n	800b356 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	895b      	ldrh	r3, [r3, #10]
 800b30e:	89fa      	ldrh	r2, [r7, #14]
 800b310:	429a      	cmp	r2, r3
 800b312:	d908      	bls.n	800b326 <pbuf_remove_header+0x5a>
 800b314:	4b12      	ldr	r3, [pc, #72]	; (800b360 <pbuf_remove_header+0x94>)
 800b316:	f240 2255 	movw	r2, #597	; 0x255
 800b31a:	4914      	ldr	r1, [pc, #80]	; (800b36c <pbuf_remove_header+0xa0>)
 800b31c:	4812      	ldr	r0, [pc, #72]	; (800b368 <pbuf_remove_header+0x9c>)
 800b31e:	f00a fc03 	bl	8015b28 <iprintf>
 800b322:	2301      	movs	r3, #1
 800b324:	e017      	b.n	800b356 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685a      	ldr	r2, [r3, #4]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	441a      	add	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	895a      	ldrh	r2, [r3, #10]
 800b33c:	89fb      	ldrh	r3, [r7, #14]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	b29a      	uxth	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	891a      	ldrh	r2, [r3, #8]
 800b34a:	89fb      	ldrh	r3, [r7, #14]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	b29a      	uxth	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	080171b4 	.word	0x080171b4
 800b364:	08017318 	.word	0x08017318
 800b368:	08017214 	.word	0x08017214
 800b36c:	08017324 	.word	0x08017324

0800b370 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	807b      	strh	r3, [r7, #2]
 800b37c:	4613      	mov	r3, r2
 800b37e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b380:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b384:	2b00      	cmp	r3, #0
 800b386:	da08      	bge.n	800b39a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b388:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b38c:	425b      	negs	r3, r3
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7ff ff9b 	bl	800b2cc <pbuf_remove_header>
 800b396:	4603      	mov	r3, r0
 800b398:	e007      	b.n	800b3aa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b39a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b39e:	787a      	ldrb	r2, [r7, #1]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff ff1a 	bl	800b1dc <pbuf_add_header_impl>
 800b3a8:	4603      	mov	r3, r0
  }
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b3be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7ff ffd2 	bl	800b370 <pbuf_header_impl>
 800b3cc:	4603      	mov	r3, r0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
	...

0800b3d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10b      	bne.n	800b3fe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d106      	bne.n	800b3fa <pbuf_free+0x22>
 800b3ec:	4b38      	ldr	r3, [pc, #224]	; (800b4d0 <pbuf_free+0xf8>)
 800b3ee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b3f2:	4938      	ldr	r1, [pc, #224]	; (800b4d4 <pbuf_free+0xfc>)
 800b3f4:	4838      	ldr	r0, [pc, #224]	; (800b4d8 <pbuf_free+0x100>)
 800b3f6:	f00a fb97 	bl	8015b28 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e063      	b.n	800b4c6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b402:	e05c      	b.n	800b4be <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	7b9b      	ldrb	r3, [r3, #14]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d106      	bne.n	800b41a <pbuf_free+0x42>
 800b40c:	4b30      	ldr	r3, [pc, #192]	; (800b4d0 <pbuf_free+0xf8>)
 800b40e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b412:	4932      	ldr	r1, [pc, #200]	; (800b4dc <pbuf_free+0x104>)
 800b414:	4830      	ldr	r0, [pc, #192]	; (800b4d8 <pbuf_free+0x100>)
 800b416:	f00a fb87 	bl	8015b28 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	7b9b      	ldrb	r3, [r3, #14]
 800b41e:	3b01      	subs	r3, #1
 800b420:	b2da      	uxtb	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	739a      	strb	r2, [r3, #14]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	7b9b      	ldrb	r3, [r3, #14]
 800b42a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b42c:	7dbb      	ldrb	r3, [r7, #22]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d143      	bne.n	800b4ba <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	7b1b      	ldrb	r3, [r3, #12]
 800b43c:	f003 030f 	and.w	r3, r3, #15
 800b440:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	7b5b      	ldrb	r3, [r3, #13]
 800b446:	f003 0302 	and.w	r3, r3, #2
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d011      	beq.n	800b472 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <pbuf_free+0x90>
 800b45a:	4b1d      	ldr	r3, [pc, #116]	; (800b4d0 <pbuf_free+0xf8>)
 800b45c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b460:	491f      	ldr	r1, [pc, #124]	; (800b4e0 <pbuf_free+0x108>)
 800b462:	481d      	ldr	r0, [pc, #116]	; (800b4d8 <pbuf_free+0x100>)
 800b464:	f00a fb60 	bl	8015b28 <iprintf>
        pc->custom_free_function(p);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	4798      	blx	r3
 800b470:	e01d      	b.n	800b4ae <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d104      	bne.n	800b482 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	2008      	movs	r0, #8
 800b47c:	f7ff f94a 	bl	800a714 <memp_free>
 800b480:	e015      	b.n	800b4ae <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b482:	7bfb      	ldrb	r3, [r7, #15]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d104      	bne.n	800b492 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b488:	6879      	ldr	r1, [r7, #4]
 800b48a:	2007      	movs	r0, #7
 800b48c:	f7ff f942 	bl	800a714 <memp_free>
 800b490:	e00d      	b.n	800b4ae <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d103      	bne.n	800b4a0 <pbuf_free+0xc8>
          mem_free(p);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7fe fdd5 	bl	800a048 <mem_free>
 800b49e:	e006      	b.n	800b4ae <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b4a0:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <pbuf_free+0xf8>)
 800b4a2:	f240 320f 	movw	r2, #783	; 0x30f
 800b4a6:	490f      	ldr	r1, [pc, #60]	; (800b4e4 <pbuf_free+0x10c>)
 800b4a8:	480b      	ldr	r0, [pc, #44]	; (800b4d8 <pbuf_free+0x100>)
 800b4aa:	f00a fb3d 	bl	8015b28 <iprintf>
        }
      }
      count++;
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	607b      	str	r3, [r7, #4]
 800b4b8:	e001      	b.n	800b4be <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d19f      	bne.n	800b404 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	080171b4 	.word	0x080171b4
 800b4d4:	08017318 	.word	0x08017318
 800b4d8:	08017214 	.word	0x08017214
 800b4dc:	08017344 	.word	0x08017344
 800b4e0:	0801735c 	.word	0x0801735c
 800b4e4:	08017380 	.word	0x08017380

0800b4e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b4f4:	e005      	b.n	800b502 <pbuf_clen+0x1a>
    ++len;
 800b4f6:	89fb      	ldrh	r3, [r7, #14]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1f6      	bne.n	800b4f6 <pbuf_clen+0xe>
  }
  return len;
 800b508:	89fb      	ldrh	r3, [r7, #14]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
	...

0800b518 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d010      	beq.n	800b548 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	7b9b      	ldrb	r3, [r3, #14]
 800b52a:	3301      	adds	r3, #1
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7b9b      	ldrb	r3, [r3, #14]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d106      	bne.n	800b548 <pbuf_ref+0x30>
 800b53a:	4b05      	ldr	r3, [pc, #20]	; (800b550 <pbuf_ref+0x38>)
 800b53c:	f240 3242 	movw	r2, #834	; 0x342
 800b540:	4904      	ldr	r1, [pc, #16]	; (800b554 <pbuf_ref+0x3c>)
 800b542:	4805      	ldr	r0, [pc, #20]	; (800b558 <pbuf_ref+0x40>)
 800b544:	f00a faf0 	bl	8015b28 <iprintf>
  }
}
 800b548:	bf00      	nop
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	080171b4 	.word	0x080171b4
 800b554:	08017394 	.word	0x08017394
 800b558:	08017214 	.word	0x08017214

0800b55c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <pbuf_cat+0x16>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d107      	bne.n	800b582 <pbuf_cat+0x26>
 800b572:	4b20      	ldr	r3, [pc, #128]	; (800b5f4 <pbuf_cat+0x98>)
 800b574:	f240 3259 	movw	r2, #857	; 0x359
 800b578:	491f      	ldr	r1, [pc, #124]	; (800b5f8 <pbuf_cat+0x9c>)
 800b57a:	4820      	ldr	r0, [pc, #128]	; (800b5fc <pbuf_cat+0xa0>)
 800b57c:	f00a fad4 	bl	8015b28 <iprintf>
 800b580:	e034      	b.n	800b5ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	e00a      	b.n	800b59e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	891a      	ldrh	r2, [r3, #8]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	891b      	ldrh	r3, [r3, #8]
 800b590:	4413      	add	r3, r2
 800b592:	b29a      	uxth	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1f0      	bne.n	800b588 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	891a      	ldrh	r2, [r3, #8]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	895b      	ldrh	r3, [r3, #10]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d006      	beq.n	800b5c0 <pbuf_cat+0x64>
 800b5b2:	4b10      	ldr	r3, [pc, #64]	; (800b5f4 <pbuf_cat+0x98>)
 800b5b4:	f240 3262 	movw	r2, #866	; 0x362
 800b5b8:	4911      	ldr	r1, [pc, #68]	; (800b600 <pbuf_cat+0xa4>)
 800b5ba:	4810      	ldr	r0, [pc, #64]	; (800b5fc <pbuf_cat+0xa0>)
 800b5bc:	f00a fab4 	bl	8015b28 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d006      	beq.n	800b5d6 <pbuf_cat+0x7a>
 800b5c8:	4b0a      	ldr	r3, [pc, #40]	; (800b5f4 <pbuf_cat+0x98>)
 800b5ca:	f240 3263 	movw	r2, #867	; 0x363
 800b5ce:	490d      	ldr	r1, [pc, #52]	; (800b604 <pbuf_cat+0xa8>)
 800b5d0:	480a      	ldr	r0, [pc, #40]	; (800b5fc <pbuf_cat+0xa0>)
 800b5d2:	f00a faa9 	bl	8015b28 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	891a      	ldrh	r2, [r3, #8]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	891b      	ldrh	r3, [r3, #8]
 800b5de:	4413      	add	r3, r2
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	080171b4 	.word	0x080171b4
 800b5f8:	080173a8 	.word	0x080173a8
 800b5fc:	08017214 	.word	0x08017214
 800b600:	080173e0 	.word	0x080173e0
 800b604:	08017410 	.word	0x08017410

0800b608 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff ffa1 	bl	800b55c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b61a:	6838      	ldr	r0, [r7, #0]
 800b61c:	f7ff ff7c 	bl	800b518 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b632:	2300      	movs	r3, #0
 800b634:	617b      	str	r3, [r7, #20]
 800b636:	2300      	movs	r3, #0
 800b638:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d008      	beq.n	800b652 <pbuf_copy+0x2a>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d005      	beq.n	800b652 <pbuf_copy+0x2a>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	891a      	ldrh	r2, [r3, #8]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	891b      	ldrh	r3, [r3, #8]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d209      	bcs.n	800b666 <pbuf_copy+0x3e>
 800b652:	4b57      	ldr	r3, [pc, #348]	; (800b7b0 <pbuf_copy+0x188>)
 800b654:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b658:	4956      	ldr	r1, [pc, #344]	; (800b7b4 <pbuf_copy+0x18c>)
 800b65a:	4857      	ldr	r0, [pc, #348]	; (800b7b8 <pbuf_copy+0x190>)
 800b65c:	f00a fa64 	bl	8015b28 <iprintf>
 800b660:	f06f 030f 	mvn.w	r3, #15
 800b664:	e09f      	b.n	800b7a6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	895b      	ldrh	r3, [r3, #10]
 800b66a:	461a      	mov	r2, r3
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	895b      	ldrh	r3, [r3, #10]
 800b674:	4619      	mov	r1, r3
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	1acb      	subs	r3, r1, r3
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d306      	bcc.n	800b68c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	895b      	ldrh	r3, [r3, #10]
 800b682:	461a      	mov	r2, r3
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	e005      	b.n	800b698 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	895b      	ldrh	r3, [r3, #10]
 800b690:	461a      	mov	r2, r3
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	18d0      	adds	r0, r2, r3
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	f00a fa26 	bl	8015afc <memcpy>
    offset_to += len;
 800b6b0:	697a      	ldr	r2, [r7, #20]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4413      	add	r3, r2
 800b6be:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	895b      	ldrh	r3, [r3, #10]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d906      	bls.n	800b6da <pbuf_copy+0xb2>
 800b6cc:	4b38      	ldr	r3, [pc, #224]	; (800b7b0 <pbuf_copy+0x188>)
 800b6ce:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b6d2:	493a      	ldr	r1, [pc, #232]	; (800b7bc <pbuf_copy+0x194>)
 800b6d4:	4838      	ldr	r0, [pc, #224]	; (800b7b8 <pbuf_copy+0x190>)
 800b6d6:	f00a fa27 	bl	8015b28 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	895b      	ldrh	r3, [r3, #10]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d906      	bls.n	800b6f4 <pbuf_copy+0xcc>
 800b6e6:	4b32      	ldr	r3, [pc, #200]	; (800b7b0 <pbuf_copy+0x188>)
 800b6e8:	f240 32da 	movw	r2, #986	; 0x3da
 800b6ec:	4934      	ldr	r1, [pc, #208]	; (800b7c0 <pbuf_copy+0x198>)
 800b6ee:	4832      	ldr	r0, [pc, #200]	; (800b7b8 <pbuf_copy+0x190>)
 800b6f0:	f00a fa1a 	bl	8015b28 <iprintf>
    if (offset_from >= p_from->len) {
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	895b      	ldrh	r3, [r3, #10]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d304      	bcc.n	800b70a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	895b      	ldrh	r3, [r3, #10]
 800b70e:	461a      	mov	r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	4293      	cmp	r3, r2
 800b714:	d114      	bne.n	800b740 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10c      	bne.n	800b740 <pbuf_copy+0x118>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d009      	beq.n	800b740 <pbuf_copy+0x118>
 800b72c:	4b20      	ldr	r3, [pc, #128]	; (800b7b0 <pbuf_copy+0x188>)
 800b72e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b732:	4924      	ldr	r1, [pc, #144]	; (800b7c4 <pbuf_copy+0x19c>)
 800b734:	4820      	ldr	r0, [pc, #128]	; (800b7b8 <pbuf_copy+0x190>)
 800b736:	f00a f9f7 	bl	8015b28 <iprintf>
 800b73a:	f06f 030f 	mvn.w	r3, #15
 800b73e:	e032      	b.n	800b7a6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d013      	beq.n	800b76e <pbuf_copy+0x146>
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	895a      	ldrh	r2, [r3, #10]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	891b      	ldrh	r3, [r3, #8]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d10d      	bne.n	800b76e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d009      	beq.n	800b76e <pbuf_copy+0x146>
 800b75a:	4b15      	ldr	r3, [pc, #84]	; (800b7b0 <pbuf_copy+0x188>)
 800b75c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b760:	4919      	ldr	r1, [pc, #100]	; (800b7c8 <pbuf_copy+0x1a0>)
 800b762:	4815      	ldr	r0, [pc, #84]	; (800b7b8 <pbuf_copy+0x190>)
 800b764:	f00a f9e0 	bl	8015b28 <iprintf>
 800b768:	f06f 0305 	mvn.w	r3, #5
 800b76c:	e01b      	b.n	800b7a6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d013      	beq.n	800b79c <pbuf_copy+0x174>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	895a      	ldrh	r2, [r3, #10]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	891b      	ldrh	r3, [r3, #8]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d10d      	bne.n	800b79c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d009      	beq.n	800b79c <pbuf_copy+0x174>
 800b788:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <pbuf_copy+0x188>)
 800b78a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b78e:	490e      	ldr	r1, [pc, #56]	; (800b7c8 <pbuf_copy+0x1a0>)
 800b790:	4809      	ldr	r0, [pc, #36]	; (800b7b8 <pbuf_copy+0x190>)
 800b792:	f00a f9c9 	bl	8015b28 <iprintf>
 800b796:	f06f 0305 	mvn.w	r3, #5
 800b79a:	e004      	b.n	800b7a6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f47f af61 	bne.w	800b666 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3718      	adds	r7, #24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	080171b4 	.word	0x080171b4
 800b7b4:	0801745c 	.word	0x0801745c
 800b7b8:	08017214 	.word	0x08017214
 800b7bc:	0801748c 	.word	0x0801748c
 800b7c0:	080174a4 	.word	0x080174a4
 800b7c4:	080174c0 	.word	0x080174c0
 800b7c8:	080174d0 	.word	0x080174d0

0800b7cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	461a      	mov	r2, r3
 800b7da:	460b      	mov	r3, r1
 800b7dc:	80fb      	strh	r3, [r7, #6]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d108      	bne.n	800b802 <pbuf_copy_partial+0x36>
 800b7f0:	4b2b      	ldr	r3, [pc, #172]	; (800b8a0 <pbuf_copy_partial+0xd4>)
 800b7f2:	f240 420a 	movw	r2, #1034	; 0x40a
 800b7f6:	492b      	ldr	r1, [pc, #172]	; (800b8a4 <pbuf_copy_partial+0xd8>)
 800b7f8:	482b      	ldr	r0, [pc, #172]	; (800b8a8 <pbuf_copy_partial+0xdc>)
 800b7fa:	f00a f995 	bl	8015b28 <iprintf>
 800b7fe:	2300      	movs	r3, #0
 800b800:	e04a      	b.n	800b898 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d108      	bne.n	800b81a <pbuf_copy_partial+0x4e>
 800b808:	4b25      	ldr	r3, [pc, #148]	; (800b8a0 <pbuf_copy_partial+0xd4>)
 800b80a:	f240 420b 	movw	r2, #1035	; 0x40b
 800b80e:	4927      	ldr	r1, [pc, #156]	; (800b8ac <pbuf_copy_partial+0xe0>)
 800b810:	4825      	ldr	r0, [pc, #148]	; (800b8a8 <pbuf_copy_partial+0xdc>)
 800b812:	f00a f989 	bl	8015b28 <iprintf>
 800b816:	2300      	movs	r3, #0
 800b818:	e03e      	b.n	800b898 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	61fb      	str	r3, [r7, #28]
 800b81e:	e034      	b.n	800b88a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b820:	88bb      	ldrh	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <pbuf_copy_partial+0x70>
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	895b      	ldrh	r3, [r3, #10]
 800b82a:	88ba      	ldrh	r2, [r7, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d305      	bcc.n	800b83c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	895b      	ldrh	r3, [r3, #10]
 800b834:	88ba      	ldrh	r2, [r7, #4]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	80bb      	strh	r3, [r7, #4]
 800b83a:	e023      	b.n	800b884 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	895a      	ldrh	r2, [r3, #10]
 800b840:	88bb      	ldrh	r3, [r7, #4]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b846:	8b3a      	ldrh	r2, [r7, #24]
 800b848:	88fb      	ldrh	r3, [r7, #6]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d901      	bls.n	800b852 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b84e:	88fb      	ldrh	r3, [r7, #6]
 800b850:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b852:	8b7b      	ldrh	r3, [r7, #26]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	18d0      	adds	r0, r2, r3
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	88bb      	ldrh	r3, [r7, #4]
 800b85e:	4413      	add	r3, r2
 800b860:	8b3a      	ldrh	r2, [r7, #24]
 800b862:	4619      	mov	r1, r3
 800b864:	f00a f94a 	bl	8015afc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b868:	8afa      	ldrh	r2, [r7, #22]
 800b86a:	8b3b      	ldrh	r3, [r7, #24]
 800b86c:	4413      	add	r3, r2
 800b86e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b870:	8b7a      	ldrh	r2, [r7, #26]
 800b872:	8b3b      	ldrh	r3, [r7, #24]
 800b874:	4413      	add	r3, r2
 800b876:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b878:	88fa      	ldrh	r2, [r7, #6]
 800b87a:	8b3b      	ldrh	r3, [r7, #24]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	61fb      	str	r3, [r7, #28]
 800b88a:	88fb      	ldrh	r3, [r7, #6]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <pbuf_copy_partial+0xca>
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1c4      	bne.n	800b820 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b896:	8afb      	ldrh	r3, [r7, #22]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3720      	adds	r7, #32
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	080171b4 	.word	0x080171b4
 800b8a4:	080174fc 	.word	0x080174fc
 800b8a8:	08017214 	.word	0x08017214
 800b8ac:	0801751c 	.word	0x0801751c

0800b8b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	603a      	str	r2, [r7, #0]
 800b8ba:	71fb      	strb	r3, [r7, #7]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	8919      	ldrh	r1, [r3, #8]
 800b8c4:	88ba      	ldrh	r2, [r7, #4]
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff faa1 	bl	800ae10 <pbuf_alloc>
 800b8ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <pbuf_clone+0x2a>
    return NULL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	e011      	b.n	800b8fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7ff fea3 	bl	800b628 <pbuf_copy>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b8e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d006      	beq.n	800b8fc <pbuf_clone+0x4c>
 800b8ee:	4b06      	ldr	r3, [pc, #24]	; (800b908 <pbuf_clone+0x58>)
 800b8f0:	f240 5224 	movw	r2, #1316	; 0x524
 800b8f4:	4905      	ldr	r1, [pc, #20]	; (800b90c <pbuf_clone+0x5c>)
 800b8f6:	4806      	ldr	r0, [pc, #24]	; (800b910 <pbuf_clone+0x60>)
 800b8f8:	f00a f916 	bl	8015b28 <iprintf>
  return q;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	080171b4 	.word	0x080171b4
 800b90c:	08017628 	.word	0x08017628
 800b910:	08017214 	.word	0x08017214

0800b914 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b918:	f00a f91e 	bl	8015b58 <rand>
 800b91c:	4603      	mov	r3, r0
 800b91e:	b29b      	uxth	r3, r3
 800b920:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b924:	b29b      	uxth	r3, r3
 800b926:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	4b01      	ldr	r3, [pc, #4]	; (800b934 <tcp_init+0x20>)
 800b92e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b930:	bf00      	nop
 800b932:	bd80      	pop	{r7, pc}
 800b934:	20000034 	.word	0x20000034

0800b938 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	7d1b      	ldrb	r3, [r3, #20]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d105      	bne.n	800b954 <tcp_free+0x1c>
 800b948:	4b06      	ldr	r3, [pc, #24]	; (800b964 <tcp_free+0x2c>)
 800b94a:	22d4      	movs	r2, #212	; 0xd4
 800b94c:	4906      	ldr	r1, [pc, #24]	; (800b968 <tcp_free+0x30>)
 800b94e:	4807      	ldr	r0, [pc, #28]	; (800b96c <tcp_free+0x34>)
 800b950:	f00a f8ea 	bl	8015b28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	2001      	movs	r0, #1
 800b958:	f7fe fedc 	bl	800a714 <memp_free>
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	080176b4 	.word	0x080176b4
 800b968:	080176e4 	.word	0x080176e4
 800b96c:	080176f8 	.word	0x080176f8

0800b970 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	7d1b      	ldrb	r3, [r3, #20]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d105      	bne.n	800b98c <tcp_free_listen+0x1c>
 800b980:	4b06      	ldr	r3, [pc, #24]	; (800b99c <tcp_free_listen+0x2c>)
 800b982:	22df      	movs	r2, #223	; 0xdf
 800b984:	4906      	ldr	r1, [pc, #24]	; (800b9a0 <tcp_free_listen+0x30>)
 800b986:	4807      	ldr	r0, [pc, #28]	; (800b9a4 <tcp_free_listen+0x34>)
 800b988:	f00a f8ce 	bl	8015b28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b98c:	6879      	ldr	r1, [r7, #4]
 800b98e:	2002      	movs	r0, #2
 800b990:	f7fe fec0 	bl	800a714 <memp_free>
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	080176b4 	.word	0x080176b4
 800b9a0:	08017720 	.word	0x08017720
 800b9a4:	080176f8 	.word	0x080176f8

0800b9a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b9ac:	f000 fea2 	bl	800c6f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b9b0:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <tcp_tmr+0x28>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <tcp_tmr+0x28>)
 800b9ba:	701a      	strb	r2, [r3, #0]
 800b9bc:	4b04      	ldr	r3, [pc, #16]	; (800b9d0 <tcp_tmr+0x28>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b9c8:	f000 fb54 	bl	800c074 <tcp_slowtmr>
  }
}
 800b9cc:	bf00      	nop
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20008671 	.word	0x20008671

0800b9d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d105      	bne.n	800b9f0 <tcp_remove_listener+0x1c>
 800b9e4:	4b0d      	ldr	r3, [pc, #52]	; (800ba1c <tcp_remove_listener+0x48>)
 800b9e6:	22ff      	movs	r2, #255	; 0xff
 800b9e8:	490d      	ldr	r1, [pc, #52]	; (800ba20 <tcp_remove_listener+0x4c>)
 800b9ea:	480e      	ldr	r0, [pc, #56]	; (800ba24 <tcp_remove_listener+0x50>)
 800b9ec:	f00a f89c 	bl	8015b28 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e00a      	b.n	800ba0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d102      	bne.n	800ba06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1f1      	bne.n	800b9f6 <tcp_remove_listener+0x22>
    }
  }
}
 800ba12:	bf00      	nop
 800ba14:	bf00      	nop
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	080176b4 	.word	0x080176b4
 800ba20:	0801773c 	.word	0x0801773c
 800ba24:	080176f8 	.word	0x080176f8

0800ba28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <tcp_listen_closed+0x1c>
 800ba36:	4b14      	ldr	r3, [pc, #80]	; (800ba88 <tcp_listen_closed+0x60>)
 800ba38:	f240 1211 	movw	r2, #273	; 0x111
 800ba3c:	4913      	ldr	r1, [pc, #76]	; (800ba8c <tcp_listen_closed+0x64>)
 800ba3e:	4814      	ldr	r0, [pc, #80]	; (800ba90 <tcp_listen_closed+0x68>)
 800ba40:	f00a f872 	bl	8015b28 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	7d1b      	ldrb	r3, [r3, #20]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d006      	beq.n	800ba5a <tcp_listen_closed+0x32>
 800ba4c:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <tcp_listen_closed+0x60>)
 800ba4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ba52:	4910      	ldr	r1, [pc, #64]	; (800ba94 <tcp_listen_closed+0x6c>)
 800ba54:	480e      	ldr	r0, [pc, #56]	; (800ba90 <tcp_listen_closed+0x68>)
 800ba56:	f00a f867 	bl	8015b28 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	e00b      	b.n	800ba78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ba60:	4a0d      	ldr	r2, [pc, #52]	; (800ba98 <tcp_listen_closed+0x70>)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6879      	ldr	r1, [r7, #4]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff ffb1 	bl	800b9d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3301      	adds	r3, #1
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d9f0      	bls.n	800ba60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ba7e:	bf00      	nop
 800ba80:	bf00      	nop
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	080176b4 	.word	0x080176b4
 800ba8c:	08017764 	.word	0x08017764
 800ba90:	080176f8 	.word	0x080176f8
 800ba94:	08017770 	.word	0x08017770
 800ba98:	08019a3c 	.word	0x08019a3c

0800ba9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ba9c:	b5b0      	push	{r4, r5, r7, lr}
 800ba9e:	b088      	sub	sp, #32
 800baa0:	af04      	add	r7, sp, #16
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d106      	bne.n	800babc <tcp_close_shutdown+0x20>
 800baae:	4b63      	ldr	r3, [pc, #396]	; (800bc3c <tcp_close_shutdown+0x1a0>)
 800bab0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bab4:	4962      	ldr	r1, [pc, #392]	; (800bc40 <tcp_close_shutdown+0x1a4>)
 800bab6:	4863      	ldr	r0, [pc, #396]	; (800bc44 <tcp_close_shutdown+0x1a8>)
 800bab8:	f00a f836 	bl	8015b28 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800babc:	78fb      	ldrb	r3, [r7, #3]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d066      	beq.n	800bb90 <tcp_close_shutdown+0xf4>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	7d1b      	ldrb	r3, [r3, #20]
 800bac6:	2b04      	cmp	r3, #4
 800bac8:	d003      	beq.n	800bad2 <tcp_close_shutdown+0x36>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	7d1b      	ldrb	r3, [r3, #20]
 800bace:	2b07      	cmp	r3, #7
 800bad0:	d15e      	bne.n	800bb90 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d104      	bne.n	800bae4 <tcp_close_shutdown+0x48>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bade:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bae2:	d055      	beq.n	800bb90 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	8b5b      	ldrh	r3, [r3, #26]
 800bae8:	f003 0310 	and.w	r3, r3, #16
 800baec:	2b00      	cmp	r3, #0
 800baee:	d106      	bne.n	800bafe <tcp_close_shutdown+0x62>
 800baf0:	4b52      	ldr	r3, [pc, #328]	; (800bc3c <tcp_close_shutdown+0x1a0>)
 800baf2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800baf6:	4954      	ldr	r1, [pc, #336]	; (800bc48 <tcp_close_shutdown+0x1ac>)
 800baf8:	4852      	ldr	r0, [pc, #328]	; (800bc44 <tcp_close_shutdown+0x1a8>)
 800bafa:	f00a f815 	bl	8015b28 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bb06:	687d      	ldr	r5, [r7, #4]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	8ad2      	ldrh	r2, [r2, #22]
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	8b09      	ldrh	r1, [r1, #24]
 800bb14:	9102      	str	r1, [sp, #8]
 800bb16:	9201      	str	r2, [sp, #4]
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	462b      	mov	r3, r5
 800bb1c:	4622      	mov	r2, r4
 800bb1e:	4601      	mov	r1, r0
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f004 fe91 	bl	8010848 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f001 f8c6 	bl	800ccb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bb2c:	4b47      	ldr	r3, [pc, #284]	; (800bc4c <tcp_close_shutdown+0x1b0>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d105      	bne.n	800bb42 <tcp_close_shutdown+0xa6>
 800bb36:	4b45      	ldr	r3, [pc, #276]	; (800bc4c <tcp_close_shutdown+0x1b0>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	4a43      	ldr	r2, [pc, #268]	; (800bc4c <tcp_close_shutdown+0x1b0>)
 800bb3e:	6013      	str	r3, [r2, #0]
 800bb40:	e013      	b.n	800bb6a <tcp_close_shutdown+0xce>
 800bb42:	4b42      	ldr	r3, [pc, #264]	; (800bc4c <tcp_close_shutdown+0x1b0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	e00c      	b.n	800bb64 <tcp_close_shutdown+0xc8>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d104      	bne.n	800bb5e <tcp_close_shutdown+0xc2>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	68da      	ldr	r2, [r3, #12]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	60da      	str	r2, [r3, #12]
 800bb5c:	e005      	b.n	800bb6a <tcp_close_shutdown+0xce>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1ef      	bne.n	800bb4a <tcp_close_shutdown+0xae>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	60da      	str	r2, [r3, #12]
 800bb70:	4b37      	ldr	r3, [pc, #220]	; (800bc50 <tcp_close_shutdown+0x1b4>)
 800bb72:	2201      	movs	r2, #1
 800bb74:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bb76:	4b37      	ldr	r3, [pc, #220]	; (800bc54 <tcp_close_shutdown+0x1b8>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d102      	bne.n	800bb86 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bb80:	f003 fd5e 	bl	800f640 <tcp_trigger_input_pcb_close>
 800bb84:	e002      	b.n	800bb8c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff fed6 	bl	800b938 <tcp_free>
      }
      return ERR_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e050      	b.n	800bc32 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7d1b      	ldrb	r3, [r3, #20]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d03b      	beq.n	800bc10 <tcp_close_shutdown+0x174>
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	dc44      	bgt.n	800bc26 <tcp_close_shutdown+0x18a>
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <tcp_close_shutdown+0x10a>
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d02a      	beq.n	800bbfa <tcp_close_shutdown+0x15e>
 800bba4:	e03f      	b.n	800bc26 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	8adb      	ldrh	r3, [r3, #22]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d021      	beq.n	800bbf2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bbae:	4b2a      	ldr	r3, [pc, #168]	; (800bc58 <tcp_close_shutdown+0x1bc>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d105      	bne.n	800bbc4 <tcp_close_shutdown+0x128>
 800bbb8:	4b27      	ldr	r3, [pc, #156]	; (800bc58 <tcp_close_shutdown+0x1bc>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	4a26      	ldr	r2, [pc, #152]	; (800bc58 <tcp_close_shutdown+0x1bc>)
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	e013      	b.n	800bbec <tcp_close_shutdown+0x150>
 800bbc4:	4b24      	ldr	r3, [pc, #144]	; (800bc58 <tcp_close_shutdown+0x1bc>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	60bb      	str	r3, [r7, #8]
 800bbca:	e00c      	b.n	800bbe6 <tcp_close_shutdown+0x14a>
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d104      	bne.n	800bbe0 <tcp_close_shutdown+0x144>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68da      	ldr	r2, [r3, #12]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	60da      	str	r2, [r3, #12]
 800bbde:	e005      	b.n	800bbec <tcp_close_shutdown+0x150>
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	60bb      	str	r3, [r7, #8]
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1ef      	bne.n	800bbcc <tcp_close_shutdown+0x130>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff fea0 	bl	800b938 <tcp_free>
      break;
 800bbf8:	e01a      	b.n	800bc30 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff ff14 	bl	800ba28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bc00:	6879      	ldr	r1, [r7, #4]
 800bc02:	4816      	ldr	r0, [pc, #88]	; (800bc5c <tcp_close_shutdown+0x1c0>)
 800bc04:	f001 f8a8 	bl	800cd58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff feb1 	bl	800b970 <tcp_free_listen>
      break;
 800bc0e:	e00f      	b.n	800bc30 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bc10:	6879      	ldr	r1, [r7, #4]
 800bc12:	480e      	ldr	r0, [pc, #56]	; (800bc4c <tcp_close_shutdown+0x1b0>)
 800bc14:	f001 f8a0 	bl	800cd58 <tcp_pcb_remove>
 800bc18:	4b0d      	ldr	r3, [pc, #52]	; (800bc50 <tcp_close_shutdown+0x1b4>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7ff fe8a 	bl	800b938 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bc24:	e004      	b.n	800bc30 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f81a 	bl	800bc60 <tcp_close_shutdown_fin>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	e000      	b.n	800bc32 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bdb0      	pop	{r4, r5, r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	080176b4 	.word	0x080176b4
 800bc40:	08017788 	.word	0x08017788
 800bc44:	080176f8 	.word	0x080176f8
 800bc48:	080177a8 	.word	0x080177a8
 800bc4c:	20008668 	.word	0x20008668
 800bc50:	20008670 	.word	0x20008670
 800bc54:	200086a8 	.word	0x200086a8
 800bc58:	20008660 	.word	0x20008660
 800bc5c:	20008664 	.word	0x20008664

0800bc60 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <tcp_close_shutdown_fin+0x1c>
 800bc6e:	4b2e      	ldr	r3, [pc, #184]	; (800bd28 <tcp_close_shutdown_fin+0xc8>)
 800bc70:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bc74:	492d      	ldr	r1, [pc, #180]	; (800bd2c <tcp_close_shutdown_fin+0xcc>)
 800bc76:	482e      	ldr	r0, [pc, #184]	; (800bd30 <tcp_close_shutdown_fin+0xd0>)
 800bc78:	f009 ff56 	bl	8015b28 <iprintf>

  switch (pcb->state) {
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	7d1b      	ldrb	r3, [r3, #20]
 800bc80:	2b07      	cmp	r3, #7
 800bc82:	d020      	beq.n	800bcc6 <tcp_close_shutdown_fin+0x66>
 800bc84:	2b07      	cmp	r3, #7
 800bc86:	dc2b      	bgt.n	800bce0 <tcp_close_shutdown_fin+0x80>
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d002      	beq.n	800bc92 <tcp_close_shutdown_fin+0x32>
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d00d      	beq.n	800bcac <tcp_close_shutdown_fin+0x4c>
 800bc90:	e026      	b.n	800bce0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f003 fee6 	bl	800fa64 <tcp_send_fin>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bc9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11f      	bne.n	800bce4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2205      	movs	r2, #5
 800bca8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bcaa:	e01b      	b.n	800bce4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f003 fed9 	bl	800fa64 <tcp_send_fin>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d114      	bne.n	800bce8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2205      	movs	r2, #5
 800bcc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bcc4:	e010      	b.n	800bce8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f003 fecc 	bl	800fa64 <tcp_send_fin>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bcd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d109      	bne.n	800bcec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2209      	movs	r2, #9
 800bcdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bcde:	e005      	b.n	800bcec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	e01c      	b.n	800bd1e <tcp_close_shutdown_fin+0xbe>
      break;
 800bce4:	bf00      	nop
 800bce6:	e002      	b.n	800bcee <tcp_close_shutdown_fin+0x8e>
      break;
 800bce8:	bf00      	nop
 800bcea:	e000      	b.n	800bcee <tcp_close_shutdown_fin+0x8e>
      break;
 800bcec:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bcee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d103      	bne.n	800bcfe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f003 fff2 	bl	800fce0 <tcp_output>
 800bcfc:	e00d      	b.n	800bd1a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bcfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd06:	d108      	bne.n	800bd1a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	8b5b      	ldrh	r3, [r3, #26]
 800bd0c:	f043 0308 	orr.w	r3, r3, #8
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	e001      	b.n	800bd1e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	080176b4 	.word	0x080176b4
 800bd2c:	08017764 	.word	0x08017764
 800bd30:	080176f8 	.word	0x080176f8

0800bd34 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d109      	bne.n	800bd56 <tcp_close+0x22>
 800bd42:	4b0f      	ldr	r3, [pc, #60]	; (800bd80 <tcp_close+0x4c>)
 800bd44:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bd48:	490e      	ldr	r1, [pc, #56]	; (800bd84 <tcp_close+0x50>)
 800bd4a:	480f      	ldr	r0, [pc, #60]	; (800bd88 <tcp_close+0x54>)
 800bd4c:	f009 feec 	bl	8015b28 <iprintf>
 800bd50:	f06f 030f 	mvn.w	r3, #15
 800bd54:	e00f      	b.n	800bd76 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	7d1b      	ldrb	r3, [r3, #20]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d006      	beq.n	800bd6c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	8b5b      	ldrh	r3, [r3, #26]
 800bd62:	f043 0310 	orr.w	r3, r3, #16
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7ff fe94 	bl	800ba9c <tcp_close_shutdown>
 800bd74:	4603      	mov	r3, r0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	080176b4 	.word	0x080176b4
 800bd84:	080177c4 	.word	0x080177c4
 800bd88:	080176f8 	.word	0x080176f8

0800bd8c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08e      	sub	sp, #56	; 0x38
 800bd90:	af04      	add	r7, sp, #16
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d107      	bne.n	800bdac <tcp_abandon+0x20>
 800bd9c:	4b52      	ldr	r3, [pc, #328]	; (800bee8 <tcp_abandon+0x15c>)
 800bd9e:	f240 223d 	movw	r2, #573	; 0x23d
 800bda2:	4952      	ldr	r1, [pc, #328]	; (800beec <tcp_abandon+0x160>)
 800bda4:	4852      	ldr	r0, [pc, #328]	; (800bef0 <tcp_abandon+0x164>)
 800bda6:	f009 febf 	bl	8015b28 <iprintf>
 800bdaa:	e099      	b.n	800bee0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	7d1b      	ldrb	r3, [r3, #20]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d106      	bne.n	800bdc2 <tcp_abandon+0x36>
 800bdb4:	4b4c      	ldr	r3, [pc, #304]	; (800bee8 <tcp_abandon+0x15c>)
 800bdb6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bdba:	494e      	ldr	r1, [pc, #312]	; (800bef4 <tcp_abandon+0x168>)
 800bdbc:	484c      	ldr	r0, [pc, #304]	; (800bef0 <tcp_abandon+0x164>)
 800bdbe:	f009 feb3 	bl	8015b28 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	7d1b      	ldrb	r3, [r3, #20]
 800bdc6:	2b0a      	cmp	r3, #10
 800bdc8:	d107      	bne.n	800bdda <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bdca:	6879      	ldr	r1, [r7, #4]
 800bdcc:	484a      	ldr	r0, [pc, #296]	; (800bef8 <tcp_abandon+0x16c>)
 800bdce:	f000 ffc3 	bl	800cd58 <tcp_pcb_remove>
    tcp_free(pcb);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff fdb0 	bl	800b938 <tcp_free>
 800bdd8:	e082      	b.n	800bee0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7d1b      	ldrb	r3, [r3, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d126      	bne.n	800be52 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	8adb      	ldrh	r3, [r3, #22]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d02e      	beq.n	800be6a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800be0c:	4b3b      	ldr	r3, [pc, #236]	; (800befc <tcp_abandon+0x170>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	429a      	cmp	r2, r3
 800be14:	d105      	bne.n	800be22 <tcp_abandon+0x96>
 800be16:	4b39      	ldr	r3, [pc, #228]	; (800befc <tcp_abandon+0x170>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	4a37      	ldr	r2, [pc, #220]	; (800befc <tcp_abandon+0x170>)
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	e013      	b.n	800be4a <tcp_abandon+0xbe>
 800be22:	4b36      	ldr	r3, [pc, #216]	; (800befc <tcp_abandon+0x170>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	61fb      	str	r3, [r7, #28]
 800be28:	e00c      	b.n	800be44 <tcp_abandon+0xb8>
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	429a      	cmp	r2, r3
 800be32:	d104      	bne.n	800be3e <tcp_abandon+0xb2>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68da      	ldr	r2, [r3, #12]
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	60da      	str	r2, [r3, #12]
 800be3c:	e005      	b.n	800be4a <tcp_abandon+0xbe>
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	61fb      	str	r3, [r7, #28]
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1ef      	bne.n	800be2a <tcp_abandon+0x9e>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	60da      	str	r2, [r3, #12]
 800be50:	e00b      	b.n	800be6a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	8adb      	ldrh	r3, [r3, #22]
 800be5a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	4828      	ldr	r0, [pc, #160]	; (800bf00 <tcp_abandon+0x174>)
 800be60:	f000 ff7a 	bl	800cd58 <tcp_pcb_remove>
 800be64:	4b27      	ldr	r3, [pc, #156]	; (800bf04 <tcp_abandon+0x178>)
 800be66:	2201      	movs	r2, #1
 800be68:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d004      	beq.n	800be7c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fd1c 	bl	800c8b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be80:	2b00      	cmp	r3, #0
 800be82:	d004      	beq.n	800be8e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 fd13 	bl	800c8b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be92:	2b00      	cmp	r3, #0
 800be94:	d004      	beq.n	800bea0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 fd0a 	bl	800c8b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00e      	beq.n	800bec4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bea6:	6879      	ldr	r1, [r7, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3304      	adds	r3, #4
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	8b12      	ldrh	r2, [r2, #24]
 800beb0:	9202      	str	r2, [sp, #8]
 800beb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800beb4:	9201      	str	r2, [sp, #4]
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	460b      	mov	r3, r1
 800beba:	697a      	ldr	r2, [r7, #20]
 800bebc:	69b9      	ldr	r1, [r7, #24]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f004 fcc2 	bl	8010848 <tcp_rst>
    }
    last_state = pcb->state;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	7d1b      	ldrb	r3, [r3, #20]
 800bec8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff fd34 	bl	800b938 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d004      	beq.n	800bee0 <tcp_abandon+0x154>
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	f06f 010c 	mvn.w	r1, #12
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	4798      	blx	r3
  }
}
 800bee0:	3728      	adds	r7, #40	; 0x28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	080176b4 	.word	0x080176b4
 800beec:	080177f8 	.word	0x080177f8
 800bef0:	080176f8 	.word	0x080176f8
 800bef4:	08017814 	.word	0x08017814
 800bef8:	2000866c 	.word	0x2000866c
 800befc:	20008660 	.word	0x20008660
 800bf00:	20008668 	.word	0x20008668
 800bf04:	20008670 	.word	0x20008670

0800bf08 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bf10:	2101      	movs	r1, #1
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff ff3a 	bl	800bd8c <tcp_abandon>
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <tcp_update_rcv_ann_wnd+0x1c>
 800bf2e:	4b25      	ldr	r3, [pc, #148]	; (800bfc4 <tcp_update_rcv_ann_wnd+0xa4>)
 800bf30:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bf34:	4924      	ldr	r1, [pc, #144]	; (800bfc8 <tcp_update_rcv_ann_wnd+0xa8>)
 800bf36:	4825      	ldr	r0, [pc, #148]	; (800bfcc <tcp_update_rcv_ann_wnd+0xac>)
 800bf38:	f009 fdf6 	bl	8015b28 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bf44:	4413      	add	r3, r2
 800bf46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bf50:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bf54:	bf28      	it	cs
 800bf56:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bf5a:	b292      	uxth	r2, r2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	db08      	blt.n	800bf78 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	e020      	b.n	800bfba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	dd03      	ble.n	800bf8e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf8c:	e014      	b.n	800bfb8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa0:	d306      	bcc.n	800bfb0 <tcp_update_rcv_ann_wnd+0x90>
 800bfa2:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <tcp_update_rcv_ann_wnd+0xa4>)
 800bfa4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bfa8:	4909      	ldr	r1, [pc, #36]	; (800bfd0 <tcp_update_rcv_ann_wnd+0xb0>)
 800bfaa:	4808      	ldr	r0, [pc, #32]	; (800bfcc <tcp_update_rcv_ann_wnd+0xac>)
 800bfac:	f009 fdbc 	bl	8015b28 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bfb8:	2300      	movs	r3, #0
  }
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	080176b4 	.word	0x080176b4
 800bfc8:	08017910 	.word	0x08017910
 800bfcc:	080176f8 	.word	0x080176f8
 800bfd0:	08017934 	.word	0x08017934

0800bfd4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	460b      	mov	r3, r1
 800bfde:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d107      	bne.n	800bff6 <tcp_recved+0x22>
 800bfe6:	4b1f      	ldr	r3, [pc, #124]	; (800c064 <tcp_recved+0x90>)
 800bfe8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bfec:	491e      	ldr	r1, [pc, #120]	; (800c068 <tcp_recved+0x94>)
 800bfee:	481f      	ldr	r0, [pc, #124]	; (800c06c <tcp_recved+0x98>)
 800bff0:	f009 fd9a 	bl	8015b28 <iprintf>
 800bff4:	e032      	b.n	800c05c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	7d1b      	ldrb	r3, [r3, #20]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d106      	bne.n	800c00c <tcp_recved+0x38>
 800bffe:	4b19      	ldr	r3, [pc, #100]	; (800c064 <tcp_recved+0x90>)
 800c000:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c004:	491a      	ldr	r1, [pc, #104]	; (800c070 <tcp_recved+0x9c>)
 800c006:	4819      	ldr	r0, [pc, #100]	; (800c06c <tcp_recved+0x98>)
 800c008:	f009 fd8e 	bl	8015b28 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c010:	887b      	ldrh	r3, [r7, #2]
 800c012:	4413      	add	r3, r2
 800c014:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c016:	89fb      	ldrh	r3, [r7, #14]
 800c018:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c01c:	d804      	bhi.n	800c028 <tcp_recved+0x54>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c022:	89fa      	ldrh	r2, [r7, #14]
 800c024:	429a      	cmp	r2, r3
 800c026:	d204      	bcs.n	800c032 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c02e:	851a      	strh	r2, [r3, #40]	; 0x28
 800c030:	e002      	b.n	800c038 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	89fa      	ldrh	r2, [r7, #14]
 800c036:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7ff ff71 	bl	800bf20 <tcp_update_rcv_ann_wnd>
 800c03e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c046:	d309      	bcc.n	800c05c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	8b5b      	ldrh	r3, [r3, #26]
 800c04c:	f043 0302 	orr.w	r3, r3, #2
 800c050:	b29a      	uxth	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f003 fe42 	bl	800fce0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	080176b4 	.word	0x080176b4
 800c068:	08017950 	.word	0x08017950
 800c06c:	080176f8 	.word	0x080176f8
 800c070:	08017968 	.word	0x08017968

0800c074 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c074:	b5b0      	push	{r4, r5, r7, lr}
 800c076:	b090      	sub	sp, #64	; 0x40
 800c078:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c080:	4b94      	ldr	r3, [pc, #592]	; (800c2d4 <tcp_slowtmr+0x260>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3301      	adds	r3, #1
 800c086:	4a93      	ldr	r2, [pc, #588]	; (800c2d4 <tcp_slowtmr+0x260>)
 800c088:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c08a:	4b93      	ldr	r3, [pc, #588]	; (800c2d8 <tcp_slowtmr+0x264>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	3301      	adds	r3, #1
 800c090:	b2da      	uxtb	r2, r3
 800c092:	4b91      	ldr	r3, [pc, #580]	; (800c2d8 <tcp_slowtmr+0x264>)
 800c094:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c096:	2300      	movs	r3, #0
 800c098:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c09a:	4b90      	ldr	r3, [pc, #576]	; (800c2dc <tcp_slowtmr+0x268>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c0a0:	e29f      	b.n	800c5e2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	7d1b      	ldrb	r3, [r3, #20]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d106      	bne.n	800c0b8 <tcp_slowtmr+0x44>
 800c0aa:	4b8d      	ldr	r3, [pc, #564]	; (800c2e0 <tcp_slowtmr+0x26c>)
 800c0ac:	f240 42be 	movw	r2, #1214	; 0x4be
 800c0b0:	498c      	ldr	r1, [pc, #560]	; (800c2e4 <tcp_slowtmr+0x270>)
 800c0b2:	488d      	ldr	r0, [pc, #564]	; (800c2e8 <tcp_slowtmr+0x274>)
 800c0b4:	f009 fd38 	bl	8015b28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	7d1b      	ldrb	r3, [r3, #20]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d106      	bne.n	800c0ce <tcp_slowtmr+0x5a>
 800c0c0:	4b87      	ldr	r3, [pc, #540]	; (800c2e0 <tcp_slowtmr+0x26c>)
 800c0c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c0c6:	4989      	ldr	r1, [pc, #548]	; (800c2ec <tcp_slowtmr+0x278>)
 800c0c8:	4887      	ldr	r0, [pc, #540]	; (800c2e8 <tcp_slowtmr+0x274>)
 800c0ca:	f009 fd2d 	bl	8015b28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d0:	7d1b      	ldrb	r3, [r3, #20]
 800c0d2:	2b0a      	cmp	r3, #10
 800c0d4:	d106      	bne.n	800c0e4 <tcp_slowtmr+0x70>
 800c0d6:	4b82      	ldr	r3, [pc, #520]	; (800c2e0 <tcp_slowtmr+0x26c>)
 800c0d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c0dc:	4984      	ldr	r1, [pc, #528]	; (800c2f0 <tcp_slowtmr+0x27c>)
 800c0de:	4882      	ldr	r0, [pc, #520]	; (800c2e8 <tcp_slowtmr+0x274>)
 800c0e0:	f009 fd22 	bl	8015b28 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	7f9a      	ldrb	r2, [r3, #30]
 800c0e8:	4b7b      	ldr	r3, [pc, #492]	; (800c2d8 <tcp_slowtmr+0x264>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d105      	bne.n	800c0fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c0fa:	e272      	b.n	800c5e2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c0fc:	4b76      	ldr	r3, [pc, #472]	; (800c2d8 <tcp_slowtmr+0x264>)
 800c0fe:	781a      	ldrb	r2, [r3, #0]
 800c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c102:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	7d1b      	ldrb	r3, [r3, #20]
 800c114:	2b02      	cmp	r3, #2
 800c116:	d10a      	bne.n	800c12e <tcp_slowtmr+0xba>
 800c118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c11e:	2b05      	cmp	r3, #5
 800c120:	d905      	bls.n	800c12e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c126:	3301      	adds	r3, #1
 800c128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c12c:	e11e      	b.n	800c36c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c134:	2b0b      	cmp	r3, #11
 800c136:	d905      	bls.n	800c144 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13c:	3301      	adds	r3, #1
 800c13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c142:	e113      	b.n	800c36c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c146:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d075      	beq.n	800c23a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c152:	2b00      	cmp	r3, #0
 800c154:	d006      	beq.n	800c164 <tcp_slowtmr+0xf0>
 800c156:	4b62      	ldr	r3, [pc, #392]	; (800c2e0 <tcp_slowtmr+0x26c>)
 800c158:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c15c:	4965      	ldr	r1, [pc, #404]	; (800c2f4 <tcp_slowtmr+0x280>)
 800c15e:	4862      	ldr	r0, [pc, #392]	; (800c2e8 <tcp_slowtmr+0x274>)
 800c160:	f009 fce2 	bl	8015b28 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d106      	bne.n	800c17a <tcp_slowtmr+0x106>
 800c16c:	4b5c      	ldr	r3, [pc, #368]	; (800c2e0 <tcp_slowtmr+0x26c>)
 800c16e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c172:	4961      	ldr	r1, [pc, #388]	; (800c2f8 <tcp_slowtmr+0x284>)
 800c174:	485c      	ldr	r0, [pc, #368]	; (800c2e8 <tcp_slowtmr+0x274>)
 800c176:	f009 fcd7 	bl	8015b28 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c180:	2b0b      	cmp	r3, #11
 800c182:	d905      	bls.n	800c190 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c188:	3301      	adds	r3, #1
 800c18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c18e:	e0ed      	b.n	800c36c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c196:	3b01      	subs	r3, #1
 800c198:	4a58      	ldr	r2, [pc, #352]	; (800c2fc <tcp_slowtmr+0x288>)
 800c19a:	5cd3      	ldrb	r3, [r2, r3]
 800c19c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c1a4:	7c7a      	ldrb	r2, [r7, #17]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d907      	bls.n	800c1ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c1c0:	7c7a      	ldrb	r2, [r7, #17]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	f200 80d2 	bhi.w	800c36c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d108      	bne.n	800c1e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c1d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1d8:	f004 fc2a 	bl	8010a30 <tcp_zero_window_probe>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d014      	beq.n	800c20c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	623b      	str	r3, [r7, #32]
 800c1e6:	e011      	b.n	800c20c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1f2:	f003 faef 	bl	800f7d4 <tcp_split_unsent_seg>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d107      	bne.n	800c20c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c1fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1fe:	f003 fd6f 	bl	800fce0 <tcp_output>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d101      	bne.n	800c20c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 80ac 	beq.w	800c36c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c222:	2b06      	cmp	r3, #6
 800c224:	f200 80a2 	bhi.w	800c36c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c22e:	3301      	adds	r3, #1
 800c230:	b2da      	uxtb	r2, r3
 800c232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c234:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c238:	e098      	b.n	800c36c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c240:	2b00      	cmp	r3, #0
 800c242:	db0f      	blt.n	800c264 <tcp_slowtmr+0x1f0>
 800c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c246:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c24a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c24e:	4293      	cmp	r3, r2
 800c250:	d008      	beq.n	800c264 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c258:	b29b      	uxth	r3, r3
 800c25a:	3301      	adds	r3, #1
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	b21a      	sxth	r2, r3
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c266:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c270:	429a      	cmp	r2, r3
 800c272:	db7b      	blt.n	800c36c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c276:	f004 f825 	bl	80102c4 <tcp_rexmit_rto_prepare>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d007      	beq.n	800c290 <tcp_slowtmr+0x21c>
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c284:	2b00      	cmp	r3, #0
 800c286:	d171      	bne.n	800c36c <tcp_slowtmr+0x2f8>
 800c288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d06d      	beq.n	800c36c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	7d1b      	ldrb	r3, [r3, #20]
 800c294:	2b02      	cmp	r3, #2
 800c296:	d03a      	beq.n	800c30e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c29e:	2b0c      	cmp	r3, #12
 800c2a0:	bf28      	it	cs
 800c2a2:	230c      	movcs	r3, #12
 800c2a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c2ac:	10db      	asrs	r3, r3, #3
 800c2ae:	b21b      	sxth	r3, r3
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c2b8:	4413      	add	r3, r2
 800c2ba:	7efa      	ldrb	r2, [r7, #27]
 800c2bc:	4910      	ldr	r1, [pc, #64]	; (800c300 <tcp_slowtmr+0x28c>)
 800c2be:	5c8a      	ldrb	r2, [r1, r2]
 800c2c0:	4093      	lsls	r3, r2
 800c2c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	dc1a      	bgt.n	800c304 <tcp_slowtmr+0x290>
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	b21a      	sxth	r2, r3
 800c2d2:	e019      	b.n	800c308 <tcp_slowtmr+0x294>
 800c2d4:	2000865c 	.word	0x2000865c
 800c2d8:	20008672 	.word	0x20008672
 800c2dc:	20008668 	.word	0x20008668
 800c2e0:	080176b4 	.word	0x080176b4
 800c2e4:	080179f8 	.word	0x080179f8
 800c2e8:	080176f8 	.word	0x080176f8
 800c2ec:	08017a24 	.word	0x08017a24
 800c2f0:	08017a50 	.word	0x08017a50
 800c2f4:	08017a80 	.word	0x08017a80
 800c2f8:	08017ab4 	.word	0x08017ab4
 800c2fc:	08019a34 	.word	0x08019a34
 800c300:	08019a24 	.word	0x08019a24
 800c304:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c310:	2200      	movs	r2, #0
 800c312:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c316:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c320:	4293      	cmp	r3, r2
 800c322:	bf28      	it	cs
 800c324:	4613      	movcs	r3, r2
 800c326:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c328:	8a7b      	ldrh	r3, [r7, #18]
 800c32a:	085b      	lsrs	r3, r3, #1
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c330:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	b29b      	uxth	r3, r3
 800c342:	429a      	cmp	r2, r3
 800c344:	d206      	bcs.n	800c354 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	2200      	movs	r2, #0
 800c362:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c368:	f004 f81c 	bl	80103a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36e:	7d1b      	ldrb	r3, [r3, #20]
 800c370:	2b06      	cmp	r3, #6
 800c372:	d111      	bne.n	800c398 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	8b5b      	ldrh	r3, [r3, #26]
 800c378:	f003 0310 	and.w	r3, r3, #16
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00b      	beq.n	800c398 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c380:	4b9d      	ldr	r3, [pc, #628]	; (800c5f8 <tcp_slowtmr+0x584>)
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	6a1b      	ldr	r3, [r3, #32]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	2b28      	cmp	r3, #40	; 0x28
 800c38c:	d904      	bls.n	800c398 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c392:	3301      	adds	r3, #1
 800c394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39a:	7a5b      	ldrb	r3, [r3, #9]
 800c39c:	f003 0308 	and.w	r3, r3, #8
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d04c      	beq.n	800c43e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c3a8:	2b04      	cmp	r3, #4
 800c3aa:	d003      	beq.n	800c3b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c3b0:	2b07      	cmp	r3, #7
 800c3b2:	d144      	bne.n	800c43e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c3b4:	4b90      	ldr	r3, [pc, #576]	; (800c5f8 <tcp_slowtmr+0x584>)
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	6a1b      	ldr	r3, [r3, #32]
 800c3bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3c4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c3c8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c3cc:	498b      	ldr	r1, [pc, #556]	; (800c5fc <tcp_slowtmr+0x588>)
 800c3ce:	fba1 1303 	umull	r1, r3, r1, r3
 800c3d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d90a      	bls.n	800c3ee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3dc:	3301      	adds	r3, #1
 800c3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c3e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3ec:	e027      	b.n	800c43e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c3ee:	4b82      	ldr	r3, [pc, #520]	; (800c5f8 <tcp_slowtmr+0x584>)
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c400:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c404:	4618      	mov	r0, r3
 800c406:	4b7e      	ldr	r3, [pc, #504]	; (800c600 <tcp_slowtmr+0x58c>)
 800c408:	fb00 f303 	mul.w	r3, r0, r3
 800c40c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c40e:	497b      	ldr	r1, [pc, #492]	; (800c5fc <tcp_slowtmr+0x588>)
 800c410:	fba1 1303 	umull	r1, r3, r1, r3
 800c414:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c416:	429a      	cmp	r2, r3
 800c418:	d911      	bls.n	800c43e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c41a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c41c:	f004 fac8 	bl	80109b0 <tcp_keepalive>
 800c420:	4603      	mov	r3, r0
 800c422:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c426:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d107      	bne.n	800c43e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c430:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c434:	3301      	adds	r3, #1
 800c436:	b2da      	uxtb	r2, r3
 800c438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c442:	2b00      	cmp	r3, #0
 800c444:	d011      	beq.n	800c46a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c446:	4b6c      	ldr	r3, [pc, #432]	; (800c5f8 <tcp_slowtmr+0x584>)
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	1ad2      	subs	r2, r2, r3
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c456:	4619      	mov	r1, r3
 800c458:	460b      	mov	r3, r1
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	440b      	add	r3, r1
 800c45e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c460:	429a      	cmp	r2, r3
 800c462:	d302      	bcc.n	800c46a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c466:	f000 fddb 	bl	800d020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46c:	7d1b      	ldrb	r3, [r3, #20]
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d10b      	bne.n	800c48a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c472:	4b61      	ldr	r3, [pc, #388]	; (800c5f8 <tcp_slowtmr+0x584>)
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	2b28      	cmp	r3, #40	; 0x28
 800c47e:	d904      	bls.n	800c48a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c484:	3301      	adds	r3, #1
 800c486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48c:	7d1b      	ldrb	r3, [r3, #20]
 800c48e:	2b09      	cmp	r3, #9
 800c490:	d10b      	bne.n	800c4aa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c492:	4b59      	ldr	r3, [pc, #356]	; (800c5f8 <tcp_slowtmr+0x584>)
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	2bf0      	cmp	r3, #240	; 0xf0
 800c49e:	d904      	bls.n	800c4aa <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d060      	beq.n	800c574 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c4ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4bc:	f000 fbfc 	bl	800ccb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d010      	beq.n	800c4e8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c4c6:	4b4f      	ldr	r3, [pc, #316]	; (800c604 <tcp_slowtmr+0x590>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d106      	bne.n	800c4de <tcp_slowtmr+0x46a>
 800c4d0:	4b4d      	ldr	r3, [pc, #308]	; (800c608 <tcp_slowtmr+0x594>)
 800c4d2:	f240 526d 	movw	r2, #1389	; 0x56d
 800c4d6:	494d      	ldr	r1, [pc, #308]	; (800c60c <tcp_slowtmr+0x598>)
 800c4d8:	484d      	ldr	r0, [pc, #308]	; (800c610 <tcp_slowtmr+0x59c>)
 800c4da:	f009 fb25 	bl	8015b28 <iprintf>
        prev->next = pcb->next;
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	68da      	ldr	r2, [r3, #12]
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	60da      	str	r2, [r3, #12]
 800c4e6:	e00f      	b.n	800c508 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c4e8:	4b46      	ldr	r3, [pc, #280]	; (800c604 <tcp_slowtmr+0x590>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d006      	beq.n	800c500 <tcp_slowtmr+0x48c>
 800c4f2:	4b45      	ldr	r3, [pc, #276]	; (800c608 <tcp_slowtmr+0x594>)
 800c4f4:	f240 5271 	movw	r2, #1393	; 0x571
 800c4f8:	4946      	ldr	r1, [pc, #280]	; (800c614 <tcp_slowtmr+0x5a0>)
 800c4fa:	4845      	ldr	r0, [pc, #276]	; (800c610 <tcp_slowtmr+0x59c>)
 800c4fc:	f009 fb14 	bl	8015b28 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	4a3f      	ldr	r2, [pc, #252]	; (800c604 <tcp_slowtmr+0x590>)
 800c506:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d013      	beq.n	800c538 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c516:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c518:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	3304      	adds	r3, #4
 800c51e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c520:	8ad2      	ldrh	r2, [r2, #22]
 800c522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c524:	8b09      	ldrh	r1, [r1, #24]
 800c526:	9102      	str	r1, [sp, #8]
 800c528:	9201      	str	r2, [sp, #4]
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	462b      	mov	r3, r5
 800c52e:	4622      	mov	r2, r4
 800c530:	4601      	mov	r1, r0
 800c532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c534:	f004 f988 	bl	8010848 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c540:	7d1b      	ldrb	r3, [r3, #20]
 800c542:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c546:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c54e:	6838      	ldr	r0, [r7, #0]
 800c550:	f7ff f9f2 	bl	800b938 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c554:	4b30      	ldr	r3, [pc, #192]	; (800c618 <tcp_slowtmr+0x5a4>)
 800c556:	2200      	movs	r2, #0
 800c558:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d004      	beq.n	800c56a <tcp_slowtmr+0x4f6>
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f06f 010c 	mvn.w	r1, #12
 800c566:	68b8      	ldr	r0, [r7, #8]
 800c568:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c56a:	4b2b      	ldr	r3, [pc, #172]	; (800c618 <tcp_slowtmr+0x5a4>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d037      	beq.n	800c5e2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c572:	e590      	b.n	800c096 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c580:	7f1b      	ldrb	r3, [r3, #28]
 800c582:	3301      	adds	r3, #1
 800c584:	b2da      	uxtb	r2, r3
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	7f1a      	ldrb	r2, [r3, #28]
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	7f5b      	ldrb	r3, [r3, #29]
 800c592:	429a      	cmp	r2, r3
 800c594:	d325      	bcc.n	800c5e2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c598:	2200      	movs	r2, #0
 800c59a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c59c:	4b1e      	ldr	r3, [pc, #120]	; (800c618 <tcp_slowtmr+0x5a4>)
 800c59e:	2200      	movs	r2, #0
 800c5a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00b      	beq.n	800c5c4 <tcp_slowtmr+0x550>
 800c5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5b4:	6912      	ldr	r2, [r2, #16]
 800c5b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	4798      	blx	r3
 800c5bc:	4603      	mov	r3, r0
 800c5be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c5c2:	e002      	b.n	800c5ca <tcp_slowtmr+0x556>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c5ca:	4b13      	ldr	r3, [pc, #76]	; (800c618 <tcp_slowtmr+0x5a4>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d000      	beq.n	800c5d4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c5d2:	e560      	b.n	800c096 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c5d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d102      	bne.n	800c5e2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5de:	f003 fb7f 	bl	800fce0 <tcp_output>
  while (pcb != NULL) {
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f47f ad5c 	bne.w	800c0a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c5ee:	4b0b      	ldr	r3, [pc, #44]	; (800c61c <tcp_slowtmr+0x5a8>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c5f4:	e067      	b.n	800c6c6 <tcp_slowtmr+0x652>
 800c5f6:	bf00      	nop
 800c5f8:	2000865c 	.word	0x2000865c
 800c5fc:	10624dd3 	.word	0x10624dd3
 800c600:	000124f8 	.word	0x000124f8
 800c604:	20008668 	.word	0x20008668
 800c608:	080176b4 	.word	0x080176b4
 800c60c:	08017aec 	.word	0x08017aec
 800c610:	080176f8 	.word	0x080176f8
 800c614:	08017b18 	.word	0x08017b18
 800c618:	20008670 	.word	0x20008670
 800c61c:	2000866c 	.word	0x2000866c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	7d1b      	ldrb	r3, [r3, #20]
 800c624:	2b0a      	cmp	r3, #10
 800c626:	d006      	beq.n	800c636 <tcp_slowtmr+0x5c2>
 800c628:	4b2b      	ldr	r3, [pc, #172]	; (800c6d8 <tcp_slowtmr+0x664>)
 800c62a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c62e:	492b      	ldr	r1, [pc, #172]	; (800c6dc <tcp_slowtmr+0x668>)
 800c630:	482b      	ldr	r0, [pc, #172]	; (800c6e0 <tcp_slowtmr+0x66c>)
 800c632:	f009 fa79 	bl	8015b28 <iprintf>
    pcb_remove = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c63c:	4b29      	ldr	r3, [pc, #164]	; (800c6e4 <tcp_slowtmr+0x670>)
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c642:	6a1b      	ldr	r3, [r3, #32]
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	2bf0      	cmp	r3, #240	; 0xf0
 800c648:	d904      	bls.n	800c654 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c64a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c64e:	3301      	adds	r3, #1
 800c650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d02f      	beq.n	800c6bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c65c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c65e:	f000 fb2b 	bl	800ccb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	2b00      	cmp	r3, #0
 800c666:	d010      	beq.n	800c68a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c668:	4b1f      	ldr	r3, [pc, #124]	; (800c6e8 <tcp_slowtmr+0x674>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c66e:	429a      	cmp	r2, r3
 800c670:	d106      	bne.n	800c680 <tcp_slowtmr+0x60c>
 800c672:	4b19      	ldr	r3, [pc, #100]	; (800c6d8 <tcp_slowtmr+0x664>)
 800c674:	f240 52af 	movw	r2, #1455	; 0x5af
 800c678:	491c      	ldr	r1, [pc, #112]	; (800c6ec <tcp_slowtmr+0x678>)
 800c67a:	4819      	ldr	r0, [pc, #100]	; (800c6e0 <tcp_slowtmr+0x66c>)
 800c67c:	f009 fa54 	bl	8015b28 <iprintf>
        prev->next = pcb->next;
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	68da      	ldr	r2, [r3, #12]
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	60da      	str	r2, [r3, #12]
 800c688:	e00f      	b.n	800c6aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c68a:	4b17      	ldr	r3, [pc, #92]	; (800c6e8 <tcp_slowtmr+0x674>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c690:	429a      	cmp	r2, r3
 800c692:	d006      	beq.n	800c6a2 <tcp_slowtmr+0x62e>
 800c694:	4b10      	ldr	r3, [pc, #64]	; (800c6d8 <tcp_slowtmr+0x664>)
 800c696:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c69a:	4915      	ldr	r1, [pc, #84]	; (800c6f0 <tcp_slowtmr+0x67c>)
 800c69c:	4810      	ldr	r0, [pc, #64]	; (800c6e0 <tcp_slowtmr+0x66c>)
 800c69e:	f009 fa43 	bl	8015b28 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	4a10      	ldr	r2, [pc, #64]	; (800c6e8 <tcp_slowtmr+0x674>)
 800c6a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c6b4:	69f8      	ldr	r0, [r7, #28]
 800c6b6:	f7ff f93f 	bl	800b938 <tcp_free>
 800c6ba:	e004      	b.n	800c6c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1a9      	bne.n	800c620 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c6cc:	bf00      	nop
 800c6ce:	bf00      	nop
 800c6d0:	3730      	adds	r7, #48	; 0x30
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	080176b4 	.word	0x080176b4
 800c6dc:	08017b44 	.word	0x08017b44
 800c6e0:	080176f8 	.word	0x080176f8
 800c6e4:	2000865c 	.word	0x2000865c
 800c6e8:	2000866c 	.word	0x2000866c
 800c6ec:	08017b74 	.word	0x08017b74
 800c6f0:	08017b9c 	.word	0x08017b9c

0800c6f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c6fa:	4b2d      	ldr	r3, [pc, #180]	; (800c7b0 <tcp_fasttmr+0xbc>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	3301      	adds	r3, #1
 800c700:	b2da      	uxtb	r2, r3
 800c702:	4b2b      	ldr	r3, [pc, #172]	; (800c7b0 <tcp_fasttmr+0xbc>)
 800c704:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c706:	4b2b      	ldr	r3, [pc, #172]	; (800c7b4 <tcp_fasttmr+0xc0>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c70c:	e048      	b.n	800c7a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	7f9a      	ldrb	r2, [r3, #30]
 800c712:	4b27      	ldr	r3, [pc, #156]	; (800c7b0 <tcp_fasttmr+0xbc>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	429a      	cmp	r2, r3
 800c718:	d03f      	beq.n	800c79a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c71a:	4b25      	ldr	r3, [pc, #148]	; (800c7b0 <tcp_fasttmr+0xbc>)
 800c71c:	781a      	ldrb	r2, [r3, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	8b5b      	ldrh	r3, [r3, #26]
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d010      	beq.n	800c750 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	8b5b      	ldrh	r3, [r3, #26]
 800c732:	f043 0302 	orr.w	r3, r3, #2
 800c736:	b29a      	uxth	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f003 facf 	bl	800fce0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	8b5b      	ldrh	r3, [r3, #26]
 800c746:	f023 0303 	bic.w	r3, r3, #3
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	8b5b      	ldrh	r3, [r3, #26]
 800c754:	f003 0308 	and.w	r3, r3, #8
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d009      	beq.n	800c770 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	8b5b      	ldrh	r3, [r3, #26]
 800c760:	f023 0308 	bic.w	r3, r3, #8
 800c764:	b29a      	uxth	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7ff fa78 	bl	800bc60 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00a      	beq.n	800c794 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c77e:	4b0e      	ldr	r3, [pc, #56]	; (800c7b8 <tcp_fasttmr+0xc4>)
 800c780:	2200      	movs	r2, #0
 800c782:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f819 	bl	800c7bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c78a:	4b0b      	ldr	r3, [pc, #44]	; (800c7b8 <tcp_fasttmr+0xc4>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d000      	beq.n	800c794 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c792:	e7b8      	b.n	800c706 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	607b      	str	r3, [r7, #4]
 800c798:	e002      	b.n	800c7a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1b3      	bne.n	800c70e <tcp_fasttmr+0x1a>
    }
  }
}
 800c7a6:	bf00      	nop
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	20008672 	.word	0x20008672
 800c7b4:	20008668 	.word	0x20008668
 800c7b8:	20008670 	.word	0x20008670

0800c7bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c7bc:	b590      	push	{r4, r7, lr}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d109      	bne.n	800c7de <tcp_process_refused_data+0x22>
 800c7ca:	4b37      	ldr	r3, [pc, #220]	; (800c8a8 <tcp_process_refused_data+0xec>)
 800c7cc:	f240 6209 	movw	r2, #1545	; 0x609
 800c7d0:	4936      	ldr	r1, [pc, #216]	; (800c8ac <tcp_process_refused_data+0xf0>)
 800c7d2:	4837      	ldr	r0, [pc, #220]	; (800c8b0 <tcp_process_refused_data+0xf4>)
 800c7d4:	f009 f9a8 	bl	8015b28 <iprintf>
 800c7d8:	f06f 030f 	mvn.w	r3, #15
 800c7dc:	e060      	b.n	800c8a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7e2:	7b5b      	ldrb	r3, [r3, #13]
 800c7e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00b      	beq.n	800c814 <tcp_process_refused_data+0x58>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6918      	ldr	r0, [r3, #16]
 800c806:	2300      	movs	r3, #0
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	47a0      	blx	r4
 800c80e:	4603      	mov	r3, r0
 800c810:	73fb      	strb	r3, [r7, #15]
 800c812:	e007      	b.n	800c824 <tcp_process_refused_data+0x68>
 800c814:	2300      	movs	r3, #0
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	2000      	movs	r0, #0
 800c81c:	f000 f8a4 	bl	800c968 <tcp_recv_null>
 800c820:	4603      	mov	r3, r0
 800c822:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d12a      	bne.n	800c882 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c82c:	7bbb      	ldrb	r3, [r7, #14]
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b00      	cmp	r3, #0
 800c834:	d033      	beq.n	800c89e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c83a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c83e:	d005      	beq.n	800c84c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c844:	3301      	adds	r3, #1
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00b      	beq.n	800c86e <tcp_process_refused_data+0xb2>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6918      	ldr	r0, [r3, #16]
 800c860:	2300      	movs	r3, #0
 800c862:	2200      	movs	r2, #0
 800c864:	6879      	ldr	r1, [r7, #4]
 800c866:	47a0      	blx	r4
 800c868:	4603      	mov	r3, r0
 800c86a:	73fb      	strb	r3, [r7, #15]
 800c86c:	e001      	b.n	800c872 <tcp_process_refused_data+0xb6>
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c876:	f113 0f0d 	cmn.w	r3, #13
 800c87a:	d110      	bne.n	800c89e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c87c:	f06f 030c 	mvn.w	r3, #12
 800c880:	e00e      	b.n	800c8a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c886:	f113 0f0d 	cmn.w	r3, #13
 800c88a:	d102      	bne.n	800c892 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c88c:	f06f 030c 	mvn.w	r3, #12
 800c890:	e006      	b.n	800c8a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c898:	f06f 0304 	mvn.w	r3, #4
 800c89c:	e000      	b.n	800c8a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd90      	pop	{r4, r7, pc}
 800c8a8:	080176b4 	.word	0x080176b4
 800c8ac:	08017bc4 	.word	0x08017bc4
 800c8b0:	080176f8 	.word	0x080176f8

0800c8b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c8bc:	e007      	b.n	800c8ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f80a 	bl	800c8de <tcp_seg_free>
    seg = next;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1f4      	bne.n	800c8be <tcp_segs_free+0xa>
  }
}
 800c8d4:	bf00      	nop
 800c8d6:	bf00      	nop
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00c      	beq.n	800c906 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d004      	beq.n	800c8fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fe fd6d 	bl	800b3d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	2003      	movs	r0, #3
 800c902:	f7fd ff07 	bl	800a714 <memp_free>
  }
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
	...

0800c910 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <tcp_seg_copy+0x1c>
 800c91e:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <tcp_seg_copy+0x4c>)
 800c920:	f240 6282 	movw	r2, #1666	; 0x682
 800c924:	490e      	ldr	r1, [pc, #56]	; (800c960 <tcp_seg_copy+0x50>)
 800c926:	480f      	ldr	r0, [pc, #60]	; (800c964 <tcp_seg_copy+0x54>)
 800c928:	f009 f8fe 	bl	8015b28 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c92c:	2003      	movs	r0, #3
 800c92e:	f7fd fe81 	bl	800a634 <memp_malloc>
 800c932:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <tcp_seg_copy+0x2e>
    return NULL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	e00a      	b.n	800c954 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c93e:	2210      	movs	r2, #16
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f009 f8da 	bl	8015afc <memcpy>
  pbuf_ref(cseg->p);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fe fde3 	bl	800b518 <pbuf_ref>
  return cseg;
 800c952:	68fb      	ldr	r3, [r7, #12]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	080176b4 	.word	0x080176b4
 800c960:	08017c08 	.word	0x08017c08
 800c964:	080176f8 	.word	0x080176f8

0800c968 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d109      	bne.n	800c990 <tcp_recv_null+0x28>
 800c97c:	4b12      	ldr	r3, [pc, #72]	; (800c9c8 <tcp_recv_null+0x60>)
 800c97e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c982:	4912      	ldr	r1, [pc, #72]	; (800c9cc <tcp_recv_null+0x64>)
 800c984:	4812      	ldr	r0, [pc, #72]	; (800c9d0 <tcp_recv_null+0x68>)
 800c986:	f009 f8cf 	bl	8015b28 <iprintf>
 800c98a:	f06f 030f 	mvn.w	r3, #15
 800c98e:	e016      	b.n	800c9be <tcp_recv_null+0x56>

  if (p != NULL) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d009      	beq.n	800c9aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	891b      	ldrh	r3, [r3, #8]
 800c99a:	4619      	mov	r1, r3
 800c99c:	68b8      	ldr	r0, [r7, #8]
 800c99e:	f7ff fb19 	bl	800bfd4 <tcp_recved>
    pbuf_free(p);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7fe fd18 	bl	800b3d8 <pbuf_free>
 800c9a8:	e008      	b.n	800c9bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c9aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d104      	bne.n	800c9bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c9b2:	68b8      	ldr	r0, [r7, #8]
 800c9b4:	f7ff f9be 	bl	800bd34 <tcp_close>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	e000      	b.n	800c9be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	080176b4 	.word	0x080176b4
 800c9cc:	08017c24 	.word	0x08017c24
 800c9d0:	080176f8 	.word	0x080176f8

0800c9d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c9de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	db01      	blt.n	800c9ea <tcp_kill_prio+0x16>
 800c9e6:	79fb      	ldrb	r3, [r7, #7]
 800c9e8:	e000      	b.n	800c9ec <tcp_kill_prio+0x18>
 800c9ea:	237f      	movs	r3, #127	; 0x7f
 800c9ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d034      	beq.n	800ca5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c9f4:	7afb      	ldrb	r3, [r7, #11]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca02:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <tcp_kill_prio+0x94>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	617b      	str	r3, [r7, #20]
 800ca08:	e01f      	b.n	800ca4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	7d5b      	ldrb	r3, [r3, #21]
 800ca0e:	7afa      	ldrb	r2, [r7, #11]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d80c      	bhi.n	800ca2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ca18:	7afa      	ldrb	r2, [r7, #11]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d112      	bne.n	800ca44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ca1e:	4b13      	ldr	r3, [pc, #76]	; (800ca6c <tcp_kill_prio+0x98>)
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d80a      	bhi.n	800ca44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ca2e:	4b0f      	ldr	r3, [pc, #60]	; (800ca6c <tcp_kill_prio+0x98>)
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	7d5b      	ldrb	r3, [r3, #21]
 800ca42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1dc      	bne.n	800ca0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d004      	beq.n	800ca60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ca56:	6938      	ldr	r0, [r7, #16]
 800ca58:	f7ff fa56 	bl	800bf08 <tcp_abort>
 800ca5c:	e000      	b.n	800ca60 <tcp_kill_prio+0x8c>
    return;
 800ca5e:	bf00      	nop
  }
}
 800ca60:	3718      	adds	r7, #24
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20008668 	.word	0x20008668
 800ca6c:	2000865c 	.word	0x2000865c

0800ca70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ca7a:	79fb      	ldrb	r3, [r7, #7]
 800ca7c:	2b08      	cmp	r3, #8
 800ca7e:	d009      	beq.n	800ca94 <tcp_kill_state+0x24>
 800ca80:	79fb      	ldrb	r3, [r7, #7]
 800ca82:	2b09      	cmp	r3, #9
 800ca84:	d006      	beq.n	800ca94 <tcp_kill_state+0x24>
 800ca86:	4b1a      	ldr	r3, [pc, #104]	; (800caf0 <tcp_kill_state+0x80>)
 800ca88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ca8c:	4919      	ldr	r1, [pc, #100]	; (800caf4 <tcp_kill_state+0x84>)
 800ca8e:	481a      	ldr	r0, [pc, #104]	; (800caf8 <tcp_kill_state+0x88>)
 800ca90:	f009 f84a 	bl	8015b28 <iprintf>

  inactivity = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca9c:	4b17      	ldr	r3, [pc, #92]	; (800cafc <tcp_kill_state+0x8c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	617b      	str	r3, [r7, #20]
 800caa2:	e017      	b.n	800cad4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	7d1b      	ldrb	r3, [r3, #20]
 800caa8:	79fa      	ldrb	r2, [r7, #7]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d10f      	bne.n	800cace <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800caae:	4b14      	ldr	r3, [pc, #80]	; (800cb00 <tcp_kill_state+0x90>)
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	6a1b      	ldr	r3, [r3, #32]
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d807      	bhi.n	800cace <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cabe:	4b10      	ldr	r3, [pc, #64]	; (800cb00 <tcp_kill_state+0x90>)
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	6a1b      	ldr	r3, [r3, #32]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	617b      	str	r3, [r7, #20]
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1e4      	bne.n	800caa4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d003      	beq.n	800cae8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cae0:	2100      	movs	r1, #0
 800cae2:	6938      	ldr	r0, [r7, #16]
 800cae4:	f7ff f952 	bl	800bd8c <tcp_abandon>
  }
}
 800cae8:	bf00      	nop
 800caea:	3718      	adds	r7, #24
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	080176b4 	.word	0x080176b4
 800caf4:	08017c40 	.word	0x08017c40
 800caf8:	080176f8 	.word	0x080176f8
 800cafc:	20008668 	.word	0x20008668
 800cb00:	2000865c 	.word	0x2000865c

0800cb04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb12:	4b12      	ldr	r3, [pc, #72]	; (800cb5c <tcp_kill_timewait+0x58>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	e012      	b.n	800cb40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cb1a:	4b11      	ldr	r3, [pc, #68]	; (800cb60 <tcp_kill_timewait+0x5c>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d807      	bhi.n	800cb3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	; (800cb60 <tcp_kill_timewait+0x5c>)
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	60fb      	str	r3, [r7, #12]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1e9      	bne.n	800cb1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d002      	beq.n	800cb52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cb4c:	68b8      	ldr	r0, [r7, #8]
 800cb4e:	f7ff f9db 	bl	800bf08 <tcp_abort>
  }
}
 800cb52:	bf00      	nop
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	2000866c 	.word	0x2000866c
 800cb60:	2000865c 	.word	0x2000865c

0800cb64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cb6a:	4b10      	ldr	r3, [pc, #64]	; (800cbac <tcp_handle_closepend+0x48>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cb70:	e014      	b.n	800cb9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	8b5b      	ldrh	r3, [r3, #26]
 800cb7c:	f003 0308 	and.w	r3, r3, #8
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d009      	beq.n	800cb98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	8b5b      	ldrh	r3, [r3, #26]
 800cb88:	f023 0308 	bic.w	r3, r3, #8
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7ff f864 	bl	800bc60 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1e7      	bne.n	800cb72 <tcp_handle_closepend+0xe>
  }
}
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20008668 	.word	0x20008668

0800cbb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cbba:	2001      	movs	r0, #1
 800cbbc:	f7fd fd3a 	bl	800a634 <memp_malloc>
 800cbc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d126      	bne.n	800cc16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cbc8:	f7ff ffcc 	bl	800cb64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cbcc:	f7ff ff9a 	bl	800cb04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cbd0:	2001      	movs	r0, #1
 800cbd2:	f7fd fd2f 	bl	800a634 <memp_malloc>
 800cbd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d11b      	bne.n	800cc16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cbde:	2009      	movs	r0, #9
 800cbe0:	f7ff ff46 	bl	800ca70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	f7fd fd25 	bl	800a634 <memp_malloc>
 800cbea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d111      	bne.n	800cc16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cbf2:	2008      	movs	r0, #8
 800cbf4:	f7ff ff3c 	bl	800ca70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	f7fd fd1b 	bl	800a634 <memp_malloc>
 800cbfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d107      	bne.n	800cc16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cc06:	79fb      	ldrb	r3, [r7, #7]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff fee3 	bl	800c9d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cc0e:	2001      	movs	r0, #1
 800cc10:	f7fd fd10 	bl	800a634 <memp_malloc>
 800cc14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d03f      	beq.n	800cc9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cc1c:	229c      	movs	r2, #156	; 0x9c
 800cc1e:	2100      	movs	r1, #0
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f008 ff79 	bl	8015b18 <memset>
    pcb->prio = prio;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	79fa      	ldrb	r2, [r7, #7]
 800cc2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cc32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cc3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	22ff      	movs	r2, #255	; 0xff
 800cc4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cc52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2206      	movs	r2, #6
 800cc58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2206      	movs	r2, #6
 800cc60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cc72:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <tcp_alloc+0xf8>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <tcp_alloc+0xfc>)
 800cc7c:	781a      	ldrb	r2, [r3, #0]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cc88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4a08      	ldr	r2, [pc, #32]	; (800ccb0 <tcp_alloc+0x100>)
 800cc90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4a07      	ldr	r2, [pc, #28]	; (800ccb4 <tcp_alloc+0x104>)
 800cc98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	2000865c 	.word	0x2000865c
 800ccac:	20008672 	.word	0x20008672
 800ccb0:	0800c969 	.word	0x0800c969
 800ccb4:	006ddd00 	.word	0x006ddd00

0800ccb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d107      	bne.n	800ccd6 <tcp_pcb_purge+0x1e>
 800ccc6:	4b21      	ldr	r3, [pc, #132]	; (800cd4c <tcp_pcb_purge+0x94>)
 800ccc8:	f640 0251 	movw	r2, #2129	; 0x851
 800cccc:	4920      	ldr	r1, [pc, #128]	; (800cd50 <tcp_pcb_purge+0x98>)
 800ccce:	4821      	ldr	r0, [pc, #132]	; (800cd54 <tcp_pcb_purge+0x9c>)
 800ccd0:	f008 ff2a 	bl	8015b28 <iprintf>
 800ccd4:	e037      	b.n	800cd46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	7d1b      	ldrb	r3, [r3, #20]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d033      	beq.n	800cd46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cce2:	2b0a      	cmp	r3, #10
 800cce4:	d02f      	beq.n	800cd46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d02b      	beq.n	800cd46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d007      	beq.n	800cd06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fb6c 	bl	800b3d8 <pbuf_free>
      pcb->refused_data = NULL;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f986 	bl	800d020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7ff fdc7 	bl	800c8b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7ff fdc2 	bl	800c8b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	66da      	str	r2, [r3, #108]	; 0x6c
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	080176b4 	.word	0x080176b4
 800cd50:	08017d00 	.word	0x08017d00
 800cd54:	080176f8 	.word	0x080176f8

0800cd58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d106      	bne.n	800cd76 <tcp_pcb_remove+0x1e>
 800cd68:	4b3e      	ldr	r3, [pc, #248]	; (800ce64 <tcp_pcb_remove+0x10c>)
 800cd6a:	f640 0283 	movw	r2, #2179	; 0x883
 800cd6e:	493e      	ldr	r1, [pc, #248]	; (800ce68 <tcp_pcb_remove+0x110>)
 800cd70:	483e      	ldr	r0, [pc, #248]	; (800ce6c <tcp_pcb_remove+0x114>)
 800cd72:	f008 fed9 	bl	8015b28 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d106      	bne.n	800cd8a <tcp_pcb_remove+0x32>
 800cd7c:	4b39      	ldr	r3, [pc, #228]	; (800ce64 <tcp_pcb_remove+0x10c>)
 800cd7e:	f640 0284 	movw	r2, #2180	; 0x884
 800cd82:	493b      	ldr	r1, [pc, #236]	; (800ce70 <tcp_pcb_remove+0x118>)
 800cd84:	4839      	ldr	r0, [pc, #228]	; (800ce6c <tcp_pcb_remove+0x114>)
 800cd86:	f008 fecf 	bl	8015b28 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d105      	bne.n	800cda0 <tcp_pcb_remove+0x48>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68da      	ldr	r2, [r3, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	601a      	str	r2, [r3, #0]
 800cd9e:	e013      	b.n	800cdc8 <tcp_pcb_remove+0x70>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	60fb      	str	r3, [r7, #12]
 800cda6:	e00c      	b.n	800cdc2 <tcp_pcb_remove+0x6a>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	683a      	ldr	r2, [r7, #0]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d104      	bne.n	800cdbc <tcp_pcb_remove+0x64>
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	68da      	ldr	r2, [r3, #12]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	60da      	str	r2, [r3, #12]
 800cdba:	e005      	b.n	800cdc8 <tcp_pcb_remove+0x70>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1ef      	bne.n	800cda8 <tcp_pcb_remove+0x50>
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cdce:	6838      	ldr	r0, [r7, #0]
 800cdd0:	f7ff ff72 	bl	800ccb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	7d1b      	ldrb	r3, [r3, #20]
 800cdd8:	2b0a      	cmp	r3, #10
 800cdda:	d013      	beq.n	800ce04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d00f      	beq.n	800ce04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	8b5b      	ldrh	r3, [r3, #26]
 800cde8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d009      	beq.n	800ce04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	8b5b      	ldrh	r3, [r3, #26]
 800cdf4:	f043 0302 	orr.w	r3, r3, #2
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cdfe:	6838      	ldr	r0, [r7, #0]
 800ce00:	f002 ff6e 	bl	800fce0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	7d1b      	ldrb	r3, [r3, #20]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d020      	beq.n	800ce4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d006      	beq.n	800ce22 <tcp_pcb_remove+0xca>
 800ce14:	4b13      	ldr	r3, [pc, #76]	; (800ce64 <tcp_pcb_remove+0x10c>)
 800ce16:	f640 0293 	movw	r2, #2195	; 0x893
 800ce1a:	4916      	ldr	r1, [pc, #88]	; (800ce74 <tcp_pcb_remove+0x11c>)
 800ce1c:	4813      	ldr	r0, [pc, #76]	; (800ce6c <tcp_pcb_remove+0x114>)
 800ce1e:	f008 fe83 	bl	8015b28 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d006      	beq.n	800ce38 <tcp_pcb_remove+0xe0>
 800ce2a:	4b0e      	ldr	r3, [pc, #56]	; (800ce64 <tcp_pcb_remove+0x10c>)
 800ce2c:	f640 0294 	movw	r2, #2196	; 0x894
 800ce30:	4911      	ldr	r1, [pc, #68]	; (800ce78 <tcp_pcb_remove+0x120>)
 800ce32:	480e      	ldr	r0, [pc, #56]	; (800ce6c <tcp_pcb_remove+0x114>)
 800ce34:	f008 fe78 	bl	8015b28 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d006      	beq.n	800ce4e <tcp_pcb_remove+0xf6>
 800ce40:	4b08      	ldr	r3, [pc, #32]	; (800ce64 <tcp_pcb_remove+0x10c>)
 800ce42:	f640 0296 	movw	r2, #2198	; 0x896
 800ce46:	490d      	ldr	r1, [pc, #52]	; (800ce7c <tcp_pcb_remove+0x124>)
 800ce48:	4808      	ldr	r0, [pc, #32]	; (800ce6c <tcp_pcb_remove+0x114>)
 800ce4a:	f008 fe6d 	bl	8015b28 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	2200      	movs	r2, #0
 800ce52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2200      	movs	r2, #0
 800ce58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ce5a:	bf00      	nop
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	080176b4 	.word	0x080176b4
 800ce68:	08017d1c 	.word	0x08017d1c
 800ce6c:	080176f8 	.word	0x080176f8
 800ce70:	08017d38 	.word	0x08017d38
 800ce74:	08017d58 	.word	0x08017d58
 800ce78:	08017d70 	.word	0x08017d70
 800ce7c:	08017d8c 	.word	0x08017d8c

0800ce80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d106      	bne.n	800ce9c <tcp_next_iss+0x1c>
 800ce8e:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <tcp_next_iss+0x38>)
 800ce90:	f640 02af 	movw	r2, #2223	; 0x8af
 800ce94:	4909      	ldr	r1, [pc, #36]	; (800cebc <tcp_next_iss+0x3c>)
 800ce96:	480a      	ldr	r0, [pc, #40]	; (800cec0 <tcp_next_iss+0x40>)
 800ce98:	f008 fe46 	bl	8015b28 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ce9c:	4b09      	ldr	r3, [pc, #36]	; (800cec4 <tcp_next_iss+0x44>)
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	4b09      	ldr	r3, [pc, #36]	; (800cec8 <tcp_next_iss+0x48>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4413      	add	r3, r2
 800cea6:	4a07      	ldr	r2, [pc, #28]	; (800cec4 <tcp_next_iss+0x44>)
 800cea8:	6013      	str	r3, [r2, #0]
  return iss;
 800ceaa:	4b06      	ldr	r3, [pc, #24]	; (800cec4 <tcp_next_iss+0x44>)
 800ceac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	080176b4 	.word	0x080176b4
 800cebc:	08017da4 	.word	0x08017da4
 800cec0:	080176f8 	.word	0x080176f8
 800cec4:	20000038 	.word	0x20000038
 800cec8:	2000865c 	.word	0x2000865c

0800cecc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	607a      	str	r2, [r7, #4]
 800ced8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d106      	bne.n	800ceee <tcp_eff_send_mss_netif+0x22>
 800cee0:	4b14      	ldr	r3, [pc, #80]	; (800cf34 <tcp_eff_send_mss_netif+0x68>)
 800cee2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800cee6:	4914      	ldr	r1, [pc, #80]	; (800cf38 <tcp_eff_send_mss_netif+0x6c>)
 800cee8:	4814      	ldr	r0, [pc, #80]	; (800cf3c <tcp_eff_send_mss_netif+0x70>)
 800ceea:	f008 fe1d 	bl	8015b28 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cef4:	89fb      	ldrh	r3, [r7, #14]
 800cef6:	e019      	b.n	800cf2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cefc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cefe:	8afb      	ldrh	r3, [r7, #22]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d012      	beq.n	800cf2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cf04:	2328      	movs	r3, #40	; 0x28
 800cf06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cf08:	8afa      	ldrh	r2, [r7, #22]
 800cf0a:	8abb      	ldrh	r3, [r7, #20]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d904      	bls.n	800cf1a <tcp_eff_send_mss_netif+0x4e>
 800cf10:	8afa      	ldrh	r2, [r7, #22]
 800cf12:	8abb      	ldrh	r3, [r7, #20]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	e000      	b.n	800cf1c <tcp_eff_send_mss_netif+0x50>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cf1e:	8a7a      	ldrh	r2, [r7, #18]
 800cf20:	89fb      	ldrh	r3, [r7, #14]
 800cf22:	4293      	cmp	r3, r2
 800cf24:	bf28      	it	cs
 800cf26:	4613      	movcs	r3, r2
 800cf28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cf2a:	89fb      	ldrh	r3, [r7, #14]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3718      	adds	r7, #24
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	080176b4 	.word	0x080176b4
 800cf38:	08017dc0 	.word	0x08017dc0
 800cf3c:	080176f8 	.word	0x080176f8

0800cf40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d119      	bne.n	800cf88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cf54:	4b10      	ldr	r3, [pc, #64]	; (800cf98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cf56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cf5a:	4910      	ldr	r1, [pc, #64]	; (800cf9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cf5c:	4810      	ldr	r0, [pc, #64]	; (800cfa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cf5e:	f008 fde3 	bl	8015b28 <iprintf>

  while (pcb != NULL) {
 800cf62:	e011      	b.n	800cf88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d108      	bne.n	800cf82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7fe ffc6 	bl	800bf08 <tcp_abort>
      pcb = next;
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	60fb      	str	r3, [r7, #12]
 800cf80:	e002      	b.n	800cf88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1ea      	bne.n	800cf64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cf8e:	bf00      	nop
 800cf90:	bf00      	nop
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	080176b4 	.word	0x080176b4
 800cf9c:	08017de8 	.word	0x08017de8
 800cfa0:	080176f8 	.word	0x080176f8

0800cfa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d02a      	beq.n	800d00a <tcp_netif_ip_addr_changed+0x66>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d026      	beq.n	800d00a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cfbc:	4b15      	ldr	r3, [pc, #84]	; (800d014 <tcp_netif_ip_addr_changed+0x70>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff ffbc 	bl	800cf40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cfc8:	4b13      	ldr	r3, [pc, #76]	; (800d018 <tcp_netif_ip_addr_changed+0x74>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff ffb6 	bl	800cf40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d017      	beq.n	800d00a <tcp_netif_ip_addr_changed+0x66>
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d013      	beq.n	800d00a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cfe2:	4b0e      	ldr	r3, [pc, #56]	; (800d01c <tcp_netif_ip_addr_changed+0x78>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	e00c      	b.n	800d004 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d103      	bne.n	800cffe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	60fb      	str	r3, [r7, #12]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1ef      	bne.n	800cfea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20008668 	.word	0x20008668
 800d018:	20008660 	.word	0x20008660
 800d01c:	20008664 	.word	0x20008664

0800d020 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d007      	beq.n	800d040 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d034:	4618      	mov	r0, r3
 800d036:	f7ff fc3d 	bl	800c8b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d048:	b590      	push	{r4, r7, lr}
 800d04a:	b08d      	sub	sp, #52	; 0x34
 800d04c:	af04      	add	r7, sp, #16
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d105      	bne.n	800d064 <tcp_input+0x1c>
 800d058:	4b9b      	ldr	r3, [pc, #620]	; (800d2c8 <tcp_input+0x280>)
 800d05a:	2283      	movs	r2, #131	; 0x83
 800d05c:	499b      	ldr	r1, [pc, #620]	; (800d2cc <tcp_input+0x284>)
 800d05e:	489c      	ldr	r0, [pc, #624]	; (800d2d0 <tcp_input+0x288>)
 800d060:	f008 fd62 	bl	8015b28 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	4a9a      	ldr	r2, [pc, #616]	; (800d2d4 <tcp_input+0x28c>)
 800d06a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	895b      	ldrh	r3, [r3, #10]
 800d070:	2b13      	cmp	r3, #19
 800d072:	f240 83d1 	bls.w	800d818 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d076:	4b98      	ldr	r3, [pc, #608]	; (800d2d8 <tcp_input+0x290>)
 800d078:	695b      	ldr	r3, [r3, #20]
 800d07a:	4a97      	ldr	r2, [pc, #604]	; (800d2d8 <tcp_input+0x290>)
 800d07c:	6812      	ldr	r2, [r2, #0]
 800d07e:	4611      	mov	r1, r2
 800d080:	4618      	mov	r0, r3
 800d082:	f007 fdb1 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f040 83c7 	bne.w	800d81c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d08e:	4b92      	ldr	r3, [pc, #584]	; (800d2d8 <tcp_input+0x290>)
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d096:	2be0      	cmp	r3, #224	; 0xe0
 800d098:	f000 83c0 	beq.w	800d81c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d09c:	4b8d      	ldr	r3, [pc, #564]	; (800d2d4 <tcp_input+0x28c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	899b      	ldrh	r3, [r3, #12]
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7fc fd95 	bl	8009bd4 <lwip_htons>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	0b1b      	lsrs	r3, r3, #12
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d0b6:	7cbb      	ldrb	r3, [r7, #18]
 800d0b8:	2b13      	cmp	r3, #19
 800d0ba:	f240 83b1 	bls.w	800d820 <tcp_input+0x7d8>
 800d0be:	7cbb      	ldrb	r3, [r7, #18]
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	891b      	ldrh	r3, [r3, #8]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	f200 83aa 	bhi.w	800d820 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d0cc:	7cbb      	ldrb	r3, [r7, #18]
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	3b14      	subs	r3, #20
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	4b81      	ldr	r3, [pc, #516]	; (800d2dc <tcp_input+0x294>)
 800d0d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d0d8:	4b81      	ldr	r3, [pc, #516]	; (800d2e0 <tcp_input+0x298>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	895a      	ldrh	r2, [r3, #10]
 800d0e2:	7cbb      	ldrb	r3, [r7, #18]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d309      	bcc.n	800d0fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d0ea:	4b7c      	ldr	r3, [pc, #496]	; (800d2dc <tcp_input+0x294>)
 800d0ec:	881a      	ldrh	r2, [r3, #0]
 800d0ee:	4b7d      	ldr	r3, [pc, #500]	; (800d2e4 <tcp_input+0x29c>)
 800d0f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d0f2:	7cbb      	ldrb	r3, [r7, #18]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7fe f8e8 	bl	800b2cc <pbuf_remove_header>
 800d0fc:	e04e      	b.n	800d19c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d105      	bne.n	800d112 <tcp_input+0xca>
 800d106:	4b70      	ldr	r3, [pc, #448]	; (800d2c8 <tcp_input+0x280>)
 800d108:	22c2      	movs	r2, #194	; 0xc2
 800d10a:	4977      	ldr	r1, [pc, #476]	; (800d2e8 <tcp_input+0x2a0>)
 800d10c:	4870      	ldr	r0, [pc, #448]	; (800d2d0 <tcp_input+0x288>)
 800d10e:	f008 fd0b 	bl	8015b28 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d112:	2114      	movs	r1, #20
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7fe f8d9 	bl	800b2cc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	895a      	ldrh	r2, [r3, #10]
 800d11e:	4b71      	ldr	r3, [pc, #452]	; (800d2e4 <tcp_input+0x29c>)
 800d120:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d122:	4b6e      	ldr	r3, [pc, #440]	; (800d2dc <tcp_input+0x294>)
 800d124:	881a      	ldrh	r2, [r3, #0]
 800d126:	4b6f      	ldr	r3, [pc, #444]	; (800d2e4 <tcp_input+0x29c>)
 800d128:	881b      	ldrh	r3, [r3, #0]
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d12e:	4b6d      	ldr	r3, [pc, #436]	; (800d2e4 <tcp_input+0x29c>)
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7fe f8c9 	bl	800b2cc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	895b      	ldrh	r3, [r3, #10]
 800d140:	8a3a      	ldrh	r2, [r7, #16]
 800d142:	429a      	cmp	r2, r3
 800d144:	f200 836e 	bhi.w	800d824 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	4a64      	ldr	r2, [pc, #400]	; (800d2e0 <tcp_input+0x298>)
 800d150:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	8a3a      	ldrh	r2, [r7, #16]
 800d158:	4611      	mov	r1, r2
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe f8b6 	bl	800b2cc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	891a      	ldrh	r2, [r3, #8]
 800d164:	8a3b      	ldrh	r3, [r7, #16]
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	b29a      	uxth	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	895b      	ldrh	r3, [r3, #10]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d005      	beq.n	800d182 <tcp_input+0x13a>
 800d176:	4b54      	ldr	r3, [pc, #336]	; (800d2c8 <tcp_input+0x280>)
 800d178:	22df      	movs	r2, #223	; 0xdf
 800d17a:	495c      	ldr	r1, [pc, #368]	; (800d2ec <tcp_input+0x2a4>)
 800d17c:	4854      	ldr	r0, [pc, #336]	; (800d2d0 <tcp_input+0x288>)
 800d17e:	f008 fcd3 	bl	8015b28 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	891a      	ldrh	r2, [r3, #8]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	891b      	ldrh	r3, [r3, #8]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d005      	beq.n	800d19c <tcp_input+0x154>
 800d190:	4b4d      	ldr	r3, [pc, #308]	; (800d2c8 <tcp_input+0x280>)
 800d192:	22e0      	movs	r2, #224	; 0xe0
 800d194:	4956      	ldr	r1, [pc, #344]	; (800d2f0 <tcp_input+0x2a8>)
 800d196:	484e      	ldr	r0, [pc, #312]	; (800d2d0 <tcp_input+0x288>)
 800d198:	f008 fcc6 	bl	8015b28 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d19c:	4b4d      	ldr	r3, [pc, #308]	; (800d2d4 <tcp_input+0x28c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	4a4b      	ldr	r2, [pc, #300]	; (800d2d4 <tcp_input+0x28c>)
 800d1a6:	6814      	ldr	r4, [r2, #0]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fc fd13 	bl	8009bd4 <lwip_htons>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d1b2:	4b48      	ldr	r3, [pc, #288]	; (800d2d4 <tcp_input+0x28c>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	885b      	ldrh	r3, [r3, #2]
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	4a46      	ldr	r2, [pc, #280]	; (800d2d4 <tcp_input+0x28c>)
 800d1bc:	6814      	ldr	r4, [r2, #0]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fc fd08 	bl	8009bd4 <lwip_htons>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d1c8:	4b42      	ldr	r3, [pc, #264]	; (800d2d4 <tcp_input+0x28c>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	4a41      	ldr	r2, [pc, #260]	; (800d2d4 <tcp_input+0x28c>)
 800d1d0:	6814      	ldr	r4, [r2, #0]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fc fd13 	bl	8009bfe <lwip_htonl>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	6063      	str	r3, [r4, #4]
 800d1dc:	6863      	ldr	r3, [r4, #4]
 800d1de:	4a45      	ldr	r2, [pc, #276]	; (800d2f4 <tcp_input+0x2ac>)
 800d1e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d1e2:	4b3c      	ldr	r3, [pc, #240]	; (800d2d4 <tcp_input+0x28c>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	4a3a      	ldr	r2, [pc, #232]	; (800d2d4 <tcp_input+0x28c>)
 800d1ea:	6814      	ldr	r4, [r2, #0]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fc fd06 	bl	8009bfe <lwip_htonl>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	60a3      	str	r3, [r4, #8]
 800d1f6:	68a3      	ldr	r3, [r4, #8]
 800d1f8:	4a3f      	ldr	r2, [pc, #252]	; (800d2f8 <tcp_input+0x2b0>)
 800d1fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d1fc:	4b35      	ldr	r3, [pc, #212]	; (800d2d4 <tcp_input+0x28c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	89db      	ldrh	r3, [r3, #14]
 800d202:	b29b      	uxth	r3, r3
 800d204:	4a33      	ldr	r2, [pc, #204]	; (800d2d4 <tcp_input+0x28c>)
 800d206:	6814      	ldr	r4, [r2, #0]
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fc fce3 	bl	8009bd4 <lwip_htons>
 800d20e:	4603      	mov	r3, r0
 800d210:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d212:	4b30      	ldr	r3, [pc, #192]	; (800d2d4 <tcp_input+0x28c>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	899b      	ldrh	r3, [r3, #12]
 800d218:	b29b      	uxth	r3, r3
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fc fcda 	bl	8009bd4 <lwip_htons>
 800d220:	4603      	mov	r3, r0
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b34      	ldr	r3, [pc, #208]	; (800d2fc <tcp_input+0x2b4>)
 800d22c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	891a      	ldrh	r2, [r3, #8]
 800d232:	4b33      	ldr	r3, [pc, #204]	; (800d300 <tcp_input+0x2b8>)
 800d234:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d236:	4b31      	ldr	r3, [pc, #196]	; (800d2fc <tcp_input+0x2b4>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	f003 0303 	and.w	r3, r3, #3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00c      	beq.n	800d25c <tcp_input+0x214>
    tcplen++;
 800d242:	4b2f      	ldr	r3, [pc, #188]	; (800d300 <tcp_input+0x2b8>)
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	3301      	adds	r3, #1
 800d248:	b29a      	uxth	r2, r3
 800d24a:	4b2d      	ldr	r3, [pc, #180]	; (800d300 <tcp_input+0x2b8>)
 800d24c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	891a      	ldrh	r2, [r3, #8]
 800d252:	4b2b      	ldr	r3, [pc, #172]	; (800d300 <tcp_input+0x2b8>)
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	429a      	cmp	r2, r3
 800d258:	f200 82e6 	bhi.w	800d828 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d25c:	2300      	movs	r3, #0
 800d25e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d260:	4b28      	ldr	r3, [pc, #160]	; (800d304 <tcp_input+0x2bc>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	61fb      	str	r3, [r7, #28]
 800d266:	e09d      	b.n	800d3a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	7d1b      	ldrb	r3, [r3, #20]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d105      	bne.n	800d27c <tcp_input+0x234>
 800d270:	4b15      	ldr	r3, [pc, #84]	; (800d2c8 <tcp_input+0x280>)
 800d272:	22fb      	movs	r2, #251	; 0xfb
 800d274:	4924      	ldr	r1, [pc, #144]	; (800d308 <tcp_input+0x2c0>)
 800d276:	4816      	ldr	r0, [pc, #88]	; (800d2d0 <tcp_input+0x288>)
 800d278:	f008 fc56 	bl	8015b28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	7d1b      	ldrb	r3, [r3, #20]
 800d280:	2b0a      	cmp	r3, #10
 800d282:	d105      	bne.n	800d290 <tcp_input+0x248>
 800d284:	4b10      	ldr	r3, [pc, #64]	; (800d2c8 <tcp_input+0x280>)
 800d286:	22fc      	movs	r2, #252	; 0xfc
 800d288:	4920      	ldr	r1, [pc, #128]	; (800d30c <tcp_input+0x2c4>)
 800d28a:	4811      	ldr	r0, [pc, #68]	; (800d2d0 <tcp_input+0x288>)
 800d28c:	f008 fc4c 	bl	8015b28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	7d1b      	ldrb	r3, [r3, #20]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d105      	bne.n	800d2a4 <tcp_input+0x25c>
 800d298:	4b0b      	ldr	r3, [pc, #44]	; (800d2c8 <tcp_input+0x280>)
 800d29a:	22fd      	movs	r2, #253	; 0xfd
 800d29c:	491c      	ldr	r1, [pc, #112]	; (800d310 <tcp_input+0x2c8>)
 800d29e:	480c      	ldr	r0, [pc, #48]	; (800d2d0 <tcp_input+0x288>)
 800d2a0:	f008 fc42 	bl	8015b28 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	7a1b      	ldrb	r3, [r3, #8]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d033      	beq.n	800d314 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	7a1a      	ldrb	r2, [r3, #8]
 800d2b0:	4b09      	ldr	r3, [pc, #36]	; (800d2d8 <tcp_input+0x290>)
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d029      	beq.n	800d314 <tcp_input+0x2cc>
      prev = pcb;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	61bb      	str	r3, [r7, #24]
      continue;
 800d2c4:	e06b      	b.n	800d39e <tcp_input+0x356>
 800d2c6:	bf00      	nop
 800d2c8:	08017e1c 	.word	0x08017e1c
 800d2cc:	08017e50 	.word	0x08017e50
 800d2d0:	08017e68 	.word	0x08017e68
 800d2d4:	20008684 	.word	0x20008684
 800d2d8:	20005720 	.word	0x20005720
 800d2dc:	20008688 	.word	0x20008688
 800d2e0:	2000868c 	.word	0x2000868c
 800d2e4:	2000868a 	.word	0x2000868a
 800d2e8:	08017e90 	.word	0x08017e90
 800d2ec:	08017ea0 	.word	0x08017ea0
 800d2f0:	08017eac 	.word	0x08017eac
 800d2f4:	20008694 	.word	0x20008694
 800d2f8:	20008698 	.word	0x20008698
 800d2fc:	200086a0 	.word	0x200086a0
 800d300:	2000869e 	.word	0x2000869e
 800d304:	20008668 	.word	0x20008668
 800d308:	08017ecc 	.word	0x08017ecc
 800d30c:	08017ef4 	.word	0x08017ef4
 800d310:	08017f20 	.word	0x08017f20
    }

    if (pcb->remote_port == tcphdr->src &&
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	8b1a      	ldrh	r2, [r3, #24]
 800d318:	4b72      	ldr	r3, [pc, #456]	; (800d4e4 <tcp_input+0x49c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	b29b      	uxth	r3, r3
 800d320:	429a      	cmp	r2, r3
 800d322:	d13a      	bne.n	800d39a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	8ada      	ldrh	r2, [r3, #22]
 800d328:	4b6e      	ldr	r3, [pc, #440]	; (800d4e4 <tcp_input+0x49c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	885b      	ldrh	r3, [r3, #2]
 800d32e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d330:	429a      	cmp	r2, r3
 800d332:	d132      	bne.n	800d39a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	4b6b      	ldr	r3, [pc, #428]	; (800d4e8 <tcp_input+0x4a0>)
 800d33a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d12c      	bne.n	800d39a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	4b68      	ldr	r3, [pc, #416]	; (800d4e8 <tcp_input+0x4a0>)
 800d346:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d348:	429a      	cmp	r2, r3
 800d34a:	d126      	bne.n	800d39a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	69fa      	ldr	r2, [r7, #28]
 800d352:	429a      	cmp	r2, r3
 800d354:	d106      	bne.n	800d364 <tcp_input+0x31c>
 800d356:	4b65      	ldr	r3, [pc, #404]	; (800d4ec <tcp_input+0x4a4>)
 800d358:	f240 120d 	movw	r2, #269	; 0x10d
 800d35c:	4964      	ldr	r1, [pc, #400]	; (800d4f0 <tcp_input+0x4a8>)
 800d35e:	4865      	ldr	r0, [pc, #404]	; (800d4f4 <tcp_input+0x4ac>)
 800d360:	f008 fbe2 	bl	8015b28 <iprintf>
      if (prev != NULL) {
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00a      	beq.n	800d380 <tcp_input+0x338>
        prev->next = pcb->next;
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	68da      	ldr	r2, [r3, #12]
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d372:	4b61      	ldr	r3, [pc, #388]	; (800d4f8 <tcp_input+0x4b0>)
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d37a:	4a5f      	ldr	r2, [pc, #380]	; (800d4f8 <tcp_input+0x4b0>)
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	69fa      	ldr	r2, [r7, #28]
 800d386:	429a      	cmp	r2, r3
 800d388:	d111      	bne.n	800d3ae <tcp_input+0x366>
 800d38a:	4b58      	ldr	r3, [pc, #352]	; (800d4ec <tcp_input+0x4a4>)
 800d38c:	f240 1215 	movw	r2, #277	; 0x115
 800d390:	495a      	ldr	r1, [pc, #360]	; (800d4fc <tcp_input+0x4b4>)
 800d392:	4858      	ldr	r0, [pc, #352]	; (800d4f4 <tcp_input+0x4ac>)
 800d394:	f008 fbc8 	bl	8015b28 <iprintf>
      break;
 800d398:	e009      	b.n	800d3ae <tcp_input+0x366>
    }
    prev = pcb;
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	61fb      	str	r3, [r7, #28]
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f47f af5e 	bne.w	800d268 <tcp_input+0x220>
 800d3ac:	e000      	b.n	800d3b0 <tcp_input+0x368>
      break;
 800d3ae:	bf00      	nop
  }

  if (pcb == NULL) {
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f040 80aa 	bne.w	800d50c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3b8:	4b51      	ldr	r3, [pc, #324]	; (800d500 <tcp_input+0x4b8>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	61fb      	str	r3, [r7, #28]
 800d3be:	e03f      	b.n	800d440 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	2b0a      	cmp	r3, #10
 800d3c6:	d006      	beq.n	800d3d6 <tcp_input+0x38e>
 800d3c8:	4b48      	ldr	r3, [pc, #288]	; (800d4ec <tcp_input+0x4a4>)
 800d3ca:	f240 121f 	movw	r2, #287	; 0x11f
 800d3ce:	494d      	ldr	r1, [pc, #308]	; (800d504 <tcp_input+0x4bc>)
 800d3d0:	4848      	ldr	r0, [pc, #288]	; (800d4f4 <tcp_input+0x4ac>)
 800d3d2:	f008 fba9 	bl	8015b28 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	7a1b      	ldrb	r3, [r3, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d009      	beq.n	800d3f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	7a1a      	ldrb	r2, [r3, #8]
 800d3e2:	4b41      	ldr	r3, [pc, #260]	; (800d4e8 <tcp_input+0x4a0>)
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d122      	bne.n	800d438 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	8b1a      	ldrh	r2, [r3, #24]
 800d3f6:	4b3b      	ldr	r3, [pc, #236]	; (800d4e4 <tcp_input+0x49c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d11b      	bne.n	800d43a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	8ada      	ldrh	r2, [r3, #22]
 800d406:	4b37      	ldr	r3, [pc, #220]	; (800d4e4 <tcp_input+0x49c>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	885b      	ldrh	r3, [r3, #2]
 800d40c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d40e:	429a      	cmp	r2, r3
 800d410:	d113      	bne.n	800d43a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	685a      	ldr	r2, [r3, #4]
 800d416:	4b34      	ldr	r3, [pc, #208]	; (800d4e8 <tcp_input+0x4a0>)
 800d418:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d10d      	bne.n	800d43a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	4b31      	ldr	r3, [pc, #196]	; (800d4e8 <tcp_input+0x4a0>)
 800d424:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d426:	429a      	cmp	r2, r3
 800d428:	d107      	bne.n	800d43a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d42a:	69f8      	ldr	r0, [r7, #28]
 800d42c:	f000 fb56 	bl	800dadc <tcp_timewait_input>
        }
        pbuf_free(p);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7fd ffd1 	bl	800b3d8 <pbuf_free>
        return;
 800d436:	e1fd      	b.n	800d834 <tcp_input+0x7ec>
        continue;
 800d438:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	61fb      	str	r3, [r7, #28]
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1bc      	bne.n	800d3c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d446:	2300      	movs	r3, #0
 800d448:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d44a:	4b2f      	ldr	r3, [pc, #188]	; (800d508 <tcp_input+0x4c0>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	e02a      	b.n	800d4a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	7a1b      	ldrb	r3, [r3, #8]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00c      	beq.n	800d474 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	7a1a      	ldrb	r2, [r3, #8]
 800d45e:	4b22      	ldr	r3, [pc, #136]	; (800d4e8 <tcp_input+0x4a0>)
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d466:	3301      	adds	r3, #1
 800d468:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d002      	beq.n	800d474 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	61bb      	str	r3, [r7, #24]
        continue;
 800d472:	e016      	b.n	800d4a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	8ada      	ldrh	r2, [r3, #22]
 800d478:	4b1a      	ldr	r3, [pc, #104]	; (800d4e4 <tcp_input+0x49c>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	885b      	ldrh	r3, [r3, #2]
 800d47e:	b29b      	uxth	r3, r3
 800d480:	429a      	cmp	r2, r3
 800d482:	d10c      	bne.n	800d49e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	4b17      	ldr	r3, [pc, #92]	; (800d4e8 <tcp_input+0x4a0>)
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d00f      	beq.n	800d4b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00d      	beq.n	800d4b2 <tcp_input+0x46a>
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d009      	beq.n	800d4b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1d1      	bne.n	800d452 <tcp_input+0x40a>
 800d4ae:	e000      	b.n	800d4b2 <tcp_input+0x46a>
            break;
 800d4b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d029      	beq.n	800d50c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00a      	beq.n	800d4d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	68da      	ldr	r2, [r3, #12]
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d4c6:	4b10      	ldr	r3, [pc, #64]	; (800d508 <tcp_input+0x4c0>)
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d4ce:	4a0e      	ldr	r2, [pc, #56]	; (800d508 <tcp_input+0x4c0>)
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d4d4:	6978      	ldr	r0, [r7, #20]
 800d4d6:	f000 fa03 	bl	800d8e0 <tcp_listen_input>
      }
      pbuf_free(p);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7fd ff7c 	bl	800b3d8 <pbuf_free>
      return;
 800d4e0:	e1a8      	b.n	800d834 <tcp_input+0x7ec>
 800d4e2:	bf00      	nop
 800d4e4:	20008684 	.word	0x20008684
 800d4e8:	20005720 	.word	0x20005720
 800d4ec:	08017e1c 	.word	0x08017e1c
 800d4f0:	08017f48 	.word	0x08017f48
 800d4f4:	08017e68 	.word	0x08017e68
 800d4f8:	20008668 	.word	0x20008668
 800d4fc:	08017f74 	.word	0x08017f74
 800d500:	2000866c 	.word	0x2000866c
 800d504:	08017fa0 	.word	0x08017fa0
 800d508:	20008664 	.word	0x20008664
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f000 8158 	beq.w	800d7c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d514:	4b95      	ldr	r3, [pc, #596]	; (800d76c <tcp_input+0x724>)
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	891a      	ldrh	r2, [r3, #8]
 800d51e:	4b93      	ldr	r3, [pc, #588]	; (800d76c <tcp_input+0x724>)
 800d520:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d522:	4a92      	ldr	r2, [pc, #584]	; (800d76c <tcp_input+0x724>)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d528:	4b91      	ldr	r3, [pc, #580]	; (800d770 <tcp_input+0x728>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a8f      	ldr	r2, [pc, #572]	; (800d76c <tcp_input+0x724>)
 800d52e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d530:	4b90      	ldr	r3, [pc, #576]	; (800d774 <tcp_input+0x72c>)
 800d532:	2200      	movs	r2, #0
 800d534:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d536:	4b90      	ldr	r3, [pc, #576]	; (800d778 <tcp_input+0x730>)
 800d538:	2200      	movs	r2, #0
 800d53a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d53c:	4b8f      	ldr	r3, [pc, #572]	; (800d77c <tcp_input+0x734>)
 800d53e:	2200      	movs	r2, #0
 800d540:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d542:	4b8f      	ldr	r3, [pc, #572]	; (800d780 <tcp_input+0x738>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	f003 0308 	and.w	r3, r3, #8
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d006      	beq.n	800d55c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	7b5b      	ldrb	r3, [r3, #13]
 800d552:	f043 0301 	orr.w	r3, r3, #1
 800d556:	b2da      	uxtb	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d560:	2b00      	cmp	r3, #0
 800d562:	d017      	beq.n	800d594 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d564:	69f8      	ldr	r0, [r7, #28]
 800d566:	f7ff f929 	bl	800c7bc <tcp_process_refused_data>
 800d56a:	4603      	mov	r3, r0
 800d56c:	f113 0f0d 	cmn.w	r3, #13
 800d570:	d007      	beq.n	800d582 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00c      	beq.n	800d594 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d57a:	4b82      	ldr	r3, [pc, #520]	; (800d784 <tcp_input+0x73c>)
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d008      	beq.n	800d594 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d586:	2b00      	cmp	r3, #0
 800d588:	f040 80e3 	bne.w	800d752 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d58c:	69f8      	ldr	r0, [r7, #28]
 800d58e:	f003 f9ad 	bl	80108ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d592:	e0de      	b.n	800d752 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d594:	4a7c      	ldr	r2, [pc, #496]	; (800d788 <tcp_input+0x740>)
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d59a:	69f8      	ldr	r0, [r7, #28]
 800d59c:	f000 fb18 	bl	800dbd0 <tcp_process>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d5a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d5a8:	f113 0f0d 	cmn.w	r3, #13
 800d5ac:	f000 80d3 	beq.w	800d756 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d5b0:	4b71      	ldr	r3, [pc, #452]	; (800d778 <tcp_input+0x730>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	f003 0308 	and.w	r3, r3, #8
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d015      	beq.n	800d5e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d008      	beq.n	800d5d8 <tcp_input+0x590>
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5cc:	69fa      	ldr	r2, [r7, #28]
 800d5ce:	6912      	ldr	r2, [r2, #16]
 800d5d0:	f06f 010d 	mvn.w	r1, #13
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d5d8:	69f9      	ldr	r1, [r7, #28]
 800d5da:	486c      	ldr	r0, [pc, #432]	; (800d78c <tcp_input+0x744>)
 800d5dc:	f7ff fbbc 	bl	800cd58 <tcp_pcb_remove>
        tcp_free(pcb);
 800d5e0:	69f8      	ldr	r0, [r7, #28]
 800d5e2:	f7fe f9a9 	bl	800b938 <tcp_free>
 800d5e6:	e0da      	b.n	800d79e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d5ec:	4b63      	ldr	r3, [pc, #396]	; (800d77c <tcp_input+0x734>)
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d01d      	beq.n	800d630 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d5f4:	4b61      	ldr	r3, [pc, #388]	; (800d77c <tcp_input+0x734>)
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00a      	beq.n	800d61a <tcp_input+0x5d2>
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d60a:	69fa      	ldr	r2, [r7, #28]
 800d60c:	6910      	ldr	r0, [r2, #16]
 800d60e:	89fa      	ldrh	r2, [r7, #14]
 800d610:	69f9      	ldr	r1, [r7, #28]
 800d612:	4798      	blx	r3
 800d614:	4603      	mov	r3, r0
 800d616:	74fb      	strb	r3, [r7, #19]
 800d618:	e001      	b.n	800d61e <tcp_input+0x5d6>
 800d61a:	2300      	movs	r3, #0
 800d61c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d61e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d622:	f113 0f0d 	cmn.w	r3, #13
 800d626:	f000 8098 	beq.w	800d75a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d62a:	4b54      	ldr	r3, [pc, #336]	; (800d77c <tcp_input+0x734>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d630:	69f8      	ldr	r0, [r7, #28]
 800d632:	f000 f915 	bl	800d860 <tcp_input_delayed_close>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f040 8090 	bne.w	800d75e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d63e:	4b4d      	ldr	r3, [pc, #308]	; (800d774 <tcp_input+0x72c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d041      	beq.n	800d6ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d006      	beq.n	800d65c <tcp_input+0x614>
 800d64e:	4b50      	ldr	r3, [pc, #320]	; (800d790 <tcp_input+0x748>)
 800d650:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d654:	494f      	ldr	r1, [pc, #316]	; (800d794 <tcp_input+0x74c>)
 800d656:	4850      	ldr	r0, [pc, #320]	; (800d798 <tcp_input+0x750>)
 800d658:	f008 fa66 	bl	8015b28 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	8b5b      	ldrh	r3, [r3, #26]
 800d660:	f003 0310 	and.w	r3, r3, #16
 800d664:	2b00      	cmp	r3, #0
 800d666:	d008      	beq.n	800d67a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d668:	4b42      	ldr	r3, [pc, #264]	; (800d774 <tcp_input+0x72c>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fd feb3 	bl	800b3d8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d672:	69f8      	ldr	r0, [r7, #28]
 800d674:	f7fe fc48 	bl	800bf08 <tcp_abort>
            goto aborted;
 800d678:	e091      	b.n	800d79e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00c      	beq.n	800d69e <tcp_input+0x656>
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	6918      	ldr	r0, [r3, #16]
 800d68e:	4b39      	ldr	r3, [pc, #228]	; (800d774 <tcp_input+0x72c>)
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	2300      	movs	r3, #0
 800d694:	69f9      	ldr	r1, [r7, #28]
 800d696:	47a0      	blx	r4
 800d698:	4603      	mov	r3, r0
 800d69a:	74fb      	strb	r3, [r7, #19]
 800d69c:	e008      	b.n	800d6b0 <tcp_input+0x668>
 800d69e:	4b35      	ldr	r3, [pc, #212]	; (800d774 <tcp_input+0x72c>)
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	69f9      	ldr	r1, [r7, #28]
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	f7ff f95e 	bl	800c968 <tcp_recv_null>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d6b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6b4:	f113 0f0d 	cmn.w	r3, #13
 800d6b8:	d053      	beq.n	800d762 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d6ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d003      	beq.n	800d6ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d6c2:	4b2c      	ldr	r3, [pc, #176]	; (800d774 <tcp_input+0x72c>)
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d6ca:	4b2b      	ldr	r3, [pc, #172]	; (800d778 <tcp_input+0x730>)
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	f003 0320 	and.w	r3, r3, #32
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d030      	beq.n	800d738 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d009      	beq.n	800d6f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6e2:	7b5a      	ldrb	r2, [r3, #13]
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6e8:	f042 0220 	orr.w	r2, r2, #32
 800d6ec:	b2d2      	uxtb	r2, r2
 800d6ee:	735a      	strb	r2, [r3, #13]
 800d6f0:	e022      	b.n	800d738 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d6fa:	d005      	beq.n	800d708 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d700:	3301      	adds	r3, #1
 800d702:	b29a      	uxth	r2, r3
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00b      	beq.n	800d72a <tcp_input+0x6e2>
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	6918      	ldr	r0, [r3, #16]
 800d71c:	2300      	movs	r3, #0
 800d71e:	2200      	movs	r2, #0
 800d720:	69f9      	ldr	r1, [r7, #28]
 800d722:	47a0      	blx	r4
 800d724:	4603      	mov	r3, r0
 800d726:	74fb      	strb	r3, [r7, #19]
 800d728:	e001      	b.n	800d72e <tcp_input+0x6e6>
 800d72a:	2300      	movs	r3, #0
 800d72c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d72e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d732:	f113 0f0d 	cmn.w	r3, #13
 800d736:	d016      	beq.n	800d766 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d738:	4b13      	ldr	r3, [pc, #76]	; (800d788 <tcp_input+0x740>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d73e:	69f8      	ldr	r0, [r7, #28]
 800d740:	f000 f88e 	bl	800d860 <tcp_input_delayed_close>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d128      	bne.n	800d79c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d74a:	69f8      	ldr	r0, [r7, #28]
 800d74c:	f002 fac8 	bl	800fce0 <tcp_output>
 800d750:	e025      	b.n	800d79e <tcp_input+0x756>
        goto aborted;
 800d752:	bf00      	nop
 800d754:	e023      	b.n	800d79e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d756:	bf00      	nop
 800d758:	e021      	b.n	800d79e <tcp_input+0x756>
              goto aborted;
 800d75a:	bf00      	nop
 800d75c:	e01f      	b.n	800d79e <tcp_input+0x756>
          goto aborted;
 800d75e:	bf00      	nop
 800d760:	e01d      	b.n	800d79e <tcp_input+0x756>
            goto aborted;
 800d762:	bf00      	nop
 800d764:	e01b      	b.n	800d79e <tcp_input+0x756>
              goto aborted;
 800d766:	bf00      	nop
 800d768:	e019      	b.n	800d79e <tcp_input+0x756>
 800d76a:	bf00      	nop
 800d76c:	20008674 	.word	0x20008674
 800d770:	20008684 	.word	0x20008684
 800d774:	200086a4 	.word	0x200086a4
 800d778:	200086a1 	.word	0x200086a1
 800d77c:	2000869c 	.word	0x2000869c
 800d780:	200086a0 	.word	0x200086a0
 800d784:	2000869e 	.word	0x2000869e
 800d788:	200086a8 	.word	0x200086a8
 800d78c:	20008668 	.word	0x20008668
 800d790:	08017e1c 	.word	0x08017e1c
 800d794:	08017fd0 	.word	0x08017fd0
 800d798:	08017e68 	.word	0x08017e68
          goto aborted;
 800d79c:	bf00      	nop
    tcp_input_pcb = NULL;
 800d79e:	4b27      	ldr	r3, [pc, #156]	; (800d83c <tcp_input+0x7f4>)
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d7a4:	4b26      	ldr	r3, [pc, #152]	; (800d840 <tcp_input+0x7f8>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d7aa:	4b26      	ldr	r3, [pc, #152]	; (800d844 <tcp_input+0x7fc>)
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d03f      	beq.n	800d832 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d7b2:	4b24      	ldr	r3, [pc, #144]	; (800d844 <tcp_input+0x7fc>)
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fd fe0e 	bl	800b3d8 <pbuf_free>
      inseg.p = NULL;
 800d7bc:	4b21      	ldr	r3, [pc, #132]	; (800d844 <tcp_input+0x7fc>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d7c2:	e036      	b.n	800d832 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d7c4:	4b20      	ldr	r3, [pc, #128]	; (800d848 <tcp_input+0x800>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	899b      	ldrh	r3, [r3, #12]
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fc fa01 	bl	8009bd4 <lwip_htons>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	f003 0304 	and.w	r3, r3, #4
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d118      	bne.n	800d810 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7de:	4b1b      	ldr	r3, [pc, #108]	; (800d84c <tcp_input+0x804>)
 800d7e0:	6819      	ldr	r1, [r3, #0]
 800d7e2:	4b1b      	ldr	r3, [pc, #108]	; (800d850 <tcp_input+0x808>)
 800d7e4:	881b      	ldrh	r3, [r3, #0]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	4b1a      	ldr	r3, [pc, #104]	; (800d854 <tcp_input+0x80c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7ee:	4b16      	ldr	r3, [pc, #88]	; (800d848 <tcp_input+0x800>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7f2:	885b      	ldrh	r3, [r3, #2]
 800d7f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7f6:	4a14      	ldr	r2, [pc, #80]	; (800d848 <tcp_input+0x800>)
 800d7f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7fa:	8812      	ldrh	r2, [r2, #0]
 800d7fc:	b292      	uxth	r2, r2
 800d7fe:	9202      	str	r2, [sp, #8]
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	4b15      	ldr	r3, [pc, #84]	; (800d858 <tcp_input+0x810>)
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	4b15      	ldr	r3, [pc, #84]	; (800d85c <tcp_input+0x814>)
 800d808:	4602      	mov	r2, r0
 800d80a:	2000      	movs	r0, #0
 800d80c:	f003 f81c 	bl	8010848 <tcp_rst>
    pbuf_free(p);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f7fd fde1 	bl	800b3d8 <pbuf_free>
  return;
 800d816:	e00c      	b.n	800d832 <tcp_input+0x7ea>
    goto dropped;
 800d818:	bf00      	nop
 800d81a:	e006      	b.n	800d82a <tcp_input+0x7e2>
    goto dropped;
 800d81c:	bf00      	nop
 800d81e:	e004      	b.n	800d82a <tcp_input+0x7e2>
    goto dropped;
 800d820:	bf00      	nop
 800d822:	e002      	b.n	800d82a <tcp_input+0x7e2>
      goto dropped;
 800d824:	bf00      	nop
 800d826:	e000      	b.n	800d82a <tcp_input+0x7e2>
      goto dropped;
 800d828:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7fd fdd4 	bl	800b3d8 <pbuf_free>
 800d830:	e000      	b.n	800d834 <tcp_input+0x7ec>
  return;
 800d832:	bf00      	nop
}
 800d834:	3724      	adds	r7, #36	; 0x24
 800d836:	46bd      	mov	sp, r7
 800d838:	bd90      	pop	{r4, r7, pc}
 800d83a:	bf00      	nop
 800d83c:	200086a8 	.word	0x200086a8
 800d840:	200086a4 	.word	0x200086a4
 800d844:	20008674 	.word	0x20008674
 800d848:	20008684 	.word	0x20008684
 800d84c:	20008698 	.word	0x20008698
 800d850:	2000869e 	.word	0x2000869e
 800d854:	20008694 	.word	0x20008694
 800d858:	20005730 	.word	0x20005730
 800d85c:	20005734 	.word	0x20005734

0800d860 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d106      	bne.n	800d87c <tcp_input_delayed_close+0x1c>
 800d86e:	4b17      	ldr	r3, [pc, #92]	; (800d8cc <tcp_input_delayed_close+0x6c>)
 800d870:	f240 225a 	movw	r2, #602	; 0x25a
 800d874:	4916      	ldr	r1, [pc, #88]	; (800d8d0 <tcp_input_delayed_close+0x70>)
 800d876:	4817      	ldr	r0, [pc, #92]	; (800d8d4 <tcp_input_delayed_close+0x74>)
 800d878:	f008 f956 	bl	8015b28 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d87c:	4b16      	ldr	r3, [pc, #88]	; (800d8d8 <tcp_input_delayed_close+0x78>)
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	f003 0310 	and.w	r3, r3, #16
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01c      	beq.n	800d8c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	8b5b      	ldrh	r3, [r3, #26]
 800d88c:	f003 0310 	and.w	r3, r3, #16
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10d      	bne.n	800d8b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d008      	beq.n	800d8b0 <tcp_input_delayed_close+0x50>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	6912      	ldr	r2, [r2, #16]
 800d8a8:	f06f 010e 	mvn.w	r1, #14
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d8b0:	6879      	ldr	r1, [r7, #4]
 800d8b2:	480a      	ldr	r0, [pc, #40]	; (800d8dc <tcp_input_delayed_close+0x7c>)
 800d8b4:	f7ff fa50 	bl	800cd58 <tcp_pcb_remove>
    tcp_free(pcb);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7fe f83d 	bl	800b938 <tcp_free>
    return 1;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e000      	b.n	800d8c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	08017e1c 	.word	0x08017e1c
 800d8d0:	08017fec 	.word	0x08017fec
 800d8d4:	08017e68 	.word	0x08017e68
 800d8d8:	200086a1 	.word	0x200086a1
 800d8dc:	20008668 	.word	0x20008668

0800d8e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d8e0:	b590      	push	{r4, r7, lr}
 800d8e2:	b08b      	sub	sp, #44	; 0x2c
 800d8e4:	af04      	add	r7, sp, #16
 800d8e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d8e8:	4b6f      	ldr	r3, [pc, #444]	; (800daa8 <tcp_listen_input+0x1c8>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	f003 0304 	and.w	r3, r3, #4
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f040 80d2 	bne.w	800da9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d106      	bne.n	800d90a <tcp_listen_input+0x2a>
 800d8fc:	4b6b      	ldr	r3, [pc, #428]	; (800daac <tcp_listen_input+0x1cc>)
 800d8fe:	f240 2281 	movw	r2, #641	; 0x281
 800d902:	496b      	ldr	r1, [pc, #428]	; (800dab0 <tcp_listen_input+0x1d0>)
 800d904:	486b      	ldr	r0, [pc, #428]	; (800dab4 <tcp_listen_input+0x1d4>)
 800d906:	f008 f90f 	bl	8015b28 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d90a:	4b67      	ldr	r3, [pc, #412]	; (800daa8 <tcp_listen_input+0x1c8>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	f003 0310 	and.w	r3, r3, #16
 800d912:	2b00      	cmp	r3, #0
 800d914:	d019      	beq.n	800d94a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d916:	4b68      	ldr	r3, [pc, #416]	; (800dab8 <tcp_listen_input+0x1d8>)
 800d918:	6819      	ldr	r1, [r3, #0]
 800d91a:	4b68      	ldr	r3, [pc, #416]	; (800dabc <tcp_listen_input+0x1dc>)
 800d91c:	881b      	ldrh	r3, [r3, #0]
 800d91e:	461a      	mov	r2, r3
 800d920:	4b67      	ldr	r3, [pc, #412]	; (800dac0 <tcp_listen_input+0x1e0>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d926:	4b67      	ldr	r3, [pc, #412]	; (800dac4 <tcp_listen_input+0x1e4>)
 800d928:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d92a:	885b      	ldrh	r3, [r3, #2]
 800d92c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d92e:	4a65      	ldr	r2, [pc, #404]	; (800dac4 <tcp_listen_input+0x1e4>)
 800d930:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d932:	8812      	ldrh	r2, [r2, #0]
 800d934:	b292      	uxth	r2, r2
 800d936:	9202      	str	r2, [sp, #8]
 800d938:	9301      	str	r3, [sp, #4]
 800d93a:	4b63      	ldr	r3, [pc, #396]	; (800dac8 <tcp_listen_input+0x1e8>)
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	4b63      	ldr	r3, [pc, #396]	; (800dacc <tcp_listen_input+0x1ec>)
 800d940:	4602      	mov	r2, r0
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f002 ff80 	bl	8010848 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d948:	e0a9      	b.n	800da9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d94a:	4b57      	ldr	r3, [pc, #348]	; (800daa8 <tcp_listen_input+0x1c8>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	f003 0302 	and.w	r3, r3, #2
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 80a3 	beq.w	800da9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	7d5b      	ldrb	r3, [r3, #21]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff f927 	bl	800cbb0 <tcp_alloc>
 800d962:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d111      	bne.n	800d98e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	699b      	ldr	r3, [r3, #24]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00a      	beq.n	800d988 <tcp_listen_input+0xa8>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	6910      	ldr	r0, [r2, #16]
 800d97a:	f04f 32ff 	mov.w	r2, #4294967295
 800d97e:	2100      	movs	r1, #0
 800d980:	4798      	blx	r3
 800d982:	4603      	mov	r3, r0
 800d984:	73bb      	strb	r3, [r7, #14]
      return;
 800d986:	e08b      	b.n	800daa0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d988:	23f0      	movs	r3, #240	; 0xf0
 800d98a:	73bb      	strb	r3, [r7, #14]
      return;
 800d98c:	e088      	b.n	800daa0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d98e:	4b50      	ldr	r3, [pc, #320]	; (800dad0 <tcp_listen_input+0x1f0>)
 800d990:	695a      	ldr	r2, [r3, #20]
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d996:	4b4e      	ldr	r3, [pc, #312]	; (800dad0 <tcp_listen_input+0x1f0>)
 800d998:	691a      	ldr	r2, [r3, #16]
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	8ada      	ldrh	r2, [r3, #22]
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d9a6:	4b47      	ldr	r3, [pc, #284]	; (800dac4 <tcp_listen_input+0x1e4>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	881b      	ldrh	r3, [r3, #0]
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2203      	movs	r2, #3
 800d9b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d9b8:	4b41      	ldr	r3, [pc, #260]	; (800dac0 <tcp_listen_input+0x1e0>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	1c5a      	adds	r2, r3, #1
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d9ca:	6978      	ldr	r0, [r7, #20]
 800d9cc:	f7ff fa58 	bl	800ce80 <tcp_next_iss>
 800d9d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	693a      	ldr	r2, [r7, #16]
 800d9d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	693a      	ldr	r2, [r7, #16]
 800d9e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d9ea:	4b35      	ldr	r3, [pc, #212]	; (800dac0 <tcp_listen_input+0x1e0>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	1e5a      	subs	r2, r3, #1
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	691a      	ldr	r2, [r3, #16]
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	7a5b      	ldrb	r3, [r3, #9]
 800da06:	f003 030c 	and.w	r3, r3, #12
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	7a1a      	ldrb	r2, [r3, #8]
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800da18:	4b2e      	ldr	r3, [pc, #184]	; (800dad4 <tcp_listen_input+0x1f4>)
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	60da      	str	r2, [r3, #12]
 800da20:	4a2c      	ldr	r2, [pc, #176]	; (800dad4 <tcp_listen_input+0x1f4>)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	6013      	str	r3, [r2, #0]
 800da26:	f003 f8d1 	bl	8010bcc <tcp_timer_needed>
 800da2a:	4b2b      	ldr	r3, [pc, #172]	; (800dad8 <tcp_listen_input+0x1f8>)
 800da2c:	2201      	movs	r2, #1
 800da2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800da30:	6978      	ldr	r0, [r7, #20]
 800da32:	f001 fd8f 	bl	800f554 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800da36:	4b23      	ldr	r3, [pc, #140]	; (800dac4 <tcp_listen_input+0x1e4>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	89db      	ldrh	r3, [r3, #14]
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	3304      	adds	r3, #4
 800da58:	4618      	mov	r0, r3
 800da5a:	f006 fe11 	bl	8014680 <ip4_route>
 800da5e:	4601      	mov	r1, r0
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	3304      	adds	r3, #4
 800da64:	461a      	mov	r2, r3
 800da66:	4620      	mov	r0, r4
 800da68:	f7ff fa30 	bl	800cecc <tcp_eff_send_mss_netif>
 800da6c:	4603      	mov	r3, r0
 800da6e:	461a      	mov	r2, r3
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800da74:	2112      	movs	r1, #18
 800da76:	6978      	ldr	r0, [r7, #20]
 800da78:	f002 f844 	bl	800fb04 <tcp_enqueue_flags>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800da80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d004      	beq.n	800da92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800da88:	2100      	movs	r1, #0
 800da8a:	6978      	ldr	r0, [r7, #20]
 800da8c:	f7fe f97e 	bl	800bd8c <tcp_abandon>
      return;
 800da90:	e006      	b.n	800daa0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800da92:	6978      	ldr	r0, [r7, #20]
 800da94:	f002 f924 	bl	800fce0 <tcp_output>
  return;
 800da98:	e001      	b.n	800da9e <tcp_listen_input+0x1be>
    return;
 800da9a:	bf00      	nop
 800da9c:	e000      	b.n	800daa0 <tcp_listen_input+0x1c0>
  return;
 800da9e:	bf00      	nop
}
 800daa0:	371c      	adds	r7, #28
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd90      	pop	{r4, r7, pc}
 800daa6:	bf00      	nop
 800daa8:	200086a0 	.word	0x200086a0
 800daac:	08017e1c 	.word	0x08017e1c
 800dab0:	08018014 	.word	0x08018014
 800dab4:	08017e68 	.word	0x08017e68
 800dab8:	20008698 	.word	0x20008698
 800dabc:	2000869e 	.word	0x2000869e
 800dac0:	20008694 	.word	0x20008694
 800dac4:	20008684 	.word	0x20008684
 800dac8:	20005730 	.word	0x20005730
 800dacc:	20005734 	.word	0x20005734
 800dad0:	20005720 	.word	0x20005720
 800dad4:	20008668 	.word	0x20008668
 800dad8:	20008670 	.word	0x20008670

0800dadc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b086      	sub	sp, #24
 800dae0:	af04      	add	r7, sp, #16
 800dae2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dae4:	4b2f      	ldr	r3, [pc, #188]	; (800dba4 <tcp_timewait_input+0xc8>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	f003 0304 	and.w	r3, r3, #4
 800daec:	2b00      	cmp	r3, #0
 800daee:	d153      	bne.n	800db98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d106      	bne.n	800db04 <tcp_timewait_input+0x28>
 800daf6:	4b2c      	ldr	r3, [pc, #176]	; (800dba8 <tcp_timewait_input+0xcc>)
 800daf8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dafc:	492b      	ldr	r1, [pc, #172]	; (800dbac <tcp_timewait_input+0xd0>)
 800dafe:	482c      	ldr	r0, [pc, #176]	; (800dbb0 <tcp_timewait_input+0xd4>)
 800db00:	f008 f812 	bl	8015b28 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800db04:	4b27      	ldr	r3, [pc, #156]	; (800dba4 <tcp_timewait_input+0xc8>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	f003 0302 	and.w	r3, r3, #2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d02a      	beq.n	800db66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800db10:	4b28      	ldr	r3, [pc, #160]	; (800dbb4 <tcp_timewait_input+0xd8>)
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	db2d      	blt.n	800db7a <tcp_timewait_input+0x9e>
 800db1e:	4b25      	ldr	r3, [pc, #148]	; (800dbb4 <tcp_timewait_input+0xd8>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	6879      	ldr	r1, [r7, #4]
 800db28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db2a:	440b      	add	r3, r1
 800db2c:	1ad3      	subs	r3, r2, r3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	dc23      	bgt.n	800db7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db32:	4b21      	ldr	r3, [pc, #132]	; (800dbb8 <tcp_timewait_input+0xdc>)
 800db34:	6819      	ldr	r1, [r3, #0]
 800db36:	4b21      	ldr	r3, [pc, #132]	; (800dbbc <tcp_timewait_input+0xe0>)
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	461a      	mov	r2, r3
 800db3c:	4b1d      	ldr	r3, [pc, #116]	; (800dbb4 <tcp_timewait_input+0xd8>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db42:	4b1f      	ldr	r3, [pc, #124]	; (800dbc0 <tcp_timewait_input+0xe4>)
 800db44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db46:	885b      	ldrh	r3, [r3, #2]
 800db48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db4a:	4a1d      	ldr	r2, [pc, #116]	; (800dbc0 <tcp_timewait_input+0xe4>)
 800db4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db4e:	8812      	ldrh	r2, [r2, #0]
 800db50:	b292      	uxth	r2, r2
 800db52:	9202      	str	r2, [sp, #8]
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	4b1b      	ldr	r3, [pc, #108]	; (800dbc4 <tcp_timewait_input+0xe8>)
 800db58:	9300      	str	r3, [sp, #0]
 800db5a:	4b1b      	ldr	r3, [pc, #108]	; (800dbc8 <tcp_timewait_input+0xec>)
 800db5c:	4602      	mov	r2, r0
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f002 fe72 	bl	8010848 <tcp_rst>
      return;
 800db64:	e01b      	b.n	800db9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800db66:	4b0f      	ldr	r3, [pc, #60]	; (800dba4 <tcp_timewait_input+0xc8>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	f003 0301 	and.w	r3, r3, #1
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d003      	beq.n	800db7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800db72:	4b16      	ldr	r3, [pc, #88]	; (800dbcc <tcp_timewait_input+0xf0>)
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800db7a:	4b10      	ldr	r3, [pc, #64]	; (800dbbc <tcp_timewait_input+0xe0>)
 800db7c:	881b      	ldrh	r3, [r3, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00c      	beq.n	800db9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	8b5b      	ldrh	r3, [r3, #26]
 800db86:	f043 0302 	orr.w	r3, r3, #2
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f002 f8a5 	bl	800fce0 <tcp_output>
  }
  return;
 800db96:	e001      	b.n	800db9c <tcp_timewait_input+0xc0>
    return;
 800db98:	bf00      	nop
 800db9a:	e000      	b.n	800db9e <tcp_timewait_input+0xc2>
  return;
 800db9c:	bf00      	nop
}
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	200086a0 	.word	0x200086a0
 800dba8:	08017e1c 	.word	0x08017e1c
 800dbac:	08018034 	.word	0x08018034
 800dbb0:	08017e68 	.word	0x08017e68
 800dbb4:	20008694 	.word	0x20008694
 800dbb8:	20008698 	.word	0x20008698
 800dbbc:	2000869e 	.word	0x2000869e
 800dbc0:	20008684 	.word	0x20008684
 800dbc4:	20005730 	.word	0x20005730
 800dbc8:	20005734 	.word	0x20005734
 800dbcc:	2000865c 	.word	0x2000865c

0800dbd0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800dbd0:	b590      	push	{r4, r7, lr}
 800dbd2:	b08d      	sub	sp, #52	; 0x34
 800dbd4:	af04      	add	r7, sp, #16
 800dbd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d106      	bne.n	800dbf4 <tcp_process+0x24>
 800dbe6:	4b9d      	ldr	r3, [pc, #628]	; (800de5c <tcp_process+0x28c>)
 800dbe8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dbec:	499c      	ldr	r1, [pc, #624]	; (800de60 <tcp_process+0x290>)
 800dbee:	489d      	ldr	r0, [pc, #628]	; (800de64 <tcp_process+0x294>)
 800dbf0:	f007 ff9a 	bl	8015b28 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800dbf4:	4b9c      	ldr	r3, [pc, #624]	; (800de68 <tcp_process+0x298>)
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	f003 0304 	and.w	r3, r3, #4
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d04e      	beq.n	800dc9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	7d1b      	ldrb	r3, [r3, #20]
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d108      	bne.n	800dc1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc0c:	4b97      	ldr	r3, [pc, #604]	; (800de6c <tcp_process+0x29c>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d123      	bne.n	800dc5c <tcp_process+0x8c>
        acceptable = 1;
 800dc14:	2301      	movs	r3, #1
 800dc16:	76fb      	strb	r3, [r7, #27]
 800dc18:	e020      	b.n	800dc5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc1e:	4b94      	ldr	r3, [pc, #592]	; (800de70 <tcp_process+0x2a0>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d102      	bne.n	800dc2c <tcp_process+0x5c>
        acceptable = 1;
 800dc26:	2301      	movs	r3, #1
 800dc28:	76fb      	strb	r3, [r7, #27]
 800dc2a:	e017      	b.n	800dc5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc2c:	4b90      	ldr	r3, [pc, #576]	; (800de70 <tcp_process+0x2a0>)
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	db10      	blt.n	800dc5c <tcp_process+0x8c>
 800dc3a:	4b8d      	ldr	r3, [pc, #564]	; (800de70 <tcp_process+0x2a0>)
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc42:	6879      	ldr	r1, [r7, #4]
 800dc44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc46:	440b      	add	r3, r1
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	dc06      	bgt.n	800dc5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	8b5b      	ldrh	r3, [r3, #26]
 800dc52:	f043 0302 	orr.w	r3, r3, #2
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dc5c:	7efb      	ldrb	r3, [r7, #27]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d01b      	beq.n	800dc9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	7d1b      	ldrb	r3, [r3, #20]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <tcp_process+0xa8>
 800dc6a:	4b7c      	ldr	r3, [pc, #496]	; (800de5c <tcp_process+0x28c>)
 800dc6c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dc70:	4980      	ldr	r1, [pc, #512]	; (800de74 <tcp_process+0x2a4>)
 800dc72:	487c      	ldr	r0, [pc, #496]	; (800de64 <tcp_process+0x294>)
 800dc74:	f007 ff58 	bl	8015b28 <iprintf>
      recv_flags |= TF_RESET;
 800dc78:	4b7f      	ldr	r3, [pc, #508]	; (800de78 <tcp_process+0x2a8>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	f043 0308 	orr.w	r3, r3, #8
 800dc80:	b2da      	uxtb	r2, r3
 800dc82:	4b7d      	ldr	r3, [pc, #500]	; (800de78 <tcp_process+0x2a8>)
 800dc84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	8b5b      	ldrh	r3, [r3, #26]
 800dc8a:	f023 0301 	bic.w	r3, r3, #1
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dc94:	f06f 030d 	mvn.w	r3, #13
 800dc98:	e37a      	b.n	800e390 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e378      	b.n	800e390 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dc9e:	4b72      	ldr	r3, [pc, #456]	; (800de68 <tcp_process+0x298>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	f003 0302 	and.w	r3, r3, #2
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d010      	beq.n	800dccc <tcp_process+0xfc>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7d1b      	ldrb	r3, [r3, #20]
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	d00c      	beq.n	800dccc <tcp_process+0xfc>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	7d1b      	ldrb	r3, [r3, #20]
 800dcb6:	2b03      	cmp	r3, #3
 800dcb8:	d008      	beq.n	800dccc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	8b5b      	ldrh	r3, [r3, #26]
 800dcbe:	f043 0302 	orr.w	r3, r3, #2
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	e361      	b.n	800e390 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	8b5b      	ldrh	r3, [r3, #26]
 800dcd0:	f003 0310 	and.w	r3, r3, #16
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d103      	bne.n	800dce0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dcd8:	4b68      	ldr	r3, [pc, #416]	; (800de7c <tcp_process+0x2ac>)
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f001 fc2f 	bl	800f554 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	7d1b      	ldrb	r3, [r3, #20]
 800dcfa:	3b02      	subs	r3, #2
 800dcfc:	2b07      	cmp	r3, #7
 800dcfe:	f200 8337 	bhi.w	800e370 <tcp_process+0x7a0>
 800dd02:	a201      	add	r2, pc, #4	; (adr r2, 800dd08 <tcp_process+0x138>)
 800dd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd08:	0800dd29 	.word	0x0800dd29
 800dd0c:	0800df59 	.word	0x0800df59
 800dd10:	0800e0d1 	.word	0x0800e0d1
 800dd14:	0800e0fb 	.word	0x0800e0fb
 800dd18:	0800e21f 	.word	0x0800e21f
 800dd1c:	0800e0d1 	.word	0x0800e0d1
 800dd20:	0800e2ab 	.word	0x0800e2ab
 800dd24:	0800e33b 	.word	0x0800e33b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dd28:	4b4f      	ldr	r3, [pc, #316]	; (800de68 <tcp_process+0x298>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	f003 0310 	and.w	r3, r3, #16
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f000 80e4 	beq.w	800defe <tcp_process+0x32e>
 800dd36:	4b4c      	ldr	r3, [pc, #304]	; (800de68 <tcp_process+0x298>)
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	f003 0302 	and.w	r3, r3, #2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	f000 80dd 	beq.w	800defe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	4b48      	ldr	r3, [pc, #288]	; (800de6c <tcp_process+0x29c>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	f040 80d5 	bne.w	800defe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dd54:	4b46      	ldr	r3, [pc, #280]	; (800de70 <tcp_process+0x2a0>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	1c5a      	adds	r2, r3, #1
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dd66:	4b41      	ldr	r3, [pc, #260]	; (800de6c <tcp_process+0x29c>)
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dd6e:	4b44      	ldr	r3, [pc, #272]	; (800de80 <tcp_process+0x2b0>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	89db      	ldrh	r3, [r3, #14]
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dd88:	4b39      	ldr	r3, [pc, #228]	; (800de70 <tcp_process+0x2a0>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	1e5a      	subs	r2, r3, #1
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2204      	movs	r2, #4
 800dd96:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3304      	adds	r3, #4
 800dda0:	4618      	mov	r0, r3
 800dda2:	f006 fc6d 	bl	8014680 <ip4_route>
 800dda6:	4601      	mov	r1, r0
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	3304      	adds	r3, #4
 800ddac:	461a      	mov	r2, r3
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f7ff f88c 	bl	800cecc <tcp_eff_send_mss_netif>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddc0:	009a      	lsls	r2, r3, #2
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddc6:	005b      	lsls	r3, r3, #1
 800ddc8:	f241 111c 	movw	r1, #4380	; 0x111c
 800ddcc:	428b      	cmp	r3, r1
 800ddce:	bf38      	it	cc
 800ddd0:	460b      	movcc	r3, r1
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d204      	bcs.n	800dde0 <tcp_process+0x210>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	e00d      	b.n	800ddfc <tcp_process+0x22c>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dde4:	005b      	lsls	r3, r3, #1
 800dde6:	f241 121c 	movw	r2, #4380	; 0x111c
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d904      	bls.n	800ddf8 <tcp_process+0x228>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddf2:	005b      	lsls	r3, r3, #1
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	e001      	b.n	800ddfc <tcp_process+0x22c>
 800ddf8:	f241 131c 	movw	r3, #4380	; 0x111c
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <tcp_process+0x24a>
 800de0c:	4b13      	ldr	r3, [pc, #76]	; (800de5c <tcp_process+0x28c>)
 800de0e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800de12:	491c      	ldr	r1, [pc, #112]	; (800de84 <tcp_process+0x2b4>)
 800de14:	4813      	ldr	r0, [pc, #76]	; (800de64 <tcp_process+0x294>)
 800de16:	f007 fe87 	bl	8015b28 <iprintf>
        --pcb->snd_queuelen;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de20:	3b01      	subs	r3, #1
 800de22:	b29a      	uxth	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de2e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d12a      	bne.n	800de8c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de3a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <tcp_process+0x280>
 800de42:	4b06      	ldr	r3, [pc, #24]	; (800de5c <tcp_process+0x28c>)
 800de44:	f44f 725d 	mov.w	r2, #884	; 0x374
 800de48:	490f      	ldr	r1, [pc, #60]	; (800de88 <tcp_process+0x2b8>)
 800de4a:	4806      	ldr	r0, [pc, #24]	; (800de64 <tcp_process+0x294>)
 800de4c:	f007 fe6c 	bl	8015b28 <iprintf>
          pcb->unsent = rseg->next;
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	66da      	str	r2, [r3, #108]	; 0x6c
 800de58:	e01c      	b.n	800de94 <tcp_process+0x2c4>
 800de5a:	bf00      	nop
 800de5c:	08017e1c 	.word	0x08017e1c
 800de60:	08018054 	.word	0x08018054
 800de64:	08017e68 	.word	0x08017e68
 800de68:	200086a0 	.word	0x200086a0
 800de6c:	20008698 	.word	0x20008698
 800de70:	20008694 	.word	0x20008694
 800de74:	08018070 	.word	0x08018070
 800de78:	200086a1 	.word	0x200086a1
 800de7c:	2000865c 	.word	0x2000865c
 800de80:	20008684 	.word	0x20008684
 800de84:	08018090 	.word	0x08018090
 800de88:	080180a8 	.word	0x080180a8
        } else {
          pcb->unacked = rseg->next;
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800de94:	69f8      	ldr	r0, [r7, #28]
 800de96:	f7fe fd22 	bl	800c8de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d104      	bne.n	800deac <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dea8:	861a      	strh	r2, [r3, #48]	; 0x30
 800deaa:	e006      	b.n	800deba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00a      	beq.n	800deda <tcp_process+0x30a>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	6910      	ldr	r0, [r2, #16]
 800dece:	2200      	movs	r2, #0
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	4798      	blx	r3
 800ded4:	4603      	mov	r3, r0
 800ded6:	76bb      	strb	r3, [r7, #26]
 800ded8:	e001      	b.n	800dede <tcp_process+0x30e>
 800deda:	2300      	movs	r3, #0
 800dedc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dede:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dee2:	f113 0f0d 	cmn.w	r3, #13
 800dee6:	d102      	bne.n	800deee <tcp_process+0x31e>
          return ERR_ABRT;
 800dee8:	f06f 030c 	mvn.w	r3, #12
 800deec:	e250      	b.n	800e390 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	8b5b      	ldrh	r3, [r3, #26]
 800def2:	f043 0302 	orr.w	r3, r3, #2
 800def6:	b29a      	uxth	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800defc:	e23a      	b.n	800e374 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800defe:	4b98      	ldr	r3, [pc, #608]	; (800e160 <tcp_process+0x590>)
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	f003 0310 	and.w	r3, r3, #16
 800df06:	2b00      	cmp	r3, #0
 800df08:	f000 8234 	beq.w	800e374 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df0c:	4b95      	ldr	r3, [pc, #596]	; (800e164 <tcp_process+0x594>)
 800df0e:	6819      	ldr	r1, [r3, #0]
 800df10:	4b95      	ldr	r3, [pc, #596]	; (800e168 <tcp_process+0x598>)
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	461a      	mov	r2, r3
 800df16:	4b95      	ldr	r3, [pc, #596]	; (800e16c <tcp_process+0x59c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df1c:	4b94      	ldr	r3, [pc, #592]	; (800e170 <tcp_process+0x5a0>)
 800df1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df20:	885b      	ldrh	r3, [r3, #2]
 800df22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df24:	4a92      	ldr	r2, [pc, #584]	; (800e170 <tcp_process+0x5a0>)
 800df26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df28:	8812      	ldrh	r2, [r2, #0]
 800df2a:	b292      	uxth	r2, r2
 800df2c:	9202      	str	r2, [sp, #8]
 800df2e:	9301      	str	r3, [sp, #4]
 800df30:	4b90      	ldr	r3, [pc, #576]	; (800e174 <tcp_process+0x5a4>)
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	4b90      	ldr	r3, [pc, #576]	; (800e178 <tcp_process+0x5a8>)
 800df36:	4602      	mov	r2, r0
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f002 fc85 	bl	8010848 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df44:	2b05      	cmp	r3, #5
 800df46:	f200 8215 	bhi.w	800e374 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f002 fa4f 	bl	80103f4 <tcp_rexmit_rto>
      break;
 800df56:	e20d      	b.n	800e374 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800df58:	4b81      	ldr	r3, [pc, #516]	; (800e160 <tcp_process+0x590>)
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	f003 0310 	and.w	r3, r3, #16
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 80a1 	beq.w	800e0a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df66:	4b7f      	ldr	r3, [pc, #508]	; (800e164 <tcp_process+0x594>)
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	3b01      	subs	r3, #1
 800df72:	2b00      	cmp	r3, #0
 800df74:	db7e      	blt.n	800e074 <tcp_process+0x4a4>
 800df76:	4b7b      	ldr	r3, [pc, #492]	; (800e164 <tcp_process+0x594>)
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	dc77      	bgt.n	800e074 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2204      	movs	r2, #4
 800df88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d102      	bne.n	800df98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800df92:	23fa      	movs	r3, #250	; 0xfa
 800df94:	76bb      	strb	r3, [r7, #26]
 800df96:	e01d      	b.n	800dfd4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df9c:	699b      	ldr	r3, [r3, #24]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d106      	bne.n	800dfb0 <tcp_process+0x3e0>
 800dfa2:	4b76      	ldr	r3, [pc, #472]	; (800e17c <tcp_process+0x5ac>)
 800dfa4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800dfa8:	4975      	ldr	r1, [pc, #468]	; (800e180 <tcp_process+0x5b0>)
 800dfaa:	4876      	ldr	r0, [pc, #472]	; (800e184 <tcp_process+0x5b4>)
 800dfac:	f007 fdbc 	bl	8015b28 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfb4:	699b      	ldr	r3, [r3, #24]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <tcp_process+0x400>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	6910      	ldr	r0, [r2, #16]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	4798      	blx	r3
 800dfca:	4603      	mov	r3, r0
 800dfcc:	76bb      	strb	r3, [r7, #26]
 800dfce:	e001      	b.n	800dfd4 <tcp_process+0x404>
 800dfd0:	23f0      	movs	r3, #240	; 0xf0
 800dfd2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800dfd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d00a      	beq.n	800dff2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800dfdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dfe0:	f113 0f0d 	cmn.w	r3, #13
 800dfe4:	d002      	beq.n	800dfec <tcp_process+0x41c>
              tcp_abort(pcb);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7fd ff8e 	bl	800bf08 <tcp_abort>
            }
            return ERR_ABRT;
 800dfec:	f06f 030c 	mvn.w	r3, #12
 800dff0:	e1ce      	b.n	800e390 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 fae0 	bl	800e5b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dff8:	4b63      	ldr	r3, [pc, #396]	; (800e188 <tcp_process+0x5b8>)
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <tcp_process+0x43c>
            recv_acked--;
 800e000:	4b61      	ldr	r3, [pc, #388]	; (800e188 <tcp_process+0x5b8>)
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	3b01      	subs	r3, #1
 800e006:	b29a      	uxth	r2, r3
 800e008:	4b5f      	ldr	r3, [pc, #380]	; (800e188 <tcp_process+0x5b8>)
 800e00a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e010:	009a      	lsls	r2, r3, #2
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e016:	005b      	lsls	r3, r3, #1
 800e018:	f241 111c 	movw	r1, #4380	; 0x111c
 800e01c:	428b      	cmp	r3, r1
 800e01e:	bf38      	it	cc
 800e020:	460b      	movcc	r3, r1
 800e022:	429a      	cmp	r2, r3
 800e024:	d204      	bcs.n	800e030 <tcp_process+0x460>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	e00d      	b.n	800e04c <tcp_process+0x47c>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e034:	005b      	lsls	r3, r3, #1
 800e036:	f241 121c 	movw	r2, #4380	; 0x111c
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d904      	bls.n	800e048 <tcp_process+0x478>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	b29b      	uxth	r3, r3
 800e046:	e001      	b.n	800e04c <tcp_process+0x47c>
 800e048:	f241 131c 	movw	r3, #4380	; 0x111c
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e052:	4b4e      	ldr	r3, [pc, #312]	; (800e18c <tcp_process+0x5bc>)
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	f003 0320 	and.w	r3, r3, #32
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d037      	beq.n	800e0ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	8b5b      	ldrh	r3, [r3, #26]
 800e062:	f043 0302 	orr.w	r3, r3, #2
 800e066:	b29a      	uxth	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2207      	movs	r2, #7
 800e070:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e072:	e02c      	b.n	800e0ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e074:	4b3b      	ldr	r3, [pc, #236]	; (800e164 <tcp_process+0x594>)
 800e076:	6819      	ldr	r1, [r3, #0]
 800e078:	4b3b      	ldr	r3, [pc, #236]	; (800e168 <tcp_process+0x598>)
 800e07a:	881b      	ldrh	r3, [r3, #0]
 800e07c:	461a      	mov	r2, r3
 800e07e:	4b3b      	ldr	r3, [pc, #236]	; (800e16c <tcp_process+0x59c>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e084:	4b3a      	ldr	r3, [pc, #232]	; (800e170 <tcp_process+0x5a0>)
 800e086:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e088:	885b      	ldrh	r3, [r3, #2]
 800e08a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e08c:	4a38      	ldr	r2, [pc, #224]	; (800e170 <tcp_process+0x5a0>)
 800e08e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e090:	8812      	ldrh	r2, [r2, #0]
 800e092:	b292      	uxth	r2, r2
 800e094:	9202      	str	r2, [sp, #8]
 800e096:	9301      	str	r3, [sp, #4]
 800e098:	4b36      	ldr	r3, [pc, #216]	; (800e174 <tcp_process+0x5a4>)
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	4b36      	ldr	r3, [pc, #216]	; (800e178 <tcp_process+0x5a8>)
 800e09e:	4602      	mov	r2, r0
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f002 fbd1 	bl	8010848 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e0a6:	e167      	b.n	800e378 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e0a8:	4b2d      	ldr	r3, [pc, #180]	; (800e160 <tcp_process+0x590>)
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	f003 0302 	and.w	r3, r3, #2
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f000 8161 	beq.w	800e378 <tcp_process+0x7a8>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ba:	1e5a      	subs	r2, r3, #1
 800e0bc:	4b2b      	ldr	r3, [pc, #172]	; (800e16c <tcp_process+0x59c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	f040 8159 	bne.w	800e378 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f002 f9b6 	bl	8010438 <tcp_rexmit>
      break;
 800e0cc:	e154      	b.n	800e378 <tcp_process+0x7a8>
 800e0ce:	e153      	b.n	800e378 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 fa71 	bl	800e5b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e0d6:	4b2d      	ldr	r3, [pc, #180]	; (800e18c <tcp_process+0x5bc>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	f003 0320 	and.w	r3, r3, #32
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 814c 	beq.w	800e37c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	8b5b      	ldrh	r3, [r3, #26]
 800e0e8:	f043 0302 	orr.w	r3, r3, #2
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2207      	movs	r2, #7
 800e0f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0f8:	e140      	b.n	800e37c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 fa5c 	bl	800e5b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e100:	4b22      	ldr	r3, [pc, #136]	; (800e18c <tcp_process+0x5bc>)
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	f003 0320 	and.w	r3, r3, #32
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d071      	beq.n	800e1f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e10c:	4b14      	ldr	r3, [pc, #80]	; (800e160 <tcp_process+0x590>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	f003 0310 	and.w	r3, r3, #16
 800e114:	2b00      	cmp	r3, #0
 800e116:	d060      	beq.n	800e1da <tcp_process+0x60a>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e11c:	4b11      	ldr	r3, [pc, #68]	; (800e164 <tcp_process+0x594>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	429a      	cmp	r2, r3
 800e122:	d15a      	bne.n	800e1da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d156      	bne.n	800e1da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	8b5b      	ldrh	r3, [r3, #26]
 800e130:	f043 0302 	orr.w	r3, r3, #2
 800e134:	b29a      	uxth	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7fe fdbc 	bl	800ccb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e140:	4b13      	ldr	r3, [pc, #76]	; (800e190 <tcp_process+0x5c0>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	429a      	cmp	r2, r3
 800e148:	d105      	bne.n	800e156 <tcp_process+0x586>
 800e14a:	4b11      	ldr	r3, [pc, #68]	; (800e190 <tcp_process+0x5c0>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	4a0f      	ldr	r2, [pc, #60]	; (800e190 <tcp_process+0x5c0>)
 800e152:	6013      	str	r3, [r2, #0]
 800e154:	e02e      	b.n	800e1b4 <tcp_process+0x5e4>
 800e156:	4b0e      	ldr	r3, [pc, #56]	; (800e190 <tcp_process+0x5c0>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	617b      	str	r3, [r7, #20]
 800e15c:	e027      	b.n	800e1ae <tcp_process+0x5de>
 800e15e:	bf00      	nop
 800e160:	200086a0 	.word	0x200086a0
 800e164:	20008698 	.word	0x20008698
 800e168:	2000869e 	.word	0x2000869e
 800e16c:	20008694 	.word	0x20008694
 800e170:	20008684 	.word	0x20008684
 800e174:	20005730 	.word	0x20005730
 800e178:	20005734 	.word	0x20005734
 800e17c:	08017e1c 	.word	0x08017e1c
 800e180:	080180bc 	.word	0x080180bc
 800e184:	08017e68 	.word	0x08017e68
 800e188:	2000869c 	.word	0x2000869c
 800e18c:	200086a1 	.word	0x200086a1
 800e190:	20008668 	.word	0x20008668
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d104      	bne.n	800e1a8 <tcp_process+0x5d8>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68da      	ldr	r2, [r3, #12]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	60da      	str	r2, [r3, #12]
 800e1a6:	e005      	b.n	800e1b4 <tcp_process+0x5e4>
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	617b      	str	r3, [r7, #20]
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1ef      	bne.n	800e194 <tcp_process+0x5c4>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	60da      	str	r2, [r3, #12]
 800e1ba:	4b77      	ldr	r3, [pc, #476]	; (800e398 <tcp_process+0x7c8>)
 800e1bc:	2201      	movs	r2, #1
 800e1be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	220a      	movs	r2, #10
 800e1c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e1c6:	4b75      	ldr	r3, [pc, #468]	; (800e39c <tcp_process+0x7cc>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	60da      	str	r2, [r3, #12]
 800e1ce:	4a73      	ldr	r2, [pc, #460]	; (800e39c <tcp_process+0x7cc>)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6013      	str	r3, [r2, #0]
 800e1d4:	f002 fcfa 	bl	8010bcc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e1d8:	e0d2      	b.n	800e380 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	8b5b      	ldrh	r3, [r3, #26]
 800e1de:	f043 0302 	orr.w	r3, r3, #2
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2208      	movs	r2, #8
 800e1ec:	751a      	strb	r2, [r3, #20]
      break;
 800e1ee:	e0c7      	b.n	800e380 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e1f0:	4b6b      	ldr	r3, [pc, #428]	; (800e3a0 <tcp_process+0x7d0>)
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	f003 0310 	and.w	r3, r3, #16
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 80c1 	beq.w	800e380 <tcp_process+0x7b0>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e202:	4b68      	ldr	r3, [pc, #416]	; (800e3a4 <tcp_process+0x7d4>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	429a      	cmp	r2, r3
 800e208:	f040 80ba 	bne.w	800e380 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e210:	2b00      	cmp	r3, #0
 800e212:	f040 80b5 	bne.w	800e380 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2206      	movs	r2, #6
 800e21a:	751a      	strb	r2, [r3, #20]
      break;
 800e21c:	e0b0      	b.n	800e380 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f9ca 	bl	800e5b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e224:	4b60      	ldr	r3, [pc, #384]	; (800e3a8 <tcp_process+0x7d8>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	f003 0320 	and.w	r3, r3, #32
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 80a9 	beq.w	800e384 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	8b5b      	ldrh	r3, [r3, #26]
 800e236:	f043 0302 	orr.w	r3, r3, #2
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7fe fd39 	bl	800ccb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e246:	4b59      	ldr	r3, [pc, #356]	; (800e3ac <tcp_process+0x7dc>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d105      	bne.n	800e25c <tcp_process+0x68c>
 800e250:	4b56      	ldr	r3, [pc, #344]	; (800e3ac <tcp_process+0x7dc>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	4a55      	ldr	r2, [pc, #340]	; (800e3ac <tcp_process+0x7dc>)
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	e013      	b.n	800e284 <tcp_process+0x6b4>
 800e25c:	4b53      	ldr	r3, [pc, #332]	; (800e3ac <tcp_process+0x7dc>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	613b      	str	r3, [r7, #16]
 800e262:	e00c      	b.n	800e27e <tcp_process+0x6ae>
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d104      	bne.n	800e278 <tcp_process+0x6a8>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	68da      	ldr	r2, [r3, #12]
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	60da      	str	r2, [r3, #12]
 800e276:	e005      	b.n	800e284 <tcp_process+0x6b4>
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	613b      	str	r3, [r7, #16]
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1ef      	bne.n	800e264 <tcp_process+0x694>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	60da      	str	r2, [r3, #12]
 800e28a:	4b43      	ldr	r3, [pc, #268]	; (800e398 <tcp_process+0x7c8>)
 800e28c:	2201      	movs	r2, #1
 800e28e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	220a      	movs	r2, #10
 800e294:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e296:	4b41      	ldr	r3, [pc, #260]	; (800e39c <tcp_process+0x7cc>)
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	60da      	str	r2, [r3, #12]
 800e29e:	4a3f      	ldr	r2, [pc, #252]	; (800e39c <tcp_process+0x7cc>)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6013      	str	r3, [r2, #0]
 800e2a4:	f002 fc92 	bl	8010bcc <tcp_timer_needed>
      }
      break;
 800e2a8:	e06c      	b.n	800e384 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f984 	bl	800e5b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e2b0:	4b3b      	ldr	r3, [pc, #236]	; (800e3a0 <tcp_process+0x7d0>)
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	f003 0310 	and.w	r3, r3, #16
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d065      	beq.n	800e388 <tcp_process+0x7b8>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2c0:	4b38      	ldr	r3, [pc, #224]	; (800e3a4 <tcp_process+0x7d4>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d15f      	bne.n	800e388 <tcp_process+0x7b8>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d15b      	bne.n	800e388 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7fe fcf1 	bl	800ccb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e2d6:	4b35      	ldr	r3, [pc, #212]	; (800e3ac <tcp_process+0x7dc>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d105      	bne.n	800e2ec <tcp_process+0x71c>
 800e2e0:	4b32      	ldr	r3, [pc, #200]	; (800e3ac <tcp_process+0x7dc>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	4a31      	ldr	r2, [pc, #196]	; (800e3ac <tcp_process+0x7dc>)
 800e2e8:	6013      	str	r3, [r2, #0]
 800e2ea:	e013      	b.n	800e314 <tcp_process+0x744>
 800e2ec:	4b2f      	ldr	r3, [pc, #188]	; (800e3ac <tcp_process+0x7dc>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	60fb      	str	r3, [r7, #12]
 800e2f2:	e00c      	b.n	800e30e <tcp_process+0x73e>
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d104      	bne.n	800e308 <tcp_process+0x738>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	68da      	ldr	r2, [r3, #12]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	60da      	str	r2, [r3, #12]
 800e306:	e005      	b.n	800e314 <tcp_process+0x744>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	60fb      	str	r3, [r7, #12]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1ef      	bne.n	800e2f4 <tcp_process+0x724>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	60da      	str	r2, [r3, #12]
 800e31a:	4b1f      	ldr	r3, [pc, #124]	; (800e398 <tcp_process+0x7c8>)
 800e31c:	2201      	movs	r2, #1
 800e31e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	220a      	movs	r2, #10
 800e324:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e326:	4b1d      	ldr	r3, [pc, #116]	; (800e39c <tcp_process+0x7cc>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	60da      	str	r2, [r3, #12]
 800e32e:	4a1b      	ldr	r2, [pc, #108]	; (800e39c <tcp_process+0x7cc>)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	f002 fc4a 	bl	8010bcc <tcp_timer_needed>
      }
      break;
 800e338:	e026      	b.n	800e388 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f93c 	bl	800e5b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e340:	4b17      	ldr	r3, [pc, #92]	; (800e3a0 <tcp_process+0x7d0>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	f003 0310 	and.w	r3, r3, #16
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d01f      	beq.n	800e38c <tcp_process+0x7bc>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e350:	4b14      	ldr	r3, [pc, #80]	; (800e3a4 <tcp_process+0x7d4>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	429a      	cmp	r2, r3
 800e356:	d119      	bne.n	800e38c <tcp_process+0x7bc>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d115      	bne.n	800e38c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e360:	4b11      	ldr	r3, [pc, #68]	; (800e3a8 <tcp_process+0x7d8>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	f043 0310 	orr.w	r3, r3, #16
 800e368:	b2da      	uxtb	r2, r3
 800e36a:	4b0f      	ldr	r3, [pc, #60]	; (800e3a8 <tcp_process+0x7d8>)
 800e36c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e36e:	e00d      	b.n	800e38c <tcp_process+0x7bc>
    default:
      break;
 800e370:	bf00      	nop
 800e372:	e00c      	b.n	800e38e <tcp_process+0x7be>
      break;
 800e374:	bf00      	nop
 800e376:	e00a      	b.n	800e38e <tcp_process+0x7be>
      break;
 800e378:	bf00      	nop
 800e37a:	e008      	b.n	800e38e <tcp_process+0x7be>
      break;
 800e37c:	bf00      	nop
 800e37e:	e006      	b.n	800e38e <tcp_process+0x7be>
      break;
 800e380:	bf00      	nop
 800e382:	e004      	b.n	800e38e <tcp_process+0x7be>
      break;
 800e384:	bf00      	nop
 800e386:	e002      	b.n	800e38e <tcp_process+0x7be>
      break;
 800e388:	bf00      	nop
 800e38a:	e000      	b.n	800e38e <tcp_process+0x7be>
      break;
 800e38c:	bf00      	nop
  }
  return ERR_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3724      	adds	r7, #36	; 0x24
 800e394:	46bd      	mov	sp, r7
 800e396:	bd90      	pop	{r4, r7, pc}
 800e398:	20008670 	.word	0x20008670
 800e39c:	2000866c 	.word	0x2000866c
 800e3a0:	200086a0 	.word	0x200086a0
 800e3a4:	20008698 	.word	0x20008698
 800e3a8:	200086a1 	.word	0x200086a1
 800e3ac:	20008668 	.word	0x20008668

0800e3b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e3b0:	b590      	push	{r4, r7, lr}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d106      	bne.n	800e3ce <tcp_oos_insert_segment+0x1e>
 800e3c0:	4b3b      	ldr	r3, [pc, #236]	; (800e4b0 <tcp_oos_insert_segment+0x100>)
 800e3c2:	f240 421f 	movw	r2, #1055	; 0x41f
 800e3c6:	493b      	ldr	r1, [pc, #236]	; (800e4b4 <tcp_oos_insert_segment+0x104>)
 800e3c8:	483b      	ldr	r0, [pc, #236]	; (800e4b8 <tcp_oos_insert_segment+0x108>)
 800e3ca:	f007 fbad 	bl	8015b28 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	899b      	ldrh	r3, [r3, #12]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fb fbfc 	bl	8009bd4 <lwip_htons>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d028      	beq.n	800e43a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e3e8:	6838      	ldr	r0, [r7, #0]
 800e3ea:	f7fe fa63 	bl	800c8b4 <tcp_segs_free>
    next = NULL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	603b      	str	r3, [r7, #0]
 800e3f2:	e056      	b.n	800e4a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	899b      	ldrh	r3, [r3, #12]
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fb fbe9 	bl	8009bd4 <lwip_htons>
 800e402:	4603      	mov	r3, r0
 800e404:	b2db      	uxtb	r3, r3
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00d      	beq.n	800e42a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	899b      	ldrh	r3, [r3, #12]
 800e414:	b29c      	uxth	r4, r3
 800e416:	2001      	movs	r0, #1
 800e418:	f7fb fbdc 	bl	8009bd4 <lwip_htons>
 800e41c:	4603      	mov	r3, r0
 800e41e:	461a      	mov	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	4322      	orrs	r2, r4
 800e426:	b292      	uxth	r2, r2
 800e428:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f7fe fa52 	bl	800c8de <tcp_seg_free>
    while (next &&
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00e      	beq.n	800e45e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	891b      	ldrh	r3, [r3, #8]
 800e444:	461a      	mov	r2, r3
 800e446:	4b1d      	ldr	r3, [pc, #116]	; (800e4bc <tcp_oos_insert_segment+0x10c>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	441a      	add	r2, r3
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	6839      	ldr	r1, [r7, #0]
 800e454:	8909      	ldrh	r1, [r1, #8]
 800e456:	440b      	add	r3, r1
 800e458:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	daca      	bge.n	800e3f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d01e      	beq.n	800e4a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	891b      	ldrh	r3, [r3, #8]
 800e468:	461a      	mov	r2, r3
 800e46a:	4b14      	ldr	r3, [pc, #80]	; (800e4bc <tcp_oos_insert_segment+0x10c>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	441a      	add	r2, r3
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e478:	2b00      	cmp	r3, #0
 800e47a:	dd12      	ble.n	800e4a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	b29a      	uxth	r2, r3
 800e484:	4b0d      	ldr	r3, [pc, #52]	; (800e4bc <tcp_oos_insert_segment+0x10c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	b29b      	uxth	r3, r3
 800e48a:	1ad3      	subs	r3, r2, r3
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	685a      	ldr	r2, [r3, #4]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	891b      	ldrh	r3, [r3, #8]
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f7fc fe15 	bl	800b0cc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	601a      	str	r2, [r3, #0]
}
 800e4a8:	bf00      	nop
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd90      	pop	{r4, r7, pc}
 800e4b0:	08017e1c 	.word	0x08017e1c
 800e4b4:	080180dc 	.word	0x080180dc
 800e4b8:	08017e68 	.word	0x08017e68
 800e4bc:	20008694 	.word	0x20008694

0800e4c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e4c0:	b5b0      	push	{r4, r5, r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
 800e4cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e4ce:	e03e      	b.n	800e54e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fd f802 	bl	800b4e8 <pbuf_clen>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4ee:	8a7a      	ldrh	r2, [r7, #18]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d906      	bls.n	800e502 <tcp_free_acked_segments+0x42>
 800e4f4:	4b2a      	ldr	r3, [pc, #168]	; (800e5a0 <tcp_free_acked_segments+0xe0>)
 800e4f6:	f240 4257 	movw	r2, #1111	; 0x457
 800e4fa:	492a      	ldr	r1, [pc, #168]	; (800e5a4 <tcp_free_acked_segments+0xe4>)
 800e4fc:	482a      	ldr	r0, [pc, #168]	; (800e5a8 <tcp_free_acked_segments+0xe8>)
 800e4fe:	f007 fb13 	bl	8015b28 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e508:	8a7b      	ldrh	r3, [r7, #18]
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	891a      	ldrh	r2, [r3, #8]
 800e518:	4b24      	ldr	r3, [pc, #144]	; (800e5ac <tcp_free_acked_segments+0xec>)
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	4413      	add	r3, r2
 800e51e:	b29a      	uxth	r2, r3
 800e520:	4b22      	ldr	r3, [pc, #136]	; (800e5ac <tcp_free_acked_segments+0xec>)
 800e522:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e524:	6978      	ldr	r0, [r7, #20]
 800e526:	f7fe f9da 	bl	800c8de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00c      	beq.n	800e54e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d109      	bne.n	800e54e <tcp_free_acked_segments+0x8e>
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d106      	bne.n	800e54e <tcp_free_acked_segments+0x8e>
 800e540:	4b17      	ldr	r3, [pc, #92]	; (800e5a0 <tcp_free_acked_segments+0xe0>)
 800e542:	f240 4261 	movw	r2, #1121	; 0x461
 800e546:	491a      	ldr	r1, [pc, #104]	; (800e5b0 <tcp_free_acked_segments+0xf0>)
 800e548:	4817      	ldr	r0, [pc, #92]	; (800e5a8 <tcp_free_acked_segments+0xe8>)
 800e54a:	f007 faed 	bl	8015b28 <iprintf>
  while (seg_list != NULL &&
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d020      	beq.n	800e596 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fb fb4f 	bl	8009bfe <lwip_htonl>
 800e560:	4604      	mov	r4, r0
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	891b      	ldrh	r3, [r3, #8]
 800e566:	461d      	mov	r5, r3
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	899b      	ldrh	r3, [r3, #12]
 800e56e:	b29b      	uxth	r3, r3
 800e570:	4618      	mov	r0, r3
 800e572:	f7fb fb2f 	bl	8009bd4 <lwip_htons>
 800e576:	4603      	mov	r3, r0
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	f003 0303 	and.w	r3, r3, #3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <tcp_free_acked_segments+0xc6>
 800e582:	2301      	movs	r3, #1
 800e584:	e000      	b.n	800e588 <tcp_free_acked_segments+0xc8>
 800e586:	2300      	movs	r3, #0
 800e588:	442b      	add	r3, r5
 800e58a:	18e2      	adds	r2, r4, r3
 800e58c:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <tcp_free_acked_segments+0xf4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e592:	2b00      	cmp	r3, #0
 800e594:	dd9c      	ble.n	800e4d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e596:	68bb      	ldr	r3, [r7, #8]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3718      	adds	r7, #24
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bdb0      	pop	{r4, r5, r7, pc}
 800e5a0:	08017e1c 	.word	0x08017e1c
 800e5a4:	08018104 	.word	0x08018104
 800e5a8:	08017e68 	.word	0x08017e68
 800e5ac:	2000869c 	.word	0x2000869c
 800e5b0:	0801812c 	.word	0x0801812c
 800e5b4:	20008698 	.word	0x20008698

0800e5b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e5b8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ba:	b094      	sub	sp, #80	; 0x50
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d106      	bne.n	800e5d8 <tcp_receive+0x20>
 800e5ca:	4b91      	ldr	r3, [pc, #580]	; (800e810 <tcp_receive+0x258>)
 800e5cc:	f240 427b 	movw	r2, #1147	; 0x47b
 800e5d0:	4990      	ldr	r1, [pc, #576]	; (800e814 <tcp_receive+0x25c>)
 800e5d2:	4891      	ldr	r0, [pc, #580]	; (800e818 <tcp_receive+0x260>)
 800e5d4:	f007 faa8 	bl	8015b28 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7d1b      	ldrb	r3, [r3, #20]
 800e5dc:	2b03      	cmp	r3, #3
 800e5de:	d806      	bhi.n	800e5ee <tcp_receive+0x36>
 800e5e0:	4b8b      	ldr	r3, [pc, #556]	; (800e810 <tcp_receive+0x258>)
 800e5e2:	f240 427c 	movw	r2, #1148	; 0x47c
 800e5e6:	498d      	ldr	r1, [pc, #564]	; (800e81c <tcp_receive+0x264>)
 800e5e8:	488b      	ldr	r0, [pc, #556]	; (800e818 <tcp_receive+0x260>)
 800e5ea:	f007 fa9d 	bl	8015b28 <iprintf>

  if (flags & TCP_ACK) {
 800e5ee:	4b8c      	ldr	r3, [pc, #560]	; (800e820 <tcp_receive+0x268>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	f003 0310 	and.w	r3, r3, #16
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 8264 	beq.w	800eac4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e602:	461a      	mov	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e608:	4413      	add	r3, r2
 800e60a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e610:	4b84      	ldr	r3, [pc, #528]	; (800e824 <tcp_receive+0x26c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	db1b      	blt.n	800e652 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e61e:	4b81      	ldr	r3, [pc, #516]	; (800e824 <tcp_receive+0x26c>)
 800e620:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e622:	429a      	cmp	r2, r3
 800e624:	d106      	bne.n	800e634 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e62a:	4b7f      	ldr	r3, [pc, #508]	; (800e828 <tcp_receive+0x270>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	2b00      	cmp	r3, #0
 800e632:	db0e      	blt.n	800e652 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e638:	4b7b      	ldr	r3, [pc, #492]	; (800e828 <tcp_receive+0x270>)
 800e63a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d125      	bne.n	800e68c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e640:	4b7a      	ldr	r3, [pc, #488]	; (800e82c <tcp_receive+0x274>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	89db      	ldrh	r3, [r3, #14]
 800e646:	b29a      	uxth	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e64e:	429a      	cmp	r2, r3
 800e650:	d91c      	bls.n	800e68c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e652:	4b76      	ldr	r3, [pc, #472]	; (800e82c <tcp_receive+0x274>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	89db      	ldrh	r3, [r3, #14]
 800e658:	b29a      	uxth	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d205      	bcs.n	800e67c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e67c:	4b69      	ldr	r3, [pc, #420]	; (800e824 <tcp_receive+0x26c>)
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e684:	4b68      	ldr	r3, [pc, #416]	; (800e828 <tcp_receive+0x270>)
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e68c:	4b66      	ldr	r3, [pc, #408]	; (800e828 <tcp_receive+0x270>)
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	dc58      	bgt.n	800e74c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e69a:	4b65      	ldr	r3, [pc, #404]	; (800e830 <tcp_receive+0x278>)
 800e69c:	881b      	ldrh	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d14b      	bne.n	800e73a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e6ac:	4413      	add	r3, r2
 800e6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d142      	bne.n	800e73a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	db3d      	blt.n	800e73a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6c2:	4b59      	ldr	r3, [pc, #356]	; (800e828 <tcp_receive+0x270>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d137      	bne.n	800e73a <tcp_receive+0x182>
              found_dupack = 1;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6d4:	2bff      	cmp	r3, #255	; 0xff
 800e6d6:	d007      	beq.n	800e6e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6de:	3301      	adds	r3, #1
 800e6e0:	b2da      	uxtb	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d91b      	bls.n	800e72a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6fc:	4413      	add	r3, r2
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e706:	429a      	cmp	r2, r3
 800e708:	d30a      	bcc.n	800e720 <tcp_receive+0x168>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e714:	4413      	add	r3, r2
 800e716:	b29a      	uxth	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e71e:	e004      	b.n	800e72a <tcp_receive+0x172>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e730:	2b02      	cmp	r3, #2
 800e732:	d902      	bls.n	800e73a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f001 feeb 	bl	8010510 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f040 8161 	bne.w	800ea04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e74a:	e15b      	b.n	800ea04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e74c:	4b36      	ldr	r3, [pc, #216]	; (800e828 <tcp_receive+0x270>)
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	3b01      	subs	r3, #1
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f2c0 814e 	blt.w	800e9fa <tcp_receive+0x442>
 800e75e:	4b32      	ldr	r3, [pc, #200]	; (800e828 <tcp_receive+0x270>)
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f300 8146 	bgt.w	800e9fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	8b5b      	ldrh	r3, [r3, #26]
 800e772:	f003 0304 	and.w	r3, r3, #4
 800e776:	2b00      	cmp	r3, #0
 800e778:	d010      	beq.n	800e79c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	8b5b      	ldrh	r3, [r3, #26]
 800e77e:	f023 0304 	bic.w	r3, r3, #4
 800e782:	b29a      	uxth	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2200      	movs	r2, #0
 800e798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e7aa:	10db      	asrs	r3, r3, #3
 800e7ac:	b21b      	sxth	r3, r3
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	4413      	add	r3, r2
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	b21a      	sxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e7c4:	4b18      	ldr	r3, [pc, #96]	; (800e828 <tcp_receive+0x270>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e7dc:	4b12      	ldr	r3, [pc, #72]	; (800e828 <tcp_receive+0x270>)
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7d1b      	ldrb	r3, [r3, #20]
 800e7e8:	2b03      	cmp	r3, #3
 800e7ea:	f240 8097 	bls.w	800e91c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d245      	bcs.n	800e88a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	8b5b      	ldrh	r3, [r3, #26]
 800e802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e806:	2b00      	cmp	r3, #0
 800e808:	d014      	beq.n	800e834 <tcp_receive+0x27c>
 800e80a:	2301      	movs	r3, #1
 800e80c:	e013      	b.n	800e836 <tcp_receive+0x27e>
 800e80e:	bf00      	nop
 800e810:	08017e1c 	.word	0x08017e1c
 800e814:	0801814c 	.word	0x0801814c
 800e818:	08017e68 	.word	0x08017e68
 800e81c:	08018168 	.word	0x08018168
 800e820:	200086a0 	.word	0x200086a0
 800e824:	20008694 	.word	0x20008694
 800e828:	20008698 	.word	0x20008698
 800e82c:	20008684 	.word	0x20008684
 800e830:	2000869e 	.word	0x2000869e
 800e834:	2302      	movs	r3, #2
 800e836:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e83a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e83e:	b29a      	uxth	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e844:	fb12 f303 	smulbb	r3, r2, r3
 800e848:	b29b      	uxth	r3, r3
 800e84a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e84c:	4293      	cmp	r3, r2
 800e84e:	bf28      	it	cs
 800e850:	4613      	movcs	r3, r2
 800e852:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e85a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e85c:	4413      	add	r3, r2
 800e85e:	b29a      	uxth	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e866:	429a      	cmp	r2, r3
 800e868:	d309      	bcc.n	800e87e <tcp_receive+0x2c6>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e870:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e872:	4413      	add	r3, r2
 800e874:	b29a      	uxth	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e87c:	e04e      	b.n	800e91c <tcp_receive+0x364>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e884:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e888:	e048      	b.n	800e91c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e892:	4413      	add	r3, r2
 800e894:	b29a      	uxth	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d309      	bcc.n	800e8b4 <tcp_receive+0x2fc>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e8a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e8a8:	4413      	add	r3, r2
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e8b2:	e004      	b.n	800e8be <tcp_receive+0x306>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d326      	bcc.n	800e91c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8ee:	4413      	add	r3, r2
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d30a      	bcc.n	800e912 <tcp_receive+0x35a>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e906:	4413      	add	r3, r2
 800e908:	b29a      	uxth	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e910:	e004      	b.n	800e91c <tcp_receive+0x364>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e918:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e924:	4a98      	ldr	r2, [pc, #608]	; (800eb88 <tcp_receive+0x5d0>)
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7ff fdca 	bl	800e4c0 <tcp_free_acked_segments>
 800e92c:	4602      	mov	r2, r0
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e93a:	4a94      	ldr	r2, [pc, #592]	; (800eb8c <tcp_receive+0x5d4>)
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f7ff fdbf 	bl	800e4c0 <tcp_free_acked_segments>
 800e942:	4602      	mov	r2, r0
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d104      	bne.n	800e95a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e956:	861a      	strh	r2, [r3, #48]	; 0x30
 800e958:	e002      	b.n	800e960 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d103      	bne.n	800e976 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e97c:	4b84      	ldr	r3, [pc, #528]	; (800eb90 <tcp_receive+0x5d8>)
 800e97e:	881b      	ldrh	r3, [r3, #0]
 800e980:	4413      	add	r3, r2
 800e982:	b29a      	uxth	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	8b5b      	ldrh	r3, [r3, #26]
 800e98e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e992:	2b00      	cmp	r3, #0
 800e994:	d035      	beq.n	800ea02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d118      	bne.n	800e9d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00c      	beq.n	800e9c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fb f923 	bl	8009bfe <lwip_htonl>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	dc20      	bgt.n	800ea02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	8b5b      	ldrh	r3, [r3, #26]
 800e9c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9c8:	b29a      	uxth	r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9ce:	e018      	b.n	800ea02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fb f90e 	bl	8009bfe <lwip_htonl>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	1ae3      	subs	r3, r4, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	dc0b      	bgt.n	800ea02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	8b5b      	ldrh	r3, [r3, #26]
 800e9ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9f8:	e003      	b.n	800ea02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f001 ff76 	bl	80108ec <tcp_send_empty_ack>
 800ea00:	e000      	b.n	800ea04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ea02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d05b      	beq.n	800eac4 <tcp_receive+0x50c>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea10:	4b60      	ldr	r3, [pc, #384]	; (800eb94 <tcp_receive+0x5dc>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	da54      	bge.n	800eac4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ea1a:	4b5f      	ldr	r3, [pc, #380]	; (800eb98 <tcp_receive+0x5e0>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ea2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea38:	10db      	asrs	r3, r3, #3
 800ea3a:	b21b      	sxth	r3, r3
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea52:	4413      	add	r3, r2
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	b21a      	sxth	r2, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ea5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	da05      	bge.n	800ea70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ea64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea68:	425b      	negs	r3, r3
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ea70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea7a:	109b      	asrs	r3, r3, #2
 800ea7c:	b21b      	sxth	r3, r3
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea94:	4413      	add	r3, r2
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	b21a      	sxth	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eaa4:	10db      	asrs	r3, r3, #3
 800eaa6:	b21b      	sxth	r3, r3
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	4413      	add	r3, r2
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	b21a      	sxth	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800eac4:	4b35      	ldr	r3, [pc, #212]	; (800eb9c <tcp_receive+0x5e4>)
 800eac6:	881b      	ldrh	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f000 84e2 	beq.w	800f492 <tcp_receive+0xeda>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	7d1b      	ldrb	r3, [r3, #20]
 800ead2:	2b06      	cmp	r3, #6
 800ead4:	f200 84dd 	bhi.w	800f492 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eadc:	4b30      	ldr	r3, [pc, #192]	; (800eba0 <tcp_receive+0x5e8>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	3b01      	subs	r3, #1
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f2c0 808f 	blt.w	800ec08 <tcp_receive+0x650>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaee:	4b2b      	ldr	r3, [pc, #172]	; (800eb9c <tcp_receive+0x5e4>)
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	4b2a      	ldr	r3, [pc, #168]	; (800eba0 <tcp_receive+0x5e8>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	440b      	add	r3, r1
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	3301      	adds	r3, #1
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f300 8082 	bgt.w	800ec08 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800eb04:	4b27      	ldr	r3, [pc, #156]	; (800eba4 <tcp_receive+0x5ec>)
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb0e:	4b24      	ldr	r3, [pc, #144]	; (800eba0 <tcp_receive+0x5e8>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	1ad3      	subs	r3, r2, r3
 800eb14:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800eb16:	4b23      	ldr	r3, [pc, #140]	; (800eba4 <tcp_receive+0x5ec>)
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d106      	bne.n	800eb2c <tcp_receive+0x574>
 800eb1e:	4b22      	ldr	r3, [pc, #136]	; (800eba8 <tcp_receive+0x5f0>)
 800eb20:	f240 5294 	movw	r2, #1428	; 0x594
 800eb24:	4921      	ldr	r1, [pc, #132]	; (800ebac <tcp_receive+0x5f4>)
 800eb26:	4822      	ldr	r0, [pc, #136]	; (800ebb0 <tcp_receive+0x5f8>)
 800eb28:	f006 fffe 	bl	8015b28 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d906      	bls.n	800eb44 <tcp_receive+0x58c>
 800eb36:	4b1c      	ldr	r3, [pc, #112]	; (800eba8 <tcp_receive+0x5f0>)
 800eb38:	f240 5295 	movw	r2, #1429	; 0x595
 800eb3c:	491d      	ldr	r1, [pc, #116]	; (800ebb4 <tcp_receive+0x5fc>)
 800eb3e:	481c      	ldr	r0, [pc, #112]	; (800ebb0 <tcp_receive+0x5f8>)
 800eb40:	f006 fff2 	bl	8015b28 <iprintf>
      off = (u16_t)off32;
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800eb4a:	4b16      	ldr	r3, [pc, #88]	; (800eba4 <tcp_receive+0x5ec>)
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	891b      	ldrh	r3, [r3, #8]
 800eb50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d906      	bls.n	800eb66 <tcp_receive+0x5ae>
 800eb58:	4b13      	ldr	r3, [pc, #76]	; (800eba8 <tcp_receive+0x5f0>)
 800eb5a:	f240 5297 	movw	r2, #1431	; 0x597
 800eb5e:	4916      	ldr	r1, [pc, #88]	; (800ebb8 <tcp_receive+0x600>)
 800eb60:	4813      	ldr	r0, [pc, #76]	; (800ebb0 <tcp_receive+0x5f8>)
 800eb62:	f006 ffe1 	bl	8015b28 <iprintf>
      inseg.len -= off;
 800eb66:	4b0f      	ldr	r3, [pc, #60]	; (800eba4 <tcp_receive+0x5ec>)
 800eb68:	891a      	ldrh	r2, [r3, #8]
 800eb6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb6e:	1ad3      	subs	r3, r2, r3
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	4b0c      	ldr	r3, [pc, #48]	; (800eba4 <tcp_receive+0x5ec>)
 800eb74:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800eb76:	4b0b      	ldr	r3, [pc, #44]	; (800eba4 <tcp_receive+0x5ec>)
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	891a      	ldrh	r2, [r3, #8]
 800eb7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800eb84:	e02a      	b.n	800ebdc <tcp_receive+0x624>
 800eb86:	bf00      	nop
 800eb88:	08018184 	.word	0x08018184
 800eb8c:	0801818c 	.word	0x0801818c
 800eb90:	2000869c 	.word	0x2000869c
 800eb94:	20008698 	.word	0x20008698
 800eb98:	2000865c 	.word	0x2000865c
 800eb9c:	2000869e 	.word	0x2000869e
 800eba0:	20008694 	.word	0x20008694
 800eba4:	20008674 	.word	0x20008674
 800eba8:	08017e1c 	.word	0x08017e1c
 800ebac:	08018194 	.word	0x08018194
 800ebb0:	08017e68 	.word	0x08017e68
 800ebb4:	080181a4 	.word	0x080181a4
 800ebb8:	080181b4 	.word	0x080181b4
        off -= p->len;
 800ebbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebbe:	895b      	ldrh	r3, [r3, #10]
 800ebc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ebca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebcc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ebce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ebd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ebd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ebdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebde:	895b      	ldrh	r3, [r3, #10]
 800ebe0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d8e9      	bhi.n	800ebbc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ebe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ebec:	4619      	mov	r1, r3
 800ebee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ebf0:	f7fc fb6c 	bl	800b2cc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf8:	4a91      	ldr	r2, [pc, #580]	; (800ee40 <tcp_receive+0x888>)
 800ebfa:	6013      	str	r3, [r2, #0]
 800ebfc:	4b91      	ldr	r3, [pc, #580]	; (800ee44 <tcp_receive+0x88c>)
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	4a8f      	ldr	r2, [pc, #572]	; (800ee40 <tcp_receive+0x888>)
 800ec02:	6812      	ldr	r2, [r2, #0]
 800ec04:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ec06:	e00d      	b.n	800ec24 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ec08:	4b8d      	ldr	r3, [pc, #564]	; (800ee40 <tcp_receive+0x888>)
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec10:	1ad3      	subs	r3, r2, r3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	da06      	bge.n	800ec24 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	8b5b      	ldrh	r3, [r3, #26]
 800ec1a:	f043 0302 	orr.w	r3, r3, #2
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec24:	4b86      	ldr	r3, [pc, #536]	; (800ee40 <tcp_receive+0x888>)
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2c:	1ad3      	subs	r3, r2, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f2c0 842a 	blt.w	800f488 <tcp_receive+0xed0>
 800ec34:	4b82      	ldr	r3, [pc, #520]	; (800ee40 <tcp_receive+0x888>)
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3c:	6879      	ldr	r1, [r7, #4]
 800ec3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec40:	440b      	add	r3, r1
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	3301      	adds	r3, #1
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f300 841e 	bgt.w	800f488 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec50:	4b7b      	ldr	r3, [pc, #492]	; (800ee40 <tcp_receive+0x888>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	f040 829a 	bne.w	800f18e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ec5a:	4b7a      	ldr	r3, [pc, #488]	; (800ee44 <tcp_receive+0x88c>)
 800ec5c:	891c      	ldrh	r4, [r3, #8]
 800ec5e:	4b79      	ldr	r3, [pc, #484]	; (800ee44 <tcp_receive+0x88c>)
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	899b      	ldrh	r3, [r3, #12]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fa ffb4 	bl	8009bd4 <lwip_htons>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	f003 0303 	and.w	r3, r3, #3
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d001      	beq.n	800ec7c <tcp_receive+0x6c4>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e000      	b.n	800ec7e <tcp_receive+0x6c6>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4423      	add	r3, r4
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	4b71      	ldr	r3, [pc, #452]	; (800ee48 <tcp_receive+0x890>)
 800ec84:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec8a:	4b6f      	ldr	r3, [pc, #444]	; (800ee48 <tcp_receive+0x890>)
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d275      	bcs.n	800ed7e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ec92:	4b6c      	ldr	r3, [pc, #432]	; (800ee44 <tcp_receive+0x88c>)
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	899b      	ldrh	r3, [r3, #12]
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fa ff9a 	bl	8009bd4 <lwip_htons>
 800eca0:	4603      	mov	r3, r0
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	f003 0301 	and.w	r3, r3, #1
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d01f      	beq.n	800ecec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ecac:	4b65      	ldr	r3, [pc, #404]	; (800ee44 <tcp_receive+0x88c>)
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	899b      	ldrh	r3, [r3, #12]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	b21b      	sxth	r3, r3
 800ecb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ecba:	b21c      	sxth	r4, r3
 800ecbc:	4b61      	ldr	r3, [pc, #388]	; (800ee44 <tcp_receive+0x88c>)
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	899b      	ldrh	r3, [r3, #12]
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fa ff85 	bl	8009bd4 <lwip_htons>
 800ecca:	4603      	mov	r3, r0
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fa ff7c 	bl	8009bd4 <lwip_htons>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	b21b      	sxth	r3, r3
 800ece0:	4323      	orrs	r3, r4
 800ece2:	b21a      	sxth	r2, r3
 800ece4:	4b57      	ldr	r3, [pc, #348]	; (800ee44 <tcp_receive+0x88c>)
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	b292      	uxth	r2, r2
 800ecea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecf0:	4b54      	ldr	r3, [pc, #336]	; (800ee44 <tcp_receive+0x88c>)
 800ecf2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ecf4:	4b53      	ldr	r3, [pc, #332]	; (800ee44 <tcp_receive+0x88c>)
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	899b      	ldrh	r3, [r3, #12]
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7fa ff69 	bl	8009bd4 <lwip_htons>
 800ed02:	4603      	mov	r3, r0
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	f003 0302 	and.w	r3, r3, #2
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d005      	beq.n	800ed1a <tcp_receive+0x762>
            inseg.len -= 1;
 800ed0e:	4b4d      	ldr	r3, [pc, #308]	; (800ee44 <tcp_receive+0x88c>)
 800ed10:	891b      	ldrh	r3, [r3, #8]
 800ed12:	3b01      	subs	r3, #1
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	4b4b      	ldr	r3, [pc, #300]	; (800ee44 <tcp_receive+0x88c>)
 800ed18:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ed1a:	4b4a      	ldr	r3, [pc, #296]	; (800ee44 <tcp_receive+0x88c>)
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	4a49      	ldr	r2, [pc, #292]	; (800ee44 <tcp_receive+0x88c>)
 800ed20:	8912      	ldrh	r2, [r2, #8]
 800ed22:	4611      	mov	r1, r2
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fc f9d1 	bl	800b0cc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ed2a:	4b46      	ldr	r3, [pc, #280]	; (800ee44 <tcp_receive+0x88c>)
 800ed2c:	891c      	ldrh	r4, [r3, #8]
 800ed2e:	4b45      	ldr	r3, [pc, #276]	; (800ee44 <tcp_receive+0x88c>)
 800ed30:	68db      	ldr	r3, [r3, #12]
 800ed32:	899b      	ldrh	r3, [r3, #12]
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fa ff4c 	bl	8009bd4 <lwip_htons>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	f003 0303 	and.w	r3, r3, #3
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d001      	beq.n	800ed4c <tcp_receive+0x794>
 800ed48:	2301      	movs	r3, #1
 800ed4a:	e000      	b.n	800ed4e <tcp_receive+0x796>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	4423      	add	r3, r4
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	4b3d      	ldr	r3, [pc, #244]	; (800ee48 <tcp_receive+0x890>)
 800ed54:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ed56:	4b3c      	ldr	r3, [pc, #240]	; (800ee48 <tcp_receive+0x890>)
 800ed58:	881b      	ldrh	r3, [r3, #0]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	4b38      	ldr	r3, [pc, #224]	; (800ee40 <tcp_receive+0x888>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	441a      	add	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed66:	6879      	ldr	r1, [r7, #4]
 800ed68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed6a:	440b      	add	r3, r1
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d006      	beq.n	800ed7e <tcp_receive+0x7c6>
 800ed70:	4b36      	ldr	r3, [pc, #216]	; (800ee4c <tcp_receive+0x894>)
 800ed72:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ed76:	4936      	ldr	r1, [pc, #216]	; (800ee50 <tcp_receive+0x898>)
 800ed78:	4836      	ldr	r0, [pc, #216]	; (800ee54 <tcp_receive+0x89c>)
 800ed7a:	f006 fed5 	bl	8015b28 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f000 80e7 	beq.w	800ef56 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed88:	4b2e      	ldr	r3, [pc, #184]	; (800ee44 <tcp_receive+0x88c>)
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	899b      	ldrh	r3, [r3, #12]
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fa ff1f 	bl	8009bd4 <lwip_htons>
 800ed96:	4603      	mov	r3, r0
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	f003 0301 	and.w	r3, r3, #1
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d010      	beq.n	800edc4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800eda2:	e00a      	b.n	800edba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eda8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f7fd fd92 	bl	800c8de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1f0      	bne.n	800eda4 <tcp_receive+0x7ec>
 800edc2:	e0c8      	b.n	800ef56 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800edca:	e052      	b.n	800ee72 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800edcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	899b      	ldrh	r3, [r3, #12]
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fa fefd 	bl	8009bd4 <lwip_htons>
 800edda:	4603      	mov	r3, r0
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d03d      	beq.n	800ee62 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ede6:	4b17      	ldr	r3, [pc, #92]	; (800ee44 <tcp_receive+0x88c>)
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	899b      	ldrh	r3, [r3, #12]
 800edec:	b29b      	uxth	r3, r3
 800edee:	4618      	mov	r0, r3
 800edf0:	f7fa fef0 	bl	8009bd4 <lwip_htons>
 800edf4:	4603      	mov	r3, r0
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d130      	bne.n	800ee62 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ee00:	4b10      	ldr	r3, [pc, #64]	; (800ee44 <tcp_receive+0x88c>)
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	899b      	ldrh	r3, [r3, #12]
 800ee06:	b29c      	uxth	r4, r3
 800ee08:	2001      	movs	r0, #1
 800ee0a:	f7fa fee3 	bl	8009bd4 <lwip_htons>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	461a      	mov	r2, r3
 800ee12:	4b0c      	ldr	r3, [pc, #48]	; (800ee44 <tcp_receive+0x88c>)
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	4322      	orrs	r2, r4
 800ee18:	b292      	uxth	r2, r2
 800ee1a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ee1c:	4b09      	ldr	r3, [pc, #36]	; (800ee44 <tcp_receive+0x88c>)
 800ee1e:	891c      	ldrh	r4, [r3, #8]
 800ee20:	4b08      	ldr	r3, [pc, #32]	; (800ee44 <tcp_receive+0x88c>)
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	899b      	ldrh	r3, [r3, #12]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fa fed3 	bl	8009bd4 <lwip_htons>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	f003 0303 	and.w	r3, r3, #3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00e      	beq.n	800ee58 <tcp_receive+0x8a0>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e00d      	b.n	800ee5a <tcp_receive+0x8a2>
 800ee3e:	bf00      	nop
 800ee40:	20008694 	.word	0x20008694
 800ee44:	20008674 	.word	0x20008674
 800ee48:	2000869e 	.word	0x2000869e
 800ee4c:	08017e1c 	.word	0x08017e1c
 800ee50:	080181c4 	.word	0x080181c4
 800ee54:	08017e68 	.word	0x08017e68
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4423      	add	r3, r4
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	4b98      	ldr	r3, [pc, #608]	; (800f0c0 <tcp_receive+0xb08>)
 800ee60:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ee62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee64:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ee66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ee6c:	6938      	ldr	r0, [r7, #16]
 800ee6e:	f7fd fd36 	bl	800c8de <tcp_seg_free>
            while (next &&
 800ee72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00e      	beq.n	800ee96 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ee78:	4b91      	ldr	r3, [pc, #580]	; (800f0c0 <tcp_receive+0xb08>)
 800ee7a:	881b      	ldrh	r3, [r3, #0]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	4b91      	ldr	r3, [pc, #580]	; (800f0c4 <tcp_receive+0xb0c>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	441a      	add	r2, r3
 800ee84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee8c:	8909      	ldrh	r1, [r1, #8]
 800ee8e:	440b      	add	r3, r1
 800ee90:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	da9a      	bge.n	800edcc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ee96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d059      	beq.n	800ef50 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ee9c:	4b88      	ldr	r3, [pc, #544]	; (800f0c0 <tcp_receive+0xb08>)
 800ee9e:	881b      	ldrh	r3, [r3, #0]
 800eea0:	461a      	mov	r2, r3
 800eea2:	4b88      	ldr	r3, [pc, #544]	; (800f0c4 <tcp_receive+0xb0c>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	441a      	add	r2, r3
 800eea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	1ad3      	subs	r3, r2, r3
            if (next &&
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	dd4d      	ble.n	800ef50 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800eeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	4b81      	ldr	r3, [pc, #516]	; (800f0c4 <tcp_receive+0xb0c>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	1ad3      	subs	r3, r2, r3
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	4b80      	ldr	r3, [pc, #512]	; (800f0c8 <tcp_receive+0xb10>)
 800eec8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eeca:	4b7f      	ldr	r3, [pc, #508]	; (800f0c8 <tcp_receive+0xb10>)
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	899b      	ldrh	r3, [r3, #12]
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fa fe7e 	bl	8009bd4 <lwip_htons>
 800eed8:	4603      	mov	r3, r0
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	f003 0302 	and.w	r3, r3, #2
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d005      	beq.n	800eef0 <tcp_receive+0x938>
                inseg.len -= 1;
 800eee4:	4b78      	ldr	r3, [pc, #480]	; (800f0c8 <tcp_receive+0xb10>)
 800eee6:	891b      	ldrh	r3, [r3, #8]
 800eee8:	3b01      	subs	r3, #1
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	4b76      	ldr	r3, [pc, #472]	; (800f0c8 <tcp_receive+0xb10>)
 800eeee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800eef0:	4b75      	ldr	r3, [pc, #468]	; (800f0c8 <tcp_receive+0xb10>)
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	4a74      	ldr	r2, [pc, #464]	; (800f0c8 <tcp_receive+0xb10>)
 800eef6:	8912      	ldrh	r2, [r2, #8]
 800eef8:	4611      	mov	r1, r2
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fc f8e6 	bl	800b0cc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ef00:	4b71      	ldr	r3, [pc, #452]	; (800f0c8 <tcp_receive+0xb10>)
 800ef02:	891c      	ldrh	r4, [r3, #8]
 800ef04:	4b70      	ldr	r3, [pc, #448]	; (800f0c8 <tcp_receive+0xb10>)
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	899b      	ldrh	r3, [r3, #12]
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fa fe61 	bl	8009bd4 <lwip_htons>
 800ef12:	4603      	mov	r3, r0
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	f003 0303 	and.w	r3, r3, #3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d001      	beq.n	800ef22 <tcp_receive+0x96a>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e000      	b.n	800ef24 <tcp_receive+0x96c>
 800ef22:	2300      	movs	r3, #0
 800ef24:	4423      	add	r3, r4
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	4b65      	ldr	r3, [pc, #404]	; (800f0c0 <tcp_receive+0xb08>)
 800ef2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ef2c:	4b64      	ldr	r3, [pc, #400]	; (800f0c0 <tcp_receive+0xb08>)
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	461a      	mov	r2, r3
 800ef32:	4b64      	ldr	r3, [pc, #400]	; (800f0c4 <tcp_receive+0xb0c>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	441a      	add	r2, r3
 800ef38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d006      	beq.n	800ef50 <tcp_receive+0x998>
 800ef42:	4b62      	ldr	r3, [pc, #392]	; (800f0cc <tcp_receive+0xb14>)
 800ef44:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ef48:	4961      	ldr	r1, [pc, #388]	; (800f0d0 <tcp_receive+0xb18>)
 800ef4a:	4862      	ldr	r0, [pc, #392]	; (800f0d4 <tcp_receive+0xb1c>)
 800ef4c:	f006 fdec 	bl	8015b28 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef54:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ef56:	4b5a      	ldr	r3, [pc, #360]	; (800f0c0 <tcp_receive+0xb08>)
 800ef58:	881b      	ldrh	r3, [r3, #0]
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	4b59      	ldr	r3, [pc, #356]	; (800f0c4 <tcp_receive+0xb0c>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	441a      	add	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef6a:	4b55      	ldr	r3, [pc, #340]	; (800f0c0 <tcp_receive+0xb08>)
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d206      	bcs.n	800ef80 <tcp_receive+0x9c8>
 800ef72:	4b56      	ldr	r3, [pc, #344]	; (800f0cc <tcp_receive+0xb14>)
 800ef74:	f240 6207 	movw	r2, #1543	; 0x607
 800ef78:	4957      	ldr	r1, [pc, #348]	; (800f0d8 <tcp_receive+0xb20>)
 800ef7a:	4856      	ldr	r0, [pc, #344]	; (800f0d4 <tcp_receive+0xb1c>)
 800ef7c:	f006 fdd4 	bl	8015b28 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef84:	4b4e      	ldr	r3, [pc, #312]	; (800f0c0 <tcp_receive+0xb08>)
 800ef86:	881b      	ldrh	r3, [r3, #0]
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7fc ffc5 	bl	800bf20 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ef96:	4b4c      	ldr	r3, [pc, #304]	; (800f0c8 <tcp_receive+0xb10>)
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	891b      	ldrh	r3, [r3, #8]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d006      	beq.n	800efae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800efa0:	4b49      	ldr	r3, [pc, #292]	; (800f0c8 <tcp_receive+0xb10>)
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	4a4d      	ldr	r2, [pc, #308]	; (800f0dc <tcp_receive+0xb24>)
 800efa6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800efa8:	4b47      	ldr	r3, [pc, #284]	; (800f0c8 <tcp_receive+0xb10>)
 800efaa:	2200      	movs	r2, #0
 800efac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800efae:	4b46      	ldr	r3, [pc, #280]	; (800f0c8 <tcp_receive+0xb10>)
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	899b      	ldrh	r3, [r3, #12]
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fa fe0c 	bl	8009bd4 <lwip_htons>
 800efbc:	4603      	mov	r3, r0
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	f003 0301 	and.w	r3, r3, #1
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f000 80b8 	beq.w	800f13a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800efca:	4b45      	ldr	r3, [pc, #276]	; (800f0e0 <tcp_receive+0xb28>)
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	f043 0320 	orr.w	r3, r3, #32
 800efd2:	b2da      	uxtb	r2, r3
 800efd4:	4b42      	ldr	r3, [pc, #264]	; (800f0e0 <tcp_receive+0xb28>)
 800efd6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800efd8:	e0af      	b.n	800f13a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efde:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	4a36      	ldr	r2, [pc, #216]	; (800f0c4 <tcp_receive+0xb0c>)
 800efea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	891b      	ldrh	r3, [r3, #8]
 800eff0:	461c      	mov	r4, r3
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	899b      	ldrh	r3, [r3, #12]
 800eff8:	b29b      	uxth	r3, r3
 800effa:	4618      	mov	r0, r3
 800effc:	f7fa fdea 	bl	8009bd4 <lwip_htons>
 800f000:	4603      	mov	r3, r0
 800f002:	b2db      	uxtb	r3, r3
 800f004:	f003 0303 	and.w	r3, r3, #3
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d001      	beq.n	800f010 <tcp_receive+0xa58>
 800f00c:	2301      	movs	r3, #1
 800f00e:	e000      	b.n	800f012 <tcp_receive+0xa5a>
 800f010:	2300      	movs	r3, #0
 800f012:	191a      	adds	r2, r3, r4
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f018:	441a      	add	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f022:	461c      	mov	r4, r3
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	891b      	ldrh	r3, [r3, #8]
 800f028:	461d      	mov	r5, r3
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	899b      	ldrh	r3, [r3, #12]
 800f030:	b29b      	uxth	r3, r3
 800f032:	4618      	mov	r0, r3
 800f034:	f7fa fdce 	bl	8009bd4 <lwip_htons>
 800f038:	4603      	mov	r3, r0
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	f003 0303 	and.w	r3, r3, #3
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <tcp_receive+0xa90>
 800f044:	2301      	movs	r3, #1
 800f046:	e000      	b.n	800f04a <tcp_receive+0xa92>
 800f048:	2300      	movs	r3, #0
 800f04a:	442b      	add	r3, r5
 800f04c:	429c      	cmp	r4, r3
 800f04e:	d206      	bcs.n	800f05e <tcp_receive+0xaa6>
 800f050:	4b1e      	ldr	r3, [pc, #120]	; (800f0cc <tcp_receive+0xb14>)
 800f052:	f240 622b 	movw	r2, #1579	; 0x62b
 800f056:	4923      	ldr	r1, [pc, #140]	; (800f0e4 <tcp_receive+0xb2c>)
 800f058:	481e      	ldr	r0, [pc, #120]	; (800f0d4 <tcp_receive+0xb1c>)
 800f05a:	f006 fd65 	bl	8015b28 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	891b      	ldrh	r3, [r3, #8]
 800f062:	461c      	mov	r4, r3
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	899b      	ldrh	r3, [r3, #12]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fa fdb1 	bl	8009bd4 <lwip_htons>
 800f072:	4603      	mov	r3, r0
 800f074:	b2db      	uxtb	r3, r3
 800f076:	f003 0303 	and.w	r3, r3, #3
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d001      	beq.n	800f082 <tcp_receive+0xaca>
 800f07e:	2301      	movs	r3, #1
 800f080:	e000      	b.n	800f084 <tcp_receive+0xacc>
 800f082:	2300      	movs	r3, #0
 800f084:	1919      	adds	r1, r3, r4
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f08a:	b28b      	uxth	r3, r1
 800f08c:	1ad3      	subs	r3, r2, r3
 800f08e:	b29a      	uxth	r2, r3
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7fc ff43 	bl	800bf20 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	891b      	ldrh	r3, [r3, #8]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d028      	beq.n	800f0f6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f0a4:	4b0d      	ldr	r3, [pc, #52]	; (800f0dc <tcp_receive+0xb24>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d01d      	beq.n	800f0e8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f0ac:	4b0b      	ldr	r3, [pc, #44]	; (800f0dc <tcp_receive+0xb24>)
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	f7fc fa50 	bl	800b55c <pbuf_cat>
 800f0bc:	e018      	b.n	800f0f0 <tcp_receive+0xb38>
 800f0be:	bf00      	nop
 800f0c0:	2000869e 	.word	0x2000869e
 800f0c4:	20008694 	.word	0x20008694
 800f0c8:	20008674 	.word	0x20008674
 800f0cc:	08017e1c 	.word	0x08017e1c
 800f0d0:	080181fc 	.word	0x080181fc
 800f0d4:	08017e68 	.word	0x08017e68
 800f0d8:	08018238 	.word	0x08018238
 800f0dc:	200086a4 	.word	0x200086a4
 800f0e0:	200086a1 	.word	0x200086a1
 800f0e4:	08018258 	.word	0x08018258
            } else {
              recv_data = cseg->p;
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	4a70      	ldr	r2, [pc, #448]	; (800f2b0 <tcp_receive+0xcf8>)
 800f0ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	899b      	ldrh	r3, [r3, #12]
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fa fd68 	bl	8009bd4 <lwip_htons>
 800f104:	4603      	mov	r3, r0
 800f106:	b2db      	uxtb	r3, r3
 800f108:	f003 0301 	and.w	r3, r3, #1
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00d      	beq.n	800f12c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f110:	4b68      	ldr	r3, [pc, #416]	; (800f2b4 <tcp_receive+0xcfc>)
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	f043 0320 	orr.w	r3, r3, #32
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	4b66      	ldr	r3, [pc, #408]	; (800f2b4 <tcp_receive+0xcfc>)
 800f11c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	7d1b      	ldrb	r3, [r3, #20]
 800f122:	2b04      	cmp	r3, #4
 800f124:	d102      	bne.n	800f12c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2207      	movs	r2, #7
 800f12a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f134:	68b8      	ldr	r0, [r7, #8]
 800f136:	f7fd fbd2 	bl	800c8de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d008      	beq.n	800f154 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	685a      	ldr	r2, [r3, #4]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f14e:	429a      	cmp	r2, r3
 800f150:	f43f af43 	beq.w	800efda <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	8b5b      	ldrh	r3, [r3, #26]
 800f158:	f003 0301 	and.w	r3, r3, #1
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00e      	beq.n	800f17e <tcp_receive+0xbc6>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	8b5b      	ldrh	r3, [r3, #26]
 800f164:	f023 0301 	bic.w	r3, r3, #1
 800f168:	b29a      	uxth	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	835a      	strh	r2, [r3, #26]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	8b5b      	ldrh	r3, [r3, #26]
 800f172:	f043 0302 	orr.w	r3, r3, #2
 800f176:	b29a      	uxth	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f17c:	e188      	b.n	800f490 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	8b5b      	ldrh	r3, [r3, #26]
 800f182:	f043 0301 	orr.w	r3, r3, #1
 800f186:	b29a      	uxth	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f18c:	e180      	b.n	800f490 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f192:	2b00      	cmp	r3, #0
 800f194:	d106      	bne.n	800f1a4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f196:	4848      	ldr	r0, [pc, #288]	; (800f2b8 <tcp_receive+0xd00>)
 800f198:	f7fd fbba 	bl	800c910 <tcp_seg_copy>
 800f19c:	4602      	mov	r2, r0
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	675a      	str	r2, [r3, #116]	; 0x74
 800f1a2:	e16d      	b.n	800f480 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1ae:	e157      	b.n	800f460 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	685a      	ldr	r2, [r3, #4]
 800f1b6:	4b41      	ldr	r3, [pc, #260]	; (800f2bc <tcp_receive+0xd04>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d11d      	bne.n	800f1fa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f1be:	4b3e      	ldr	r3, [pc, #248]	; (800f2b8 <tcp_receive+0xd00>)
 800f1c0:	891a      	ldrh	r2, [r3, #8]
 800f1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c4:	891b      	ldrh	r3, [r3, #8]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	f240 814f 	bls.w	800f46a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f1cc:	483a      	ldr	r0, [pc, #232]	; (800f2b8 <tcp_receive+0xd00>)
 800f1ce:	f7fd fb9f 	bl	800c910 <tcp_seg_copy>
 800f1d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f000 8149 	beq.w	800f46e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d003      	beq.n	800f1ea <tcp_receive+0xc32>
                    prev->next = cseg;
 800f1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e4:	697a      	ldr	r2, [r7, #20]
 800f1e6:	601a      	str	r2, [r3, #0]
 800f1e8:	e002      	b.n	800f1f0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	697a      	ldr	r2, [r7, #20]
 800f1ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f1f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1f2:	6978      	ldr	r0, [r7, #20]
 800f1f4:	f7ff f8dc 	bl	800e3b0 <tcp_oos_insert_segment>
                }
                break;
 800f1f8:	e139      	b.n	800f46e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d117      	bne.n	800f230 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f200:	4b2e      	ldr	r3, [pc, #184]	; (800f2bc <tcp_receive+0xd04>)
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	da57      	bge.n	800f2c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f210:	4829      	ldr	r0, [pc, #164]	; (800f2b8 <tcp_receive+0xd00>)
 800f212:	f7fd fb7d 	bl	800c910 <tcp_seg_copy>
 800f216:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f000 8129 	beq.w	800f472 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	69ba      	ldr	r2, [r7, #24]
 800f224:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f228:	69b8      	ldr	r0, [r7, #24]
 800f22a:	f7ff f8c1 	bl	800e3b0 <tcp_oos_insert_segment>
                  }
                  break;
 800f22e:	e120      	b.n	800f472 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f230:	4b22      	ldr	r3, [pc, #136]	; (800f2bc <tcp_receive+0xd04>)
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	1ad3      	subs	r3, r2, r3
 800f23c:	3b01      	subs	r3, #1
 800f23e:	2b00      	cmp	r3, #0
 800f240:	db3e      	blt.n	800f2c0 <tcp_receive+0xd08>
 800f242:	4b1e      	ldr	r3, [pc, #120]	; (800f2bc <tcp_receive+0xd04>)
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	3301      	adds	r3, #1
 800f250:	2b00      	cmp	r3, #0
 800f252:	dc35      	bgt.n	800f2c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f254:	4818      	ldr	r0, [pc, #96]	; (800f2b8 <tcp_receive+0xd00>)
 800f256:	f7fd fb5b 	bl	800c910 <tcp_seg_copy>
 800f25a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f000 8109 	beq.w	800f476 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f26c:	8912      	ldrh	r2, [r2, #8]
 800f26e:	441a      	add	r2, r3
 800f270:	4b12      	ldr	r3, [pc, #72]	; (800f2bc <tcp_receive+0xd04>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	1ad3      	subs	r3, r2, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	dd12      	ble.n	800f2a0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f27a:	4b10      	ldr	r3, [pc, #64]	; (800f2bc <tcp_receive+0xd04>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	b29a      	uxth	r2, r3
 800f280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	b29b      	uxth	r3, r3
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f28e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f292:	685a      	ldr	r2, [r3, #4]
 800f294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f296:	891b      	ldrh	r3, [r3, #8]
 800f298:	4619      	mov	r1, r3
 800f29a:	4610      	mov	r0, r2
 800f29c:	f7fb ff16 	bl	800b0cc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a2:	69fa      	ldr	r2, [r7, #28]
 800f2a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f2a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2a8:	69f8      	ldr	r0, [r7, #28]
 800f2aa:	f7ff f881 	bl	800e3b0 <tcp_oos_insert_segment>
                  }
                  break;
 800f2ae:	e0e2      	b.n	800f476 <tcp_receive+0xebe>
 800f2b0:	200086a4 	.word	0x200086a4
 800f2b4:	200086a1 	.word	0x200086a1
 800f2b8:	20008674 	.word	0x20008674
 800f2bc:	20008694 	.word	0x20008694
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f040 80c6 	bne.w	800f45a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f2ce:	4b80      	ldr	r3, [pc, #512]	; (800f4d0 <tcp_receive+0xf18>)
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f340 80bd 	ble.w	800f45a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	899b      	ldrh	r3, [r3, #12]
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fa fc73 	bl	8009bd4 <lwip_htons>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	f003 0301 	and.w	r3, r3, #1
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f040 80bf 	bne.w	800f47a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f2fc:	4875      	ldr	r0, [pc, #468]	; (800f4d4 <tcp_receive+0xf1c>)
 800f2fe:	f7fd fb07 	bl	800c910 <tcp_seg_copy>
 800f302:	4602      	mov	r2, r0
 800f304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f306:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f000 80b6 	beq.w	800f47e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f31a:	8912      	ldrh	r2, [r2, #8]
 800f31c:	441a      	add	r2, r3
 800f31e:	4b6c      	ldr	r3, [pc, #432]	; (800f4d0 <tcp_receive+0xf18>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	1ad3      	subs	r3, r2, r3
 800f324:	2b00      	cmp	r3, #0
 800f326:	dd12      	ble.n	800f34e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f328:	4b69      	ldr	r3, [pc, #420]	; (800f4d0 <tcp_receive+0xf18>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	b29b      	uxth	r3, r3
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	b29a      	uxth	r2, r3
 800f33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f340:	685a      	ldr	r2, [r3, #4]
 800f342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f344:	891b      	ldrh	r3, [r3, #8]
 800f346:	4619      	mov	r1, r3
 800f348:	4610      	mov	r0, r2
 800f34a:	f7fb febf 	bl	800b0cc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f34e:	4b62      	ldr	r3, [pc, #392]	; (800f4d8 <tcp_receive+0xf20>)
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	461a      	mov	r2, r3
 800f354:	4b5e      	ldr	r3, [pc, #376]	; (800f4d0 <tcp_receive+0xf18>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	441a      	add	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35e:	6879      	ldr	r1, [r7, #4]
 800f360:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f362:	440b      	add	r3, r1
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	f340 8089 	ble.w	800f47e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	899b      	ldrh	r3, [r3, #12]
 800f374:	b29b      	uxth	r3, r3
 800f376:	4618      	mov	r0, r3
 800f378:	f7fa fc2c 	bl	8009bd4 <lwip_htons>
 800f37c:	4603      	mov	r3, r0
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	2b00      	cmp	r3, #0
 800f386:	d022      	beq.n	800f3ce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	899b      	ldrh	r3, [r3, #12]
 800f390:	b29b      	uxth	r3, r3
 800f392:	b21b      	sxth	r3, r3
 800f394:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f398:	b21c      	sxth	r4, r3
 800f39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	899b      	ldrh	r3, [r3, #12]
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fa fc15 	bl	8009bd4 <lwip_htons>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fa fc0c 	bl	8009bd4 <lwip_htons>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	b21b      	sxth	r3, r3
 800f3c0:	4323      	orrs	r3, r4
 800f3c2:	b21a      	sxth	r2, r3
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	b292      	uxth	r2, r2
 800f3cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3d8:	4413      	add	r3, r2
 800f3da:	b299      	uxth	r1, r3
 800f3dc:	4b3c      	ldr	r3, [pc, #240]	; (800f4d0 <tcp_receive+0xf18>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	1a8a      	subs	r2, r1, r2
 800f3e8:	b292      	uxth	r2, r2
 800f3ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	685a      	ldr	r2, [r3, #4]
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	891b      	ldrh	r3, [r3, #8]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4610      	mov	r0, r2
 800f3fc:	f7fb fe66 	bl	800b0cc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	891c      	ldrh	r4, [r3, #8]
 800f406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	899b      	ldrh	r3, [r3, #12]
 800f40e:	b29b      	uxth	r3, r3
 800f410:	4618      	mov	r0, r3
 800f412:	f7fa fbdf 	bl	8009bd4 <lwip_htons>
 800f416:	4603      	mov	r3, r0
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	f003 0303 	and.w	r3, r3, #3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d001      	beq.n	800f426 <tcp_receive+0xe6e>
 800f422:	2301      	movs	r3, #1
 800f424:	e000      	b.n	800f428 <tcp_receive+0xe70>
 800f426:	2300      	movs	r3, #0
 800f428:	4423      	add	r3, r4
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	4b2a      	ldr	r3, [pc, #168]	; (800f4d8 <tcp_receive+0xf20>)
 800f42e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f430:	4b29      	ldr	r3, [pc, #164]	; (800f4d8 <tcp_receive+0xf20>)
 800f432:	881b      	ldrh	r3, [r3, #0]
 800f434:	461a      	mov	r2, r3
 800f436:	4b26      	ldr	r3, [pc, #152]	; (800f4d0 <tcp_receive+0xf18>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	441a      	add	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f440:	6879      	ldr	r1, [r7, #4]
 800f442:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f444:	440b      	add	r3, r1
 800f446:	429a      	cmp	r2, r3
 800f448:	d019      	beq.n	800f47e <tcp_receive+0xec6>
 800f44a:	4b24      	ldr	r3, [pc, #144]	; (800f4dc <tcp_receive+0xf24>)
 800f44c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f450:	4923      	ldr	r1, [pc, #140]	; (800f4e0 <tcp_receive+0xf28>)
 800f452:	4824      	ldr	r0, [pc, #144]	; (800f4e4 <tcp_receive+0xf2c>)
 800f454:	f006 fb68 	bl	8015b28 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f458:	e011      	b.n	800f47e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f462:	2b00      	cmp	r3, #0
 800f464:	f47f aea4 	bne.w	800f1b0 <tcp_receive+0xbf8>
 800f468:	e00a      	b.n	800f480 <tcp_receive+0xec8>
                break;
 800f46a:	bf00      	nop
 800f46c:	e008      	b.n	800f480 <tcp_receive+0xec8>
                break;
 800f46e:	bf00      	nop
 800f470:	e006      	b.n	800f480 <tcp_receive+0xec8>
                  break;
 800f472:	bf00      	nop
 800f474:	e004      	b.n	800f480 <tcp_receive+0xec8>
                  break;
 800f476:	bf00      	nop
 800f478:	e002      	b.n	800f480 <tcp_receive+0xec8>
                  break;
 800f47a:	bf00      	nop
 800f47c:	e000      	b.n	800f480 <tcp_receive+0xec8>
                break;
 800f47e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f001 fa33 	bl	80108ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f486:	e003      	b.n	800f490 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f001 fa2f 	bl	80108ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f48e:	e01a      	b.n	800f4c6 <tcp_receive+0xf0e>
 800f490:	e019      	b.n	800f4c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f492:	4b0f      	ldr	r3, [pc, #60]	; (800f4d0 <tcp_receive+0xf18>)
 800f494:	681a      	ldr	r2, [r3, #0]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f49a:	1ad3      	subs	r3, r2, r3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	db0a      	blt.n	800f4b6 <tcp_receive+0xefe>
 800f4a0:	4b0b      	ldr	r3, [pc, #44]	; (800f4d0 <tcp_receive+0xf18>)
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a8:	6879      	ldr	r1, [r7, #4]
 800f4aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4ac:	440b      	add	r3, r1
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dd07      	ble.n	800f4c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	8b5b      	ldrh	r3, [r3, #26]
 800f4ba:	f043 0302 	orr.w	r3, r3, #2
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f4c4:	e7ff      	b.n	800f4c6 <tcp_receive+0xf0e>
 800f4c6:	bf00      	nop
 800f4c8:	3750      	adds	r7, #80	; 0x50
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bdb0      	pop	{r4, r5, r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	20008694 	.word	0x20008694
 800f4d4:	20008674 	.word	0x20008674
 800f4d8:	2000869e 	.word	0x2000869e
 800f4dc:	08017e1c 	.word	0x08017e1c
 800f4e0:	080181c4 	.word	0x080181c4
 800f4e4:	08017e68 	.word	0x08017e68

0800f4e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f4ee:	4b15      	ldr	r3, [pc, #84]	; (800f544 <tcp_get_next_optbyte+0x5c>)
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	1c5a      	adds	r2, r3, #1
 800f4f4:	b291      	uxth	r1, r2
 800f4f6:	4a13      	ldr	r2, [pc, #76]	; (800f544 <tcp_get_next_optbyte+0x5c>)
 800f4f8:	8011      	strh	r1, [r2, #0]
 800f4fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f4fc:	4b12      	ldr	r3, [pc, #72]	; (800f548 <tcp_get_next_optbyte+0x60>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d004      	beq.n	800f50e <tcp_get_next_optbyte+0x26>
 800f504:	4b11      	ldr	r3, [pc, #68]	; (800f54c <tcp_get_next_optbyte+0x64>)
 800f506:	881b      	ldrh	r3, [r3, #0]
 800f508:	88fa      	ldrh	r2, [r7, #6]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d208      	bcs.n	800f520 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f50e:	4b10      	ldr	r3, [pc, #64]	; (800f550 <tcp_get_next_optbyte+0x68>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	3314      	adds	r3, #20
 800f514:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f516:	88fb      	ldrh	r3, [r7, #6]
 800f518:	683a      	ldr	r2, [r7, #0]
 800f51a:	4413      	add	r3, r2
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	e00b      	b.n	800f538 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f520:	88fb      	ldrh	r3, [r7, #6]
 800f522:	b2da      	uxtb	r2, r3
 800f524:	4b09      	ldr	r3, [pc, #36]	; (800f54c <tcp_get_next_optbyte+0x64>)
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	1ad3      	subs	r3, r2, r3
 800f52c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f52e:	4b06      	ldr	r3, [pc, #24]	; (800f548 <tcp_get_next_optbyte+0x60>)
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	797b      	ldrb	r3, [r7, #5]
 800f534:	4413      	add	r3, r2
 800f536:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f538:	4618      	mov	r0, r3
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr
 800f544:	20008690 	.word	0x20008690
 800f548:	2000868c 	.word	0x2000868c
 800f54c:	2000868a 	.word	0x2000868a
 800f550:	20008684 	.word	0x20008684

0800f554 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d106      	bne.n	800f570 <tcp_parseopt+0x1c>
 800f562:	4b32      	ldr	r3, [pc, #200]	; (800f62c <tcp_parseopt+0xd8>)
 800f564:	f240 727d 	movw	r2, #1917	; 0x77d
 800f568:	4931      	ldr	r1, [pc, #196]	; (800f630 <tcp_parseopt+0xdc>)
 800f56a:	4832      	ldr	r0, [pc, #200]	; (800f634 <tcp_parseopt+0xe0>)
 800f56c:	f006 fadc 	bl	8015b28 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f570:	4b31      	ldr	r3, [pc, #196]	; (800f638 <tcp_parseopt+0xe4>)
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d055      	beq.n	800f624 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f578:	4b30      	ldr	r3, [pc, #192]	; (800f63c <tcp_parseopt+0xe8>)
 800f57a:	2200      	movs	r2, #0
 800f57c:	801a      	strh	r2, [r3, #0]
 800f57e:	e045      	b.n	800f60c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f580:	f7ff ffb2 	bl	800f4e8 <tcp_get_next_optbyte>
 800f584:	4603      	mov	r3, r0
 800f586:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f588:	7bfb      	ldrb	r3, [r7, #15]
 800f58a:	2b02      	cmp	r3, #2
 800f58c:	d006      	beq.n	800f59c <tcp_parseopt+0x48>
 800f58e:	2b02      	cmp	r3, #2
 800f590:	dc2b      	bgt.n	800f5ea <tcp_parseopt+0x96>
 800f592:	2b00      	cmp	r3, #0
 800f594:	d041      	beq.n	800f61a <tcp_parseopt+0xc6>
 800f596:	2b01      	cmp	r3, #1
 800f598:	d127      	bne.n	800f5ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f59a:	e037      	b.n	800f60c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f59c:	f7ff ffa4 	bl	800f4e8 <tcp_get_next_optbyte>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b04      	cmp	r3, #4
 800f5a4:	d13b      	bne.n	800f61e <tcp_parseopt+0xca>
 800f5a6:	4b25      	ldr	r3, [pc, #148]	; (800f63c <tcp_parseopt+0xe8>)
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	4a22      	ldr	r2, [pc, #136]	; (800f638 <tcp_parseopt+0xe4>)
 800f5ae:	8812      	ldrh	r2, [r2, #0]
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	da34      	bge.n	800f61e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f5b4:	f7ff ff98 	bl	800f4e8 <tcp_get_next_optbyte>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	021b      	lsls	r3, r3, #8
 800f5be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f5c0:	f7ff ff92 	bl	800f4e8 <tcp_get_next_optbyte>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	89bb      	ldrh	r3, [r7, #12]
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f5ce:	89bb      	ldrh	r3, [r7, #12]
 800f5d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f5d4:	d804      	bhi.n	800f5e0 <tcp_parseopt+0x8c>
 800f5d6:	89bb      	ldrh	r3, [r7, #12]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d001      	beq.n	800f5e0 <tcp_parseopt+0x8c>
 800f5dc:	89ba      	ldrh	r2, [r7, #12]
 800f5de:	e001      	b.n	800f5e4 <tcp_parseopt+0x90>
 800f5e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f5e8:	e010      	b.n	800f60c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f5ea:	f7ff ff7d 	bl	800f4e8 <tcp_get_next_optbyte>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f5f2:	7afb      	ldrb	r3, [r7, #11]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d914      	bls.n	800f622 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f5f8:	7afb      	ldrb	r3, [r7, #11]
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	4b0f      	ldr	r3, [pc, #60]	; (800f63c <tcp_parseopt+0xe8>)
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	4413      	add	r3, r2
 800f602:	b29b      	uxth	r3, r3
 800f604:	3b02      	subs	r3, #2
 800f606:	b29a      	uxth	r2, r3
 800f608:	4b0c      	ldr	r3, [pc, #48]	; (800f63c <tcp_parseopt+0xe8>)
 800f60a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f60c:	4b0b      	ldr	r3, [pc, #44]	; (800f63c <tcp_parseopt+0xe8>)
 800f60e:	881a      	ldrh	r2, [r3, #0]
 800f610:	4b09      	ldr	r3, [pc, #36]	; (800f638 <tcp_parseopt+0xe4>)
 800f612:	881b      	ldrh	r3, [r3, #0]
 800f614:	429a      	cmp	r2, r3
 800f616:	d3b3      	bcc.n	800f580 <tcp_parseopt+0x2c>
 800f618:	e004      	b.n	800f624 <tcp_parseopt+0xd0>
          return;
 800f61a:	bf00      	nop
 800f61c:	e002      	b.n	800f624 <tcp_parseopt+0xd0>
            return;
 800f61e:	bf00      	nop
 800f620:	e000      	b.n	800f624 <tcp_parseopt+0xd0>
            return;
 800f622:	bf00      	nop
      }
    }
  }
}
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	08017e1c 	.word	0x08017e1c
 800f630:	08018280 	.word	0x08018280
 800f634:	08017e68 	.word	0x08017e68
 800f638:	20008688 	.word	0x20008688
 800f63c:	20008690 	.word	0x20008690

0800f640 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f640:	b480      	push	{r7}
 800f642:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f644:	4b05      	ldr	r3, [pc, #20]	; (800f65c <tcp_trigger_input_pcb_close+0x1c>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	f043 0310 	orr.w	r3, r3, #16
 800f64c:	b2da      	uxtb	r2, r3
 800f64e:	4b03      	ldr	r3, [pc, #12]	; (800f65c <tcp_trigger_input_pcb_close+0x1c>)
 800f650:	701a      	strb	r2, [r3, #0]
}
 800f652:	bf00      	nop
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	200086a1 	.word	0x200086a1

0800f660 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00a      	beq.n	800f688 <tcp_route+0x28>
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	7a1b      	ldrb	r3, [r3, #8]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d006      	beq.n	800f688 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	7a1b      	ldrb	r3, [r3, #8]
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fb fb6a 	bl	800ad58 <netif_get_by_index>
 800f684:	4603      	mov	r3, r0
 800f686:	e003      	b.n	800f690 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f004 fff9 	bl	8014680 <ip4_route>
 800f68e:	4603      	mov	r3, r0
  }
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f698:	b590      	push	{r4, r7, lr}
 800f69a:	b087      	sub	sp, #28
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	603b      	str	r3, [r7, #0]
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d105      	bne.n	800f6ba <tcp_create_segment+0x22>
 800f6ae:	4b44      	ldr	r3, [pc, #272]	; (800f7c0 <tcp_create_segment+0x128>)
 800f6b0:	22a3      	movs	r2, #163	; 0xa3
 800f6b2:	4944      	ldr	r1, [pc, #272]	; (800f7c4 <tcp_create_segment+0x12c>)
 800f6b4:	4844      	ldr	r0, [pc, #272]	; (800f7c8 <tcp_create_segment+0x130>)
 800f6b6:	f006 fa37 	bl	8015b28 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d105      	bne.n	800f6cc <tcp_create_segment+0x34>
 800f6c0:	4b3f      	ldr	r3, [pc, #252]	; (800f7c0 <tcp_create_segment+0x128>)
 800f6c2:	22a4      	movs	r2, #164	; 0xa4
 800f6c4:	4941      	ldr	r1, [pc, #260]	; (800f7cc <tcp_create_segment+0x134>)
 800f6c6:	4840      	ldr	r0, [pc, #256]	; (800f7c8 <tcp_create_segment+0x130>)
 800f6c8:	f006 fa2e 	bl	8015b28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f6cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	f003 0304 	and.w	r3, r3, #4
 800f6d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f6da:	2003      	movs	r0, #3
 800f6dc:	f7fa ffaa 	bl	800a634 <memp_malloc>
 800f6e0:	6138      	str	r0, [r7, #16]
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d104      	bne.n	800f6f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f6e8:	68b8      	ldr	r0, [r7, #8]
 800f6ea:	f7fb fe75 	bl	800b3d8 <pbuf_free>
    return NULL;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	e061      	b.n	800f7b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f6f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	891a      	ldrh	r2, [r3, #8]
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	429a      	cmp	r2, r3
 800f710:	d205      	bcs.n	800f71e <tcp_create_segment+0x86>
 800f712:	4b2b      	ldr	r3, [pc, #172]	; (800f7c0 <tcp_create_segment+0x128>)
 800f714:	22b0      	movs	r2, #176	; 0xb0
 800f716:	492e      	ldr	r1, [pc, #184]	; (800f7d0 <tcp_create_segment+0x138>)
 800f718:	482b      	ldr	r0, [pc, #172]	; (800f7c8 <tcp_create_segment+0x130>)
 800f71a:	f006 fa05 	bl	8015b28 <iprintf>
  seg->len = p->tot_len - optlen;
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	891a      	ldrh	r2, [r3, #8]
 800f722:	7dfb      	ldrb	r3, [r7, #23]
 800f724:	b29b      	uxth	r3, r3
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	b29a      	uxth	r2, r3
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f72e:	2114      	movs	r1, #20
 800f730:	68b8      	ldr	r0, [r7, #8]
 800f732:	f7fb fdbb 	bl	800b2ac <pbuf_add_header>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d004      	beq.n	800f746 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f73c:	6938      	ldr	r0, [r7, #16]
 800f73e:	f7fd f8ce 	bl	800c8de <tcp_seg_free>
    return NULL;
 800f742:	2300      	movs	r3, #0
 800f744:	e037      	b.n	800f7b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	685a      	ldr	r2, [r3, #4]
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	8ada      	ldrh	r2, [r3, #22]
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	68dc      	ldr	r4, [r3, #12]
 800f758:	4610      	mov	r0, r2
 800f75a:	f7fa fa3b 	bl	8009bd4 <lwip_htons>
 800f75e:	4603      	mov	r3, r0
 800f760:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	8b1a      	ldrh	r2, [r3, #24]
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	68dc      	ldr	r4, [r3, #12]
 800f76a:	4610      	mov	r0, r2
 800f76c:	f7fa fa32 	bl	8009bd4 <lwip_htons>
 800f770:	4603      	mov	r3, r0
 800f772:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	68dc      	ldr	r4, [r3, #12]
 800f778:	6838      	ldr	r0, [r7, #0]
 800f77a:	f7fa fa40 	bl	8009bfe <lwip_htonl>
 800f77e:	4603      	mov	r3, r0
 800f780:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f782:	7dfb      	ldrb	r3, [r7, #23]
 800f784:	089b      	lsrs	r3, r3, #2
 800f786:	b2db      	uxtb	r3, r3
 800f788:	b29b      	uxth	r3, r3
 800f78a:	3305      	adds	r3, #5
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	031b      	lsls	r3, r3, #12
 800f790:	b29a      	uxth	r2, r3
 800f792:	79fb      	ldrb	r3, [r7, #7]
 800f794:	b29b      	uxth	r3, r3
 800f796:	4313      	orrs	r3, r2
 800f798:	b29a      	uxth	r2, r3
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	68dc      	ldr	r4, [r3, #12]
 800f79e:	4610      	mov	r0, r2
 800f7a0:	f7fa fa18 	bl	8009bd4 <lwip_htons>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	749a      	strb	r2, [r3, #18]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	74da      	strb	r2, [r3, #19]
  return seg;
 800f7b4:	693b      	ldr	r3, [r7, #16]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	371c      	adds	r7, #28
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd90      	pop	{r4, r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	0801829c 	.word	0x0801829c
 800f7c4:	080182d0 	.word	0x080182d0
 800f7c8:	080182f0 	.word	0x080182f0
 800f7cc:	08018318 	.word	0x08018318
 800f7d0:	0801833c 	.word	0x0801833c

0800f7d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f7d4:	b590      	push	{r4, r7, lr}
 800f7d6:	b08b      	sub	sp, #44	; 0x2c
 800f7d8:	af02      	add	r7, sp, #8
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	61fb      	str	r3, [r7, #28]
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <tcp_split_unsent_seg+0x2c>
 800f7f2:	4b95      	ldr	r3, [pc, #596]	; (800fa48 <tcp_split_unsent_seg+0x274>)
 800f7f4:	f240 324b 	movw	r2, #843	; 0x34b
 800f7f8:	4994      	ldr	r1, [pc, #592]	; (800fa4c <tcp_split_unsent_seg+0x278>)
 800f7fa:	4895      	ldr	r0, [pc, #596]	; (800fa50 <tcp_split_unsent_seg+0x27c>)
 800f7fc:	f006 f994 	bl	8015b28 <iprintf>

  useg = pcb->unsent;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f804:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d102      	bne.n	800f812 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f80c:	f04f 33ff 	mov.w	r3, #4294967295
 800f810:	e116      	b.n	800fa40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f812:	887b      	ldrh	r3, [r7, #2]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d109      	bne.n	800f82c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f818:	4b8b      	ldr	r3, [pc, #556]	; (800fa48 <tcp_split_unsent_seg+0x274>)
 800f81a:	f240 3253 	movw	r2, #851	; 0x353
 800f81e:	498d      	ldr	r1, [pc, #564]	; (800fa54 <tcp_split_unsent_seg+0x280>)
 800f820:	488b      	ldr	r0, [pc, #556]	; (800fa50 <tcp_split_unsent_seg+0x27c>)
 800f822:	f006 f981 	bl	8015b28 <iprintf>
    return ERR_VAL;
 800f826:	f06f 0305 	mvn.w	r3, #5
 800f82a:	e109      	b.n	800fa40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	891b      	ldrh	r3, [r3, #8]
 800f830:	887a      	ldrh	r2, [r7, #2]
 800f832:	429a      	cmp	r2, r3
 800f834:	d301      	bcc.n	800f83a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f836:	2300      	movs	r3, #0
 800f838:	e102      	b.n	800fa40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f83e:	887a      	ldrh	r2, [r7, #2]
 800f840:	429a      	cmp	r2, r3
 800f842:	d906      	bls.n	800f852 <tcp_split_unsent_seg+0x7e>
 800f844:	4b80      	ldr	r3, [pc, #512]	; (800fa48 <tcp_split_unsent_seg+0x274>)
 800f846:	f240 325b 	movw	r2, #859	; 0x35b
 800f84a:	4983      	ldr	r1, [pc, #524]	; (800fa58 <tcp_split_unsent_seg+0x284>)
 800f84c:	4880      	ldr	r0, [pc, #512]	; (800fa50 <tcp_split_unsent_seg+0x27c>)
 800f84e:	f006 f96b 	bl	8015b28 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	891b      	ldrh	r3, [r3, #8]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d106      	bne.n	800f868 <tcp_split_unsent_seg+0x94>
 800f85a:	4b7b      	ldr	r3, [pc, #492]	; (800fa48 <tcp_split_unsent_seg+0x274>)
 800f85c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f860:	497e      	ldr	r1, [pc, #504]	; (800fa5c <tcp_split_unsent_seg+0x288>)
 800f862:	487b      	ldr	r0, [pc, #492]	; (800fa50 <tcp_split_unsent_seg+0x27c>)
 800f864:	f006 f960 	bl	8015b28 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	7a9b      	ldrb	r3, [r3, #10]
 800f86c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f86e:	7bfb      	ldrb	r3, [r7, #15]
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	b2db      	uxtb	r3, r3
 800f874:	f003 0304 	and.w	r3, r3, #4
 800f878:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	891a      	ldrh	r2, [r3, #8]
 800f87e:	887b      	ldrh	r3, [r7, #2]
 800f880:	1ad3      	subs	r3, r2, r3
 800f882:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f884:	7bbb      	ldrb	r3, [r7, #14]
 800f886:	b29a      	uxth	r2, r3
 800f888:	89bb      	ldrh	r3, [r7, #12]
 800f88a:	4413      	add	r3, r2
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f892:	4619      	mov	r1, r3
 800f894:	2036      	movs	r0, #54	; 0x36
 800f896:	f7fb fabb 	bl	800ae10 <pbuf_alloc>
 800f89a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f000 80b7 	beq.w	800fa12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	891a      	ldrh	r2, [r3, #8]
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	891b      	ldrh	r3, [r3, #8]
 800f8ae:	1ad3      	subs	r3, r2, r3
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	887b      	ldrh	r3, [r7, #2]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	6858      	ldr	r0, [r3, #4]
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	685a      	ldr	r2, [r3, #4]
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
 800f8c2:	18d1      	adds	r1, r2, r3
 800f8c4:	897b      	ldrh	r3, [r7, #10]
 800f8c6:	89ba      	ldrh	r2, [r7, #12]
 800f8c8:	f7fb ff80 	bl	800b7cc <pbuf_copy_partial>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	89bb      	ldrh	r3, [r7, #12]
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	f040 809f 	bne.w	800fa16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	899b      	ldrh	r3, [r3, #12]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fa f977 	bl	8009bd4 <lwip_htons>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f8f4:	7efb      	ldrb	r3, [r7, #27]
 800f8f6:	f003 0308 	and.w	r3, r3, #8
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d007      	beq.n	800f90e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f8fe:	7efb      	ldrb	r3, [r7, #27]
 800f900:	f023 0308 	bic.w	r3, r3, #8
 800f904:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f906:	7ebb      	ldrb	r3, [r7, #26]
 800f908:	f043 0308 	orr.w	r3, r3, #8
 800f90c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f90e:	7efb      	ldrb	r3, [r7, #27]
 800f910:	f003 0301 	and.w	r3, r3, #1
 800f914:	2b00      	cmp	r3, #0
 800f916:	d007      	beq.n	800f928 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f918:	7efb      	ldrb	r3, [r7, #27]
 800f91a:	f023 0301 	bic.w	r3, r3, #1
 800f91e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f920:	7ebb      	ldrb	r3, [r7, #26]
 800f922:	f043 0301 	orr.w	r3, r3, #1
 800f926:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fa f965 	bl	8009bfe <lwip_htonl>
 800f934:	4602      	mov	r2, r0
 800f936:	887b      	ldrh	r3, [r7, #2]
 800f938:	18d1      	adds	r1, r2, r3
 800f93a:	7eba      	ldrb	r2, [r7, #26]
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
 800f93e:	9300      	str	r3, [sp, #0]
 800f940:	460b      	mov	r3, r1
 800f942:	6939      	ldr	r1, [r7, #16]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff fea7 	bl	800f698 <tcp_create_segment>
 800f94a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d063      	beq.n	800fa1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	4618      	mov	r0, r3
 800f958:	f7fb fdc6 	bl	800b4e8 <pbuf_clen>
 800f95c:	4603      	mov	r3, r0
 800f95e:	461a      	mov	r2, r3
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f966:	1a9b      	subs	r3, r3, r2
 800f968:	b29a      	uxth	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	6858      	ldr	r0, [r3, #4]
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	891a      	ldrh	r2, [r3, #8]
 800f97a:	89bb      	ldrh	r3, [r7, #12]
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	b29b      	uxth	r3, r3
 800f980:	4619      	mov	r1, r3
 800f982:	f7fb fba3 	bl	800b0cc <pbuf_realloc>
  useg->len -= remainder;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	891a      	ldrh	r2, [r3, #8]
 800f98a:	89bb      	ldrh	r3, [r7, #12]
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	b29a      	uxth	r2, r3
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	899b      	ldrh	r3, [r3, #12]
 800f99a:	b29c      	uxth	r4, r3
 800f99c:	7efb      	ldrb	r3, [r7, #27]
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fa f917 	bl	8009bd4 <lwip_htons>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	4322      	orrs	r2, r4
 800f9b0:	b292      	uxth	r2, r2
 800f9b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fb fd95 	bl	800b4e8 <pbuf_clen>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9c8:	4413      	add	r3, r2
 800f9ca:	b29a      	uxth	r2, r3
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fb fd86 	bl	800b4e8 <pbuf_clen>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	461a      	mov	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9e6:	4413      	add	r3, r2
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	69fa      	ldr	r2, [r7, #28]
 800f9fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d103      	bne.n	800fa0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	e016      	b.n	800fa40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fa12:	bf00      	nop
 800fa14:	e002      	b.n	800fa1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fa16:	bf00      	nop
 800fa18:	e000      	b.n	800fa1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fa1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d006      	beq.n	800fa30 <tcp_split_unsent_seg+0x25c>
 800fa22:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <tcp_split_unsent_seg+0x274>)
 800fa24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fa28:	490d      	ldr	r1, [pc, #52]	; (800fa60 <tcp_split_unsent_seg+0x28c>)
 800fa2a:	4809      	ldr	r0, [pc, #36]	; (800fa50 <tcp_split_unsent_seg+0x27c>)
 800fa2c:	f006 f87c 	bl	8015b28 <iprintf>
  if (p != NULL) {
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fa36:	6938      	ldr	r0, [r7, #16]
 800fa38:	f7fb fcce 	bl	800b3d8 <pbuf_free>
  }

  return ERR_MEM;
 800fa3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3724      	adds	r7, #36	; 0x24
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd90      	pop	{r4, r7, pc}
 800fa48:	0801829c 	.word	0x0801829c
 800fa4c:	08018630 	.word	0x08018630
 800fa50:	080182f0 	.word	0x080182f0
 800fa54:	08018654 	.word	0x08018654
 800fa58:	08018678 	.word	0x08018678
 800fa5c:	08018688 	.word	0x08018688
 800fa60:	08018698 	.word	0x08018698

0800fa64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fa64:	b590      	push	{r4, r7, lr}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d106      	bne.n	800fa80 <tcp_send_fin+0x1c>
 800fa72:	4b21      	ldr	r3, [pc, #132]	; (800faf8 <tcp_send_fin+0x94>)
 800fa74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fa78:	4920      	ldr	r1, [pc, #128]	; (800fafc <tcp_send_fin+0x98>)
 800fa7a:	4821      	ldr	r0, [pc, #132]	; (800fb00 <tcp_send_fin+0x9c>)
 800fa7c:	f006 f854 	bl	8015b28 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d02e      	beq.n	800fae6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa8c:	60fb      	str	r3, [r7, #12]
 800fa8e:	e002      	b.n	800fa96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d1f8      	bne.n	800fa90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	899b      	ldrh	r3, [r3, #12]
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fa f894 	bl	8009bd4 <lwip_htons>
 800faac:	4603      	mov	r3, r0
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	f003 0307 	and.w	r3, r3, #7
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d116      	bne.n	800fae6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	899b      	ldrh	r3, [r3, #12]
 800fabe:	b29c      	uxth	r4, r3
 800fac0:	2001      	movs	r0, #1
 800fac2:	f7fa f887 	bl	8009bd4 <lwip_htons>
 800fac6:	4603      	mov	r3, r0
 800fac8:	461a      	mov	r2, r3
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	4322      	orrs	r2, r4
 800fad0:	b292      	uxth	r2, r2
 800fad2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	8b5b      	ldrh	r3, [r3, #26]
 800fad8:	f043 0320 	orr.w	r3, r3, #32
 800fadc:	b29a      	uxth	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fae2:	2300      	movs	r3, #0
 800fae4:	e004      	b.n	800faf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fae6:	2101      	movs	r1, #1
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f80b 	bl	800fb04 <tcp_enqueue_flags>
 800faee:	4603      	mov	r3, r0
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3714      	adds	r7, #20
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd90      	pop	{r4, r7, pc}
 800faf8:	0801829c 	.word	0x0801829c
 800fafc:	080186a4 	.word	0x080186a4
 800fb00:	080182f0 	.word	0x080182f0

0800fb04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b08a      	sub	sp, #40	; 0x28
 800fb08:	af02      	add	r7, sp, #8
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fb10:	2300      	movs	r3, #0
 800fb12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fb14:	2300      	movs	r3, #0
 800fb16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fb18:	78fb      	ldrb	r3, [r7, #3]
 800fb1a:	f003 0303 	and.w	r3, r3, #3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d106      	bne.n	800fb30 <tcp_enqueue_flags+0x2c>
 800fb22:	4b67      	ldr	r3, [pc, #412]	; (800fcc0 <tcp_enqueue_flags+0x1bc>)
 800fb24:	f240 4211 	movw	r2, #1041	; 0x411
 800fb28:	4966      	ldr	r1, [pc, #408]	; (800fcc4 <tcp_enqueue_flags+0x1c0>)
 800fb2a:	4867      	ldr	r0, [pc, #412]	; (800fcc8 <tcp_enqueue_flags+0x1c4>)
 800fb2c:	f005 fffc 	bl	8015b28 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d106      	bne.n	800fb44 <tcp_enqueue_flags+0x40>
 800fb36:	4b62      	ldr	r3, [pc, #392]	; (800fcc0 <tcp_enqueue_flags+0x1bc>)
 800fb38:	f240 4213 	movw	r2, #1043	; 0x413
 800fb3c:	4963      	ldr	r1, [pc, #396]	; (800fccc <tcp_enqueue_flags+0x1c8>)
 800fb3e:	4862      	ldr	r0, [pc, #392]	; (800fcc8 <tcp_enqueue_flags+0x1c4>)
 800fb40:	f005 fff2 	bl	8015b28 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fb44:	78fb      	ldrb	r3, [r7, #3]
 800fb46:	f003 0302 	and.w	r3, r3, #2
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d001      	beq.n	800fb52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fb52:	7ffb      	ldrb	r3, [r7, #31]
 800fb54:	009b      	lsls	r3, r3, #2
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fb5e:	7dfb      	ldrb	r3, [r7, #23]
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb66:	4619      	mov	r1, r3
 800fb68:	2036      	movs	r0, #54	; 0x36
 800fb6a:	f7fb f951 	bl	800ae10 <pbuf_alloc>
 800fb6e:	6138      	str	r0, [r7, #16]
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d109      	bne.n	800fb8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	8b5b      	ldrh	r3, [r3, #26]
 800fb7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fb84:	f04f 33ff 	mov.w	r3, #4294967295
 800fb88:	e095      	b.n	800fcb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	895a      	ldrh	r2, [r3, #10]
 800fb8e:	7dfb      	ldrb	r3, [r7, #23]
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d206      	bcs.n	800fba4 <tcp_enqueue_flags+0xa0>
 800fb96:	4b4a      	ldr	r3, [pc, #296]	; (800fcc0 <tcp_enqueue_flags+0x1bc>)
 800fb98:	f240 4239 	movw	r2, #1081	; 0x439
 800fb9c:	494c      	ldr	r1, [pc, #304]	; (800fcd0 <tcp_enqueue_flags+0x1cc>)
 800fb9e:	484a      	ldr	r0, [pc, #296]	; (800fcc8 <tcp_enqueue_flags+0x1c4>)
 800fba0:	f005 ffc2 	bl	8015b28 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fba8:	78fa      	ldrb	r2, [r7, #3]
 800fbaa:	7ffb      	ldrb	r3, [r7, #31]
 800fbac:	9300      	str	r3, [sp, #0]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	6939      	ldr	r1, [r7, #16]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7ff fd70 	bl	800f698 <tcp_create_segment>
 800fbb8:	60f8      	str	r0, [r7, #12]
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d109      	bne.n	800fbd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	8b5b      	ldrh	r3, [r3, #26]
 800fbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fbce:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd2:	e070      	b.n	800fcb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	f003 0303 	and.w	r3, r3, #3
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d006      	beq.n	800fbee <tcp_enqueue_flags+0xea>
 800fbe0:	4b37      	ldr	r3, [pc, #220]	; (800fcc0 <tcp_enqueue_flags+0x1bc>)
 800fbe2:	f240 4242 	movw	r2, #1090	; 0x442
 800fbe6:	493b      	ldr	r1, [pc, #236]	; (800fcd4 <tcp_enqueue_flags+0x1d0>)
 800fbe8:	4837      	ldr	r0, [pc, #220]	; (800fcc8 <tcp_enqueue_flags+0x1c4>)
 800fbea:	f005 ff9d 	bl	8015b28 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	891b      	ldrh	r3, [r3, #8]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d006      	beq.n	800fc04 <tcp_enqueue_flags+0x100>
 800fbf6:	4b32      	ldr	r3, [pc, #200]	; (800fcc0 <tcp_enqueue_flags+0x1bc>)
 800fbf8:	f240 4243 	movw	r2, #1091	; 0x443
 800fbfc:	4936      	ldr	r1, [pc, #216]	; (800fcd8 <tcp_enqueue_flags+0x1d4>)
 800fbfe:	4832      	ldr	r0, [pc, #200]	; (800fcc8 <tcp_enqueue_flags+0x1c4>)
 800fc00:	f005 ff92 	bl	8015b28 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d103      	bne.n	800fc14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc12:	e00d      	b.n	800fc30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc18:	61bb      	str	r3, [r7, #24]
 800fc1a:	e002      	b.n	800fc22 <tcp_enqueue_flags+0x11e>
 800fc1c:	69bb      	ldr	r3, [r7, #24]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	61bb      	str	r3, [r7, #24]
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1f8      	bne.n	800fc1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fc38:	78fb      	ldrb	r3, [r7, #3]
 800fc3a:	f003 0302 	and.w	r3, r3, #2
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d104      	bne.n	800fc4c <tcp_enqueue_flags+0x148>
 800fc42:	78fb      	ldrb	r3, [r7, #3]
 800fc44:	f003 0301 	and.w	r3, r3, #1
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d004      	beq.n	800fc56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fc56:	78fb      	ldrb	r3, [r7, #3]
 800fc58:	f003 0301 	and.w	r3, r3, #1
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d006      	beq.n	800fc6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	8b5b      	ldrh	r3, [r3, #26]
 800fc64:	f043 0320 	orr.w	r3, r3, #32
 800fc68:	b29a      	uxth	r2, r3
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fb fc38 	bl	800b4e8 <pbuf_clen>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc82:	4413      	add	r3, r2
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00e      	beq.n	800fcb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d10a      	bne.n	800fcb4 <tcp_enqueue_flags+0x1b0>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <tcp_enqueue_flags+0x1b0>
 800fca6:	4b06      	ldr	r3, [pc, #24]	; (800fcc0 <tcp_enqueue_flags+0x1bc>)
 800fca8:	f240 4265 	movw	r2, #1125	; 0x465
 800fcac:	490b      	ldr	r1, [pc, #44]	; (800fcdc <tcp_enqueue_flags+0x1d8>)
 800fcae:	4806      	ldr	r0, [pc, #24]	; (800fcc8 <tcp_enqueue_flags+0x1c4>)
 800fcb0:	f005 ff3a 	bl	8015b28 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3720      	adds	r7, #32
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	0801829c 	.word	0x0801829c
 800fcc4:	080186c0 	.word	0x080186c0
 800fcc8:	080182f0 	.word	0x080182f0
 800fccc:	08018718 	.word	0x08018718
 800fcd0:	08018738 	.word	0x08018738
 800fcd4:	08018774 	.word	0x08018774
 800fcd8:	0801878c 	.word	0x0801878c
 800fcdc:	080187b8 	.word	0x080187b8

0800fce0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fce0:	b5b0      	push	{r4, r5, r7, lr}
 800fce2:	b08a      	sub	sp, #40	; 0x28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d106      	bne.n	800fcfc <tcp_output+0x1c>
 800fcee:	4b8a      	ldr	r3, [pc, #552]	; (800ff18 <tcp_output+0x238>)
 800fcf0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fcf4:	4989      	ldr	r1, [pc, #548]	; (800ff1c <tcp_output+0x23c>)
 800fcf6:	488a      	ldr	r0, [pc, #552]	; (800ff20 <tcp_output+0x240>)
 800fcf8:	f005 ff16 	bl	8015b28 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	7d1b      	ldrb	r3, [r3, #20]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d106      	bne.n	800fd12 <tcp_output+0x32>
 800fd04:	4b84      	ldr	r3, [pc, #528]	; (800ff18 <tcp_output+0x238>)
 800fd06:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fd0a:	4986      	ldr	r1, [pc, #536]	; (800ff24 <tcp_output+0x244>)
 800fd0c:	4884      	ldr	r0, [pc, #528]	; (800ff20 <tcp_output+0x240>)
 800fd0e:	f005 ff0b 	bl	8015b28 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fd12:	4b85      	ldr	r3, [pc, #532]	; (800ff28 <tcp_output+0x248>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d101      	bne.n	800fd20 <tcp_output+0x40>
    return ERR_OK;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	e1ce      	b.n	80100be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	bf28      	it	cs
 800fd30:	4613      	movcs	r3, r2
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d10b      	bne.n	800fd5a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	8b5b      	ldrh	r3, [r3, #26]
 800fd46:	f003 0302 	and.w	r3, r3, #2
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f000 81aa 	beq.w	80100a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 fdcb 	bl	80108ec <tcp_send_empty_ack>
 800fd56:	4603      	mov	r3, r0
 800fd58:	e1b1      	b.n	80100be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fd5a:	6879      	ldr	r1, [r7, #4]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	3304      	adds	r3, #4
 800fd60:	461a      	mov	r2, r3
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7ff fc7c 	bl	800f660 <tcp_route>
 800fd68:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d102      	bne.n	800fd76 <tcp_output+0x96>
    return ERR_RTE;
 800fd70:	f06f 0303 	mvn.w	r3, #3
 800fd74:	e1a3      	b.n	80100be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d003      	beq.n	800fd84 <tcp_output+0xa4>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d111      	bne.n	800fda8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d002      	beq.n	800fd90 <tcp_output+0xb0>
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	3304      	adds	r3, #4
 800fd8e:	e000      	b.n	800fd92 <tcp_output+0xb2>
 800fd90:	2300      	movs	r3, #0
 800fd92:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d102      	bne.n	800fda0 <tcp_output+0xc0>
      return ERR_RTE;
 800fd9a:	f06f 0303 	mvn.w	r3, #3
 800fd9e:	e18e      	b.n	80100be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7f9 ff25 	bl	8009bfe <lwip_htonl>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdba:	1ad3      	subs	r3, r2, r3
 800fdbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdbe:	8912      	ldrh	r2, [r2, #8]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	69ba      	ldr	r2, [r7, #24]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d227      	bcs.n	800fe18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fdce:	461a      	mov	r2, r3
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d114      	bne.n	800fe00 <tcp_output+0x120>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d110      	bne.n	800fe00 <tcp_output+0x120>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d10b      	bne.n	800fe00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	8b5b      	ldrh	r3, [r3, #26]
 800fe04:	f003 0302 	and.w	r3, r3, #2
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f000 814d 	beq.w	80100a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 fd6c 	bl	80108ec <tcp_send_empty_ack>
 800fe14:	4603      	mov	r3, r0
 800fe16:	e152      	b.n	80100be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fe26:	6a3b      	ldr	r3, [r7, #32]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f000 811c 	beq.w	8010066 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fe2e:	e002      	b.n	800fe36 <tcp_output+0x156>
 800fe30:	6a3b      	ldr	r3, [r7, #32]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	623b      	str	r3, [r7, #32]
 800fe36:	6a3b      	ldr	r3, [r7, #32]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d1f8      	bne.n	800fe30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fe3e:	e112      	b.n	8010066 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	899b      	ldrh	r3, [r3, #12]
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7f9 fec3 	bl	8009bd4 <lwip_htons>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	f003 0304 	and.w	r3, r3, #4
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d006      	beq.n	800fe68 <tcp_output+0x188>
 800fe5a:	4b2f      	ldr	r3, [pc, #188]	; (800ff18 <tcp_output+0x238>)
 800fe5c:	f240 5236 	movw	r2, #1334	; 0x536
 800fe60:	4932      	ldr	r1, [pc, #200]	; (800ff2c <tcp_output+0x24c>)
 800fe62:	482f      	ldr	r0, [pc, #188]	; (800ff20 <tcp_output+0x240>)
 800fe64:	f005 fe60 	bl	8015b28 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d01f      	beq.n	800feb0 <tcp_output+0x1d0>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	8b5b      	ldrh	r3, [r3, #26]
 800fe74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d119      	bne.n	800feb0 <tcp_output+0x1d0>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d00b      	beq.n	800fe9c <tcp_output+0x1bc>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d110      	bne.n	800feb0 <tcp_output+0x1d0>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe92:	891a      	ldrh	r2, [r3, #8]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d209      	bcs.n	800feb0 <tcp_output+0x1d0>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d004      	beq.n	800feb0 <tcp_output+0x1d0>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800feac:	2b08      	cmp	r3, #8
 800feae:	d901      	bls.n	800feb4 <tcp_output+0x1d4>
 800feb0:	2301      	movs	r3, #1
 800feb2:	e000      	b.n	800feb6 <tcp_output+0x1d6>
 800feb4:	2300      	movs	r3, #0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d106      	bne.n	800fec8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8b5b      	ldrh	r3, [r3, #26]
 800febe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f000 80e4 	beq.w	8010090 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	7d1b      	ldrb	r3, [r3, #20]
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d00d      	beq.n	800feec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	899b      	ldrh	r3, [r3, #12]
 800fed6:	b29c      	uxth	r4, r3
 800fed8:	2010      	movs	r0, #16
 800feda:	f7f9 fe7b 	bl	8009bd4 <lwip_htons>
 800fede:	4603      	mov	r3, r0
 800fee0:	461a      	mov	r2, r3
 800fee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	4322      	orrs	r2, r4
 800fee8:	b292      	uxth	r2, r2
 800feea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800feec:	697a      	ldr	r2, [r7, #20]
 800feee:	6879      	ldr	r1, [r7, #4]
 800fef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fef2:	f000 f909 	bl	8010108 <tcp_output_segment>
 800fef6:	4603      	mov	r3, r0
 800fef8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fefa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d016      	beq.n	800ff30 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	8b5b      	ldrh	r3, [r3, #26]
 800ff06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	835a      	strh	r2, [r3, #26]
      return err;
 800ff10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff14:	e0d3      	b.n	80100be <tcp_output+0x3de>
 800ff16:	bf00      	nop
 800ff18:	0801829c 	.word	0x0801829c
 800ff1c:	080187e0 	.word	0x080187e0
 800ff20:	080182f0 	.word	0x080182f0
 800ff24:	080187f8 	.word	0x080187f8
 800ff28:	200086a8 	.word	0x200086a8
 800ff2c:	08018820 	.word	0x08018820
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ff30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	7d1b      	ldrb	r3, [r3, #20]
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d006      	beq.n	800ff4e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	8b5b      	ldrh	r3, [r3, #26]
 800ff44:	f023 0303 	bic.w	r3, r3, #3
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7f9 fe52 	bl	8009bfe <lwip_htonl>
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5e:	891b      	ldrh	r3, [r3, #8]
 800ff60:	461d      	mov	r5, r3
 800ff62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	899b      	ldrh	r3, [r3, #12]
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7f9 fe32 	bl	8009bd4 <lwip_htons>
 800ff70:	4603      	mov	r3, r0
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	f003 0303 	and.w	r3, r3, #3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <tcp_output+0x2a0>
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e000      	b.n	800ff82 <tcp_output+0x2a2>
 800ff80:	2300      	movs	r3, #0
 800ff82:	442b      	add	r3, r5
 800ff84:	4423      	add	r3, r4
 800ff86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	1ad3      	subs	r3, r2, r3
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	da02      	bge.n	800ff9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	68ba      	ldr	r2, [r7, #8]
 800ff98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ff9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9c:	891b      	ldrh	r3, [r3, #8]
 800ff9e:	461c      	mov	r4, r3
 800ffa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	899b      	ldrh	r3, [r3, #12]
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7f9 fe13 	bl	8009bd4 <lwip_htons>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	b2db      	uxtb	r3, r3
 800ffb2:	f003 0303 	and.w	r3, r3, #3
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d001      	beq.n	800ffbe <tcp_output+0x2de>
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e000      	b.n	800ffc0 <tcp_output+0x2e0>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	4423      	add	r3, r4
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d049      	beq.n	801005a <tcp_output+0x37a>
      seg->next = NULL;
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	2200      	movs	r2, #0
 800ffca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d105      	bne.n	800ffe0 <tcp_output+0x300>
        pcb->unacked = seg;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffd8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ffda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffdc:	623b      	str	r3, [r7, #32]
 800ffde:	e03f      	b.n	8010060 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7f9 fe09 	bl	8009bfe <lwip_htonl>
 800ffec:	4604      	mov	r4, r0
 800ffee:	6a3b      	ldr	r3, [r7, #32]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7f9 fe02 	bl	8009bfe <lwip_htonl>
 800fffa:	4603      	mov	r3, r0
 800fffc:	1ae3      	subs	r3, r4, r3
 800fffe:	2b00      	cmp	r3, #0
 8010000:	da24      	bge.n	801004c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	3370      	adds	r3, #112	; 0x70
 8010006:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010008:	e002      	b.n	8010010 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801000a:	69fb      	ldr	r3, [r7, #28]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d011      	beq.n	801003c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	4618      	mov	r0, r3
 8010022:	f7f9 fdec 	bl	8009bfe <lwip_htonl>
 8010026:	4604      	mov	r4, r0
 8010028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	4618      	mov	r0, r3
 8010030:	f7f9 fde5 	bl	8009bfe <lwip_htonl>
 8010034:	4603      	mov	r3, r0
 8010036:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010038:	2b00      	cmp	r3, #0
 801003a:	dbe6      	blt.n	801000a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010048:	601a      	str	r2, [r3, #0]
 801004a:	e009      	b.n	8010060 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801004c:	6a3b      	ldr	r3, [r7, #32]
 801004e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010050:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010052:	6a3b      	ldr	r3, [r7, #32]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	623b      	str	r3, [r7, #32]
 8010058:	e002      	b.n	8010060 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801005a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801005c:	f7fc fc3f 	bl	800c8de <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010064:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010068:	2b00      	cmp	r3, #0
 801006a:	d012      	beq.n	8010092 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801006c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	4618      	mov	r0, r3
 8010074:	f7f9 fdc3 	bl	8009bfe <lwip_htonl>
 8010078:	4602      	mov	r2, r0
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010082:	8912      	ldrh	r2, [r2, #8]
 8010084:	4413      	add	r3, r2
  while (seg != NULL &&
 8010086:	69ba      	ldr	r2, [r7, #24]
 8010088:	429a      	cmp	r2, r3
 801008a:	f4bf aed9 	bcs.w	800fe40 <tcp_output+0x160>
 801008e:	e000      	b.n	8010092 <tcp_output+0x3b2>
      break;
 8010090:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010096:	2b00      	cmp	r3, #0
 8010098:	d108      	bne.n	80100ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80100a2:	e004      	b.n	80100ae <tcp_output+0x3ce>
    goto output_done;
 80100a4:	bf00      	nop
 80100a6:	e002      	b.n	80100ae <tcp_output+0x3ce>
    goto output_done;
 80100a8:	bf00      	nop
 80100aa:	e000      	b.n	80100ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80100ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	8b5b      	ldrh	r3, [r3, #26]
 80100b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3728      	adds	r7, #40	; 0x28
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bdb0      	pop	{r4, r5, r7, pc}
 80100c6:	bf00      	nop

080100c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d106      	bne.n	80100e4 <tcp_output_segment_busy+0x1c>
 80100d6:	4b09      	ldr	r3, [pc, #36]	; (80100fc <tcp_output_segment_busy+0x34>)
 80100d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80100dc:	4908      	ldr	r1, [pc, #32]	; (8010100 <tcp_output_segment_busy+0x38>)
 80100de:	4809      	ldr	r0, [pc, #36]	; (8010104 <tcp_output_segment_busy+0x3c>)
 80100e0:	f005 fd22 	bl	8015b28 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	7b9b      	ldrb	r3, [r3, #14]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d001      	beq.n	80100f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80100ee:	2301      	movs	r3, #1
 80100f0:	e000      	b.n	80100f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	0801829c 	.word	0x0801829c
 8010100:	08018838 	.word	0x08018838
 8010104:	080182f0 	.word	0x080182f0

08010108 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010108:	b5b0      	push	{r4, r5, r7, lr}
 801010a:	b08c      	sub	sp, #48	; 0x30
 801010c:	af04      	add	r7, sp, #16
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d106      	bne.n	8010128 <tcp_output_segment+0x20>
 801011a:	4b63      	ldr	r3, [pc, #396]	; (80102a8 <tcp_output_segment+0x1a0>)
 801011c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010120:	4962      	ldr	r1, [pc, #392]	; (80102ac <tcp_output_segment+0x1a4>)
 8010122:	4863      	ldr	r0, [pc, #396]	; (80102b0 <tcp_output_segment+0x1a8>)
 8010124:	f005 fd00 	bl	8015b28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d106      	bne.n	801013c <tcp_output_segment+0x34>
 801012e:	4b5e      	ldr	r3, [pc, #376]	; (80102a8 <tcp_output_segment+0x1a0>)
 8010130:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010134:	495f      	ldr	r1, [pc, #380]	; (80102b4 <tcp_output_segment+0x1ac>)
 8010136:	485e      	ldr	r0, [pc, #376]	; (80102b0 <tcp_output_segment+0x1a8>)
 8010138:	f005 fcf6 	bl	8015b28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d106      	bne.n	8010150 <tcp_output_segment+0x48>
 8010142:	4b59      	ldr	r3, [pc, #356]	; (80102a8 <tcp_output_segment+0x1a0>)
 8010144:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010148:	495b      	ldr	r1, [pc, #364]	; (80102b8 <tcp_output_segment+0x1b0>)
 801014a:	4859      	ldr	r0, [pc, #356]	; (80102b0 <tcp_output_segment+0x1a8>)
 801014c:	f005 fcec 	bl	8015b28 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7ff ffb9 	bl	80100c8 <tcp_output_segment_busy>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801015c:	2300      	movs	r3, #0
 801015e:	e09f      	b.n	80102a0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	68dc      	ldr	r4, [r3, #12]
 8010168:	4610      	mov	r0, r2
 801016a:	f7f9 fd48 	bl	8009bfe <lwip_htonl>
 801016e:	4603      	mov	r3, r0
 8010170:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	68dc      	ldr	r4, [r3, #12]
 801017a:	4610      	mov	r0, r2
 801017c:	f7f9 fd2a 	bl	8009bd4 <lwip_htons>
 8010180:	4603      	mov	r3, r0
 8010182:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801018c:	441a      	add	r2, r3
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	68db      	ldr	r3, [r3, #12]
 8010196:	3314      	adds	r3, #20
 8010198:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	7a9b      	ldrb	r3, [r3, #10]
 801019e:	f003 0301 	and.w	r3, r3, #1
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d015      	beq.n	80101d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	3304      	adds	r3, #4
 80101aa:	461a      	mov	r2, r3
 80101ac:	6879      	ldr	r1, [r7, #4]
 80101ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 80101b2:	f7fc fe8b 	bl	800cecc <tcp_eff_send_mss_netif>
 80101b6:	4603      	mov	r3, r0
 80101b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80101ba:	8b7b      	ldrh	r3, [r7, #26]
 80101bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7f9 fd1c 	bl	8009bfe <lwip_htonl>
 80101c6:	4602      	mov	r2, r0
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	3304      	adds	r3, #4
 80101d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80101d8:	2b00      	cmp	r3, #0
 80101da:	da02      	bge.n	80101e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	2200      	movs	r2, #0
 80101e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d10c      	bne.n	8010204 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80101ea:	4b34      	ldr	r3, [pc, #208]	; (80102bc <tcp_output_segment+0x1b4>)
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7f9 fd00 	bl	8009bfe <lwip_htonl>
 80101fe:	4602      	mov	r2, r0
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	68da      	ldr	r2, [r3, #12]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	8959      	ldrh	r1, [r3, #10]
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	8b3a      	ldrh	r2, [r7, #24]
 801021e:	1a8a      	subs	r2, r1, r2
 8010220:	b292      	uxth	r2, r2
 8010222:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	8919      	ldrh	r1, [r3, #8]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	8b3a      	ldrh	r2, [r7, #24]
 8010230:	1a8a      	subs	r2, r1, r2
 8010232:	b292      	uxth	r2, r2
 8010234:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	68d2      	ldr	r2, [r2, #12]
 801023e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	2200      	movs	r2, #0
 8010246:	741a      	strb	r2, [r3, #16]
 8010248:	2200      	movs	r2, #0
 801024a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	f103 0214 	add.w	r2, r3, #20
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	7a9b      	ldrb	r3, [r3, #10]
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	f003 0304 	and.w	r3, r3, #4
 801025e:	4413      	add	r3, r2
 8010260:	69fa      	ldr	r2, [r7, #28]
 8010262:	429a      	cmp	r2, r3
 8010264:	d006      	beq.n	8010274 <tcp_output_segment+0x16c>
 8010266:	4b10      	ldr	r3, [pc, #64]	; (80102a8 <tcp_output_segment+0x1a0>)
 8010268:	f240 621c 	movw	r2, #1564	; 0x61c
 801026c:	4914      	ldr	r1, [pc, #80]	; (80102c0 <tcp_output_segment+0x1b8>)
 801026e:	4810      	ldr	r0, [pc, #64]	; (80102b0 <tcp_output_segment+0x1a8>)
 8010270:	f005 fc5a 	bl	8015b28 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	6858      	ldr	r0, [r3, #4]
 8010278:	68b9      	ldr	r1, [r7, #8]
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	1d1c      	adds	r4, r3, #4
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	7add      	ldrb	r5, [r3, #11]
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	7a9b      	ldrb	r3, [r3, #10]
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	9202      	str	r2, [sp, #8]
 801028a:	2206      	movs	r2, #6
 801028c:	9201      	str	r2, [sp, #4]
 801028e:	9300      	str	r3, [sp, #0]
 8010290:	462b      	mov	r3, r5
 8010292:	4622      	mov	r2, r4
 8010294:	f004 fbd0 	bl	8014a38 <ip4_output_if>
 8010298:	4603      	mov	r3, r0
 801029a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801029c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3720      	adds	r7, #32
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bdb0      	pop	{r4, r5, r7, pc}
 80102a8:	0801829c 	.word	0x0801829c
 80102ac:	08018860 	.word	0x08018860
 80102b0:	080182f0 	.word	0x080182f0
 80102b4:	08018880 	.word	0x08018880
 80102b8:	080188a0 	.word	0x080188a0
 80102bc:	2000865c 	.word	0x2000865c
 80102c0:	080188c4 	.word	0x080188c4

080102c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80102c4:	b5b0      	push	{r4, r5, r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d106      	bne.n	80102e0 <tcp_rexmit_rto_prepare+0x1c>
 80102d2:	4b31      	ldr	r3, [pc, #196]	; (8010398 <tcp_rexmit_rto_prepare+0xd4>)
 80102d4:	f240 6263 	movw	r2, #1635	; 0x663
 80102d8:	4930      	ldr	r1, [pc, #192]	; (801039c <tcp_rexmit_rto_prepare+0xd8>)
 80102da:	4831      	ldr	r0, [pc, #196]	; (80103a0 <tcp_rexmit_rto_prepare+0xdc>)
 80102dc:	f005 fc24 	bl	8015b28 <iprintf>

  if (pcb->unacked == NULL) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d102      	bne.n	80102ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80102e8:	f06f 0305 	mvn.w	r3, #5
 80102ec:	e050      	b.n	8010390 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	e00b      	b.n	801030e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f7ff fee6 	bl	80100c8 <tcp_output_segment_busy>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d002      	beq.n	8010308 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010302:	f06f 0305 	mvn.w	r3, #5
 8010306:	e043      	b.n	8010390 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	60fb      	str	r3, [r7, #12]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1ef      	bne.n	80102f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f7ff fed6 	bl	80100c8 <tcp_output_segment_busy>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d002      	beq.n	8010328 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010322:	f06f 0305 	mvn.w	r3, #5
 8010326:	e033      	b.n	8010390 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	8b5b      	ldrh	r3, [r3, #26]
 8010342:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010346:	b29a      	uxth	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	4618      	mov	r0, r3
 8010354:	f7f9 fc53 	bl	8009bfe <lwip_htonl>
 8010358:	4604      	mov	r4, r0
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	891b      	ldrh	r3, [r3, #8]
 801035e:	461d      	mov	r5, r3
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	899b      	ldrh	r3, [r3, #12]
 8010366:	b29b      	uxth	r3, r3
 8010368:	4618      	mov	r0, r3
 801036a:	f7f9 fc33 	bl	8009bd4 <lwip_htons>
 801036e:	4603      	mov	r3, r0
 8010370:	b2db      	uxtb	r3, r3
 8010372:	f003 0303 	and.w	r3, r3, #3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d001      	beq.n	801037e <tcp_rexmit_rto_prepare+0xba>
 801037a:	2301      	movs	r3, #1
 801037c:	e000      	b.n	8010380 <tcp_rexmit_rto_prepare+0xbc>
 801037e:	2300      	movs	r3, #0
 8010380:	442b      	add	r3, r5
 8010382:	18e2      	adds	r2, r4, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	3710      	adds	r7, #16
 8010394:	46bd      	mov	sp, r7
 8010396:	bdb0      	pop	{r4, r5, r7, pc}
 8010398:	0801829c 	.word	0x0801829c
 801039c:	080188d8 	.word	0x080188d8
 80103a0:	080182f0 	.word	0x080182f0

080103a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d106      	bne.n	80103c0 <tcp_rexmit_rto_commit+0x1c>
 80103b2:	4b0d      	ldr	r3, [pc, #52]	; (80103e8 <tcp_rexmit_rto_commit+0x44>)
 80103b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80103b8:	490c      	ldr	r1, [pc, #48]	; (80103ec <tcp_rexmit_rto_commit+0x48>)
 80103ba:	480d      	ldr	r0, [pc, #52]	; (80103f0 <tcp_rexmit_rto_commit+0x4c>)
 80103bc:	f005 fbb4 	bl	8015b28 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103c6:	2bff      	cmp	r3, #255	; 0xff
 80103c8:	d007      	beq.n	80103da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103d0:	3301      	adds	r3, #1
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7ff fc80 	bl	800fce0 <tcp_output>
}
 80103e0:	bf00      	nop
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	0801829c 	.word	0x0801829c
 80103ec:	080188fc 	.word	0x080188fc
 80103f0:	080182f0 	.word	0x080182f0

080103f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d106      	bne.n	8010410 <tcp_rexmit_rto+0x1c>
 8010402:	4b0a      	ldr	r3, [pc, #40]	; (801042c <tcp_rexmit_rto+0x38>)
 8010404:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010408:	4909      	ldr	r1, [pc, #36]	; (8010430 <tcp_rexmit_rto+0x3c>)
 801040a:	480a      	ldr	r0, [pc, #40]	; (8010434 <tcp_rexmit_rto+0x40>)
 801040c:	f005 fb8c 	bl	8015b28 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7ff ff57 	bl	80102c4 <tcp_rexmit_rto_prepare>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d102      	bne.n	8010422 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7ff ffc1 	bl	80103a4 <tcp_rexmit_rto_commit>
  }
}
 8010422:	bf00      	nop
 8010424:	3708      	adds	r7, #8
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	0801829c 	.word	0x0801829c
 8010430:	08018920 	.word	0x08018920
 8010434:	080182f0 	.word	0x080182f0

08010438 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010438:	b590      	push	{r4, r7, lr}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d106      	bne.n	8010454 <tcp_rexmit+0x1c>
 8010446:	4b2f      	ldr	r3, [pc, #188]	; (8010504 <tcp_rexmit+0xcc>)
 8010448:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801044c:	492e      	ldr	r1, [pc, #184]	; (8010508 <tcp_rexmit+0xd0>)
 801044e:	482f      	ldr	r0, [pc, #188]	; (801050c <tcp_rexmit+0xd4>)
 8010450:	f005 fb6a 	bl	8015b28 <iprintf>

  if (pcb->unacked == NULL) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010458:	2b00      	cmp	r3, #0
 801045a:	d102      	bne.n	8010462 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801045c:	f06f 0305 	mvn.w	r3, #5
 8010460:	e04c      	b.n	80104fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010466:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010468:	68b8      	ldr	r0, [r7, #8]
 801046a:	f7ff fe2d 	bl	80100c8 <tcp_output_segment_busy>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d002      	beq.n	801047a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010474:	f06f 0305 	mvn.w	r3, #5
 8010478:	e040      	b.n	80104fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	336c      	adds	r3, #108	; 0x6c
 8010486:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010488:	e002      	b.n	8010490 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d011      	beq.n	80104bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7f9 fbac 	bl	8009bfe <lwip_htonl>
 80104a6:	4604      	mov	r4, r0
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7f9 fba5 	bl	8009bfe <lwip_htonl>
 80104b4:	4603      	mov	r3, r0
 80104b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	dbe6      	blt.n	801048a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	68ba      	ldr	r2, [r7, #8]
 80104c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d103      	bne.n	80104da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80104e0:	2bff      	cmp	r3, #255	; 0xff
 80104e2:	d007      	beq.n	80104f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80104ea:	3301      	adds	r3, #1
 80104ec:	b2da      	uxtb	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80104fa:	2300      	movs	r3, #0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3714      	adds	r7, #20
 8010500:	46bd      	mov	sp, r7
 8010502:	bd90      	pop	{r4, r7, pc}
 8010504:	0801829c 	.word	0x0801829c
 8010508:	0801893c 	.word	0x0801893c
 801050c:	080182f0 	.word	0x080182f0

08010510 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d106      	bne.n	801052c <tcp_rexmit_fast+0x1c>
 801051e:	4b2a      	ldr	r3, [pc, #168]	; (80105c8 <tcp_rexmit_fast+0xb8>)
 8010520:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010524:	4929      	ldr	r1, [pc, #164]	; (80105cc <tcp_rexmit_fast+0xbc>)
 8010526:	482a      	ldr	r0, [pc, #168]	; (80105d0 <tcp_rexmit_fast+0xc0>)
 8010528:	f005 fafe 	bl	8015b28 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010530:	2b00      	cmp	r3, #0
 8010532:	d044      	beq.n	80105be <tcp_rexmit_fast+0xae>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	8b5b      	ldrh	r3, [r3, #26]
 8010538:	f003 0304 	and.w	r3, r3, #4
 801053c:	2b00      	cmp	r3, #0
 801053e:	d13e      	bne.n	80105be <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7ff ff79 	bl	8010438 <tcp_rexmit>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d138      	bne.n	80105be <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010558:	4293      	cmp	r3, r2
 801055a:	bf28      	it	cs
 801055c:	4613      	movcs	r3, r2
 801055e:	b29b      	uxth	r3, r3
 8010560:	0fda      	lsrs	r2, r3, #31
 8010562:	4413      	add	r3, r2
 8010564:	105b      	asrs	r3, r3, #1
 8010566:	b29a      	uxth	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010574:	461a      	mov	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	429a      	cmp	r2, r3
 801057e:	d206      	bcs.n	801058e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010584:	005b      	lsls	r3, r3, #1
 8010586:	b29a      	uxth	r2, r3
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010598:	4619      	mov	r1, r3
 801059a:	0049      	lsls	r1, r1, #1
 801059c:	440b      	add	r3, r1
 801059e:	b29b      	uxth	r3, r3
 80105a0:	4413      	add	r3, r2
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	8b5b      	ldrh	r3, [r3, #26]
 80105ae:	f043 0304 	orr.w	r3, r3, #4
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80105be:	bf00      	nop
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	0801829c 	.word	0x0801829c
 80105cc:	08018954 	.word	0x08018954
 80105d0:	080182f0 	.word	0x080182f0

080105d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b086      	sub	sp, #24
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	607b      	str	r3, [r7, #4]
 80105de:	460b      	mov	r3, r1
 80105e0:	817b      	strh	r3, [r7, #10]
 80105e2:	4613      	mov	r3, r2
 80105e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80105e6:	897a      	ldrh	r2, [r7, #10]
 80105e8:	893b      	ldrh	r3, [r7, #8]
 80105ea:	4413      	add	r3, r2
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	3314      	adds	r3, #20
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105f6:	4619      	mov	r1, r3
 80105f8:	2022      	movs	r0, #34	; 0x22
 80105fa:	f7fa fc09 	bl	800ae10 <pbuf_alloc>
 80105fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d04d      	beq.n	80106a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010606:	897b      	ldrh	r3, [r7, #10]
 8010608:	3313      	adds	r3, #19
 801060a:	697a      	ldr	r2, [r7, #20]
 801060c:	8952      	ldrh	r2, [r2, #10]
 801060e:	4293      	cmp	r3, r2
 8010610:	db06      	blt.n	8010620 <tcp_output_alloc_header_common+0x4c>
 8010612:	4b26      	ldr	r3, [pc, #152]	; (80106ac <tcp_output_alloc_header_common+0xd8>)
 8010614:	f240 7223 	movw	r2, #1827	; 0x723
 8010618:	4925      	ldr	r1, [pc, #148]	; (80106b0 <tcp_output_alloc_header_common+0xdc>)
 801061a:	4826      	ldr	r0, [pc, #152]	; (80106b4 <tcp_output_alloc_header_common+0xe0>)
 801061c:	f005 fa84 	bl	8015b28 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010626:	8c3b      	ldrh	r3, [r7, #32]
 8010628:	4618      	mov	r0, r3
 801062a:	f7f9 fad3 	bl	8009bd4 <lwip_htons>
 801062e:	4603      	mov	r3, r0
 8010630:	461a      	mov	r2, r3
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010638:	4618      	mov	r0, r3
 801063a:	f7f9 facb 	bl	8009bd4 <lwip_htons>
 801063e:	4603      	mov	r3, r0
 8010640:	461a      	mov	r2, r3
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f7f9 fad6 	bl	8009bfe <lwip_htonl>
 8010652:	4602      	mov	r2, r0
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010658:	897b      	ldrh	r3, [r7, #10]
 801065a:	089b      	lsrs	r3, r3, #2
 801065c:	b29b      	uxth	r3, r3
 801065e:	3305      	adds	r3, #5
 8010660:	b29b      	uxth	r3, r3
 8010662:	031b      	lsls	r3, r3, #12
 8010664:	b29a      	uxth	r2, r3
 8010666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801066a:	b29b      	uxth	r3, r3
 801066c:	4313      	orrs	r3, r2
 801066e:	b29b      	uxth	r3, r3
 8010670:	4618      	mov	r0, r3
 8010672:	f7f9 faaf 	bl	8009bd4 <lwip_htons>
 8010676:	4603      	mov	r3, r0
 8010678:	461a      	mov	r2, r3
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801067e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010680:	4618      	mov	r0, r3
 8010682:	f7f9 faa7 	bl	8009bd4 <lwip_htons>
 8010686:	4603      	mov	r3, r0
 8010688:	461a      	mov	r2, r3
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	2200      	movs	r2, #0
 8010692:	741a      	strb	r2, [r3, #16]
 8010694:	2200      	movs	r2, #0
 8010696:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	2200      	movs	r2, #0
 801069c:	749a      	strb	r2, [r3, #18]
 801069e:	2200      	movs	r2, #0
 80106a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80106a2:	697b      	ldr	r3, [r7, #20]
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3718      	adds	r7, #24
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	0801829c 	.word	0x0801829c
 80106b0:	08018974 	.word	0x08018974
 80106b4:	080182f0 	.word	0x080182f0

080106b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80106b8:	b5b0      	push	{r4, r5, r7, lr}
 80106ba:	b08a      	sub	sp, #40	; 0x28
 80106bc:	af04      	add	r7, sp, #16
 80106be:	60f8      	str	r0, [r7, #12]
 80106c0:	607b      	str	r3, [r7, #4]
 80106c2:	460b      	mov	r3, r1
 80106c4:	817b      	strh	r3, [r7, #10]
 80106c6:	4613      	mov	r3, r2
 80106c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d106      	bne.n	80106de <tcp_output_alloc_header+0x26>
 80106d0:	4b15      	ldr	r3, [pc, #84]	; (8010728 <tcp_output_alloc_header+0x70>)
 80106d2:	f240 7242 	movw	r2, #1858	; 0x742
 80106d6:	4915      	ldr	r1, [pc, #84]	; (801072c <tcp_output_alloc_header+0x74>)
 80106d8:	4815      	ldr	r0, [pc, #84]	; (8010730 <tcp_output_alloc_header+0x78>)
 80106da:	f005 fa25 	bl	8015b28 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	8adb      	ldrh	r3, [r3, #22]
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	8b12      	ldrh	r2, [r2, #24]
 80106ea:	68f9      	ldr	r1, [r7, #12]
 80106ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80106ee:	893d      	ldrh	r5, [r7, #8]
 80106f0:	897c      	ldrh	r4, [r7, #10]
 80106f2:	9103      	str	r1, [sp, #12]
 80106f4:	2110      	movs	r1, #16
 80106f6:	9102      	str	r1, [sp, #8]
 80106f8:	9201      	str	r2, [sp, #4]
 80106fa:	9300      	str	r3, [sp, #0]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	462a      	mov	r2, r5
 8010700:	4621      	mov	r1, r4
 8010702:	f7ff ff67 	bl	80105d4 <tcp_output_alloc_header_common>
 8010706:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d006      	beq.n	801071c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010716:	441a      	add	r2, r3
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801071c:	697b      	ldr	r3, [r7, #20]
}
 801071e:	4618      	mov	r0, r3
 8010720:	3718      	adds	r7, #24
 8010722:	46bd      	mov	sp, r7
 8010724:	bdb0      	pop	{r4, r5, r7, pc}
 8010726:	bf00      	nop
 8010728:	0801829c 	.word	0x0801829c
 801072c:	080189a4 	.word	0x080189a4
 8010730:	080182f0 	.word	0x080182f0

08010734 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b088      	sub	sp, #32
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	4611      	mov	r1, r2
 8010740:	461a      	mov	r2, r3
 8010742:	460b      	mov	r3, r1
 8010744:	71fb      	strb	r3, [r7, #7]
 8010746:	4613      	mov	r3, r2
 8010748:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801074a:	2300      	movs	r3, #0
 801074c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d106      	bne.n	8010762 <tcp_output_fill_options+0x2e>
 8010754:	4b13      	ldr	r3, [pc, #76]	; (80107a4 <tcp_output_fill_options+0x70>)
 8010756:	f240 7256 	movw	r2, #1878	; 0x756
 801075a:	4913      	ldr	r1, [pc, #76]	; (80107a8 <tcp_output_fill_options+0x74>)
 801075c:	4813      	ldr	r0, [pc, #76]	; (80107ac <tcp_output_fill_options+0x78>)
 801075e:	f005 f9e3 	bl	8015b28 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	3314      	adds	r3, #20
 801076c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	f103 0214 	add.w	r2, r3, #20
 8010774:	8bfb      	ldrh	r3, [r7, #30]
 8010776:	009b      	lsls	r3, r3, #2
 8010778:	4619      	mov	r1, r3
 801077a:	79fb      	ldrb	r3, [r7, #7]
 801077c:	009b      	lsls	r3, r3, #2
 801077e:	f003 0304 	and.w	r3, r3, #4
 8010782:	440b      	add	r3, r1
 8010784:	4413      	add	r3, r2
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	429a      	cmp	r2, r3
 801078a:	d006      	beq.n	801079a <tcp_output_fill_options+0x66>
 801078c:	4b05      	ldr	r3, [pc, #20]	; (80107a4 <tcp_output_fill_options+0x70>)
 801078e:	f240 7275 	movw	r2, #1909	; 0x775
 8010792:	4907      	ldr	r1, [pc, #28]	; (80107b0 <tcp_output_fill_options+0x7c>)
 8010794:	4805      	ldr	r0, [pc, #20]	; (80107ac <tcp_output_fill_options+0x78>)
 8010796:	f005 f9c7 	bl	8015b28 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801079a:	bf00      	nop
 801079c:	3720      	adds	r7, #32
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	0801829c 	.word	0x0801829c
 80107a8:	080189cc 	.word	0x080189cc
 80107ac:	080182f0 	.word	0x080182f0
 80107b0:	080188c4 	.word	0x080188c4

080107b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b08a      	sub	sp, #40	; 0x28
 80107b8:	af04      	add	r7, sp, #16
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
 80107c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d106      	bne.n	80107d6 <tcp_output_control_segment+0x22>
 80107c8:	4b1c      	ldr	r3, [pc, #112]	; (801083c <tcp_output_control_segment+0x88>)
 80107ca:	f240 7287 	movw	r2, #1927	; 0x787
 80107ce:	491c      	ldr	r1, [pc, #112]	; (8010840 <tcp_output_control_segment+0x8c>)
 80107d0:	481c      	ldr	r0, [pc, #112]	; (8010844 <tcp_output_control_segment+0x90>)
 80107d2:	f005 f9a9 	bl	8015b28 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80107d6:	683a      	ldr	r2, [r7, #0]
 80107d8:	6879      	ldr	r1, [r7, #4]
 80107da:	68f8      	ldr	r0, [r7, #12]
 80107dc:	f7fe ff40 	bl	800f660 <tcp_route>
 80107e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d102      	bne.n	80107ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80107e8:	23fc      	movs	r3, #252	; 0xfc
 80107ea:	75fb      	strb	r3, [r7, #23]
 80107ec:	e01c      	b.n	8010828 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d006      	beq.n	8010802 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	7adb      	ldrb	r3, [r3, #11]
 80107f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	7a9b      	ldrb	r3, [r3, #10]
 80107fe:	757b      	strb	r3, [r7, #21]
 8010800:	e003      	b.n	801080a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010802:	23ff      	movs	r3, #255	; 0xff
 8010804:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010806:	2300      	movs	r3, #0
 8010808:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801080a:	7dba      	ldrb	r2, [r7, #22]
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	9302      	str	r3, [sp, #8]
 8010810:	2306      	movs	r3, #6
 8010812:	9301      	str	r3, [sp, #4]
 8010814:	7d7b      	ldrb	r3, [r7, #21]
 8010816:	9300      	str	r3, [sp, #0]
 8010818:	4613      	mov	r3, r2
 801081a:	683a      	ldr	r2, [r7, #0]
 801081c:	6879      	ldr	r1, [r7, #4]
 801081e:	68b8      	ldr	r0, [r7, #8]
 8010820:	f004 f90a 	bl	8014a38 <ip4_output_if>
 8010824:	4603      	mov	r3, r0
 8010826:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010828:	68b8      	ldr	r0, [r7, #8]
 801082a:	f7fa fdd5 	bl	800b3d8 <pbuf_free>
  return err;
 801082e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010832:	4618      	mov	r0, r3
 8010834:	3718      	adds	r7, #24
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	0801829c 	.word	0x0801829c
 8010840:	080189f4 	.word	0x080189f4
 8010844:	080182f0 	.word	0x080182f0

08010848 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010848:	b590      	push	{r4, r7, lr}
 801084a:	b08b      	sub	sp, #44	; 0x2c
 801084c:	af04      	add	r7, sp, #16
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d106      	bne.n	801086a <tcp_rst+0x22>
 801085c:	4b1f      	ldr	r3, [pc, #124]	; (80108dc <tcp_rst+0x94>)
 801085e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010862:	491f      	ldr	r1, [pc, #124]	; (80108e0 <tcp_rst+0x98>)
 8010864:	481f      	ldr	r0, [pc, #124]	; (80108e4 <tcp_rst+0x9c>)
 8010866:	f005 f95f 	bl	8015b28 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801086a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086c:	2b00      	cmp	r3, #0
 801086e:	d106      	bne.n	801087e <tcp_rst+0x36>
 8010870:	4b1a      	ldr	r3, [pc, #104]	; (80108dc <tcp_rst+0x94>)
 8010872:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010876:	491c      	ldr	r1, [pc, #112]	; (80108e8 <tcp_rst+0xa0>)
 8010878:	481a      	ldr	r0, [pc, #104]	; (80108e4 <tcp_rst+0x9c>)
 801087a:	f005 f955 	bl	8015b28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801087e:	2300      	movs	r3, #0
 8010880:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010882:	f246 0308 	movw	r3, #24584	; 0x6008
 8010886:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010888:	7dfb      	ldrb	r3, [r7, #23]
 801088a:	b29c      	uxth	r4, r3
 801088c:	68b8      	ldr	r0, [r7, #8]
 801088e:	f7f9 f9b6 	bl	8009bfe <lwip_htonl>
 8010892:	4602      	mov	r2, r0
 8010894:	8abb      	ldrh	r3, [r7, #20]
 8010896:	9303      	str	r3, [sp, #12]
 8010898:	2314      	movs	r3, #20
 801089a:	9302      	str	r3, [sp, #8]
 801089c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801089e:	9301      	str	r3, [sp, #4]
 80108a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108a2:	9300      	str	r3, [sp, #0]
 80108a4:	4613      	mov	r3, r2
 80108a6:	2200      	movs	r2, #0
 80108a8:	4621      	mov	r1, r4
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7ff fe92 	bl	80105d4 <tcp_output_alloc_header_common>
 80108b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00c      	beq.n	80108d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80108b8:	7dfb      	ldrb	r3, [r7, #23]
 80108ba:	2200      	movs	r2, #0
 80108bc:	6939      	ldr	r1, [r7, #16]
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f7ff ff38 	bl	8010734 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80108c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c6:	683a      	ldr	r2, [r7, #0]
 80108c8:	6939      	ldr	r1, [r7, #16]
 80108ca:	68f8      	ldr	r0, [r7, #12]
 80108cc:	f7ff ff72 	bl	80107b4 <tcp_output_control_segment>
 80108d0:	e000      	b.n	80108d4 <tcp_rst+0x8c>
    return;
 80108d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80108d4:	371c      	adds	r7, #28
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd90      	pop	{r4, r7, pc}
 80108da:	bf00      	nop
 80108dc:	0801829c 	.word	0x0801829c
 80108e0:	08018a20 	.word	0x08018a20
 80108e4:	080182f0 	.word	0x080182f0
 80108e8:	08018a3c 	.word	0x08018a3c

080108ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80108ec:	b590      	push	{r4, r7, lr}
 80108ee:	b087      	sub	sp, #28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80108f4:	2300      	movs	r3, #0
 80108f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80108f8:	2300      	movs	r3, #0
 80108fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d106      	bne.n	8010910 <tcp_send_empty_ack+0x24>
 8010902:	4b28      	ldr	r3, [pc, #160]	; (80109a4 <tcp_send_empty_ack+0xb8>)
 8010904:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010908:	4927      	ldr	r1, [pc, #156]	; (80109a8 <tcp_send_empty_ack+0xbc>)
 801090a:	4828      	ldr	r0, [pc, #160]	; (80109ac <tcp_send_empty_ack+0xc0>)
 801090c:	f005 f90c 	bl	8015b28 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010910:	7dfb      	ldrb	r3, [r7, #23]
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	b2db      	uxtb	r3, r3
 8010916:	f003 0304 	and.w	r3, r3, #4
 801091a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801091c:	7d7b      	ldrb	r3, [r7, #21]
 801091e:	b29c      	uxth	r4, r3
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010924:	4618      	mov	r0, r3
 8010926:	f7f9 f96a 	bl	8009bfe <lwip_htonl>
 801092a:	4603      	mov	r3, r0
 801092c:	2200      	movs	r2, #0
 801092e:	4621      	mov	r1, r4
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff fec1 	bl	80106b8 <tcp_output_alloc_header>
 8010936:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d109      	bne.n	8010952 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	8b5b      	ldrh	r3, [r3, #26]
 8010942:	f043 0303 	orr.w	r3, r3, #3
 8010946:	b29a      	uxth	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801094c:	f06f 0301 	mvn.w	r3, #1
 8010950:	e023      	b.n	801099a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010952:	7dbb      	ldrb	r3, [r7, #22]
 8010954:	7dfa      	ldrb	r2, [r7, #23]
 8010956:	6939      	ldr	r1, [r7, #16]
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7ff feeb 	bl	8010734 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	3304      	adds	r3, #4
 8010964:	6939      	ldr	r1, [r7, #16]
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7ff ff24 	bl	80107b4 <tcp_output_control_segment>
 801096c:	4603      	mov	r3, r0
 801096e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d007      	beq.n	8010988 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	8b5b      	ldrh	r3, [r3, #26]
 801097c:	f043 0303 	orr.w	r3, r3, #3
 8010980:	b29a      	uxth	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	835a      	strh	r2, [r3, #26]
 8010986:	e006      	b.n	8010996 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	8b5b      	ldrh	r3, [r3, #26]
 801098c:	f023 0303 	bic.w	r3, r3, #3
 8010990:	b29a      	uxth	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801099a:	4618      	mov	r0, r3
 801099c:	371c      	adds	r7, #28
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd90      	pop	{r4, r7, pc}
 80109a2:	bf00      	nop
 80109a4:	0801829c 	.word	0x0801829c
 80109a8:	08018a58 	.word	0x08018a58
 80109ac:	080182f0 	.word	0x080182f0

080109b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80109b0:	b590      	push	{r4, r7, lr}
 80109b2:	b087      	sub	sp, #28
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80109b8:	2300      	movs	r3, #0
 80109ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d106      	bne.n	80109d0 <tcp_keepalive+0x20>
 80109c2:	4b18      	ldr	r3, [pc, #96]	; (8010a24 <tcp_keepalive+0x74>)
 80109c4:	f640 0224 	movw	r2, #2084	; 0x824
 80109c8:	4917      	ldr	r1, [pc, #92]	; (8010a28 <tcp_keepalive+0x78>)
 80109ca:	4818      	ldr	r0, [pc, #96]	; (8010a2c <tcp_keepalive+0x7c>)
 80109cc:	f005 f8ac 	bl	8015b28 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80109d0:	7dfb      	ldrb	r3, [r7, #23]
 80109d2:	b29c      	uxth	r4, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109d8:	3b01      	subs	r3, #1
 80109da:	4618      	mov	r0, r3
 80109dc:	f7f9 f90f 	bl	8009bfe <lwip_htonl>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2200      	movs	r2, #0
 80109e4:	4621      	mov	r1, r4
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f7ff fe66 	bl	80106b8 <tcp_output_alloc_header>
 80109ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d102      	bne.n	80109fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80109f4:	f04f 33ff 	mov.w	r3, #4294967295
 80109f8:	e010      	b.n	8010a1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	2200      	movs	r2, #0
 80109fe:	6939      	ldr	r1, [r7, #16]
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7ff fe97 	bl	8010734 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	6939      	ldr	r1, [r7, #16]
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f7ff fed0 	bl	80107b4 <tcp_output_control_segment>
 8010a14:	4603      	mov	r3, r0
 8010a16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	371c      	adds	r7, #28
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd90      	pop	{r4, r7, pc}
 8010a24:	0801829c 	.word	0x0801829c
 8010a28:	08018a78 	.word	0x08018a78
 8010a2c:	080182f0 	.word	0x080182f0

08010a30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010a30:	b590      	push	{r4, r7, lr}
 8010a32:	b08b      	sub	sp, #44	; 0x2c
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d106      	bne.n	8010a52 <tcp_zero_window_probe+0x22>
 8010a44:	4b4c      	ldr	r3, [pc, #304]	; (8010b78 <tcp_zero_window_probe+0x148>)
 8010a46:	f640 024f 	movw	r2, #2127	; 0x84f
 8010a4a:	494c      	ldr	r1, [pc, #304]	; (8010b7c <tcp_zero_window_probe+0x14c>)
 8010a4c:	484c      	ldr	r0, [pc, #304]	; (8010b80 <tcp_zero_window_probe+0x150>)
 8010a4e:	f005 f86b 	bl	8015b28 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d101      	bne.n	8010a62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	e086      	b.n	8010b70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010a68:	2bff      	cmp	r3, #255	; 0xff
 8010a6a:	d007      	beq.n	8010a7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010a72:	3301      	adds	r3, #1
 8010a74:	b2da      	uxtb	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010a7c:	6a3b      	ldr	r3, [r7, #32]
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	899b      	ldrh	r3, [r3, #12]
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7f9 f8a5 	bl	8009bd4 <lwip_htons>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	f003 0301 	and.w	r3, r3, #1
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d005      	beq.n	8010aa2 <tcp_zero_window_probe+0x72>
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	891b      	ldrh	r3, [r3, #8]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d101      	bne.n	8010aa2 <tcp_zero_window_probe+0x72>
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e000      	b.n	8010aa4 <tcp_zero_window_probe+0x74>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010aa6:	7ffb      	ldrb	r3, [r7, #31]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	bf0c      	ite	eq
 8010aac:	2301      	moveq	r3, #1
 8010aae:	2300      	movne	r3, #0
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ab8:	b299      	uxth	r1, r3
 8010aba:	6a3b      	ldr	r3, [r7, #32]
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	8bba      	ldrh	r2, [r7, #28]
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7ff fdf8 	bl	80106b8 <tcp_output_alloc_header>
 8010ac8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010aca:	69bb      	ldr	r3, [r7, #24]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d102      	bne.n	8010ad6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ad4:	e04c      	b.n	8010b70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010adc:	7ffb      	ldrb	r3, [r7, #31]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d011      	beq.n	8010b06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	899b      	ldrh	r3, [r3, #12]
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	b21b      	sxth	r3, r3
 8010aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010aee:	b21c      	sxth	r4, r3
 8010af0:	2011      	movs	r0, #17
 8010af2:	f7f9 f86f 	bl	8009bd4 <lwip_htons>
 8010af6:	4603      	mov	r3, r0
 8010af8:	b21b      	sxth	r3, r3
 8010afa:	4323      	orrs	r3, r4
 8010afc:	b21b      	sxth	r3, r3
 8010afe:	b29a      	uxth	r2, r3
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	819a      	strh	r2, [r3, #12]
 8010b04:	e010      	b.n	8010b28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010b06:	69bb      	ldr	r3, [r7, #24]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	3314      	adds	r3, #20
 8010b0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010b0e:	6a3b      	ldr	r3, [r7, #32]
 8010b10:	6858      	ldr	r0, [r3, #4]
 8010b12:	6a3b      	ldr	r3, [r7, #32]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	891a      	ldrh	r2, [r3, #8]
 8010b18:	6a3b      	ldr	r3, [r7, #32]
 8010b1a:	891b      	ldrh	r3, [r3, #8]
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	2201      	movs	r2, #1
 8010b22:	6939      	ldr	r1, [r7, #16]
 8010b24:	f7fa fe52 	bl	800b7cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010b28:	6a3b      	ldr	r3, [r7, #32]
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7f9 f865 	bl	8009bfe <lwip_htonl>
 8010b34:	4603      	mov	r3, r0
 8010b36:	3301      	adds	r3, #1
 8010b38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	1ad3      	subs	r3, r2, r3
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	da02      	bge.n	8010b4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	68fa      	ldr	r2, [r7, #12]
 8010b4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b50:	2200      	movs	r2, #0
 8010b52:	69b9      	ldr	r1, [r7, #24]
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7ff fded 	bl	8010734 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	3304      	adds	r3, #4
 8010b60:	69b9      	ldr	r1, [r7, #24]
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f7ff fe26 	bl	80107b4 <tcp_output_control_segment>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010b6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	372c      	adds	r7, #44	; 0x2c
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd90      	pop	{r4, r7, pc}
 8010b78:	0801829c 	.word	0x0801829c
 8010b7c:	08018a94 	.word	0x08018a94
 8010b80:	080182f0 	.word	0x080182f0

08010b84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010b8c:	f7fa ff0c 	bl	800b9a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010b90:	4b0a      	ldr	r3, [pc, #40]	; (8010bbc <tcpip_tcp_timer+0x38>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d103      	bne.n	8010ba0 <tcpip_tcp_timer+0x1c>
 8010b98:	4b09      	ldr	r3, [pc, #36]	; (8010bc0 <tcpip_tcp_timer+0x3c>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d005      	beq.n	8010bac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	4908      	ldr	r1, [pc, #32]	; (8010bc4 <tcpip_tcp_timer+0x40>)
 8010ba4:	20fa      	movs	r0, #250	; 0xfa
 8010ba6:	f000 f8f3 	bl	8010d90 <sys_timeout>
 8010baa:	e003      	b.n	8010bb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010bac:	4b06      	ldr	r3, [pc, #24]	; (8010bc8 <tcpip_tcp_timer+0x44>)
 8010bae:	2200      	movs	r2, #0
 8010bb0:	601a      	str	r2, [r3, #0]
  }
}
 8010bb2:	bf00      	nop
 8010bb4:	bf00      	nop
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	20008668 	.word	0x20008668
 8010bc0:	2000866c 	.word	0x2000866c
 8010bc4:	08010b85 	.word	0x08010b85
 8010bc8:	200086b4 	.word	0x200086b4

08010bcc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010bd0:	4b0a      	ldr	r3, [pc, #40]	; (8010bfc <tcp_timer_needed+0x30>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d10f      	bne.n	8010bf8 <tcp_timer_needed+0x2c>
 8010bd8:	4b09      	ldr	r3, [pc, #36]	; (8010c00 <tcp_timer_needed+0x34>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d103      	bne.n	8010be8 <tcp_timer_needed+0x1c>
 8010be0:	4b08      	ldr	r3, [pc, #32]	; (8010c04 <tcp_timer_needed+0x38>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d007      	beq.n	8010bf8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010be8:	4b04      	ldr	r3, [pc, #16]	; (8010bfc <tcp_timer_needed+0x30>)
 8010bea:	2201      	movs	r2, #1
 8010bec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010bee:	2200      	movs	r2, #0
 8010bf0:	4905      	ldr	r1, [pc, #20]	; (8010c08 <tcp_timer_needed+0x3c>)
 8010bf2:	20fa      	movs	r0, #250	; 0xfa
 8010bf4:	f000 f8cc 	bl	8010d90 <sys_timeout>
  }
}
 8010bf8:	bf00      	nop
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	200086b4 	.word	0x200086b4
 8010c00:	20008668 	.word	0x20008668
 8010c04:	2000866c 	.word	0x2000866c
 8010c08:	08010b85 	.word	0x08010b85

08010c0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b086      	sub	sp, #24
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	60f8      	str	r0, [r7, #12]
 8010c14:	60b9      	str	r1, [r7, #8]
 8010c16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010c18:	2006      	movs	r0, #6
 8010c1a:	f7f9 fd0b 	bl	800a634 <memp_malloc>
 8010c1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d109      	bne.n	8010c3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d151      	bne.n	8010cd0 <sys_timeout_abs+0xc4>
 8010c2c:	4b2a      	ldr	r3, [pc, #168]	; (8010cd8 <sys_timeout_abs+0xcc>)
 8010c2e:	22be      	movs	r2, #190	; 0xbe
 8010c30:	492a      	ldr	r1, [pc, #168]	; (8010cdc <sys_timeout_abs+0xd0>)
 8010c32:	482b      	ldr	r0, [pc, #172]	; (8010ce0 <sys_timeout_abs+0xd4>)
 8010c34:	f004 ff78 	bl	8015b28 <iprintf>
    return;
 8010c38:	e04a      	b.n	8010cd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	68ba      	ldr	r2, [r7, #8]
 8010c44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	68fa      	ldr	r2, [r7, #12]
 8010c50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010c52:	4b24      	ldr	r3, [pc, #144]	; (8010ce4 <sys_timeout_abs+0xd8>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d103      	bne.n	8010c62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010c5a:	4a22      	ldr	r2, [pc, #136]	; (8010ce4 <sys_timeout_abs+0xd8>)
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	6013      	str	r3, [r2, #0]
    return;
 8010c60:	e037      	b.n	8010cd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	685a      	ldr	r2, [r3, #4]
 8010c66:	4b1f      	ldr	r3, [pc, #124]	; (8010ce4 <sys_timeout_abs+0xd8>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	0fdb      	lsrs	r3, r3, #31
 8010c70:	f003 0301 	and.w	r3, r3, #1
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d007      	beq.n	8010c8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010c7a:	4b1a      	ldr	r3, [pc, #104]	; (8010ce4 <sys_timeout_abs+0xd8>)
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010c82:	4a18      	ldr	r2, [pc, #96]	; (8010ce4 <sys_timeout_abs+0xd8>)
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	6013      	str	r3, [r2, #0]
 8010c88:	e023      	b.n	8010cd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010c8a:	4b16      	ldr	r3, [pc, #88]	; (8010ce4 <sys_timeout_abs+0xd8>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	617b      	str	r3, [r7, #20]
 8010c90:	e01a      	b.n	8010cc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00b      	beq.n	8010cb2 <sys_timeout_abs+0xa6>
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	0fdb      	lsrs	r3, r3, #31
 8010ca8:	f003 0301 	and.w	r3, r3, #1
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d007      	beq.n	8010cc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	693a      	ldr	r2, [r7, #16]
 8010cbe:	601a      	str	r2, [r3, #0]
        break;
 8010cc0:	e007      	b.n	8010cd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1e1      	bne.n	8010c92 <sys_timeout_abs+0x86>
 8010cce:	e000      	b.n	8010cd2 <sys_timeout_abs+0xc6>
    return;
 8010cd0:	bf00      	nop
      }
    }
  }
}
 8010cd2:	3718      	adds	r7, #24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	08018ab8 	.word	0x08018ab8
 8010cdc:	08018aec 	.word	0x08018aec
 8010ce0:	08018b2c 	.word	0x08018b2c
 8010ce4:	200086ac 	.word	0x200086ac

08010ce8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b086      	sub	sp, #24
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	4798      	blx	r3

  now = sys_now();
 8010cfa:	f7f8 fd8b 	bl	8009814 <sys_now>
 8010cfe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	4b0f      	ldr	r3, [pc, #60]	; (8010d44 <lwip_cyclic_timer+0x5c>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4413      	add	r3, r2
 8010d0a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010d0c:	68fa      	ldr	r2, [r7, #12]
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	1ad3      	subs	r3, r2, r3
 8010d12:	0fdb      	lsrs	r3, r3, #31
 8010d14:	f003 0301 	and.w	r3, r3, #1
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d009      	beq.n	8010d32 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	681a      	ldr	r2, [r3, #0]
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	4413      	add	r3, r2
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	4907      	ldr	r1, [pc, #28]	; (8010d48 <lwip_cyclic_timer+0x60>)
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7ff ff6e 	bl	8010c0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010d30:	e004      	b.n	8010d3c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010d32:	687a      	ldr	r2, [r7, #4]
 8010d34:	4904      	ldr	r1, [pc, #16]	; (8010d48 <lwip_cyclic_timer+0x60>)
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f7ff ff68 	bl	8010c0c <sys_timeout_abs>
}
 8010d3c:	bf00      	nop
 8010d3e:	3718      	adds	r7, #24
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	200086b0 	.word	0x200086b0
 8010d48:	08010ce9 	.word	0x08010ce9

08010d4c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010d52:	2301      	movs	r3, #1
 8010d54:	607b      	str	r3, [r7, #4]
 8010d56:	e00e      	b.n	8010d76 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010d58:	4a0b      	ldr	r2, [pc, #44]	; (8010d88 <sys_timeouts_init+0x3c>)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	00db      	lsls	r3, r3, #3
 8010d64:	4a08      	ldr	r2, [pc, #32]	; (8010d88 <sys_timeouts_init+0x3c>)
 8010d66:	4413      	add	r3, r2
 8010d68:	461a      	mov	r2, r3
 8010d6a:	4908      	ldr	r1, [pc, #32]	; (8010d8c <sys_timeouts_init+0x40>)
 8010d6c:	f000 f810 	bl	8010d90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	3301      	adds	r3, #1
 8010d74:	607b      	str	r3, [r7, #4]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2b04      	cmp	r3, #4
 8010d7a:	d9ed      	bls.n	8010d58 <sys_timeouts_init+0xc>
  }
}
 8010d7c:	bf00      	nop
 8010d7e:	bf00      	nop
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	08019a4c 	.word	0x08019a4c
 8010d8c:	08010ce9 	.word	0x08010ce9

08010d90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b086      	sub	sp, #24
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010da2:	d306      	bcc.n	8010db2 <sys_timeout+0x22>
 8010da4:	4b0a      	ldr	r3, [pc, #40]	; (8010dd0 <sys_timeout+0x40>)
 8010da6:	f240 1229 	movw	r2, #297	; 0x129
 8010daa:	490a      	ldr	r1, [pc, #40]	; (8010dd4 <sys_timeout+0x44>)
 8010dac:	480a      	ldr	r0, [pc, #40]	; (8010dd8 <sys_timeout+0x48>)
 8010dae:	f004 febb 	bl	8015b28 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010db2:	f7f8 fd2f 	bl	8009814 <sys_now>
 8010db6:	4602      	mov	r2, r0
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	4413      	add	r3, r2
 8010dbc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	68b9      	ldr	r1, [r7, #8]
 8010dc2:	6978      	ldr	r0, [r7, #20]
 8010dc4:	f7ff ff22 	bl	8010c0c <sys_timeout_abs>
#endif
}
 8010dc8:	bf00      	nop
 8010dca:	3718      	adds	r7, #24
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	08018ab8 	.word	0x08018ab8
 8010dd4:	08018b54 	.word	0x08018b54
 8010dd8:	08018b2c 	.word	0x08018b2c

08010ddc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010de0:	f004 feba 	bl	8015b58 <rand>
 8010de4:	4603      	mov	r3, r0
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010df2:	b29a      	uxth	r2, r3
 8010df4:	4b01      	ldr	r3, [pc, #4]	; (8010dfc <udp_init+0x20>)
 8010df6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010df8:	bf00      	nop
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	2000003c 	.word	0x2000003c

08010e00 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010e06:	2300      	movs	r3, #0
 8010e08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010e0a:	4b17      	ldr	r3, [pc, #92]	; (8010e68 <udp_new_port+0x68>)
 8010e0c:	881b      	ldrh	r3, [r3, #0]
 8010e0e:	1c5a      	adds	r2, r3, #1
 8010e10:	b291      	uxth	r1, r2
 8010e12:	4a15      	ldr	r2, [pc, #84]	; (8010e68 <udp_new_port+0x68>)
 8010e14:	8011      	strh	r1, [r2, #0]
 8010e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d103      	bne.n	8010e26 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010e1e:	4b12      	ldr	r3, [pc, #72]	; (8010e68 <udp_new_port+0x68>)
 8010e20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010e24:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e26:	4b11      	ldr	r3, [pc, #68]	; (8010e6c <udp_new_port+0x6c>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	603b      	str	r3, [r7, #0]
 8010e2c:	e011      	b.n	8010e52 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	8a5a      	ldrh	r2, [r3, #18]
 8010e32:	4b0d      	ldr	r3, [pc, #52]	; (8010e68 <udp_new_port+0x68>)
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d108      	bne.n	8010e4c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010e3a:	88fb      	ldrh	r3, [r7, #6]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	80fb      	strh	r3, [r7, #6]
 8010e40:	88fb      	ldrh	r3, [r7, #6]
 8010e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e46:	d3e0      	bcc.n	8010e0a <udp_new_port+0xa>
        return 0;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	e007      	b.n	8010e5c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	603b      	str	r3, [r7, #0]
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1ea      	bne.n	8010e2e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010e58:	4b03      	ldr	r3, [pc, #12]	; (8010e68 <udp_new_port+0x68>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr
 8010e68:	2000003c 	.word	0x2000003c
 8010e6c:	200086b8 	.word	0x200086b8

08010e70 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d105      	bne.n	8010e90 <udp_input_local_match+0x20>
 8010e84:	4b27      	ldr	r3, [pc, #156]	; (8010f24 <udp_input_local_match+0xb4>)
 8010e86:	2287      	movs	r2, #135	; 0x87
 8010e88:	4927      	ldr	r1, [pc, #156]	; (8010f28 <udp_input_local_match+0xb8>)
 8010e8a:	4828      	ldr	r0, [pc, #160]	; (8010f2c <udp_input_local_match+0xbc>)
 8010e8c:	f004 fe4c 	bl	8015b28 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d105      	bne.n	8010ea2 <udp_input_local_match+0x32>
 8010e96:	4b23      	ldr	r3, [pc, #140]	; (8010f24 <udp_input_local_match+0xb4>)
 8010e98:	2288      	movs	r2, #136	; 0x88
 8010e9a:	4925      	ldr	r1, [pc, #148]	; (8010f30 <udp_input_local_match+0xc0>)
 8010e9c:	4823      	ldr	r0, [pc, #140]	; (8010f2c <udp_input_local_match+0xbc>)
 8010e9e:	f004 fe43 	bl	8015b28 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	7a1b      	ldrb	r3, [r3, #8]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d00b      	beq.n	8010ec2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	7a1a      	ldrb	r2, [r3, #8]
 8010eae:	4b21      	ldr	r3, [pc, #132]	; (8010f34 <udp_input_local_match+0xc4>)
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d001      	beq.n	8010ec2 <udp_input_local_match+0x52>
    return 0;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	e02b      	b.n	8010f1a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d018      	beq.n	8010efa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d013      	beq.n	8010ef6 <udp_input_local_match+0x86>
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00f      	beq.n	8010ef6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ed6:	4b17      	ldr	r3, [pc, #92]	; (8010f34 <udp_input_local_match+0xc4>)
 8010ed8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ede:	d00a      	beq.n	8010ef6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	4b13      	ldr	r3, [pc, #76]	; (8010f34 <udp_input_local_match+0xc4>)
 8010ee6:	695b      	ldr	r3, [r3, #20]
 8010ee8:	405a      	eors	r2, r3
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	3308      	adds	r3, #8
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d110      	bne.n	8010f18 <udp_input_local_match+0xa8>
          return 1;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	e00f      	b.n	8010f1a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d009      	beq.n	8010f14 <udp_input_local_match+0xa4>
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d005      	beq.n	8010f14 <udp_input_local_match+0xa4>
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	4b09      	ldr	r3, [pc, #36]	; (8010f34 <udp_input_local_match+0xc4>)
 8010f0e:	695b      	ldr	r3, [r3, #20]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d101      	bne.n	8010f18 <udp_input_local_match+0xa8>
        return 1;
 8010f14:	2301      	movs	r3, #1
 8010f16:	e000      	b.n	8010f1a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010f18:	2300      	movs	r3, #0
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3710      	adds	r7, #16
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	08018ba0 	.word	0x08018ba0
 8010f28:	08018bd0 	.word	0x08018bd0
 8010f2c:	08018bf4 	.word	0x08018bf4
 8010f30:	08018c1c 	.word	0x08018c1c
 8010f34:	20005720 	.word	0x20005720

08010f38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010f38:	b590      	push	{r4, r7, lr}
 8010f3a:	b08d      	sub	sp, #52	; 0x34
 8010f3c:	af02      	add	r7, sp, #8
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010f42:	2300      	movs	r3, #0
 8010f44:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d105      	bne.n	8010f58 <udp_input+0x20>
 8010f4c:	4b7c      	ldr	r3, [pc, #496]	; (8011140 <udp_input+0x208>)
 8010f4e:	22cf      	movs	r2, #207	; 0xcf
 8010f50:	497c      	ldr	r1, [pc, #496]	; (8011144 <udp_input+0x20c>)
 8010f52:	487d      	ldr	r0, [pc, #500]	; (8011148 <udp_input+0x210>)
 8010f54:	f004 fde8 	bl	8015b28 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d105      	bne.n	8010f6a <udp_input+0x32>
 8010f5e:	4b78      	ldr	r3, [pc, #480]	; (8011140 <udp_input+0x208>)
 8010f60:	22d0      	movs	r2, #208	; 0xd0
 8010f62:	497a      	ldr	r1, [pc, #488]	; (801114c <udp_input+0x214>)
 8010f64:	4878      	ldr	r0, [pc, #480]	; (8011148 <udp_input+0x210>)
 8010f66:	f004 fddf 	bl	8015b28 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	895b      	ldrh	r3, [r3, #10]
 8010f6e:	2b07      	cmp	r3, #7
 8010f70:	d803      	bhi.n	8010f7a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7fa fa30 	bl	800b3d8 <pbuf_free>
    goto end;
 8010f78:	e0de      	b.n	8011138 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010f80:	4b73      	ldr	r3, [pc, #460]	; (8011150 <udp_input+0x218>)
 8010f82:	695b      	ldr	r3, [r3, #20]
 8010f84:	4a72      	ldr	r2, [pc, #456]	; (8011150 <udp_input+0x218>)
 8010f86:	6812      	ldr	r2, [r2, #0]
 8010f88:	4611      	mov	r1, r2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f003 fe2c 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 8010f90:	4603      	mov	r3, r0
 8010f92:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7f8 fe1a 	bl	8009bd4 <lwip_htons>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	885b      	ldrh	r3, [r3, #2]
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7f8 fe12 	bl	8009bd4 <lwip_htons>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fc0:	4b64      	ldr	r3, [pc, #400]	; (8011154 <udp_input+0x21c>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8010fc6:	e054      	b.n	8011072 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fca:	8a5b      	ldrh	r3, [r3, #18]
 8010fcc:	89fa      	ldrh	r2, [r7, #14]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d14a      	bne.n	8011068 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010fd2:	7cfb      	ldrb	r3, [r7, #19]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	6839      	ldr	r1, [r7, #0]
 8010fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fda:	f7ff ff49 	bl	8010e70 <udp_input_local_match>
 8010fde:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d041      	beq.n	8011068 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe6:	7c1b      	ldrb	r3, [r3, #16]
 8010fe8:	f003 0304 	and.w	r3, r3, #4
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d11d      	bne.n	801102c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d102      	bne.n	8010ffc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff8:	61fb      	str	r3, [r7, #28]
 8010ffa:	e017      	b.n	801102c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010ffc:	7cfb      	ldrb	r3, [r7, #19]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d014      	beq.n	801102c <udp_input+0xf4>
 8011002:	4b53      	ldr	r3, [pc, #332]	; (8011150 <udp_input+0x218>)
 8011004:	695b      	ldr	r3, [r3, #20]
 8011006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100a:	d10f      	bne.n	801102c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	3304      	adds	r3, #4
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	429a      	cmp	r2, r3
 8011018:	d008      	beq.n	801102c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101c:	681a      	ldr	r2, [r3, #0]
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	3304      	adds	r3, #4
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	429a      	cmp	r2, r3
 8011026:	d101      	bne.n	801102c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	8a9b      	ldrh	r3, [r3, #20]
 8011030:	8a3a      	ldrh	r2, [r7, #16]
 8011032:	429a      	cmp	r2, r3
 8011034:	d118      	bne.n	8011068 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801103a:	2b00      	cmp	r3, #0
 801103c:	d005      	beq.n	801104a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011040:	685a      	ldr	r2, [r3, #4]
 8011042:	4b43      	ldr	r3, [pc, #268]	; (8011150 <udp_input+0x218>)
 8011044:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011046:	429a      	cmp	r2, r3
 8011048:	d10e      	bne.n	8011068 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801104a:	6a3b      	ldr	r3, [r7, #32]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d014      	beq.n	801107a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011052:	68da      	ldr	r2, [r3, #12]
 8011054:	6a3b      	ldr	r3, [r7, #32]
 8011056:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011058:	4b3e      	ldr	r3, [pc, #248]	; (8011154 <udp_input+0x21c>)
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011060:	4a3c      	ldr	r2, [pc, #240]	; (8011154 <udp_input+0x21c>)
 8011062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011064:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011066:	e008      	b.n	801107a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	627b      	str	r3, [r7, #36]	; 0x24
 8011072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011074:	2b00      	cmp	r3, #0
 8011076:	d1a7      	bne.n	8010fc8 <udp_input+0x90>
 8011078:	e000      	b.n	801107c <udp_input+0x144>
        break;
 801107a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107e:	2b00      	cmp	r3, #0
 8011080:	d101      	bne.n	8011086 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	2b00      	cmp	r3, #0
 801108a:	d002      	beq.n	8011092 <udp_input+0x15a>
    for_us = 1;
 801108c:	2301      	movs	r3, #1
 801108e:	76fb      	strb	r3, [r7, #27]
 8011090:	e00a      	b.n	80110a8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	3304      	adds	r3, #4
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	4b2d      	ldr	r3, [pc, #180]	; (8011150 <udp_input+0x218>)
 801109a:	695b      	ldr	r3, [r3, #20]
 801109c:	429a      	cmp	r2, r3
 801109e:	bf0c      	ite	eq
 80110a0:	2301      	moveq	r3, #1
 80110a2:	2300      	movne	r3, #0
 80110a4:	b2db      	uxtb	r3, r3
 80110a6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80110a8:	7efb      	ldrb	r3, [r7, #27]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d041      	beq.n	8011132 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80110ae:	2108      	movs	r1, #8
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7fa f90b 	bl	800b2cc <pbuf_remove_header>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d00a      	beq.n	80110d2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80110bc:	4b20      	ldr	r3, [pc, #128]	; (8011140 <udp_input+0x208>)
 80110be:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80110c2:	4925      	ldr	r1, [pc, #148]	; (8011158 <udp_input+0x220>)
 80110c4:	4820      	ldr	r0, [pc, #128]	; (8011148 <udp_input+0x210>)
 80110c6:	f004 fd2f 	bl	8015b28 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7fa f984 	bl	800b3d8 <pbuf_free>
      goto end;
 80110d0:	e032      	b.n	8011138 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80110d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d012      	beq.n	80110fe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80110d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110da:	699b      	ldr	r3, [r3, #24]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d00a      	beq.n	80110f6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80110e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e2:	699c      	ldr	r4, [r3, #24]
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	69d8      	ldr	r0, [r3, #28]
 80110e8:	8a3b      	ldrh	r3, [r7, #16]
 80110ea:	9300      	str	r3, [sp, #0]
 80110ec:	4b1b      	ldr	r3, [pc, #108]	; (801115c <udp_input+0x224>)
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110f2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80110f4:	e021      	b.n	801113a <udp_input+0x202>
        pbuf_free(p);
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f7fa f96e 	bl	800b3d8 <pbuf_free>
        goto end;
 80110fc:	e01c      	b.n	8011138 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80110fe:	7cfb      	ldrb	r3, [r7, #19]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d112      	bne.n	801112a <udp_input+0x1f2>
 8011104:	4b12      	ldr	r3, [pc, #72]	; (8011150 <udp_input+0x218>)
 8011106:	695b      	ldr	r3, [r3, #20]
 8011108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801110c:	2be0      	cmp	r3, #224	; 0xe0
 801110e:	d00c      	beq.n	801112a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011110:	4b0f      	ldr	r3, [pc, #60]	; (8011150 <udp_input+0x218>)
 8011112:	899b      	ldrh	r3, [r3, #12]
 8011114:	3308      	adds	r3, #8
 8011116:	b29b      	uxth	r3, r3
 8011118:	b21b      	sxth	r3, r3
 801111a:	4619      	mov	r1, r3
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f7fa f948 	bl	800b3b2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011122:	2103      	movs	r1, #3
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f003 fa17 	bl	8014558 <icmp_dest_unreach>
      pbuf_free(p);
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f7fa f954 	bl	800b3d8 <pbuf_free>
  return;
 8011130:	e003      	b.n	801113a <udp_input+0x202>
    pbuf_free(p);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f7fa f950 	bl	800b3d8 <pbuf_free>
  return;
 8011138:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801113a:	372c      	adds	r7, #44	; 0x2c
 801113c:	46bd      	mov	sp, r7
 801113e:	bd90      	pop	{r4, r7, pc}
 8011140:	08018ba0 	.word	0x08018ba0
 8011144:	08018c44 	.word	0x08018c44
 8011148:	08018bf4 	.word	0x08018bf4
 801114c:	08018c5c 	.word	0x08018c5c
 8011150:	20005720 	.word	0x20005720
 8011154:	200086b8 	.word	0x200086b8
 8011158:	08018c78 	.word	0x08018c78
 801115c:	20005730 	.word	0x20005730

08011160 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b088      	sub	sp, #32
 8011164:	af02      	add	r7, sp, #8
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	607a      	str	r2, [r7, #4]
 801116c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d109      	bne.n	8011188 <udp_sendto_if+0x28>
 8011174:	4b2e      	ldr	r3, [pc, #184]	; (8011230 <udp_sendto_if+0xd0>)
 8011176:	f44f 7220 	mov.w	r2, #640	; 0x280
 801117a:	492e      	ldr	r1, [pc, #184]	; (8011234 <udp_sendto_if+0xd4>)
 801117c:	482e      	ldr	r0, [pc, #184]	; (8011238 <udp_sendto_if+0xd8>)
 801117e:	f004 fcd3 	bl	8015b28 <iprintf>
 8011182:	f06f 030f 	mvn.w	r3, #15
 8011186:	e04f      	b.n	8011228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d109      	bne.n	80111a2 <udp_sendto_if+0x42>
 801118e:	4b28      	ldr	r3, [pc, #160]	; (8011230 <udp_sendto_if+0xd0>)
 8011190:	f240 2281 	movw	r2, #641	; 0x281
 8011194:	4929      	ldr	r1, [pc, #164]	; (801123c <udp_sendto_if+0xdc>)
 8011196:	4828      	ldr	r0, [pc, #160]	; (8011238 <udp_sendto_if+0xd8>)
 8011198:	f004 fcc6 	bl	8015b28 <iprintf>
 801119c:	f06f 030f 	mvn.w	r3, #15
 80111a0:	e042      	b.n	8011228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d109      	bne.n	80111bc <udp_sendto_if+0x5c>
 80111a8:	4b21      	ldr	r3, [pc, #132]	; (8011230 <udp_sendto_if+0xd0>)
 80111aa:	f240 2282 	movw	r2, #642	; 0x282
 80111ae:	4924      	ldr	r1, [pc, #144]	; (8011240 <udp_sendto_if+0xe0>)
 80111b0:	4821      	ldr	r0, [pc, #132]	; (8011238 <udp_sendto_if+0xd8>)
 80111b2:	f004 fcb9 	bl	8015b28 <iprintf>
 80111b6:	f06f 030f 	mvn.w	r3, #15
 80111ba:	e035      	b.n	8011228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d109      	bne.n	80111d6 <udp_sendto_if+0x76>
 80111c2:	4b1b      	ldr	r3, [pc, #108]	; (8011230 <udp_sendto_if+0xd0>)
 80111c4:	f240 2283 	movw	r2, #643	; 0x283
 80111c8:	491e      	ldr	r1, [pc, #120]	; (8011244 <udp_sendto_if+0xe4>)
 80111ca:	481b      	ldr	r0, [pc, #108]	; (8011238 <udp_sendto_if+0xd8>)
 80111cc:	f004 fcac 	bl	8015b28 <iprintf>
 80111d0:	f06f 030f 	mvn.w	r3, #15
 80111d4:	e028      	b.n	8011228 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d009      	beq.n	80111f0 <udp_sendto_if+0x90>
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d005      	beq.n	80111f0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80111ec:	2be0      	cmp	r3, #224	; 0xe0
 80111ee:	d103      	bne.n	80111f8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80111f0:	6a3b      	ldr	r3, [r7, #32]
 80111f2:	3304      	adds	r3, #4
 80111f4:	617b      	str	r3, [r7, #20]
 80111f6:	e00b      	b.n	8011210 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	6a3b      	ldr	r3, [r7, #32]
 80111fe:	3304      	adds	r3, #4
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	429a      	cmp	r2, r3
 8011204:	d002      	beq.n	801120c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011206:	f06f 0303 	mvn.w	r3, #3
 801120a:	e00d      	b.n	8011228 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011210:	887a      	ldrh	r2, [r7, #2]
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	6a3b      	ldr	r3, [r7, #32]
 8011218:	9300      	str	r3, [sp, #0]
 801121a:	4613      	mov	r3, r2
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	68b9      	ldr	r1, [r7, #8]
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 f811 	bl	8011248 <udp_sendto_if_src>
 8011226:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011228:	4618      	mov	r0, r3
 801122a:	3718      	adds	r7, #24
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	08018ba0 	.word	0x08018ba0
 8011234:	08018d14 	.word	0x08018d14
 8011238:	08018bf4 	.word	0x08018bf4
 801123c:	08018d30 	.word	0x08018d30
 8011240:	08018d4c 	.word	0x08018d4c
 8011244:	08018d6c 	.word	0x08018d6c

08011248 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08c      	sub	sp, #48	; 0x30
 801124c:	af04      	add	r7, sp, #16
 801124e:	60f8      	str	r0, [r7, #12]
 8011250:	60b9      	str	r1, [r7, #8]
 8011252:	607a      	str	r2, [r7, #4]
 8011254:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d109      	bne.n	8011270 <udp_sendto_if_src+0x28>
 801125c:	4b65      	ldr	r3, [pc, #404]	; (80113f4 <udp_sendto_if_src+0x1ac>)
 801125e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011262:	4965      	ldr	r1, [pc, #404]	; (80113f8 <udp_sendto_if_src+0x1b0>)
 8011264:	4865      	ldr	r0, [pc, #404]	; (80113fc <udp_sendto_if_src+0x1b4>)
 8011266:	f004 fc5f 	bl	8015b28 <iprintf>
 801126a:	f06f 030f 	mvn.w	r3, #15
 801126e:	e0bc      	b.n	80113ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d109      	bne.n	801128a <udp_sendto_if_src+0x42>
 8011276:	4b5f      	ldr	r3, [pc, #380]	; (80113f4 <udp_sendto_if_src+0x1ac>)
 8011278:	f240 22d2 	movw	r2, #722	; 0x2d2
 801127c:	4960      	ldr	r1, [pc, #384]	; (8011400 <udp_sendto_if_src+0x1b8>)
 801127e:	485f      	ldr	r0, [pc, #380]	; (80113fc <udp_sendto_if_src+0x1b4>)
 8011280:	f004 fc52 	bl	8015b28 <iprintf>
 8011284:	f06f 030f 	mvn.w	r3, #15
 8011288:	e0af      	b.n	80113ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d109      	bne.n	80112a4 <udp_sendto_if_src+0x5c>
 8011290:	4b58      	ldr	r3, [pc, #352]	; (80113f4 <udp_sendto_if_src+0x1ac>)
 8011292:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011296:	495b      	ldr	r1, [pc, #364]	; (8011404 <udp_sendto_if_src+0x1bc>)
 8011298:	4858      	ldr	r0, [pc, #352]	; (80113fc <udp_sendto_if_src+0x1b4>)
 801129a:	f004 fc45 	bl	8015b28 <iprintf>
 801129e:	f06f 030f 	mvn.w	r3, #15
 80112a2:	e0a2      	b.n	80113ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d109      	bne.n	80112be <udp_sendto_if_src+0x76>
 80112aa:	4b52      	ldr	r3, [pc, #328]	; (80113f4 <udp_sendto_if_src+0x1ac>)
 80112ac:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80112b0:	4955      	ldr	r1, [pc, #340]	; (8011408 <udp_sendto_if_src+0x1c0>)
 80112b2:	4852      	ldr	r0, [pc, #328]	; (80113fc <udp_sendto_if_src+0x1b4>)
 80112b4:	f004 fc38 	bl	8015b28 <iprintf>
 80112b8:	f06f 030f 	mvn.w	r3, #15
 80112bc:	e095      	b.n	80113ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80112be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d109      	bne.n	80112d8 <udp_sendto_if_src+0x90>
 80112c4:	4b4b      	ldr	r3, [pc, #300]	; (80113f4 <udp_sendto_if_src+0x1ac>)
 80112c6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80112ca:	4950      	ldr	r1, [pc, #320]	; (801140c <udp_sendto_if_src+0x1c4>)
 80112cc:	484b      	ldr	r0, [pc, #300]	; (80113fc <udp_sendto_if_src+0x1b4>)
 80112ce:	f004 fc2b 	bl	8015b28 <iprintf>
 80112d2:	f06f 030f 	mvn.w	r3, #15
 80112d6:	e088      	b.n	80113ea <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	8a5b      	ldrh	r3, [r3, #18]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d10f      	bne.n	8011300 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80112e0:	68f9      	ldr	r1, [r7, #12]
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	8a5b      	ldrh	r3, [r3, #18]
 80112e6:	461a      	mov	r2, r3
 80112e8:	68f8      	ldr	r0, [r7, #12]
 80112ea:	f000 f893 	bl	8011414 <udp_bind>
 80112ee:	4603      	mov	r3, r0
 80112f0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80112f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d002      	beq.n	8011300 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80112fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80112fe:	e074      	b.n	80113ea <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	891b      	ldrh	r3, [r3, #8]
 8011304:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011308:	4293      	cmp	r3, r2
 801130a:	d902      	bls.n	8011312 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801130c:	f04f 33ff 	mov.w	r3, #4294967295
 8011310:	e06b      	b.n	80113ea <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011312:	2108      	movs	r1, #8
 8011314:	68b8      	ldr	r0, [r7, #8]
 8011316:	f7f9 ffc9 	bl	800b2ac <pbuf_add_header>
 801131a:	4603      	mov	r3, r0
 801131c:	2b00      	cmp	r3, #0
 801131e:	d015      	beq.n	801134c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011320:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011324:	2108      	movs	r1, #8
 8011326:	2022      	movs	r0, #34	; 0x22
 8011328:	f7f9 fd72 	bl	800ae10 <pbuf_alloc>
 801132c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d102      	bne.n	801133a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011334:	f04f 33ff 	mov.w	r3, #4294967295
 8011338:	e057      	b.n	80113ea <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	891b      	ldrh	r3, [r3, #8]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d006      	beq.n	8011350 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011342:	68b9      	ldr	r1, [r7, #8]
 8011344:	69f8      	ldr	r0, [r7, #28]
 8011346:	f7fa f95f 	bl	800b608 <pbuf_chain>
 801134a:	e001      	b.n	8011350 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	895b      	ldrh	r3, [r3, #10]
 8011354:	2b07      	cmp	r3, #7
 8011356:	d806      	bhi.n	8011366 <udp_sendto_if_src+0x11e>
 8011358:	4b26      	ldr	r3, [pc, #152]	; (80113f4 <udp_sendto_if_src+0x1ac>)
 801135a:	f240 320d 	movw	r2, #781	; 0x30d
 801135e:	492c      	ldr	r1, [pc, #176]	; (8011410 <udp_sendto_if_src+0x1c8>)
 8011360:	4826      	ldr	r0, [pc, #152]	; (80113fc <udp_sendto_if_src+0x1b4>)
 8011362:	f004 fbe1 	bl	8015b28 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	8a5b      	ldrh	r3, [r3, #18]
 8011370:	4618      	mov	r0, r3
 8011372:	f7f8 fc2f 	bl	8009bd4 <lwip_htons>
 8011376:	4603      	mov	r3, r0
 8011378:	461a      	mov	r2, r3
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801137e:	887b      	ldrh	r3, [r7, #2]
 8011380:	4618      	mov	r0, r3
 8011382:	f7f8 fc27 	bl	8009bd4 <lwip_htons>
 8011386:	4603      	mov	r3, r0
 8011388:	461a      	mov	r2, r3
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	2200      	movs	r2, #0
 8011392:	719a      	strb	r2, [r3, #6]
 8011394:	2200      	movs	r2, #0
 8011396:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	891b      	ldrh	r3, [r3, #8]
 801139c:	4618      	mov	r0, r3
 801139e:	f7f8 fc19 	bl	8009bd4 <lwip_htons>
 80113a2:	4603      	mov	r3, r0
 80113a4:	461a      	mov	r2, r3
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80113aa:	2311      	movs	r3, #17
 80113ac:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	7adb      	ldrb	r3, [r3, #11]
 80113b2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	7a9b      	ldrb	r3, [r3, #10]
 80113b8:	7cb9      	ldrb	r1, [r7, #18]
 80113ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113bc:	9202      	str	r2, [sp, #8]
 80113be:	7cfa      	ldrb	r2, [r7, #19]
 80113c0:	9201      	str	r2, [sp, #4]
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	460b      	mov	r3, r1
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113ca:	69f8      	ldr	r0, [r7, #28]
 80113cc:	f003 fb5e 	bl	8014a8c <ip4_output_if_src>
 80113d0:	4603      	mov	r3, r0
 80113d2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80113d4:	69fa      	ldr	r2, [r7, #28]
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d004      	beq.n	80113e6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80113dc:	69f8      	ldr	r0, [r7, #28]
 80113de:	f7f9 fffb 	bl	800b3d8 <pbuf_free>
    q = NULL;
 80113e2:	2300      	movs	r3, #0
 80113e4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80113e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3720      	adds	r7, #32
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	08018ba0 	.word	0x08018ba0
 80113f8:	08018d8c 	.word	0x08018d8c
 80113fc:	08018bf4 	.word	0x08018bf4
 8011400:	08018dac 	.word	0x08018dac
 8011404:	08018dcc 	.word	0x08018dcc
 8011408:	08018df0 	.word	0x08018df0
 801140c:	08018e14 	.word	0x08018e14
 8011410:	08018e38 	.word	0x08018e38

08011414 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b086      	sub	sp, #24
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	4613      	mov	r3, r2
 8011420:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d101      	bne.n	801142c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011428:	4b39      	ldr	r3, [pc, #228]	; (8011510 <udp_bind+0xfc>)
 801142a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d109      	bne.n	8011446 <udp_bind+0x32>
 8011432:	4b38      	ldr	r3, [pc, #224]	; (8011514 <udp_bind+0x100>)
 8011434:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011438:	4937      	ldr	r1, [pc, #220]	; (8011518 <udp_bind+0x104>)
 801143a:	4838      	ldr	r0, [pc, #224]	; (801151c <udp_bind+0x108>)
 801143c:	f004 fb74 	bl	8015b28 <iprintf>
 8011440:	f06f 030f 	mvn.w	r3, #15
 8011444:	e060      	b.n	8011508 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801144a:	4b35      	ldr	r3, [pc, #212]	; (8011520 <udp_bind+0x10c>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	617b      	str	r3, [r7, #20]
 8011450:	e009      	b.n	8011466 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	429a      	cmp	r2, r3
 8011458:	d102      	bne.n	8011460 <udp_bind+0x4c>
      rebind = 1;
 801145a:	2301      	movs	r3, #1
 801145c:	74fb      	strb	r3, [r7, #19]
      break;
 801145e:	e005      	b.n	801146c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	617b      	str	r3, [r7, #20]
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d1f2      	bne.n	8011452 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801146c:	88fb      	ldrh	r3, [r7, #6]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d109      	bne.n	8011486 <udp_bind+0x72>
    port = udp_new_port();
 8011472:	f7ff fcc5 	bl	8010e00 <udp_new_port>
 8011476:	4603      	mov	r3, r0
 8011478:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801147a:	88fb      	ldrh	r3, [r7, #6]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d12c      	bne.n	80114da <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011480:	f06f 0307 	mvn.w	r3, #7
 8011484:	e040      	b.n	8011508 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011486:	4b26      	ldr	r3, [pc, #152]	; (8011520 <udp_bind+0x10c>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	617b      	str	r3, [r7, #20]
 801148c:	e022      	b.n	80114d4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801148e:	68fa      	ldr	r2, [r7, #12]
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	429a      	cmp	r2, r3
 8011494:	d01b      	beq.n	80114ce <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	8a5b      	ldrh	r3, [r3, #18]
 801149a:	88fa      	ldrh	r2, [r7, #6]
 801149c:	429a      	cmp	r2, r3
 801149e:	d116      	bne.n	80114ce <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d00d      	beq.n	80114c8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d00a      	beq.n	80114c8 <udp_bind+0xb4>
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d006      	beq.n	80114c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80114ba:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d003      	beq.n	80114c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d102      	bne.n	80114ce <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80114c8:	f06f 0307 	mvn.w	r3, #7
 80114cc:	e01c      	b.n	8011508 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	617b      	str	r3, [r7, #20]
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1d9      	bne.n	801148e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d002      	beq.n	80114e6 <udp_bind+0xd2>
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	e000      	b.n	80114e8 <udp_bind+0xd4>
 80114e6:	2300      	movs	r3, #0
 80114e8:	68fa      	ldr	r2, [r7, #12]
 80114ea:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	88fa      	ldrh	r2, [r7, #6]
 80114f0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80114f2:	7cfb      	ldrb	r3, [r7, #19]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d106      	bne.n	8011506 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80114f8:	4b09      	ldr	r3, [pc, #36]	; (8011520 <udp_bind+0x10c>)
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011500:	4a07      	ldr	r2, [pc, #28]	; (8011520 <udp_bind+0x10c>)
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3718      	adds	r7, #24
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	08019a74 	.word	0x08019a74
 8011514:	08018ba0 	.word	0x08018ba0
 8011518:	08018e68 	.word	0x08018e68
 801151c:	08018bf4 	.word	0x08018bf4
 8011520:	200086b8 	.word	0x200086b8

08011524 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b086      	sub	sp, #24
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	4613      	mov	r3, r2
 8011530:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d109      	bne.n	801154c <udp_connect+0x28>
 8011538:	4b2c      	ldr	r3, [pc, #176]	; (80115ec <udp_connect+0xc8>)
 801153a:	f240 4235 	movw	r2, #1077	; 0x435
 801153e:	492c      	ldr	r1, [pc, #176]	; (80115f0 <udp_connect+0xcc>)
 8011540:	482c      	ldr	r0, [pc, #176]	; (80115f4 <udp_connect+0xd0>)
 8011542:	f004 faf1 	bl	8015b28 <iprintf>
 8011546:	f06f 030f 	mvn.w	r3, #15
 801154a:	e04b      	b.n	80115e4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d109      	bne.n	8011566 <udp_connect+0x42>
 8011552:	4b26      	ldr	r3, [pc, #152]	; (80115ec <udp_connect+0xc8>)
 8011554:	f240 4236 	movw	r2, #1078	; 0x436
 8011558:	4927      	ldr	r1, [pc, #156]	; (80115f8 <udp_connect+0xd4>)
 801155a:	4826      	ldr	r0, [pc, #152]	; (80115f4 <udp_connect+0xd0>)
 801155c:	f004 fae4 	bl	8015b28 <iprintf>
 8011560:	f06f 030f 	mvn.w	r3, #15
 8011564:	e03e      	b.n	80115e4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	8a5b      	ldrh	r3, [r3, #18]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d10f      	bne.n	801158e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801156e:	68f9      	ldr	r1, [r7, #12]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	8a5b      	ldrh	r3, [r3, #18]
 8011574:	461a      	mov	r2, r3
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	f7ff ff4c 	bl	8011414 <udp_bind>
 801157c:	4603      	mov	r3, r0
 801157e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011580:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d002      	beq.n	801158e <udp_connect+0x6a>
      return err;
 8011588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801158c:	e02a      	b.n	80115e4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <udp_connect+0x76>
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	e000      	b.n	801159c <udp_connect+0x78>
 801159a:	2300      	movs	r3, #0
 801159c:	68fa      	ldr	r2, [r7, #12]
 801159e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	88fa      	ldrh	r2, [r7, #6]
 80115a4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	7c1b      	ldrb	r3, [r3, #16]
 80115aa:	f043 0304 	orr.w	r3, r3, #4
 80115ae:	b2da      	uxtb	r2, r3
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80115b4:	4b11      	ldr	r3, [pc, #68]	; (80115fc <udp_connect+0xd8>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	617b      	str	r3, [r7, #20]
 80115ba:	e008      	b.n	80115ce <udp_connect+0xaa>
    if (pcb == ipcb) {
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d101      	bne.n	80115c8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80115c4:	2300      	movs	r3, #0
 80115c6:	e00d      	b.n	80115e4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	617b      	str	r3, [r7, #20]
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d1f3      	bne.n	80115bc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80115d4:	4b09      	ldr	r3, [pc, #36]	; (80115fc <udp_connect+0xd8>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80115dc:	4a07      	ldr	r2, [pc, #28]	; (80115fc <udp_connect+0xd8>)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3718      	adds	r7, #24
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	08018ba0 	.word	0x08018ba0
 80115f0:	08018e80 	.word	0x08018e80
 80115f4:	08018bf4 	.word	0x08018bf4
 80115f8:	08018e9c 	.word	0x08018e9c
 80115fc:	200086b8 	.word	0x200086b8

08011600 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d107      	bne.n	8011622 <udp_recv+0x22>
 8011612:	4b08      	ldr	r3, [pc, #32]	; (8011634 <udp_recv+0x34>)
 8011614:	f240 428a 	movw	r2, #1162	; 0x48a
 8011618:	4907      	ldr	r1, [pc, #28]	; (8011638 <udp_recv+0x38>)
 801161a:	4808      	ldr	r0, [pc, #32]	; (801163c <udp_recv+0x3c>)
 801161c:	f004 fa84 	bl	8015b28 <iprintf>
 8011620:	e005      	b.n	801162e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	68ba      	ldr	r2, [r7, #8]
 8011626:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	61da      	str	r2, [r3, #28]
}
 801162e:	3710      	adds	r7, #16
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	08018ba0 	.word	0x08018ba0
 8011638:	08018ed4 	.word	0x08018ed4
 801163c:	08018bf4 	.word	0x08018bf4

08011640 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b084      	sub	sp, #16
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d107      	bne.n	801165e <udp_remove+0x1e>
 801164e:	4b19      	ldr	r3, [pc, #100]	; (80116b4 <udp_remove+0x74>)
 8011650:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011654:	4918      	ldr	r1, [pc, #96]	; (80116b8 <udp_remove+0x78>)
 8011656:	4819      	ldr	r0, [pc, #100]	; (80116bc <udp_remove+0x7c>)
 8011658:	f004 fa66 	bl	8015b28 <iprintf>
 801165c:	e026      	b.n	80116ac <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801165e:	4b18      	ldr	r3, [pc, #96]	; (80116c0 <udp_remove+0x80>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	429a      	cmp	r2, r3
 8011666:	d105      	bne.n	8011674 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011668:	4b15      	ldr	r3, [pc, #84]	; (80116c0 <udp_remove+0x80>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	4a14      	ldr	r2, [pc, #80]	; (80116c0 <udp_remove+0x80>)
 8011670:	6013      	str	r3, [r2, #0]
 8011672:	e017      	b.n	80116a4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011674:	4b12      	ldr	r3, [pc, #72]	; (80116c0 <udp_remove+0x80>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	60fb      	str	r3, [r7, #12]
 801167a:	e010      	b.n	801169e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d009      	beq.n	8011698 <udp_remove+0x58>
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	429a      	cmp	r2, r3
 801168c:	d104      	bne.n	8011698 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	68da      	ldr	r2, [r3, #12]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	60da      	str	r2, [r3, #12]
        break;
 8011696:	e005      	b.n	80116a4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	60fb      	str	r3, [r7, #12]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d1eb      	bne.n	801167c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80116a4:	6879      	ldr	r1, [r7, #4]
 80116a6:	2000      	movs	r0, #0
 80116a8:	f7f9 f834 	bl	800a714 <memp_free>
}
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	08018ba0 	.word	0x08018ba0
 80116b8:	08018eec 	.word	0x08018eec
 80116bc:	08018bf4 	.word	0x08018bf4
 80116c0:	200086b8 	.word	0x200086b8

080116c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80116ca:	2000      	movs	r0, #0
 80116cc:	f7f8 ffb2 	bl	800a634 <memp_malloc>
 80116d0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d007      	beq.n	80116e8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80116d8:	2220      	movs	r2, #32
 80116da:	2100      	movs	r1, #0
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f004 fa1b 	bl	8015b18 <memset>
    pcb->ttl = UDP_TTL;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	22ff      	movs	r2, #255	; 0xff
 80116e6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80116e8:	687b      	ldr	r3, [r7, #4]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3708      	adds	r7, #8
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
	...

080116f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b085      	sub	sp, #20
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d01e      	beq.n	8011742 <udp_netif_ip_addr_changed+0x4e>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d01a      	beq.n	8011742 <udp_netif_ip_addr_changed+0x4e>
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d017      	beq.n	8011742 <udp_netif_ip_addr_changed+0x4e>
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d013      	beq.n	8011742 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801171a:	4b0d      	ldr	r3, [pc, #52]	; (8011750 <udp_netif_ip_addr_changed+0x5c>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	60fb      	str	r3, [r7, #12]
 8011720:	e00c      	b.n	801173c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	429a      	cmp	r2, r3
 801172c:	d103      	bne.n	8011736 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	60fb      	str	r3, [r7, #12]
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1ef      	bne.n	8011722 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011742:	bf00      	nop
 8011744:	3714      	adds	r7, #20
 8011746:	46bd      	mov	sp, r7
 8011748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop
 8011750:	200086b8 	.word	0x200086b8

08011754 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011758:	4b20      	ldr	r3, [pc, #128]	; (80117dc <dhcp_inc_pcb_refcount+0x88>)
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d133      	bne.n	80117c8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011760:	4b1f      	ldr	r3, [pc, #124]	; (80117e0 <dhcp_inc_pcb_refcount+0x8c>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d005      	beq.n	8011774 <dhcp_inc_pcb_refcount+0x20>
 8011768:	4b1e      	ldr	r3, [pc, #120]	; (80117e4 <dhcp_inc_pcb_refcount+0x90>)
 801176a:	22e5      	movs	r2, #229	; 0xe5
 801176c:	491e      	ldr	r1, [pc, #120]	; (80117e8 <dhcp_inc_pcb_refcount+0x94>)
 801176e:	481f      	ldr	r0, [pc, #124]	; (80117ec <dhcp_inc_pcb_refcount+0x98>)
 8011770:	f004 f9da 	bl	8015b28 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011774:	f7ff ffa6 	bl	80116c4 <udp_new>
 8011778:	4603      	mov	r3, r0
 801177a:	4a19      	ldr	r2, [pc, #100]	; (80117e0 <dhcp_inc_pcb_refcount+0x8c>)
 801177c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801177e:	4b18      	ldr	r3, [pc, #96]	; (80117e0 <dhcp_inc_pcb_refcount+0x8c>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d102      	bne.n	801178c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011786:	f04f 33ff 	mov.w	r3, #4294967295
 801178a:	e024      	b.n	80117d6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801178c:	4b14      	ldr	r3, [pc, #80]	; (80117e0 <dhcp_inc_pcb_refcount+0x8c>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	7a5a      	ldrb	r2, [r3, #9]
 8011792:	4b13      	ldr	r3, [pc, #76]	; (80117e0 <dhcp_inc_pcb_refcount+0x8c>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	f042 0220 	orr.w	r2, r2, #32
 801179a:	b2d2      	uxtb	r2, r2
 801179c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801179e:	4b10      	ldr	r3, [pc, #64]	; (80117e0 <dhcp_inc_pcb_refcount+0x8c>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2244      	movs	r2, #68	; 0x44
 80117a4:	4912      	ldr	r1, [pc, #72]	; (80117f0 <dhcp_inc_pcb_refcount+0x9c>)
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff fe34 	bl	8011414 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80117ac:	4b0c      	ldr	r3, [pc, #48]	; (80117e0 <dhcp_inc_pcb_refcount+0x8c>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2243      	movs	r2, #67	; 0x43
 80117b2:	490f      	ldr	r1, [pc, #60]	; (80117f0 <dhcp_inc_pcb_refcount+0x9c>)
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7ff feb5 	bl	8011524 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80117ba:	4b09      	ldr	r3, [pc, #36]	; (80117e0 <dhcp_inc_pcb_refcount+0x8c>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2200      	movs	r2, #0
 80117c0:	490c      	ldr	r1, [pc, #48]	; (80117f4 <dhcp_inc_pcb_refcount+0xa0>)
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7ff ff1c 	bl	8011600 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80117c8:	4b04      	ldr	r3, [pc, #16]	; (80117dc <dhcp_inc_pcb_refcount+0x88>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	3301      	adds	r3, #1
 80117ce:	b2da      	uxtb	r2, r3
 80117d0:	4b02      	ldr	r3, [pc, #8]	; (80117dc <dhcp_inc_pcb_refcount+0x88>)
 80117d2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80117d4:	2300      	movs	r3, #0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	200086e8 	.word	0x200086e8
 80117e0:	200086e4 	.word	0x200086e4
 80117e4:	08018f04 	.word	0x08018f04
 80117e8:	08018f3c 	.word	0x08018f3c
 80117ec:	08018f64 	.word	0x08018f64
 80117f0:	08019a74 	.word	0x08019a74
 80117f4:	08013089 	.word	0x08013089

080117f8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80117fc:	4b0e      	ldr	r3, [pc, #56]	; (8011838 <dhcp_dec_pcb_refcount+0x40>)
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d105      	bne.n	8011810 <dhcp_dec_pcb_refcount+0x18>
 8011804:	4b0d      	ldr	r3, [pc, #52]	; (801183c <dhcp_dec_pcb_refcount+0x44>)
 8011806:	22ff      	movs	r2, #255	; 0xff
 8011808:	490d      	ldr	r1, [pc, #52]	; (8011840 <dhcp_dec_pcb_refcount+0x48>)
 801180a:	480e      	ldr	r0, [pc, #56]	; (8011844 <dhcp_dec_pcb_refcount+0x4c>)
 801180c:	f004 f98c 	bl	8015b28 <iprintf>
  dhcp_pcb_refcount--;
 8011810:	4b09      	ldr	r3, [pc, #36]	; (8011838 <dhcp_dec_pcb_refcount+0x40>)
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	3b01      	subs	r3, #1
 8011816:	b2da      	uxtb	r2, r3
 8011818:	4b07      	ldr	r3, [pc, #28]	; (8011838 <dhcp_dec_pcb_refcount+0x40>)
 801181a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801181c:	4b06      	ldr	r3, [pc, #24]	; (8011838 <dhcp_dec_pcb_refcount+0x40>)
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d107      	bne.n	8011834 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011824:	4b08      	ldr	r3, [pc, #32]	; (8011848 <dhcp_dec_pcb_refcount+0x50>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4618      	mov	r0, r3
 801182a:	f7ff ff09 	bl	8011640 <udp_remove>
    dhcp_pcb = NULL;
 801182e:	4b06      	ldr	r3, [pc, #24]	; (8011848 <dhcp_dec_pcb_refcount+0x50>)
 8011830:	2200      	movs	r2, #0
 8011832:	601a      	str	r2, [r3, #0]
  }
}
 8011834:	bf00      	nop
 8011836:	bd80      	pop	{r7, pc}
 8011838:	200086e8 	.word	0x200086e8
 801183c:	08018f04 	.word	0x08018f04
 8011840:	08018f8c 	.word	0x08018f8c
 8011844:	08018f64 	.word	0x08018f64
 8011848:	200086e4 	.word	0x200086e4

0801184c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011858:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801185a:	210c      	movs	r1, #12
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f001 f855 	bl	801290c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011862:	4b06      	ldr	r3, [pc, #24]	; (801187c <dhcp_handle_nak+0x30>)
 8011864:	4a05      	ldr	r2, [pc, #20]	; (801187c <dhcp_handle_nak+0x30>)
 8011866:	4905      	ldr	r1, [pc, #20]	; (801187c <dhcp_handle_nak+0x30>)
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7f9 f8f5 	bl	800aa58 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 fc48 	bl	8012104 <dhcp_discover>
}
 8011874:	bf00      	nop
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	08019a74 	.word	0x08019a74

08011880 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801188c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801188e:	2108      	movs	r1, #8
 8011890:	68f8      	ldr	r0, [r7, #12]
 8011892:	f001 f83b 	bl	801290c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	331c      	adds	r3, #28
 801189a:	2200      	movs	r2, #0
 801189c:	4619      	mov	r1, r3
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f002 fb3c 	bl	8013f1c <etharp_query>
 80118a4:	4603      	mov	r3, r0
 80118a6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	799b      	ldrb	r3, [r3, #6]
 80118ac:	2bff      	cmp	r3, #255	; 0xff
 80118ae:	d005      	beq.n	80118bc <dhcp_check+0x3c>
    dhcp->tries++;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	799b      	ldrb	r3, [r3, #6]
 80118b4:	3301      	adds	r3, #1
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80118bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80118c0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80118c2:	893b      	ldrh	r3, [r7, #8]
 80118c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80118c8:	4a06      	ldr	r2, [pc, #24]	; (80118e4 <dhcp_check+0x64>)
 80118ca:	fb82 1203 	smull	r1, r2, r2, r3
 80118ce:	1152      	asrs	r2, r2, #5
 80118d0:	17db      	asrs	r3, r3, #31
 80118d2:	1ad3      	subs	r3, r2, r3
 80118d4:	b29a      	uxth	r2, r3
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80118da:	bf00      	nop
 80118dc:	3710      	adds	r7, #16
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	10624dd3 	.word	0x10624dd3

080118e8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80118f8:	4b0c      	ldr	r3, [pc, #48]	; (801192c <dhcp_handle_offer+0x44>)
 80118fa:	789b      	ldrb	r3, [r3, #2]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d011      	beq.n	8011924 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2200      	movs	r2, #0
 8011904:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8011906:	4b0a      	ldr	r3, [pc, #40]	; (8011930 <dhcp_handle_offer+0x48>)
 8011908:	689b      	ldr	r3, [r3, #8]
 801190a:	4618      	mov	r0, r3
 801190c:	f7f8 f977 	bl	8009bfe <lwip_htonl>
 8011910:	4602      	mov	r2, r0
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	691a      	ldr	r2, [r3, #16]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f000 f808 	bl	8011934 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8011924:	bf00      	nop
 8011926:	3710      	adds	r7, #16
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	200086dc 	.word	0x200086dc
 8011930:	200086bc 	.word	0x200086bc

08011934 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8011934:	b5b0      	push	{r4, r5, r7, lr}
 8011936:	b08a      	sub	sp, #40	; 0x28
 8011938:	af02      	add	r7, sp, #8
 801193a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d109      	bne.n	8011956 <dhcp_select+0x22>
 8011942:	4b71      	ldr	r3, [pc, #452]	; (8011b08 <dhcp_select+0x1d4>)
 8011944:	f240 1277 	movw	r2, #375	; 0x177
 8011948:	4970      	ldr	r1, [pc, #448]	; (8011b0c <dhcp_select+0x1d8>)
 801194a:	4871      	ldr	r0, [pc, #452]	; (8011b10 <dhcp_select+0x1dc>)
 801194c:	f004 f8ec 	bl	8015b28 <iprintf>
 8011950:	f06f 030f 	mvn.w	r3, #15
 8011954:	e0d3      	b.n	8011afe <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801195a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d109      	bne.n	8011976 <dhcp_select+0x42>
 8011962:	4b69      	ldr	r3, [pc, #420]	; (8011b08 <dhcp_select+0x1d4>)
 8011964:	f240 1279 	movw	r2, #377	; 0x179
 8011968:	496a      	ldr	r1, [pc, #424]	; (8011b14 <dhcp_select+0x1e0>)
 801196a:	4869      	ldr	r0, [pc, #420]	; (8011b10 <dhcp_select+0x1dc>)
 801196c:	f004 f8dc 	bl	8015b28 <iprintf>
 8011970:	f06f 0305 	mvn.w	r3, #5
 8011974:	e0c3      	b.n	8011afe <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8011976:	2101      	movs	r1, #1
 8011978:	69b8      	ldr	r0, [r7, #24]
 801197a:	f000 ffc7 	bl	801290c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801197e:	f107 030c 	add.w	r3, r7, #12
 8011982:	2203      	movs	r2, #3
 8011984:	69b9      	ldr	r1, [r7, #24]
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f001 fc4c 	bl	8013224 <dhcp_create_msg>
 801198c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b00      	cmp	r3, #0
 8011992:	f000 8085 	beq.w	8011aa0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	685b      	ldr	r3, [r3, #4]
 801199a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801199c:	89b8      	ldrh	r0, [r7, #12]
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119a4:	2302      	movs	r3, #2
 80119a6:	2239      	movs	r2, #57	; 0x39
 80119a8:	f000 ffca 	bl	8012940 <dhcp_option>
 80119ac:	4603      	mov	r3, r0
 80119ae:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80119b0:	89b8      	ldrh	r0, [r7, #12]
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119bc:	461a      	mov	r2, r3
 80119be:	f001 f819 	bl	80129f4 <dhcp_option_short>
 80119c2:	4603      	mov	r3, r0
 80119c4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80119c6:	89b8      	ldrh	r0, [r7, #12]
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119ce:	2304      	movs	r3, #4
 80119d0:	2232      	movs	r2, #50	; 0x32
 80119d2:	f000 ffb5 	bl	8012940 <dhcp_option>
 80119d6:	4603      	mov	r3, r0
 80119d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80119da:	89bc      	ldrh	r4, [r7, #12]
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	69db      	ldr	r3, [r3, #28]
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7f8 f909 	bl	8009bfe <lwip_htonl>
 80119ec:	4603      	mov	r3, r0
 80119ee:	461a      	mov	r2, r3
 80119f0:	4629      	mov	r1, r5
 80119f2:	4620      	mov	r0, r4
 80119f4:	f001 f830 	bl	8012a58 <dhcp_option_long>
 80119f8:	4603      	mov	r3, r0
 80119fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80119fc:	89b8      	ldrh	r0, [r7, #12]
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a04:	2304      	movs	r3, #4
 8011a06:	2236      	movs	r2, #54	; 0x36
 8011a08:	f000 ff9a 	bl	8012940 <dhcp_option>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8011a10:	89bc      	ldrh	r4, [r7, #12]
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011a18:	69bb      	ldr	r3, [r7, #24]
 8011a1a:	699b      	ldr	r3, [r3, #24]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7f8 f8ee 	bl	8009bfe <lwip_htonl>
 8011a22:	4603      	mov	r3, r0
 8011a24:	461a      	mov	r2, r3
 8011a26:	4629      	mov	r1, r5
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f001 f815 	bl	8012a58 <dhcp_option_long>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011a32:	89b8      	ldrh	r0, [r7, #12]
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a3a:	2303      	movs	r3, #3
 8011a3c:	2237      	movs	r2, #55	; 0x37
 8011a3e:	f000 ff7f 	bl	8012940 <dhcp_option>
 8011a42:	4603      	mov	r3, r0
 8011a44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a46:	2300      	movs	r3, #0
 8011a48:	77bb      	strb	r3, [r7, #30]
 8011a4a:	e00e      	b.n	8011a6a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011a4c:	89b8      	ldrh	r0, [r7, #12]
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a54:	7fbb      	ldrb	r3, [r7, #30]
 8011a56:	4a30      	ldr	r2, [pc, #192]	; (8011b18 <dhcp_select+0x1e4>)
 8011a58:	5cd3      	ldrb	r3, [r2, r3]
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	f000 ffa4 	bl	80129a8 <dhcp_option_byte>
 8011a60:	4603      	mov	r3, r0
 8011a62:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a64:	7fbb      	ldrb	r3, [r7, #30]
 8011a66:	3301      	adds	r3, #1
 8011a68:	77bb      	strb	r3, [r7, #30]
 8011a6a:	7fbb      	ldrb	r3, [r7, #30]
 8011a6c:	2b02      	cmp	r3, #2
 8011a6e:	d9ed      	bls.n	8011a4c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011a70:	89b8      	ldrh	r0, [r7, #12]
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	33f0      	adds	r3, #240	; 0xf0
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	4619      	mov	r1, r3
 8011a7a:	f001 fca9 	bl	80133d0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011a7e:	4b27      	ldr	r3, [pc, #156]	; (8011b1c <dhcp_select+0x1e8>)
 8011a80:	6818      	ldr	r0, [r3, #0]
 8011a82:	4b27      	ldr	r3, [pc, #156]	; (8011b20 <dhcp_select+0x1ec>)
 8011a84:	9301      	str	r3, [sp, #4]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	9300      	str	r3, [sp, #0]
 8011a8a:	2343      	movs	r3, #67	; 0x43
 8011a8c:	4a25      	ldr	r2, [pc, #148]	; (8011b24 <dhcp_select+0x1f0>)
 8011a8e:	6979      	ldr	r1, [r7, #20]
 8011a90:	f7ff fbda 	bl	8011248 <udp_sendto_if_src>
 8011a94:	4603      	mov	r3, r0
 8011a96:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011a98:	6978      	ldr	r0, [r7, #20]
 8011a9a:	f7f9 fc9d 	bl	800b3d8 <pbuf_free>
 8011a9e:	e001      	b.n	8011aa4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011aa0:	23ff      	movs	r3, #255	; 0xff
 8011aa2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011aa4:	69bb      	ldr	r3, [r7, #24]
 8011aa6:	799b      	ldrb	r3, [r3, #6]
 8011aa8:	2bff      	cmp	r3, #255	; 0xff
 8011aaa:	d005      	beq.n	8011ab8 <dhcp_select+0x184>
    dhcp->tries++;
 8011aac:	69bb      	ldr	r3, [r7, #24]
 8011aae:	799b      	ldrb	r3, [r3, #6]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	69bb      	ldr	r3, [r7, #24]
 8011ab6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	799b      	ldrb	r3, [r3, #6]
 8011abc:	2b05      	cmp	r3, #5
 8011abe:	d80d      	bhi.n	8011adc <dhcp_select+0x1a8>
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	799b      	ldrb	r3, [r3, #6]
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	4093      	lsls	r3, r2
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	461a      	mov	r2, r3
 8011ace:	0152      	lsls	r2, r2, #5
 8011ad0:	1ad2      	subs	r2, r2, r3
 8011ad2:	0092      	lsls	r2, r2, #2
 8011ad4:	4413      	add	r3, r2
 8011ad6:	00db      	lsls	r3, r3, #3
 8011ad8:	b29b      	uxth	r3, r3
 8011ada:	e001      	b.n	8011ae0 <dhcp_select+0x1ac>
 8011adc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011ae0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011ae2:	89fb      	ldrh	r3, [r7, #14]
 8011ae4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011ae8:	4a0f      	ldr	r2, [pc, #60]	; (8011b28 <dhcp_select+0x1f4>)
 8011aea:	fb82 1203 	smull	r1, r2, r2, r3
 8011aee:	1152      	asrs	r2, r2, #5
 8011af0:	17db      	asrs	r3, r3, #31
 8011af2:	1ad3      	subs	r3, r2, r3
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011afa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3720      	adds	r7, #32
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bdb0      	pop	{r4, r5, r7, pc}
 8011b06:	bf00      	nop
 8011b08:	08018f04 	.word	0x08018f04
 8011b0c:	08018fb0 	.word	0x08018fb0
 8011b10:	08018f64 	.word	0x08018f64
 8011b14:	08018fcc 	.word	0x08018fcc
 8011b18:	20000040 	.word	0x20000040
 8011b1c:	200086e4 	.word	0x200086e4
 8011b20:	08019a74 	.word	0x08019a74
 8011b24:	08019a78 	.word	0x08019a78
 8011b28:	10624dd3 	.word	0x10624dd3

08011b2c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8011b32:	4b27      	ldr	r3, [pc, #156]	; (8011bd0 <dhcp_coarse_tmr+0xa4>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	607b      	str	r3, [r7, #4]
 8011b38:	e042      	b.n	8011bc0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b3e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d039      	beq.n	8011bba <dhcp_coarse_tmr+0x8e>
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	795b      	ldrb	r3, [r3, #5]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d035      	beq.n	8011bba <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	8a9b      	ldrh	r3, [r3, #20]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d012      	beq.n	8011b7c <dhcp_coarse_tmr+0x50>
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	8a5b      	ldrh	r3, [r3, #18]
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	825a      	strh	r2, [r3, #18]
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	8a5a      	ldrh	r2, [r3, #18]
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	8a9b      	ldrh	r3, [r3, #20]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d106      	bne.n	8011b7c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 fe32 	bl	80127d8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 f969 	bl	8011e4c <dhcp_start>
 8011b7a:	e01e      	b.n	8011bba <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	8a1b      	ldrh	r3, [r3, #16]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00b      	beq.n	8011b9c <dhcp_coarse_tmr+0x70>
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	8a1b      	ldrh	r3, [r3, #16]
 8011b88:	1e5a      	subs	r2, r3, #1
 8011b8a:	b291      	uxth	r1, r2
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	8211      	strh	r1, [r2, #16]
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	d103      	bne.n	8011b9c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f000 f8c6 	bl	8011d26 <dhcp_t2_timeout>
 8011b9a:	e00e      	b.n	8011bba <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	89db      	ldrh	r3, [r3, #14]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00a      	beq.n	8011bba <dhcp_coarse_tmr+0x8e>
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	89db      	ldrh	r3, [r3, #14]
 8011ba8:	1e5a      	subs	r2, r3, #1
 8011baa:	b291      	uxth	r1, r2
 8011bac:	683a      	ldr	r2, [r7, #0]
 8011bae:	81d1      	strh	r1, [r2, #14]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d102      	bne.n	8011bba <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f000 f888 	bl	8011cca <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	607b      	str	r3, [r7, #4]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d1b9      	bne.n	8011b3a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8011bc6:	bf00      	nop
 8011bc8:	bf00      	nop
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	20008650 	.word	0x20008650

08011bd4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8011bda:	4b16      	ldr	r3, [pc, #88]	; (8011c34 <dhcp_fine_tmr+0x60>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	607b      	str	r3, [r7, #4]
 8011be0:	e020      	b.n	8011c24 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d017      	beq.n	8011c1e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	891b      	ldrh	r3, [r3, #8]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d906      	bls.n	8011c04 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	891b      	ldrh	r3, [r3, #8]
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	b29a      	uxth	r2, r3
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	811a      	strh	r2, [r3, #8]
 8011c02:	e00c      	b.n	8011c1e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	891b      	ldrh	r3, [r3, #8]
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d108      	bne.n	8011c1e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	891b      	ldrh	r3, [r3, #8]
 8011c10:	3b01      	subs	r3, #1
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 f80d 	bl	8011c38 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	607b      	str	r3, [r7, #4]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1db      	bne.n	8011be2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8011c2a:	bf00      	nop
 8011c2c:	bf00      	nop
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	20008650 	.word	0x20008650

08011c38 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c44:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	795b      	ldrb	r3, [r3, #5]
 8011c4a:	2b0c      	cmp	r3, #12
 8011c4c:	d003      	beq.n	8011c56 <dhcp_timeout+0x1e>
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	795b      	ldrb	r3, [r3, #5]
 8011c52:	2b06      	cmp	r3, #6
 8011c54:	d103      	bne.n	8011c5e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f000 fa54 	bl	8012104 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011c5c:	e031      	b.n	8011cc2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	795b      	ldrb	r3, [r3, #5]
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d10e      	bne.n	8011c84 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	799b      	ldrb	r3, [r3, #6]
 8011c6a:	2b05      	cmp	r3, #5
 8011c6c:	d803      	bhi.n	8011c76 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f7ff fe60 	bl	8011934 <dhcp_select>
}
 8011c74:	e025      	b.n	8011cc2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 fdae 	bl	80127d8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 f8e5 	bl	8011e4c <dhcp_start>
}
 8011c82:	e01e      	b.n	8011cc2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	795b      	ldrb	r3, [r3, #5]
 8011c88:	2b08      	cmp	r3, #8
 8011c8a:	d10b      	bne.n	8011ca4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	799b      	ldrb	r3, [r3, #6]
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d803      	bhi.n	8011c9c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7ff fdf3 	bl	8011880 <dhcp_check>
}
 8011c9a:	e012      	b.n	8011cc2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f000 fad3 	bl	8012248 <dhcp_bind>
}
 8011ca2:	e00e      	b.n	8011cc2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	795b      	ldrb	r3, [r3, #5]
 8011ca8:	2b03      	cmp	r3, #3
 8011caa:	d10a      	bne.n	8011cc2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	799b      	ldrb	r3, [r3, #6]
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	d803      	bhi.n	8011cbc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f000 fcd9 	bl	801266c <dhcp_reboot>
}
 8011cba:	e002      	b.n	8011cc2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 fa21 	bl	8012104 <dhcp_discover>
}
 8011cc2:	bf00      	nop
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}

08011cca <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8011cca:	b580      	push	{r7, lr}
 8011ccc:	b084      	sub	sp, #16
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	795b      	ldrb	r3, [r3, #5]
 8011cdc:	2b01      	cmp	r3, #1
 8011cde:	d007      	beq.n	8011cf0 <dhcp_t1_timeout+0x26>
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	795b      	ldrb	r3, [r3, #5]
 8011ce4:	2b0a      	cmp	r3, #10
 8011ce6:	d003      	beq.n	8011cf0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011cec:	2b05      	cmp	r3, #5
 8011cee:	d116      	bne.n	8011d1e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f000 fb83 	bl	80123fc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	899b      	ldrh	r3, [r3, #12]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	8a5b      	ldrh	r3, [r3, #18]
 8011d00:	1ad3      	subs	r3, r2, r3
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	dd0b      	ble.n	8011d1e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	899b      	ldrh	r3, [r3, #12]
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	8a5b      	ldrh	r3, [r3, #18]
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	0fda      	lsrs	r2, r3, #31
 8011d14:	4413      	add	r3, r2
 8011d16:	105b      	asrs	r3, r3, #1
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8011d1e:	bf00      	nop
 8011d20:	3710      	adds	r7, #16
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}

08011d26 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011d26:	b580      	push	{r7, lr}
 8011d28:	b084      	sub	sp, #16
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d32:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	795b      	ldrb	r3, [r3, #5]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d00b      	beq.n	8011d54 <dhcp_t2_timeout+0x2e>
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	795b      	ldrb	r3, [r3, #5]
 8011d40:	2b0a      	cmp	r3, #10
 8011d42:	d007      	beq.n	8011d54 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011d48:	2b05      	cmp	r3, #5
 8011d4a:	d003      	beq.n	8011d54 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	795b      	ldrb	r3, [r3, #5]
 8011d50:	2b04      	cmp	r3, #4
 8011d52:	d116      	bne.n	8011d82 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f000 fbed 	bl	8012534 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	8a9b      	ldrh	r3, [r3, #20]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	8a5b      	ldrh	r3, [r3, #18]
 8011d64:	1ad3      	subs	r3, r2, r3
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	dd0b      	ble.n	8011d82 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	8a9b      	ldrh	r3, [r3, #20]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	8a5b      	ldrh	r3, [r3, #18]
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	0fda      	lsrs	r2, r3, #31
 8011d78:	4413      	add	r3, r2
 8011d7a:	105b      	asrs	r3, r3, #1
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8011d82:	bf00      	nop
 8011d84:	3710      	adds	r7, #16
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
	...

08011d8c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d9a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2200      	movs	r2, #0
 8011da6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011da8:	4b26      	ldr	r3, [pc, #152]	; (8011e44 <dhcp_handle_ack+0xb8>)
 8011daa:	78db      	ldrb	r3, [r3, #3]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d003      	beq.n	8011db8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011db0:	4b25      	ldr	r3, [pc, #148]	; (8011e48 <dhcp_handle_ack+0xbc>)
 8011db2:	68da      	ldr	r2, [r3, #12]
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011db8:	4b22      	ldr	r3, [pc, #136]	; (8011e44 <dhcp_handle_ack+0xb8>)
 8011dba:	791b      	ldrb	r3, [r3, #4]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d004      	beq.n	8011dca <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011dc0:	4b21      	ldr	r3, [pc, #132]	; (8011e48 <dhcp_handle_ack+0xbc>)
 8011dc2:	691a      	ldr	r2, [r3, #16]
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8011dc8:	e004      	b.n	8011dd4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dce:	085a      	lsrs	r2, r3, #1
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011dd4:	4b1b      	ldr	r3, [pc, #108]	; (8011e44 <dhcp_handle_ack+0xb8>)
 8011dd6:	795b      	ldrb	r3, [r3, #5]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d004      	beq.n	8011de6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011ddc:	4b1a      	ldr	r3, [pc, #104]	; (8011e48 <dhcp_handle_ack+0xbc>)
 8011dde:	695a      	ldr	r2, [r3, #20]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	631a      	str	r2, [r3, #48]	; 0x30
 8011de4:	e007      	b.n	8011df6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dea:	4613      	mov	r3, r2
 8011dec:	00db      	lsls	r3, r3, #3
 8011dee:	1a9b      	subs	r3, r3, r2
 8011df0:	08da      	lsrs	r2, r3, #3
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	691a      	ldr	r2, [r3, #16]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8011dfe:	4b11      	ldr	r3, [pc, #68]	; (8011e44 <dhcp_handle_ack+0xb8>)
 8011e00:	799b      	ldrb	r3, [r3, #6]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d00b      	beq.n	8011e1e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8011e06:	4b10      	ldr	r3, [pc, #64]	; (8011e48 <dhcp_handle_ack+0xbc>)
 8011e08:	699b      	ldr	r3, [r3, #24]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7f7 fef7 	bl	8009bfe <lwip_htonl>
 8011e10:	4602      	mov	r2, r0
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2201      	movs	r2, #1
 8011e1a:	71da      	strb	r2, [r3, #7]
 8011e1c:	e002      	b.n	8011e24 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	2200      	movs	r2, #0
 8011e22:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011e24:	4b07      	ldr	r3, [pc, #28]	; (8011e44 <dhcp_handle_ack+0xb8>)
 8011e26:	79db      	ldrb	r3, [r3, #7]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d007      	beq.n	8011e3c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8011e2c:	4b06      	ldr	r3, [pc, #24]	; (8011e48 <dhcp_handle_ack+0xbc>)
 8011e2e:	69db      	ldr	r3, [r3, #28]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7f7 fee4 	bl	8009bfe <lwip_htonl>
 8011e36:	4602      	mov	r2, r0
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011e3c:	bf00      	nop
 8011e3e:	3710      	adds	r7, #16
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	200086dc 	.word	0x200086dc
 8011e48:	200086bc 	.word	0x200086bc

08011e4c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d109      	bne.n	8011e6e <dhcp_start+0x22>
 8011e5a:	4b37      	ldr	r3, [pc, #220]	; (8011f38 <dhcp_start+0xec>)
 8011e5c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011e60:	4936      	ldr	r1, [pc, #216]	; (8011f3c <dhcp_start+0xf0>)
 8011e62:	4837      	ldr	r0, [pc, #220]	; (8011f40 <dhcp_start+0xf4>)
 8011e64:	f003 fe60 	bl	8015b28 <iprintf>
 8011e68:	f06f 030f 	mvn.w	r3, #15
 8011e6c:	e060      	b.n	8011f30 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e74:	f003 0301 	and.w	r3, r3, #1
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d109      	bne.n	8011e90 <dhcp_start+0x44>
 8011e7c:	4b2e      	ldr	r3, [pc, #184]	; (8011f38 <dhcp_start+0xec>)
 8011e7e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011e82:	4930      	ldr	r1, [pc, #192]	; (8011f44 <dhcp_start+0xf8>)
 8011e84:	482e      	ldr	r0, [pc, #184]	; (8011f40 <dhcp_start+0xf4>)
 8011e86:	f003 fe4f 	bl	8015b28 <iprintf>
 8011e8a:	f06f 030f 	mvn.w	r3, #15
 8011e8e:	e04f      	b.n	8011f30 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e94:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e9a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8011e9e:	d202      	bcs.n	8011ea6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea4:	e044      	b.n	8011f30 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10d      	bne.n	8011ec8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011eac:	2034      	movs	r0, #52	; 0x34
 8011eae:	f7f8 fa31 	bl	800a314 <mem_malloc>
 8011eb2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8011eba:	f04f 33ff 	mov.w	r3, #4294967295
 8011ebe:	e037      	b.n	8011f30 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	68fa      	ldr	r2, [r7, #12]
 8011ec4:	625a      	str	r2, [r3, #36]	; 0x24
 8011ec6:	e005      	b.n	8011ed4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	791b      	ldrb	r3, [r3, #4]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d001      	beq.n	8011ed4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011ed0:	f7ff fc92 	bl	80117f8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011ed4:	2234      	movs	r2, #52	; 0x34
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f003 fe1d 	bl	8015b18 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011ede:	f7ff fc39 	bl	8011754 <dhcp_inc_pcb_refcount>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d002      	beq.n	8011eee <dhcp_start+0xa2>
    return ERR_MEM;
 8011ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8011eec:	e020      	b.n	8011f30 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011efa:	f003 0304 	and.w	r3, r3, #4
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d105      	bne.n	8011f0e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8011f02:	2102      	movs	r1, #2
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f000 fd01 	bl	801290c <dhcp_set_state>
    return ERR_OK;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	e010      	b.n	8011f30 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 f8f8 	bl	8012104 <dhcp_discover>
 8011f14:	4603      	mov	r3, r0
 8011f16:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011f18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d005      	beq.n	8011f2c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f000 fc59 	bl	80127d8 <dhcp_release_and_stop>
    return ERR_MEM;
 8011f26:	f04f 33ff 	mov.w	r3, #4294967295
 8011f2a:	e001      	b.n	8011f30 <dhcp_start+0xe4>
  }
  return result;
 8011f2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3710      	adds	r7, #16
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	08018f04 	.word	0x08018f04
 8011f3c:	08018fe8 	.word	0x08018fe8
 8011f40:	08018f64 	.word	0x08018f64
 8011f44:	0801902c 	.word	0x0801902c

08011f48 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f54:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d025      	beq.n	8011fa8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	795b      	ldrb	r3, [r3, #5]
 8011f60:	2b0a      	cmp	r3, #10
 8011f62:	d008      	beq.n	8011f76 <dhcp_network_changed+0x2e>
 8011f64:	2b0a      	cmp	r3, #10
 8011f66:	dc0d      	bgt.n	8011f84 <dhcp_network_changed+0x3c>
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d01f      	beq.n	8011fac <dhcp_network_changed+0x64>
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	db09      	blt.n	8011f84 <dhcp_network_changed+0x3c>
 8011f70:	3b03      	subs	r3, #3
 8011f72:	2b02      	cmp	r3, #2
 8011f74:	d806      	bhi.n	8011f84 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 fb75 	bl	801266c <dhcp_reboot>
      break;
 8011f82:	e014      	b.n	8011fae <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	795b      	ldrb	r3, [r3, #5]
 8011f88:	2b0c      	cmp	r3, #12
 8011f8a:	d906      	bls.n	8011f9a <dhcp_network_changed+0x52>
 8011f8c:	4b09      	ldr	r3, [pc, #36]	; (8011fb4 <dhcp_network_changed+0x6c>)
 8011f8e:	f240 326d 	movw	r2, #877	; 0x36d
 8011f92:	4909      	ldr	r1, [pc, #36]	; (8011fb8 <dhcp_network_changed+0x70>)
 8011f94:	4809      	ldr	r0, [pc, #36]	; (8011fbc <dhcp_network_changed+0x74>)
 8011f96:	f003 fdc7 	bl	8015b28 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f000 f8af 	bl	8012104 <dhcp_discover>
      break;
 8011fa6:	e002      	b.n	8011fae <dhcp_network_changed+0x66>
    return;
 8011fa8:	bf00      	nop
 8011faa:	e000      	b.n	8011fae <dhcp_network_changed+0x66>
      break;
 8011fac:	bf00      	nop
  }
}
 8011fae:	3710      	adds	r7, #16
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	08018f04 	.word	0x08018f04
 8011fb8:	08019050 	.word	0x08019050
 8011fbc:	08018f64 	.word	0x08018f64

08011fc0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d107      	bne.n	8011fe0 <dhcp_arp_reply+0x20>
 8011fd0:	4b0e      	ldr	r3, [pc, #56]	; (801200c <dhcp_arp_reply+0x4c>)
 8011fd2:	f240 328b 	movw	r2, #907	; 0x38b
 8011fd6:	490e      	ldr	r1, [pc, #56]	; (8012010 <dhcp_arp_reply+0x50>)
 8011fd8:	480e      	ldr	r0, [pc, #56]	; (8012014 <dhcp_arp_reply+0x54>)
 8011fda:	f003 fda5 	bl	8015b28 <iprintf>
 8011fde:	e012      	b.n	8012006 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00c      	beq.n	8012006 <dhcp_arp_reply+0x46>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	795b      	ldrb	r3, [r3, #5]
 8011ff0:	2b08      	cmp	r3, #8
 8011ff2:	d108      	bne.n	8012006 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	69db      	ldr	r3, [r3, #28]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d102      	bne.n	8012006 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f000 f809 	bl	8012018 <dhcp_decline>
    }
  }
}
 8012006:	3710      	adds	r7, #16
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	08018f04 	.word	0x08018f04
 8012010:	08018fe8 	.word	0x08018fe8
 8012014:	08018f64 	.word	0x08018f64

08012018 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012018:	b5b0      	push	{r4, r5, r7, lr}
 801201a:	b08a      	sub	sp, #40	; 0x28
 801201c:	af02      	add	r7, sp, #8
 801201e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012024:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012026:	210c      	movs	r1, #12
 8012028:	69b8      	ldr	r0, [r7, #24]
 801202a:	f000 fc6f 	bl	801290c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801202e:	f107 030c 	add.w	r3, r7, #12
 8012032:	2204      	movs	r2, #4
 8012034:	69b9      	ldr	r1, [r7, #24]
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f001 f8f4 	bl	8013224 <dhcp_create_msg>
 801203c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d035      	beq.n	80120b0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801204a:	89b8      	ldrh	r0, [r7, #12]
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012052:	2304      	movs	r3, #4
 8012054:	2232      	movs	r2, #50	; 0x32
 8012056:	f000 fc73 	bl	8012940 <dhcp_option>
 801205a:	4603      	mov	r3, r0
 801205c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801205e:	89bc      	ldrh	r4, [r7, #12]
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012066:	69bb      	ldr	r3, [r7, #24]
 8012068:	69db      	ldr	r3, [r3, #28]
 801206a:	4618      	mov	r0, r3
 801206c:	f7f7 fdc7 	bl	8009bfe <lwip_htonl>
 8012070:	4603      	mov	r3, r0
 8012072:	461a      	mov	r2, r3
 8012074:	4629      	mov	r1, r5
 8012076:	4620      	mov	r0, r4
 8012078:	f000 fcee 	bl	8012a58 <dhcp_option_long>
 801207c:	4603      	mov	r3, r0
 801207e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012080:	89b8      	ldrh	r0, [r7, #12]
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	33f0      	adds	r3, #240	; 0xf0
 8012086:	697a      	ldr	r2, [r7, #20]
 8012088:	4619      	mov	r1, r3
 801208a:	f001 f9a1 	bl	80133d0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801208e:	4b19      	ldr	r3, [pc, #100]	; (80120f4 <dhcp_decline+0xdc>)
 8012090:	6818      	ldr	r0, [r3, #0]
 8012092:	4b19      	ldr	r3, [pc, #100]	; (80120f8 <dhcp_decline+0xe0>)
 8012094:	9301      	str	r3, [sp, #4]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	9300      	str	r3, [sp, #0]
 801209a:	2343      	movs	r3, #67	; 0x43
 801209c:	4a17      	ldr	r2, [pc, #92]	; (80120fc <dhcp_decline+0xe4>)
 801209e:	6979      	ldr	r1, [r7, #20]
 80120a0:	f7ff f8d2 	bl	8011248 <udp_sendto_if_src>
 80120a4:	4603      	mov	r3, r0
 80120a6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80120a8:	6978      	ldr	r0, [r7, #20]
 80120aa:	f7f9 f995 	bl	800b3d8 <pbuf_free>
 80120ae:	e001      	b.n	80120b4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80120b0:	23ff      	movs	r3, #255	; 0xff
 80120b2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80120b4:	69bb      	ldr	r3, [r7, #24]
 80120b6:	799b      	ldrb	r3, [r3, #6]
 80120b8:	2bff      	cmp	r3, #255	; 0xff
 80120ba:	d005      	beq.n	80120c8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	799b      	ldrb	r3, [r3, #6]
 80120c0:	3301      	adds	r3, #1
 80120c2:	b2da      	uxtb	r2, r3
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80120c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80120cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80120ce:	89fb      	ldrh	r3, [r7, #14]
 80120d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80120d4:	4a0a      	ldr	r2, [pc, #40]	; (8012100 <dhcp_decline+0xe8>)
 80120d6:	fb82 1203 	smull	r1, r2, r2, r3
 80120da:	1152      	asrs	r2, r2, #5
 80120dc:	17db      	asrs	r3, r3, #31
 80120de:	1ad3      	subs	r3, r2, r3
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	69bb      	ldr	r3, [r7, #24]
 80120e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80120e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3720      	adds	r7, #32
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bdb0      	pop	{r4, r5, r7, pc}
 80120f2:	bf00      	nop
 80120f4:	200086e4 	.word	0x200086e4
 80120f8:	08019a74 	.word	0x08019a74
 80120fc:	08019a78 	.word	0x08019a78
 8012100:	10624dd3 	.word	0x10624dd3

08012104 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b08a      	sub	sp, #40	; 0x28
 8012108:	af02      	add	r7, sp, #8
 801210a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012110:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012112:	2300      	movs	r3, #0
 8012114:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	2200      	movs	r2, #0
 801211a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801211c:	2106      	movs	r1, #6
 801211e:	69b8      	ldr	r0, [r7, #24]
 8012120:	f000 fbf4 	bl	801290c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012124:	f107 0308 	add.w	r3, r7, #8
 8012128:	2201      	movs	r2, #1
 801212a:	69b9      	ldr	r1, [r7, #24]
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f001 f879 	bl	8013224 <dhcp_create_msg>
 8012132:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d04b      	beq.n	80121d2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012140:	8938      	ldrh	r0, [r7, #8]
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012148:	2302      	movs	r3, #2
 801214a:	2239      	movs	r2, #57	; 0x39
 801214c:	f000 fbf8 	bl	8012940 <dhcp_option>
 8012150:	4603      	mov	r3, r0
 8012152:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012154:	8938      	ldrh	r0, [r7, #8]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012160:	461a      	mov	r2, r3
 8012162:	f000 fc47 	bl	80129f4 <dhcp_option_short>
 8012166:	4603      	mov	r3, r0
 8012168:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801216a:	8938      	ldrh	r0, [r7, #8]
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012172:	2303      	movs	r3, #3
 8012174:	2237      	movs	r2, #55	; 0x37
 8012176:	f000 fbe3 	bl	8012940 <dhcp_option>
 801217a:	4603      	mov	r3, r0
 801217c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801217e:	2300      	movs	r3, #0
 8012180:	77fb      	strb	r3, [r7, #31]
 8012182:	e00e      	b.n	80121a2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012184:	8938      	ldrh	r0, [r7, #8]
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801218c:	7ffb      	ldrb	r3, [r7, #31]
 801218e:	4a29      	ldr	r2, [pc, #164]	; (8012234 <dhcp_discover+0x130>)
 8012190:	5cd3      	ldrb	r3, [r2, r3]
 8012192:	461a      	mov	r2, r3
 8012194:	f000 fc08 	bl	80129a8 <dhcp_option_byte>
 8012198:	4603      	mov	r3, r0
 801219a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801219c:	7ffb      	ldrb	r3, [r7, #31]
 801219e:	3301      	adds	r3, #1
 80121a0:	77fb      	strb	r3, [r7, #31]
 80121a2:	7ffb      	ldrb	r3, [r7, #31]
 80121a4:	2b02      	cmp	r3, #2
 80121a6:	d9ed      	bls.n	8012184 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80121a8:	8938      	ldrh	r0, [r7, #8]
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	33f0      	adds	r3, #240	; 0xf0
 80121ae:	693a      	ldr	r2, [r7, #16]
 80121b0:	4619      	mov	r1, r3
 80121b2:	f001 f90d 	bl	80133d0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80121b6:	4b20      	ldr	r3, [pc, #128]	; (8012238 <dhcp_discover+0x134>)
 80121b8:	6818      	ldr	r0, [r3, #0]
 80121ba:	4b20      	ldr	r3, [pc, #128]	; (801223c <dhcp_discover+0x138>)
 80121bc:	9301      	str	r3, [sp, #4]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	2343      	movs	r3, #67	; 0x43
 80121c4:	4a1e      	ldr	r2, [pc, #120]	; (8012240 <dhcp_discover+0x13c>)
 80121c6:	6939      	ldr	r1, [r7, #16]
 80121c8:	f7ff f83e 	bl	8011248 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80121cc:	6938      	ldr	r0, [r7, #16]
 80121ce:	f7f9 f903 	bl	800b3d8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	799b      	ldrb	r3, [r3, #6]
 80121d6:	2bff      	cmp	r3, #255	; 0xff
 80121d8:	d005      	beq.n	80121e6 <dhcp_discover+0xe2>
    dhcp->tries++;
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	799b      	ldrb	r3, [r3, #6]
 80121de:	3301      	adds	r3, #1
 80121e0:	b2da      	uxtb	r2, r3
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80121e6:	69bb      	ldr	r3, [r7, #24]
 80121e8:	799b      	ldrb	r3, [r3, #6]
 80121ea:	2b05      	cmp	r3, #5
 80121ec:	d80d      	bhi.n	801220a <dhcp_discover+0x106>
 80121ee:	69bb      	ldr	r3, [r7, #24]
 80121f0:	799b      	ldrb	r3, [r3, #6]
 80121f2:	461a      	mov	r2, r3
 80121f4:	2301      	movs	r3, #1
 80121f6:	4093      	lsls	r3, r2
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	461a      	mov	r2, r3
 80121fc:	0152      	lsls	r2, r2, #5
 80121fe:	1ad2      	subs	r2, r2, r3
 8012200:	0092      	lsls	r2, r2, #2
 8012202:	4413      	add	r3, r2
 8012204:	00db      	lsls	r3, r3, #3
 8012206:	b29b      	uxth	r3, r3
 8012208:	e001      	b.n	801220e <dhcp_discover+0x10a>
 801220a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801220e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012210:	897b      	ldrh	r3, [r7, #10]
 8012212:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012216:	4a0b      	ldr	r2, [pc, #44]	; (8012244 <dhcp_discover+0x140>)
 8012218:	fb82 1203 	smull	r1, r2, r2, r3
 801221c:	1152      	asrs	r2, r2, #5
 801221e:	17db      	asrs	r3, r3, #31
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	b29a      	uxth	r2, r3
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012228:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801222c:	4618      	mov	r0, r3
 801222e:	3720      	adds	r7, #32
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	20000040 	.word	0x20000040
 8012238:	200086e4 	.word	0x200086e4
 801223c:	08019a74 	.word	0x08019a74
 8012240:	08019a78 	.word	0x08019a78
 8012244:	10624dd3 	.word	0x10624dd3

08012248 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b088      	sub	sp, #32
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d107      	bne.n	8012266 <dhcp_bind+0x1e>
 8012256:	4b64      	ldr	r3, [pc, #400]	; (80123e8 <dhcp_bind+0x1a0>)
 8012258:	f240 4215 	movw	r2, #1045	; 0x415
 801225c:	4963      	ldr	r1, [pc, #396]	; (80123ec <dhcp_bind+0x1a4>)
 801225e:	4864      	ldr	r0, [pc, #400]	; (80123f0 <dhcp_bind+0x1a8>)
 8012260:	f003 fc62 	bl	8015b28 <iprintf>
 8012264:	e0bc      	b.n	80123e0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801226a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d107      	bne.n	8012282 <dhcp_bind+0x3a>
 8012272:	4b5d      	ldr	r3, [pc, #372]	; (80123e8 <dhcp_bind+0x1a0>)
 8012274:	f240 4217 	movw	r2, #1047	; 0x417
 8012278:	495e      	ldr	r1, [pc, #376]	; (80123f4 <dhcp_bind+0x1ac>)
 801227a:	485d      	ldr	r0, [pc, #372]	; (80123f0 <dhcp_bind+0x1a8>)
 801227c:	f003 fc54 	bl	8015b28 <iprintf>
 8012280:	e0ae      	b.n	80123e0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	2200      	movs	r2, #0
 8012286:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012288:	69bb      	ldr	r3, [r7, #24]
 801228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012290:	d019      	beq.n	80122c6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012296:	331e      	adds	r3, #30
 8012298:	4a57      	ldr	r2, [pc, #348]	; (80123f8 <dhcp_bind+0x1b0>)
 801229a:	fba2 2303 	umull	r2, r3, r2, r3
 801229e:	095b      	lsrs	r3, r3, #5
 80122a0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80122a2:	69fb      	ldr	r3, [r7, #28]
 80122a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122a8:	d302      	bcc.n	80122b0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80122aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122ae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80122b8:	69bb      	ldr	r3, [r7, #24]
 80122ba:	8a9b      	ldrh	r3, [r3, #20]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d102      	bne.n	80122c6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	2201      	movs	r2, #1
 80122c4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ce:	d01d      	beq.n	801230c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122d4:	331e      	adds	r3, #30
 80122d6:	4a48      	ldr	r2, [pc, #288]	; (80123f8 <dhcp_bind+0x1b0>)
 80122d8:	fba2 2303 	umull	r2, r3, r2, r3
 80122dc:	095b      	lsrs	r3, r3, #5
 80122de:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122e6:	d302      	bcc.n	80122ee <dhcp_bind+0xa6>
      timeout = 0xffff;
 80122e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122ec:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	895b      	ldrh	r3, [r3, #10]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d102      	bne.n	8012304 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	2201      	movs	r2, #1
 8012302:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	895a      	ldrh	r2, [r3, #10]
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012314:	d01d      	beq.n	8012352 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012316:	69bb      	ldr	r3, [r7, #24]
 8012318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801231a:	331e      	adds	r3, #30
 801231c:	4a36      	ldr	r2, [pc, #216]	; (80123f8 <dhcp_bind+0x1b0>)
 801231e:	fba2 2303 	umull	r2, r3, r2, r3
 8012322:	095b      	lsrs	r3, r3, #5
 8012324:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012326:	69fb      	ldr	r3, [r7, #28]
 8012328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801232c:	d302      	bcc.n	8012334 <dhcp_bind+0xec>
      timeout = 0xffff;
 801232e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012332:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	b29a      	uxth	r2, r3
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801233c:	69bb      	ldr	r3, [r7, #24]
 801233e:	899b      	ldrh	r3, [r3, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d102      	bne.n	801234a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	2201      	movs	r2, #1
 8012348:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	899a      	ldrh	r2, [r3, #12]
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	895a      	ldrh	r2, [r3, #10]
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	899b      	ldrh	r3, [r3, #12]
 801235a:	429a      	cmp	r2, r3
 801235c:	d306      	bcc.n	801236c <dhcp_bind+0x124>
 801235e:	69bb      	ldr	r3, [r7, #24]
 8012360:	899b      	ldrh	r3, [r3, #12]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d002      	beq.n	801236c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012366:	69bb      	ldr	r3, [r7, #24]
 8012368:	2200      	movs	r2, #0
 801236a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801236c:	69bb      	ldr	r3, [r7, #24]
 801236e:	79db      	ldrb	r3, [r3, #7]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d003      	beq.n	801237c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	6a1b      	ldr	r3, [r3, #32]
 8012378:	613b      	str	r3, [r7, #16]
 801237a:	e014      	b.n	80123a6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801237c:	69bb      	ldr	r3, [r7, #24]
 801237e:	331c      	adds	r3, #28
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012388:	2b00      	cmp	r3, #0
 801238a:	db02      	blt.n	8012392 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801238c:	23ff      	movs	r3, #255	; 0xff
 801238e:	613b      	str	r3, [r7, #16]
 8012390:	e009      	b.n	80123a6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012392:	7dfb      	ldrb	r3, [r7, #23]
 8012394:	2bbf      	cmp	r3, #191	; 0xbf
 8012396:	d903      	bls.n	80123a0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012398:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801239c:	613b      	str	r3, [r7, #16]
 801239e:	e002      	b.n	80123a6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80123a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123a4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80123a6:	69bb      	ldr	r3, [r7, #24]
 80123a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123aa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d108      	bne.n	80123c4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80123b2:	69bb      	ldr	r3, [r7, #24]
 80123b4:	69da      	ldr	r2, [r3, #28]
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	4013      	ands	r3, r2
 80123ba:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80123c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80123c4:	210a      	movs	r1, #10
 80123c6:	69b8      	ldr	r0, [r7, #24]
 80123c8:	f000 faa0 	bl	801290c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80123cc:	69bb      	ldr	r3, [r7, #24]
 80123ce:	f103 011c 	add.w	r1, r3, #28
 80123d2:	f107 030c 	add.w	r3, r7, #12
 80123d6:	f107 0210 	add.w	r2, r7, #16
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7f8 fb3c 	bl	800aa58 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80123e0:	3720      	adds	r7, #32
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	08018f04 	.word	0x08018f04
 80123ec:	08019064 	.word	0x08019064
 80123f0:	08018f64 	.word	0x08018f64
 80123f4:	08019080 	.word	0x08019080
 80123f8:	88888889 	.word	0x88888889

080123fc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b08a      	sub	sp, #40	; 0x28
 8012400:	af02      	add	r7, sp, #8
 8012402:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012408:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801240a:	2105      	movs	r1, #5
 801240c:	69b8      	ldr	r0, [r7, #24]
 801240e:	f000 fa7d 	bl	801290c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012412:	f107 030c 	add.w	r3, r7, #12
 8012416:	2203      	movs	r2, #3
 8012418:	69b9      	ldr	r1, [r7, #24]
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f000 ff02 	bl	8013224 <dhcp_create_msg>
 8012420:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d04e      	beq.n	80124c6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801242e:	89b8      	ldrh	r0, [r7, #12]
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012436:	2302      	movs	r3, #2
 8012438:	2239      	movs	r2, #57	; 0x39
 801243a:	f000 fa81 	bl	8012940 <dhcp_option>
 801243e:	4603      	mov	r3, r0
 8012440:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012442:	89b8      	ldrh	r0, [r7, #12]
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801244e:	461a      	mov	r2, r3
 8012450:	f000 fad0 	bl	80129f4 <dhcp_option_short>
 8012454:	4603      	mov	r3, r0
 8012456:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012458:	89b8      	ldrh	r0, [r7, #12]
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012460:	2303      	movs	r3, #3
 8012462:	2237      	movs	r2, #55	; 0x37
 8012464:	f000 fa6c 	bl	8012940 <dhcp_option>
 8012468:	4603      	mov	r3, r0
 801246a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801246c:	2300      	movs	r3, #0
 801246e:	77bb      	strb	r3, [r7, #30]
 8012470:	e00e      	b.n	8012490 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012472:	89b8      	ldrh	r0, [r7, #12]
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801247a:	7fbb      	ldrb	r3, [r7, #30]
 801247c:	4a2a      	ldr	r2, [pc, #168]	; (8012528 <dhcp_renew+0x12c>)
 801247e:	5cd3      	ldrb	r3, [r2, r3]
 8012480:	461a      	mov	r2, r3
 8012482:	f000 fa91 	bl	80129a8 <dhcp_option_byte>
 8012486:	4603      	mov	r3, r0
 8012488:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801248a:	7fbb      	ldrb	r3, [r7, #30]
 801248c:	3301      	adds	r3, #1
 801248e:	77bb      	strb	r3, [r7, #30]
 8012490:	7fbb      	ldrb	r3, [r7, #30]
 8012492:	2b02      	cmp	r3, #2
 8012494:	d9ed      	bls.n	8012472 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012496:	89b8      	ldrh	r0, [r7, #12]
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	33f0      	adds	r3, #240	; 0xf0
 801249c:	697a      	ldr	r2, [r7, #20]
 801249e:	4619      	mov	r1, r3
 80124a0:	f000 ff96 	bl	80133d0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80124a4:	4b21      	ldr	r3, [pc, #132]	; (801252c <dhcp_renew+0x130>)
 80124a6:	6818      	ldr	r0, [r3, #0]
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	f103 0218 	add.w	r2, r3, #24
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	9300      	str	r3, [sp, #0]
 80124b2:	2343      	movs	r3, #67	; 0x43
 80124b4:	6979      	ldr	r1, [r7, #20]
 80124b6:	f7fe fe53 	bl	8011160 <udp_sendto_if>
 80124ba:	4603      	mov	r3, r0
 80124bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80124be:	6978      	ldr	r0, [r7, #20]
 80124c0:	f7f8 ff8a 	bl	800b3d8 <pbuf_free>
 80124c4:	e001      	b.n	80124ca <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80124c6:	23ff      	movs	r3, #255	; 0xff
 80124c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	799b      	ldrb	r3, [r3, #6]
 80124ce:	2bff      	cmp	r3, #255	; 0xff
 80124d0:	d005      	beq.n	80124de <dhcp_renew+0xe2>
    dhcp->tries++;
 80124d2:	69bb      	ldr	r3, [r7, #24]
 80124d4:	799b      	ldrb	r3, [r3, #6]
 80124d6:	3301      	adds	r3, #1
 80124d8:	b2da      	uxtb	r2, r3
 80124da:	69bb      	ldr	r3, [r7, #24]
 80124dc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	799b      	ldrb	r3, [r3, #6]
 80124e2:	2b09      	cmp	r3, #9
 80124e4:	d80a      	bhi.n	80124fc <dhcp_renew+0x100>
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	799b      	ldrb	r3, [r3, #6]
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	461a      	mov	r2, r3
 80124ee:	0152      	lsls	r2, r2, #5
 80124f0:	1ad2      	subs	r2, r2, r3
 80124f2:	0092      	lsls	r2, r2, #2
 80124f4:	4413      	add	r3, r2
 80124f6:	011b      	lsls	r3, r3, #4
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	e001      	b.n	8012500 <dhcp_renew+0x104>
 80124fc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012500:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012502:	89fb      	ldrh	r3, [r7, #14]
 8012504:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012508:	4a09      	ldr	r2, [pc, #36]	; (8012530 <dhcp_renew+0x134>)
 801250a:	fb82 1203 	smull	r1, r2, r2, r3
 801250e:	1152      	asrs	r2, r2, #5
 8012510:	17db      	asrs	r3, r3, #31
 8012512:	1ad3      	subs	r3, r2, r3
 8012514:	b29a      	uxth	r2, r3
 8012516:	69bb      	ldr	r3, [r7, #24]
 8012518:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801251a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3720      	adds	r7, #32
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	20000040 	.word	0x20000040
 801252c:	200086e4 	.word	0x200086e4
 8012530:	10624dd3 	.word	0x10624dd3

08012534 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b08a      	sub	sp, #40	; 0x28
 8012538:	af02      	add	r7, sp, #8
 801253a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012540:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012542:	2104      	movs	r1, #4
 8012544:	69b8      	ldr	r0, [r7, #24]
 8012546:	f000 f9e1 	bl	801290c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801254a:	f107 030c 	add.w	r3, r7, #12
 801254e:	2203      	movs	r2, #3
 8012550:	69b9      	ldr	r1, [r7, #24]
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f000 fe66 	bl	8013224 <dhcp_create_msg>
 8012558:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d04c      	beq.n	80125fa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012566:	89b8      	ldrh	r0, [r7, #12]
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801256e:	2302      	movs	r3, #2
 8012570:	2239      	movs	r2, #57	; 0x39
 8012572:	f000 f9e5 	bl	8012940 <dhcp_option>
 8012576:	4603      	mov	r3, r0
 8012578:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801257a:	89b8      	ldrh	r0, [r7, #12]
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012586:	461a      	mov	r2, r3
 8012588:	f000 fa34 	bl	80129f4 <dhcp_option_short>
 801258c:	4603      	mov	r3, r0
 801258e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012590:	89b8      	ldrh	r0, [r7, #12]
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012598:	2303      	movs	r3, #3
 801259a:	2237      	movs	r2, #55	; 0x37
 801259c:	f000 f9d0 	bl	8012940 <dhcp_option>
 80125a0:	4603      	mov	r3, r0
 80125a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80125a4:	2300      	movs	r3, #0
 80125a6:	77bb      	strb	r3, [r7, #30]
 80125a8:	e00e      	b.n	80125c8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80125aa:	89b8      	ldrh	r0, [r7, #12]
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80125b2:	7fbb      	ldrb	r3, [r7, #30]
 80125b4:	4a29      	ldr	r2, [pc, #164]	; (801265c <dhcp_rebind+0x128>)
 80125b6:	5cd3      	ldrb	r3, [r2, r3]
 80125b8:	461a      	mov	r2, r3
 80125ba:	f000 f9f5 	bl	80129a8 <dhcp_option_byte>
 80125be:	4603      	mov	r3, r0
 80125c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80125c2:	7fbb      	ldrb	r3, [r7, #30]
 80125c4:	3301      	adds	r3, #1
 80125c6:	77bb      	strb	r3, [r7, #30]
 80125c8:	7fbb      	ldrb	r3, [r7, #30]
 80125ca:	2b02      	cmp	r3, #2
 80125cc:	d9ed      	bls.n	80125aa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80125ce:	89b8      	ldrh	r0, [r7, #12]
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	33f0      	adds	r3, #240	; 0xf0
 80125d4:	697a      	ldr	r2, [r7, #20]
 80125d6:	4619      	mov	r1, r3
 80125d8:	f000 fefa 	bl	80133d0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80125dc:	4b20      	ldr	r3, [pc, #128]	; (8012660 <dhcp_rebind+0x12c>)
 80125de:	6818      	ldr	r0, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	9300      	str	r3, [sp, #0]
 80125e4:	2343      	movs	r3, #67	; 0x43
 80125e6:	4a1f      	ldr	r2, [pc, #124]	; (8012664 <dhcp_rebind+0x130>)
 80125e8:	6979      	ldr	r1, [r7, #20]
 80125ea:	f7fe fdb9 	bl	8011160 <udp_sendto_if>
 80125ee:	4603      	mov	r3, r0
 80125f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80125f2:	6978      	ldr	r0, [r7, #20]
 80125f4:	f7f8 fef0 	bl	800b3d8 <pbuf_free>
 80125f8:	e001      	b.n	80125fe <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80125fa:	23ff      	movs	r3, #255	; 0xff
 80125fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	799b      	ldrb	r3, [r3, #6]
 8012602:	2bff      	cmp	r3, #255	; 0xff
 8012604:	d005      	beq.n	8012612 <dhcp_rebind+0xde>
    dhcp->tries++;
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	799b      	ldrb	r3, [r3, #6]
 801260a:	3301      	adds	r3, #1
 801260c:	b2da      	uxtb	r2, r3
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	799b      	ldrb	r3, [r3, #6]
 8012616:	2b09      	cmp	r3, #9
 8012618:	d80a      	bhi.n	8012630 <dhcp_rebind+0xfc>
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	799b      	ldrb	r3, [r3, #6]
 801261e:	b29b      	uxth	r3, r3
 8012620:	461a      	mov	r2, r3
 8012622:	0152      	lsls	r2, r2, #5
 8012624:	1ad2      	subs	r2, r2, r3
 8012626:	0092      	lsls	r2, r2, #2
 8012628:	4413      	add	r3, r2
 801262a:	00db      	lsls	r3, r3, #3
 801262c:	b29b      	uxth	r3, r3
 801262e:	e001      	b.n	8012634 <dhcp_rebind+0x100>
 8012630:	f242 7310 	movw	r3, #10000	; 0x2710
 8012634:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012636:	89fb      	ldrh	r3, [r7, #14]
 8012638:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801263c:	4a0a      	ldr	r2, [pc, #40]	; (8012668 <dhcp_rebind+0x134>)
 801263e:	fb82 1203 	smull	r1, r2, r2, r3
 8012642:	1152      	asrs	r2, r2, #5
 8012644:	17db      	asrs	r3, r3, #31
 8012646:	1ad3      	subs	r3, r2, r3
 8012648:	b29a      	uxth	r2, r3
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801264e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012652:	4618      	mov	r0, r3
 8012654:	3720      	adds	r7, #32
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	20000040 	.word	0x20000040
 8012660:	200086e4 	.word	0x200086e4
 8012664:	08019a78 	.word	0x08019a78
 8012668:	10624dd3 	.word	0x10624dd3

0801266c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801266c:	b5b0      	push	{r4, r5, r7, lr}
 801266e:	b08a      	sub	sp, #40	; 0x28
 8012670:	af02      	add	r7, sp, #8
 8012672:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012678:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801267a:	2103      	movs	r1, #3
 801267c:	69b8      	ldr	r0, [r7, #24]
 801267e:	f000 f945 	bl	801290c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012682:	f107 030c 	add.w	r3, r7, #12
 8012686:	2203      	movs	r2, #3
 8012688:	69b9      	ldr	r1, [r7, #24]
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f000 fdca 	bl	8013224 <dhcp_create_msg>
 8012690:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d066      	beq.n	8012766 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801269e:	89b8      	ldrh	r0, [r7, #12]
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126a6:	2302      	movs	r3, #2
 80126a8:	2239      	movs	r2, #57	; 0x39
 80126aa:	f000 f949 	bl	8012940 <dhcp_option>
 80126ae:	4603      	mov	r3, r0
 80126b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80126b2:	89b8      	ldrh	r0, [r7, #12]
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	33f0      	adds	r3, #240	; 0xf0
 80126b8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80126bc:	4619      	mov	r1, r3
 80126be:	f000 f999 	bl	80129f4 <dhcp_option_short>
 80126c2:	4603      	mov	r3, r0
 80126c4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80126c6:	89b8      	ldrh	r0, [r7, #12]
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126ce:	2304      	movs	r3, #4
 80126d0:	2232      	movs	r2, #50	; 0x32
 80126d2:	f000 f935 	bl	8012940 <dhcp_option>
 80126d6:	4603      	mov	r3, r0
 80126d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80126da:	89bc      	ldrh	r4, [r7, #12]
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	69db      	ldr	r3, [r3, #28]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7f7 fa89 	bl	8009bfe <lwip_htonl>
 80126ec:	4603      	mov	r3, r0
 80126ee:	461a      	mov	r2, r3
 80126f0:	4629      	mov	r1, r5
 80126f2:	4620      	mov	r0, r4
 80126f4:	f000 f9b0 	bl	8012a58 <dhcp_option_long>
 80126f8:	4603      	mov	r3, r0
 80126fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80126fc:	89b8      	ldrh	r0, [r7, #12]
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012704:	2303      	movs	r3, #3
 8012706:	2237      	movs	r2, #55	; 0x37
 8012708:	f000 f91a 	bl	8012940 <dhcp_option>
 801270c:	4603      	mov	r3, r0
 801270e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012710:	2300      	movs	r3, #0
 8012712:	77bb      	strb	r3, [r7, #30]
 8012714:	e00e      	b.n	8012734 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012716:	89b8      	ldrh	r0, [r7, #12]
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801271e:	7fbb      	ldrb	r3, [r7, #30]
 8012720:	4a29      	ldr	r2, [pc, #164]	; (80127c8 <dhcp_reboot+0x15c>)
 8012722:	5cd3      	ldrb	r3, [r2, r3]
 8012724:	461a      	mov	r2, r3
 8012726:	f000 f93f 	bl	80129a8 <dhcp_option_byte>
 801272a:	4603      	mov	r3, r0
 801272c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801272e:	7fbb      	ldrb	r3, [r7, #30]
 8012730:	3301      	adds	r3, #1
 8012732:	77bb      	strb	r3, [r7, #30]
 8012734:	7fbb      	ldrb	r3, [r7, #30]
 8012736:	2b02      	cmp	r3, #2
 8012738:	d9ed      	bls.n	8012716 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801273a:	89b8      	ldrh	r0, [r7, #12]
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	33f0      	adds	r3, #240	; 0xf0
 8012740:	697a      	ldr	r2, [r7, #20]
 8012742:	4619      	mov	r1, r3
 8012744:	f000 fe44 	bl	80133d0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012748:	4b20      	ldr	r3, [pc, #128]	; (80127cc <dhcp_reboot+0x160>)
 801274a:	6818      	ldr	r0, [r3, #0]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	2343      	movs	r3, #67	; 0x43
 8012752:	4a1f      	ldr	r2, [pc, #124]	; (80127d0 <dhcp_reboot+0x164>)
 8012754:	6979      	ldr	r1, [r7, #20]
 8012756:	f7fe fd03 	bl	8011160 <udp_sendto_if>
 801275a:	4603      	mov	r3, r0
 801275c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801275e:	6978      	ldr	r0, [r7, #20]
 8012760:	f7f8 fe3a 	bl	800b3d8 <pbuf_free>
 8012764:	e001      	b.n	801276a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012766:	23ff      	movs	r3, #255	; 0xff
 8012768:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801276a:	69bb      	ldr	r3, [r7, #24]
 801276c:	799b      	ldrb	r3, [r3, #6]
 801276e:	2bff      	cmp	r3, #255	; 0xff
 8012770:	d005      	beq.n	801277e <dhcp_reboot+0x112>
    dhcp->tries++;
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	799b      	ldrb	r3, [r3, #6]
 8012776:	3301      	adds	r3, #1
 8012778:	b2da      	uxtb	r2, r3
 801277a:	69bb      	ldr	r3, [r7, #24]
 801277c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801277e:	69bb      	ldr	r3, [r7, #24]
 8012780:	799b      	ldrb	r3, [r3, #6]
 8012782:	2b09      	cmp	r3, #9
 8012784:	d80a      	bhi.n	801279c <dhcp_reboot+0x130>
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	799b      	ldrb	r3, [r3, #6]
 801278a:	b29b      	uxth	r3, r3
 801278c:	461a      	mov	r2, r3
 801278e:	0152      	lsls	r2, r2, #5
 8012790:	1ad2      	subs	r2, r2, r3
 8012792:	0092      	lsls	r2, r2, #2
 8012794:	4413      	add	r3, r2
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	b29b      	uxth	r3, r3
 801279a:	e001      	b.n	80127a0 <dhcp_reboot+0x134>
 801279c:	f242 7310 	movw	r3, #10000	; 0x2710
 80127a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80127a2:	89fb      	ldrh	r3, [r7, #14]
 80127a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80127a8:	4a0a      	ldr	r2, [pc, #40]	; (80127d4 <dhcp_reboot+0x168>)
 80127aa:	fb82 1203 	smull	r1, r2, r2, r3
 80127ae:	1152      	asrs	r2, r2, #5
 80127b0:	17db      	asrs	r3, r3, #31
 80127b2:	1ad3      	subs	r3, r2, r3
 80127b4:	b29a      	uxth	r2, r3
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80127ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3720      	adds	r7, #32
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bdb0      	pop	{r4, r5, r7, pc}
 80127c6:	bf00      	nop
 80127c8:	20000040 	.word	0x20000040
 80127cc:	200086e4 	.word	0x200086e4
 80127d0:	08019a78 	.word	0x08019a78
 80127d4:	10624dd3 	.word	0x10624dd3

080127d8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80127d8:	b5b0      	push	{r4, r5, r7, lr}
 80127da:	b08a      	sub	sp, #40	; 0x28
 80127dc:	af02      	add	r7, sp, #8
 80127de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f000 8084 	beq.w	80128f6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80127ee:	69fb      	ldr	r3, [r7, #28]
 80127f0:	795b      	ldrb	r3, [r3, #5]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f000 8081 	beq.w	80128fa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	699b      	ldr	r3, [r3, #24]
 80127fc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	2200      	movs	r2, #0
 8012802:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	2200      	movs	r2, #0
 8012808:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	2200      	movs	r2, #0
 801280e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	2200      	movs	r2, #0
 8012814:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	2200      	movs	r2, #0
 801281a:	631a      	str	r2, [r3, #48]	; 0x30
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	62da      	str	r2, [r3, #44]	; 0x2c
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	2200      	movs	r2, #0
 8012830:	829a      	strh	r2, [r3, #20]
 8012832:	69fb      	ldr	r3, [r7, #28]
 8012834:	8a9a      	ldrh	r2, [r3, #20]
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	825a      	strh	r2, [r3, #18]
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	8a5a      	ldrh	r2, [r3, #18]
 801283e:	69fb      	ldr	r3, [r7, #28]
 8012840:	821a      	strh	r2, [r3, #16]
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	8a1a      	ldrh	r2, [r3, #16]
 8012846:	69fb      	ldr	r3, [r7, #28]
 8012848:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f000 fdee 	bl	801342c <dhcp_supplied_address>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d03b      	beq.n	80128ce <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012856:	f107 030e 	add.w	r3, r7, #14
 801285a:	2207      	movs	r2, #7
 801285c:	69f9      	ldr	r1, [r7, #28]
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f000 fce0 	bl	8013224 <dhcp_create_msg>
 8012864:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d030      	beq.n	80128ce <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012872:	89f8      	ldrh	r0, [r7, #14]
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801287a:	2304      	movs	r3, #4
 801287c:	2236      	movs	r2, #54	; 0x36
 801287e:	f000 f85f 	bl	8012940 <dhcp_option>
 8012882:	4603      	mov	r3, r0
 8012884:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012886:	89fc      	ldrh	r4, [r7, #14]
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	4618      	mov	r0, r3
 8012892:	f7f7 f9b4 	bl	8009bfe <lwip_htonl>
 8012896:	4603      	mov	r3, r0
 8012898:	461a      	mov	r2, r3
 801289a:	4629      	mov	r1, r5
 801289c:	4620      	mov	r0, r4
 801289e:	f000 f8db 	bl	8012a58 <dhcp_option_long>
 80128a2:	4603      	mov	r3, r0
 80128a4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80128a6:	89f8      	ldrh	r0, [r7, #14]
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	33f0      	adds	r3, #240	; 0xf0
 80128ac:	69ba      	ldr	r2, [r7, #24]
 80128ae:	4619      	mov	r1, r3
 80128b0:	f000 fd8e 	bl	80133d0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80128b4:	4b13      	ldr	r3, [pc, #76]	; (8012904 <dhcp_release_and_stop+0x12c>)
 80128b6:	6818      	ldr	r0, [r3, #0]
 80128b8:	f107 0210 	add.w	r2, r7, #16
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	9300      	str	r3, [sp, #0]
 80128c0:	2343      	movs	r3, #67	; 0x43
 80128c2:	69b9      	ldr	r1, [r7, #24]
 80128c4:	f7fe fc4c 	bl	8011160 <udp_sendto_if>
      pbuf_free(p_out);
 80128c8:	69b8      	ldr	r0, [r7, #24]
 80128ca:	f7f8 fd85 	bl	800b3d8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80128ce:	4b0e      	ldr	r3, [pc, #56]	; (8012908 <dhcp_release_and_stop+0x130>)
 80128d0:	4a0d      	ldr	r2, [pc, #52]	; (8012908 <dhcp_release_and_stop+0x130>)
 80128d2:	490d      	ldr	r1, [pc, #52]	; (8012908 <dhcp_release_and_stop+0x130>)
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7f8 f8bf 	bl	800aa58 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80128da:	2100      	movs	r1, #0
 80128dc:	69f8      	ldr	r0, [r7, #28]
 80128de:	f000 f815 	bl	801290c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80128e2:	69fb      	ldr	r3, [r7, #28]
 80128e4:	791b      	ldrb	r3, [r3, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d008      	beq.n	80128fc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80128ea:	f7fe ff85 	bl	80117f8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	2200      	movs	r2, #0
 80128f2:	711a      	strb	r2, [r3, #4]
 80128f4:	e002      	b.n	80128fc <dhcp_release_and_stop+0x124>
    return;
 80128f6:	bf00      	nop
 80128f8:	e000      	b.n	80128fc <dhcp_release_and_stop+0x124>
    return;
 80128fa:	bf00      	nop
  }
}
 80128fc:	3720      	adds	r7, #32
 80128fe:	46bd      	mov	sp, r7
 8012900:	bdb0      	pop	{r4, r5, r7, pc}
 8012902:	bf00      	nop
 8012904:	200086e4 	.word	0x200086e4
 8012908:	08019a74 	.word	0x08019a74

0801290c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	460b      	mov	r3, r1
 8012916:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	795b      	ldrb	r3, [r3, #5]
 801291c:	78fa      	ldrb	r2, [r7, #3]
 801291e:	429a      	cmp	r2, r3
 8012920:	d008      	beq.n	8012934 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	78fa      	ldrb	r2, [r7, #3]
 8012926:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2200      	movs	r2, #0
 801292c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2200      	movs	r2, #0
 8012932:	811a      	strh	r2, [r3, #8]
  }
}
 8012934:	bf00      	nop
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6039      	str	r1, [r7, #0]
 8012948:	4611      	mov	r1, r2
 801294a:	461a      	mov	r2, r3
 801294c:	4603      	mov	r3, r0
 801294e:	80fb      	strh	r3, [r7, #6]
 8012950:	460b      	mov	r3, r1
 8012952:	717b      	strb	r3, [r7, #5]
 8012954:	4613      	mov	r3, r2
 8012956:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012958:	88fa      	ldrh	r2, [r7, #6]
 801295a:	793b      	ldrb	r3, [r7, #4]
 801295c:	4413      	add	r3, r2
 801295e:	3302      	adds	r3, #2
 8012960:	2b44      	cmp	r3, #68	; 0x44
 8012962:	d906      	bls.n	8012972 <dhcp_option+0x32>
 8012964:	4b0d      	ldr	r3, [pc, #52]	; (801299c <dhcp_option+0x5c>)
 8012966:	f240 529a 	movw	r2, #1434	; 0x59a
 801296a:	490d      	ldr	r1, [pc, #52]	; (80129a0 <dhcp_option+0x60>)
 801296c:	480d      	ldr	r0, [pc, #52]	; (80129a4 <dhcp_option+0x64>)
 801296e:	f003 f8db 	bl	8015b28 <iprintf>
  options[options_out_len++] = option_type;
 8012972:	88fb      	ldrh	r3, [r7, #6]
 8012974:	1c5a      	adds	r2, r3, #1
 8012976:	80fa      	strh	r2, [r7, #6]
 8012978:	461a      	mov	r2, r3
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	4413      	add	r3, r2
 801297e:	797a      	ldrb	r2, [r7, #5]
 8012980:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8012982:	88fb      	ldrh	r3, [r7, #6]
 8012984:	1c5a      	adds	r2, r3, #1
 8012986:	80fa      	strh	r2, [r7, #6]
 8012988:	461a      	mov	r2, r3
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	4413      	add	r3, r2
 801298e:	793a      	ldrb	r2, [r7, #4]
 8012990:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012992:	88fb      	ldrh	r3, [r7, #6]
}
 8012994:	4618      	mov	r0, r3
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}
 801299c:	08018f04 	.word	0x08018f04
 80129a0:	08019098 	.word	0x08019098
 80129a4:	08018f64 	.word	0x08018f64

080129a8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	4603      	mov	r3, r0
 80129b0:	6039      	str	r1, [r7, #0]
 80129b2:	80fb      	strh	r3, [r7, #6]
 80129b4:	4613      	mov	r3, r2
 80129b6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80129b8:	88fb      	ldrh	r3, [r7, #6]
 80129ba:	2b43      	cmp	r3, #67	; 0x43
 80129bc:	d906      	bls.n	80129cc <dhcp_option_byte+0x24>
 80129be:	4b0a      	ldr	r3, [pc, #40]	; (80129e8 <dhcp_option_byte+0x40>)
 80129c0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80129c4:	4909      	ldr	r1, [pc, #36]	; (80129ec <dhcp_option_byte+0x44>)
 80129c6:	480a      	ldr	r0, [pc, #40]	; (80129f0 <dhcp_option_byte+0x48>)
 80129c8:	f003 f8ae 	bl	8015b28 <iprintf>
  options[options_out_len++] = value;
 80129cc:	88fb      	ldrh	r3, [r7, #6]
 80129ce:	1c5a      	adds	r2, r3, #1
 80129d0:	80fa      	strh	r2, [r7, #6]
 80129d2:	461a      	mov	r2, r3
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	4413      	add	r3, r2
 80129d8:	797a      	ldrb	r2, [r7, #5]
 80129da:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80129dc:	88fb      	ldrh	r3, [r7, #6]
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3708      	adds	r7, #8
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	08018f04 	.word	0x08018f04
 80129ec:	080190dc 	.word	0x080190dc
 80129f0:	08018f64 	.word	0x08018f64

080129f4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	4603      	mov	r3, r0
 80129fc:	6039      	str	r1, [r7, #0]
 80129fe:	80fb      	strh	r3, [r7, #6]
 8012a00:	4613      	mov	r3, r2
 8012a02:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012a04:	88fb      	ldrh	r3, [r7, #6]
 8012a06:	3302      	adds	r3, #2
 8012a08:	2b44      	cmp	r3, #68	; 0x44
 8012a0a:	d906      	bls.n	8012a1a <dhcp_option_short+0x26>
 8012a0c:	4b0f      	ldr	r3, [pc, #60]	; (8012a4c <dhcp_option_short+0x58>)
 8012a0e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8012a12:	490f      	ldr	r1, [pc, #60]	; (8012a50 <dhcp_option_short+0x5c>)
 8012a14:	480f      	ldr	r0, [pc, #60]	; (8012a54 <dhcp_option_short+0x60>)
 8012a16:	f003 f887 	bl	8015b28 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012a1a:	88bb      	ldrh	r3, [r7, #4]
 8012a1c:	0a1b      	lsrs	r3, r3, #8
 8012a1e:	b29a      	uxth	r2, r3
 8012a20:	88fb      	ldrh	r3, [r7, #6]
 8012a22:	1c59      	adds	r1, r3, #1
 8012a24:	80f9      	strh	r1, [r7, #6]
 8012a26:	4619      	mov	r1, r3
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	440b      	add	r3, r1
 8012a2c:	b2d2      	uxtb	r2, r2
 8012a2e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012a30:	88fb      	ldrh	r3, [r7, #6]
 8012a32:	1c5a      	adds	r2, r3, #1
 8012a34:	80fa      	strh	r2, [r7, #6]
 8012a36:	461a      	mov	r2, r3
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	88ba      	ldrh	r2, [r7, #4]
 8012a3e:	b2d2      	uxtb	r2, r2
 8012a40:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012a42:	88fb      	ldrh	r3, [r7, #6]
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3708      	adds	r7, #8
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	08018f04 	.word	0x08018f04
 8012a50:	08019114 	.word	0x08019114
 8012a54:	08018f64 	.word	0x08018f64

08012a58 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	4603      	mov	r3, r0
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	607a      	str	r2, [r7, #4]
 8012a64:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8012a66:	89fb      	ldrh	r3, [r7, #14]
 8012a68:	3304      	adds	r3, #4
 8012a6a:	2b44      	cmp	r3, #68	; 0x44
 8012a6c:	d906      	bls.n	8012a7c <dhcp_option_long+0x24>
 8012a6e:	4b19      	ldr	r3, [pc, #100]	; (8012ad4 <dhcp_option_long+0x7c>)
 8012a70:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8012a74:	4918      	ldr	r1, [pc, #96]	; (8012ad8 <dhcp_option_long+0x80>)
 8012a76:	4819      	ldr	r0, [pc, #100]	; (8012adc <dhcp_option_long+0x84>)
 8012a78:	f003 f856 	bl	8015b28 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	0e1a      	lsrs	r2, r3, #24
 8012a80:	89fb      	ldrh	r3, [r7, #14]
 8012a82:	1c59      	adds	r1, r3, #1
 8012a84:	81f9      	strh	r1, [r7, #14]
 8012a86:	4619      	mov	r1, r3
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	440b      	add	r3, r1
 8012a8c:	b2d2      	uxtb	r2, r2
 8012a8e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	0c1a      	lsrs	r2, r3, #16
 8012a94:	89fb      	ldrh	r3, [r7, #14]
 8012a96:	1c59      	adds	r1, r3, #1
 8012a98:	81f9      	strh	r1, [r7, #14]
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	440b      	add	r3, r1
 8012aa0:	b2d2      	uxtb	r2, r2
 8012aa2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	0a1a      	lsrs	r2, r3, #8
 8012aa8:	89fb      	ldrh	r3, [r7, #14]
 8012aaa:	1c59      	adds	r1, r3, #1
 8012aac:	81f9      	strh	r1, [r7, #14]
 8012aae:	4619      	mov	r1, r3
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	440b      	add	r3, r1
 8012ab4:	b2d2      	uxtb	r2, r2
 8012ab6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8012ab8:	89fb      	ldrh	r3, [r7, #14]
 8012aba:	1c5a      	adds	r2, r3, #1
 8012abc:	81fa      	strh	r2, [r7, #14]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	b2d2      	uxtb	r2, r2
 8012ac8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012aca:	89fb      	ldrh	r3, [r7, #14]
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	08018f04 	.word	0x08018f04
 8012ad8:	08019150 	.word	0x08019150
 8012adc:	08018f64 	.word	0x08018f64

08012ae0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b090      	sub	sp, #64	; 0x40
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8012aee:	2300      	movs	r3, #0
 8012af0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8012af2:	2208      	movs	r2, #8
 8012af4:	2100      	movs	r1, #0
 8012af6:	48b5      	ldr	r0, [pc, #724]	; (8012dcc <dhcp_parse_reply+0x2ec>)
 8012af8:	f003 f80e 	bl	8015b18 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	895b      	ldrh	r3, [r3, #10]
 8012b00:	2b2b      	cmp	r3, #43	; 0x2b
 8012b02:	d802      	bhi.n	8012b0a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8012b04:	f06f 0301 	mvn.w	r3, #1
 8012b08:	e2a7      	b.n	801305a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8012b10:	23f0      	movs	r3, #240	; 0xf0
 8012b12:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	891b      	ldrh	r3, [r3, #8]
 8012b18:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012b1e:	e00c      	b.n	8012b3a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8012b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b22:	895b      	ldrh	r3, [r3, #10]
 8012b24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012b26:	1ad3      	subs	r3, r2, r3
 8012b28:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8012b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2c:	895b      	ldrh	r3, [r3, #10]
 8012b2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8012b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d004      	beq.n	8012b4a <dhcp_parse_reply+0x6a>
 8012b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b42:	895b      	ldrh	r3, [r3, #10]
 8012b44:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d2ea      	bcs.n	8012b20 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8012b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d102      	bne.n	8012b56 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012b50:	f06f 0301 	mvn.w	r3, #1
 8012b54:	e281      	b.n	801305a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8012b56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012b58:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8012b5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b5c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8012b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012b64:	e239      	b.n	8012fda <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8012b66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b6a:	4413      	add	r3, r2
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012b70:	2300      	movs	r3, #0
 8012b72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8012b76:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8012b7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b7e:	3302      	adds	r3, #2
 8012b80:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8012b82:	8bfa      	ldrh	r2, [r7, #30]
 8012b84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d202      	bcs.n	8012b90 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8012b8a:	f06f 0301 	mvn.w	r3, #1
 8012b8e:	e264      	b.n	801305a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8012b90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b92:	3301      	adds	r3, #1
 8012b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b96:	8952      	ldrh	r2, [r2, #10]
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	da07      	bge.n	8012bac <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8012b9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ba2:	4413      	add	r3, r2
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012baa:	e00b      	b.n	8012bc4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8012bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d004      	beq.n	8012bbe <dhcp_parse_reply+0xde>
 8012bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	e000      	b.n	8012bc0 <dhcp_parse_reply+0xe0>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8012bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8012bcc:	7dfb      	ldrb	r3, [r7, #23]
 8012bce:	2b3b      	cmp	r3, #59	; 0x3b
 8012bd0:	f200 812c 	bhi.w	8012e2c <dhcp_parse_reply+0x34c>
 8012bd4:	a201      	add	r2, pc, #4	; (adr r2, 8012bdc <dhcp_parse_reply+0xfc>)
 8012bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bda:	bf00      	nop
 8012bdc:	08012ccd 	.word	0x08012ccd
 8012be0:	08012cdd 	.word	0x08012cdd
 8012be4:	08012e2d 	.word	0x08012e2d
 8012be8:	08012cff 	.word	0x08012cff
 8012bec:	08012e2d 	.word	0x08012e2d
 8012bf0:	08012e2d 	.word	0x08012e2d
 8012bf4:	08012e2d 	.word	0x08012e2d
 8012bf8:	08012e2d 	.word	0x08012e2d
 8012bfc:	08012e2d 	.word	0x08012e2d
 8012c00:	08012e2d 	.word	0x08012e2d
 8012c04:	08012e2d 	.word	0x08012e2d
 8012c08:	08012e2d 	.word	0x08012e2d
 8012c0c:	08012e2d 	.word	0x08012e2d
 8012c10:	08012e2d 	.word	0x08012e2d
 8012c14:	08012e2d 	.word	0x08012e2d
 8012c18:	08012e2d 	.word	0x08012e2d
 8012c1c:	08012e2d 	.word	0x08012e2d
 8012c20:	08012e2d 	.word	0x08012e2d
 8012c24:	08012e2d 	.word	0x08012e2d
 8012c28:	08012e2d 	.word	0x08012e2d
 8012c2c:	08012e2d 	.word	0x08012e2d
 8012c30:	08012e2d 	.word	0x08012e2d
 8012c34:	08012e2d 	.word	0x08012e2d
 8012c38:	08012e2d 	.word	0x08012e2d
 8012c3c:	08012e2d 	.word	0x08012e2d
 8012c40:	08012e2d 	.word	0x08012e2d
 8012c44:	08012e2d 	.word	0x08012e2d
 8012c48:	08012e2d 	.word	0x08012e2d
 8012c4c:	08012e2d 	.word	0x08012e2d
 8012c50:	08012e2d 	.word	0x08012e2d
 8012c54:	08012e2d 	.word	0x08012e2d
 8012c58:	08012e2d 	.word	0x08012e2d
 8012c5c:	08012e2d 	.word	0x08012e2d
 8012c60:	08012e2d 	.word	0x08012e2d
 8012c64:	08012e2d 	.word	0x08012e2d
 8012c68:	08012e2d 	.word	0x08012e2d
 8012c6c:	08012e2d 	.word	0x08012e2d
 8012c70:	08012e2d 	.word	0x08012e2d
 8012c74:	08012e2d 	.word	0x08012e2d
 8012c78:	08012e2d 	.word	0x08012e2d
 8012c7c:	08012e2d 	.word	0x08012e2d
 8012c80:	08012e2d 	.word	0x08012e2d
 8012c84:	08012e2d 	.word	0x08012e2d
 8012c88:	08012e2d 	.word	0x08012e2d
 8012c8c:	08012e2d 	.word	0x08012e2d
 8012c90:	08012e2d 	.word	0x08012e2d
 8012c94:	08012e2d 	.word	0x08012e2d
 8012c98:	08012e2d 	.word	0x08012e2d
 8012c9c:	08012e2d 	.word	0x08012e2d
 8012ca0:	08012e2d 	.word	0x08012e2d
 8012ca4:	08012e2d 	.word	0x08012e2d
 8012ca8:	08012d2b 	.word	0x08012d2b
 8012cac:	08012d4d 	.word	0x08012d4d
 8012cb0:	08012d89 	.word	0x08012d89
 8012cb4:	08012dab 	.word	0x08012dab
 8012cb8:	08012e2d 	.word	0x08012e2d
 8012cbc:	08012e2d 	.word	0x08012e2d
 8012cc0:	08012e2d 	.word	0x08012e2d
 8012cc4:	08012de9 	.word	0x08012de9
 8012cc8:	08012e0b 	.word	0x08012e0b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8012cda:	e0ab      	b.n	8012e34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ce0:	2b04      	cmp	r3, #4
 8012ce2:	d009      	beq.n	8012cf8 <dhcp_parse_reply+0x218>
 8012ce4:	4b3a      	ldr	r3, [pc, #232]	; (8012dd0 <dhcp_parse_reply+0x2f0>)
 8012ce6:	f240 622e 	movw	r2, #1582	; 0x62e
 8012cea:	493a      	ldr	r1, [pc, #232]	; (8012dd4 <dhcp_parse_reply+0x2f4>)
 8012cec:	483a      	ldr	r0, [pc, #232]	; (8012dd8 <dhcp_parse_reply+0x2f8>)
 8012cee:	f002 ff1b 	bl	8015b28 <iprintf>
 8012cf2:	f06f 0305 	mvn.w	r3, #5
 8012cf6:	e1b0      	b.n	801305a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012cf8:	2306      	movs	r3, #6
 8012cfa:	623b      	str	r3, [r7, #32]
        break;
 8012cfc:	e09a      	b.n	8012e34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8012cfe:	2304      	movs	r3, #4
 8012d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012d04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012d08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d209      	bcs.n	8012d24 <dhcp_parse_reply+0x244>
 8012d10:	4b2f      	ldr	r3, [pc, #188]	; (8012dd0 <dhcp_parse_reply+0x2f0>)
 8012d12:	f240 6233 	movw	r2, #1587	; 0x633
 8012d16:	4931      	ldr	r1, [pc, #196]	; (8012ddc <dhcp_parse_reply+0x2fc>)
 8012d18:	482f      	ldr	r0, [pc, #188]	; (8012dd8 <dhcp_parse_reply+0x2f8>)
 8012d1a:	f002 ff05 	bl	8015b28 <iprintf>
 8012d1e:	f06f 0305 	mvn.w	r3, #5
 8012d22:	e19a      	b.n	801305a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012d24:	2307      	movs	r3, #7
 8012d26:	623b      	str	r3, [r7, #32]
        break;
 8012d28:	e084      	b.n	8012e34 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d2e:	2b04      	cmp	r3, #4
 8012d30:	d009      	beq.n	8012d46 <dhcp_parse_reply+0x266>
 8012d32:	4b27      	ldr	r3, [pc, #156]	; (8012dd0 <dhcp_parse_reply+0x2f0>)
 8012d34:	f240 6241 	movw	r2, #1601	; 0x641
 8012d38:	4926      	ldr	r1, [pc, #152]	; (8012dd4 <dhcp_parse_reply+0x2f4>)
 8012d3a:	4827      	ldr	r0, [pc, #156]	; (8012dd8 <dhcp_parse_reply+0x2f8>)
 8012d3c:	f002 fef4 	bl	8015b28 <iprintf>
 8012d40:	f06f 0305 	mvn.w	r3, #5
 8012d44:	e189      	b.n	801305a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8012d46:	2303      	movs	r3, #3
 8012d48:	623b      	str	r3, [r7, #32]
        break;
 8012d4a:	e073      	b.n	8012e34 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	d009      	beq.n	8012d68 <dhcp_parse_reply+0x288>
 8012d54:	4b1e      	ldr	r3, [pc, #120]	; (8012dd0 <dhcp_parse_reply+0x2f0>)
 8012d56:	f240 624f 	movw	r2, #1615	; 0x64f
 8012d5a:	4921      	ldr	r1, [pc, #132]	; (8012de0 <dhcp_parse_reply+0x300>)
 8012d5c:	481e      	ldr	r0, [pc, #120]	; (8012dd8 <dhcp_parse_reply+0x2f8>)
 8012d5e:	f002 fee3 	bl	8015b28 <iprintf>
 8012d62:	f06f 0305 	mvn.w	r3, #5
 8012d66:	e178      	b.n	801305a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012d68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012d6a:	2bf0      	cmp	r3, #240	; 0xf0
 8012d6c:	d009      	beq.n	8012d82 <dhcp_parse_reply+0x2a2>
 8012d6e:	4b18      	ldr	r3, [pc, #96]	; (8012dd0 <dhcp_parse_reply+0x2f0>)
 8012d70:	f240 6251 	movw	r2, #1617	; 0x651
 8012d74:	491b      	ldr	r1, [pc, #108]	; (8012de4 <dhcp_parse_reply+0x304>)
 8012d76:	4818      	ldr	r0, [pc, #96]	; (8012dd8 <dhcp_parse_reply+0x2f8>)
 8012d78:	f002 fed6 	bl	8015b28 <iprintf>
 8012d7c:	f06f 0305 	mvn.w	r3, #5
 8012d80:	e16b      	b.n	801305a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8012d82:	2300      	movs	r3, #0
 8012d84:	623b      	str	r3, [r7, #32]
        break;
 8012d86:	e055      	b.n	8012e34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	d009      	beq.n	8012da4 <dhcp_parse_reply+0x2c4>
 8012d90:	4b0f      	ldr	r3, [pc, #60]	; (8012dd0 <dhcp_parse_reply+0x2f0>)
 8012d92:	f240 6255 	movw	r2, #1621	; 0x655
 8012d96:	4912      	ldr	r1, [pc, #72]	; (8012de0 <dhcp_parse_reply+0x300>)
 8012d98:	480f      	ldr	r0, [pc, #60]	; (8012dd8 <dhcp_parse_reply+0x2f8>)
 8012d9a:	f002 fec5 	bl	8015b28 <iprintf>
 8012d9e:	f06f 0305 	mvn.w	r3, #5
 8012da2:	e15a      	b.n	801305a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012da4:	2301      	movs	r3, #1
 8012da6:	623b      	str	r3, [r7, #32]
        break;
 8012da8:	e044      	b.n	8012e34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012dae:	2b04      	cmp	r3, #4
 8012db0:	d009      	beq.n	8012dc6 <dhcp_parse_reply+0x2e6>
 8012db2:	4b07      	ldr	r3, [pc, #28]	; (8012dd0 <dhcp_parse_reply+0x2f0>)
 8012db4:	f240 6259 	movw	r2, #1625	; 0x659
 8012db8:	4906      	ldr	r1, [pc, #24]	; (8012dd4 <dhcp_parse_reply+0x2f4>)
 8012dba:	4807      	ldr	r0, [pc, #28]	; (8012dd8 <dhcp_parse_reply+0x2f8>)
 8012dbc:	f002 feb4 	bl	8015b28 <iprintf>
 8012dc0:	f06f 0305 	mvn.w	r3, #5
 8012dc4:	e149      	b.n	801305a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8012dc6:	2302      	movs	r3, #2
 8012dc8:	623b      	str	r3, [r7, #32]
        break;
 8012dca:	e033      	b.n	8012e34 <dhcp_parse_reply+0x354>
 8012dcc:	200086dc 	.word	0x200086dc
 8012dd0:	08018f04 	.word	0x08018f04
 8012dd4:	0801918c 	.word	0x0801918c
 8012dd8:	08018f64 	.word	0x08018f64
 8012ddc:	08019198 	.word	0x08019198
 8012de0:	080191ac 	.word	0x080191ac
 8012de4:	080191b8 	.word	0x080191b8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012dec:	2b04      	cmp	r3, #4
 8012dee:	d009      	beq.n	8012e04 <dhcp_parse_reply+0x324>
 8012df0:	4b9c      	ldr	r3, [pc, #624]	; (8013064 <dhcp_parse_reply+0x584>)
 8012df2:	f240 625d 	movw	r2, #1629	; 0x65d
 8012df6:	499c      	ldr	r1, [pc, #624]	; (8013068 <dhcp_parse_reply+0x588>)
 8012df8:	489c      	ldr	r0, [pc, #624]	; (801306c <dhcp_parse_reply+0x58c>)
 8012dfa:	f002 fe95 	bl	8015b28 <iprintf>
 8012dfe:	f06f 0305 	mvn.w	r3, #5
 8012e02:	e12a      	b.n	801305a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8012e04:	2304      	movs	r3, #4
 8012e06:	623b      	str	r3, [r7, #32]
        break;
 8012e08:	e014      	b.n	8012e34 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e0e:	2b04      	cmp	r3, #4
 8012e10:	d009      	beq.n	8012e26 <dhcp_parse_reply+0x346>
 8012e12:	4b94      	ldr	r3, [pc, #592]	; (8013064 <dhcp_parse_reply+0x584>)
 8012e14:	f240 6261 	movw	r2, #1633	; 0x661
 8012e18:	4993      	ldr	r1, [pc, #588]	; (8013068 <dhcp_parse_reply+0x588>)
 8012e1a:	4894      	ldr	r0, [pc, #592]	; (801306c <dhcp_parse_reply+0x58c>)
 8012e1c:	f002 fe84 	bl	8015b28 <iprintf>
 8012e20:	f06f 0305 	mvn.w	r3, #5
 8012e24:	e119      	b.n	801305a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8012e26:	2305      	movs	r3, #5
 8012e28:	623b      	str	r3, [r7, #32]
        break;
 8012e2a:	e003      	b.n	8012e34 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8012e32:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8012e34:	7dfb      	ldrb	r3, [r7, #23]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d103      	bne.n	8012e42 <dhcp_parse_reply+0x362>
      offset++;
 8012e3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012e40:	e0a1      	b.n	8012f86 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012e42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e48:	4413      	add	r3, r2
 8012e4a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	dd02      	ble.n	8012e58 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8012e52:	f06f 0301 	mvn.w	r3, #1
 8012e56:	e100      	b.n	801305a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8012e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e60:	4413      	add	r3, r2
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	3302      	adds	r3, #2
 8012e66:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012e68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f000 808a 	beq.w	8012f86 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8012e72:	2300      	movs	r3, #0
 8012e74:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012e76:	6a3b      	ldr	r3, [r7, #32]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	db02      	blt.n	8012e82 <dhcp_parse_reply+0x3a2>
 8012e7c:	6a3b      	ldr	r3, [r7, #32]
 8012e7e:	2b07      	cmp	r3, #7
 8012e80:	dd06      	ble.n	8012e90 <dhcp_parse_reply+0x3b0>
 8012e82:	4b78      	ldr	r3, [pc, #480]	; (8013064 <dhcp_parse_reply+0x584>)
 8012e84:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012e88:	4979      	ldr	r1, [pc, #484]	; (8013070 <dhcp_parse_reply+0x590>)
 8012e8a:	4878      	ldr	r0, [pc, #480]	; (801306c <dhcp_parse_reply+0x58c>)
 8012e8c:	f002 fe4c 	bl	8015b28 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012e90:	4a78      	ldr	r2, [pc, #480]	; (8013074 <dhcp_parse_reply+0x594>)
 8012e92:	6a3b      	ldr	r3, [r7, #32]
 8012e94:	4413      	add	r3, r2
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d174      	bne.n	8012f86 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8012e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ea0:	2b04      	cmp	r3, #4
 8012ea2:	bf28      	it	cs
 8012ea4:	2304      	movcs	r3, #4
 8012ea6:	b2db      	uxtb	r3, r3
 8012ea8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8012eaa:	8bfb      	ldrh	r3, [r7, #30]
 8012eac:	8aba      	ldrh	r2, [r7, #20]
 8012eae:	f107 0108 	add.w	r1, r7, #8
 8012eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eb4:	f7f8 fc8a 	bl	800b7cc <pbuf_copy_partial>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	461a      	mov	r2, r3
 8012ebc:	8abb      	ldrh	r3, [r7, #20]
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d002      	beq.n	8012ec8 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8012ec2:	f06f 0301 	mvn.w	r3, #1
 8012ec6:	e0c8      	b.n	801305a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8012ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ecc:	2b04      	cmp	r3, #4
 8012ece:	d933      	bls.n	8012f38 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ed4:	f003 0303 	and.w	r3, r3, #3
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d009      	beq.n	8012ef2 <dhcp_parse_reply+0x412>
 8012ede:	4b61      	ldr	r3, [pc, #388]	; (8013064 <dhcp_parse_reply+0x584>)
 8012ee0:	f240 6281 	movw	r2, #1665	; 0x681
 8012ee4:	4964      	ldr	r1, [pc, #400]	; (8013078 <dhcp_parse_reply+0x598>)
 8012ee6:	4861      	ldr	r0, [pc, #388]	; (801306c <dhcp_parse_reply+0x58c>)
 8012ee8:	f002 fe1e 	bl	8015b28 <iprintf>
 8012eec:	f06f 0305 	mvn.w	r3, #5
 8012ef0:	e0b3      	b.n	801305a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8012ef2:	4a60      	ldr	r2, [pc, #384]	; (8013074 <dhcp_parse_reply+0x594>)
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	4413      	add	r3, r2
 8012ef8:	2201      	movs	r2, #1
 8012efa:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7f6 fe7d 	bl	8009bfe <lwip_htonl>
 8012f04:	4602      	mov	r2, r0
 8012f06:	495d      	ldr	r1, [pc, #372]	; (801307c <dhcp_parse_reply+0x59c>)
 8012f08:	6a3b      	ldr	r3, [r7, #32]
 8012f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f12:	3b04      	subs	r3, #4
 8012f14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8012f18:	8bfb      	ldrh	r3, [r7, #30]
 8012f1a:	3304      	adds	r3, #4
 8012f1c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012f1e:	8a7a      	ldrh	r2, [r7, #18]
 8012f20:	8bfb      	ldrh	r3, [r7, #30]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d202      	bcs.n	8012f2c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8012f26:	f06f 0301 	mvn.w	r3, #1
 8012f2a:	e096      	b.n	801305a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8012f2c:	8a7b      	ldrh	r3, [r7, #18]
 8012f2e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8012f30:	6a3b      	ldr	r3, [r7, #32]
 8012f32:	3301      	adds	r3, #1
 8012f34:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012f36:	e79e      	b.n	8012e76 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8012f38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f3c:	2b04      	cmp	r3, #4
 8012f3e:	d106      	bne.n	8012f4e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7f6 fe5b 	bl	8009bfe <lwip_htonl>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	60bb      	str	r3, [r7, #8]
 8012f4c:	e011      	b.n	8012f72 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f52:	2b01      	cmp	r3, #1
 8012f54:	d009      	beq.n	8012f6a <dhcp_parse_reply+0x48a>
 8012f56:	4b43      	ldr	r3, [pc, #268]	; (8013064 <dhcp_parse_reply+0x584>)
 8012f58:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012f5c:	4948      	ldr	r1, [pc, #288]	; (8013080 <dhcp_parse_reply+0x5a0>)
 8012f5e:	4843      	ldr	r0, [pc, #268]	; (801306c <dhcp_parse_reply+0x58c>)
 8012f60:	f002 fde2 	bl	8015b28 <iprintf>
 8012f64:	f06f 0305 	mvn.w	r3, #5
 8012f68:	e077      	b.n	801305a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8012f6a:	f107 0308 	add.w	r3, r7, #8
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012f72:	4a40      	ldr	r2, [pc, #256]	; (8013074 <dhcp_parse_reply+0x594>)
 8012f74:	6a3b      	ldr	r3, [r7, #32]
 8012f76:	4413      	add	r3, r2
 8012f78:	2201      	movs	r2, #1
 8012f7a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012f7c:	68ba      	ldr	r2, [r7, #8]
 8012f7e:	493f      	ldr	r1, [pc, #252]	; (801307c <dhcp_parse_reply+0x59c>)
 8012f80:	6a3b      	ldr	r3, [r7, #32]
 8012f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f88:	895b      	ldrh	r3, [r3, #10]
 8012f8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d324      	bcc.n	8012fda <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8012f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f92:	895b      	ldrh	r3, [r3, #10]
 8012f94:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9c:	895b      	ldrh	r3, [r3, #10]
 8012f9e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012fa0:	1ad3      	subs	r3, r2, r3
 8012fa2:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8012fa4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012fa6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d213      	bcs.n	8012fd4 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8012fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d109      	bne.n	8012fcc <dhcp_parse_reply+0x4ec>
 8012fb8:	4b2a      	ldr	r3, [pc, #168]	; (8013064 <dhcp_parse_reply+0x584>)
 8012fba:	f240 629d 	movw	r2, #1693	; 0x69d
 8012fbe:	4931      	ldr	r1, [pc, #196]	; (8013084 <dhcp_parse_reply+0x5a4>)
 8012fc0:	482a      	ldr	r0, [pc, #168]	; (801306c <dhcp_parse_reply+0x58c>)
 8012fc2:	f002 fdb1 	bl	8015b28 <iprintf>
 8012fc6:	f06f 0305 	mvn.w	r3, #5
 8012fca:	e046      	b.n	801305a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8012fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012fd2:	e002      	b.n	8012fda <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012fd4:	f06f 0301 	mvn.w	r3, #1
 8012fd8:	e03f      	b.n	801305a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d00a      	beq.n	8012ff6 <dhcp_parse_reply+0x516>
 8012fe0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012fe2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d206      	bcs.n	8012ff6 <dhcp_parse_reply+0x516>
 8012fe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012fec:	4413      	add	r3, r2
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	2bff      	cmp	r3, #255	; 0xff
 8012ff2:	f47f adb8 	bne.w	8012b66 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012ff6:	4b1f      	ldr	r3, [pc, #124]	; (8013074 <dhcp_parse_reply+0x594>)
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d018      	beq.n	8013030 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012ffe:	4b1f      	ldr	r3, [pc, #124]	; (801307c <dhcp_parse_reply+0x59c>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013004:	4b1b      	ldr	r3, [pc, #108]	; (8013074 <dhcp_parse_reply+0x594>)
 8013006:	2200      	movs	r2, #0
 8013008:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2b01      	cmp	r3, #1
 801300e:	d102      	bne.n	8013016 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8013010:	2301      	movs	r3, #1
 8013012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013014:	e00c      	b.n	8013030 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	2b02      	cmp	r3, #2
 801301a:	d102      	bne.n	8013022 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801301c:	2301      	movs	r3, #1
 801301e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013020:	e006      	b.n	8013030 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2b03      	cmp	r3, #3
 8013026:	d103      	bne.n	8013030 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8013028:	2301      	movs	r3, #1
 801302a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801302c:	2301      	movs	r3, #1
 801302e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013032:	2b00      	cmp	r3, #0
 8013034:	d006      	beq.n	8013044 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013036:	2300      	movs	r3, #0
 8013038:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801303a:	236c      	movs	r3, #108	; 0x6c
 801303c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801303e:	23ec      	movs	r3, #236	; 0xec
 8013040:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013042:	e56a      	b.n	8012b1a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013046:	2b00      	cmp	r3, #0
 8013048:	d006      	beq.n	8013058 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801304a:	2300      	movs	r3, #0
 801304c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801304e:	232c      	movs	r3, #44	; 0x2c
 8013050:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013052:	236c      	movs	r3, #108	; 0x6c
 8013054:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013056:	e560      	b.n	8012b1a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013058:	2300      	movs	r3, #0
}
 801305a:	4618      	mov	r0, r3
 801305c:	3740      	adds	r7, #64	; 0x40
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}
 8013062:	bf00      	nop
 8013064:	08018f04 	.word	0x08018f04
 8013068:	0801918c 	.word	0x0801918c
 801306c:	08018f64 	.word	0x08018f64
 8013070:	080191d0 	.word	0x080191d0
 8013074:	200086dc 	.word	0x200086dc
 8013078:	080191e4 	.word	0x080191e4
 801307c:	200086bc 	.word	0x200086bc
 8013080:	080191fc 	.word	0x080191fc
 8013084:	08019210 	.word	0x08019210

08013088 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b08a      	sub	sp, #40	; 0x28
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
 8013094:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013096:	4b60      	ldr	r3, [pc, #384]	; (8013218 <dhcp_recv+0x190>)
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801309c:	6a3b      	ldr	r3, [r7, #32]
 801309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130a0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f000 809d 	beq.w	80131ea <dhcp_recv+0x162>
 80130b0:	69fb      	ldr	r3, [r7, #28]
 80130b2:	791b      	ldrb	r3, [r3, #4]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	f000 8098 	beq.w	80131ea <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	895b      	ldrh	r3, [r3, #10]
 80130be:	2b2b      	cmp	r3, #43	; 0x2b
 80130c0:	f240 8095 	bls.w	80131ee <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80130c4:	69bb      	ldr	r3, [r7, #24]
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	2b02      	cmp	r3, #2
 80130ca:	f040 8092 	bne.w	80131f2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80130ce:	2300      	movs	r3, #0
 80130d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130d4:	e012      	b.n	80130fc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80130d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130da:	6a3a      	ldr	r2, [r7, #32]
 80130dc:	4413      	add	r3, r2
 80130de:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80130e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130e6:	69b9      	ldr	r1, [r7, #24]
 80130e8:	440b      	add	r3, r1
 80130ea:	7f1b      	ldrb	r3, [r3, #28]
 80130ec:	429a      	cmp	r2, r3
 80130ee:	f040 8082 	bne.w	80131f6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80130f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130f6:	3301      	adds	r3, #1
 80130f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130fc:	6a3b      	ldr	r3, [r7, #32]
 80130fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013102:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013106:	429a      	cmp	r2, r3
 8013108:	d203      	bcs.n	8013112 <dhcp_recv+0x8a>
 801310a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801310e:	2b05      	cmp	r3, #5
 8013110:	d9e1      	bls.n	80130d6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013112:	69bb      	ldr	r3, [r7, #24]
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	4618      	mov	r0, r3
 8013118:	f7f6 fd71 	bl	8009bfe <lwip_htonl>
 801311c:	4602      	mov	r2, r0
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	429a      	cmp	r2, r3
 8013124:	d169      	bne.n	80131fa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013126:	69f9      	ldr	r1, [r7, #28]
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f7ff fcd9 	bl	8012ae0 <dhcp_parse_reply>
 801312e:	4603      	mov	r3, r0
 8013130:	2b00      	cmp	r3, #0
 8013132:	d164      	bne.n	80131fe <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013134:	4b39      	ldr	r3, [pc, #228]	; (801321c <dhcp_recv+0x194>)
 8013136:	785b      	ldrb	r3, [r3, #1]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d062      	beq.n	8013202 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013142:	4b37      	ldr	r3, [pc, #220]	; (8013220 <dhcp_recv+0x198>)
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013148:	7cfb      	ldrb	r3, [r7, #19]
 801314a:	2b05      	cmp	r3, #5
 801314c:	d12a      	bne.n	80131a4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	795b      	ldrb	r3, [r3, #5]
 8013152:	2b01      	cmp	r3, #1
 8013154:	d112      	bne.n	801317c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013156:	6979      	ldr	r1, [r7, #20]
 8013158:	6a38      	ldr	r0, [r7, #32]
 801315a:	f7fe fe17 	bl	8011d8c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801315e:	6a3b      	ldr	r3, [r7, #32]
 8013160:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013164:	f003 0308 	and.w	r3, r3, #8
 8013168:	2b00      	cmp	r3, #0
 801316a:	d003      	beq.n	8013174 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801316c:	6a38      	ldr	r0, [r7, #32]
 801316e:	f7fe fb87 	bl	8011880 <dhcp_check>
 8013172:	e049      	b.n	8013208 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013174:	6a38      	ldr	r0, [r7, #32]
 8013176:	f7ff f867 	bl	8012248 <dhcp_bind>
 801317a:	e045      	b.n	8013208 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	795b      	ldrb	r3, [r3, #5]
 8013180:	2b03      	cmp	r3, #3
 8013182:	d007      	beq.n	8013194 <dhcp_recv+0x10c>
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	795b      	ldrb	r3, [r3, #5]
 8013188:	2b04      	cmp	r3, #4
 801318a:	d003      	beq.n	8013194 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013190:	2b05      	cmp	r3, #5
 8013192:	d139      	bne.n	8013208 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8013194:	6979      	ldr	r1, [r7, #20]
 8013196:	6a38      	ldr	r0, [r7, #32]
 8013198:	f7fe fdf8 	bl	8011d8c <dhcp_handle_ack>
      dhcp_bind(netif);
 801319c:	6a38      	ldr	r0, [r7, #32]
 801319e:	f7ff f853 	bl	8012248 <dhcp_bind>
 80131a2:	e031      	b.n	8013208 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80131a4:	7cfb      	ldrb	r3, [r7, #19]
 80131a6:	2b06      	cmp	r3, #6
 80131a8:	d113      	bne.n	80131d2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80131ae:	2b03      	cmp	r3, #3
 80131b0:	d00b      	beq.n	80131ca <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	795b      	ldrb	r3, [r3, #5]
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d007      	beq.n	80131ca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80131ba:	69fb      	ldr	r3, [r7, #28]
 80131bc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80131be:	2b04      	cmp	r3, #4
 80131c0:	d003      	beq.n	80131ca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	795b      	ldrb	r3, [r3, #5]
 80131c6:	2b05      	cmp	r3, #5
 80131c8:	d103      	bne.n	80131d2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80131ca:	6a38      	ldr	r0, [r7, #32]
 80131cc:	f7fe fb3e 	bl	801184c <dhcp_handle_nak>
 80131d0:	e01a      	b.n	8013208 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80131d2:	7cfb      	ldrb	r3, [r7, #19]
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d116      	bne.n	8013206 <dhcp_recv+0x17e>
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	795b      	ldrb	r3, [r3, #5]
 80131dc:	2b06      	cmp	r3, #6
 80131de:	d112      	bne.n	8013206 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80131e0:	6979      	ldr	r1, [r7, #20]
 80131e2:	6a38      	ldr	r0, [r7, #32]
 80131e4:	f7fe fb80 	bl	80118e8 <dhcp_handle_offer>
 80131e8:	e00e      	b.n	8013208 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80131ea:	bf00      	nop
 80131ec:	e00c      	b.n	8013208 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80131ee:	bf00      	nop
 80131f0:	e00a      	b.n	8013208 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80131f2:	bf00      	nop
 80131f4:	e008      	b.n	8013208 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80131f6:	bf00      	nop
 80131f8:	e006      	b.n	8013208 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80131fa:	bf00      	nop
 80131fc:	e004      	b.n	8013208 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80131fe:	bf00      	nop
 8013200:	e002      	b.n	8013208 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013202:	bf00      	nop
 8013204:	e000      	b.n	8013208 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013206:	bf00      	nop
  pbuf_free(p);
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f7f8 f8e5 	bl	800b3d8 <pbuf_free>
}
 801320e:	bf00      	nop
 8013210:	3728      	adds	r7, #40	; 0x28
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	20005720 	.word	0x20005720
 801321c:	200086dc 	.word	0x200086dc
 8013220:	200086bc 	.word	0x200086bc

08013224 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b088      	sub	sp, #32
 8013228:	af00      	add	r7, sp, #0
 801322a:	60f8      	str	r0, [r7, #12]
 801322c:	60b9      	str	r1, [r7, #8]
 801322e:	603b      	str	r3, [r7, #0]
 8013230:	4613      	mov	r3, r2
 8013232:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d108      	bne.n	801324c <dhcp_create_msg+0x28>
 801323a:	4b5f      	ldr	r3, [pc, #380]	; (80133b8 <dhcp_create_msg+0x194>)
 801323c:	f240 7269 	movw	r2, #1897	; 0x769
 8013240:	495e      	ldr	r1, [pc, #376]	; (80133bc <dhcp_create_msg+0x198>)
 8013242:	485f      	ldr	r0, [pc, #380]	; (80133c0 <dhcp_create_msg+0x19c>)
 8013244:	f002 fc70 	bl	8015b28 <iprintf>
 8013248:	2300      	movs	r3, #0
 801324a:	e0b1      	b.n	80133b0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d108      	bne.n	8013264 <dhcp_create_msg+0x40>
 8013252:	4b59      	ldr	r3, [pc, #356]	; (80133b8 <dhcp_create_msg+0x194>)
 8013254:	f240 726a 	movw	r2, #1898	; 0x76a
 8013258:	495a      	ldr	r1, [pc, #360]	; (80133c4 <dhcp_create_msg+0x1a0>)
 801325a:	4859      	ldr	r0, [pc, #356]	; (80133c0 <dhcp_create_msg+0x19c>)
 801325c:	f002 fc64 	bl	8015b28 <iprintf>
 8013260:	2300      	movs	r3, #0
 8013262:	e0a5      	b.n	80133b0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013264:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013268:	f44f 719a 	mov.w	r1, #308	; 0x134
 801326c:	2036      	movs	r0, #54	; 0x36
 801326e:	f7f7 fdcf 	bl	800ae10 <pbuf_alloc>
 8013272:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013274:	69bb      	ldr	r3, [r7, #24]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d101      	bne.n	801327e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801327a:	2300      	movs	r3, #0
 801327c:	e098      	b.n	80133b0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	895b      	ldrh	r3, [r3, #10]
 8013282:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013286:	d206      	bcs.n	8013296 <dhcp_create_msg+0x72>
 8013288:	4b4b      	ldr	r3, [pc, #300]	; (80133b8 <dhcp_create_msg+0x194>)
 801328a:	f240 7271 	movw	r2, #1905	; 0x771
 801328e:	494e      	ldr	r1, [pc, #312]	; (80133c8 <dhcp_create_msg+0x1a4>)
 8013290:	484b      	ldr	r0, [pc, #300]	; (80133c0 <dhcp_create_msg+0x19c>)
 8013292:	f002 fc49 	bl	8015b28 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013296:	79fb      	ldrb	r3, [r7, #7]
 8013298:	2b03      	cmp	r3, #3
 801329a:	d103      	bne.n	80132a4 <dhcp_create_msg+0x80>
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	795b      	ldrb	r3, [r3, #5]
 80132a0:	2b03      	cmp	r3, #3
 80132a2:	d10d      	bne.n	80132c0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	799b      	ldrb	r3, [r3, #6]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d105      	bne.n	80132b8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80132ac:	f002 fc54 	bl	8015b58 <rand>
 80132b0:	4603      	mov	r3, r0
 80132b2:	461a      	mov	r2, r3
 80132b4:	4b45      	ldr	r3, [pc, #276]	; (80133cc <dhcp_create_msg+0x1a8>)
 80132b6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80132b8:	4b44      	ldr	r3, [pc, #272]	; (80133cc <dhcp_create_msg+0x1a8>)
 80132ba:	681a      	ldr	r2, [r3, #0]
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80132c0:	69bb      	ldr	r3, [r7, #24]
 80132c2:	685b      	ldr	r3, [r3, #4]
 80132c4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80132c6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80132ca:	2100      	movs	r1, #0
 80132cc:	6978      	ldr	r0, [r7, #20]
 80132ce:	f002 fc23 	bl	8015b18 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	2201      	movs	r2, #1
 80132d6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	2201      	movs	r2, #1
 80132dc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7f6 fc86 	bl	8009bfe <lwip_htonl>
 80132f2:	4602      	mov	r2, r0
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80132f8:	79fb      	ldrb	r3, [r7, #7]
 80132fa:	2b08      	cmp	r3, #8
 80132fc:	d010      	beq.n	8013320 <dhcp_create_msg+0xfc>
 80132fe:	79fb      	ldrb	r3, [r7, #7]
 8013300:	2b04      	cmp	r3, #4
 8013302:	d00d      	beq.n	8013320 <dhcp_create_msg+0xfc>
 8013304:	79fb      	ldrb	r3, [r7, #7]
 8013306:	2b07      	cmp	r3, #7
 8013308:	d00a      	beq.n	8013320 <dhcp_create_msg+0xfc>
 801330a:	79fb      	ldrb	r3, [r7, #7]
 801330c:	2b03      	cmp	r3, #3
 801330e:	d10c      	bne.n	801332a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013314:	2b05      	cmp	r3, #5
 8013316:	d003      	beq.n	8013320 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	795b      	ldrb	r3, [r3, #5]
 801331c:	2b04      	cmp	r3, #4
 801331e:	d104      	bne.n	801332a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	3304      	adds	r3, #4
 8013324:	681a      	ldr	r2, [r3, #0]
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801332a:	2300      	movs	r3, #0
 801332c:	83fb      	strh	r3, [r7, #30]
 801332e:	e00c      	b.n	801334a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013330:	8bfa      	ldrh	r2, [r7, #30]
 8013332:	8bfb      	ldrh	r3, [r7, #30]
 8013334:	68f9      	ldr	r1, [r7, #12]
 8013336:	440a      	add	r2, r1
 8013338:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801333c:	697a      	ldr	r2, [r7, #20]
 801333e:	4413      	add	r3, r2
 8013340:	460a      	mov	r2, r1
 8013342:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013344:	8bfb      	ldrh	r3, [r7, #30]
 8013346:	3301      	adds	r3, #1
 8013348:	83fb      	strh	r3, [r7, #30]
 801334a:	8bfb      	ldrh	r3, [r7, #30]
 801334c:	2b05      	cmp	r3, #5
 801334e:	d9ef      	bls.n	8013330 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	2200      	movs	r2, #0
 8013354:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013358:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801335c:	2200      	movs	r2, #0
 801335e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013362:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013366:	2200      	movs	r2, #0
 8013368:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801336c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013370:	2200      	movs	r2, #0
 8013372:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013376:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013380:	2301      	movs	r3, #1
 8013382:	2235      	movs	r2, #53	; 0x35
 8013384:	2000      	movs	r0, #0
 8013386:	f7ff fadb 	bl	8012940 <dhcp_option>
 801338a:	4603      	mov	r3, r0
 801338c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013394:	79fa      	ldrb	r2, [r7, #7]
 8013396:	8a7b      	ldrh	r3, [r7, #18]
 8013398:	4618      	mov	r0, r3
 801339a:	f7ff fb05 	bl	80129a8 <dhcp_option_byte>
 801339e:	4603      	mov	r3, r0
 80133a0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d002      	beq.n	80133ae <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	8a7a      	ldrh	r2, [r7, #18]
 80133ac:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80133ae:	69bb      	ldr	r3, [r7, #24]
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	3720      	adds	r7, #32
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}
 80133b8:	08018f04 	.word	0x08018f04
 80133bc:	08019224 	.word	0x08019224
 80133c0:	08018f64 	.word	0x08018f64
 80133c4:	08019244 	.word	0x08019244
 80133c8:	08019264 	.word	0x08019264
 80133cc:	200086ec 	.word	0x200086ec

080133d0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b084      	sub	sp, #16
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	4603      	mov	r3, r0
 80133d8:	60b9      	str	r1, [r7, #8]
 80133da:	607a      	str	r2, [r7, #4]
 80133dc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80133de:	89fb      	ldrh	r3, [r7, #14]
 80133e0:	1c5a      	adds	r2, r3, #1
 80133e2:	81fa      	strh	r2, [r7, #14]
 80133e4:	461a      	mov	r2, r3
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	4413      	add	r3, r2
 80133ea:	22ff      	movs	r2, #255	; 0xff
 80133ec:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80133ee:	e007      	b.n	8013400 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80133f0:	89fb      	ldrh	r3, [r7, #14]
 80133f2:	1c5a      	adds	r2, r3, #1
 80133f4:	81fa      	strh	r2, [r7, #14]
 80133f6:	461a      	mov	r2, r3
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	4413      	add	r3, r2
 80133fc:	2200      	movs	r2, #0
 80133fe:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013400:	89fb      	ldrh	r3, [r7, #14]
 8013402:	2b43      	cmp	r3, #67	; 0x43
 8013404:	d904      	bls.n	8013410 <dhcp_option_trailer+0x40>
 8013406:	89fb      	ldrh	r3, [r7, #14]
 8013408:	f003 0303 	and.w	r3, r3, #3
 801340c:	2b00      	cmp	r3, #0
 801340e:	d002      	beq.n	8013416 <dhcp_option_trailer+0x46>
 8013410:	89fb      	ldrh	r3, [r7, #14]
 8013412:	2b43      	cmp	r3, #67	; 0x43
 8013414:	d9ec      	bls.n	80133f0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013416:	89fb      	ldrh	r3, [r7, #14]
 8013418:	33f0      	adds	r3, #240	; 0xf0
 801341a:	b29b      	uxth	r3, r3
 801341c:	4619      	mov	r1, r3
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f7f7 fe54 	bl	800b0cc <pbuf_realloc>
}
 8013424:	bf00      	nop
 8013426:	3710      	adds	r7, #16
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801342c:	b480      	push	{r7}
 801342e:	b085      	sub	sp, #20
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d017      	beq.n	801346a <dhcp_supplied_address+0x3e>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801343e:	2b00      	cmp	r3, #0
 8013440:	d013      	beq.n	801346a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013446:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	795b      	ldrb	r3, [r3, #5]
 801344c:	2b0a      	cmp	r3, #10
 801344e:	d007      	beq.n	8013460 <dhcp_supplied_address+0x34>
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	795b      	ldrb	r3, [r3, #5]
 8013454:	2b05      	cmp	r3, #5
 8013456:	d003      	beq.n	8013460 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801345c:	2b04      	cmp	r3, #4
 801345e:	d101      	bne.n	8013464 <dhcp_supplied_address+0x38>
 8013460:	2301      	movs	r3, #1
 8013462:	e000      	b.n	8013466 <dhcp_supplied_address+0x3a>
 8013464:	2300      	movs	r3, #0
 8013466:	b2db      	uxtb	r3, r3
 8013468:	e000      	b.n	801346c <dhcp_supplied_address+0x40>
  }
  return 0;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3714      	adds	r7, #20
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr

08013478 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013480:	4915      	ldr	r1, [pc, #84]	; (80134d8 <etharp_free_entry+0x60>)
 8013482:	687a      	ldr	r2, [r7, #4]
 8013484:	4613      	mov	r3, r2
 8013486:	005b      	lsls	r3, r3, #1
 8013488:	4413      	add	r3, r2
 801348a:	00db      	lsls	r3, r3, #3
 801348c:	440b      	add	r3, r1
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d013      	beq.n	80134bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013494:	4910      	ldr	r1, [pc, #64]	; (80134d8 <etharp_free_entry+0x60>)
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	4613      	mov	r3, r2
 801349a:	005b      	lsls	r3, r3, #1
 801349c:	4413      	add	r3, r2
 801349e:	00db      	lsls	r3, r3, #3
 80134a0:	440b      	add	r3, r1
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7f7 ff97 	bl	800b3d8 <pbuf_free>
    arp_table[i].q = NULL;
 80134aa:	490b      	ldr	r1, [pc, #44]	; (80134d8 <etharp_free_entry+0x60>)
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	4613      	mov	r3, r2
 80134b0:	005b      	lsls	r3, r3, #1
 80134b2:	4413      	add	r3, r2
 80134b4:	00db      	lsls	r3, r3, #3
 80134b6:	440b      	add	r3, r1
 80134b8:	2200      	movs	r2, #0
 80134ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80134bc:	4906      	ldr	r1, [pc, #24]	; (80134d8 <etharp_free_entry+0x60>)
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	4613      	mov	r3, r2
 80134c2:	005b      	lsls	r3, r3, #1
 80134c4:	4413      	add	r3, r2
 80134c6:	00db      	lsls	r3, r3, #3
 80134c8:	440b      	add	r3, r1
 80134ca:	3314      	adds	r3, #20
 80134cc:	2200      	movs	r2, #0
 80134ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80134d0:	bf00      	nop
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	200086f0 	.word	0x200086f0

080134dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80134e2:	2300      	movs	r3, #0
 80134e4:	607b      	str	r3, [r7, #4]
 80134e6:	e096      	b.n	8013616 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80134e8:	494f      	ldr	r1, [pc, #316]	; (8013628 <etharp_tmr+0x14c>)
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	4613      	mov	r3, r2
 80134ee:	005b      	lsls	r3, r3, #1
 80134f0:	4413      	add	r3, r2
 80134f2:	00db      	lsls	r3, r3, #3
 80134f4:	440b      	add	r3, r1
 80134f6:	3314      	adds	r3, #20
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80134fc:	78fb      	ldrb	r3, [r7, #3]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f000 8086 	beq.w	8013610 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013504:	4948      	ldr	r1, [pc, #288]	; (8013628 <etharp_tmr+0x14c>)
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	4613      	mov	r3, r2
 801350a:	005b      	lsls	r3, r3, #1
 801350c:	4413      	add	r3, r2
 801350e:	00db      	lsls	r3, r3, #3
 8013510:	440b      	add	r3, r1
 8013512:	3312      	adds	r3, #18
 8013514:	881b      	ldrh	r3, [r3, #0]
 8013516:	3301      	adds	r3, #1
 8013518:	b298      	uxth	r0, r3
 801351a:	4943      	ldr	r1, [pc, #268]	; (8013628 <etharp_tmr+0x14c>)
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	4613      	mov	r3, r2
 8013520:	005b      	lsls	r3, r3, #1
 8013522:	4413      	add	r3, r2
 8013524:	00db      	lsls	r3, r3, #3
 8013526:	440b      	add	r3, r1
 8013528:	3312      	adds	r3, #18
 801352a:	4602      	mov	r2, r0
 801352c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801352e:	493e      	ldr	r1, [pc, #248]	; (8013628 <etharp_tmr+0x14c>)
 8013530:	687a      	ldr	r2, [r7, #4]
 8013532:	4613      	mov	r3, r2
 8013534:	005b      	lsls	r3, r3, #1
 8013536:	4413      	add	r3, r2
 8013538:	00db      	lsls	r3, r3, #3
 801353a:	440b      	add	r3, r1
 801353c:	3312      	adds	r3, #18
 801353e:	881b      	ldrh	r3, [r3, #0]
 8013540:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013544:	d215      	bcs.n	8013572 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013546:	4938      	ldr	r1, [pc, #224]	; (8013628 <etharp_tmr+0x14c>)
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	4613      	mov	r3, r2
 801354c:	005b      	lsls	r3, r3, #1
 801354e:	4413      	add	r3, r2
 8013550:	00db      	lsls	r3, r3, #3
 8013552:	440b      	add	r3, r1
 8013554:	3314      	adds	r3, #20
 8013556:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013558:	2b01      	cmp	r3, #1
 801355a:	d10e      	bne.n	801357a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801355c:	4932      	ldr	r1, [pc, #200]	; (8013628 <etharp_tmr+0x14c>)
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	4613      	mov	r3, r2
 8013562:	005b      	lsls	r3, r3, #1
 8013564:	4413      	add	r3, r2
 8013566:	00db      	lsls	r3, r3, #3
 8013568:	440b      	add	r3, r1
 801356a:	3312      	adds	r3, #18
 801356c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801356e:	2b04      	cmp	r3, #4
 8013570:	d903      	bls.n	801357a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f7ff ff80 	bl	8013478 <etharp_free_entry>
 8013578:	e04a      	b.n	8013610 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801357a:	492b      	ldr	r1, [pc, #172]	; (8013628 <etharp_tmr+0x14c>)
 801357c:	687a      	ldr	r2, [r7, #4]
 801357e:	4613      	mov	r3, r2
 8013580:	005b      	lsls	r3, r3, #1
 8013582:	4413      	add	r3, r2
 8013584:	00db      	lsls	r3, r3, #3
 8013586:	440b      	add	r3, r1
 8013588:	3314      	adds	r3, #20
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	2b03      	cmp	r3, #3
 801358e:	d10a      	bne.n	80135a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013590:	4925      	ldr	r1, [pc, #148]	; (8013628 <etharp_tmr+0x14c>)
 8013592:	687a      	ldr	r2, [r7, #4]
 8013594:	4613      	mov	r3, r2
 8013596:	005b      	lsls	r3, r3, #1
 8013598:	4413      	add	r3, r2
 801359a:	00db      	lsls	r3, r3, #3
 801359c:	440b      	add	r3, r1
 801359e:	3314      	adds	r3, #20
 80135a0:	2204      	movs	r2, #4
 80135a2:	701a      	strb	r2, [r3, #0]
 80135a4:	e034      	b.n	8013610 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80135a6:	4920      	ldr	r1, [pc, #128]	; (8013628 <etharp_tmr+0x14c>)
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	4613      	mov	r3, r2
 80135ac:	005b      	lsls	r3, r3, #1
 80135ae:	4413      	add	r3, r2
 80135b0:	00db      	lsls	r3, r3, #3
 80135b2:	440b      	add	r3, r1
 80135b4:	3314      	adds	r3, #20
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	2b04      	cmp	r3, #4
 80135ba:	d10a      	bne.n	80135d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80135bc:	491a      	ldr	r1, [pc, #104]	; (8013628 <etharp_tmr+0x14c>)
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	4613      	mov	r3, r2
 80135c2:	005b      	lsls	r3, r3, #1
 80135c4:	4413      	add	r3, r2
 80135c6:	00db      	lsls	r3, r3, #3
 80135c8:	440b      	add	r3, r1
 80135ca:	3314      	adds	r3, #20
 80135cc:	2202      	movs	r2, #2
 80135ce:	701a      	strb	r2, [r3, #0]
 80135d0:	e01e      	b.n	8013610 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80135d2:	4915      	ldr	r1, [pc, #84]	; (8013628 <etharp_tmr+0x14c>)
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	4613      	mov	r3, r2
 80135d8:	005b      	lsls	r3, r3, #1
 80135da:	4413      	add	r3, r2
 80135dc:	00db      	lsls	r3, r3, #3
 80135de:	440b      	add	r3, r1
 80135e0:	3314      	adds	r3, #20
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	2b01      	cmp	r3, #1
 80135e6:	d113      	bne.n	8013610 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80135e8:	490f      	ldr	r1, [pc, #60]	; (8013628 <etharp_tmr+0x14c>)
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	4613      	mov	r3, r2
 80135ee:	005b      	lsls	r3, r3, #1
 80135f0:	4413      	add	r3, r2
 80135f2:	00db      	lsls	r3, r3, #3
 80135f4:	440b      	add	r3, r1
 80135f6:	3308      	adds	r3, #8
 80135f8:	6818      	ldr	r0, [r3, #0]
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	4613      	mov	r3, r2
 80135fe:	005b      	lsls	r3, r3, #1
 8013600:	4413      	add	r3, r2
 8013602:	00db      	lsls	r3, r3, #3
 8013604:	4a08      	ldr	r2, [pc, #32]	; (8013628 <etharp_tmr+0x14c>)
 8013606:	4413      	add	r3, r2
 8013608:	3304      	adds	r3, #4
 801360a:	4619      	mov	r1, r3
 801360c:	f000 fe72 	bl	80142f4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	3301      	adds	r3, #1
 8013614:	607b      	str	r3, [r7, #4]
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2b09      	cmp	r3, #9
 801361a:	f77f af65 	ble.w	80134e8 <etharp_tmr+0xc>
      }
    }
  }
}
 801361e:	bf00      	nop
 8013620:	bf00      	nop
 8013622:	3708      	adds	r7, #8
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}
 8013628:	200086f0 	.word	0x200086f0

0801362c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b08a      	sub	sp, #40	; 0x28
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	460b      	mov	r3, r1
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801363a:	230a      	movs	r3, #10
 801363c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801363e:	230a      	movs	r3, #10
 8013640:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013642:	230a      	movs	r3, #10
 8013644:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013646:	2300      	movs	r3, #0
 8013648:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801364a:	230a      	movs	r3, #10
 801364c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	83bb      	strh	r3, [r7, #28]
 8013652:	2300      	movs	r3, #0
 8013654:	837b      	strh	r3, [r7, #26]
 8013656:	2300      	movs	r3, #0
 8013658:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801365a:	2300      	movs	r3, #0
 801365c:	843b      	strh	r3, [r7, #32]
 801365e:	e0ae      	b.n	80137be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013660:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013664:	49a6      	ldr	r1, [pc, #664]	; (8013900 <etharp_find_entry+0x2d4>)
 8013666:	4613      	mov	r3, r2
 8013668:	005b      	lsls	r3, r3, #1
 801366a:	4413      	add	r3, r2
 801366c:	00db      	lsls	r3, r3, #3
 801366e:	440b      	add	r3, r1
 8013670:	3314      	adds	r3, #20
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013676:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801367a:	2b0a      	cmp	r3, #10
 801367c:	d105      	bne.n	801368a <etharp_find_entry+0x5e>
 801367e:	7dfb      	ldrb	r3, [r7, #23]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d102      	bne.n	801368a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013684:	8c3b      	ldrh	r3, [r7, #32]
 8013686:	847b      	strh	r3, [r7, #34]	; 0x22
 8013688:	e095      	b.n	80137b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801368a:	7dfb      	ldrb	r3, [r7, #23]
 801368c:	2b00      	cmp	r3, #0
 801368e:	f000 8092 	beq.w	80137b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013692:	7dfb      	ldrb	r3, [r7, #23]
 8013694:	2b01      	cmp	r3, #1
 8013696:	d009      	beq.n	80136ac <etharp_find_entry+0x80>
 8013698:	7dfb      	ldrb	r3, [r7, #23]
 801369a:	2b01      	cmp	r3, #1
 801369c:	d806      	bhi.n	80136ac <etharp_find_entry+0x80>
 801369e:	4b99      	ldr	r3, [pc, #612]	; (8013904 <etharp_find_entry+0x2d8>)
 80136a0:	f240 1223 	movw	r2, #291	; 0x123
 80136a4:	4998      	ldr	r1, [pc, #608]	; (8013908 <etharp_find_entry+0x2dc>)
 80136a6:	4899      	ldr	r0, [pc, #612]	; (801390c <etharp_find_entry+0x2e0>)
 80136a8:	f002 fa3e 	bl	8015b28 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d020      	beq.n	80136f4 <etharp_find_entry+0xc8>
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6819      	ldr	r1, [r3, #0]
 80136b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136ba:	4891      	ldr	r0, [pc, #580]	; (8013900 <etharp_find_entry+0x2d4>)
 80136bc:	4613      	mov	r3, r2
 80136be:	005b      	lsls	r3, r3, #1
 80136c0:	4413      	add	r3, r2
 80136c2:	00db      	lsls	r3, r3, #3
 80136c4:	4403      	add	r3, r0
 80136c6:	3304      	adds	r3, #4
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	4299      	cmp	r1, r3
 80136cc:	d112      	bne.n	80136f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d00c      	beq.n	80136ee <etharp_find_entry+0xc2>
 80136d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136d8:	4989      	ldr	r1, [pc, #548]	; (8013900 <etharp_find_entry+0x2d4>)
 80136da:	4613      	mov	r3, r2
 80136dc:	005b      	lsls	r3, r3, #1
 80136de:	4413      	add	r3, r2
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	440b      	add	r3, r1
 80136e4:	3308      	adds	r3, #8
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d102      	bne.n	80136f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80136ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136f2:	e100      	b.n	80138f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80136f4:	7dfb      	ldrb	r3, [r7, #23]
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	d140      	bne.n	801377c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80136fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136fe:	4980      	ldr	r1, [pc, #512]	; (8013900 <etharp_find_entry+0x2d4>)
 8013700:	4613      	mov	r3, r2
 8013702:	005b      	lsls	r3, r3, #1
 8013704:	4413      	add	r3, r2
 8013706:	00db      	lsls	r3, r3, #3
 8013708:	440b      	add	r3, r1
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d01a      	beq.n	8013746 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013714:	497a      	ldr	r1, [pc, #488]	; (8013900 <etharp_find_entry+0x2d4>)
 8013716:	4613      	mov	r3, r2
 8013718:	005b      	lsls	r3, r3, #1
 801371a:	4413      	add	r3, r2
 801371c:	00db      	lsls	r3, r3, #3
 801371e:	440b      	add	r3, r1
 8013720:	3312      	adds	r3, #18
 8013722:	881b      	ldrh	r3, [r3, #0]
 8013724:	8bba      	ldrh	r2, [r7, #28]
 8013726:	429a      	cmp	r2, r3
 8013728:	d845      	bhi.n	80137b6 <etharp_find_entry+0x18a>
            old_queue = i;
 801372a:	8c3b      	ldrh	r3, [r7, #32]
 801372c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801372e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013732:	4973      	ldr	r1, [pc, #460]	; (8013900 <etharp_find_entry+0x2d4>)
 8013734:	4613      	mov	r3, r2
 8013736:	005b      	lsls	r3, r3, #1
 8013738:	4413      	add	r3, r2
 801373a:	00db      	lsls	r3, r3, #3
 801373c:	440b      	add	r3, r1
 801373e:	3312      	adds	r3, #18
 8013740:	881b      	ldrh	r3, [r3, #0]
 8013742:	83bb      	strh	r3, [r7, #28]
 8013744:	e037      	b.n	80137b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801374a:	496d      	ldr	r1, [pc, #436]	; (8013900 <etharp_find_entry+0x2d4>)
 801374c:	4613      	mov	r3, r2
 801374e:	005b      	lsls	r3, r3, #1
 8013750:	4413      	add	r3, r2
 8013752:	00db      	lsls	r3, r3, #3
 8013754:	440b      	add	r3, r1
 8013756:	3312      	adds	r3, #18
 8013758:	881b      	ldrh	r3, [r3, #0]
 801375a:	8b7a      	ldrh	r2, [r7, #26]
 801375c:	429a      	cmp	r2, r3
 801375e:	d82a      	bhi.n	80137b6 <etharp_find_entry+0x18a>
            old_pending = i;
 8013760:	8c3b      	ldrh	r3, [r7, #32]
 8013762:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013764:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013768:	4965      	ldr	r1, [pc, #404]	; (8013900 <etharp_find_entry+0x2d4>)
 801376a:	4613      	mov	r3, r2
 801376c:	005b      	lsls	r3, r3, #1
 801376e:	4413      	add	r3, r2
 8013770:	00db      	lsls	r3, r3, #3
 8013772:	440b      	add	r3, r1
 8013774:	3312      	adds	r3, #18
 8013776:	881b      	ldrh	r3, [r3, #0]
 8013778:	837b      	strh	r3, [r7, #26]
 801377a:	e01c      	b.n	80137b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801377c:	7dfb      	ldrb	r3, [r7, #23]
 801377e:	2b01      	cmp	r3, #1
 8013780:	d919      	bls.n	80137b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013782:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013786:	495e      	ldr	r1, [pc, #376]	; (8013900 <etharp_find_entry+0x2d4>)
 8013788:	4613      	mov	r3, r2
 801378a:	005b      	lsls	r3, r3, #1
 801378c:	4413      	add	r3, r2
 801378e:	00db      	lsls	r3, r3, #3
 8013790:	440b      	add	r3, r1
 8013792:	3312      	adds	r3, #18
 8013794:	881b      	ldrh	r3, [r3, #0]
 8013796:	8b3a      	ldrh	r2, [r7, #24]
 8013798:	429a      	cmp	r2, r3
 801379a:	d80c      	bhi.n	80137b6 <etharp_find_entry+0x18a>
            old_stable = i;
 801379c:	8c3b      	ldrh	r3, [r7, #32]
 801379e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80137a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137a4:	4956      	ldr	r1, [pc, #344]	; (8013900 <etharp_find_entry+0x2d4>)
 80137a6:	4613      	mov	r3, r2
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	4413      	add	r3, r2
 80137ac:	00db      	lsls	r3, r3, #3
 80137ae:	440b      	add	r3, r1
 80137b0:	3312      	adds	r3, #18
 80137b2:	881b      	ldrh	r3, [r3, #0]
 80137b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137b6:	8c3b      	ldrh	r3, [r7, #32]
 80137b8:	3301      	adds	r3, #1
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	843b      	strh	r3, [r7, #32]
 80137be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80137c2:	2b09      	cmp	r3, #9
 80137c4:	f77f af4c 	ble.w	8013660 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80137c8:	7afb      	ldrb	r3, [r7, #11]
 80137ca:	f003 0302 	and.w	r3, r3, #2
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d108      	bne.n	80137e4 <etharp_find_entry+0x1b8>
 80137d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137d6:	2b0a      	cmp	r3, #10
 80137d8:	d107      	bne.n	80137ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80137da:	7afb      	ldrb	r3, [r7, #11]
 80137dc:	f003 0301 	and.w	r3, r3, #1
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d102      	bne.n	80137ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80137e4:	f04f 33ff 	mov.w	r3, #4294967295
 80137e8:	e085      	b.n	80138f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80137ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137ee:	2b09      	cmp	r3, #9
 80137f0:	dc02      	bgt.n	80137f8 <etharp_find_entry+0x1cc>
    i = empty;
 80137f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137f4:	843b      	strh	r3, [r7, #32]
 80137f6:	e039      	b.n	801386c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80137f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80137fc:	2b09      	cmp	r3, #9
 80137fe:	dc14      	bgt.n	801382a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013802:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013804:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013808:	493d      	ldr	r1, [pc, #244]	; (8013900 <etharp_find_entry+0x2d4>)
 801380a:	4613      	mov	r3, r2
 801380c:	005b      	lsls	r3, r3, #1
 801380e:	4413      	add	r3, r2
 8013810:	00db      	lsls	r3, r3, #3
 8013812:	440b      	add	r3, r1
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d018      	beq.n	801384c <etharp_find_entry+0x220>
 801381a:	4b3a      	ldr	r3, [pc, #232]	; (8013904 <etharp_find_entry+0x2d8>)
 801381c:	f240 126d 	movw	r2, #365	; 0x16d
 8013820:	493b      	ldr	r1, [pc, #236]	; (8013910 <etharp_find_entry+0x2e4>)
 8013822:	483a      	ldr	r0, [pc, #232]	; (801390c <etharp_find_entry+0x2e0>)
 8013824:	f002 f980 	bl	8015b28 <iprintf>
 8013828:	e010      	b.n	801384c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801382a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801382e:	2b09      	cmp	r3, #9
 8013830:	dc02      	bgt.n	8013838 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013832:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013834:	843b      	strh	r3, [r7, #32]
 8013836:	e009      	b.n	801384c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013838:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801383c:	2b09      	cmp	r3, #9
 801383e:	dc02      	bgt.n	8013846 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013840:	8bfb      	ldrh	r3, [r7, #30]
 8013842:	843b      	strh	r3, [r7, #32]
 8013844:	e002      	b.n	801384c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013846:	f04f 33ff 	mov.w	r3, #4294967295
 801384a:	e054      	b.n	80138f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801384c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013850:	2b09      	cmp	r3, #9
 8013852:	dd06      	ble.n	8013862 <etharp_find_entry+0x236>
 8013854:	4b2b      	ldr	r3, [pc, #172]	; (8013904 <etharp_find_entry+0x2d8>)
 8013856:	f240 127f 	movw	r2, #383	; 0x17f
 801385a:	492e      	ldr	r1, [pc, #184]	; (8013914 <etharp_find_entry+0x2e8>)
 801385c:	482b      	ldr	r0, [pc, #172]	; (801390c <etharp_find_entry+0x2e0>)
 801385e:	f002 f963 	bl	8015b28 <iprintf>
    etharp_free_entry(i);
 8013862:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013866:	4618      	mov	r0, r3
 8013868:	f7ff fe06 	bl	8013478 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801386c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013870:	2b09      	cmp	r3, #9
 8013872:	dd06      	ble.n	8013882 <etharp_find_entry+0x256>
 8013874:	4b23      	ldr	r3, [pc, #140]	; (8013904 <etharp_find_entry+0x2d8>)
 8013876:	f240 1283 	movw	r2, #387	; 0x183
 801387a:	4926      	ldr	r1, [pc, #152]	; (8013914 <etharp_find_entry+0x2e8>)
 801387c:	4823      	ldr	r0, [pc, #140]	; (801390c <etharp_find_entry+0x2e0>)
 801387e:	f002 f953 	bl	8015b28 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013882:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013886:	491e      	ldr	r1, [pc, #120]	; (8013900 <etharp_find_entry+0x2d4>)
 8013888:	4613      	mov	r3, r2
 801388a:	005b      	lsls	r3, r3, #1
 801388c:	4413      	add	r3, r2
 801388e:	00db      	lsls	r3, r3, #3
 8013890:	440b      	add	r3, r1
 8013892:	3314      	adds	r3, #20
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d006      	beq.n	80138a8 <etharp_find_entry+0x27c>
 801389a:	4b1a      	ldr	r3, [pc, #104]	; (8013904 <etharp_find_entry+0x2d8>)
 801389c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80138a0:	491d      	ldr	r1, [pc, #116]	; (8013918 <etharp_find_entry+0x2ec>)
 80138a2:	481a      	ldr	r0, [pc, #104]	; (801390c <etharp_find_entry+0x2e0>)
 80138a4:	f002 f940 	bl	8015b28 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d00b      	beq.n	80138c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80138ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	6819      	ldr	r1, [r3, #0]
 80138b6:	4812      	ldr	r0, [pc, #72]	; (8013900 <etharp_find_entry+0x2d4>)
 80138b8:	4613      	mov	r3, r2
 80138ba:	005b      	lsls	r3, r3, #1
 80138bc:	4413      	add	r3, r2
 80138be:	00db      	lsls	r3, r3, #3
 80138c0:	4403      	add	r3, r0
 80138c2:	3304      	adds	r3, #4
 80138c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80138c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ca:	490d      	ldr	r1, [pc, #52]	; (8013900 <etharp_find_entry+0x2d4>)
 80138cc:	4613      	mov	r3, r2
 80138ce:	005b      	lsls	r3, r3, #1
 80138d0:	4413      	add	r3, r2
 80138d2:	00db      	lsls	r3, r3, #3
 80138d4:	440b      	add	r3, r1
 80138d6:	3312      	adds	r3, #18
 80138d8:	2200      	movs	r2, #0
 80138da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80138dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138e0:	4907      	ldr	r1, [pc, #28]	; (8013900 <etharp_find_entry+0x2d4>)
 80138e2:	4613      	mov	r3, r2
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	4413      	add	r3, r2
 80138e8:	00db      	lsls	r3, r3, #3
 80138ea:	440b      	add	r3, r1
 80138ec:	3308      	adds	r3, #8
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80138f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3728      	adds	r7, #40	; 0x28
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop
 8013900:	200086f0 	.word	0x200086f0
 8013904:	080192a4 	.word	0x080192a4
 8013908:	080192dc 	.word	0x080192dc
 801390c:	0801931c 	.word	0x0801931c
 8013910:	08019344 	.word	0x08019344
 8013914:	0801935c 	.word	0x0801935c
 8013918:	08019370 	.word	0x08019370

0801391c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b088      	sub	sp, #32
 8013920:	af02      	add	r7, sp, #8
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
 8013928:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013930:	2b06      	cmp	r3, #6
 8013932:	d006      	beq.n	8013942 <etharp_update_arp_entry+0x26>
 8013934:	4b48      	ldr	r3, [pc, #288]	; (8013a58 <etharp_update_arp_entry+0x13c>)
 8013936:	f240 12a9 	movw	r2, #425	; 0x1a9
 801393a:	4948      	ldr	r1, [pc, #288]	; (8013a5c <etharp_update_arp_entry+0x140>)
 801393c:	4848      	ldr	r0, [pc, #288]	; (8013a60 <etharp_update_arp_entry+0x144>)
 801393e:	f002 f8f3 	bl	8015b28 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d012      	beq.n	801396e <etharp_update_arp_entry+0x52>
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00e      	beq.n	801396e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	68f9      	ldr	r1, [r7, #12]
 8013956:	4618      	mov	r0, r3
 8013958:	f001 f946 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 801395c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801395e:	2b00      	cmp	r3, #0
 8013960:	d105      	bne.n	801396e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801396a:	2be0      	cmp	r3, #224	; 0xe0
 801396c:	d102      	bne.n	8013974 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801396e:	f06f 030f 	mvn.w	r3, #15
 8013972:	e06c      	b.n	8013a4e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013974:	78fb      	ldrb	r3, [r7, #3]
 8013976:	68fa      	ldr	r2, [r7, #12]
 8013978:	4619      	mov	r1, r3
 801397a:	68b8      	ldr	r0, [r7, #8]
 801397c:	f7ff fe56 	bl	801362c <etharp_find_entry>
 8013980:	4603      	mov	r3, r0
 8013982:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013984:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013988:	2b00      	cmp	r3, #0
 801398a:	da02      	bge.n	8013992 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801398c:	8afb      	ldrh	r3, [r7, #22]
 801398e:	b25b      	sxtb	r3, r3
 8013990:	e05d      	b.n	8013a4e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013992:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013996:	4933      	ldr	r1, [pc, #204]	; (8013a64 <etharp_update_arp_entry+0x148>)
 8013998:	4613      	mov	r3, r2
 801399a:	005b      	lsls	r3, r3, #1
 801399c:	4413      	add	r3, r2
 801399e:	00db      	lsls	r3, r3, #3
 80139a0:	440b      	add	r3, r1
 80139a2:	3314      	adds	r3, #20
 80139a4:	2202      	movs	r2, #2
 80139a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80139a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139ac:	492d      	ldr	r1, [pc, #180]	; (8013a64 <etharp_update_arp_entry+0x148>)
 80139ae:	4613      	mov	r3, r2
 80139b0:	005b      	lsls	r3, r3, #1
 80139b2:	4413      	add	r3, r2
 80139b4:	00db      	lsls	r3, r3, #3
 80139b6:	440b      	add	r3, r1
 80139b8:	3308      	adds	r3, #8
 80139ba:	68fa      	ldr	r2, [r7, #12]
 80139bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80139be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139c2:	4613      	mov	r3, r2
 80139c4:	005b      	lsls	r3, r3, #1
 80139c6:	4413      	add	r3, r2
 80139c8:	00db      	lsls	r3, r3, #3
 80139ca:	3308      	adds	r3, #8
 80139cc:	4a25      	ldr	r2, [pc, #148]	; (8013a64 <etharp_update_arp_entry+0x148>)
 80139ce:	4413      	add	r3, r2
 80139d0:	3304      	adds	r3, #4
 80139d2:	2206      	movs	r2, #6
 80139d4:	6879      	ldr	r1, [r7, #4]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f002 f890 	bl	8015afc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80139dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139e0:	4920      	ldr	r1, [pc, #128]	; (8013a64 <etharp_update_arp_entry+0x148>)
 80139e2:	4613      	mov	r3, r2
 80139e4:	005b      	lsls	r3, r3, #1
 80139e6:	4413      	add	r3, r2
 80139e8:	00db      	lsls	r3, r3, #3
 80139ea:	440b      	add	r3, r1
 80139ec:	3312      	adds	r3, #18
 80139ee:	2200      	movs	r2, #0
 80139f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80139f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139f6:	491b      	ldr	r1, [pc, #108]	; (8013a64 <etharp_update_arp_entry+0x148>)
 80139f8:	4613      	mov	r3, r2
 80139fa:	005b      	lsls	r3, r3, #1
 80139fc:	4413      	add	r3, r2
 80139fe:	00db      	lsls	r3, r3, #3
 8013a00:	440b      	add	r3, r1
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d021      	beq.n	8013a4c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013a08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a0c:	4915      	ldr	r1, [pc, #84]	; (8013a64 <etharp_update_arp_entry+0x148>)
 8013a0e:	4613      	mov	r3, r2
 8013a10:	005b      	lsls	r3, r3, #1
 8013a12:	4413      	add	r3, r2
 8013a14:	00db      	lsls	r3, r3, #3
 8013a16:	440b      	add	r3, r1
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013a1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a20:	4910      	ldr	r1, [pc, #64]	; (8013a64 <etharp_update_arp_entry+0x148>)
 8013a22:	4613      	mov	r3, r2
 8013a24:	005b      	lsls	r3, r3, #1
 8013a26:	4413      	add	r3, r2
 8013a28:	00db      	lsls	r3, r3, #3
 8013a2a:	440b      	add	r3, r1
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a3a:	9300      	str	r3, [sp, #0]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6939      	ldr	r1, [r7, #16]
 8013a40:	68f8      	ldr	r0, [r7, #12]
 8013a42:	f001 ffdf 	bl	8015a04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013a46:	6938      	ldr	r0, [r7, #16]
 8013a48:	f7f7 fcc6 	bl	800b3d8 <pbuf_free>
  }
  return ERR_OK;
 8013a4c:	2300      	movs	r3, #0
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3718      	adds	r7, #24
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	080192a4 	.word	0x080192a4
 8013a5c:	0801939c 	.word	0x0801939c
 8013a60:	0801931c 	.word	0x0801931c
 8013a64:	200086f0 	.word	0x200086f0

08013a68 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a70:	2300      	movs	r3, #0
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	e01e      	b.n	8013ab4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013a76:	4913      	ldr	r1, [pc, #76]	; (8013ac4 <etharp_cleanup_netif+0x5c>)
 8013a78:	68fa      	ldr	r2, [r7, #12]
 8013a7a:	4613      	mov	r3, r2
 8013a7c:	005b      	lsls	r3, r3, #1
 8013a7e:	4413      	add	r3, r2
 8013a80:	00db      	lsls	r3, r3, #3
 8013a82:	440b      	add	r3, r1
 8013a84:	3314      	adds	r3, #20
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013a8a:	7afb      	ldrb	r3, [r7, #11]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d00e      	beq.n	8013aae <etharp_cleanup_netif+0x46>
 8013a90:	490c      	ldr	r1, [pc, #48]	; (8013ac4 <etharp_cleanup_netif+0x5c>)
 8013a92:	68fa      	ldr	r2, [r7, #12]
 8013a94:	4613      	mov	r3, r2
 8013a96:	005b      	lsls	r3, r3, #1
 8013a98:	4413      	add	r3, r2
 8013a9a:	00db      	lsls	r3, r3, #3
 8013a9c:	440b      	add	r3, r1
 8013a9e:	3308      	adds	r3, #8
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d102      	bne.n	8013aae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013aa8:	68f8      	ldr	r0, [r7, #12]
 8013aaa:	f7ff fce5 	bl	8013478 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	60fb      	str	r3, [r7, #12]
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2b09      	cmp	r3, #9
 8013ab8:	dddd      	ble.n	8013a76 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013aba:	bf00      	nop
 8013abc:	bf00      	nop
 8013abe:	3710      	adds	r7, #16
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	200086f0 	.word	0x200086f0

08013ac8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013ac8:	b5b0      	push	{r4, r5, r7, lr}
 8013aca:	b08a      	sub	sp, #40	; 0x28
 8013acc:	af04      	add	r7, sp, #16
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d107      	bne.n	8013ae8 <etharp_input+0x20>
 8013ad8:	4b3f      	ldr	r3, [pc, #252]	; (8013bd8 <etharp_input+0x110>)
 8013ada:	f240 228a 	movw	r2, #650	; 0x28a
 8013ade:	493f      	ldr	r1, [pc, #252]	; (8013bdc <etharp_input+0x114>)
 8013ae0:	483f      	ldr	r0, [pc, #252]	; (8013be0 <etharp_input+0x118>)
 8013ae2:	f002 f821 	bl	8015b28 <iprintf>
 8013ae6:	e074      	b.n	8013bd2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	685b      	ldr	r3, [r3, #4]
 8013aec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	881b      	ldrh	r3, [r3, #0]
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013af8:	d10c      	bne.n	8013b14 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013afe:	2b06      	cmp	r3, #6
 8013b00:	d108      	bne.n	8013b14 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b06:	2b04      	cmp	r3, #4
 8013b08:	d104      	bne.n	8013b14 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	885b      	ldrh	r3, [r3, #2]
 8013b0e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b10:	2b08      	cmp	r3, #8
 8013b12:	d003      	beq.n	8013b1c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f7f7 fc5f 	bl	800b3d8 <pbuf_free>
    return;
 8013b1a:	e05a      	b.n	8013bd2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	330e      	adds	r3, #14
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	3318      	adds	r3, #24
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	3304      	adds	r3, #4
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d102      	bne.n	8013b3c <etharp_input+0x74>
    for_us = 0;
 8013b36:	2300      	movs	r3, #0
 8013b38:	75fb      	strb	r3, [r7, #23]
 8013b3a:	e009      	b.n	8013b50 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013b3c:	68ba      	ldr	r2, [r7, #8]
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	3304      	adds	r3, #4
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	bf0c      	ite	eq
 8013b48:	2301      	moveq	r3, #1
 8013b4a:	2300      	movne	r3, #0
 8013b4c:	b2db      	uxtb	r3, r3
 8013b4e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013b50:	693b      	ldr	r3, [r7, #16]
 8013b52:	f103 0208 	add.w	r2, r3, #8
 8013b56:	7dfb      	ldrb	r3, [r7, #23]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d001      	beq.n	8013b60 <etharp_input+0x98>
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	e000      	b.n	8013b62 <etharp_input+0x9a>
 8013b60:	2302      	movs	r3, #2
 8013b62:	f107 010c 	add.w	r1, r7, #12
 8013b66:	6838      	ldr	r0, [r7, #0]
 8013b68:	f7ff fed8 	bl	801391c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	88db      	ldrh	r3, [r3, #6]
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b76:	d003      	beq.n	8013b80 <etharp_input+0xb8>
 8013b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b7c:	d01e      	beq.n	8013bbc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013b7e:	e025      	b.n	8013bcc <etharp_input+0x104>
      if (for_us) {
 8013b80:	7dfb      	ldrb	r3, [r7, #23]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d021      	beq.n	8013bca <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013b9c:	693a      	ldr	r2, [r7, #16]
 8013b9e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013ba0:	2102      	movs	r1, #2
 8013ba2:	9103      	str	r1, [sp, #12]
 8013ba4:	f107 010c 	add.w	r1, r7, #12
 8013ba8:	9102      	str	r1, [sp, #8]
 8013baa:	9201      	str	r2, [sp, #4]
 8013bac:	9300      	str	r3, [sp, #0]
 8013bae:	462b      	mov	r3, r5
 8013bb0:	4622      	mov	r2, r4
 8013bb2:	4601      	mov	r1, r0
 8013bb4:	6838      	ldr	r0, [r7, #0]
 8013bb6:	f000 faef 	bl	8014198 <etharp_raw>
      break;
 8013bba:	e006      	b.n	8013bca <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8013bbc:	f107 030c 	add.w	r3, r7, #12
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	6838      	ldr	r0, [r7, #0]
 8013bc4:	f7fe f9fc 	bl	8011fc0 <dhcp_arp_reply>
      break;
 8013bc8:	e000      	b.n	8013bcc <etharp_input+0x104>
      break;
 8013bca:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f7f7 fc03 	bl	800b3d8 <pbuf_free>
}
 8013bd2:	3718      	adds	r7, #24
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8013bd8:	080192a4 	.word	0x080192a4
 8013bdc:	080193f4 	.word	0x080193f4
 8013be0:	0801931c 	.word	0x0801931c

08013be4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af02      	add	r7, sp, #8
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	4613      	mov	r3, r2
 8013bf0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013bf2:	79fa      	ldrb	r2, [r7, #7]
 8013bf4:	4944      	ldr	r1, [pc, #272]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013bf6:	4613      	mov	r3, r2
 8013bf8:	005b      	lsls	r3, r3, #1
 8013bfa:	4413      	add	r3, r2
 8013bfc:	00db      	lsls	r3, r3, #3
 8013bfe:	440b      	add	r3, r1
 8013c00:	3314      	adds	r3, #20
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d806      	bhi.n	8013c16 <etharp_output_to_arp_index+0x32>
 8013c08:	4b40      	ldr	r3, [pc, #256]	; (8013d0c <etharp_output_to_arp_index+0x128>)
 8013c0a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013c0e:	4940      	ldr	r1, [pc, #256]	; (8013d10 <etharp_output_to_arp_index+0x12c>)
 8013c10:	4840      	ldr	r0, [pc, #256]	; (8013d14 <etharp_output_to_arp_index+0x130>)
 8013c12:	f001 ff89 	bl	8015b28 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013c16:	79fa      	ldrb	r2, [r7, #7]
 8013c18:	493b      	ldr	r1, [pc, #236]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	005b      	lsls	r3, r3, #1
 8013c1e:	4413      	add	r3, r2
 8013c20:	00db      	lsls	r3, r3, #3
 8013c22:	440b      	add	r3, r1
 8013c24:	3314      	adds	r3, #20
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d153      	bne.n	8013cd4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013c2c:	79fa      	ldrb	r2, [r7, #7]
 8013c2e:	4936      	ldr	r1, [pc, #216]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c30:	4613      	mov	r3, r2
 8013c32:	005b      	lsls	r3, r3, #1
 8013c34:	4413      	add	r3, r2
 8013c36:	00db      	lsls	r3, r3, #3
 8013c38:	440b      	add	r3, r1
 8013c3a:	3312      	adds	r3, #18
 8013c3c:	881b      	ldrh	r3, [r3, #0]
 8013c3e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013c42:	d919      	bls.n	8013c78 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013c44:	79fa      	ldrb	r2, [r7, #7]
 8013c46:	4613      	mov	r3, r2
 8013c48:	005b      	lsls	r3, r3, #1
 8013c4a:	4413      	add	r3, r2
 8013c4c:	00db      	lsls	r3, r3, #3
 8013c4e:	4a2e      	ldr	r2, [pc, #184]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c50:	4413      	add	r3, r2
 8013c52:	3304      	adds	r3, #4
 8013c54:	4619      	mov	r1, r3
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f000 fb4c 	bl	80142f4 <etharp_request>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d138      	bne.n	8013cd4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013c62:	79fa      	ldrb	r2, [r7, #7]
 8013c64:	4928      	ldr	r1, [pc, #160]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c66:	4613      	mov	r3, r2
 8013c68:	005b      	lsls	r3, r3, #1
 8013c6a:	4413      	add	r3, r2
 8013c6c:	00db      	lsls	r3, r3, #3
 8013c6e:	440b      	add	r3, r1
 8013c70:	3314      	adds	r3, #20
 8013c72:	2203      	movs	r2, #3
 8013c74:	701a      	strb	r2, [r3, #0]
 8013c76:	e02d      	b.n	8013cd4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013c78:	79fa      	ldrb	r2, [r7, #7]
 8013c7a:	4923      	ldr	r1, [pc, #140]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	005b      	lsls	r3, r3, #1
 8013c80:	4413      	add	r3, r2
 8013c82:	00db      	lsls	r3, r3, #3
 8013c84:	440b      	add	r3, r1
 8013c86:	3312      	adds	r3, #18
 8013c88:	881b      	ldrh	r3, [r3, #0]
 8013c8a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013c8e:	d321      	bcc.n	8013cd4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013c90:	79fa      	ldrb	r2, [r7, #7]
 8013c92:	4613      	mov	r3, r2
 8013c94:	005b      	lsls	r3, r3, #1
 8013c96:	4413      	add	r3, r2
 8013c98:	00db      	lsls	r3, r3, #3
 8013c9a:	4a1b      	ldr	r2, [pc, #108]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c9c:	4413      	add	r3, r2
 8013c9e:	1d19      	adds	r1, r3, #4
 8013ca0:	79fa      	ldrb	r2, [r7, #7]
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	005b      	lsls	r3, r3, #1
 8013ca6:	4413      	add	r3, r2
 8013ca8:	00db      	lsls	r3, r3, #3
 8013caa:	3308      	adds	r3, #8
 8013cac:	4a16      	ldr	r2, [pc, #88]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013cae:	4413      	add	r3, r2
 8013cb0:	3304      	adds	r3, #4
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	68f8      	ldr	r0, [r7, #12]
 8013cb6:	f000 fafb 	bl	80142b0 <etharp_request_dst>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d109      	bne.n	8013cd4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013cc0:	79fa      	ldrb	r2, [r7, #7]
 8013cc2:	4911      	ldr	r1, [pc, #68]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013cc4:	4613      	mov	r3, r2
 8013cc6:	005b      	lsls	r3, r3, #1
 8013cc8:	4413      	add	r3, r2
 8013cca:	00db      	lsls	r3, r3, #3
 8013ccc:	440b      	add	r3, r1
 8013cce:	3314      	adds	r3, #20
 8013cd0:	2203      	movs	r2, #3
 8013cd2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8013cda:	79fa      	ldrb	r2, [r7, #7]
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	3308      	adds	r3, #8
 8013ce6:	4a08      	ldr	r2, [pc, #32]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013ce8:	4413      	add	r3, r2
 8013cea:	3304      	adds	r3, #4
 8013cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013cf0:	9200      	str	r2, [sp, #0]
 8013cf2:	460a      	mov	r2, r1
 8013cf4:	68b9      	ldr	r1, [r7, #8]
 8013cf6:	68f8      	ldr	r0, [r7, #12]
 8013cf8:	f001 fe84 	bl	8015a04 <ethernet_output>
 8013cfc:	4603      	mov	r3, r0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3710      	adds	r7, #16
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	200086f0 	.word	0x200086f0
 8013d0c:	080192a4 	.word	0x080192a4
 8013d10:	08019414 	.word	0x08019414
 8013d14:	0801931c 	.word	0x0801931c

08013d18 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b08a      	sub	sp, #40	; 0x28
 8013d1c:	af02      	add	r7, sp, #8
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d106      	bne.n	8013d3c <etharp_output+0x24>
 8013d2e:	4b73      	ldr	r3, [pc, #460]	; (8013efc <etharp_output+0x1e4>)
 8013d30:	f240 321e 	movw	r2, #798	; 0x31e
 8013d34:	4972      	ldr	r1, [pc, #456]	; (8013f00 <etharp_output+0x1e8>)
 8013d36:	4873      	ldr	r0, [pc, #460]	; (8013f04 <etharp_output+0x1ec>)
 8013d38:	f001 fef6 	bl	8015b28 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <etharp_output+0x38>
 8013d42:	4b6e      	ldr	r3, [pc, #440]	; (8013efc <etharp_output+0x1e4>)
 8013d44:	f240 321f 	movw	r2, #799	; 0x31f
 8013d48:	496f      	ldr	r1, [pc, #444]	; (8013f08 <etharp_output+0x1f0>)
 8013d4a:	486e      	ldr	r0, [pc, #440]	; (8013f04 <etharp_output+0x1ec>)
 8013d4c:	f001 feec 	bl	8015b28 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d106      	bne.n	8013d64 <etharp_output+0x4c>
 8013d56:	4b69      	ldr	r3, [pc, #420]	; (8013efc <etharp_output+0x1e4>)
 8013d58:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013d5c:	496b      	ldr	r1, [pc, #428]	; (8013f0c <etharp_output+0x1f4>)
 8013d5e:	4869      	ldr	r0, [pc, #420]	; (8013f04 <etharp_output+0x1ec>)
 8013d60:	f001 fee2 	bl	8015b28 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	68f9      	ldr	r1, [r7, #12]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f000 ff3c 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 8013d70:	4603      	mov	r3, r0
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d002      	beq.n	8013d7c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013d76:	4b66      	ldr	r3, [pc, #408]	; (8013f10 <etharp_output+0x1f8>)
 8013d78:	61fb      	str	r3, [r7, #28]
 8013d7a:	e0af      	b.n	8013edc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d84:	2be0      	cmp	r3, #224	; 0xe0
 8013d86:	d118      	bne.n	8013dba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013d88:	2301      	movs	r3, #1
 8013d8a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013d90:	235e      	movs	r3, #94	; 0x5e
 8013d92:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	3301      	adds	r3, #1
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	3302      	adds	r3, #2
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	3303      	adds	r3, #3
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013db2:	f107 0310 	add.w	r3, r7, #16
 8013db6:	61fb      	str	r3, [r7, #28]
 8013db8:	e090      	b.n	8013edc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	3304      	adds	r3, #4
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	405a      	eors	r2, r3
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	3308      	adds	r3, #8
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	4013      	ands	r3, r2
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d012      	beq.n	8013df8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013dd8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013ddc:	4293      	cmp	r3, r2
 8013dde:	d00b      	beq.n	8013df8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	330c      	adds	r3, #12
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d003      	beq.n	8013df2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	330c      	adds	r3, #12
 8013dee:	61bb      	str	r3, [r7, #24]
 8013df0:	e002      	b.n	8013df8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013df2:	f06f 0303 	mvn.w	r3, #3
 8013df6:	e07d      	b.n	8013ef4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013df8:	4b46      	ldr	r3, [pc, #280]	; (8013f14 <etharp_output+0x1fc>)
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	4a46      	ldr	r2, [pc, #280]	; (8013f18 <etharp_output+0x200>)
 8013e00:	460b      	mov	r3, r1
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	440b      	add	r3, r1
 8013e06:	00db      	lsls	r3, r3, #3
 8013e08:	4413      	add	r3, r2
 8013e0a:	3314      	adds	r3, #20
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	2b01      	cmp	r3, #1
 8013e10:	d925      	bls.n	8013e5e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e12:	4b40      	ldr	r3, [pc, #256]	; (8013f14 <etharp_output+0x1fc>)
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	4619      	mov	r1, r3
 8013e18:	4a3f      	ldr	r2, [pc, #252]	; (8013f18 <etharp_output+0x200>)
 8013e1a:	460b      	mov	r3, r1
 8013e1c:	005b      	lsls	r3, r3, #1
 8013e1e:	440b      	add	r3, r1
 8013e20:	00db      	lsls	r3, r3, #3
 8013e22:	4413      	add	r3, r2
 8013e24:	3308      	adds	r3, #8
 8013e26:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d117      	bne.n	8013e5e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	4b38      	ldr	r3, [pc, #224]	; (8013f14 <etharp_output+0x1fc>)
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	4618      	mov	r0, r3
 8013e38:	4937      	ldr	r1, [pc, #220]	; (8013f18 <etharp_output+0x200>)
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	4403      	add	r3, r0
 8013e40:	00db      	lsls	r3, r3, #3
 8013e42:	440b      	add	r3, r1
 8013e44:	3304      	adds	r3, #4
 8013e46:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d108      	bne.n	8013e5e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013e4c:	4b31      	ldr	r3, [pc, #196]	; (8013f14 <etharp_output+0x1fc>)
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	461a      	mov	r2, r3
 8013e52:	68b9      	ldr	r1, [r7, #8]
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f7ff fec5 	bl	8013be4 <etharp_output_to_arp_index>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	e04a      	b.n	8013ef4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013e5e:	2300      	movs	r3, #0
 8013e60:	75fb      	strb	r3, [r7, #23]
 8013e62:	e031      	b.n	8013ec8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013e64:	7dfa      	ldrb	r2, [r7, #23]
 8013e66:	492c      	ldr	r1, [pc, #176]	; (8013f18 <etharp_output+0x200>)
 8013e68:	4613      	mov	r3, r2
 8013e6a:	005b      	lsls	r3, r3, #1
 8013e6c:	4413      	add	r3, r2
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	440b      	add	r3, r1
 8013e72:	3314      	adds	r3, #20
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	d923      	bls.n	8013ec2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013e7a:	7dfa      	ldrb	r2, [r7, #23]
 8013e7c:	4926      	ldr	r1, [pc, #152]	; (8013f18 <etharp_output+0x200>)
 8013e7e:	4613      	mov	r3, r2
 8013e80:	005b      	lsls	r3, r3, #1
 8013e82:	4413      	add	r3, r2
 8013e84:	00db      	lsls	r3, r3, #3
 8013e86:	440b      	add	r3, r1
 8013e88:	3308      	adds	r3, #8
 8013e8a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013e8c:	68fa      	ldr	r2, [r7, #12]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d117      	bne.n	8013ec2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013e92:	69bb      	ldr	r3, [r7, #24]
 8013e94:	6819      	ldr	r1, [r3, #0]
 8013e96:	7dfa      	ldrb	r2, [r7, #23]
 8013e98:	481f      	ldr	r0, [pc, #124]	; (8013f18 <etharp_output+0x200>)
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4413      	add	r3, r2
 8013ea0:	00db      	lsls	r3, r3, #3
 8013ea2:	4403      	add	r3, r0
 8013ea4:	3304      	adds	r3, #4
 8013ea6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013ea8:	4299      	cmp	r1, r3
 8013eaa:	d10a      	bne.n	8013ec2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013eac:	4a19      	ldr	r2, [pc, #100]	; (8013f14 <etharp_output+0x1fc>)
 8013eae:	7dfb      	ldrb	r3, [r7, #23]
 8013eb0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013eb2:	7dfb      	ldrb	r3, [r7, #23]
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	68b9      	ldr	r1, [r7, #8]
 8013eb8:	68f8      	ldr	r0, [r7, #12]
 8013eba:	f7ff fe93 	bl	8013be4 <etharp_output_to_arp_index>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	e018      	b.n	8013ef4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013ec2:	7dfb      	ldrb	r3, [r7, #23]
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	75fb      	strb	r3, [r7, #23]
 8013ec8:	7dfb      	ldrb	r3, [r7, #23]
 8013eca:	2b09      	cmp	r3, #9
 8013ecc:	d9ca      	bls.n	8013e64 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013ece:	68ba      	ldr	r2, [r7, #8]
 8013ed0:	69b9      	ldr	r1, [r7, #24]
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f000 f822 	bl	8013f1c <etharp_query>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	e00b      	b.n	8013ef4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	69fb      	ldr	r3, [r7, #28]
 8013eea:	68b9      	ldr	r1, [r7, #8]
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f001 fd89 	bl	8015a04 <ethernet_output>
 8013ef2:	4603      	mov	r3, r0
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3720      	adds	r7, #32
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	080192a4 	.word	0x080192a4
 8013f00:	080193f4 	.word	0x080193f4
 8013f04:	0801931c 	.word	0x0801931c
 8013f08:	08019444 	.word	0x08019444
 8013f0c:	080193e4 	.word	0x080193e4
 8013f10:	08019a7c 	.word	0x08019a7c
 8013f14:	200087e0 	.word	0x200087e0
 8013f18:	200086f0 	.word	0x200086f0

08013f1c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b08c      	sub	sp, #48	; 0x30
 8013f20:	af02      	add	r7, sp, #8
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	332a      	adds	r3, #42	; 0x2a
 8013f2c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013f2e:	23ff      	movs	r3, #255	; 0xff
 8013f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013f34:	2300      	movs	r3, #0
 8013f36:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	68f9      	ldr	r1, [r7, #12]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f000 fe52 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 8013f44:	4603      	mov	r3, r0
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d10c      	bne.n	8013f64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f52:	2be0      	cmp	r3, #224	; 0xe0
 8013f54:	d006      	beq.n	8013f64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d003      	beq.n	8013f64 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d102      	bne.n	8013f6a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f64:	f06f 030f 	mvn.w	r3, #15
 8013f68:	e101      	b.n	801416e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013f6a:	68fa      	ldr	r2, [r7, #12]
 8013f6c:	2101      	movs	r1, #1
 8013f6e:	68b8      	ldr	r0, [r7, #8]
 8013f70:	f7ff fb5c 	bl	801362c <etharp_find_entry>
 8013f74:	4603      	mov	r3, r0
 8013f76:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	da02      	bge.n	8013f86 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013f80:	8a7b      	ldrh	r3, [r7, #18]
 8013f82:	b25b      	sxtb	r3, r3
 8013f84:	e0f3      	b.n	801416e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013f86:	8a7b      	ldrh	r3, [r7, #18]
 8013f88:	2b7e      	cmp	r3, #126	; 0x7e
 8013f8a:	d906      	bls.n	8013f9a <etharp_query+0x7e>
 8013f8c:	4b7a      	ldr	r3, [pc, #488]	; (8014178 <etharp_query+0x25c>)
 8013f8e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013f92:	497a      	ldr	r1, [pc, #488]	; (801417c <etharp_query+0x260>)
 8013f94:	487a      	ldr	r0, [pc, #488]	; (8014180 <etharp_query+0x264>)
 8013f96:	f001 fdc7 	bl	8015b28 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013f9a:	8a7b      	ldrh	r3, [r7, #18]
 8013f9c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013f9e:	7c7a      	ldrb	r2, [r7, #17]
 8013fa0:	4978      	ldr	r1, [pc, #480]	; (8014184 <etharp_query+0x268>)
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	005b      	lsls	r3, r3, #1
 8013fa6:	4413      	add	r3, r2
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	440b      	add	r3, r1
 8013fac:	3314      	adds	r3, #20
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d115      	bne.n	8013fe0 <etharp_query+0xc4>
    is_new_entry = 1;
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013fb8:	7c7a      	ldrb	r2, [r7, #17]
 8013fba:	4972      	ldr	r1, [pc, #456]	; (8014184 <etharp_query+0x268>)
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	005b      	lsls	r3, r3, #1
 8013fc0:	4413      	add	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	440b      	add	r3, r1
 8013fc6:	3314      	adds	r3, #20
 8013fc8:	2201      	movs	r2, #1
 8013fca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013fcc:	7c7a      	ldrb	r2, [r7, #17]
 8013fce:	496d      	ldr	r1, [pc, #436]	; (8014184 <etharp_query+0x268>)
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	4413      	add	r3, r2
 8013fd6:	00db      	lsls	r3, r3, #3
 8013fd8:	440b      	add	r3, r1
 8013fda:	3308      	adds	r3, #8
 8013fdc:	68fa      	ldr	r2, [r7, #12]
 8013fde:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013fe0:	7c7a      	ldrb	r2, [r7, #17]
 8013fe2:	4968      	ldr	r1, [pc, #416]	; (8014184 <etharp_query+0x268>)
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	4413      	add	r3, r2
 8013fea:	00db      	lsls	r3, r3, #3
 8013fec:	440b      	add	r3, r1
 8013fee:	3314      	adds	r3, #20
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d011      	beq.n	801401a <etharp_query+0xfe>
 8013ff6:	7c7a      	ldrb	r2, [r7, #17]
 8013ff8:	4962      	ldr	r1, [pc, #392]	; (8014184 <etharp_query+0x268>)
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	005b      	lsls	r3, r3, #1
 8013ffe:	4413      	add	r3, r2
 8014000:	00db      	lsls	r3, r3, #3
 8014002:	440b      	add	r3, r1
 8014004:	3314      	adds	r3, #20
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	2b01      	cmp	r3, #1
 801400a:	d806      	bhi.n	801401a <etharp_query+0xfe>
 801400c:	4b5a      	ldr	r3, [pc, #360]	; (8014178 <etharp_query+0x25c>)
 801400e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014012:	495d      	ldr	r1, [pc, #372]	; (8014188 <etharp_query+0x26c>)
 8014014:	485a      	ldr	r0, [pc, #360]	; (8014180 <etharp_query+0x264>)
 8014016:	f001 fd87 	bl	8015b28 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801401a:	6a3b      	ldr	r3, [r7, #32]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d102      	bne.n	8014026 <etharp_query+0x10a>
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10c      	bne.n	8014040 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014026:	68b9      	ldr	r1, [r7, #8]
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f000 f963 	bl	80142f4 <etharp_request>
 801402e:	4603      	mov	r3, r0
 8014030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d102      	bne.n	8014040 <etharp_query+0x124>
      return result;
 801403a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801403e:	e096      	b.n	801416e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d106      	bne.n	8014054 <etharp_query+0x138>
 8014046:	4b4c      	ldr	r3, [pc, #304]	; (8014178 <etharp_query+0x25c>)
 8014048:	f240 32e1 	movw	r2, #993	; 0x3e1
 801404c:	494f      	ldr	r1, [pc, #316]	; (801418c <etharp_query+0x270>)
 801404e:	484c      	ldr	r0, [pc, #304]	; (8014180 <etharp_query+0x264>)
 8014050:	f001 fd6a 	bl	8015b28 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014054:	7c7a      	ldrb	r2, [r7, #17]
 8014056:	494b      	ldr	r1, [pc, #300]	; (8014184 <etharp_query+0x268>)
 8014058:	4613      	mov	r3, r2
 801405a:	005b      	lsls	r3, r3, #1
 801405c:	4413      	add	r3, r2
 801405e:	00db      	lsls	r3, r3, #3
 8014060:	440b      	add	r3, r1
 8014062:	3314      	adds	r3, #20
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	2b01      	cmp	r3, #1
 8014068:	d917      	bls.n	801409a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801406a:	4a49      	ldr	r2, [pc, #292]	; (8014190 <etharp_query+0x274>)
 801406c:	7c7b      	ldrb	r3, [r7, #17]
 801406e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014070:	7c7a      	ldrb	r2, [r7, #17]
 8014072:	4613      	mov	r3, r2
 8014074:	005b      	lsls	r3, r3, #1
 8014076:	4413      	add	r3, r2
 8014078:	00db      	lsls	r3, r3, #3
 801407a:	3308      	adds	r3, #8
 801407c:	4a41      	ldr	r2, [pc, #260]	; (8014184 <etharp_query+0x268>)
 801407e:	4413      	add	r3, r2
 8014080:	3304      	adds	r3, #4
 8014082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014086:	9200      	str	r2, [sp, #0]
 8014088:	697a      	ldr	r2, [r7, #20]
 801408a:	6879      	ldr	r1, [r7, #4]
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f001 fcb9 	bl	8015a04 <ethernet_output>
 8014092:	4603      	mov	r3, r0
 8014094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014098:	e067      	b.n	801416a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801409a:	7c7a      	ldrb	r2, [r7, #17]
 801409c:	4939      	ldr	r1, [pc, #228]	; (8014184 <etharp_query+0x268>)
 801409e:	4613      	mov	r3, r2
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	4413      	add	r3, r2
 80140a4:	00db      	lsls	r3, r3, #3
 80140a6:	440b      	add	r3, r1
 80140a8:	3314      	adds	r3, #20
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d15c      	bne.n	801416a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80140b0:	2300      	movs	r3, #0
 80140b2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80140b8:	e01c      	b.n	80140f4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	895a      	ldrh	r2, [r3, #10]
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	891b      	ldrh	r3, [r3, #8]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d10a      	bne.n	80140dc <etharp_query+0x1c0>
 80140c6:	69fb      	ldr	r3, [r7, #28]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d006      	beq.n	80140dc <etharp_query+0x1c0>
 80140ce:	4b2a      	ldr	r3, [pc, #168]	; (8014178 <etharp_query+0x25c>)
 80140d0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80140d4:	492f      	ldr	r1, [pc, #188]	; (8014194 <etharp_query+0x278>)
 80140d6:	482a      	ldr	r0, [pc, #168]	; (8014180 <etharp_query+0x264>)
 80140d8:	f001 fd26 	bl	8015b28 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80140dc:	69fb      	ldr	r3, [r7, #28]
 80140de:	7b1b      	ldrb	r3, [r3, #12]
 80140e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d002      	beq.n	80140ee <etharp_query+0x1d2>
        copy_needed = 1;
 80140e8:	2301      	movs	r3, #1
 80140ea:	61bb      	str	r3, [r7, #24]
        break;
 80140ec:	e005      	b.n	80140fa <etharp_query+0x1de>
      }
      p = p->next;
 80140ee:	69fb      	ldr	r3, [r7, #28]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80140f4:	69fb      	ldr	r3, [r7, #28]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1df      	bne.n	80140ba <etharp_query+0x19e>
    }
    if (copy_needed) {
 80140fa:	69bb      	ldr	r3, [r7, #24]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d007      	beq.n	8014110 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014106:	200e      	movs	r0, #14
 8014108:	f7f7 fbd2 	bl	800b8b0 <pbuf_clone>
 801410c:	61f8      	str	r0, [r7, #28]
 801410e:	e004      	b.n	801411a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014114:	69f8      	ldr	r0, [r7, #28]
 8014116:	f7f7 f9ff 	bl	800b518 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801411a:	69fb      	ldr	r3, [r7, #28]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d021      	beq.n	8014164 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014120:	7c7a      	ldrb	r2, [r7, #17]
 8014122:	4918      	ldr	r1, [pc, #96]	; (8014184 <etharp_query+0x268>)
 8014124:	4613      	mov	r3, r2
 8014126:	005b      	lsls	r3, r3, #1
 8014128:	4413      	add	r3, r2
 801412a:	00db      	lsls	r3, r3, #3
 801412c:	440b      	add	r3, r1
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d00a      	beq.n	801414a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014134:	7c7a      	ldrb	r2, [r7, #17]
 8014136:	4913      	ldr	r1, [pc, #76]	; (8014184 <etharp_query+0x268>)
 8014138:	4613      	mov	r3, r2
 801413a:	005b      	lsls	r3, r3, #1
 801413c:	4413      	add	r3, r2
 801413e:	00db      	lsls	r3, r3, #3
 8014140:	440b      	add	r3, r1
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4618      	mov	r0, r3
 8014146:	f7f7 f947 	bl	800b3d8 <pbuf_free>
      }
      arp_table[i].q = p;
 801414a:	7c7a      	ldrb	r2, [r7, #17]
 801414c:	490d      	ldr	r1, [pc, #52]	; (8014184 <etharp_query+0x268>)
 801414e:	4613      	mov	r3, r2
 8014150:	005b      	lsls	r3, r3, #1
 8014152:	4413      	add	r3, r2
 8014154:	00db      	lsls	r3, r3, #3
 8014156:	440b      	add	r3, r1
 8014158:	69fa      	ldr	r2, [r7, #28]
 801415a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801415c:	2300      	movs	r3, #0
 801415e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014162:	e002      	b.n	801416a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014164:	23ff      	movs	r3, #255	; 0xff
 8014166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801416a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801416e:	4618      	mov	r0, r3
 8014170:	3728      	adds	r7, #40	; 0x28
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
 8014176:	bf00      	nop
 8014178:	080192a4 	.word	0x080192a4
 801417c:	08019450 	.word	0x08019450
 8014180:	0801931c 	.word	0x0801931c
 8014184:	200086f0 	.word	0x200086f0
 8014188:	08019460 	.word	0x08019460
 801418c:	08019444 	.word	0x08019444
 8014190:	200087e0 	.word	0x200087e0
 8014194:	08019488 	.word	0x08019488

08014198 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b08a      	sub	sp, #40	; 0x28
 801419c:	af02      	add	r7, sp, #8
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	607a      	str	r2, [r7, #4]
 80141a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80141a6:	2300      	movs	r3, #0
 80141a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d106      	bne.n	80141be <etharp_raw+0x26>
 80141b0:	4b3a      	ldr	r3, [pc, #232]	; (801429c <etharp_raw+0x104>)
 80141b2:	f240 4257 	movw	r2, #1111	; 0x457
 80141b6:	493a      	ldr	r1, [pc, #232]	; (80142a0 <etharp_raw+0x108>)
 80141b8:	483a      	ldr	r0, [pc, #232]	; (80142a4 <etharp_raw+0x10c>)
 80141ba:	f001 fcb5 	bl	8015b28 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80141be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141c2:	211c      	movs	r1, #28
 80141c4:	200e      	movs	r0, #14
 80141c6:	f7f6 fe23 	bl	800ae10 <pbuf_alloc>
 80141ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d102      	bne.n	80141d8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80141d2:	f04f 33ff 	mov.w	r3, #4294967295
 80141d6:	e05d      	b.n	8014294 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80141d8:	69bb      	ldr	r3, [r7, #24]
 80141da:	895b      	ldrh	r3, [r3, #10]
 80141dc:	2b1b      	cmp	r3, #27
 80141de:	d806      	bhi.n	80141ee <etharp_raw+0x56>
 80141e0:	4b2e      	ldr	r3, [pc, #184]	; (801429c <etharp_raw+0x104>)
 80141e2:	f240 4262 	movw	r2, #1122	; 0x462
 80141e6:	4930      	ldr	r1, [pc, #192]	; (80142a8 <etharp_raw+0x110>)
 80141e8:	482e      	ldr	r0, [pc, #184]	; (80142a4 <etharp_raw+0x10c>)
 80141ea:	f001 fc9d 	bl	8015b28 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80141ee:	69bb      	ldr	r3, [r7, #24]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80141f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7f5 fcec 	bl	8009bd4 <lwip_htons>
 80141fc:	4603      	mov	r3, r0
 80141fe:	461a      	mov	r2, r3
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801420a:	2b06      	cmp	r3, #6
 801420c:	d006      	beq.n	801421c <etharp_raw+0x84>
 801420e:	4b23      	ldr	r3, [pc, #140]	; (801429c <etharp_raw+0x104>)
 8014210:	f240 4269 	movw	r2, #1129	; 0x469
 8014214:	4925      	ldr	r1, [pc, #148]	; (80142ac <etharp_raw+0x114>)
 8014216:	4823      	ldr	r0, [pc, #140]	; (80142a4 <etharp_raw+0x10c>)
 8014218:	f001 fc86 	bl	8015b28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	3308      	adds	r3, #8
 8014220:	2206      	movs	r2, #6
 8014222:	6839      	ldr	r1, [r7, #0]
 8014224:	4618      	mov	r0, r3
 8014226:	f001 fc69 	bl	8015afc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	3312      	adds	r3, #18
 801422e:	2206      	movs	r2, #6
 8014230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014232:	4618      	mov	r0, r3
 8014234:	f001 fc62 	bl	8015afc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	330e      	adds	r3, #14
 801423c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801423e:	6812      	ldr	r2, [r2, #0]
 8014240:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	3318      	adds	r3, #24
 8014246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014248:	6812      	ldr	r2, [r2, #0]
 801424a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	2200      	movs	r2, #0
 8014250:	701a      	strb	r2, [r3, #0]
 8014252:	2200      	movs	r2, #0
 8014254:	f042 0201 	orr.w	r2, r2, #1
 8014258:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	2200      	movs	r2, #0
 801425e:	f042 0208 	orr.w	r2, r2, #8
 8014262:	709a      	strb	r2, [r3, #2]
 8014264:	2200      	movs	r2, #0
 8014266:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	2206      	movs	r2, #6
 801426c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	2204      	movs	r2, #4
 8014272:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014274:	f640 0306 	movw	r3, #2054	; 0x806
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	68ba      	ldr	r2, [r7, #8]
 801427e:	69b9      	ldr	r1, [r7, #24]
 8014280:	68f8      	ldr	r0, [r7, #12]
 8014282:	f001 fbbf 	bl	8015a04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014286:	69b8      	ldr	r0, [r7, #24]
 8014288:	f7f7 f8a6 	bl	800b3d8 <pbuf_free>
  p = NULL;
 801428c:	2300      	movs	r3, #0
 801428e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014290:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014294:	4618      	mov	r0, r3
 8014296:	3720      	adds	r7, #32
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}
 801429c:	080192a4 	.word	0x080192a4
 80142a0:	080193f4 	.word	0x080193f4
 80142a4:	0801931c 	.word	0x0801931c
 80142a8:	080194a4 	.word	0x080194a4
 80142ac:	080194d8 	.word	0x080194d8

080142b0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b088      	sub	sp, #32
 80142b4:	af04      	add	r7, sp, #16
 80142b6:	60f8      	str	r0, [r7, #12]
 80142b8:	60b9      	str	r1, [r7, #8]
 80142ba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142cc:	2201      	movs	r2, #1
 80142ce:	9203      	str	r2, [sp, #12]
 80142d0:	68ba      	ldr	r2, [r7, #8]
 80142d2:	9202      	str	r2, [sp, #8]
 80142d4:	4a06      	ldr	r2, [pc, #24]	; (80142f0 <etharp_request_dst+0x40>)
 80142d6:	9201      	str	r2, [sp, #4]
 80142d8:	9300      	str	r3, [sp, #0]
 80142da:	4603      	mov	r3, r0
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	68f8      	ldr	r0, [r7, #12]
 80142e0:	f7ff ff5a 	bl	8014198 <etharp_raw>
 80142e4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3710      	adds	r7, #16
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	08019a84 	.word	0x08019a84

080142f4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80142fe:	4a05      	ldr	r2, [pc, #20]	; (8014314 <etharp_request+0x20>)
 8014300:	6839      	ldr	r1, [r7, #0]
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff ffd4 	bl	80142b0 <etharp_request_dst>
 8014308:	4603      	mov	r3, r0
}
 801430a:	4618      	mov	r0, r3
 801430c:	3708      	adds	r7, #8
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	08019a7c 	.word	0x08019a7c

08014318 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b08e      	sub	sp, #56	; 0x38
 801431c:	af04      	add	r7, sp, #16
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014322:	4b87      	ldr	r3, [pc, #540]	; (8014540 <icmp_input+0x228>)
 8014324:	689b      	ldr	r3, [r3, #8]
 8014326:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	f003 030f 	and.w	r3, r3, #15
 8014330:	b2db      	uxtb	r3, r3
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	b2db      	uxtb	r3, r3
 8014336:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801433a:	2b13      	cmp	r3, #19
 801433c:	f240 80e8 	bls.w	8014510 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	895b      	ldrh	r3, [r3, #10]
 8014344:	2b03      	cmp	r3, #3
 8014346:	f240 80e5 	bls.w	8014514 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014354:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014358:	2b00      	cmp	r3, #0
 801435a:	f000 80d2 	beq.w	8014502 <icmp_input+0x1ea>
 801435e:	2b08      	cmp	r3, #8
 8014360:	f040 80d2 	bne.w	8014508 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014364:	4b77      	ldr	r3, [pc, #476]	; (8014544 <icmp_input+0x22c>)
 8014366:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014368:	4b75      	ldr	r3, [pc, #468]	; (8014540 <icmp_input+0x228>)
 801436a:	695b      	ldr	r3, [r3, #20]
 801436c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014370:	2be0      	cmp	r3, #224	; 0xe0
 8014372:	f000 80d6 	beq.w	8014522 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014376:	4b72      	ldr	r3, [pc, #456]	; (8014540 <icmp_input+0x228>)
 8014378:	695b      	ldr	r3, [r3, #20]
 801437a:	4a71      	ldr	r2, [pc, #452]	; (8014540 <icmp_input+0x228>)
 801437c:	6812      	ldr	r2, [r2, #0]
 801437e:	4611      	mov	r1, r2
 8014380:	4618      	mov	r0, r3
 8014382:	f000 fc31 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 8014386:	4603      	mov	r3, r0
 8014388:	2b00      	cmp	r3, #0
 801438a:	f040 80cc 	bne.w	8014526 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	891b      	ldrh	r3, [r3, #8]
 8014392:	2b07      	cmp	r3, #7
 8014394:	f240 80c0 	bls.w	8014518 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f7f5 fcb8 	bl	8009d0e <inet_chksum_pbuf>
 801439e:	4603      	mov	r3, r0
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d003      	beq.n	80143ac <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f7f7 f817 	bl	800b3d8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80143aa:	e0c5      	b.n	8014538 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80143ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143ae:	330e      	adds	r3, #14
 80143b0:	4619      	mov	r1, r3
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f7f6 ff7a 	bl	800b2ac <pbuf_add_header>
 80143b8:	4603      	mov	r3, r0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d04b      	beq.n	8014456 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	891a      	ldrh	r2, [r3, #8]
 80143c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143c4:	4413      	add	r3, r2
 80143c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	891b      	ldrh	r3, [r3, #8]
 80143cc:	8b7a      	ldrh	r2, [r7, #26]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	f0c0 80ab 	bcc.w	801452a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80143d4:	8b7b      	ldrh	r3, [r7, #26]
 80143d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143da:	4619      	mov	r1, r3
 80143dc:	200e      	movs	r0, #14
 80143de:	f7f6 fd17 	bl	800ae10 <pbuf_alloc>
 80143e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	f000 80a1 	beq.w	801452e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	895b      	ldrh	r3, [r3, #10]
 80143f0:	461a      	mov	r2, r3
 80143f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143f4:	3308      	adds	r3, #8
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d203      	bcs.n	8014402 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80143fa:	6978      	ldr	r0, [r7, #20]
 80143fc:	f7f6 ffec 	bl	800b3d8 <pbuf_free>
          goto icmperr;
 8014400:	e096      	b.n	8014530 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	685b      	ldr	r3, [r3, #4]
 8014406:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801440a:	4618      	mov	r0, r3
 801440c:	f001 fb76 	bl	8015afc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014412:	4619      	mov	r1, r3
 8014414:	6978      	ldr	r0, [r7, #20]
 8014416:	f7f6 ff59 	bl	800b2cc <pbuf_remove_header>
 801441a:	4603      	mov	r3, r0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d009      	beq.n	8014434 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014420:	4b49      	ldr	r3, [pc, #292]	; (8014548 <icmp_input+0x230>)
 8014422:	22b6      	movs	r2, #182	; 0xb6
 8014424:	4949      	ldr	r1, [pc, #292]	; (801454c <icmp_input+0x234>)
 8014426:	484a      	ldr	r0, [pc, #296]	; (8014550 <icmp_input+0x238>)
 8014428:	f001 fb7e 	bl	8015b28 <iprintf>
          pbuf_free(r);
 801442c:	6978      	ldr	r0, [r7, #20]
 801442e:	f7f6 ffd3 	bl	800b3d8 <pbuf_free>
          goto icmperr;
 8014432:	e07d      	b.n	8014530 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014434:	6879      	ldr	r1, [r7, #4]
 8014436:	6978      	ldr	r0, [r7, #20]
 8014438:	f7f7 f8f6 	bl	800b628 <pbuf_copy>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d003      	beq.n	801444a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014442:	6978      	ldr	r0, [r7, #20]
 8014444:	f7f6 ffc8 	bl	800b3d8 <pbuf_free>
          goto icmperr;
 8014448:	e072      	b.n	8014530 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f7f6 ffc4 	bl	800b3d8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	607b      	str	r3, [r7, #4]
 8014454:	e00f      	b.n	8014476 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014458:	330e      	adds	r3, #14
 801445a:	4619      	mov	r1, r3
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7f6 ff35 	bl	800b2cc <pbuf_remove_header>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d006      	beq.n	8014476 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014468:	4b37      	ldr	r3, [pc, #220]	; (8014548 <icmp_input+0x230>)
 801446a:	22c7      	movs	r2, #199	; 0xc7
 801446c:	4939      	ldr	r1, [pc, #228]	; (8014554 <icmp_input+0x23c>)
 801446e:	4838      	ldr	r0, [pc, #224]	; (8014550 <icmp_input+0x238>)
 8014470:	f001 fb5a 	bl	8015b28 <iprintf>
          goto icmperr;
 8014474:	e05c      	b.n	8014530 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801447c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801447e:	4619      	mov	r1, r3
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f7f6 ff13 	bl	800b2ac <pbuf_add_header>
 8014486:	4603      	mov	r3, r0
 8014488:	2b00      	cmp	r3, #0
 801448a:	d13c      	bne.n	8014506 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014492:	69fb      	ldr	r3, [r7, #28]
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801449a:	4b29      	ldr	r3, [pc, #164]	; (8014540 <icmp_input+0x228>)
 801449c:	691a      	ldr	r2, [r3, #16]
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	2200      	movs	r2, #0
 80144a6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	885b      	ldrh	r3, [r3, #2]
 80144ac:	b29b      	uxth	r3, r3
 80144ae:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80144b2:	4293      	cmp	r3, r2
 80144b4:	d907      	bls.n	80144c6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	885b      	ldrh	r3, [r3, #2]
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	3309      	adds	r3, #9
 80144be:	b29a      	uxth	r2, r3
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	805a      	strh	r2, [r3, #2]
 80144c4:	e006      	b.n	80144d4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	885b      	ldrh	r3, [r3, #2]
 80144ca:	b29b      	uxth	r3, r3
 80144cc:	3308      	adds	r3, #8
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	693b      	ldr	r3, [r7, #16]
 80144d2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	22ff      	movs	r2, #255	; 0xff
 80144d8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	2200      	movs	r2, #0
 80144de:	729a      	strb	r2, [r3, #10]
 80144e0:	2200      	movs	r2, #0
 80144e2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	9302      	str	r3, [sp, #8]
 80144e8:	2301      	movs	r3, #1
 80144ea:	9301      	str	r3, [sp, #4]
 80144ec:	2300      	movs	r3, #0
 80144ee:	9300      	str	r3, [sp, #0]
 80144f0:	23ff      	movs	r3, #255	; 0xff
 80144f2:	2200      	movs	r2, #0
 80144f4:	69f9      	ldr	r1, [r7, #28]
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 fa9e 	bl	8014a38 <ip4_output_if>
 80144fc:	4603      	mov	r3, r0
 80144fe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014500:	e001      	b.n	8014506 <icmp_input+0x1ee>
      break;
 8014502:	bf00      	nop
 8014504:	e000      	b.n	8014508 <icmp_input+0x1f0>
      break;
 8014506:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f7f6 ff65 	bl	800b3d8 <pbuf_free>
  return;
 801450e:	e013      	b.n	8014538 <icmp_input+0x220>
    goto lenerr;
 8014510:	bf00      	nop
 8014512:	e002      	b.n	801451a <icmp_input+0x202>
    goto lenerr;
 8014514:	bf00      	nop
 8014516:	e000      	b.n	801451a <icmp_input+0x202>
        goto lenerr;
 8014518:	bf00      	nop
lenerr:
  pbuf_free(p);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f7f6 ff5c 	bl	800b3d8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014520:	e00a      	b.n	8014538 <icmp_input+0x220>
        goto icmperr;
 8014522:	bf00      	nop
 8014524:	e004      	b.n	8014530 <icmp_input+0x218>
        goto icmperr;
 8014526:	bf00      	nop
 8014528:	e002      	b.n	8014530 <icmp_input+0x218>
          goto icmperr;
 801452a:	bf00      	nop
 801452c:	e000      	b.n	8014530 <icmp_input+0x218>
          goto icmperr;
 801452e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f7f6 ff51 	bl	800b3d8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014536:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014538:	3728      	adds	r7, #40	; 0x28
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	20005720 	.word	0x20005720
 8014544:	20005734 	.word	0x20005734
 8014548:	0801951c 	.word	0x0801951c
 801454c:	08019554 	.word	0x08019554
 8014550:	0801958c 	.word	0x0801958c
 8014554:	080195b4 	.word	0x080195b4

08014558 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	460b      	mov	r3, r1
 8014562:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014564:	78fb      	ldrb	r3, [r7, #3]
 8014566:	461a      	mov	r2, r3
 8014568:	2103      	movs	r1, #3
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 f814 	bl	8014598 <icmp_send_response>
}
 8014570:	bf00      	nop
 8014572:	3708      	adds	r7, #8
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	460b      	mov	r3, r1
 8014582:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014584:	78fb      	ldrb	r3, [r7, #3]
 8014586:	461a      	mov	r2, r3
 8014588:	210b      	movs	r1, #11
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f000 f804 	bl	8014598 <icmp_send_response>
}
 8014590:	bf00      	nop
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b08c      	sub	sp, #48	; 0x30
 801459c:	af04      	add	r7, sp, #16
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	460b      	mov	r3, r1
 80145a2:	70fb      	strb	r3, [r7, #3]
 80145a4:	4613      	mov	r3, r2
 80145a6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80145a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80145ac:	2124      	movs	r1, #36	; 0x24
 80145ae:	2022      	movs	r0, #34	; 0x22
 80145b0:	f7f6 fc2e 	bl	800ae10 <pbuf_alloc>
 80145b4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80145b6:	69fb      	ldr	r3, [r7, #28]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d056      	beq.n	801466a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	895b      	ldrh	r3, [r3, #10]
 80145c0:	2b23      	cmp	r3, #35	; 0x23
 80145c2:	d806      	bhi.n	80145d2 <icmp_send_response+0x3a>
 80145c4:	4b2b      	ldr	r3, [pc, #172]	; (8014674 <icmp_send_response+0xdc>)
 80145c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80145ca:	492b      	ldr	r1, [pc, #172]	; (8014678 <icmp_send_response+0xe0>)
 80145cc:	482b      	ldr	r0, [pc, #172]	; (801467c <icmp_send_response+0xe4>)
 80145ce:	f001 faab 	bl	8015b28 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80145d8:	69fb      	ldr	r3, [r7, #28]
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	78fa      	ldrb	r2, [r7, #3]
 80145e2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	78ba      	ldrb	r2, [r7, #2]
 80145e8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	2200      	movs	r2, #0
 80145ee:	711a      	strb	r2, [r3, #4]
 80145f0:	2200      	movs	r2, #0
 80145f2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	2200      	movs	r2, #0
 80145f8:	719a      	strb	r2, [r3, #6]
 80145fa:	2200      	movs	r2, #0
 80145fc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80145fe:	69fb      	ldr	r3, [r7, #28]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	f103 0008 	add.w	r0, r3, #8
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	221c      	movs	r2, #28
 801460c:	4619      	mov	r1, r3
 801460e:	f001 fa75 	bl	8015afc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014612:	69bb      	ldr	r3, [r7, #24]
 8014614:	68db      	ldr	r3, [r3, #12]
 8014616:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014618:	f107 030c 	add.w	r3, r7, #12
 801461c:	4618      	mov	r0, r3
 801461e:	f000 f82f 	bl	8014680 <ip4_route>
 8014622:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d01b      	beq.n	8014662 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	2200      	movs	r2, #0
 801462e:	709a      	strb	r2, [r3, #2]
 8014630:	2200      	movs	r2, #0
 8014632:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	895b      	ldrh	r3, [r3, #10]
 8014638:	4619      	mov	r1, r3
 801463a:	6978      	ldr	r0, [r7, #20]
 801463c:	f7f5 fb55 	bl	8009cea <inet_chksum>
 8014640:	4603      	mov	r3, r0
 8014642:	461a      	mov	r2, r3
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014648:	f107 020c 	add.w	r2, r7, #12
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	9302      	str	r3, [sp, #8]
 8014650:	2301      	movs	r3, #1
 8014652:	9301      	str	r3, [sp, #4]
 8014654:	2300      	movs	r3, #0
 8014656:	9300      	str	r3, [sp, #0]
 8014658:	23ff      	movs	r3, #255	; 0xff
 801465a:	2100      	movs	r1, #0
 801465c:	69f8      	ldr	r0, [r7, #28]
 801465e:	f000 f9eb 	bl	8014a38 <ip4_output_if>
  }
  pbuf_free(q);
 8014662:	69f8      	ldr	r0, [r7, #28]
 8014664:	f7f6 feb8 	bl	800b3d8 <pbuf_free>
 8014668:	e000      	b.n	801466c <icmp_send_response+0xd4>
    return;
 801466a:	bf00      	nop
}
 801466c:	3720      	adds	r7, #32
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}
 8014672:	bf00      	nop
 8014674:	0801951c 	.word	0x0801951c
 8014678:	080195e8 	.word	0x080195e8
 801467c:	0801958c 	.word	0x0801958c

08014680 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014680:	b480      	push	{r7}
 8014682:	b085      	sub	sp, #20
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014688:	4b33      	ldr	r3, [pc, #204]	; (8014758 <ip4_route+0xd8>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	60fb      	str	r3, [r7, #12]
 801468e:	e036      	b.n	80146fe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014696:	f003 0301 	and.w	r3, r3, #1
 801469a:	b2db      	uxtb	r3, r3
 801469c:	2b00      	cmp	r3, #0
 801469e:	d02b      	beq.n	80146f8 <ip4_route+0x78>
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80146a6:	089b      	lsrs	r3, r3, #2
 80146a8:	f003 0301 	and.w	r3, r3, #1
 80146ac:	b2db      	uxtb	r3, r3
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d022      	beq.n	80146f8 <ip4_route+0x78>
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	3304      	adds	r3, #4
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d01d      	beq.n	80146f8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	3304      	adds	r3, #4
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	405a      	eors	r2, r3
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	3308      	adds	r3, #8
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	4013      	ands	r3, r2
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d101      	bne.n	80146d8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	e038      	b.n	801474a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80146de:	f003 0302 	and.w	r3, r3, #2
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d108      	bne.n	80146f8 <ip4_route+0x78>
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	330c      	adds	r3, #12
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	429a      	cmp	r2, r3
 80146f2:	d101      	bne.n	80146f8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	e028      	b.n	801474a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	60fb      	str	r3, [r7, #12]
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d1c5      	bne.n	8014690 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014704:	4b15      	ldr	r3, [pc, #84]	; (801475c <ip4_route+0xdc>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d01a      	beq.n	8014742 <ip4_route+0xc2>
 801470c:	4b13      	ldr	r3, [pc, #76]	; (801475c <ip4_route+0xdc>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014714:	f003 0301 	and.w	r3, r3, #1
 8014718:	2b00      	cmp	r3, #0
 801471a:	d012      	beq.n	8014742 <ip4_route+0xc2>
 801471c:	4b0f      	ldr	r3, [pc, #60]	; (801475c <ip4_route+0xdc>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014724:	f003 0304 	and.w	r3, r3, #4
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00a      	beq.n	8014742 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801472c:	4b0b      	ldr	r3, [pc, #44]	; (801475c <ip4_route+0xdc>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	3304      	adds	r3, #4
 8014732:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014734:	2b00      	cmp	r3, #0
 8014736:	d004      	beq.n	8014742 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	b2db      	uxtb	r3, r3
 801473e:	2b7f      	cmp	r3, #127	; 0x7f
 8014740:	d101      	bne.n	8014746 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014742:	2300      	movs	r3, #0
 8014744:	e001      	b.n	801474a <ip4_route+0xca>
  }

  return netif_default;
 8014746:	4b05      	ldr	r3, [pc, #20]	; (801475c <ip4_route+0xdc>)
 8014748:	681b      	ldr	r3, [r3, #0]
}
 801474a:	4618      	mov	r0, r3
 801474c:	3714      	adds	r7, #20
 801474e:	46bd      	mov	sp, r7
 8014750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014754:	4770      	bx	lr
 8014756:	bf00      	nop
 8014758:	20008650 	.word	0x20008650
 801475c:	20008654 	.word	0x20008654

08014760 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801476e:	f003 0301 	and.w	r3, r3, #1
 8014772:	b2db      	uxtb	r3, r3
 8014774:	2b00      	cmp	r3, #0
 8014776:	d016      	beq.n	80147a6 <ip4_input_accept+0x46>
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	3304      	adds	r3, #4
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d011      	beq.n	80147a6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014782:	4b0b      	ldr	r3, [pc, #44]	; (80147b0 <ip4_input_accept+0x50>)
 8014784:	695a      	ldr	r2, [r3, #20]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	3304      	adds	r3, #4
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	429a      	cmp	r2, r3
 801478e:	d008      	beq.n	80147a2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014790:	4b07      	ldr	r3, [pc, #28]	; (80147b0 <ip4_input_accept+0x50>)
 8014792:	695b      	ldr	r3, [r3, #20]
 8014794:	6879      	ldr	r1, [r7, #4]
 8014796:	4618      	mov	r0, r3
 8014798:	f000 fa26 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 801479c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d001      	beq.n	80147a6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80147a2:	2301      	movs	r3, #1
 80147a4:	e000      	b.n	80147a8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80147a6:	2300      	movs	r3, #0
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	20005720 	.word	0x20005720

080147b4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b088      	sub	sp, #32
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80147be:	2301      	movs	r3, #1
 80147c0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80147c8:	69fb      	ldr	r3, [r7, #28]
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	091b      	lsrs	r3, r3, #4
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	2b04      	cmp	r3, #4
 80147d2:	d004      	beq.n	80147de <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f7f6 fdff 	bl	800b3d8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80147da:	2300      	movs	r3, #0
 80147dc:	e123      	b.n	8014a26 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	f003 030f 	and.w	r3, r3, #15
 80147e6:	b2db      	uxtb	r3, r3
 80147e8:	009b      	lsls	r3, r3, #2
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80147ee:	69fb      	ldr	r3, [r7, #28]
 80147f0:	885b      	ldrh	r3, [r3, #2]
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7f5 f9ed 	bl	8009bd4 <lwip_htons>
 80147fa:	4603      	mov	r3, r0
 80147fc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	891b      	ldrh	r3, [r3, #8]
 8014802:	8a3a      	ldrh	r2, [r7, #16]
 8014804:	429a      	cmp	r2, r3
 8014806:	d204      	bcs.n	8014812 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8014808:	8a3b      	ldrh	r3, [r7, #16]
 801480a:	4619      	mov	r1, r3
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f7f6 fc5d 	bl	800b0cc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	895b      	ldrh	r3, [r3, #10]
 8014816:	8a7a      	ldrh	r2, [r7, #18]
 8014818:	429a      	cmp	r2, r3
 801481a:	d807      	bhi.n	801482c <ip4_input+0x78>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	891b      	ldrh	r3, [r3, #8]
 8014820:	8a3a      	ldrh	r2, [r7, #16]
 8014822:	429a      	cmp	r2, r3
 8014824:	d802      	bhi.n	801482c <ip4_input+0x78>
 8014826:	8a7b      	ldrh	r3, [r7, #18]
 8014828:	2b13      	cmp	r3, #19
 801482a:	d804      	bhi.n	8014836 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f7f6 fdd3 	bl	800b3d8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014832:	2300      	movs	r3, #0
 8014834:	e0f7      	b.n	8014a26 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014836:	69fb      	ldr	r3, [r7, #28]
 8014838:	691b      	ldr	r3, [r3, #16]
 801483a:	4a7d      	ldr	r2, [pc, #500]	; (8014a30 <ip4_input+0x27c>)
 801483c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801483e:	69fb      	ldr	r3, [r7, #28]
 8014840:	68db      	ldr	r3, [r3, #12]
 8014842:	4a7b      	ldr	r2, [pc, #492]	; (8014a30 <ip4_input+0x27c>)
 8014844:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014846:	4b7a      	ldr	r3, [pc, #488]	; (8014a30 <ip4_input+0x27c>)
 8014848:	695b      	ldr	r3, [r3, #20]
 801484a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801484e:	2be0      	cmp	r3, #224	; 0xe0
 8014850:	d112      	bne.n	8014878 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014858:	f003 0301 	and.w	r3, r3, #1
 801485c:	b2db      	uxtb	r3, r3
 801485e:	2b00      	cmp	r3, #0
 8014860:	d007      	beq.n	8014872 <ip4_input+0xbe>
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	3304      	adds	r3, #4
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d002      	beq.n	8014872 <ip4_input+0xbe>
      netif = inp;
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	61bb      	str	r3, [r7, #24]
 8014870:	e02a      	b.n	80148c8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014872:	2300      	movs	r3, #0
 8014874:	61bb      	str	r3, [r7, #24]
 8014876:	e027      	b.n	80148c8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014878:	6838      	ldr	r0, [r7, #0]
 801487a:	f7ff ff71 	bl	8014760 <ip4_input_accept>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d002      	beq.n	801488a <ip4_input+0xd6>
      netif = inp;
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	61bb      	str	r3, [r7, #24]
 8014888:	e01e      	b.n	80148c8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801488a:	2300      	movs	r3, #0
 801488c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801488e:	4b68      	ldr	r3, [pc, #416]	; (8014a30 <ip4_input+0x27c>)
 8014890:	695b      	ldr	r3, [r3, #20]
 8014892:	b2db      	uxtb	r3, r3
 8014894:	2b7f      	cmp	r3, #127	; 0x7f
 8014896:	d017      	beq.n	80148c8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014898:	4b66      	ldr	r3, [pc, #408]	; (8014a34 <ip4_input+0x280>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	61bb      	str	r3, [r7, #24]
 801489e:	e00e      	b.n	80148be <ip4_input+0x10a>
          if (netif == inp) {
 80148a0:	69ba      	ldr	r2, [r7, #24]
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d006      	beq.n	80148b6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80148a8:	69b8      	ldr	r0, [r7, #24]
 80148aa:	f7ff ff59 	bl	8014760 <ip4_input_accept>
 80148ae:	4603      	mov	r3, r0
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d108      	bne.n	80148c6 <ip4_input+0x112>
 80148b4:	e000      	b.n	80148b8 <ip4_input+0x104>
            continue;
 80148b6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80148b8:	69bb      	ldr	r3, [r7, #24]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	61bb      	str	r3, [r7, #24]
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d1ed      	bne.n	80148a0 <ip4_input+0xec>
 80148c4:	e000      	b.n	80148c8 <ip4_input+0x114>
            break;
 80148c6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80148c8:	69bb      	ldr	r3, [r7, #24]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d111      	bne.n	80148f2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	7a5b      	ldrb	r3, [r3, #9]
 80148d2:	2b11      	cmp	r3, #17
 80148d4:	d10d      	bne.n	80148f2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80148d6:	8a7b      	ldrh	r3, [r7, #18]
 80148d8:	69fa      	ldr	r2, [r7, #28]
 80148da:	4413      	add	r3, r2
 80148dc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	885b      	ldrh	r3, [r3, #2]
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80148e8:	d103      	bne.n	80148f2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80148ee:	2300      	movs	r3, #0
 80148f0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d017      	beq.n	8014928 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80148f8:	4b4d      	ldr	r3, [pc, #308]	; (8014a30 <ip4_input+0x27c>)
 80148fa:	691b      	ldr	r3, [r3, #16]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d013      	beq.n	8014928 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014900:	4b4b      	ldr	r3, [pc, #300]	; (8014a30 <ip4_input+0x27c>)
 8014902:	691b      	ldr	r3, [r3, #16]
 8014904:	6839      	ldr	r1, [r7, #0]
 8014906:	4618      	mov	r0, r3
 8014908:	f000 f96e 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 801490c:	4603      	mov	r3, r0
 801490e:	2b00      	cmp	r3, #0
 8014910:	d105      	bne.n	801491e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014912:	4b47      	ldr	r3, [pc, #284]	; (8014a30 <ip4_input+0x27c>)
 8014914:	691b      	ldr	r3, [r3, #16]
 8014916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801491a:	2be0      	cmp	r3, #224	; 0xe0
 801491c:	d104      	bne.n	8014928 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7f6 fd5a 	bl	800b3d8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014924:	2300      	movs	r3, #0
 8014926:	e07e      	b.n	8014a26 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d104      	bne.n	8014938 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f7f6 fd52 	bl	800b3d8 <pbuf_free>
    return ERR_OK;
 8014934:	2300      	movs	r3, #0
 8014936:	e076      	b.n	8014a26 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014938:	69fb      	ldr	r3, [r7, #28]
 801493a:	88db      	ldrh	r3, [r3, #6]
 801493c:	b29b      	uxth	r3, r3
 801493e:	461a      	mov	r2, r3
 8014940:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014944:	4013      	ands	r3, r2
 8014946:	2b00      	cmp	r3, #0
 8014948:	d00b      	beq.n	8014962 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 fc92 	bl	8015274 <ip4_reass>
 8014950:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d101      	bne.n	801495c <ip4_input+0x1a8>
      return ERR_OK;
 8014958:	2300      	movs	r3, #0
 801495a:	e064      	b.n	8014a26 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014962:	4a33      	ldr	r2, [pc, #204]	; (8014a30 <ip4_input+0x27c>)
 8014964:	69bb      	ldr	r3, [r7, #24]
 8014966:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014968:	4a31      	ldr	r2, [pc, #196]	; (8014a30 <ip4_input+0x27c>)
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801496e:	4a30      	ldr	r2, [pc, #192]	; (8014a30 <ip4_input+0x27c>)
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	f003 030f 	and.w	r3, r3, #15
 801497c:	b2db      	uxtb	r3, r3
 801497e:	009b      	lsls	r3, r3, #2
 8014980:	b2db      	uxtb	r3, r3
 8014982:	b29a      	uxth	r2, r3
 8014984:	4b2a      	ldr	r3, [pc, #168]	; (8014a30 <ip4_input+0x27c>)
 8014986:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014988:	8a7b      	ldrh	r3, [r7, #18]
 801498a:	4619      	mov	r1, r3
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f7f6 fc9d 	bl	800b2cc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014992:	69fb      	ldr	r3, [r7, #28]
 8014994:	7a5b      	ldrb	r3, [r3, #9]
 8014996:	2b11      	cmp	r3, #17
 8014998:	d006      	beq.n	80149a8 <ip4_input+0x1f4>
 801499a:	2b11      	cmp	r3, #17
 801499c:	dc13      	bgt.n	80149c6 <ip4_input+0x212>
 801499e:	2b01      	cmp	r3, #1
 80149a0:	d00c      	beq.n	80149bc <ip4_input+0x208>
 80149a2:	2b06      	cmp	r3, #6
 80149a4:	d005      	beq.n	80149b2 <ip4_input+0x1fe>
 80149a6:	e00e      	b.n	80149c6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80149a8:	6839      	ldr	r1, [r7, #0]
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7fc fac4 	bl	8010f38 <udp_input>
        break;
 80149b0:	e026      	b.n	8014a00 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80149b2:	6839      	ldr	r1, [r7, #0]
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7f8 fb47 	bl	800d048 <tcp_input>
        break;
 80149ba:	e021      	b.n	8014a00 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80149bc:	6839      	ldr	r1, [r7, #0]
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f7ff fcaa 	bl	8014318 <icmp_input>
        break;
 80149c4:	e01c      	b.n	8014a00 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80149c6:	4b1a      	ldr	r3, [pc, #104]	; (8014a30 <ip4_input+0x27c>)
 80149c8:	695b      	ldr	r3, [r3, #20]
 80149ca:	69b9      	ldr	r1, [r7, #24]
 80149cc:	4618      	mov	r0, r3
 80149ce:	f000 f90b 	bl	8014be8 <ip4_addr_isbroadcast_u32>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d10f      	bne.n	80149f8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80149d8:	4b15      	ldr	r3, [pc, #84]	; (8014a30 <ip4_input+0x27c>)
 80149da:	695b      	ldr	r3, [r3, #20]
 80149dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80149e0:	2be0      	cmp	r3, #224	; 0xe0
 80149e2:	d009      	beq.n	80149f8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80149e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80149e8:	4619      	mov	r1, r3
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f7f6 fce1 	bl	800b3b2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80149f0:	2102      	movs	r1, #2
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f7ff fdb0 	bl	8014558 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f7f6 fced 	bl	800b3d8 <pbuf_free>
        break;
 80149fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014a00:	4b0b      	ldr	r3, [pc, #44]	; (8014a30 <ip4_input+0x27c>)
 8014a02:	2200      	movs	r2, #0
 8014a04:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014a06:	4b0a      	ldr	r3, [pc, #40]	; (8014a30 <ip4_input+0x27c>)
 8014a08:	2200      	movs	r2, #0
 8014a0a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014a0c:	4b08      	ldr	r3, [pc, #32]	; (8014a30 <ip4_input+0x27c>)
 8014a0e:	2200      	movs	r2, #0
 8014a10:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014a12:	4b07      	ldr	r3, [pc, #28]	; (8014a30 <ip4_input+0x27c>)
 8014a14:	2200      	movs	r2, #0
 8014a16:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014a18:	4b05      	ldr	r3, [pc, #20]	; (8014a30 <ip4_input+0x27c>)
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014a1e:	4b04      	ldr	r3, [pc, #16]	; (8014a30 <ip4_input+0x27c>)
 8014a20:	2200      	movs	r2, #0
 8014a22:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014a24:	2300      	movs	r3, #0
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3720      	adds	r7, #32
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	20005720 	.word	0x20005720
 8014a34:	20008650 	.word	0x20008650

08014a38 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b08a      	sub	sp, #40	; 0x28
 8014a3c:	af04      	add	r7, sp, #16
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	60b9      	str	r1, [r7, #8]
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014a46:	68bb      	ldr	r3, [r7, #8]
 8014a48:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d009      	beq.n	8014a64 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d003      	beq.n	8014a5e <ip4_output_if+0x26>
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d102      	bne.n	8014a64 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a60:	3304      	adds	r3, #4
 8014a62:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014a64:	78fa      	ldrb	r2, [r7, #3]
 8014a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a68:	9302      	str	r3, [sp, #8]
 8014a6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014a6e:	9301      	str	r3, [sp, #4]
 8014a70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014a74:	9300      	str	r3, [sp, #0]
 8014a76:	4613      	mov	r3, r2
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	6979      	ldr	r1, [r7, #20]
 8014a7c:	68f8      	ldr	r0, [r7, #12]
 8014a7e:	f000 f805 	bl	8014a8c <ip4_output_if_src>
 8014a82:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3718      	adds	r7, #24
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b088      	sub	sp, #32
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	60b9      	str	r1, [r7, #8]
 8014a96:	607a      	str	r2, [r7, #4]
 8014a98:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	7b9b      	ldrb	r3, [r3, #14]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d006      	beq.n	8014ab0 <ip4_output_if_src+0x24>
 8014aa2:	4b4b      	ldr	r3, [pc, #300]	; (8014bd0 <ip4_output_if_src+0x144>)
 8014aa4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014aa8:	494a      	ldr	r1, [pc, #296]	; (8014bd4 <ip4_output_if_src+0x148>)
 8014aaa:	484b      	ldr	r0, [pc, #300]	; (8014bd8 <ip4_output_if_src+0x14c>)
 8014aac:	f001 f83c 	bl	8015b28 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d060      	beq.n	8014b78 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014ab6:	2314      	movs	r3, #20
 8014ab8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014aba:	2114      	movs	r1, #20
 8014abc:	68f8      	ldr	r0, [r7, #12]
 8014abe:	f7f6 fbf5 	bl	800b2ac <pbuf_add_header>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d002      	beq.n	8014ace <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014ac8:	f06f 0301 	mvn.w	r3, #1
 8014acc:	e07c      	b.n	8014bc8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	685b      	ldr	r3, [r3, #4]
 8014ad2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	895b      	ldrh	r3, [r3, #10]
 8014ad8:	2b13      	cmp	r3, #19
 8014ada:	d806      	bhi.n	8014aea <ip4_output_if_src+0x5e>
 8014adc:	4b3c      	ldr	r3, [pc, #240]	; (8014bd0 <ip4_output_if_src+0x144>)
 8014ade:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014ae2:	493e      	ldr	r1, [pc, #248]	; (8014bdc <ip4_output_if_src+0x150>)
 8014ae4:	483c      	ldr	r0, [pc, #240]	; (8014bd8 <ip4_output_if_src+0x14c>)
 8014ae6:	f001 f81f 	bl	8015b28 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	78fa      	ldrb	r2, [r7, #3]
 8014aee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014af6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014b00:	8b7b      	ldrh	r3, [r7, #26]
 8014b02:	089b      	lsrs	r3, r3, #2
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b0c:	b2da      	uxtb	r2, r3
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014b12:	69fb      	ldr	r3, [r7, #28]
 8014b14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014b18:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	891b      	ldrh	r3, [r3, #8]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7f5 f858 	bl	8009bd4 <lwip_htons>
 8014b24:	4603      	mov	r3, r0
 8014b26:	461a      	mov	r2, r3
 8014b28:	69fb      	ldr	r3, [r7, #28]
 8014b2a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	2200      	movs	r2, #0
 8014b30:	719a      	strb	r2, [r3, #6]
 8014b32:	2200      	movs	r2, #0
 8014b34:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014b36:	4b2a      	ldr	r3, [pc, #168]	; (8014be0 <ip4_output_if_src+0x154>)
 8014b38:	881b      	ldrh	r3, [r3, #0]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7f5 f84a 	bl	8009bd4 <lwip_htons>
 8014b40:	4603      	mov	r3, r0
 8014b42:	461a      	mov	r2, r3
 8014b44:	69fb      	ldr	r3, [r7, #28]
 8014b46:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014b48:	4b25      	ldr	r3, [pc, #148]	; (8014be0 <ip4_output_if_src+0x154>)
 8014b4a:	881b      	ldrh	r3, [r3, #0]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	b29a      	uxth	r2, r3
 8014b50:	4b23      	ldr	r3, [pc, #140]	; (8014be0 <ip4_output_if_src+0x154>)
 8014b52:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d104      	bne.n	8014b64 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014b5a:	4b22      	ldr	r3, [pc, #136]	; (8014be4 <ip4_output_if_src+0x158>)
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	69fb      	ldr	r3, [r7, #28]
 8014b60:	60da      	str	r2, [r3, #12]
 8014b62:	e003      	b.n	8014b6c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	681a      	ldr	r2, [r3, #0]
 8014b68:	69fb      	ldr	r3, [r7, #28]
 8014b6a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014b6c:	69fb      	ldr	r3, [r7, #28]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	729a      	strb	r2, [r3, #10]
 8014b72:	2200      	movs	r2, #0
 8014b74:	72da      	strb	r2, [r3, #11]
 8014b76:	e00f      	b.n	8014b98 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	895b      	ldrh	r3, [r3, #10]
 8014b7c:	2b13      	cmp	r3, #19
 8014b7e:	d802      	bhi.n	8014b86 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b80:	f06f 0301 	mvn.w	r3, #1
 8014b84:	e020      	b.n	8014bc8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	685b      	ldr	r3, [r3, #4]
 8014b8a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	691b      	ldr	r3, [r3, #16]
 8014b90:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014b92:	f107 0314 	add.w	r3, r7, #20
 8014b96:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d00c      	beq.n	8014bba <ip4_output_if_src+0x12e>
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	891a      	ldrh	r2, [r3, #8]
 8014ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	d906      	bls.n	8014bba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014bb0:	68f8      	ldr	r0, [r7, #12]
 8014bb2:	f000 fd53 	bl	801565c <ip4_frag>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	e006      	b.n	8014bc8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bbc:	695b      	ldr	r3, [r3, #20]
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	68f9      	ldr	r1, [r7, #12]
 8014bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bc4:	4798      	blx	r3
 8014bc6:	4603      	mov	r3, r0
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3720      	adds	r7, #32
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}
 8014bd0:	08019614 	.word	0x08019614
 8014bd4:	08019648 	.word	0x08019648
 8014bd8:	08019654 	.word	0x08019654
 8014bdc:	0801967c 	.word	0x0801967c
 8014be0:	200087e2 	.word	0x200087e2
 8014be4:	08019a74 	.word	0x08019a74

08014be8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b085      	sub	sp, #20
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bfc:	d002      	beq.n	8014c04 <ip4_addr_isbroadcast_u32+0x1c>
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d101      	bne.n	8014c08 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014c04:	2301      	movs	r3, #1
 8014c06:	e02a      	b.n	8014c5e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c0e:	f003 0302 	and.w	r3, r3, #2
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d101      	bne.n	8014c1a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014c16:	2300      	movs	r3, #0
 8014c18:	e021      	b.n	8014c5e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	3304      	adds	r3, #4
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	687a      	ldr	r2, [r7, #4]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d101      	bne.n	8014c2a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014c26:	2300      	movs	r3, #0
 8014c28:	e019      	b.n	8014c5e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014c2a:	68fa      	ldr	r2, [r7, #12]
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	3304      	adds	r3, #4
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	405a      	eors	r2, r3
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	3308      	adds	r3, #8
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	4013      	ands	r3, r2
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d10d      	bne.n	8014c5c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	3308      	adds	r3, #8
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	43da      	mvns	r2, r3
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	3308      	adds	r3, #8
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d101      	bne.n	8014c5c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014c58:	2301      	movs	r3, #1
 8014c5a:	e000      	b.n	8014c5e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014c5c:	2300      	movs	r3, #0
  }
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3714      	adds	r7, #20
 8014c62:	46bd      	mov	sp, r7
 8014c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c68:	4770      	bx	lr
	...

08014c6c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014c72:	2300      	movs	r3, #0
 8014c74:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014c76:	4b12      	ldr	r3, [pc, #72]	; (8014cc0 <ip_reass_tmr+0x54>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014c7c:	e018      	b.n	8014cb0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	7fdb      	ldrb	r3, [r3, #31]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d00b      	beq.n	8014c9e <ip_reass_tmr+0x32>
      r->timer--;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	7fdb      	ldrb	r3, [r3, #31]
 8014c8a:	3b01      	subs	r3, #1
 8014c8c:	b2da      	uxtb	r2, r3
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	60fb      	str	r3, [r7, #12]
 8014c9c:	e008      	b.n	8014cb0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014ca8:	68b9      	ldr	r1, [r7, #8]
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f000 f80a 	bl	8014cc4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d1e3      	bne.n	8014c7e <ip_reass_tmr+0x12>
    }
  }
}
 8014cb6:	bf00      	nop
 8014cb8:	bf00      	nop
 8014cba:	3710      	adds	r7, #16
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	200087e4 	.word	0x200087e4

08014cc4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b088      	sub	sp, #32
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014cd2:	683a      	ldr	r2, [r7, #0]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	d105      	bne.n	8014ce6 <ip_reass_free_complete_datagram+0x22>
 8014cda:	4b45      	ldr	r3, [pc, #276]	; (8014df0 <ip_reass_free_complete_datagram+0x12c>)
 8014cdc:	22ab      	movs	r2, #171	; 0xab
 8014cde:	4945      	ldr	r1, [pc, #276]	; (8014df4 <ip_reass_free_complete_datagram+0x130>)
 8014ce0:	4845      	ldr	r0, [pc, #276]	; (8014df8 <ip_reass_free_complete_datagram+0x134>)
 8014ce2:	f000 ff21 	bl	8015b28 <iprintf>
  if (prev != NULL) {
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d00a      	beq.n	8014d02 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d005      	beq.n	8014d02 <ip_reass_free_complete_datagram+0x3e>
 8014cf6:	4b3e      	ldr	r3, [pc, #248]	; (8014df0 <ip_reass_free_complete_datagram+0x12c>)
 8014cf8:	22ad      	movs	r2, #173	; 0xad
 8014cfa:	4940      	ldr	r1, [pc, #256]	; (8014dfc <ip_reass_free_complete_datagram+0x138>)
 8014cfc:	483e      	ldr	r0, [pc, #248]	; (8014df8 <ip_reass_free_complete_datagram+0x134>)
 8014cfe:	f000 ff13 	bl	8015b28 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	889b      	ldrh	r3, [r3, #4]
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d12a      	bne.n	8014d6a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	681a      	ldr	r2, [r3, #0]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014d22:	69bb      	ldr	r3, [r7, #24]
 8014d24:	6858      	ldr	r0, [r3, #4]
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	3308      	adds	r3, #8
 8014d2a:	2214      	movs	r2, #20
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	f000 fee5 	bl	8015afc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014d32:	2101      	movs	r1, #1
 8014d34:	69b8      	ldr	r0, [r7, #24]
 8014d36:	f7ff fc1f 	bl	8014578 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014d3a:	69b8      	ldr	r0, [r7, #24]
 8014d3c:	f7f6 fbd4 	bl	800b4e8 <pbuf_clen>
 8014d40:	4603      	mov	r3, r0
 8014d42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014d44:	8bfa      	ldrh	r2, [r7, #30]
 8014d46:	8a7b      	ldrh	r3, [r7, #18]
 8014d48:	4413      	add	r3, r2
 8014d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d4e:	db05      	blt.n	8014d5c <ip_reass_free_complete_datagram+0x98>
 8014d50:	4b27      	ldr	r3, [pc, #156]	; (8014df0 <ip_reass_free_complete_datagram+0x12c>)
 8014d52:	22bc      	movs	r2, #188	; 0xbc
 8014d54:	492a      	ldr	r1, [pc, #168]	; (8014e00 <ip_reass_free_complete_datagram+0x13c>)
 8014d56:	4828      	ldr	r0, [pc, #160]	; (8014df8 <ip_reass_free_complete_datagram+0x134>)
 8014d58:	f000 fee6 	bl	8015b28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014d5c:	8bfa      	ldrh	r2, [r7, #30]
 8014d5e:	8a7b      	ldrh	r3, [r7, #18]
 8014d60:	4413      	add	r3, r2
 8014d62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014d64:	69b8      	ldr	r0, [r7, #24]
 8014d66:	f7f6 fb37 	bl	800b3d8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014d70:	e01f      	b.n	8014db2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014d72:	69bb      	ldr	r3, [r7, #24]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014d78:	69bb      	ldr	r3, [r7, #24]
 8014d7a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014d82:	68f8      	ldr	r0, [r7, #12]
 8014d84:	f7f6 fbb0 	bl	800b4e8 <pbuf_clen>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014d8c:	8bfa      	ldrh	r2, [r7, #30]
 8014d8e:	8a7b      	ldrh	r3, [r7, #18]
 8014d90:	4413      	add	r3, r2
 8014d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d96:	db05      	blt.n	8014da4 <ip_reass_free_complete_datagram+0xe0>
 8014d98:	4b15      	ldr	r3, [pc, #84]	; (8014df0 <ip_reass_free_complete_datagram+0x12c>)
 8014d9a:	22cc      	movs	r2, #204	; 0xcc
 8014d9c:	4918      	ldr	r1, [pc, #96]	; (8014e00 <ip_reass_free_complete_datagram+0x13c>)
 8014d9e:	4816      	ldr	r0, [pc, #88]	; (8014df8 <ip_reass_free_complete_datagram+0x134>)
 8014da0:	f000 fec2 	bl	8015b28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014da4:	8bfa      	ldrh	r2, [r7, #30]
 8014da6:	8a7b      	ldrh	r3, [r7, #18]
 8014da8:	4413      	add	r3, r2
 8014daa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014dac:	68f8      	ldr	r0, [r7, #12]
 8014dae:	f7f6 fb13 	bl	800b3d8 <pbuf_free>
  while (p != NULL) {
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d1dc      	bne.n	8014d72 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014db8:	6839      	ldr	r1, [r7, #0]
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f000 f8c2 	bl	8014f44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014dc0:	4b10      	ldr	r3, [pc, #64]	; (8014e04 <ip_reass_free_complete_datagram+0x140>)
 8014dc2:	881b      	ldrh	r3, [r3, #0]
 8014dc4:	8bfa      	ldrh	r2, [r7, #30]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d905      	bls.n	8014dd6 <ip_reass_free_complete_datagram+0x112>
 8014dca:	4b09      	ldr	r3, [pc, #36]	; (8014df0 <ip_reass_free_complete_datagram+0x12c>)
 8014dcc:	22d2      	movs	r2, #210	; 0xd2
 8014dce:	490e      	ldr	r1, [pc, #56]	; (8014e08 <ip_reass_free_complete_datagram+0x144>)
 8014dd0:	4809      	ldr	r0, [pc, #36]	; (8014df8 <ip_reass_free_complete_datagram+0x134>)
 8014dd2:	f000 fea9 	bl	8015b28 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014dd6:	4b0b      	ldr	r3, [pc, #44]	; (8014e04 <ip_reass_free_complete_datagram+0x140>)
 8014dd8:	881a      	ldrh	r2, [r3, #0]
 8014dda:	8bfb      	ldrh	r3, [r7, #30]
 8014ddc:	1ad3      	subs	r3, r2, r3
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	4b08      	ldr	r3, [pc, #32]	; (8014e04 <ip_reass_free_complete_datagram+0x140>)
 8014de2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014de4:	8bfb      	ldrh	r3, [r7, #30]
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3720      	adds	r7, #32
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	080196ac 	.word	0x080196ac
 8014df4:	080196e8 	.word	0x080196e8
 8014df8:	080196f4 	.word	0x080196f4
 8014dfc:	0801971c 	.word	0x0801971c
 8014e00:	08019730 	.word	0x08019730
 8014e04:	200087e8 	.word	0x200087e8
 8014e08:	08019750 	.word	0x08019750

08014e0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b08a      	sub	sp, #40	; 0x28
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014e16:	2300      	movs	r3, #0
 8014e18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014e22:	2300      	movs	r3, #0
 8014e24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014e26:	2300      	movs	r3, #0
 8014e28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014e2a:	4b28      	ldr	r3, [pc, #160]	; (8014ecc <ip_reass_remove_oldest_datagram+0xc0>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014e30:	e030      	b.n	8014e94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e34:	695a      	ldr	r2, [r3, #20]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d10c      	bne.n	8014e58 <ip_reass_remove_oldest_datagram+0x4c>
 8014e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e40:	699a      	ldr	r2, [r3, #24]
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	691b      	ldr	r3, [r3, #16]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d106      	bne.n	8014e58 <ip_reass_remove_oldest_datagram+0x4c>
 8014e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4c:	899a      	ldrh	r2, [r3, #12]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	889b      	ldrh	r3, [r3, #4]
 8014e52:	b29b      	uxth	r3, r3
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d014      	beq.n	8014e82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014e5e:	6a3b      	ldr	r3, [r7, #32]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d104      	bne.n	8014e6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014e68:	69fb      	ldr	r3, [r7, #28]
 8014e6a:	61bb      	str	r3, [r7, #24]
 8014e6c:	e009      	b.n	8014e82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e70:	7fda      	ldrb	r2, [r3, #31]
 8014e72:	6a3b      	ldr	r3, [r7, #32]
 8014e74:	7fdb      	ldrb	r3, [r3, #31]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d803      	bhi.n	8014e82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014e7e:	69fb      	ldr	r3, [r7, #28]
 8014e80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d001      	beq.n	8014e8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d1cb      	bne.n	8014e32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014e9a:	6a3b      	ldr	r3, [r7, #32]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d008      	beq.n	8014eb2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014ea0:	69b9      	ldr	r1, [r7, #24]
 8014ea2:	6a38      	ldr	r0, [r7, #32]
 8014ea4:	f7ff ff0e 	bl	8014cc4 <ip_reass_free_complete_datagram>
 8014ea8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014eaa:	697a      	ldr	r2, [r7, #20]
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	4413      	add	r3, r2
 8014eb0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014eb2:	697a      	ldr	r2, [r7, #20]
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	da02      	bge.n	8014ec0 <ip_reass_remove_oldest_datagram+0xb4>
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	2b01      	cmp	r3, #1
 8014ebe:	dcac      	bgt.n	8014e1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014ec0:	697b      	ldr	r3, [r7, #20]
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3728      	adds	r7, #40	; 0x28
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	200087e4 	.word	0x200087e4

08014ed0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014eda:	2004      	movs	r0, #4
 8014edc:	f7f5 fbaa 	bl	800a634 <memp_malloc>
 8014ee0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d110      	bne.n	8014f0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014ee8:	6839      	ldr	r1, [r7, #0]
 8014eea:	6878      	ldr	r0, [r7, #4]
 8014eec:	f7ff ff8e 	bl	8014e0c <ip_reass_remove_oldest_datagram>
 8014ef0:	4602      	mov	r2, r0
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	4293      	cmp	r3, r2
 8014ef6:	dc03      	bgt.n	8014f00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014ef8:	2004      	movs	r0, #4
 8014efa:	f7f5 fb9b 	bl	800a634 <memp_malloc>
 8014efe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d101      	bne.n	8014f0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014f06:	2300      	movs	r3, #0
 8014f08:	e016      	b.n	8014f38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014f0a:	2220      	movs	r2, #32
 8014f0c:	2100      	movs	r1, #0
 8014f0e:	68f8      	ldr	r0, [r7, #12]
 8014f10:	f000 fe02 	bl	8015b18 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	220f      	movs	r2, #15
 8014f18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014f1a:	4b09      	ldr	r3, [pc, #36]	; (8014f40 <ip_reass_enqueue_new_datagram+0x70>)
 8014f1c:	681a      	ldr	r2, [r3, #0]
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014f22:	4a07      	ldr	r2, [pc, #28]	; (8014f40 <ip_reass_enqueue_new_datagram+0x70>)
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	3308      	adds	r3, #8
 8014f2c:	2214      	movs	r2, #20
 8014f2e:	6879      	ldr	r1, [r7, #4]
 8014f30:	4618      	mov	r0, r3
 8014f32:	f000 fde3 	bl	8015afc <memcpy>
  return ipr;
 8014f36:	68fb      	ldr	r3, [r7, #12]
}
 8014f38:	4618      	mov	r0, r3
 8014f3a:	3710      	adds	r7, #16
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}
 8014f40:	200087e4 	.word	0x200087e4

08014f44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b082      	sub	sp, #8
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014f4e:	4b10      	ldr	r3, [pc, #64]	; (8014f90 <ip_reass_dequeue_datagram+0x4c>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	687a      	ldr	r2, [r7, #4]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d104      	bne.n	8014f62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	4a0c      	ldr	r2, [pc, #48]	; (8014f90 <ip_reass_dequeue_datagram+0x4c>)
 8014f5e:	6013      	str	r3, [r2, #0]
 8014f60:	e00d      	b.n	8014f7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d106      	bne.n	8014f76 <ip_reass_dequeue_datagram+0x32>
 8014f68:	4b0a      	ldr	r3, [pc, #40]	; (8014f94 <ip_reass_dequeue_datagram+0x50>)
 8014f6a:	f240 1245 	movw	r2, #325	; 0x145
 8014f6e:	490a      	ldr	r1, [pc, #40]	; (8014f98 <ip_reass_dequeue_datagram+0x54>)
 8014f70:	480a      	ldr	r0, [pc, #40]	; (8014f9c <ip_reass_dequeue_datagram+0x58>)
 8014f72:	f000 fdd9 	bl	8015b28 <iprintf>
    prev->next = ipr->next;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681a      	ldr	r2, [r3, #0]
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014f7e:	6879      	ldr	r1, [r7, #4]
 8014f80:	2004      	movs	r0, #4
 8014f82:	f7f5 fbc7 	bl	800a714 <memp_free>
}
 8014f86:	bf00      	nop
 8014f88:	3708      	adds	r7, #8
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	200087e4 	.word	0x200087e4
 8014f94:	080196ac 	.word	0x080196ac
 8014f98:	08019774 	.word	0x08019774
 8014f9c:	080196f4 	.word	0x080196f4

08014fa0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b08c      	sub	sp, #48	; 0x30
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	60f8      	str	r0, [r7, #12]
 8014fa8:	60b9      	str	r1, [r7, #8]
 8014faa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014fac:	2300      	movs	r3, #0
 8014fae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014fba:	69fb      	ldr	r3, [r7, #28]
 8014fbc:	885b      	ldrh	r3, [r3, #2]
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7f4 fe07 	bl	8009bd4 <lwip_htons>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014fca:	69fb      	ldr	r3, [r7, #28]
 8014fcc:	781b      	ldrb	r3, [r3, #0]
 8014fce:	f003 030f 	and.w	r3, r3, #15
 8014fd2:	b2db      	uxtb	r3, r3
 8014fd4:	009b      	lsls	r3, r3, #2
 8014fd6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014fd8:	7e7b      	ldrb	r3, [r7, #25]
 8014fda:	b29b      	uxth	r3, r3
 8014fdc:	8b7a      	ldrh	r2, [r7, #26]
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d202      	bcs.n	8014fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8014fe6:	e135      	b.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014fe8:	7e7b      	ldrb	r3, [r7, #25]
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	8b7a      	ldrh	r2, [r7, #26]
 8014fee:	1ad3      	subs	r3, r2, r3
 8014ff0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014ff2:	69fb      	ldr	r3, [r7, #28]
 8014ff4:	88db      	ldrh	r3, [r3, #6]
 8014ff6:	b29b      	uxth	r3, r3
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7f4 fdeb 	bl	8009bd4 <lwip_htons>
 8014ffe:	4603      	mov	r3, r0
 8015000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015004:	b29b      	uxth	r3, r3
 8015006:	00db      	lsls	r3, r3, #3
 8015008:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015012:	2200      	movs	r2, #0
 8015014:	701a      	strb	r2, [r3, #0]
 8015016:	2200      	movs	r2, #0
 8015018:	705a      	strb	r2, [r3, #1]
 801501a:	2200      	movs	r2, #0
 801501c:	709a      	strb	r2, [r3, #2]
 801501e:	2200      	movs	r2, #0
 8015020:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015024:	8afa      	ldrh	r2, [r7, #22]
 8015026:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015028:	8afa      	ldrh	r2, [r7, #22]
 801502a:	8b7b      	ldrh	r3, [r7, #26]
 801502c:	4413      	add	r3, r2
 801502e:	b29a      	uxth	r2, r3
 8015030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015032:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015036:	88db      	ldrh	r3, [r3, #6]
 8015038:	b29b      	uxth	r3, r3
 801503a:	8afa      	ldrh	r2, [r7, #22]
 801503c:	429a      	cmp	r2, r3
 801503e:	d902      	bls.n	8015046 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015040:	f04f 33ff 	mov.w	r3, #4294967295
 8015044:	e106      	b.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	685b      	ldr	r3, [r3, #4]
 801504a:	627b      	str	r3, [r7, #36]	; 0x24
 801504c:	e068      	b.n	8015120 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015056:	889b      	ldrh	r3, [r3, #4]
 8015058:	b29a      	uxth	r2, r3
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	889b      	ldrh	r3, [r3, #4]
 801505e:	b29b      	uxth	r3, r3
 8015060:	429a      	cmp	r2, r3
 8015062:	d235      	bcs.n	80150d0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015068:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506c:	2b00      	cmp	r3, #0
 801506e:	d020      	beq.n	80150b2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015072:	889b      	ldrh	r3, [r3, #4]
 8015074:	b29a      	uxth	r2, r3
 8015076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015078:	88db      	ldrh	r3, [r3, #6]
 801507a:	b29b      	uxth	r3, r3
 801507c:	429a      	cmp	r2, r3
 801507e:	d307      	bcc.n	8015090 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015082:	88db      	ldrh	r3, [r3, #6]
 8015084:	b29a      	uxth	r2, r3
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	889b      	ldrh	r3, [r3, #4]
 801508a:	b29b      	uxth	r3, r3
 801508c:	429a      	cmp	r2, r3
 801508e:	d902      	bls.n	8015096 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015090:	f04f 33ff 	mov.w	r3, #4294967295
 8015094:	e0de      	b.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015098:	68ba      	ldr	r2, [r7, #8]
 801509a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801509e:	88db      	ldrh	r3, [r3, #6]
 80150a0:	b29a      	uxth	r2, r3
 80150a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150a4:	889b      	ldrh	r3, [r3, #4]
 80150a6:	b29b      	uxth	r3, r3
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d03d      	beq.n	8015128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80150ac:	2300      	movs	r3, #0
 80150ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80150b0:	e03a      	b.n	8015128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80150b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b4:	88db      	ldrh	r3, [r3, #6]
 80150b6:	b29a      	uxth	r2, r3
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	889b      	ldrh	r3, [r3, #4]
 80150bc:	b29b      	uxth	r3, r3
 80150be:	429a      	cmp	r2, r3
 80150c0:	d902      	bls.n	80150c8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150c2:	f04f 33ff 	mov.w	r3, #4294967295
 80150c6:	e0c5      	b.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	68ba      	ldr	r2, [r7, #8]
 80150cc:	605a      	str	r2, [r3, #4]
      break;
 80150ce:	e02b      	b.n	8015128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80150d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d2:	889b      	ldrh	r3, [r3, #4]
 80150d4:	b29a      	uxth	r2, r3
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	889b      	ldrh	r3, [r3, #4]
 80150da:	b29b      	uxth	r3, r3
 80150dc:	429a      	cmp	r2, r3
 80150de:	d102      	bne.n	80150e6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150e0:	f04f 33ff 	mov.w	r3, #4294967295
 80150e4:	e0b6      	b.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80150e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e8:	889b      	ldrh	r3, [r3, #4]
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	88db      	ldrh	r3, [r3, #6]
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d202      	bcs.n	80150fc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150f6:	f04f 33ff 	mov.w	r3, #4294967295
 80150fa:	e0ab      	b.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80150fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d009      	beq.n	8015116 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015104:	88db      	ldrh	r3, [r3, #6]
 8015106:	b29a      	uxth	r2, r3
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	889b      	ldrh	r3, [r3, #4]
 801510c:	b29b      	uxth	r3, r3
 801510e:	429a      	cmp	r2, r3
 8015110:	d001      	beq.n	8015116 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015112:	2300      	movs	r3, #0
 8015114:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015122:	2b00      	cmp	r3, #0
 8015124:	d193      	bne.n	801504e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015126:	e000      	b.n	801512a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015128:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512c:	2b00      	cmp	r3, #0
 801512e:	d12d      	bne.n	801518c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015132:	2b00      	cmp	r3, #0
 8015134:	d01c      	beq.n	8015170 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015138:	88db      	ldrh	r3, [r3, #6]
 801513a:	b29a      	uxth	r2, r3
 801513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801513e:	889b      	ldrh	r3, [r3, #4]
 8015140:	b29b      	uxth	r3, r3
 8015142:	429a      	cmp	r2, r3
 8015144:	d906      	bls.n	8015154 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015146:	4b45      	ldr	r3, [pc, #276]	; (801525c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015148:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801514c:	4944      	ldr	r1, [pc, #272]	; (8015260 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801514e:	4845      	ldr	r0, [pc, #276]	; (8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015150:	f000 fcea 	bl	8015b28 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015156:	68ba      	ldr	r2, [r7, #8]
 8015158:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515c:	88db      	ldrh	r3, [r3, #6]
 801515e:	b29a      	uxth	r2, r3
 8015160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015162:	889b      	ldrh	r3, [r3, #4]
 8015164:	b29b      	uxth	r3, r3
 8015166:	429a      	cmp	r2, r3
 8015168:	d010      	beq.n	801518c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801516a:	2300      	movs	r3, #0
 801516c:	623b      	str	r3, [r7, #32]
 801516e:	e00d      	b.n	801518c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d006      	beq.n	8015186 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015178:	4b38      	ldr	r3, [pc, #224]	; (801525c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801517a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801517e:	493a      	ldr	r1, [pc, #232]	; (8015268 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015180:	4838      	ldr	r0, [pc, #224]	; (8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015182:	f000 fcd1 	bl	8015b28 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	68ba      	ldr	r2, [r7, #8]
 801518a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d105      	bne.n	801519e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	7f9b      	ldrb	r3, [r3, #30]
 8015196:	f003 0301 	and.w	r3, r3, #1
 801519a:	2b00      	cmp	r3, #0
 801519c:	d059      	beq.n	8015252 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801519e:	6a3b      	ldr	r3, [r7, #32]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d04f      	beq.n	8015244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	685b      	ldr	r3, [r3, #4]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d006      	beq.n	80151ba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	685b      	ldr	r3, [r3, #4]
 80151b0:	685b      	ldr	r3, [r3, #4]
 80151b2:	889b      	ldrh	r3, [r3, #4]
 80151b4:	b29b      	uxth	r3, r3
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d002      	beq.n	80151c0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80151ba:	2300      	movs	r3, #0
 80151bc:	623b      	str	r3, [r7, #32]
 80151be:	e041      	b.n	8015244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80151c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80151c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80151ca:	e012      	b.n	80151f2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80151cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80151d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d4:	88db      	ldrh	r3, [r3, #6]
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151da:	889b      	ldrh	r3, [r3, #4]
 80151dc:	b29b      	uxth	r3, r3
 80151de:	429a      	cmp	r2, r3
 80151e0:	d002      	beq.n	80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80151e2:	2300      	movs	r3, #0
 80151e4:	623b      	str	r3, [r7, #32]
            break;
 80151e6:	e007      	b.n	80151f8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80151e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151ea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80151ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d1e9      	bne.n	80151cc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80151f8:	6a3b      	ldr	r3, [r7, #32]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d022      	beq.n	8015244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d106      	bne.n	8015214 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015206:	4b15      	ldr	r3, [pc, #84]	; (801525c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015208:	f240 12df 	movw	r2, #479	; 0x1df
 801520c:	4917      	ldr	r1, [pc, #92]	; (801526c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801520e:	4815      	ldr	r0, [pc, #84]	; (8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015210:	f000 fc8a 	bl	8015b28 <iprintf>
          LWIP_ASSERT("sanity check",
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	685b      	ldr	r3, [r3, #4]
 801521a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801521c:	429a      	cmp	r2, r3
 801521e:	d106      	bne.n	801522e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015220:	4b0e      	ldr	r3, [pc, #56]	; (801525c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015222:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015226:	4911      	ldr	r1, [pc, #68]	; (801526c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015228:	480e      	ldr	r0, [pc, #56]	; (8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801522a:	f000 fc7d 	bl	8015b28 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d006      	beq.n	8015244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015236:	4b09      	ldr	r3, [pc, #36]	; (801525c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015238:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801523c:	490c      	ldr	r1, [pc, #48]	; (8015270 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801523e:	4809      	ldr	r0, [pc, #36]	; (8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015240:	f000 fc72 	bl	8015b28 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015244:	6a3b      	ldr	r3, [r7, #32]
 8015246:	2b00      	cmp	r3, #0
 8015248:	bf14      	ite	ne
 801524a:	2301      	movne	r3, #1
 801524c:	2300      	moveq	r3, #0
 801524e:	b2db      	uxtb	r3, r3
 8015250:	e000      	b.n	8015254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015252:	2300      	movs	r3, #0
}
 8015254:	4618      	mov	r0, r3
 8015256:	3730      	adds	r7, #48	; 0x30
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}
 801525c:	080196ac 	.word	0x080196ac
 8015260:	08019790 	.word	0x08019790
 8015264:	080196f4 	.word	0x080196f4
 8015268:	080197b0 	.word	0x080197b0
 801526c:	080197e8 	.word	0x080197e8
 8015270:	080197f8 	.word	0x080197f8

08015274 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b08e      	sub	sp, #56	; 0x38
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	685b      	ldr	r3, [r3, #4]
 8015280:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015284:	781b      	ldrb	r3, [r3, #0]
 8015286:	f003 030f 	and.w	r3, r3, #15
 801528a:	b2db      	uxtb	r3, r3
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	b2db      	uxtb	r3, r3
 8015290:	2b14      	cmp	r3, #20
 8015292:	f040 8171 	bne.w	8015578 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015298:	88db      	ldrh	r3, [r3, #6]
 801529a:	b29b      	uxth	r3, r3
 801529c:	4618      	mov	r0, r3
 801529e:	f7f4 fc99 	bl	8009bd4 <lwip_htons>
 80152a2:	4603      	mov	r3, r0
 80152a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	00db      	lsls	r3, r3, #3
 80152ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80152ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b0:	885b      	ldrh	r3, [r3, #2]
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7f4 fc8d 	bl	8009bd4 <lwip_htons>
 80152ba:	4603      	mov	r3, r0
 80152bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80152be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	f003 030f 	and.w	r3, r3, #15
 80152c6:	b2db      	uxtb	r3, r3
 80152c8:	009b      	lsls	r3, r3, #2
 80152ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80152ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80152d2:	b29b      	uxth	r3, r3
 80152d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80152d6:	429a      	cmp	r2, r3
 80152d8:	f0c0 8150 	bcc.w	801557c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80152dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80152e4:	1ad3      	subs	r3, r2, r3
 80152e6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f7f6 f8fd 	bl	800b4e8 <pbuf_clen>
 80152ee:	4603      	mov	r3, r0
 80152f0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80152f2:	4b8c      	ldr	r3, [pc, #560]	; (8015524 <ip4_reass+0x2b0>)
 80152f4:	881b      	ldrh	r3, [r3, #0]
 80152f6:	461a      	mov	r2, r3
 80152f8:	8c3b      	ldrh	r3, [r7, #32]
 80152fa:	4413      	add	r3, r2
 80152fc:	2b0a      	cmp	r3, #10
 80152fe:	dd10      	ble.n	8015322 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015300:	8c3b      	ldrh	r3, [r7, #32]
 8015302:	4619      	mov	r1, r3
 8015304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015306:	f7ff fd81 	bl	8014e0c <ip_reass_remove_oldest_datagram>
 801530a:	4603      	mov	r3, r0
 801530c:	2b00      	cmp	r3, #0
 801530e:	f000 8137 	beq.w	8015580 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015312:	4b84      	ldr	r3, [pc, #528]	; (8015524 <ip4_reass+0x2b0>)
 8015314:	881b      	ldrh	r3, [r3, #0]
 8015316:	461a      	mov	r2, r3
 8015318:	8c3b      	ldrh	r3, [r7, #32]
 801531a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801531c:	2b0a      	cmp	r3, #10
 801531e:	f300 812f 	bgt.w	8015580 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015322:	4b81      	ldr	r3, [pc, #516]	; (8015528 <ip4_reass+0x2b4>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	633b      	str	r3, [r7, #48]	; 0x30
 8015328:	e015      	b.n	8015356 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801532c:	695a      	ldr	r2, [r3, #20]
 801532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015330:	68db      	ldr	r3, [r3, #12]
 8015332:	429a      	cmp	r2, r3
 8015334:	d10c      	bne.n	8015350 <ip4_reass+0xdc>
 8015336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015338:	699a      	ldr	r2, [r3, #24]
 801533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801533c:	691b      	ldr	r3, [r3, #16]
 801533e:	429a      	cmp	r2, r3
 8015340:	d106      	bne.n	8015350 <ip4_reass+0xdc>
 8015342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015344:	899a      	ldrh	r2, [r3, #12]
 8015346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015348:	889b      	ldrh	r3, [r3, #4]
 801534a:	b29b      	uxth	r3, r3
 801534c:	429a      	cmp	r2, r3
 801534e:	d006      	beq.n	801535e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	633b      	str	r3, [r7, #48]	; 0x30
 8015356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015358:	2b00      	cmp	r3, #0
 801535a:	d1e6      	bne.n	801532a <ip4_reass+0xb6>
 801535c:	e000      	b.n	8015360 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801535e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015362:	2b00      	cmp	r3, #0
 8015364:	d109      	bne.n	801537a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015366:	8c3b      	ldrh	r3, [r7, #32]
 8015368:	4619      	mov	r1, r3
 801536a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801536c:	f7ff fdb0 	bl	8014ed0 <ip_reass_enqueue_new_datagram>
 8015370:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015374:	2b00      	cmp	r3, #0
 8015376:	d11c      	bne.n	80153b2 <ip4_reass+0x13e>
      goto nullreturn;
 8015378:	e105      	b.n	8015586 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801537c:	88db      	ldrh	r3, [r3, #6]
 801537e:	b29b      	uxth	r3, r3
 8015380:	4618      	mov	r0, r3
 8015382:	f7f4 fc27 	bl	8009bd4 <lwip_htons>
 8015386:	4603      	mov	r3, r0
 8015388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801538c:	2b00      	cmp	r3, #0
 801538e:	d110      	bne.n	80153b2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015392:	89db      	ldrh	r3, [r3, #14]
 8015394:	4618      	mov	r0, r3
 8015396:	f7f4 fc1d 	bl	8009bd4 <lwip_htons>
 801539a:	4603      	mov	r3, r0
 801539c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d006      	beq.n	80153b2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80153a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a6:	3308      	adds	r3, #8
 80153a8:	2214      	movs	r2, #20
 80153aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80153ac:	4618      	mov	r0, r3
 80153ae:	f000 fba5 	bl	8015afc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80153b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153b4:	88db      	ldrh	r3, [r3, #6]
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	f003 0320 	and.w	r3, r3, #32
 80153bc:	2b00      	cmp	r3, #0
 80153be:	bf0c      	ite	eq
 80153c0:	2301      	moveq	r3, #1
 80153c2:	2300      	movne	r3, #0
 80153c4:	b2db      	uxtb	r3, r3
 80153c6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d00e      	beq.n	80153ec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80153ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80153d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153d2:	4413      	add	r3, r2
 80153d4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80153d6:	8b7a      	ldrh	r2, [r7, #26]
 80153d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80153da:	429a      	cmp	r2, r3
 80153dc:	f0c0 80a0 	bcc.w	8015520 <ip4_reass+0x2ac>
 80153e0:	8b7b      	ldrh	r3, [r7, #26]
 80153e2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80153e6:	4293      	cmp	r3, r2
 80153e8:	f200 809a 	bhi.w	8015520 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80153ec:	69fa      	ldr	r2, [r7, #28]
 80153ee:	6879      	ldr	r1, [r7, #4]
 80153f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153f2:	f7ff fdd5 	bl	8014fa0 <ip_reass_chain_frag_into_datagram_and_validate>
 80153f6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153fe:	f000 809b 	beq.w	8015538 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015402:	4b48      	ldr	r3, [pc, #288]	; (8015524 <ip4_reass+0x2b0>)
 8015404:	881a      	ldrh	r2, [r3, #0]
 8015406:	8c3b      	ldrh	r3, [r7, #32]
 8015408:	4413      	add	r3, r2
 801540a:	b29a      	uxth	r2, r3
 801540c:	4b45      	ldr	r3, [pc, #276]	; (8015524 <ip4_reass+0x2b0>)
 801540e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015410:	69fb      	ldr	r3, [r7, #28]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d00d      	beq.n	8015432 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015416:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801541a:	4413      	add	r3, r2
 801541c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015420:	8a7a      	ldrh	r2, [r7, #18]
 8015422:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015426:	7f9b      	ldrb	r3, [r3, #30]
 8015428:	f043 0301 	orr.w	r3, r3, #1
 801542c:	b2da      	uxtb	r2, r3
 801542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015430:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	2b01      	cmp	r3, #1
 8015436:	d171      	bne.n	801551c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801543a:	8b9b      	ldrh	r3, [r3, #28]
 801543c:	3314      	adds	r3, #20
 801543e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	685b      	ldr	r3, [r3, #4]
 8015450:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015454:	3308      	adds	r3, #8
 8015456:	2214      	movs	r2, #20
 8015458:	4619      	mov	r1, r3
 801545a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801545c:	f000 fb4e 	bl	8015afc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015460:	8a3b      	ldrh	r3, [r7, #16]
 8015462:	4618      	mov	r0, r3
 8015464:	f7f4 fbb6 	bl	8009bd4 <lwip_htons>
 8015468:	4603      	mov	r3, r0
 801546a:	461a      	mov	r2, r3
 801546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801546e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015472:	2200      	movs	r2, #0
 8015474:	719a      	strb	r2, [r3, #6]
 8015476:	2200      	movs	r2, #0
 8015478:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801547c:	2200      	movs	r2, #0
 801547e:	729a      	strb	r2, [r3, #10]
 8015480:	2200      	movs	r2, #0
 8015482:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801548a:	e00d      	b.n	80154a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015492:	2114      	movs	r1, #20
 8015494:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015496:	f7f5 ff19 	bl	800b2cc <pbuf_remove_header>
      pbuf_cat(p, r);
 801549a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f7f6 f85d 	bl	800b55c <pbuf_cat>
      r = iprh->next_pbuf;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80154a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d1ee      	bne.n	801548c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80154ae:	4b1e      	ldr	r3, [pc, #120]	; (8015528 <ip4_reass+0x2b4>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d102      	bne.n	80154be <ip4_reass+0x24a>
      ipr_prev = NULL;
 80154b8:	2300      	movs	r3, #0
 80154ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154bc:	e010      	b.n	80154e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80154be:	4b1a      	ldr	r3, [pc, #104]	; (8015528 <ip4_reass+0x2b4>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154c4:	e007      	b.n	80154d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80154c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d006      	beq.n	80154de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80154d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d1f4      	bne.n	80154c6 <ip4_reass+0x252>
 80154dc:	e000      	b.n	80154e0 <ip4_reass+0x26c>
          break;
 80154de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80154e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80154e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154e4:	f7ff fd2e 	bl	8014f44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f7f5 fffd 	bl	800b4e8 <pbuf_clen>
 80154ee:	4603      	mov	r3, r0
 80154f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80154f2:	4b0c      	ldr	r3, [pc, #48]	; (8015524 <ip4_reass+0x2b0>)
 80154f4:	881b      	ldrh	r3, [r3, #0]
 80154f6:	8c3a      	ldrh	r2, [r7, #32]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d906      	bls.n	801550a <ip4_reass+0x296>
 80154fc:	4b0b      	ldr	r3, [pc, #44]	; (801552c <ip4_reass+0x2b8>)
 80154fe:	f240 229b 	movw	r2, #667	; 0x29b
 8015502:	490b      	ldr	r1, [pc, #44]	; (8015530 <ip4_reass+0x2bc>)
 8015504:	480b      	ldr	r0, [pc, #44]	; (8015534 <ip4_reass+0x2c0>)
 8015506:	f000 fb0f 	bl	8015b28 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801550a:	4b06      	ldr	r3, [pc, #24]	; (8015524 <ip4_reass+0x2b0>)
 801550c:	881a      	ldrh	r2, [r3, #0]
 801550e:	8c3b      	ldrh	r3, [r7, #32]
 8015510:	1ad3      	subs	r3, r2, r3
 8015512:	b29a      	uxth	r2, r3
 8015514:	4b03      	ldr	r3, [pc, #12]	; (8015524 <ip4_reass+0x2b0>)
 8015516:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	e038      	b.n	801558e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801551c:	2300      	movs	r3, #0
 801551e:	e036      	b.n	801558e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015520:	bf00      	nop
 8015522:	e00a      	b.n	801553a <ip4_reass+0x2c6>
 8015524:	200087e8 	.word	0x200087e8
 8015528:	200087e4 	.word	0x200087e4
 801552c:	080196ac 	.word	0x080196ac
 8015530:	0801981c 	.word	0x0801981c
 8015534:	080196f4 	.word	0x080196f4
    goto nullreturn_ipr;
 8015538:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801553c:	2b00      	cmp	r3, #0
 801553e:	d106      	bne.n	801554e <ip4_reass+0x2da>
 8015540:	4b15      	ldr	r3, [pc, #84]	; (8015598 <ip4_reass+0x324>)
 8015542:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015546:	4915      	ldr	r1, [pc, #84]	; (801559c <ip4_reass+0x328>)
 8015548:	4815      	ldr	r0, [pc, #84]	; (80155a0 <ip4_reass+0x32c>)
 801554a:	f000 faed 	bl	8015b28 <iprintf>
  if (ipr->p == NULL) {
 801554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015550:	685b      	ldr	r3, [r3, #4]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d116      	bne.n	8015584 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015556:	4b13      	ldr	r3, [pc, #76]	; (80155a4 <ip4_reass+0x330>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801555c:	429a      	cmp	r2, r3
 801555e:	d006      	beq.n	801556e <ip4_reass+0x2fa>
 8015560:	4b0d      	ldr	r3, [pc, #52]	; (8015598 <ip4_reass+0x324>)
 8015562:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015566:	4910      	ldr	r1, [pc, #64]	; (80155a8 <ip4_reass+0x334>)
 8015568:	480d      	ldr	r0, [pc, #52]	; (80155a0 <ip4_reass+0x32c>)
 801556a:	f000 fadd 	bl	8015b28 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801556e:	2100      	movs	r1, #0
 8015570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015572:	f7ff fce7 	bl	8014f44 <ip_reass_dequeue_datagram>
 8015576:	e006      	b.n	8015586 <ip4_reass+0x312>
    goto nullreturn;
 8015578:	bf00      	nop
 801557a:	e004      	b.n	8015586 <ip4_reass+0x312>
    goto nullreturn;
 801557c:	bf00      	nop
 801557e:	e002      	b.n	8015586 <ip4_reass+0x312>
      goto nullreturn;
 8015580:	bf00      	nop
 8015582:	e000      	b.n	8015586 <ip4_reass+0x312>
  }

nullreturn:
 8015584:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f7f5 ff26 	bl	800b3d8 <pbuf_free>
  return NULL;
 801558c:	2300      	movs	r3, #0
}
 801558e:	4618      	mov	r0, r3
 8015590:	3738      	adds	r7, #56	; 0x38
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	080196ac 	.word	0x080196ac
 801559c:	08019838 	.word	0x08019838
 80155a0:	080196f4 	.word	0x080196f4
 80155a4:	200087e4 	.word	0x200087e4
 80155a8:	08019844 	.word	0x08019844

080155ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80155b0:	2005      	movs	r0, #5
 80155b2:	f7f5 f83f 	bl	800a634 <memp_malloc>
 80155b6:	4603      	mov	r3, r0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	bd80      	pop	{r7, pc}

080155bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d106      	bne.n	80155d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80155ca:	4b07      	ldr	r3, [pc, #28]	; (80155e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80155cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80155d0:	4906      	ldr	r1, [pc, #24]	; (80155ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80155d2:	4807      	ldr	r0, [pc, #28]	; (80155f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80155d4:	f000 faa8 	bl	8015b28 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80155d8:	6879      	ldr	r1, [r7, #4]
 80155da:	2005      	movs	r0, #5
 80155dc:	f7f5 f89a 	bl	800a714 <memp_free>
}
 80155e0:	bf00      	nop
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	080196ac 	.word	0x080196ac
 80155ec:	08019864 	.word	0x08019864
 80155f0:	080196f4 	.word	0x080196f4

080155f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d106      	bne.n	8015614 <ipfrag_free_pbuf_custom+0x20>
 8015606:	4b11      	ldr	r3, [pc, #68]	; (801564c <ipfrag_free_pbuf_custom+0x58>)
 8015608:	f240 22ce 	movw	r2, #718	; 0x2ce
 801560c:	4910      	ldr	r1, [pc, #64]	; (8015650 <ipfrag_free_pbuf_custom+0x5c>)
 801560e:	4811      	ldr	r0, [pc, #68]	; (8015654 <ipfrag_free_pbuf_custom+0x60>)
 8015610:	f000 fa8a 	bl	8015b28 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015614:	68fa      	ldr	r2, [r7, #12]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	429a      	cmp	r2, r3
 801561a:	d006      	beq.n	801562a <ipfrag_free_pbuf_custom+0x36>
 801561c:	4b0b      	ldr	r3, [pc, #44]	; (801564c <ipfrag_free_pbuf_custom+0x58>)
 801561e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015622:	490d      	ldr	r1, [pc, #52]	; (8015658 <ipfrag_free_pbuf_custom+0x64>)
 8015624:	480b      	ldr	r0, [pc, #44]	; (8015654 <ipfrag_free_pbuf_custom+0x60>)
 8015626:	f000 fa7f 	bl	8015b28 <iprintf>
  if (pcr->original != NULL) {
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	695b      	ldr	r3, [r3, #20]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d004      	beq.n	801563c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	695b      	ldr	r3, [r3, #20]
 8015636:	4618      	mov	r0, r3
 8015638:	f7f5 fece 	bl	800b3d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f7ff ffbd 	bl	80155bc <ip_frag_free_pbuf_custom_ref>
}
 8015642:	bf00      	nop
 8015644:	3710      	adds	r7, #16
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
 801564a:	bf00      	nop
 801564c:	080196ac 	.word	0x080196ac
 8015650:	08019870 	.word	0x08019870
 8015654:	080196f4 	.word	0x080196f4
 8015658:	0801987c 	.word	0x0801987c

0801565c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b094      	sub	sp, #80	; 0x50
 8015660:	af02      	add	r7, sp, #8
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015668:	2300      	movs	r3, #0
 801566a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015672:	3b14      	subs	r3, #20
 8015674:	2b00      	cmp	r3, #0
 8015676:	da00      	bge.n	801567a <ip4_frag+0x1e>
 8015678:	3307      	adds	r3, #7
 801567a:	10db      	asrs	r3, r3, #3
 801567c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801567e:	2314      	movs	r3, #20
 8015680:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801568a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568e:	781b      	ldrb	r3, [r3, #0]
 8015690:	f003 030f 	and.w	r3, r3, #15
 8015694:	b2db      	uxtb	r3, r3
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	b2db      	uxtb	r3, r3
 801569a:	2b14      	cmp	r3, #20
 801569c:	d002      	beq.n	80156a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801569e:	f06f 0305 	mvn.w	r3, #5
 80156a2:	e110      	b.n	80158c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	895b      	ldrh	r3, [r3, #10]
 80156a8:	2b13      	cmp	r3, #19
 80156aa:	d809      	bhi.n	80156c0 <ip4_frag+0x64>
 80156ac:	4b88      	ldr	r3, [pc, #544]	; (80158d0 <ip4_frag+0x274>)
 80156ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80156b2:	4988      	ldr	r1, [pc, #544]	; (80158d4 <ip4_frag+0x278>)
 80156b4:	4888      	ldr	r0, [pc, #544]	; (80158d8 <ip4_frag+0x27c>)
 80156b6:	f000 fa37 	bl	8015b28 <iprintf>
 80156ba:	f06f 0305 	mvn.w	r3, #5
 80156be:	e102      	b.n	80158c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80156c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156c2:	88db      	ldrh	r3, [r3, #6]
 80156c4:	b29b      	uxth	r3, r3
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7f4 fa84 	bl	8009bd4 <lwip_htons>
 80156cc:	4603      	mov	r3, r0
 80156ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80156d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80156d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80156da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80156e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	891b      	ldrh	r3, [r3, #8]
 80156e6:	3b14      	subs	r3, #20
 80156e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80156ec:	e0e1      	b.n	80158b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80156ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156f0:	00db      	lsls	r3, r3, #3
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80156f8:	4293      	cmp	r3, r2
 80156fa:	bf28      	it	cs
 80156fc:	4613      	movcs	r3, r2
 80156fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015700:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015704:	2114      	movs	r1, #20
 8015706:	200e      	movs	r0, #14
 8015708:	f7f5 fb82 	bl	800ae10 <pbuf_alloc>
 801570c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015710:	2b00      	cmp	r3, #0
 8015712:	f000 80d5 	beq.w	80158c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015718:	895b      	ldrh	r3, [r3, #10]
 801571a:	2b13      	cmp	r3, #19
 801571c:	d806      	bhi.n	801572c <ip4_frag+0xd0>
 801571e:	4b6c      	ldr	r3, [pc, #432]	; (80158d0 <ip4_frag+0x274>)
 8015720:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015724:	496d      	ldr	r1, [pc, #436]	; (80158dc <ip4_frag+0x280>)
 8015726:	486c      	ldr	r0, [pc, #432]	; (80158d8 <ip4_frag+0x27c>)
 8015728:	f000 f9fe 	bl	8015b28 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801572e:	685b      	ldr	r3, [r3, #4]
 8015730:	2214      	movs	r2, #20
 8015732:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015734:	4618      	mov	r0, r3
 8015736:	f000 f9e1 	bl	8015afc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801573c:	685b      	ldr	r3, [r3, #4]
 801573e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015740:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015742:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015746:	e064      	b.n	8015812 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	895a      	ldrh	r2, [r3, #10]
 801574c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801574e:	1ad3      	subs	r3, r2, r3
 8015750:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	895b      	ldrh	r3, [r3, #10]
 8015756:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015758:	429a      	cmp	r2, r3
 801575a:	d906      	bls.n	801576a <ip4_frag+0x10e>
 801575c:	4b5c      	ldr	r3, [pc, #368]	; (80158d0 <ip4_frag+0x274>)
 801575e:	f240 322d 	movw	r2, #813	; 0x32d
 8015762:	495f      	ldr	r1, [pc, #380]	; (80158e0 <ip4_frag+0x284>)
 8015764:	485c      	ldr	r0, [pc, #368]	; (80158d8 <ip4_frag+0x27c>)
 8015766:	f000 f9df 	bl	8015b28 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801576a:	8bfa      	ldrh	r2, [r7, #30]
 801576c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015770:	4293      	cmp	r3, r2
 8015772:	bf28      	it	cs
 8015774:	4613      	movcs	r3, r2
 8015776:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801577a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801577e:	2b00      	cmp	r3, #0
 8015780:	d105      	bne.n	801578e <ip4_frag+0x132>
        poff = 0;
 8015782:	2300      	movs	r3, #0
 8015784:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	60fb      	str	r3, [r7, #12]
        continue;
 801578c:	e041      	b.n	8015812 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801578e:	f7ff ff0d 	bl	80155ac <ip_frag_alloc_pbuf_custom_ref>
 8015792:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015794:	69bb      	ldr	r3, [r7, #24]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d103      	bne.n	80157a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801579a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801579c:	f7f5 fe1c 	bl	800b3d8 <pbuf_free>
        goto memerr;
 80157a0:	e08f      	b.n	80158c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80157a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80157a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80157aa:	4413      	add	r3, r2
 80157ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80157b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80157b4:	9201      	str	r2, [sp, #4]
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	4603      	mov	r3, r0
 80157ba:	2241      	movs	r2, #65	; 0x41
 80157bc:	2000      	movs	r0, #0
 80157be:	f7f5 fc51 	bl	800b064 <pbuf_alloced_custom>
 80157c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d106      	bne.n	80157d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80157ca:	69b8      	ldr	r0, [r7, #24]
 80157cc:	f7ff fef6 	bl	80155bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80157d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157d2:	f7f5 fe01 	bl	800b3d8 <pbuf_free>
        goto memerr;
 80157d6:	e074      	b.n	80158c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80157d8:	68f8      	ldr	r0, [r7, #12]
 80157da:	f7f5 fe9d 	bl	800b518 <pbuf_ref>
      pcr->original = p;
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	68fa      	ldr	r2, [r7, #12]
 80157e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80157e4:	69bb      	ldr	r3, [r7, #24]
 80157e6:	4a3f      	ldr	r2, [pc, #252]	; (80158e4 <ip4_frag+0x288>)
 80157e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80157ea:	6979      	ldr	r1, [r7, #20]
 80157ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157ee:	f7f5 feb5 	bl	800b55c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80157f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80157f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80157fa:	1ad3      	subs	r3, r2, r3
 80157fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015800:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015804:	2b00      	cmp	r3, #0
 8015806:	d004      	beq.n	8015812 <ip4_frag+0x1b6>
        poff = 0;
 8015808:	2300      	movs	r3, #0
 801580a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015812:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015816:	2b00      	cmp	r3, #0
 8015818:	d196      	bne.n	8015748 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801581a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801581c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015820:	4413      	add	r3, r2
 8015822:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015828:	f1a3 0213 	sub.w	r2, r3, #19
 801582c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015830:	429a      	cmp	r2, r3
 8015832:	bfcc      	ite	gt
 8015834:	2301      	movgt	r3, #1
 8015836:	2300      	movle	r3, #0
 8015838:	b2db      	uxtb	r3, r3
 801583a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801583c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015844:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015846:	6a3b      	ldr	r3, [r7, #32]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d002      	beq.n	8015852 <ip4_frag+0x1f6>
 801584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584e:	2b00      	cmp	r3, #0
 8015850:	d003      	beq.n	801585a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015852:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015858:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801585a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801585c:	4618      	mov	r0, r3
 801585e:	f7f4 f9b9 	bl	8009bd4 <lwip_htons>
 8015862:	4603      	mov	r3, r0
 8015864:	461a      	mov	r2, r3
 8015866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015868:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801586a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801586c:	3314      	adds	r3, #20
 801586e:	b29b      	uxth	r3, r3
 8015870:	4618      	mov	r0, r3
 8015872:	f7f4 f9af 	bl	8009bd4 <lwip_htons>
 8015876:	4603      	mov	r3, r0
 8015878:	461a      	mov	r2, r3
 801587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801587c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015880:	2200      	movs	r2, #0
 8015882:	729a      	strb	r2, [r3, #10]
 8015884:	2200      	movs	r2, #0
 8015886:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	695b      	ldr	r3, [r3, #20]
 801588c:	687a      	ldr	r2, [r7, #4]
 801588e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015890:	68b8      	ldr	r0, [r7, #8]
 8015892:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015896:	f7f5 fd9f 	bl	800b3d8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801589a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801589e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80158a0:	1ad3      	subs	r3, r2, r3
 80158a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80158a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80158aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158ac:	4413      	add	r3, r2
 80158ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80158b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	f47f af19 	bne.w	80156ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80158bc:	2300      	movs	r3, #0
 80158be:	e002      	b.n	80158c6 <ip4_frag+0x26a>
      goto memerr;
 80158c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80158c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80158c6:	4618      	mov	r0, r3
 80158c8:	3748      	adds	r7, #72	; 0x48
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd80      	pop	{r7, pc}
 80158ce:	bf00      	nop
 80158d0:	080196ac 	.word	0x080196ac
 80158d4:	08019888 	.word	0x08019888
 80158d8:	080196f4 	.word	0x080196f4
 80158dc:	080198a4 	.word	0x080198a4
 80158e0:	080198c4 	.word	0x080198c4
 80158e4:	080155f5 	.word	0x080155f5

080158e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b086      	sub	sp, #24
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
 80158f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80158f2:	230e      	movs	r3, #14
 80158f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	895b      	ldrh	r3, [r3, #10]
 80158fa:	2b0e      	cmp	r3, #14
 80158fc:	d96e      	bls.n	80159dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	7bdb      	ldrb	r3, [r3, #15]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d106      	bne.n	8015914 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801590c:	3301      	adds	r3, #1
 801590e:	b2da      	uxtb	r2, r3
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	685b      	ldr	r3, [r3, #4]
 8015918:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	7b1a      	ldrb	r2, [r3, #12]
 801591e:	7b5b      	ldrb	r3, [r3, #13]
 8015920:	021b      	lsls	r3, r3, #8
 8015922:	4313      	orrs	r3, r2
 8015924:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	f003 0301 	and.w	r3, r3, #1
 801592e:	2b00      	cmp	r3, #0
 8015930:	d023      	beq.n	801597a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	2b01      	cmp	r3, #1
 8015938:	d10f      	bne.n	801595a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	785b      	ldrb	r3, [r3, #1]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d11b      	bne.n	801597a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015942:	693b      	ldr	r3, [r7, #16]
 8015944:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015946:	2b5e      	cmp	r3, #94	; 0x5e
 8015948:	d117      	bne.n	801597a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	7b5b      	ldrb	r3, [r3, #13]
 801594e:	f043 0310 	orr.w	r3, r3, #16
 8015952:	b2da      	uxtb	r2, r3
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	735a      	strb	r2, [r3, #13]
 8015958:	e00f      	b.n	801597a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	2206      	movs	r2, #6
 801595e:	4928      	ldr	r1, [pc, #160]	; (8015a00 <ethernet_input+0x118>)
 8015960:	4618      	mov	r0, r3
 8015962:	f000 f8bb 	bl	8015adc <memcmp>
 8015966:	4603      	mov	r3, r0
 8015968:	2b00      	cmp	r3, #0
 801596a:	d106      	bne.n	801597a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	7b5b      	ldrb	r3, [r3, #13]
 8015970:	f043 0308 	orr.w	r3, r3, #8
 8015974:	b2da      	uxtb	r2, r3
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801597a:	89fb      	ldrh	r3, [r7, #14]
 801597c:	2b08      	cmp	r3, #8
 801597e:	d003      	beq.n	8015988 <ethernet_input+0xa0>
 8015980:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015984:	d014      	beq.n	80159b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015986:	e032      	b.n	80159ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801598e:	f003 0308 	and.w	r3, r3, #8
 8015992:	2b00      	cmp	r3, #0
 8015994:	d024      	beq.n	80159e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015996:	8afb      	ldrh	r3, [r7, #22]
 8015998:	4619      	mov	r1, r3
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f7f5 fc96 	bl	800b2cc <pbuf_remove_header>
 80159a0:	4603      	mov	r3, r0
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d11e      	bne.n	80159e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80159a6:	6839      	ldr	r1, [r7, #0]
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	f7fe ff03 	bl	80147b4 <ip4_input>
      break;
 80159ae:	e013      	b.n	80159d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159b6:	f003 0308 	and.w	r3, r3, #8
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d014      	beq.n	80159e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80159be:	8afb      	ldrh	r3, [r7, #22]
 80159c0:	4619      	mov	r1, r3
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f7f5 fc82 	bl	800b2cc <pbuf_remove_header>
 80159c8:	4603      	mov	r3, r0
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d10e      	bne.n	80159ec <ethernet_input+0x104>
        etharp_input(p, netif);
 80159ce:	6839      	ldr	r1, [r7, #0]
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f7fe f879 	bl	8013ac8 <etharp_input>
      break;
 80159d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80159d8:	2300      	movs	r3, #0
 80159da:	e00c      	b.n	80159f6 <ethernet_input+0x10e>
    goto free_and_return;
 80159dc:	bf00      	nop
 80159de:	e006      	b.n	80159ee <ethernet_input+0x106>
        goto free_and_return;
 80159e0:	bf00      	nop
 80159e2:	e004      	b.n	80159ee <ethernet_input+0x106>
        goto free_and_return;
 80159e4:	bf00      	nop
 80159e6:	e002      	b.n	80159ee <ethernet_input+0x106>
        goto free_and_return;
 80159e8:	bf00      	nop
 80159ea:	e000      	b.n	80159ee <ethernet_input+0x106>
        goto free_and_return;
 80159ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f7f5 fcf2 	bl	800b3d8 <pbuf_free>
  return ERR_OK;
 80159f4:	2300      	movs	r3, #0
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3718      	adds	r7, #24
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	08019a7c 	.word	0x08019a7c

08015a04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b086      	sub	sp, #24
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	60f8      	str	r0, [r7, #12]
 8015a0c:	60b9      	str	r1, [r7, #8]
 8015a0e:	607a      	str	r2, [r7, #4]
 8015a10:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015a12:	8c3b      	ldrh	r3, [r7, #32]
 8015a14:	4618      	mov	r0, r3
 8015a16:	f7f4 f8dd 	bl	8009bd4 <lwip_htons>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015a1e:	210e      	movs	r1, #14
 8015a20:	68b8      	ldr	r0, [r7, #8]
 8015a22:	f7f5 fc43 	bl	800b2ac <pbuf_add_header>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d125      	bne.n	8015a78 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015a2c:	68bb      	ldr	r3, [r7, #8]
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015a32:	693b      	ldr	r3, [r7, #16]
 8015a34:	8afa      	ldrh	r2, [r7, #22]
 8015a36:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	2206      	movs	r2, #6
 8015a3c:	6839      	ldr	r1, [r7, #0]
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f000 f85c 	bl	8015afc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	3306      	adds	r3, #6
 8015a48:	2206      	movs	r2, #6
 8015a4a:	6879      	ldr	r1, [r7, #4]
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f000 f855 	bl	8015afc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015a58:	2b06      	cmp	r3, #6
 8015a5a:	d006      	beq.n	8015a6a <ethernet_output+0x66>
 8015a5c:	4b0a      	ldr	r3, [pc, #40]	; (8015a88 <ethernet_output+0x84>)
 8015a5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015a62:	490a      	ldr	r1, [pc, #40]	; (8015a8c <ethernet_output+0x88>)
 8015a64:	480a      	ldr	r0, [pc, #40]	; (8015a90 <ethernet_output+0x8c>)
 8015a66:	f000 f85f 	bl	8015b28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	699b      	ldr	r3, [r3, #24]
 8015a6e:	68b9      	ldr	r1, [r7, #8]
 8015a70:	68f8      	ldr	r0, [r7, #12]
 8015a72:	4798      	blx	r3
 8015a74:	4603      	mov	r3, r0
 8015a76:	e002      	b.n	8015a7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015a78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015a7a:	f06f 0301 	mvn.w	r3, #1
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3718      	adds	r7, #24
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	bf00      	nop
 8015a88:	080198d4 	.word	0x080198d4
 8015a8c:	0801990c 	.word	0x0801990c
 8015a90:	08019940 	.word	0x08019940

08015a94 <__libc_init_array>:
 8015a94:	b570      	push	{r4, r5, r6, lr}
 8015a96:	4d0d      	ldr	r5, [pc, #52]	; (8015acc <__libc_init_array+0x38>)
 8015a98:	4c0d      	ldr	r4, [pc, #52]	; (8015ad0 <__libc_init_array+0x3c>)
 8015a9a:	1b64      	subs	r4, r4, r5
 8015a9c:	10a4      	asrs	r4, r4, #2
 8015a9e:	2600      	movs	r6, #0
 8015aa0:	42a6      	cmp	r6, r4
 8015aa2:	d109      	bne.n	8015ab8 <__libc_init_array+0x24>
 8015aa4:	4d0b      	ldr	r5, [pc, #44]	; (8015ad4 <__libc_init_array+0x40>)
 8015aa6:	4c0c      	ldr	r4, [pc, #48]	; (8015ad8 <__libc_init_array+0x44>)
 8015aa8:	f001 f88e 	bl	8016bc8 <_init>
 8015aac:	1b64      	subs	r4, r4, r5
 8015aae:	10a4      	asrs	r4, r4, #2
 8015ab0:	2600      	movs	r6, #0
 8015ab2:	42a6      	cmp	r6, r4
 8015ab4:	d105      	bne.n	8015ac2 <__libc_init_array+0x2e>
 8015ab6:	bd70      	pop	{r4, r5, r6, pc}
 8015ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8015abc:	4798      	blx	r3
 8015abe:	3601      	adds	r6, #1
 8015ac0:	e7ee      	b.n	8015aa0 <__libc_init_array+0xc>
 8015ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ac6:	4798      	blx	r3
 8015ac8:	3601      	adds	r6, #1
 8015aca:	e7f2      	b.n	8015ab2 <__libc_init_array+0x1e>
 8015acc:	08019bdc 	.word	0x08019bdc
 8015ad0:	08019bdc 	.word	0x08019bdc
 8015ad4:	08019bdc 	.word	0x08019bdc
 8015ad8:	08019be0 	.word	0x08019be0

08015adc <memcmp>:
 8015adc:	b510      	push	{r4, lr}
 8015ade:	3901      	subs	r1, #1
 8015ae0:	4402      	add	r2, r0
 8015ae2:	4290      	cmp	r0, r2
 8015ae4:	d101      	bne.n	8015aea <memcmp+0xe>
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	e005      	b.n	8015af6 <memcmp+0x1a>
 8015aea:	7803      	ldrb	r3, [r0, #0]
 8015aec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015af0:	42a3      	cmp	r3, r4
 8015af2:	d001      	beq.n	8015af8 <memcmp+0x1c>
 8015af4:	1b18      	subs	r0, r3, r4
 8015af6:	bd10      	pop	{r4, pc}
 8015af8:	3001      	adds	r0, #1
 8015afa:	e7f2      	b.n	8015ae2 <memcmp+0x6>

08015afc <memcpy>:
 8015afc:	440a      	add	r2, r1
 8015afe:	4291      	cmp	r1, r2
 8015b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8015b04:	d100      	bne.n	8015b08 <memcpy+0xc>
 8015b06:	4770      	bx	lr
 8015b08:	b510      	push	{r4, lr}
 8015b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b12:	4291      	cmp	r1, r2
 8015b14:	d1f9      	bne.n	8015b0a <memcpy+0xe>
 8015b16:	bd10      	pop	{r4, pc}

08015b18 <memset>:
 8015b18:	4402      	add	r2, r0
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	4293      	cmp	r3, r2
 8015b1e:	d100      	bne.n	8015b22 <memset+0xa>
 8015b20:	4770      	bx	lr
 8015b22:	f803 1b01 	strb.w	r1, [r3], #1
 8015b26:	e7f9      	b.n	8015b1c <memset+0x4>

08015b28 <iprintf>:
 8015b28:	b40f      	push	{r0, r1, r2, r3}
 8015b2a:	4b0a      	ldr	r3, [pc, #40]	; (8015b54 <iprintf+0x2c>)
 8015b2c:	b513      	push	{r0, r1, r4, lr}
 8015b2e:	681c      	ldr	r4, [r3, #0]
 8015b30:	b124      	cbz	r4, 8015b3c <iprintf+0x14>
 8015b32:	69a3      	ldr	r3, [r4, #24]
 8015b34:	b913      	cbnz	r3, 8015b3c <iprintf+0x14>
 8015b36:	4620      	mov	r0, r4
 8015b38:	f000 f8c2 	bl	8015cc0 <__sinit>
 8015b3c:	ab05      	add	r3, sp, #20
 8015b3e:	9a04      	ldr	r2, [sp, #16]
 8015b40:	68a1      	ldr	r1, [r4, #8]
 8015b42:	9301      	str	r3, [sp, #4]
 8015b44:	4620      	mov	r0, r4
 8015b46:	f000 fa7f 	bl	8016048 <_vfiprintf_r>
 8015b4a:	b002      	add	sp, #8
 8015b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b50:	b004      	add	sp, #16
 8015b52:	4770      	bx	lr
 8015b54:	20000044 	.word	0x20000044

08015b58 <rand>:
 8015b58:	4b16      	ldr	r3, [pc, #88]	; (8015bb4 <rand+0x5c>)
 8015b5a:	b510      	push	{r4, lr}
 8015b5c:	681c      	ldr	r4, [r3, #0]
 8015b5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015b60:	b9b3      	cbnz	r3, 8015b90 <rand+0x38>
 8015b62:	2018      	movs	r0, #24
 8015b64:	f000 f95e 	bl	8015e24 <malloc>
 8015b68:	63a0      	str	r0, [r4, #56]	; 0x38
 8015b6a:	b928      	cbnz	r0, 8015b78 <rand+0x20>
 8015b6c:	4602      	mov	r2, r0
 8015b6e:	4b12      	ldr	r3, [pc, #72]	; (8015bb8 <rand+0x60>)
 8015b70:	4812      	ldr	r0, [pc, #72]	; (8015bbc <rand+0x64>)
 8015b72:	214e      	movs	r1, #78	; 0x4e
 8015b74:	f000 f82e 	bl	8015bd4 <__assert_func>
 8015b78:	4a11      	ldr	r2, [pc, #68]	; (8015bc0 <rand+0x68>)
 8015b7a:	4b12      	ldr	r3, [pc, #72]	; (8015bc4 <rand+0x6c>)
 8015b7c:	e9c0 2300 	strd	r2, r3, [r0]
 8015b80:	4b11      	ldr	r3, [pc, #68]	; (8015bc8 <rand+0x70>)
 8015b82:	6083      	str	r3, [r0, #8]
 8015b84:	230b      	movs	r3, #11
 8015b86:	8183      	strh	r3, [r0, #12]
 8015b88:	2201      	movs	r2, #1
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015b90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015b92:	4a0e      	ldr	r2, [pc, #56]	; (8015bcc <rand+0x74>)
 8015b94:	6920      	ldr	r0, [r4, #16]
 8015b96:	6963      	ldr	r3, [r4, #20]
 8015b98:	490d      	ldr	r1, [pc, #52]	; (8015bd0 <rand+0x78>)
 8015b9a:	4342      	muls	r2, r0
 8015b9c:	fb01 2203 	mla	r2, r1, r3, r2
 8015ba0:	fba0 0101 	umull	r0, r1, r0, r1
 8015ba4:	1c43      	adds	r3, r0, #1
 8015ba6:	eb42 0001 	adc.w	r0, r2, r1
 8015baa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8015bae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015bb2:	bd10      	pop	{r4, pc}
 8015bb4:	20000044 	.word	0x20000044
 8015bb8:	08019a90 	.word	0x08019a90
 8015bbc:	08019aa7 	.word	0x08019aa7
 8015bc0:	abcd330e 	.word	0xabcd330e
 8015bc4:	e66d1234 	.word	0xe66d1234
 8015bc8:	0005deec 	.word	0x0005deec
 8015bcc:	5851f42d 	.word	0x5851f42d
 8015bd0:	4c957f2d 	.word	0x4c957f2d

08015bd4 <__assert_func>:
 8015bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015bd6:	4614      	mov	r4, r2
 8015bd8:	461a      	mov	r2, r3
 8015bda:	4b09      	ldr	r3, [pc, #36]	; (8015c00 <__assert_func+0x2c>)
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	4605      	mov	r5, r0
 8015be0:	68d8      	ldr	r0, [r3, #12]
 8015be2:	b14c      	cbz	r4, 8015bf8 <__assert_func+0x24>
 8015be4:	4b07      	ldr	r3, [pc, #28]	; (8015c04 <__assert_func+0x30>)
 8015be6:	9100      	str	r1, [sp, #0]
 8015be8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015bec:	4906      	ldr	r1, [pc, #24]	; (8015c08 <__assert_func+0x34>)
 8015bee:	462b      	mov	r3, r5
 8015bf0:	f000 f8e4 	bl	8015dbc <fiprintf>
 8015bf4:	f000 fe12 	bl	801681c <abort>
 8015bf8:	4b04      	ldr	r3, [pc, #16]	; (8015c0c <__assert_func+0x38>)
 8015bfa:	461c      	mov	r4, r3
 8015bfc:	e7f3      	b.n	8015be6 <__assert_func+0x12>
 8015bfe:	bf00      	nop
 8015c00:	20000044 	.word	0x20000044
 8015c04:	08019b02 	.word	0x08019b02
 8015c08:	08019b0f 	.word	0x08019b0f
 8015c0c:	08019b3d 	.word	0x08019b3d

08015c10 <std>:
 8015c10:	2300      	movs	r3, #0
 8015c12:	b510      	push	{r4, lr}
 8015c14:	4604      	mov	r4, r0
 8015c16:	e9c0 3300 	strd	r3, r3, [r0]
 8015c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015c1e:	6083      	str	r3, [r0, #8]
 8015c20:	8181      	strh	r1, [r0, #12]
 8015c22:	6643      	str	r3, [r0, #100]	; 0x64
 8015c24:	81c2      	strh	r2, [r0, #14]
 8015c26:	6183      	str	r3, [r0, #24]
 8015c28:	4619      	mov	r1, r3
 8015c2a:	2208      	movs	r2, #8
 8015c2c:	305c      	adds	r0, #92	; 0x5c
 8015c2e:	f7ff ff73 	bl	8015b18 <memset>
 8015c32:	4b05      	ldr	r3, [pc, #20]	; (8015c48 <std+0x38>)
 8015c34:	6263      	str	r3, [r4, #36]	; 0x24
 8015c36:	4b05      	ldr	r3, [pc, #20]	; (8015c4c <std+0x3c>)
 8015c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8015c3a:	4b05      	ldr	r3, [pc, #20]	; (8015c50 <std+0x40>)
 8015c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015c3e:	4b05      	ldr	r3, [pc, #20]	; (8015c54 <std+0x44>)
 8015c40:	6224      	str	r4, [r4, #32]
 8015c42:	6323      	str	r3, [r4, #48]	; 0x30
 8015c44:	bd10      	pop	{r4, pc}
 8015c46:	bf00      	nop
 8015c48:	080165f1 	.word	0x080165f1
 8015c4c:	08016613 	.word	0x08016613
 8015c50:	0801664b 	.word	0x0801664b
 8015c54:	0801666f 	.word	0x0801666f

08015c58 <_cleanup_r>:
 8015c58:	4901      	ldr	r1, [pc, #4]	; (8015c60 <_cleanup_r+0x8>)
 8015c5a:	f000 b8c1 	b.w	8015de0 <_fwalk_reent>
 8015c5e:	bf00      	nop
 8015c60:	08016959 	.word	0x08016959

08015c64 <__sfmoreglue>:
 8015c64:	b570      	push	{r4, r5, r6, lr}
 8015c66:	2268      	movs	r2, #104	; 0x68
 8015c68:	1e4d      	subs	r5, r1, #1
 8015c6a:	4355      	muls	r5, r2
 8015c6c:	460e      	mov	r6, r1
 8015c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015c72:	f000 f94b 	bl	8015f0c <_malloc_r>
 8015c76:	4604      	mov	r4, r0
 8015c78:	b140      	cbz	r0, 8015c8c <__sfmoreglue+0x28>
 8015c7a:	2100      	movs	r1, #0
 8015c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8015c80:	300c      	adds	r0, #12
 8015c82:	60a0      	str	r0, [r4, #8]
 8015c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015c88:	f7ff ff46 	bl	8015b18 <memset>
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	bd70      	pop	{r4, r5, r6, pc}

08015c90 <__sfp_lock_acquire>:
 8015c90:	4801      	ldr	r0, [pc, #4]	; (8015c98 <__sfp_lock_acquire+0x8>)
 8015c92:	f000 b8c5 	b.w	8015e20 <__retarget_lock_acquire_recursive>
 8015c96:	bf00      	nop
 8015c98:	200087f1 	.word	0x200087f1

08015c9c <__sfp_lock_release>:
 8015c9c:	4801      	ldr	r0, [pc, #4]	; (8015ca4 <__sfp_lock_release+0x8>)
 8015c9e:	f000 b8c0 	b.w	8015e22 <__retarget_lock_release_recursive>
 8015ca2:	bf00      	nop
 8015ca4:	200087f1 	.word	0x200087f1

08015ca8 <__sinit_lock_acquire>:
 8015ca8:	4801      	ldr	r0, [pc, #4]	; (8015cb0 <__sinit_lock_acquire+0x8>)
 8015caa:	f000 b8b9 	b.w	8015e20 <__retarget_lock_acquire_recursive>
 8015cae:	bf00      	nop
 8015cb0:	200087f2 	.word	0x200087f2

08015cb4 <__sinit_lock_release>:
 8015cb4:	4801      	ldr	r0, [pc, #4]	; (8015cbc <__sinit_lock_release+0x8>)
 8015cb6:	f000 b8b4 	b.w	8015e22 <__retarget_lock_release_recursive>
 8015cba:	bf00      	nop
 8015cbc:	200087f2 	.word	0x200087f2

08015cc0 <__sinit>:
 8015cc0:	b510      	push	{r4, lr}
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	f7ff fff0 	bl	8015ca8 <__sinit_lock_acquire>
 8015cc8:	69a3      	ldr	r3, [r4, #24]
 8015cca:	b11b      	cbz	r3, 8015cd4 <__sinit+0x14>
 8015ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cd0:	f7ff bff0 	b.w	8015cb4 <__sinit_lock_release>
 8015cd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015cd8:	6523      	str	r3, [r4, #80]	; 0x50
 8015cda:	4b13      	ldr	r3, [pc, #76]	; (8015d28 <__sinit+0x68>)
 8015cdc:	4a13      	ldr	r2, [pc, #76]	; (8015d2c <__sinit+0x6c>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	62a2      	str	r2, [r4, #40]	; 0x28
 8015ce2:	42a3      	cmp	r3, r4
 8015ce4:	bf04      	itt	eq
 8015ce6:	2301      	moveq	r3, #1
 8015ce8:	61a3      	streq	r3, [r4, #24]
 8015cea:	4620      	mov	r0, r4
 8015cec:	f000 f820 	bl	8015d30 <__sfp>
 8015cf0:	6060      	str	r0, [r4, #4]
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f000 f81c 	bl	8015d30 <__sfp>
 8015cf8:	60a0      	str	r0, [r4, #8]
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	f000 f818 	bl	8015d30 <__sfp>
 8015d00:	2200      	movs	r2, #0
 8015d02:	60e0      	str	r0, [r4, #12]
 8015d04:	2104      	movs	r1, #4
 8015d06:	6860      	ldr	r0, [r4, #4]
 8015d08:	f7ff ff82 	bl	8015c10 <std>
 8015d0c:	68a0      	ldr	r0, [r4, #8]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	2109      	movs	r1, #9
 8015d12:	f7ff ff7d 	bl	8015c10 <std>
 8015d16:	68e0      	ldr	r0, [r4, #12]
 8015d18:	2202      	movs	r2, #2
 8015d1a:	2112      	movs	r1, #18
 8015d1c:	f7ff ff78 	bl	8015c10 <std>
 8015d20:	2301      	movs	r3, #1
 8015d22:	61a3      	str	r3, [r4, #24]
 8015d24:	e7d2      	b.n	8015ccc <__sinit+0xc>
 8015d26:	bf00      	nop
 8015d28:	08019a8c 	.word	0x08019a8c
 8015d2c:	08015c59 	.word	0x08015c59

08015d30 <__sfp>:
 8015d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d32:	4607      	mov	r7, r0
 8015d34:	f7ff ffac 	bl	8015c90 <__sfp_lock_acquire>
 8015d38:	4b1e      	ldr	r3, [pc, #120]	; (8015db4 <__sfp+0x84>)
 8015d3a:	681e      	ldr	r6, [r3, #0]
 8015d3c:	69b3      	ldr	r3, [r6, #24]
 8015d3e:	b913      	cbnz	r3, 8015d46 <__sfp+0x16>
 8015d40:	4630      	mov	r0, r6
 8015d42:	f7ff ffbd 	bl	8015cc0 <__sinit>
 8015d46:	3648      	adds	r6, #72	; 0x48
 8015d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015d4c:	3b01      	subs	r3, #1
 8015d4e:	d503      	bpl.n	8015d58 <__sfp+0x28>
 8015d50:	6833      	ldr	r3, [r6, #0]
 8015d52:	b30b      	cbz	r3, 8015d98 <__sfp+0x68>
 8015d54:	6836      	ldr	r6, [r6, #0]
 8015d56:	e7f7      	b.n	8015d48 <__sfp+0x18>
 8015d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015d5c:	b9d5      	cbnz	r5, 8015d94 <__sfp+0x64>
 8015d5e:	4b16      	ldr	r3, [pc, #88]	; (8015db8 <__sfp+0x88>)
 8015d60:	60e3      	str	r3, [r4, #12]
 8015d62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015d66:	6665      	str	r5, [r4, #100]	; 0x64
 8015d68:	f000 f859 	bl	8015e1e <__retarget_lock_init_recursive>
 8015d6c:	f7ff ff96 	bl	8015c9c <__sfp_lock_release>
 8015d70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015d74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015d78:	6025      	str	r5, [r4, #0]
 8015d7a:	61a5      	str	r5, [r4, #24]
 8015d7c:	2208      	movs	r2, #8
 8015d7e:	4629      	mov	r1, r5
 8015d80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015d84:	f7ff fec8 	bl	8015b18 <memset>
 8015d88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015d8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015d90:	4620      	mov	r0, r4
 8015d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d94:	3468      	adds	r4, #104	; 0x68
 8015d96:	e7d9      	b.n	8015d4c <__sfp+0x1c>
 8015d98:	2104      	movs	r1, #4
 8015d9a:	4638      	mov	r0, r7
 8015d9c:	f7ff ff62 	bl	8015c64 <__sfmoreglue>
 8015da0:	4604      	mov	r4, r0
 8015da2:	6030      	str	r0, [r6, #0]
 8015da4:	2800      	cmp	r0, #0
 8015da6:	d1d5      	bne.n	8015d54 <__sfp+0x24>
 8015da8:	f7ff ff78 	bl	8015c9c <__sfp_lock_release>
 8015dac:	230c      	movs	r3, #12
 8015dae:	603b      	str	r3, [r7, #0]
 8015db0:	e7ee      	b.n	8015d90 <__sfp+0x60>
 8015db2:	bf00      	nop
 8015db4:	08019a8c 	.word	0x08019a8c
 8015db8:	ffff0001 	.word	0xffff0001

08015dbc <fiprintf>:
 8015dbc:	b40e      	push	{r1, r2, r3}
 8015dbe:	b503      	push	{r0, r1, lr}
 8015dc0:	4601      	mov	r1, r0
 8015dc2:	ab03      	add	r3, sp, #12
 8015dc4:	4805      	ldr	r0, [pc, #20]	; (8015ddc <fiprintf+0x20>)
 8015dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dca:	6800      	ldr	r0, [r0, #0]
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	f000 f93b 	bl	8016048 <_vfiprintf_r>
 8015dd2:	b002      	add	sp, #8
 8015dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015dd8:	b003      	add	sp, #12
 8015dda:	4770      	bx	lr
 8015ddc:	20000044 	.word	0x20000044

08015de0 <_fwalk_reent>:
 8015de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015de4:	4606      	mov	r6, r0
 8015de6:	4688      	mov	r8, r1
 8015de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015dec:	2700      	movs	r7, #0
 8015dee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015df2:	f1b9 0901 	subs.w	r9, r9, #1
 8015df6:	d505      	bpl.n	8015e04 <_fwalk_reent+0x24>
 8015df8:	6824      	ldr	r4, [r4, #0]
 8015dfa:	2c00      	cmp	r4, #0
 8015dfc:	d1f7      	bne.n	8015dee <_fwalk_reent+0xe>
 8015dfe:	4638      	mov	r0, r7
 8015e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e04:	89ab      	ldrh	r3, [r5, #12]
 8015e06:	2b01      	cmp	r3, #1
 8015e08:	d907      	bls.n	8015e1a <_fwalk_reent+0x3a>
 8015e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e0e:	3301      	adds	r3, #1
 8015e10:	d003      	beq.n	8015e1a <_fwalk_reent+0x3a>
 8015e12:	4629      	mov	r1, r5
 8015e14:	4630      	mov	r0, r6
 8015e16:	47c0      	blx	r8
 8015e18:	4307      	orrs	r7, r0
 8015e1a:	3568      	adds	r5, #104	; 0x68
 8015e1c:	e7e9      	b.n	8015df2 <_fwalk_reent+0x12>

08015e1e <__retarget_lock_init_recursive>:
 8015e1e:	4770      	bx	lr

08015e20 <__retarget_lock_acquire_recursive>:
 8015e20:	4770      	bx	lr

08015e22 <__retarget_lock_release_recursive>:
 8015e22:	4770      	bx	lr

08015e24 <malloc>:
 8015e24:	4b02      	ldr	r3, [pc, #8]	; (8015e30 <malloc+0xc>)
 8015e26:	4601      	mov	r1, r0
 8015e28:	6818      	ldr	r0, [r3, #0]
 8015e2a:	f000 b86f 	b.w	8015f0c <_malloc_r>
 8015e2e:	bf00      	nop
 8015e30:	20000044 	.word	0x20000044

08015e34 <_free_r>:
 8015e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e36:	2900      	cmp	r1, #0
 8015e38:	d044      	beq.n	8015ec4 <_free_r+0x90>
 8015e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e3e:	9001      	str	r0, [sp, #4]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	f1a1 0404 	sub.w	r4, r1, #4
 8015e46:	bfb8      	it	lt
 8015e48:	18e4      	addlt	r4, r4, r3
 8015e4a:	f000 fe39 	bl	8016ac0 <__malloc_lock>
 8015e4e:	4a1e      	ldr	r2, [pc, #120]	; (8015ec8 <_free_r+0x94>)
 8015e50:	9801      	ldr	r0, [sp, #4]
 8015e52:	6813      	ldr	r3, [r2, #0]
 8015e54:	b933      	cbnz	r3, 8015e64 <_free_r+0x30>
 8015e56:	6063      	str	r3, [r4, #4]
 8015e58:	6014      	str	r4, [r2, #0]
 8015e5a:	b003      	add	sp, #12
 8015e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e60:	f000 be34 	b.w	8016acc <__malloc_unlock>
 8015e64:	42a3      	cmp	r3, r4
 8015e66:	d908      	bls.n	8015e7a <_free_r+0x46>
 8015e68:	6825      	ldr	r5, [r4, #0]
 8015e6a:	1961      	adds	r1, r4, r5
 8015e6c:	428b      	cmp	r3, r1
 8015e6e:	bf01      	itttt	eq
 8015e70:	6819      	ldreq	r1, [r3, #0]
 8015e72:	685b      	ldreq	r3, [r3, #4]
 8015e74:	1949      	addeq	r1, r1, r5
 8015e76:	6021      	streq	r1, [r4, #0]
 8015e78:	e7ed      	b.n	8015e56 <_free_r+0x22>
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	685b      	ldr	r3, [r3, #4]
 8015e7e:	b10b      	cbz	r3, 8015e84 <_free_r+0x50>
 8015e80:	42a3      	cmp	r3, r4
 8015e82:	d9fa      	bls.n	8015e7a <_free_r+0x46>
 8015e84:	6811      	ldr	r1, [r2, #0]
 8015e86:	1855      	adds	r5, r2, r1
 8015e88:	42a5      	cmp	r5, r4
 8015e8a:	d10b      	bne.n	8015ea4 <_free_r+0x70>
 8015e8c:	6824      	ldr	r4, [r4, #0]
 8015e8e:	4421      	add	r1, r4
 8015e90:	1854      	adds	r4, r2, r1
 8015e92:	42a3      	cmp	r3, r4
 8015e94:	6011      	str	r1, [r2, #0]
 8015e96:	d1e0      	bne.n	8015e5a <_free_r+0x26>
 8015e98:	681c      	ldr	r4, [r3, #0]
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	6053      	str	r3, [r2, #4]
 8015e9e:	4421      	add	r1, r4
 8015ea0:	6011      	str	r1, [r2, #0]
 8015ea2:	e7da      	b.n	8015e5a <_free_r+0x26>
 8015ea4:	d902      	bls.n	8015eac <_free_r+0x78>
 8015ea6:	230c      	movs	r3, #12
 8015ea8:	6003      	str	r3, [r0, #0]
 8015eaa:	e7d6      	b.n	8015e5a <_free_r+0x26>
 8015eac:	6825      	ldr	r5, [r4, #0]
 8015eae:	1961      	adds	r1, r4, r5
 8015eb0:	428b      	cmp	r3, r1
 8015eb2:	bf04      	itt	eq
 8015eb4:	6819      	ldreq	r1, [r3, #0]
 8015eb6:	685b      	ldreq	r3, [r3, #4]
 8015eb8:	6063      	str	r3, [r4, #4]
 8015eba:	bf04      	itt	eq
 8015ebc:	1949      	addeq	r1, r1, r5
 8015ebe:	6021      	streq	r1, [r4, #0]
 8015ec0:	6054      	str	r4, [r2, #4]
 8015ec2:	e7ca      	b.n	8015e5a <_free_r+0x26>
 8015ec4:	b003      	add	sp, #12
 8015ec6:	bd30      	pop	{r4, r5, pc}
 8015ec8:	200087f4 	.word	0x200087f4

08015ecc <sbrk_aligned>:
 8015ecc:	b570      	push	{r4, r5, r6, lr}
 8015ece:	4e0e      	ldr	r6, [pc, #56]	; (8015f08 <sbrk_aligned+0x3c>)
 8015ed0:	460c      	mov	r4, r1
 8015ed2:	6831      	ldr	r1, [r6, #0]
 8015ed4:	4605      	mov	r5, r0
 8015ed6:	b911      	cbnz	r1, 8015ede <sbrk_aligned+0x12>
 8015ed8:	f000 fb7a 	bl	80165d0 <_sbrk_r>
 8015edc:	6030      	str	r0, [r6, #0]
 8015ede:	4621      	mov	r1, r4
 8015ee0:	4628      	mov	r0, r5
 8015ee2:	f000 fb75 	bl	80165d0 <_sbrk_r>
 8015ee6:	1c43      	adds	r3, r0, #1
 8015ee8:	d00a      	beq.n	8015f00 <sbrk_aligned+0x34>
 8015eea:	1cc4      	adds	r4, r0, #3
 8015eec:	f024 0403 	bic.w	r4, r4, #3
 8015ef0:	42a0      	cmp	r0, r4
 8015ef2:	d007      	beq.n	8015f04 <sbrk_aligned+0x38>
 8015ef4:	1a21      	subs	r1, r4, r0
 8015ef6:	4628      	mov	r0, r5
 8015ef8:	f000 fb6a 	bl	80165d0 <_sbrk_r>
 8015efc:	3001      	adds	r0, #1
 8015efe:	d101      	bne.n	8015f04 <sbrk_aligned+0x38>
 8015f00:	f04f 34ff 	mov.w	r4, #4294967295
 8015f04:	4620      	mov	r0, r4
 8015f06:	bd70      	pop	{r4, r5, r6, pc}
 8015f08:	200087f8 	.word	0x200087f8

08015f0c <_malloc_r>:
 8015f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f10:	1ccd      	adds	r5, r1, #3
 8015f12:	f025 0503 	bic.w	r5, r5, #3
 8015f16:	3508      	adds	r5, #8
 8015f18:	2d0c      	cmp	r5, #12
 8015f1a:	bf38      	it	cc
 8015f1c:	250c      	movcc	r5, #12
 8015f1e:	2d00      	cmp	r5, #0
 8015f20:	4607      	mov	r7, r0
 8015f22:	db01      	blt.n	8015f28 <_malloc_r+0x1c>
 8015f24:	42a9      	cmp	r1, r5
 8015f26:	d905      	bls.n	8015f34 <_malloc_r+0x28>
 8015f28:	230c      	movs	r3, #12
 8015f2a:	603b      	str	r3, [r7, #0]
 8015f2c:	2600      	movs	r6, #0
 8015f2e:	4630      	mov	r0, r6
 8015f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f34:	4e2e      	ldr	r6, [pc, #184]	; (8015ff0 <_malloc_r+0xe4>)
 8015f36:	f000 fdc3 	bl	8016ac0 <__malloc_lock>
 8015f3a:	6833      	ldr	r3, [r6, #0]
 8015f3c:	461c      	mov	r4, r3
 8015f3e:	bb34      	cbnz	r4, 8015f8e <_malloc_r+0x82>
 8015f40:	4629      	mov	r1, r5
 8015f42:	4638      	mov	r0, r7
 8015f44:	f7ff ffc2 	bl	8015ecc <sbrk_aligned>
 8015f48:	1c43      	adds	r3, r0, #1
 8015f4a:	4604      	mov	r4, r0
 8015f4c:	d14d      	bne.n	8015fea <_malloc_r+0xde>
 8015f4e:	6834      	ldr	r4, [r6, #0]
 8015f50:	4626      	mov	r6, r4
 8015f52:	2e00      	cmp	r6, #0
 8015f54:	d140      	bne.n	8015fd8 <_malloc_r+0xcc>
 8015f56:	6823      	ldr	r3, [r4, #0]
 8015f58:	4631      	mov	r1, r6
 8015f5a:	4638      	mov	r0, r7
 8015f5c:	eb04 0803 	add.w	r8, r4, r3
 8015f60:	f000 fb36 	bl	80165d0 <_sbrk_r>
 8015f64:	4580      	cmp	r8, r0
 8015f66:	d13a      	bne.n	8015fde <_malloc_r+0xd2>
 8015f68:	6821      	ldr	r1, [r4, #0]
 8015f6a:	3503      	adds	r5, #3
 8015f6c:	1a6d      	subs	r5, r5, r1
 8015f6e:	f025 0503 	bic.w	r5, r5, #3
 8015f72:	3508      	adds	r5, #8
 8015f74:	2d0c      	cmp	r5, #12
 8015f76:	bf38      	it	cc
 8015f78:	250c      	movcc	r5, #12
 8015f7a:	4629      	mov	r1, r5
 8015f7c:	4638      	mov	r0, r7
 8015f7e:	f7ff ffa5 	bl	8015ecc <sbrk_aligned>
 8015f82:	3001      	adds	r0, #1
 8015f84:	d02b      	beq.n	8015fde <_malloc_r+0xd2>
 8015f86:	6823      	ldr	r3, [r4, #0]
 8015f88:	442b      	add	r3, r5
 8015f8a:	6023      	str	r3, [r4, #0]
 8015f8c:	e00e      	b.n	8015fac <_malloc_r+0xa0>
 8015f8e:	6822      	ldr	r2, [r4, #0]
 8015f90:	1b52      	subs	r2, r2, r5
 8015f92:	d41e      	bmi.n	8015fd2 <_malloc_r+0xc6>
 8015f94:	2a0b      	cmp	r2, #11
 8015f96:	d916      	bls.n	8015fc6 <_malloc_r+0xba>
 8015f98:	1961      	adds	r1, r4, r5
 8015f9a:	42a3      	cmp	r3, r4
 8015f9c:	6025      	str	r5, [r4, #0]
 8015f9e:	bf18      	it	ne
 8015fa0:	6059      	strne	r1, [r3, #4]
 8015fa2:	6863      	ldr	r3, [r4, #4]
 8015fa4:	bf08      	it	eq
 8015fa6:	6031      	streq	r1, [r6, #0]
 8015fa8:	5162      	str	r2, [r4, r5]
 8015faa:	604b      	str	r3, [r1, #4]
 8015fac:	4638      	mov	r0, r7
 8015fae:	f104 060b 	add.w	r6, r4, #11
 8015fb2:	f000 fd8b 	bl	8016acc <__malloc_unlock>
 8015fb6:	f026 0607 	bic.w	r6, r6, #7
 8015fba:	1d23      	adds	r3, r4, #4
 8015fbc:	1af2      	subs	r2, r6, r3
 8015fbe:	d0b6      	beq.n	8015f2e <_malloc_r+0x22>
 8015fc0:	1b9b      	subs	r3, r3, r6
 8015fc2:	50a3      	str	r3, [r4, r2]
 8015fc4:	e7b3      	b.n	8015f2e <_malloc_r+0x22>
 8015fc6:	6862      	ldr	r2, [r4, #4]
 8015fc8:	42a3      	cmp	r3, r4
 8015fca:	bf0c      	ite	eq
 8015fcc:	6032      	streq	r2, [r6, #0]
 8015fce:	605a      	strne	r2, [r3, #4]
 8015fd0:	e7ec      	b.n	8015fac <_malloc_r+0xa0>
 8015fd2:	4623      	mov	r3, r4
 8015fd4:	6864      	ldr	r4, [r4, #4]
 8015fd6:	e7b2      	b.n	8015f3e <_malloc_r+0x32>
 8015fd8:	4634      	mov	r4, r6
 8015fda:	6876      	ldr	r6, [r6, #4]
 8015fdc:	e7b9      	b.n	8015f52 <_malloc_r+0x46>
 8015fde:	230c      	movs	r3, #12
 8015fe0:	603b      	str	r3, [r7, #0]
 8015fe2:	4638      	mov	r0, r7
 8015fe4:	f000 fd72 	bl	8016acc <__malloc_unlock>
 8015fe8:	e7a1      	b.n	8015f2e <_malloc_r+0x22>
 8015fea:	6025      	str	r5, [r4, #0]
 8015fec:	e7de      	b.n	8015fac <_malloc_r+0xa0>
 8015fee:	bf00      	nop
 8015ff0:	200087f4 	.word	0x200087f4

08015ff4 <__sfputc_r>:
 8015ff4:	6893      	ldr	r3, [r2, #8]
 8015ff6:	3b01      	subs	r3, #1
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	b410      	push	{r4}
 8015ffc:	6093      	str	r3, [r2, #8]
 8015ffe:	da08      	bge.n	8016012 <__sfputc_r+0x1e>
 8016000:	6994      	ldr	r4, [r2, #24]
 8016002:	42a3      	cmp	r3, r4
 8016004:	db01      	blt.n	801600a <__sfputc_r+0x16>
 8016006:	290a      	cmp	r1, #10
 8016008:	d103      	bne.n	8016012 <__sfputc_r+0x1e>
 801600a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801600e:	f000 bb33 	b.w	8016678 <__swbuf_r>
 8016012:	6813      	ldr	r3, [r2, #0]
 8016014:	1c58      	adds	r0, r3, #1
 8016016:	6010      	str	r0, [r2, #0]
 8016018:	7019      	strb	r1, [r3, #0]
 801601a:	4608      	mov	r0, r1
 801601c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016020:	4770      	bx	lr

08016022 <__sfputs_r>:
 8016022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016024:	4606      	mov	r6, r0
 8016026:	460f      	mov	r7, r1
 8016028:	4614      	mov	r4, r2
 801602a:	18d5      	adds	r5, r2, r3
 801602c:	42ac      	cmp	r4, r5
 801602e:	d101      	bne.n	8016034 <__sfputs_r+0x12>
 8016030:	2000      	movs	r0, #0
 8016032:	e007      	b.n	8016044 <__sfputs_r+0x22>
 8016034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016038:	463a      	mov	r2, r7
 801603a:	4630      	mov	r0, r6
 801603c:	f7ff ffda 	bl	8015ff4 <__sfputc_r>
 8016040:	1c43      	adds	r3, r0, #1
 8016042:	d1f3      	bne.n	801602c <__sfputs_r+0xa>
 8016044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016048 <_vfiprintf_r>:
 8016048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801604c:	460d      	mov	r5, r1
 801604e:	b09d      	sub	sp, #116	; 0x74
 8016050:	4614      	mov	r4, r2
 8016052:	4698      	mov	r8, r3
 8016054:	4606      	mov	r6, r0
 8016056:	b118      	cbz	r0, 8016060 <_vfiprintf_r+0x18>
 8016058:	6983      	ldr	r3, [r0, #24]
 801605a:	b90b      	cbnz	r3, 8016060 <_vfiprintf_r+0x18>
 801605c:	f7ff fe30 	bl	8015cc0 <__sinit>
 8016060:	4b89      	ldr	r3, [pc, #548]	; (8016288 <_vfiprintf_r+0x240>)
 8016062:	429d      	cmp	r5, r3
 8016064:	d11b      	bne.n	801609e <_vfiprintf_r+0x56>
 8016066:	6875      	ldr	r5, [r6, #4]
 8016068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801606a:	07d9      	lsls	r1, r3, #31
 801606c:	d405      	bmi.n	801607a <_vfiprintf_r+0x32>
 801606e:	89ab      	ldrh	r3, [r5, #12]
 8016070:	059a      	lsls	r2, r3, #22
 8016072:	d402      	bmi.n	801607a <_vfiprintf_r+0x32>
 8016074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016076:	f7ff fed3 	bl	8015e20 <__retarget_lock_acquire_recursive>
 801607a:	89ab      	ldrh	r3, [r5, #12]
 801607c:	071b      	lsls	r3, r3, #28
 801607e:	d501      	bpl.n	8016084 <_vfiprintf_r+0x3c>
 8016080:	692b      	ldr	r3, [r5, #16]
 8016082:	b9eb      	cbnz	r3, 80160c0 <_vfiprintf_r+0x78>
 8016084:	4629      	mov	r1, r5
 8016086:	4630      	mov	r0, r6
 8016088:	f000 fb5a 	bl	8016740 <__swsetup_r>
 801608c:	b1c0      	cbz	r0, 80160c0 <_vfiprintf_r+0x78>
 801608e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016090:	07dc      	lsls	r4, r3, #31
 8016092:	d50e      	bpl.n	80160b2 <_vfiprintf_r+0x6a>
 8016094:	f04f 30ff 	mov.w	r0, #4294967295
 8016098:	b01d      	add	sp, #116	; 0x74
 801609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801609e:	4b7b      	ldr	r3, [pc, #492]	; (801628c <_vfiprintf_r+0x244>)
 80160a0:	429d      	cmp	r5, r3
 80160a2:	d101      	bne.n	80160a8 <_vfiprintf_r+0x60>
 80160a4:	68b5      	ldr	r5, [r6, #8]
 80160a6:	e7df      	b.n	8016068 <_vfiprintf_r+0x20>
 80160a8:	4b79      	ldr	r3, [pc, #484]	; (8016290 <_vfiprintf_r+0x248>)
 80160aa:	429d      	cmp	r5, r3
 80160ac:	bf08      	it	eq
 80160ae:	68f5      	ldreq	r5, [r6, #12]
 80160b0:	e7da      	b.n	8016068 <_vfiprintf_r+0x20>
 80160b2:	89ab      	ldrh	r3, [r5, #12]
 80160b4:	0598      	lsls	r0, r3, #22
 80160b6:	d4ed      	bmi.n	8016094 <_vfiprintf_r+0x4c>
 80160b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160ba:	f7ff feb2 	bl	8015e22 <__retarget_lock_release_recursive>
 80160be:	e7e9      	b.n	8016094 <_vfiprintf_r+0x4c>
 80160c0:	2300      	movs	r3, #0
 80160c2:	9309      	str	r3, [sp, #36]	; 0x24
 80160c4:	2320      	movs	r3, #32
 80160c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80160ce:	2330      	movs	r3, #48	; 0x30
 80160d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016294 <_vfiprintf_r+0x24c>
 80160d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160d8:	f04f 0901 	mov.w	r9, #1
 80160dc:	4623      	mov	r3, r4
 80160de:	469a      	mov	sl, r3
 80160e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160e4:	b10a      	cbz	r2, 80160ea <_vfiprintf_r+0xa2>
 80160e6:	2a25      	cmp	r2, #37	; 0x25
 80160e8:	d1f9      	bne.n	80160de <_vfiprintf_r+0x96>
 80160ea:	ebba 0b04 	subs.w	fp, sl, r4
 80160ee:	d00b      	beq.n	8016108 <_vfiprintf_r+0xc0>
 80160f0:	465b      	mov	r3, fp
 80160f2:	4622      	mov	r2, r4
 80160f4:	4629      	mov	r1, r5
 80160f6:	4630      	mov	r0, r6
 80160f8:	f7ff ff93 	bl	8016022 <__sfputs_r>
 80160fc:	3001      	adds	r0, #1
 80160fe:	f000 80aa 	beq.w	8016256 <_vfiprintf_r+0x20e>
 8016102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016104:	445a      	add	r2, fp
 8016106:	9209      	str	r2, [sp, #36]	; 0x24
 8016108:	f89a 3000 	ldrb.w	r3, [sl]
 801610c:	2b00      	cmp	r3, #0
 801610e:	f000 80a2 	beq.w	8016256 <_vfiprintf_r+0x20e>
 8016112:	2300      	movs	r3, #0
 8016114:	f04f 32ff 	mov.w	r2, #4294967295
 8016118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801611c:	f10a 0a01 	add.w	sl, sl, #1
 8016120:	9304      	str	r3, [sp, #16]
 8016122:	9307      	str	r3, [sp, #28]
 8016124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016128:	931a      	str	r3, [sp, #104]	; 0x68
 801612a:	4654      	mov	r4, sl
 801612c:	2205      	movs	r2, #5
 801612e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016132:	4858      	ldr	r0, [pc, #352]	; (8016294 <_vfiprintf_r+0x24c>)
 8016134:	f7ea f85c 	bl	80001f0 <memchr>
 8016138:	9a04      	ldr	r2, [sp, #16]
 801613a:	b9d8      	cbnz	r0, 8016174 <_vfiprintf_r+0x12c>
 801613c:	06d1      	lsls	r1, r2, #27
 801613e:	bf44      	itt	mi
 8016140:	2320      	movmi	r3, #32
 8016142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016146:	0713      	lsls	r3, r2, #28
 8016148:	bf44      	itt	mi
 801614a:	232b      	movmi	r3, #43	; 0x2b
 801614c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016150:	f89a 3000 	ldrb.w	r3, [sl]
 8016154:	2b2a      	cmp	r3, #42	; 0x2a
 8016156:	d015      	beq.n	8016184 <_vfiprintf_r+0x13c>
 8016158:	9a07      	ldr	r2, [sp, #28]
 801615a:	4654      	mov	r4, sl
 801615c:	2000      	movs	r0, #0
 801615e:	f04f 0c0a 	mov.w	ip, #10
 8016162:	4621      	mov	r1, r4
 8016164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016168:	3b30      	subs	r3, #48	; 0x30
 801616a:	2b09      	cmp	r3, #9
 801616c:	d94e      	bls.n	801620c <_vfiprintf_r+0x1c4>
 801616e:	b1b0      	cbz	r0, 801619e <_vfiprintf_r+0x156>
 8016170:	9207      	str	r2, [sp, #28]
 8016172:	e014      	b.n	801619e <_vfiprintf_r+0x156>
 8016174:	eba0 0308 	sub.w	r3, r0, r8
 8016178:	fa09 f303 	lsl.w	r3, r9, r3
 801617c:	4313      	orrs	r3, r2
 801617e:	9304      	str	r3, [sp, #16]
 8016180:	46a2      	mov	sl, r4
 8016182:	e7d2      	b.n	801612a <_vfiprintf_r+0xe2>
 8016184:	9b03      	ldr	r3, [sp, #12]
 8016186:	1d19      	adds	r1, r3, #4
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	9103      	str	r1, [sp, #12]
 801618c:	2b00      	cmp	r3, #0
 801618e:	bfbb      	ittet	lt
 8016190:	425b      	neglt	r3, r3
 8016192:	f042 0202 	orrlt.w	r2, r2, #2
 8016196:	9307      	strge	r3, [sp, #28]
 8016198:	9307      	strlt	r3, [sp, #28]
 801619a:	bfb8      	it	lt
 801619c:	9204      	strlt	r2, [sp, #16]
 801619e:	7823      	ldrb	r3, [r4, #0]
 80161a0:	2b2e      	cmp	r3, #46	; 0x2e
 80161a2:	d10c      	bne.n	80161be <_vfiprintf_r+0x176>
 80161a4:	7863      	ldrb	r3, [r4, #1]
 80161a6:	2b2a      	cmp	r3, #42	; 0x2a
 80161a8:	d135      	bne.n	8016216 <_vfiprintf_r+0x1ce>
 80161aa:	9b03      	ldr	r3, [sp, #12]
 80161ac:	1d1a      	adds	r2, r3, #4
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	9203      	str	r2, [sp, #12]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	bfb8      	it	lt
 80161b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80161ba:	3402      	adds	r4, #2
 80161bc:	9305      	str	r3, [sp, #20]
 80161be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80162a4 <_vfiprintf_r+0x25c>
 80161c2:	7821      	ldrb	r1, [r4, #0]
 80161c4:	2203      	movs	r2, #3
 80161c6:	4650      	mov	r0, sl
 80161c8:	f7ea f812 	bl	80001f0 <memchr>
 80161cc:	b140      	cbz	r0, 80161e0 <_vfiprintf_r+0x198>
 80161ce:	2340      	movs	r3, #64	; 0x40
 80161d0:	eba0 000a 	sub.w	r0, r0, sl
 80161d4:	fa03 f000 	lsl.w	r0, r3, r0
 80161d8:	9b04      	ldr	r3, [sp, #16]
 80161da:	4303      	orrs	r3, r0
 80161dc:	3401      	adds	r4, #1
 80161de:	9304      	str	r3, [sp, #16]
 80161e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161e4:	482c      	ldr	r0, [pc, #176]	; (8016298 <_vfiprintf_r+0x250>)
 80161e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161ea:	2206      	movs	r2, #6
 80161ec:	f7ea f800 	bl	80001f0 <memchr>
 80161f0:	2800      	cmp	r0, #0
 80161f2:	d03f      	beq.n	8016274 <_vfiprintf_r+0x22c>
 80161f4:	4b29      	ldr	r3, [pc, #164]	; (801629c <_vfiprintf_r+0x254>)
 80161f6:	bb1b      	cbnz	r3, 8016240 <_vfiprintf_r+0x1f8>
 80161f8:	9b03      	ldr	r3, [sp, #12]
 80161fa:	3307      	adds	r3, #7
 80161fc:	f023 0307 	bic.w	r3, r3, #7
 8016200:	3308      	adds	r3, #8
 8016202:	9303      	str	r3, [sp, #12]
 8016204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016206:	443b      	add	r3, r7
 8016208:	9309      	str	r3, [sp, #36]	; 0x24
 801620a:	e767      	b.n	80160dc <_vfiprintf_r+0x94>
 801620c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016210:	460c      	mov	r4, r1
 8016212:	2001      	movs	r0, #1
 8016214:	e7a5      	b.n	8016162 <_vfiprintf_r+0x11a>
 8016216:	2300      	movs	r3, #0
 8016218:	3401      	adds	r4, #1
 801621a:	9305      	str	r3, [sp, #20]
 801621c:	4619      	mov	r1, r3
 801621e:	f04f 0c0a 	mov.w	ip, #10
 8016222:	4620      	mov	r0, r4
 8016224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016228:	3a30      	subs	r2, #48	; 0x30
 801622a:	2a09      	cmp	r2, #9
 801622c:	d903      	bls.n	8016236 <_vfiprintf_r+0x1ee>
 801622e:	2b00      	cmp	r3, #0
 8016230:	d0c5      	beq.n	80161be <_vfiprintf_r+0x176>
 8016232:	9105      	str	r1, [sp, #20]
 8016234:	e7c3      	b.n	80161be <_vfiprintf_r+0x176>
 8016236:	fb0c 2101 	mla	r1, ip, r1, r2
 801623a:	4604      	mov	r4, r0
 801623c:	2301      	movs	r3, #1
 801623e:	e7f0      	b.n	8016222 <_vfiprintf_r+0x1da>
 8016240:	ab03      	add	r3, sp, #12
 8016242:	9300      	str	r3, [sp, #0]
 8016244:	462a      	mov	r2, r5
 8016246:	4b16      	ldr	r3, [pc, #88]	; (80162a0 <_vfiprintf_r+0x258>)
 8016248:	a904      	add	r1, sp, #16
 801624a:	4630      	mov	r0, r6
 801624c:	f3af 8000 	nop.w
 8016250:	4607      	mov	r7, r0
 8016252:	1c78      	adds	r0, r7, #1
 8016254:	d1d6      	bne.n	8016204 <_vfiprintf_r+0x1bc>
 8016256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016258:	07d9      	lsls	r1, r3, #31
 801625a:	d405      	bmi.n	8016268 <_vfiprintf_r+0x220>
 801625c:	89ab      	ldrh	r3, [r5, #12]
 801625e:	059a      	lsls	r2, r3, #22
 8016260:	d402      	bmi.n	8016268 <_vfiprintf_r+0x220>
 8016262:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016264:	f7ff fddd 	bl	8015e22 <__retarget_lock_release_recursive>
 8016268:	89ab      	ldrh	r3, [r5, #12]
 801626a:	065b      	lsls	r3, r3, #25
 801626c:	f53f af12 	bmi.w	8016094 <_vfiprintf_r+0x4c>
 8016270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016272:	e711      	b.n	8016098 <_vfiprintf_r+0x50>
 8016274:	ab03      	add	r3, sp, #12
 8016276:	9300      	str	r3, [sp, #0]
 8016278:	462a      	mov	r2, r5
 801627a:	4b09      	ldr	r3, [pc, #36]	; (80162a0 <_vfiprintf_r+0x258>)
 801627c:	a904      	add	r1, sp, #16
 801627e:	4630      	mov	r0, r6
 8016280:	f000 f880 	bl	8016384 <_printf_i>
 8016284:	e7e4      	b.n	8016250 <_vfiprintf_r+0x208>
 8016286:	bf00      	nop
 8016288:	08019b60 	.word	0x08019b60
 801628c:	08019b80 	.word	0x08019b80
 8016290:	08019b40 	.word	0x08019b40
 8016294:	08019ba0 	.word	0x08019ba0
 8016298:	08019baa 	.word	0x08019baa
 801629c:	00000000 	.word	0x00000000
 80162a0:	08016023 	.word	0x08016023
 80162a4:	08019ba6 	.word	0x08019ba6

080162a8 <_printf_common>:
 80162a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162ac:	4616      	mov	r6, r2
 80162ae:	4699      	mov	r9, r3
 80162b0:	688a      	ldr	r2, [r1, #8]
 80162b2:	690b      	ldr	r3, [r1, #16]
 80162b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80162b8:	4293      	cmp	r3, r2
 80162ba:	bfb8      	it	lt
 80162bc:	4613      	movlt	r3, r2
 80162be:	6033      	str	r3, [r6, #0]
 80162c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80162c4:	4607      	mov	r7, r0
 80162c6:	460c      	mov	r4, r1
 80162c8:	b10a      	cbz	r2, 80162ce <_printf_common+0x26>
 80162ca:	3301      	adds	r3, #1
 80162cc:	6033      	str	r3, [r6, #0]
 80162ce:	6823      	ldr	r3, [r4, #0]
 80162d0:	0699      	lsls	r1, r3, #26
 80162d2:	bf42      	ittt	mi
 80162d4:	6833      	ldrmi	r3, [r6, #0]
 80162d6:	3302      	addmi	r3, #2
 80162d8:	6033      	strmi	r3, [r6, #0]
 80162da:	6825      	ldr	r5, [r4, #0]
 80162dc:	f015 0506 	ands.w	r5, r5, #6
 80162e0:	d106      	bne.n	80162f0 <_printf_common+0x48>
 80162e2:	f104 0a19 	add.w	sl, r4, #25
 80162e6:	68e3      	ldr	r3, [r4, #12]
 80162e8:	6832      	ldr	r2, [r6, #0]
 80162ea:	1a9b      	subs	r3, r3, r2
 80162ec:	42ab      	cmp	r3, r5
 80162ee:	dc26      	bgt.n	801633e <_printf_common+0x96>
 80162f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80162f4:	1e13      	subs	r3, r2, #0
 80162f6:	6822      	ldr	r2, [r4, #0]
 80162f8:	bf18      	it	ne
 80162fa:	2301      	movne	r3, #1
 80162fc:	0692      	lsls	r2, r2, #26
 80162fe:	d42b      	bmi.n	8016358 <_printf_common+0xb0>
 8016300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016304:	4649      	mov	r1, r9
 8016306:	4638      	mov	r0, r7
 8016308:	47c0      	blx	r8
 801630a:	3001      	adds	r0, #1
 801630c:	d01e      	beq.n	801634c <_printf_common+0xa4>
 801630e:	6823      	ldr	r3, [r4, #0]
 8016310:	68e5      	ldr	r5, [r4, #12]
 8016312:	6832      	ldr	r2, [r6, #0]
 8016314:	f003 0306 	and.w	r3, r3, #6
 8016318:	2b04      	cmp	r3, #4
 801631a:	bf08      	it	eq
 801631c:	1aad      	subeq	r5, r5, r2
 801631e:	68a3      	ldr	r3, [r4, #8]
 8016320:	6922      	ldr	r2, [r4, #16]
 8016322:	bf0c      	ite	eq
 8016324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016328:	2500      	movne	r5, #0
 801632a:	4293      	cmp	r3, r2
 801632c:	bfc4      	itt	gt
 801632e:	1a9b      	subgt	r3, r3, r2
 8016330:	18ed      	addgt	r5, r5, r3
 8016332:	2600      	movs	r6, #0
 8016334:	341a      	adds	r4, #26
 8016336:	42b5      	cmp	r5, r6
 8016338:	d11a      	bne.n	8016370 <_printf_common+0xc8>
 801633a:	2000      	movs	r0, #0
 801633c:	e008      	b.n	8016350 <_printf_common+0xa8>
 801633e:	2301      	movs	r3, #1
 8016340:	4652      	mov	r2, sl
 8016342:	4649      	mov	r1, r9
 8016344:	4638      	mov	r0, r7
 8016346:	47c0      	blx	r8
 8016348:	3001      	adds	r0, #1
 801634a:	d103      	bne.n	8016354 <_printf_common+0xac>
 801634c:	f04f 30ff 	mov.w	r0, #4294967295
 8016350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016354:	3501      	adds	r5, #1
 8016356:	e7c6      	b.n	80162e6 <_printf_common+0x3e>
 8016358:	18e1      	adds	r1, r4, r3
 801635a:	1c5a      	adds	r2, r3, #1
 801635c:	2030      	movs	r0, #48	; 0x30
 801635e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016362:	4422      	add	r2, r4
 8016364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801636c:	3302      	adds	r3, #2
 801636e:	e7c7      	b.n	8016300 <_printf_common+0x58>
 8016370:	2301      	movs	r3, #1
 8016372:	4622      	mov	r2, r4
 8016374:	4649      	mov	r1, r9
 8016376:	4638      	mov	r0, r7
 8016378:	47c0      	blx	r8
 801637a:	3001      	adds	r0, #1
 801637c:	d0e6      	beq.n	801634c <_printf_common+0xa4>
 801637e:	3601      	adds	r6, #1
 8016380:	e7d9      	b.n	8016336 <_printf_common+0x8e>
	...

08016384 <_printf_i>:
 8016384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016388:	7e0f      	ldrb	r7, [r1, #24]
 801638a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801638c:	2f78      	cmp	r7, #120	; 0x78
 801638e:	4691      	mov	r9, r2
 8016390:	4680      	mov	r8, r0
 8016392:	460c      	mov	r4, r1
 8016394:	469a      	mov	sl, r3
 8016396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801639a:	d807      	bhi.n	80163ac <_printf_i+0x28>
 801639c:	2f62      	cmp	r7, #98	; 0x62
 801639e:	d80a      	bhi.n	80163b6 <_printf_i+0x32>
 80163a0:	2f00      	cmp	r7, #0
 80163a2:	f000 80d8 	beq.w	8016556 <_printf_i+0x1d2>
 80163a6:	2f58      	cmp	r7, #88	; 0x58
 80163a8:	f000 80a3 	beq.w	80164f2 <_printf_i+0x16e>
 80163ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80163b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80163b4:	e03a      	b.n	801642c <_printf_i+0xa8>
 80163b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80163ba:	2b15      	cmp	r3, #21
 80163bc:	d8f6      	bhi.n	80163ac <_printf_i+0x28>
 80163be:	a101      	add	r1, pc, #4	; (adr r1, 80163c4 <_printf_i+0x40>)
 80163c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80163c4:	0801641d 	.word	0x0801641d
 80163c8:	08016431 	.word	0x08016431
 80163cc:	080163ad 	.word	0x080163ad
 80163d0:	080163ad 	.word	0x080163ad
 80163d4:	080163ad 	.word	0x080163ad
 80163d8:	080163ad 	.word	0x080163ad
 80163dc:	08016431 	.word	0x08016431
 80163e0:	080163ad 	.word	0x080163ad
 80163e4:	080163ad 	.word	0x080163ad
 80163e8:	080163ad 	.word	0x080163ad
 80163ec:	080163ad 	.word	0x080163ad
 80163f0:	0801653d 	.word	0x0801653d
 80163f4:	08016461 	.word	0x08016461
 80163f8:	0801651f 	.word	0x0801651f
 80163fc:	080163ad 	.word	0x080163ad
 8016400:	080163ad 	.word	0x080163ad
 8016404:	0801655f 	.word	0x0801655f
 8016408:	080163ad 	.word	0x080163ad
 801640c:	08016461 	.word	0x08016461
 8016410:	080163ad 	.word	0x080163ad
 8016414:	080163ad 	.word	0x080163ad
 8016418:	08016527 	.word	0x08016527
 801641c:	682b      	ldr	r3, [r5, #0]
 801641e:	1d1a      	adds	r2, r3, #4
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	602a      	str	r2, [r5, #0]
 8016424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801642c:	2301      	movs	r3, #1
 801642e:	e0a3      	b.n	8016578 <_printf_i+0x1f4>
 8016430:	6820      	ldr	r0, [r4, #0]
 8016432:	6829      	ldr	r1, [r5, #0]
 8016434:	0606      	lsls	r6, r0, #24
 8016436:	f101 0304 	add.w	r3, r1, #4
 801643a:	d50a      	bpl.n	8016452 <_printf_i+0xce>
 801643c:	680e      	ldr	r6, [r1, #0]
 801643e:	602b      	str	r3, [r5, #0]
 8016440:	2e00      	cmp	r6, #0
 8016442:	da03      	bge.n	801644c <_printf_i+0xc8>
 8016444:	232d      	movs	r3, #45	; 0x2d
 8016446:	4276      	negs	r6, r6
 8016448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801644c:	485e      	ldr	r0, [pc, #376]	; (80165c8 <_printf_i+0x244>)
 801644e:	230a      	movs	r3, #10
 8016450:	e019      	b.n	8016486 <_printf_i+0x102>
 8016452:	680e      	ldr	r6, [r1, #0]
 8016454:	602b      	str	r3, [r5, #0]
 8016456:	f010 0f40 	tst.w	r0, #64	; 0x40
 801645a:	bf18      	it	ne
 801645c:	b236      	sxthne	r6, r6
 801645e:	e7ef      	b.n	8016440 <_printf_i+0xbc>
 8016460:	682b      	ldr	r3, [r5, #0]
 8016462:	6820      	ldr	r0, [r4, #0]
 8016464:	1d19      	adds	r1, r3, #4
 8016466:	6029      	str	r1, [r5, #0]
 8016468:	0601      	lsls	r1, r0, #24
 801646a:	d501      	bpl.n	8016470 <_printf_i+0xec>
 801646c:	681e      	ldr	r6, [r3, #0]
 801646e:	e002      	b.n	8016476 <_printf_i+0xf2>
 8016470:	0646      	lsls	r6, r0, #25
 8016472:	d5fb      	bpl.n	801646c <_printf_i+0xe8>
 8016474:	881e      	ldrh	r6, [r3, #0]
 8016476:	4854      	ldr	r0, [pc, #336]	; (80165c8 <_printf_i+0x244>)
 8016478:	2f6f      	cmp	r7, #111	; 0x6f
 801647a:	bf0c      	ite	eq
 801647c:	2308      	moveq	r3, #8
 801647e:	230a      	movne	r3, #10
 8016480:	2100      	movs	r1, #0
 8016482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016486:	6865      	ldr	r5, [r4, #4]
 8016488:	60a5      	str	r5, [r4, #8]
 801648a:	2d00      	cmp	r5, #0
 801648c:	bfa2      	ittt	ge
 801648e:	6821      	ldrge	r1, [r4, #0]
 8016490:	f021 0104 	bicge.w	r1, r1, #4
 8016494:	6021      	strge	r1, [r4, #0]
 8016496:	b90e      	cbnz	r6, 801649c <_printf_i+0x118>
 8016498:	2d00      	cmp	r5, #0
 801649a:	d04d      	beq.n	8016538 <_printf_i+0x1b4>
 801649c:	4615      	mov	r5, r2
 801649e:	fbb6 f1f3 	udiv	r1, r6, r3
 80164a2:	fb03 6711 	mls	r7, r3, r1, r6
 80164a6:	5dc7      	ldrb	r7, [r0, r7]
 80164a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80164ac:	4637      	mov	r7, r6
 80164ae:	42bb      	cmp	r3, r7
 80164b0:	460e      	mov	r6, r1
 80164b2:	d9f4      	bls.n	801649e <_printf_i+0x11a>
 80164b4:	2b08      	cmp	r3, #8
 80164b6:	d10b      	bne.n	80164d0 <_printf_i+0x14c>
 80164b8:	6823      	ldr	r3, [r4, #0]
 80164ba:	07de      	lsls	r6, r3, #31
 80164bc:	d508      	bpl.n	80164d0 <_printf_i+0x14c>
 80164be:	6923      	ldr	r3, [r4, #16]
 80164c0:	6861      	ldr	r1, [r4, #4]
 80164c2:	4299      	cmp	r1, r3
 80164c4:	bfde      	ittt	le
 80164c6:	2330      	movle	r3, #48	; 0x30
 80164c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80164cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80164d0:	1b52      	subs	r2, r2, r5
 80164d2:	6122      	str	r2, [r4, #16]
 80164d4:	f8cd a000 	str.w	sl, [sp]
 80164d8:	464b      	mov	r3, r9
 80164da:	aa03      	add	r2, sp, #12
 80164dc:	4621      	mov	r1, r4
 80164de:	4640      	mov	r0, r8
 80164e0:	f7ff fee2 	bl	80162a8 <_printf_common>
 80164e4:	3001      	adds	r0, #1
 80164e6:	d14c      	bne.n	8016582 <_printf_i+0x1fe>
 80164e8:	f04f 30ff 	mov.w	r0, #4294967295
 80164ec:	b004      	add	sp, #16
 80164ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164f2:	4835      	ldr	r0, [pc, #212]	; (80165c8 <_printf_i+0x244>)
 80164f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80164f8:	6829      	ldr	r1, [r5, #0]
 80164fa:	6823      	ldr	r3, [r4, #0]
 80164fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8016500:	6029      	str	r1, [r5, #0]
 8016502:	061d      	lsls	r5, r3, #24
 8016504:	d514      	bpl.n	8016530 <_printf_i+0x1ac>
 8016506:	07df      	lsls	r7, r3, #31
 8016508:	bf44      	itt	mi
 801650a:	f043 0320 	orrmi.w	r3, r3, #32
 801650e:	6023      	strmi	r3, [r4, #0]
 8016510:	b91e      	cbnz	r6, 801651a <_printf_i+0x196>
 8016512:	6823      	ldr	r3, [r4, #0]
 8016514:	f023 0320 	bic.w	r3, r3, #32
 8016518:	6023      	str	r3, [r4, #0]
 801651a:	2310      	movs	r3, #16
 801651c:	e7b0      	b.n	8016480 <_printf_i+0xfc>
 801651e:	6823      	ldr	r3, [r4, #0]
 8016520:	f043 0320 	orr.w	r3, r3, #32
 8016524:	6023      	str	r3, [r4, #0]
 8016526:	2378      	movs	r3, #120	; 0x78
 8016528:	4828      	ldr	r0, [pc, #160]	; (80165cc <_printf_i+0x248>)
 801652a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801652e:	e7e3      	b.n	80164f8 <_printf_i+0x174>
 8016530:	0659      	lsls	r1, r3, #25
 8016532:	bf48      	it	mi
 8016534:	b2b6      	uxthmi	r6, r6
 8016536:	e7e6      	b.n	8016506 <_printf_i+0x182>
 8016538:	4615      	mov	r5, r2
 801653a:	e7bb      	b.n	80164b4 <_printf_i+0x130>
 801653c:	682b      	ldr	r3, [r5, #0]
 801653e:	6826      	ldr	r6, [r4, #0]
 8016540:	6961      	ldr	r1, [r4, #20]
 8016542:	1d18      	adds	r0, r3, #4
 8016544:	6028      	str	r0, [r5, #0]
 8016546:	0635      	lsls	r5, r6, #24
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	d501      	bpl.n	8016550 <_printf_i+0x1cc>
 801654c:	6019      	str	r1, [r3, #0]
 801654e:	e002      	b.n	8016556 <_printf_i+0x1d2>
 8016550:	0670      	lsls	r0, r6, #25
 8016552:	d5fb      	bpl.n	801654c <_printf_i+0x1c8>
 8016554:	8019      	strh	r1, [r3, #0]
 8016556:	2300      	movs	r3, #0
 8016558:	6123      	str	r3, [r4, #16]
 801655a:	4615      	mov	r5, r2
 801655c:	e7ba      	b.n	80164d4 <_printf_i+0x150>
 801655e:	682b      	ldr	r3, [r5, #0]
 8016560:	1d1a      	adds	r2, r3, #4
 8016562:	602a      	str	r2, [r5, #0]
 8016564:	681d      	ldr	r5, [r3, #0]
 8016566:	6862      	ldr	r2, [r4, #4]
 8016568:	2100      	movs	r1, #0
 801656a:	4628      	mov	r0, r5
 801656c:	f7e9 fe40 	bl	80001f0 <memchr>
 8016570:	b108      	cbz	r0, 8016576 <_printf_i+0x1f2>
 8016572:	1b40      	subs	r0, r0, r5
 8016574:	6060      	str	r0, [r4, #4]
 8016576:	6863      	ldr	r3, [r4, #4]
 8016578:	6123      	str	r3, [r4, #16]
 801657a:	2300      	movs	r3, #0
 801657c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016580:	e7a8      	b.n	80164d4 <_printf_i+0x150>
 8016582:	6923      	ldr	r3, [r4, #16]
 8016584:	462a      	mov	r2, r5
 8016586:	4649      	mov	r1, r9
 8016588:	4640      	mov	r0, r8
 801658a:	47d0      	blx	sl
 801658c:	3001      	adds	r0, #1
 801658e:	d0ab      	beq.n	80164e8 <_printf_i+0x164>
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	079b      	lsls	r3, r3, #30
 8016594:	d413      	bmi.n	80165be <_printf_i+0x23a>
 8016596:	68e0      	ldr	r0, [r4, #12]
 8016598:	9b03      	ldr	r3, [sp, #12]
 801659a:	4298      	cmp	r0, r3
 801659c:	bfb8      	it	lt
 801659e:	4618      	movlt	r0, r3
 80165a0:	e7a4      	b.n	80164ec <_printf_i+0x168>
 80165a2:	2301      	movs	r3, #1
 80165a4:	4632      	mov	r2, r6
 80165a6:	4649      	mov	r1, r9
 80165a8:	4640      	mov	r0, r8
 80165aa:	47d0      	blx	sl
 80165ac:	3001      	adds	r0, #1
 80165ae:	d09b      	beq.n	80164e8 <_printf_i+0x164>
 80165b0:	3501      	adds	r5, #1
 80165b2:	68e3      	ldr	r3, [r4, #12]
 80165b4:	9903      	ldr	r1, [sp, #12]
 80165b6:	1a5b      	subs	r3, r3, r1
 80165b8:	42ab      	cmp	r3, r5
 80165ba:	dcf2      	bgt.n	80165a2 <_printf_i+0x21e>
 80165bc:	e7eb      	b.n	8016596 <_printf_i+0x212>
 80165be:	2500      	movs	r5, #0
 80165c0:	f104 0619 	add.w	r6, r4, #25
 80165c4:	e7f5      	b.n	80165b2 <_printf_i+0x22e>
 80165c6:	bf00      	nop
 80165c8:	08019bb1 	.word	0x08019bb1
 80165cc:	08019bc2 	.word	0x08019bc2

080165d0 <_sbrk_r>:
 80165d0:	b538      	push	{r3, r4, r5, lr}
 80165d2:	4d06      	ldr	r5, [pc, #24]	; (80165ec <_sbrk_r+0x1c>)
 80165d4:	2300      	movs	r3, #0
 80165d6:	4604      	mov	r4, r0
 80165d8:	4608      	mov	r0, r1
 80165da:	602b      	str	r3, [r5, #0]
 80165dc:	f7eb f92e 	bl	800183c <_sbrk>
 80165e0:	1c43      	adds	r3, r0, #1
 80165e2:	d102      	bne.n	80165ea <_sbrk_r+0x1a>
 80165e4:	682b      	ldr	r3, [r5, #0]
 80165e6:	b103      	cbz	r3, 80165ea <_sbrk_r+0x1a>
 80165e8:	6023      	str	r3, [r4, #0]
 80165ea:	bd38      	pop	{r3, r4, r5, pc}
 80165ec:	200087ec 	.word	0x200087ec

080165f0 <__sread>:
 80165f0:	b510      	push	{r4, lr}
 80165f2:	460c      	mov	r4, r1
 80165f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165f8:	f000 fa6e 	bl	8016ad8 <_read_r>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	bfab      	itete	ge
 8016600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016602:	89a3      	ldrhlt	r3, [r4, #12]
 8016604:	181b      	addge	r3, r3, r0
 8016606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801660a:	bfac      	ite	ge
 801660c:	6563      	strge	r3, [r4, #84]	; 0x54
 801660e:	81a3      	strhlt	r3, [r4, #12]
 8016610:	bd10      	pop	{r4, pc}

08016612 <__swrite>:
 8016612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016616:	461f      	mov	r7, r3
 8016618:	898b      	ldrh	r3, [r1, #12]
 801661a:	05db      	lsls	r3, r3, #23
 801661c:	4605      	mov	r5, r0
 801661e:	460c      	mov	r4, r1
 8016620:	4616      	mov	r6, r2
 8016622:	d505      	bpl.n	8016630 <__swrite+0x1e>
 8016624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016628:	2302      	movs	r3, #2
 801662a:	2200      	movs	r2, #0
 801662c:	f000 f9d0 	bl	80169d0 <_lseek_r>
 8016630:	89a3      	ldrh	r3, [r4, #12]
 8016632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801663a:	81a3      	strh	r3, [r4, #12]
 801663c:	4632      	mov	r2, r6
 801663e:	463b      	mov	r3, r7
 8016640:	4628      	mov	r0, r5
 8016642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016646:	f000 b869 	b.w	801671c <_write_r>

0801664a <__sseek>:
 801664a:	b510      	push	{r4, lr}
 801664c:	460c      	mov	r4, r1
 801664e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016652:	f000 f9bd 	bl	80169d0 <_lseek_r>
 8016656:	1c43      	adds	r3, r0, #1
 8016658:	89a3      	ldrh	r3, [r4, #12]
 801665a:	bf15      	itete	ne
 801665c:	6560      	strne	r0, [r4, #84]	; 0x54
 801665e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016666:	81a3      	strheq	r3, [r4, #12]
 8016668:	bf18      	it	ne
 801666a:	81a3      	strhne	r3, [r4, #12]
 801666c:	bd10      	pop	{r4, pc}

0801666e <__sclose>:
 801666e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016672:	f000 b8db 	b.w	801682c <_close_r>
	...

08016678 <__swbuf_r>:
 8016678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801667a:	460e      	mov	r6, r1
 801667c:	4614      	mov	r4, r2
 801667e:	4605      	mov	r5, r0
 8016680:	b118      	cbz	r0, 801668a <__swbuf_r+0x12>
 8016682:	6983      	ldr	r3, [r0, #24]
 8016684:	b90b      	cbnz	r3, 801668a <__swbuf_r+0x12>
 8016686:	f7ff fb1b 	bl	8015cc0 <__sinit>
 801668a:	4b21      	ldr	r3, [pc, #132]	; (8016710 <__swbuf_r+0x98>)
 801668c:	429c      	cmp	r4, r3
 801668e:	d12b      	bne.n	80166e8 <__swbuf_r+0x70>
 8016690:	686c      	ldr	r4, [r5, #4]
 8016692:	69a3      	ldr	r3, [r4, #24]
 8016694:	60a3      	str	r3, [r4, #8]
 8016696:	89a3      	ldrh	r3, [r4, #12]
 8016698:	071a      	lsls	r2, r3, #28
 801669a:	d52f      	bpl.n	80166fc <__swbuf_r+0x84>
 801669c:	6923      	ldr	r3, [r4, #16]
 801669e:	b36b      	cbz	r3, 80166fc <__swbuf_r+0x84>
 80166a0:	6923      	ldr	r3, [r4, #16]
 80166a2:	6820      	ldr	r0, [r4, #0]
 80166a4:	1ac0      	subs	r0, r0, r3
 80166a6:	6963      	ldr	r3, [r4, #20]
 80166a8:	b2f6      	uxtb	r6, r6
 80166aa:	4283      	cmp	r3, r0
 80166ac:	4637      	mov	r7, r6
 80166ae:	dc04      	bgt.n	80166ba <__swbuf_r+0x42>
 80166b0:	4621      	mov	r1, r4
 80166b2:	4628      	mov	r0, r5
 80166b4:	f000 f950 	bl	8016958 <_fflush_r>
 80166b8:	bb30      	cbnz	r0, 8016708 <__swbuf_r+0x90>
 80166ba:	68a3      	ldr	r3, [r4, #8]
 80166bc:	3b01      	subs	r3, #1
 80166be:	60a3      	str	r3, [r4, #8]
 80166c0:	6823      	ldr	r3, [r4, #0]
 80166c2:	1c5a      	adds	r2, r3, #1
 80166c4:	6022      	str	r2, [r4, #0]
 80166c6:	701e      	strb	r6, [r3, #0]
 80166c8:	6963      	ldr	r3, [r4, #20]
 80166ca:	3001      	adds	r0, #1
 80166cc:	4283      	cmp	r3, r0
 80166ce:	d004      	beq.n	80166da <__swbuf_r+0x62>
 80166d0:	89a3      	ldrh	r3, [r4, #12]
 80166d2:	07db      	lsls	r3, r3, #31
 80166d4:	d506      	bpl.n	80166e4 <__swbuf_r+0x6c>
 80166d6:	2e0a      	cmp	r6, #10
 80166d8:	d104      	bne.n	80166e4 <__swbuf_r+0x6c>
 80166da:	4621      	mov	r1, r4
 80166dc:	4628      	mov	r0, r5
 80166de:	f000 f93b 	bl	8016958 <_fflush_r>
 80166e2:	b988      	cbnz	r0, 8016708 <__swbuf_r+0x90>
 80166e4:	4638      	mov	r0, r7
 80166e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166e8:	4b0a      	ldr	r3, [pc, #40]	; (8016714 <__swbuf_r+0x9c>)
 80166ea:	429c      	cmp	r4, r3
 80166ec:	d101      	bne.n	80166f2 <__swbuf_r+0x7a>
 80166ee:	68ac      	ldr	r4, [r5, #8]
 80166f0:	e7cf      	b.n	8016692 <__swbuf_r+0x1a>
 80166f2:	4b09      	ldr	r3, [pc, #36]	; (8016718 <__swbuf_r+0xa0>)
 80166f4:	429c      	cmp	r4, r3
 80166f6:	bf08      	it	eq
 80166f8:	68ec      	ldreq	r4, [r5, #12]
 80166fa:	e7ca      	b.n	8016692 <__swbuf_r+0x1a>
 80166fc:	4621      	mov	r1, r4
 80166fe:	4628      	mov	r0, r5
 8016700:	f000 f81e 	bl	8016740 <__swsetup_r>
 8016704:	2800      	cmp	r0, #0
 8016706:	d0cb      	beq.n	80166a0 <__swbuf_r+0x28>
 8016708:	f04f 37ff 	mov.w	r7, #4294967295
 801670c:	e7ea      	b.n	80166e4 <__swbuf_r+0x6c>
 801670e:	bf00      	nop
 8016710:	08019b60 	.word	0x08019b60
 8016714:	08019b80 	.word	0x08019b80
 8016718:	08019b40 	.word	0x08019b40

0801671c <_write_r>:
 801671c:	b538      	push	{r3, r4, r5, lr}
 801671e:	4d07      	ldr	r5, [pc, #28]	; (801673c <_write_r+0x20>)
 8016720:	4604      	mov	r4, r0
 8016722:	4608      	mov	r0, r1
 8016724:	4611      	mov	r1, r2
 8016726:	2200      	movs	r2, #0
 8016728:	602a      	str	r2, [r5, #0]
 801672a:	461a      	mov	r2, r3
 801672c:	f7eb f835 	bl	800179a <_write>
 8016730:	1c43      	adds	r3, r0, #1
 8016732:	d102      	bne.n	801673a <_write_r+0x1e>
 8016734:	682b      	ldr	r3, [r5, #0]
 8016736:	b103      	cbz	r3, 801673a <_write_r+0x1e>
 8016738:	6023      	str	r3, [r4, #0]
 801673a:	bd38      	pop	{r3, r4, r5, pc}
 801673c:	200087ec 	.word	0x200087ec

08016740 <__swsetup_r>:
 8016740:	4b32      	ldr	r3, [pc, #200]	; (801680c <__swsetup_r+0xcc>)
 8016742:	b570      	push	{r4, r5, r6, lr}
 8016744:	681d      	ldr	r5, [r3, #0]
 8016746:	4606      	mov	r6, r0
 8016748:	460c      	mov	r4, r1
 801674a:	b125      	cbz	r5, 8016756 <__swsetup_r+0x16>
 801674c:	69ab      	ldr	r3, [r5, #24]
 801674e:	b913      	cbnz	r3, 8016756 <__swsetup_r+0x16>
 8016750:	4628      	mov	r0, r5
 8016752:	f7ff fab5 	bl	8015cc0 <__sinit>
 8016756:	4b2e      	ldr	r3, [pc, #184]	; (8016810 <__swsetup_r+0xd0>)
 8016758:	429c      	cmp	r4, r3
 801675a:	d10f      	bne.n	801677c <__swsetup_r+0x3c>
 801675c:	686c      	ldr	r4, [r5, #4]
 801675e:	89a3      	ldrh	r3, [r4, #12]
 8016760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016764:	0719      	lsls	r1, r3, #28
 8016766:	d42c      	bmi.n	80167c2 <__swsetup_r+0x82>
 8016768:	06dd      	lsls	r5, r3, #27
 801676a:	d411      	bmi.n	8016790 <__swsetup_r+0x50>
 801676c:	2309      	movs	r3, #9
 801676e:	6033      	str	r3, [r6, #0]
 8016770:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016774:	81a3      	strh	r3, [r4, #12]
 8016776:	f04f 30ff 	mov.w	r0, #4294967295
 801677a:	e03e      	b.n	80167fa <__swsetup_r+0xba>
 801677c:	4b25      	ldr	r3, [pc, #148]	; (8016814 <__swsetup_r+0xd4>)
 801677e:	429c      	cmp	r4, r3
 8016780:	d101      	bne.n	8016786 <__swsetup_r+0x46>
 8016782:	68ac      	ldr	r4, [r5, #8]
 8016784:	e7eb      	b.n	801675e <__swsetup_r+0x1e>
 8016786:	4b24      	ldr	r3, [pc, #144]	; (8016818 <__swsetup_r+0xd8>)
 8016788:	429c      	cmp	r4, r3
 801678a:	bf08      	it	eq
 801678c:	68ec      	ldreq	r4, [r5, #12]
 801678e:	e7e6      	b.n	801675e <__swsetup_r+0x1e>
 8016790:	0758      	lsls	r0, r3, #29
 8016792:	d512      	bpl.n	80167ba <__swsetup_r+0x7a>
 8016794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016796:	b141      	cbz	r1, 80167aa <__swsetup_r+0x6a>
 8016798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801679c:	4299      	cmp	r1, r3
 801679e:	d002      	beq.n	80167a6 <__swsetup_r+0x66>
 80167a0:	4630      	mov	r0, r6
 80167a2:	f7ff fb47 	bl	8015e34 <_free_r>
 80167a6:	2300      	movs	r3, #0
 80167a8:	6363      	str	r3, [r4, #52]	; 0x34
 80167aa:	89a3      	ldrh	r3, [r4, #12]
 80167ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80167b0:	81a3      	strh	r3, [r4, #12]
 80167b2:	2300      	movs	r3, #0
 80167b4:	6063      	str	r3, [r4, #4]
 80167b6:	6923      	ldr	r3, [r4, #16]
 80167b8:	6023      	str	r3, [r4, #0]
 80167ba:	89a3      	ldrh	r3, [r4, #12]
 80167bc:	f043 0308 	orr.w	r3, r3, #8
 80167c0:	81a3      	strh	r3, [r4, #12]
 80167c2:	6923      	ldr	r3, [r4, #16]
 80167c4:	b94b      	cbnz	r3, 80167da <__swsetup_r+0x9a>
 80167c6:	89a3      	ldrh	r3, [r4, #12]
 80167c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80167cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167d0:	d003      	beq.n	80167da <__swsetup_r+0x9a>
 80167d2:	4621      	mov	r1, r4
 80167d4:	4630      	mov	r0, r6
 80167d6:	f000 f933 	bl	8016a40 <__smakebuf_r>
 80167da:	89a0      	ldrh	r0, [r4, #12]
 80167dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80167e0:	f010 0301 	ands.w	r3, r0, #1
 80167e4:	d00a      	beq.n	80167fc <__swsetup_r+0xbc>
 80167e6:	2300      	movs	r3, #0
 80167e8:	60a3      	str	r3, [r4, #8]
 80167ea:	6963      	ldr	r3, [r4, #20]
 80167ec:	425b      	negs	r3, r3
 80167ee:	61a3      	str	r3, [r4, #24]
 80167f0:	6923      	ldr	r3, [r4, #16]
 80167f2:	b943      	cbnz	r3, 8016806 <__swsetup_r+0xc6>
 80167f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80167f8:	d1ba      	bne.n	8016770 <__swsetup_r+0x30>
 80167fa:	bd70      	pop	{r4, r5, r6, pc}
 80167fc:	0781      	lsls	r1, r0, #30
 80167fe:	bf58      	it	pl
 8016800:	6963      	ldrpl	r3, [r4, #20]
 8016802:	60a3      	str	r3, [r4, #8]
 8016804:	e7f4      	b.n	80167f0 <__swsetup_r+0xb0>
 8016806:	2000      	movs	r0, #0
 8016808:	e7f7      	b.n	80167fa <__swsetup_r+0xba>
 801680a:	bf00      	nop
 801680c:	20000044 	.word	0x20000044
 8016810:	08019b60 	.word	0x08019b60
 8016814:	08019b80 	.word	0x08019b80
 8016818:	08019b40 	.word	0x08019b40

0801681c <abort>:
 801681c:	b508      	push	{r3, lr}
 801681e:	2006      	movs	r0, #6
 8016820:	f000 f994 	bl	8016b4c <raise>
 8016824:	2001      	movs	r0, #1
 8016826:	f7ea ff91 	bl	800174c <_exit>
	...

0801682c <_close_r>:
 801682c:	b538      	push	{r3, r4, r5, lr}
 801682e:	4d06      	ldr	r5, [pc, #24]	; (8016848 <_close_r+0x1c>)
 8016830:	2300      	movs	r3, #0
 8016832:	4604      	mov	r4, r0
 8016834:	4608      	mov	r0, r1
 8016836:	602b      	str	r3, [r5, #0]
 8016838:	f7ea ffcb 	bl	80017d2 <_close>
 801683c:	1c43      	adds	r3, r0, #1
 801683e:	d102      	bne.n	8016846 <_close_r+0x1a>
 8016840:	682b      	ldr	r3, [r5, #0]
 8016842:	b103      	cbz	r3, 8016846 <_close_r+0x1a>
 8016844:	6023      	str	r3, [r4, #0]
 8016846:	bd38      	pop	{r3, r4, r5, pc}
 8016848:	200087ec 	.word	0x200087ec

0801684c <__sflush_r>:
 801684c:	898a      	ldrh	r2, [r1, #12]
 801684e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016852:	4605      	mov	r5, r0
 8016854:	0710      	lsls	r0, r2, #28
 8016856:	460c      	mov	r4, r1
 8016858:	d458      	bmi.n	801690c <__sflush_r+0xc0>
 801685a:	684b      	ldr	r3, [r1, #4]
 801685c:	2b00      	cmp	r3, #0
 801685e:	dc05      	bgt.n	801686c <__sflush_r+0x20>
 8016860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016862:	2b00      	cmp	r3, #0
 8016864:	dc02      	bgt.n	801686c <__sflush_r+0x20>
 8016866:	2000      	movs	r0, #0
 8016868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801686c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801686e:	2e00      	cmp	r6, #0
 8016870:	d0f9      	beq.n	8016866 <__sflush_r+0x1a>
 8016872:	2300      	movs	r3, #0
 8016874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016878:	682f      	ldr	r7, [r5, #0]
 801687a:	602b      	str	r3, [r5, #0]
 801687c:	d032      	beq.n	80168e4 <__sflush_r+0x98>
 801687e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016880:	89a3      	ldrh	r3, [r4, #12]
 8016882:	075a      	lsls	r2, r3, #29
 8016884:	d505      	bpl.n	8016892 <__sflush_r+0x46>
 8016886:	6863      	ldr	r3, [r4, #4]
 8016888:	1ac0      	subs	r0, r0, r3
 801688a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801688c:	b10b      	cbz	r3, 8016892 <__sflush_r+0x46>
 801688e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016890:	1ac0      	subs	r0, r0, r3
 8016892:	2300      	movs	r3, #0
 8016894:	4602      	mov	r2, r0
 8016896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016898:	6a21      	ldr	r1, [r4, #32]
 801689a:	4628      	mov	r0, r5
 801689c:	47b0      	blx	r6
 801689e:	1c43      	adds	r3, r0, #1
 80168a0:	89a3      	ldrh	r3, [r4, #12]
 80168a2:	d106      	bne.n	80168b2 <__sflush_r+0x66>
 80168a4:	6829      	ldr	r1, [r5, #0]
 80168a6:	291d      	cmp	r1, #29
 80168a8:	d82c      	bhi.n	8016904 <__sflush_r+0xb8>
 80168aa:	4a2a      	ldr	r2, [pc, #168]	; (8016954 <__sflush_r+0x108>)
 80168ac:	40ca      	lsrs	r2, r1
 80168ae:	07d6      	lsls	r6, r2, #31
 80168b0:	d528      	bpl.n	8016904 <__sflush_r+0xb8>
 80168b2:	2200      	movs	r2, #0
 80168b4:	6062      	str	r2, [r4, #4]
 80168b6:	04d9      	lsls	r1, r3, #19
 80168b8:	6922      	ldr	r2, [r4, #16]
 80168ba:	6022      	str	r2, [r4, #0]
 80168bc:	d504      	bpl.n	80168c8 <__sflush_r+0x7c>
 80168be:	1c42      	adds	r2, r0, #1
 80168c0:	d101      	bne.n	80168c6 <__sflush_r+0x7a>
 80168c2:	682b      	ldr	r3, [r5, #0]
 80168c4:	b903      	cbnz	r3, 80168c8 <__sflush_r+0x7c>
 80168c6:	6560      	str	r0, [r4, #84]	; 0x54
 80168c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168ca:	602f      	str	r7, [r5, #0]
 80168cc:	2900      	cmp	r1, #0
 80168ce:	d0ca      	beq.n	8016866 <__sflush_r+0x1a>
 80168d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168d4:	4299      	cmp	r1, r3
 80168d6:	d002      	beq.n	80168de <__sflush_r+0x92>
 80168d8:	4628      	mov	r0, r5
 80168da:	f7ff faab 	bl	8015e34 <_free_r>
 80168de:	2000      	movs	r0, #0
 80168e0:	6360      	str	r0, [r4, #52]	; 0x34
 80168e2:	e7c1      	b.n	8016868 <__sflush_r+0x1c>
 80168e4:	6a21      	ldr	r1, [r4, #32]
 80168e6:	2301      	movs	r3, #1
 80168e8:	4628      	mov	r0, r5
 80168ea:	47b0      	blx	r6
 80168ec:	1c41      	adds	r1, r0, #1
 80168ee:	d1c7      	bne.n	8016880 <__sflush_r+0x34>
 80168f0:	682b      	ldr	r3, [r5, #0]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d0c4      	beq.n	8016880 <__sflush_r+0x34>
 80168f6:	2b1d      	cmp	r3, #29
 80168f8:	d001      	beq.n	80168fe <__sflush_r+0xb2>
 80168fa:	2b16      	cmp	r3, #22
 80168fc:	d101      	bne.n	8016902 <__sflush_r+0xb6>
 80168fe:	602f      	str	r7, [r5, #0]
 8016900:	e7b1      	b.n	8016866 <__sflush_r+0x1a>
 8016902:	89a3      	ldrh	r3, [r4, #12]
 8016904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016908:	81a3      	strh	r3, [r4, #12]
 801690a:	e7ad      	b.n	8016868 <__sflush_r+0x1c>
 801690c:	690f      	ldr	r7, [r1, #16]
 801690e:	2f00      	cmp	r7, #0
 8016910:	d0a9      	beq.n	8016866 <__sflush_r+0x1a>
 8016912:	0793      	lsls	r3, r2, #30
 8016914:	680e      	ldr	r6, [r1, #0]
 8016916:	bf08      	it	eq
 8016918:	694b      	ldreq	r3, [r1, #20]
 801691a:	600f      	str	r7, [r1, #0]
 801691c:	bf18      	it	ne
 801691e:	2300      	movne	r3, #0
 8016920:	eba6 0807 	sub.w	r8, r6, r7
 8016924:	608b      	str	r3, [r1, #8]
 8016926:	f1b8 0f00 	cmp.w	r8, #0
 801692a:	dd9c      	ble.n	8016866 <__sflush_r+0x1a>
 801692c:	6a21      	ldr	r1, [r4, #32]
 801692e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016930:	4643      	mov	r3, r8
 8016932:	463a      	mov	r2, r7
 8016934:	4628      	mov	r0, r5
 8016936:	47b0      	blx	r6
 8016938:	2800      	cmp	r0, #0
 801693a:	dc06      	bgt.n	801694a <__sflush_r+0xfe>
 801693c:	89a3      	ldrh	r3, [r4, #12]
 801693e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016942:	81a3      	strh	r3, [r4, #12]
 8016944:	f04f 30ff 	mov.w	r0, #4294967295
 8016948:	e78e      	b.n	8016868 <__sflush_r+0x1c>
 801694a:	4407      	add	r7, r0
 801694c:	eba8 0800 	sub.w	r8, r8, r0
 8016950:	e7e9      	b.n	8016926 <__sflush_r+0xda>
 8016952:	bf00      	nop
 8016954:	20400001 	.word	0x20400001

08016958 <_fflush_r>:
 8016958:	b538      	push	{r3, r4, r5, lr}
 801695a:	690b      	ldr	r3, [r1, #16]
 801695c:	4605      	mov	r5, r0
 801695e:	460c      	mov	r4, r1
 8016960:	b913      	cbnz	r3, 8016968 <_fflush_r+0x10>
 8016962:	2500      	movs	r5, #0
 8016964:	4628      	mov	r0, r5
 8016966:	bd38      	pop	{r3, r4, r5, pc}
 8016968:	b118      	cbz	r0, 8016972 <_fflush_r+0x1a>
 801696a:	6983      	ldr	r3, [r0, #24]
 801696c:	b90b      	cbnz	r3, 8016972 <_fflush_r+0x1a>
 801696e:	f7ff f9a7 	bl	8015cc0 <__sinit>
 8016972:	4b14      	ldr	r3, [pc, #80]	; (80169c4 <_fflush_r+0x6c>)
 8016974:	429c      	cmp	r4, r3
 8016976:	d11b      	bne.n	80169b0 <_fflush_r+0x58>
 8016978:	686c      	ldr	r4, [r5, #4]
 801697a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d0ef      	beq.n	8016962 <_fflush_r+0xa>
 8016982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016984:	07d0      	lsls	r0, r2, #31
 8016986:	d404      	bmi.n	8016992 <_fflush_r+0x3a>
 8016988:	0599      	lsls	r1, r3, #22
 801698a:	d402      	bmi.n	8016992 <_fflush_r+0x3a>
 801698c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801698e:	f7ff fa47 	bl	8015e20 <__retarget_lock_acquire_recursive>
 8016992:	4628      	mov	r0, r5
 8016994:	4621      	mov	r1, r4
 8016996:	f7ff ff59 	bl	801684c <__sflush_r>
 801699a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801699c:	07da      	lsls	r2, r3, #31
 801699e:	4605      	mov	r5, r0
 80169a0:	d4e0      	bmi.n	8016964 <_fflush_r+0xc>
 80169a2:	89a3      	ldrh	r3, [r4, #12]
 80169a4:	059b      	lsls	r3, r3, #22
 80169a6:	d4dd      	bmi.n	8016964 <_fflush_r+0xc>
 80169a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169aa:	f7ff fa3a 	bl	8015e22 <__retarget_lock_release_recursive>
 80169ae:	e7d9      	b.n	8016964 <_fflush_r+0xc>
 80169b0:	4b05      	ldr	r3, [pc, #20]	; (80169c8 <_fflush_r+0x70>)
 80169b2:	429c      	cmp	r4, r3
 80169b4:	d101      	bne.n	80169ba <_fflush_r+0x62>
 80169b6:	68ac      	ldr	r4, [r5, #8]
 80169b8:	e7df      	b.n	801697a <_fflush_r+0x22>
 80169ba:	4b04      	ldr	r3, [pc, #16]	; (80169cc <_fflush_r+0x74>)
 80169bc:	429c      	cmp	r4, r3
 80169be:	bf08      	it	eq
 80169c0:	68ec      	ldreq	r4, [r5, #12]
 80169c2:	e7da      	b.n	801697a <_fflush_r+0x22>
 80169c4:	08019b60 	.word	0x08019b60
 80169c8:	08019b80 	.word	0x08019b80
 80169cc:	08019b40 	.word	0x08019b40

080169d0 <_lseek_r>:
 80169d0:	b538      	push	{r3, r4, r5, lr}
 80169d2:	4d07      	ldr	r5, [pc, #28]	; (80169f0 <_lseek_r+0x20>)
 80169d4:	4604      	mov	r4, r0
 80169d6:	4608      	mov	r0, r1
 80169d8:	4611      	mov	r1, r2
 80169da:	2200      	movs	r2, #0
 80169dc:	602a      	str	r2, [r5, #0]
 80169de:	461a      	mov	r2, r3
 80169e0:	f7ea ff1e 	bl	8001820 <_lseek>
 80169e4:	1c43      	adds	r3, r0, #1
 80169e6:	d102      	bne.n	80169ee <_lseek_r+0x1e>
 80169e8:	682b      	ldr	r3, [r5, #0]
 80169ea:	b103      	cbz	r3, 80169ee <_lseek_r+0x1e>
 80169ec:	6023      	str	r3, [r4, #0]
 80169ee:	bd38      	pop	{r3, r4, r5, pc}
 80169f0:	200087ec 	.word	0x200087ec

080169f4 <__swhatbuf_r>:
 80169f4:	b570      	push	{r4, r5, r6, lr}
 80169f6:	460e      	mov	r6, r1
 80169f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169fc:	2900      	cmp	r1, #0
 80169fe:	b096      	sub	sp, #88	; 0x58
 8016a00:	4614      	mov	r4, r2
 8016a02:	461d      	mov	r5, r3
 8016a04:	da08      	bge.n	8016a18 <__swhatbuf_r+0x24>
 8016a06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	602a      	str	r2, [r5, #0]
 8016a0e:	061a      	lsls	r2, r3, #24
 8016a10:	d410      	bmi.n	8016a34 <__swhatbuf_r+0x40>
 8016a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a16:	e00e      	b.n	8016a36 <__swhatbuf_r+0x42>
 8016a18:	466a      	mov	r2, sp
 8016a1a:	f000 f8b3 	bl	8016b84 <_fstat_r>
 8016a1e:	2800      	cmp	r0, #0
 8016a20:	dbf1      	blt.n	8016a06 <__swhatbuf_r+0x12>
 8016a22:	9a01      	ldr	r2, [sp, #4]
 8016a24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a2c:	425a      	negs	r2, r3
 8016a2e:	415a      	adcs	r2, r3
 8016a30:	602a      	str	r2, [r5, #0]
 8016a32:	e7ee      	b.n	8016a12 <__swhatbuf_r+0x1e>
 8016a34:	2340      	movs	r3, #64	; 0x40
 8016a36:	2000      	movs	r0, #0
 8016a38:	6023      	str	r3, [r4, #0]
 8016a3a:	b016      	add	sp, #88	; 0x58
 8016a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016a40 <__smakebuf_r>:
 8016a40:	898b      	ldrh	r3, [r1, #12]
 8016a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a44:	079d      	lsls	r5, r3, #30
 8016a46:	4606      	mov	r6, r0
 8016a48:	460c      	mov	r4, r1
 8016a4a:	d507      	bpl.n	8016a5c <__smakebuf_r+0x1c>
 8016a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a50:	6023      	str	r3, [r4, #0]
 8016a52:	6123      	str	r3, [r4, #16]
 8016a54:	2301      	movs	r3, #1
 8016a56:	6163      	str	r3, [r4, #20]
 8016a58:	b002      	add	sp, #8
 8016a5a:	bd70      	pop	{r4, r5, r6, pc}
 8016a5c:	ab01      	add	r3, sp, #4
 8016a5e:	466a      	mov	r2, sp
 8016a60:	f7ff ffc8 	bl	80169f4 <__swhatbuf_r>
 8016a64:	9900      	ldr	r1, [sp, #0]
 8016a66:	4605      	mov	r5, r0
 8016a68:	4630      	mov	r0, r6
 8016a6a:	f7ff fa4f 	bl	8015f0c <_malloc_r>
 8016a6e:	b948      	cbnz	r0, 8016a84 <__smakebuf_r+0x44>
 8016a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a74:	059a      	lsls	r2, r3, #22
 8016a76:	d4ef      	bmi.n	8016a58 <__smakebuf_r+0x18>
 8016a78:	f023 0303 	bic.w	r3, r3, #3
 8016a7c:	f043 0302 	orr.w	r3, r3, #2
 8016a80:	81a3      	strh	r3, [r4, #12]
 8016a82:	e7e3      	b.n	8016a4c <__smakebuf_r+0xc>
 8016a84:	4b0d      	ldr	r3, [pc, #52]	; (8016abc <__smakebuf_r+0x7c>)
 8016a86:	62b3      	str	r3, [r6, #40]	; 0x28
 8016a88:	89a3      	ldrh	r3, [r4, #12]
 8016a8a:	6020      	str	r0, [r4, #0]
 8016a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a90:	81a3      	strh	r3, [r4, #12]
 8016a92:	9b00      	ldr	r3, [sp, #0]
 8016a94:	6163      	str	r3, [r4, #20]
 8016a96:	9b01      	ldr	r3, [sp, #4]
 8016a98:	6120      	str	r0, [r4, #16]
 8016a9a:	b15b      	cbz	r3, 8016ab4 <__smakebuf_r+0x74>
 8016a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016aa0:	4630      	mov	r0, r6
 8016aa2:	f000 f881 	bl	8016ba8 <_isatty_r>
 8016aa6:	b128      	cbz	r0, 8016ab4 <__smakebuf_r+0x74>
 8016aa8:	89a3      	ldrh	r3, [r4, #12]
 8016aaa:	f023 0303 	bic.w	r3, r3, #3
 8016aae:	f043 0301 	orr.w	r3, r3, #1
 8016ab2:	81a3      	strh	r3, [r4, #12]
 8016ab4:	89a0      	ldrh	r0, [r4, #12]
 8016ab6:	4305      	orrs	r5, r0
 8016ab8:	81a5      	strh	r5, [r4, #12]
 8016aba:	e7cd      	b.n	8016a58 <__smakebuf_r+0x18>
 8016abc:	08015c59 	.word	0x08015c59

08016ac0 <__malloc_lock>:
 8016ac0:	4801      	ldr	r0, [pc, #4]	; (8016ac8 <__malloc_lock+0x8>)
 8016ac2:	f7ff b9ad 	b.w	8015e20 <__retarget_lock_acquire_recursive>
 8016ac6:	bf00      	nop
 8016ac8:	200087f0 	.word	0x200087f0

08016acc <__malloc_unlock>:
 8016acc:	4801      	ldr	r0, [pc, #4]	; (8016ad4 <__malloc_unlock+0x8>)
 8016ace:	f7ff b9a8 	b.w	8015e22 <__retarget_lock_release_recursive>
 8016ad2:	bf00      	nop
 8016ad4:	200087f0 	.word	0x200087f0

08016ad8 <_read_r>:
 8016ad8:	b538      	push	{r3, r4, r5, lr}
 8016ada:	4d07      	ldr	r5, [pc, #28]	; (8016af8 <_read_r+0x20>)
 8016adc:	4604      	mov	r4, r0
 8016ade:	4608      	mov	r0, r1
 8016ae0:	4611      	mov	r1, r2
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	602a      	str	r2, [r5, #0]
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	f7ea fe3a 	bl	8001760 <_read>
 8016aec:	1c43      	adds	r3, r0, #1
 8016aee:	d102      	bne.n	8016af6 <_read_r+0x1e>
 8016af0:	682b      	ldr	r3, [r5, #0]
 8016af2:	b103      	cbz	r3, 8016af6 <_read_r+0x1e>
 8016af4:	6023      	str	r3, [r4, #0]
 8016af6:	bd38      	pop	{r3, r4, r5, pc}
 8016af8:	200087ec 	.word	0x200087ec

08016afc <_raise_r>:
 8016afc:	291f      	cmp	r1, #31
 8016afe:	b538      	push	{r3, r4, r5, lr}
 8016b00:	4604      	mov	r4, r0
 8016b02:	460d      	mov	r5, r1
 8016b04:	d904      	bls.n	8016b10 <_raise_r+0x14>
 8016b06:	2316      	movs	r3, #22
 8016b08:	6003      	str	r3, [r0, #0]
 8016b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b0e:	bd38      	pop	{r3, r4, r5, pc}
 8016b10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016b12:	b112      	cbz	r2, 8016b1a <_raise_r+0x1e>
 8016b14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016b18:	b94b      	cbnz	r3, 8016b2e <_raise_r+0x32>
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	f000 f830 	bl	8016b80 <_getpid_r>
 8016b20:	462a      	mov	r2, r5
 8016b22:	4601      	mov	r1, r0
 8016b24:	4620      	mov	r0, r4
 8016b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b2a:	f000 b817 	b.w	8016b5c <_kill_r>
 8016b2e:	2b01      	cmp	r3, #1
 8016b30:	d00a      	beq.n	8016b48 <_raise_r+0x4c>
 8016b32:	1c59      	adds	r1, r3, #1
 8016b34:	d103      	bne.n	8016b3e <_raise_r+0x42>
 8016b36:	2316      	movs	r3, #22
 8016b38:	6003      	str	r3, [r0, #0]
 8016b3a:	2001      	movs	r0, #1
 8016b3c:	e7e7      	b.n	8016b0e <_raise_r+0x12>
 8016b3e:	2400      	movs	r4, #0
 8016b40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016b44:	4628      	mov	r0, r5
 8016b46:	4798      	blx	r3
 8016b48:	2000      	movs	r0, #0
 8016b4a:	e7e0      	b.n	8016b0e <_raise_r+0x12>

08016b4c <raise>:
 8016b4c:	4b02      	ldr	r3, [pc, #8]	; (8016b58 <raise+0xc>)
 8016b4e:	4601      	mov	r1, r0
 8016b50:	6818      	ldr	r0, [r3, #0]
 8016b52:	f7ff bfd3 	b.w	8016afc <_raise_r>
 8016b56:	bf00      	nop
 8016b58:	20000044 	.word	0x20000044

08016b5c <_kill_r>:
 8016b5c:	b538      	push	{r3, r4, r5, lr}
 8016b5e:	4d07      	ldr	r5, [pc, #28]	; (8016b7c <_kill_r+0x20>)
 8016b60:	2300      	movs	r3, #0
 8016b62:	4604      	mov	r4, r0
 8016b64:	4608      	mov	r0, r1
 8016b66:	4611      	mov	r1, r2
 8016b68:	602b      	str	r3, [r5, #0]
 8016b6a:	f7ea fddd 	bl	8001728 <_kill>
 8016b6e:	1c43      	adds	r3, r0, #1
 8016b70:	d102      	bne.n	8016b78 <_kill_r+0x1c>
 8016b72:	682b      	ldr	r3, [r5, #0]
 8016b74:	b103      	cbz	r3, 8016b78 <_kill_r+0x1c>
 8016b76:	6023      	str	r3, [r4, #0]
 8016b78:	bd38      	pop	{r3, r4, r5, pc}
 8016b7a:	bf00      	nop
 8016b7c:	200087ec 	.word	0x200087ec

08016b80 <_getpid_r>:
 8016b80:	f7ea bdca 	b.w	8001718 <_getpid>

08016b84 <_fstat_r>:
 8016b84:	b538      	push	{r3, r4, r5, lr}
 8016b86:	4d07      	ldr	r5, [pc, #28]	; (8016ba4 <_fstat_r+0x20>)
 8016b88:	2300      	movs	r3, #0
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	4608      	mov	r0, r1
 8016b8e:	4611      	mov	r1, r2
 8016b90:	602b      	str	r3, [r5, #0]
 8016b92:	f7ea fe2a 	bl	80017ea <_fstat>
 8016b96:	1c43      	adds	r3, r0, #1
 8016b98:	d102      	bne.n	8016ba0 <_fstat_r+0x1c>
 8016b9a:	682b      	ldr	r3, [r5, #0]
 8016b9c:	b103      	cbz	r3, 8016ba0 <_fstat_r+0x1c>
 8016b9e:	6023      	str	r3, [r4, #0]
 8016ba0:	bd38      	pop	{r3, r4, r5, pc}
 8016ba2:	bf00      	nop
 8016ba4:	200087ec 	.word	0x200087ec

08016ba8 <_isatty_r>:
 8016ba8:	b538      	push	{r3, r4, r5, lr}
 8016baa:	4d06      	ldr	r5, [pc, #24]	; (8016bc4 <_isatty_r+0x1c>)
 8016bac:	2300      	movs	r3, #0
 8016bae:	4604      	mov	r4, r0
 8016bb0:	4608      	mov	r0, r1
 8016bb2:	602b      	str	r3, [r5, #0]
 8016bb4:	f7ea fe29 	bl	800180a <_isatty>
 8016bb8:	1c43      	adds	r3, r0, #1
 8016bba:	d102      	bne.n	8016bc2 <_isatty_r+0x1a>
 8016bbc:	682b      	ldr	r3, [r5, #0]
 8016bbe:	b103      	cbz	r3, 8016bc2 <_isatty_r+0x1a>
 8016bc0:	6023      	str	r3, [r4, #0]
 8016bc2:	bd38      	pop	{r3, r4, r5, pc}
 8016bc4:	200087ec 	.word	0x200087ec

08016bc8 <_init>:
 8016bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bca:	bf00      	nop
 8016bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bce:	bc08      	pop	{r3}
 8016bd0:	469e      	mov	lr, r3
 8016bd2:	4770      	bx	lr

08016bd4 <_fini>:
 8016bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bd6:	bf00      	nop
 8016bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bda:	bc08      	pop	{r3}
 8016bdc:	469e      	mov	lr, r3
 8016bde:	4770      	bx	lr
