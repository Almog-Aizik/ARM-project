
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001460c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c58  080147bc  080147bc  000247bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017414  08017414  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08017414  08017414  00027414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801741c  0801741c  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801741c  0801741c  0002741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017420  08017420  00027420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08017424  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00008fa4  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009020  20009020  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d18  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005667  00000000  00000000  00051dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  00057430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001790  00000000  00000000  00058c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fdb9  00000000  00000000  0005a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029649  00000000  00000000  0008a191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef08c  00000000  00000000  000b37da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a2866  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006cf4  00000000  00000000  001a28b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080147a4 	.word	0x080147a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080147a4 	.word	0x080147a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SPI_RxCpltCallback>:
static void MX_SPI4_Init(void);
static void MX_UART4_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	flag = 1;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_SPI_RxCpltCallback+0x1c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000501 	.word	0x20000501

080005b4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000501 	.word	0x20000501

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_UART_RxCpltCallback+0x1c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000501 	.word	0x20000501

080005f4 <udp_transmit>:
void udp_transmit(struct udp_pcb *upcb, int len, char mem[100])
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
//  prepare variables
	ip_addr_t addr = upcb->remote_ip;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	617b      	str	r3, [r7, #20]
	u16_t port = upcb->remote_port;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	8a9b      	ldrh	r3, [r3, #20]
 800060a:	83fb      	strh	r3, [r7, #30]
//	prepare buffer
	struct pbuf *txBuf;
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29b      	uxth	r3, r3
 8000610:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000614:	4619      	mov	r1, r3
 8000616:	2036      	movs	r0, #54	; 0x36
 8000618:	f009 fd68 	bl	800a0ec <pbuf_alloc>
 800061c:	61b8      	str	r0, [r7, #24]
	pbuf_take(txBuf, mem, len);
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	b29b      	uxth	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f00a fab0 	bl	800ab8c <pbuf_take>
//	send data
	udp_connect(upcb, &addr, port);
 800062c:	8bfa      	ldrh	r2, [r7, #30]
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f010 fa47 	bl	8010ac8 <udp_connect>
	udp_send(upcb, txBuf);
 800063a:	69b9      	ldr	r1, [r7, #24]
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f00f ffd1 	bl	80105e4 <udp_send>
	udp_disconnect(upcb);
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f010 faae 	bl	8010ba4 <udp_disconnect>
//	release buffer
	pbuf_free(txBuf);
 8000648:	69b8      	ldr	r0, [r7, #24]
 800064a:	f00a f833 	bl	800a6b4 <pbuf_free>
}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <Timeout>:

void Timeout(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	int time = HAL_GetTick() + 10;
 800065e:	f001 fa21 	bl	8001aa4 <HAL_GetTick>
 8000662:	4603      	mov	r3, r0
 8000664:	330a      	adds	r3, #10
 8000666:	607b      	str	r3, [r7, #4]
	while(flag == 0)
 8000668:	e009      	b.n	800067e <Timeout+0x26>
	{
		if(time <= HAL_GetTick())
 800066a:	f001 fa1b 	bl	8001aa4 <HAL_GetTick>
 800066e:	4602      	mov	r2, r0
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	429a      	cmp	r2, r3
 8000674:	d303      	bcc.n	800067e <Timeout+0x26>
		{
			error = 1;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <Timeout+0x38>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
			break;
 800067c:	e004      	b.n	8000688 <Timeout+0x30>
	while(flag == 0)
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <Timeout+0x3c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f1      	beq.n	800066a <Timeout+0x12>
		}
	}
}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000502 	.word	0x20000502
 8000694:	20000501 	.word	0x20000501

08000698 <ReleaseDMA>:
void ReleaseDMA(DMA_HandleTypeDef *hdma1, DMA_HandleTypeDef *hdma2)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	HAL_DMA_Abort(hdma1);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f001 fc46 	bl	8001f34 <HAL_DMA_Abort>
	HAL_DMA_Abort(hdma2);
 80006a8:	6838      	ldr	r0, [r7, #0]
 80006aa:	f001 fc43 	bl	8001f34 <HAL_DMA_Abort>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f001 f98c 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f904 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 fb28 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c8:	f000 fad0 	bl	8000c6c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006cc:	f000 fa7a 	bl	8000bc4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80006d0:	f008 f862 	bl	8008798 <MX_LWIP_Init>
  MX_I2C1_Init();
 80006d4:	f000 f964 	bl	80009a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006d8:	f000 f9a2 	bl	8000a20 <MX_I2C2_Init>
  MX_SPI2_Init();
 80006dc:	f000 f9e0 	bl	8000aa0 <MX_SPI2_Init>
  MX_SPI4_Init();
 80006e0:	f000 fa10 	bl	8000b04 <MX_SPI4_Init>
  MX_UART4_Init();
 80006e4:	f000 fa44 	bl	8000b70 <MX_UART4_Init>
  MX_USART6_UART_Init();
 80006e8:	f000 fa96 	bl	8000c18 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 80006ec:	f001 f8f2 	bl	80018d4 <udpServer_init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80006f0:	4860      	ldr	r0, [pc, #384]	; (8000874 <main+0x1bc>)
 80006f2:	f008 fc4f 	bl	8008f94 <ethernetif_input>
	  sys_check_timeouts();
 80006f6:	f00f fd71 	bl	80101dc <sys_check_timeouts>
	  if(received)
 80006fa:	4b5f      	ldr	r3, [pc, #380]	; (8000878 <main+0x1c0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	f000 809c 	beq.w	800083c <main+0x184>
	  {
		  protocol = mem[0];
 8000704:	4b5d      	ldr	r3, [pc, #372]	; (800087c <main+0x1c4>)
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <main+0x1c8>)
 800070a:	701a      	strb	r2, [r3, #0]

		  if(protocol == '1')
 800070c:	4b5c      	ldr	r3, [pc, #368]	; (8000880 <main+0x1c8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b31      	cmp	r3, #49	; 0x31
 8000712:	d12d      	bne.n	8000770 <main+0xb8>
		  {
			  //SPI send and receive
			  HAL_SPI_Receive_DMA(&hspi2, (uint8_t *)send, len);
 8000714:	4b5b      	ldr	r3, [pc, #364]	; (8000884 <main+0x1cc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	495a      	ldr	r1, [pc, #360]	; (8000888 <main+0x1d0>)
 800071e:	485b      	ldr	r0, [pc, #364]	; (800088c <main+0x1d4>)
 8000720:	f006 f8d4 	bl	80068cc <HAL_SPI_Receive_DMA>
			  HAL_SPI_Transmit_DMA(&hspi4, (uint8_t *)&mem[1], len);
 8000724:	4b57      	ldr	r3, [pc, #348]	; (8000884 <main+0x1cc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	b29b      	uxth	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	4958      	ldr	r1, [pc, #352]	; (8000890 <main+0x1d8>)
 800072e:	4859      	ldr	r0, [pc, #356]	; (8000894 <main+0x1dc>)
 8000730:	f006 f816 	bl	8006760 <HAL_SPI_Transmit_DMA>
			  //wait for the data to be received
			  Timeout();
 8000734:	f7ff ff90 	bl	8000658 <Timeout>
			  if(error == 0)
 8000738:	4b57      	ldr	r3, [pc, #348]	; (8000898 <main+0x1e0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d108      	bne.n	8000752 <main+0x9a>
			  {
				  //add header to the data
				  UDPlen = sprintf(header, "SPI- %s\n\r", send);
 8000740:	4a51      	ldr	r2, [pc, #324]	; (8000888 <main+0x1d0>)
 8000742:	4956      	ldr	r1, [pc, #344]	; (800089c <main+0x1e4>)
 8000744:	4856      	ldr	r0, [pc, #344]	; (80008a0 <main+0x1e8>)
 8000746:	f012 fe7f 	bl	8013448 <siprintf>
 800074a:	4603      	mov	r3, r0
 800074c:	4a55      	ldr	r2, [pc, #340]	; (80008a4 <main+0x1ec>)
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	e071      	b.n	8000836 <main+0x17e>
			  }
			  //error handling
			  else
			  {
				  ReleaseDMA(&hspi2, &hspi4);
 8000752:	4950      	ldr	r1, [pc, #320]	; (8000894 <main+0x1dc>)
 8000754:	484d      	ldr	r0, [pc, #308]	; (800088c <main+0x1d4>)
 8000756:	f7ff ff9f 	bl	8000698 <ReleaseDMA>
				  UDPlen = sprintf(header, "Error");
 800075a:	4953      	ldr	r1, [pc, #332]	; (80008a8 <main+0x1f0>)
 800075c:	4850      	ldr	r0, [pc, #320]	; (80008a0 <main+0x1e8>)
 800075e:	f012 fe73 	bl	8013448 <siprintf>
 8000762:	4603      	mov	r3, r0
 8000764:	4a4f      	ldr	r2, [pc, #316]	; (80008a4 <main+0x1ec>)
 8000766:	6013      	str	r3, [r2, #0]
				  flag = 1;
 8000768:	4b50      	ldr	r3, [pc, #320]	; (80008ac <main+0x1f4>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e062      	b.n	8000836 <main+0x17e>
			  }

		  }
		  else if(protocol == '2')
 8000770:	4b43      	ldr	r3, [pc, #268]	; (8000880 <main+0x1c8>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b32      	cmp	r3, #50	; 0x32
 8000776:	d12d      	bne.n	80007d4 <main+0x11c>
		  {
			  //I2C send and receive
			  HAL_I2C_Master_Transmit_DMA(&hi2c1, 20, (uint8_t *)&mem[1], len);
 8000778:	4b42      	ldr	r3, [pc, #264]	; (8000884 <main+0x1cc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	4a44      	ldr	r2, [pc, #272]	; (8000890 <main+0x1d8>)
 8000780:	2114      	movs	r1, #20
 8000782:	484b      	ldr	r0, [pc, #300]	; (80008b0 <main+0x1f8>)
 8000784:	f003 fb8a 	bl	8003e9c <HAL_I2C_Master_Transmit_DMA>
			  HAL_I2C_Slave_Receive_DMA(&hi2c2, (uint8_t *)send, len);
 8000788:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <main+0x1cc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	493d      	ldr	r1, [pc, #244]	; (8000888 <main+0x1d0>)
 8000792:	4848      	ldr	r0, [pc, #288]	; (80008b4 <main+0x1fc>)
 8000794:	f003 fcb2 	bl	80040fc <HAL_I2C_Slave_Receive_DMA>
			  //wait for the data to be received
			  Timeout();
 8000798:	f7ff ff5e 	bl	8000658 <Timeout>
			  if(error == 0)
 800079c:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <main+0x1e0>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <main+0xfe>
			  {
				  //add a header to the data and prepare it to be sent back
				  UDPlen = sprintf(header, "I2C- %s\n\r", send);
 80007a4:	4a38      	ldr	r2, [pc, #224]	; (8000888 <main+0x1d0>)
 80007a6:	4944      	ldr	r1, [pc, #272]	; (80008b8 <main+0x200>)
 80007a8:	483d      	ldr	r0, [pc, #244]	; (80008a0 <main+0x1e8>)
 80007aa:	f012 fe4d 	bl	8013448 <siprintf>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <main+0x1ec>)
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e03f      	b.n	8000836 <main+0x17e>
			  }
			  //error handling
			  else
			  {
				  ReleaseDMA(&hi2c1, &hi2c2);
 80007b6:	493f      	ldr	r1, [pc, #252]	; (80008b4 <main+0x1fc>)
 80007b8:	483d      	ldr	r0, [pc, #244]	; (80008b0 <main+0x1f8>)
 80007ba:	f7ff ff6d 	bl	8000698 <ReleaseDMA>
				  UDPlen = sprintf(header, "Error");
 80007be:	493a      	ldr	r1, [pc, #232]	; (80008a8 <main+0x1f0>)
 80007c0:	4837      	ldr	r0, [pc, #220]	; (80008a0 <main+0x1e8>)
 80007c2:	f012 fe41 	bl	8013448 <siprintf>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a36      	ldr	r2, [pc, #216]	; (80008a4 <main+0x1ec>)
 80007ca:	6013      	str	r3, [r2, #0]
				  flag = 1;
 80007cc:	4b37      	ldr	r3, [pc, #220]	; (80008ac <main+0x1f4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	e030      	b.n	8000836 <main+0x17e>
			  }
		  }
		  else if(protocol == '3')
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <main+0x1c8>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b33      	cmp	r3, #51	; 0x33
 80007da:	d12c      	bne.n	8000836 <main+0x17e>
		  {
			  //UART send and receive
			  HAL_UART_Receive_DMA(&huart6, (uint8_t *)send, len);
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <main+0x1cc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	4928      	ldr	r1, [pc, #160]	; (8000888 <main+0x1d0>)
 80007e6:	4835      	ldr	r0, [pc, #212]	; (80008bc <main+0x204>)
 80007e8:	f006 fec0 	bl	800756c <HAL_UART_Receive_DMA>
			  HAL_UART_Transmit_DMA(&huart4, (uint8_t *)&mem[1], len);
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <main+0x1cc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	4926      	ldr	r1, [pc, #152]	; (8000890 <main+0x1d8>)
 80007f6:	4832      	ldr	r0, [pc, #200]	; (80008c0 <main+0x208>)
 80007f8:	f006 fe3a 	bl	8007470 <HAL_UART_Transmit_DMA>
			  //wait for the data to be received
			  Timeout();
 80007fc:	f7ff ff2c 	bl	8000658 <Timeout>
			  if(error == 0)
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <main+0x1e0>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d108      	bne.n	800081a <main+0x162>
			  {
				  //add a header to the data and prepare it to be sent back
				  UDPlen = sprintf(header, "UART - %s\n\r", send);
 8000808:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <main+0x1d0>)
 800080a:	492e      	ldr	r1, [pc, #184]	; (80008c4 <main+0x20c>)
 800080c:	4824      	ldr	r0, [pc, #144]	; (80008a0 <main+0x1e8>)
 800080e:	f012 fe1b 	bl	8013448 <siprintf>
 8000812:	4603      	mov	r3, r0
 8000814:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <main+0x1ec>)
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	e00d      	b.n	8000836 <main+0x17e>
			  }
			  //error handling
			  else
			  {
				  ReleaseDMA(&hi2c1, &hi2c2);
 800081a:	4926      	ldr	r1, [pc, #152]	; (80008b4 <main+0x1fc>)
 800081c:	4824      	ldr	r0, [pc, #144]	; (80008b0 <main+0x1f8>)
 800081e:	f7ff ff3b 	bl	8000698 <ReleaseDMA>
				  UDPlen = sprintf(header, "Error");
 8000822:	4921      	ldr	r1, [pc, #132]	; (80008a8 <main+0x1f0>)
 8000824:	481e      	ldr	r0, [pc, #120]	; (80008a0 <main+0x1e8>)
 8000826:	f012 fe0f 	bl	8013448 <siprintf>
 800082a:	4603      	mov	r3, r0
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <main+0x1ec>)
 800082e:	6013      	str	r3, [r2, #0]
				  flag = 1;
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <main+0x1f4>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  received = 0;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <main+0x1c0>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
	  }
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if(flag)
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <main+0x1f4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	f43f af55 	beq.w	80006f0 <main+0x38>
	  {
//		  HAL_UART_Transmit(&huart3, send, 15, 20);
		  header[UDPlen + 1] = 0;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <main+0x1ec>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <main+0x1e8>)
 800084e:	2100      	movs	r1, #0
 8000850:	54d1      	strb	r1, [r2, r3]
		  udp_transmit(udp_info, UDPlen, header);
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <main+0x210>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <main+0x1ec>)
 8000858:	6811      	ldr	r1, [r2, #0]
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <main+0x1e8>)
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fec9 	bl	80005f4 <udp_transmit>
		  flag = 0;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <main+0x1f4>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
//		  reset memory back to 0
		  memset(send, 0, 100);
 8000868:	2264      	movs	r2, #100	; 0x64
 800086a:	2100      	movs	r1, #0
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <main+0x1d0>)
 800086e:	f012 fd8d 	bl	801338c <memset>
	  ethernetif_input(&gnetif);
 8000872:	e73d      	b.n	80006f0 <main+0x38>
 8000874:	20000650 	.word	0x20000650
 8000878:	20000500 	.word	0x20000500
 800087c:	20000568 	.word	0x20000568
 8000880:	20000000 	.word	0x20000000
 8000884:	20000640 	.word	0x20000640
 8000888:	20000504 	.word	0x20000504
 800088c:	20000200 	.word	0x20000200
 8000890:	20000569 	.word	0x20000569
 8000894:	20000258 	.word	0x20000258
 8000898:	20000502 	.word	0x20000502
 800089c:	080147bc 	.word	0x080147bc
 80008a0:	200005d0 	.word	0x200005d0
 80008a4:	20000644 	.word	0x20000644
 80008a8:	080147c8 	.word	0x080147c8
 80008ac:	20000501 	.word	0x20000501
 80008b0:	20000098 	.word	0x20000098
 80008b4:	200000ec 	.word	0x200000ec
 80008b8:	080147d0 	.word	0x080147d0
 80008bc:	200003f8 	.word	0x200003f8
 80008c0:	20000370 	.word	0x20000370
 80008c4:	080147dc 	.word	0x080147dc
 80008c8:	200004fc 	.word	0x200004fc

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	2230      	movs	r2, #48	; 0x30
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f012 fd56 	bl	801338c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <SystemClock_Config+0xcc>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a27      	ldr	r2, [pc, #156]	; (8000998 <SystemClock_Config+0xcc>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <SystemClock_Config+0xcc>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <SystemClock_Config+0xd0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <SystemClock_Config+0xd0>)
 8000916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <SystemClock_Config+0xd0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000940:	23a8      	movs	r3, #168	; 0xa8
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000948:	2307      	movs	r3, #7
 800094a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	4618      	mov	r0, r3
 8000952:	f005 f9e3 	bl	8005d1c <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800095c:	f000 fab8 	bl	8000ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800096c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2105      	movs	r1, #5
 800097e:	4618      	mov	r0, r3
 8000980:	f005 fc44 	bl	800620c <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800098a:	f000 faa1 	bl	8000ed0 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <MX_I2C1_Init+0x78>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <MX_I2C1_Init+0x7c>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009de:	f003 f919 	bl	8003c14 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 fa72 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009f0:	f005 f919 	bl	8005c26 <HAL_I2CEx_ConfigAnalogFilter>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009fa:	f000 fa69 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_I2C1_Init+0x74>)
 8000a02:	f005 f94c 	bl	8005c9e <HAL_I2CEx_ConfigDigitalFilter>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a0c:	f000 fa60 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000098 	.word	0x20000098
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	000186a0 	.word	0x000186a0

08000a20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C2_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C2_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 20;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a38:	2214      	movs	r2, #20
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a5e:	f003 f8d9 	bl	8003c14 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fa32 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a70:	f005 f8d9 	bl	8005c26 <HAL_I2CEx_ConfigAnalogFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000a7a:	f000 fa29 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2C2_Init+0x74>)
 8000a82:	f005 f90c 	bl	8005c9e <HAL_I2CEx_ConfigDigitalFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000a8c:	f000 fa20 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000ec 	.word	0x200000ec
 8000a98:	40005800 	.word	0x40005800
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <MX_SPI2_Init+0x60>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_SPI2_Init+0x5c>)
 8000ae8:	f005 fdb0 	bl	800664c <HAL_SPI_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000af2:	f000 f9ed 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000200 	.word	0x20000200
 8000b00:	40003800 	.word	0x40003800

08000b04 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <MX_SPI4_Init+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b34:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b50:	220a      	movs	r2, #10
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_SPI4_Init+0x64>)
 8000b56:	f005 fd79 	bl	800664c <HAL_SPI_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000b60:	f000 f9b6 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000258 	.word	0x20000258
 8000b6c:	40013400 	.word	0x40013400

08000b70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <MX_UART4_Init+0x50>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_UART4_Init+0x4c>)
 8000ba8:	f006 fc14 	bl	80073d4 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000bb2:	f000 f98d 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000370 	.word	0x20000370
 8000bc0:	40004c00 	.word	0x40004c00

08000bc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_USART3_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART3_UART_Init+0x4c>)
 8000bfc:	f006 fbea 	bl	80073d4 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f963 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200003b4 	.word	0x200003b4
 8000c14:	40004800 	.word	0x40004800

08000c18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_USART6_UART_Init+0x4c>)
 8000c50:	f006 fbc0 	bl	80073d4 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c5a:	f000 f939 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200003f8 	.word	0x200003f8
 8000c68:	40011400 	.word	0x40011400

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_DMA_Init+0xa8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <MX_DMA_Init+0xa8>)
 8000c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_DMA_Init+0xa8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_DMA_Init+0xa8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <MX_DMA_Init+0xa8>)
 8000c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_DMA_Init+0xa8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	200d      	movs	r0, #13
 8000cb0:	f001 f803 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cb4:	200d      	movs	r0, #13
 8000cb6:	f001 f81c 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	200e      	movs	r0, #14
 8000cc0:	f000 fffb 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cc4:	200e      	movs	r0, #14
 8000cc6:	f001 f814 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f000 fff3 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000cd4:	200f      	movs	r0, #15
 8000cd6:	f001 f80c 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2011      	movs	r0, #17
 8000ce0:	f000 ffeb 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ce4:	2011      	movs	r0, #17
 8000ce6:	f001 f804 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2039      	movs	r0, #57	; 0x39
 8000cf0:	f000 ffe3 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cf4:	2039      	movs	r0, #57	; 0x39
 8000cf6:	f000 fffc 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	203a      	movs	r0, #58	; 0x3a
 8000d00:	f000 ffdb 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d04:	203a      	movs	r0, #58	; 0x3a
 8000d06:	f000 fff4 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a61      	ldr	r2, [pc, #388]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	4b5b      	ldr	r3, [pc, #364]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a5a      	ldr	r2, [pc, #360]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b58      	ldr	r3, [pc, #352]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a53      	ldr	r2, [pc, #332]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a45      	ldr	r2, [pc, #276]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a37      	ldr	r2, [pc, #220]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <MX_GPIO_Init+0x1a4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000df8:	4831      	ldr	r0, [pc, #196]	; (8000ec0 <MX_GPIO_Init+0x1a8>)
 8000dfa:	f002 fef1 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2140      	movs	r1, #64	; 0x40
 8000e02:	4830      	ldr	r0, [pc, #192]	; (8000ec4 <MX_GPIO_Init+0x1ac>)
 8000e04:	f002 feec 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <MX_GPIO_Init+0x1b0>)
 8000e20:	f002 fd32 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e24:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4820      	ldr	r0, [pc, #128]	; (8000ec0 <MX_GPIO_Init+0x1a8>)
 8000e3e:	f002 fd23 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	481a      	ldr	r0, [pc, #104]	; (8000ec4 <MX_GPIO_Init+0x1ac>)
 8000e5a:	f002 fd15 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <MX_GPIO_Init+0x1ac>)
 8000e72:	f002 fd09 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e76:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <MX_GPIO_Init+0x1b4>)
 8000e94:	f002 fcf8 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_GPIO_Init+0x1b4>)
 8000eae:	f002 fceb 	bl	8003888 <HAL_GPIO_Init>

}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40021800 	.word	0x40021800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <Error_Handler+0x8>
	...

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <HAL_MspInit+0x4c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a69      	ldr	r2, [pc, #420]	; (80010f0 <HAL_I2C_MspInit+0x1c4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d163      	bne.n	8001016 <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a67      	ldr	r2, [pc, #412]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b65      	ldr	r3, [pc, #404]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	485c      	ldr	r0, [pc, #368]	; (80010f8 <HAL_I2C_MspInit+0x1cc>)
 8000f88:	f002 fc7e 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	4b58      	ldr	r3, [pc, #352]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a57      	ldr	r2, [pc, #348]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8000f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b55      	ldr	r3, [pc, #340]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000fa8:	4b54      	ldr	r3, [pc, #336]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000faa:	4a55      	ldr	r2, [pc, #340]	; (8001100 <HAL_I2C_MspInit+0x1d4>)
 8000fac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb6:	4b51      	ldr	r3, [pc, #324]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fb8:	2240      	movs	r2, #64	; 0x40
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b4e      	ldr	r3, [pc, #312]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fca:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd0:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fd6:	4b49      	ldr	r3, [pc, #292]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fdc:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe2:	4b46      	ldr	r3, [pc, #280]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fe8:	4844      	ldr	r0, [pc, #272]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000fea:	f000 fe9d 	bl	8001d28 <HAL_DMA_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000ff4:	f7ff ff6c 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a40      	ldr	r2, [pc, #256]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	; (80010fc <HAL_I2C_MspInit+0x1d0>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	201f      	movs	r0, #31
 800100a:	f000 fe56 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800100e:	201f      	movs	r0, #31
 8001010:	f000 fe6f 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001014:	e067      	b.n	80010e6 <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C2)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <HAL_I2C_MspInit+0x1d8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d162      	bne.n	80010e6 <HAL_I2C_MspInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800103c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800104e:	2304      	movs	r3, #4
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4827      	ldr	r0, [pc, #156]	; (80010f8 <HAL_I2C_MspInit+0x1cc>)
 800105a:	f002 fc15 	bl	8003888 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8001068:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_I2C_MspInit+0x1c8>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 800107c:	4a23      	ldr	r2, [pc, #140]	; (800110c <HAL_I2C_MspInit+0x1e0>)
 800107e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 8001082:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001086:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 8001096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80010ba:	4813      	ldr	r0, [pc, #76]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 80010bc:	f000 fe34 	bl	8001d28 <HAL_DMA_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 80010c6:	f7ff ff03 	bl	8000ed0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 80010ce:	639a      	str	r2, [r3, #56]	; 0x38
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_I2C_MspInit+0x1dc>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2021      	movs	r0, #33	; 0x21
 80010dc:	f000 fded 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010e0:	2021      	movs	r0, #33	; 0x21
 80010e2:	f000 fe06 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	; 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40005400 	.word	0x40005400
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020400 	.word	0x40020400
 80010fc:	20000140 	.word	0x20000140
 8001100:	400260a0 	.word	0x400260a0
 8001104:	40005800 	.word	0x40005800
 8001108:	200001a0 	.word	0x200001a0
 800110c:	40026040 	.word	0x40026040

08001110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a86      	ldr	r2, [pc, #536]	; (8001348 <HAL_SPI_MspInit+0x238>)
 800112e:	4293      	cmp	r3, r2
 8001130:	f040 809f 	bne.w	8001272 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
 8001138:	4b84      	ldr	r3, [pc, #528]	; (800134c <HAL_SPI_MspInit+0x23c>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a83      	ldr	r2, [pc, #524]	; (800134c <HAL_SPI_MspInit+0x23c>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b81      	ldr	r3, [pc, #516]	; (800134c <HAL_SPI_MspInit+0x23c>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114c:	623b      	str	r3, [r7, #32]
 800114e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	4b7d      	ldr	r3, [pc, #500]	; (800134c <HAL_SPI_MspInit+0x23c>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a7c      	ldr	r2, [pc, #496]	; (800134c <HAL_SPI_MspInit+0x23c>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b7a      	ldr	r3, [pc, #488]	; (800134c <HAL_SPI_MspInit+0x23c>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_SPI_MspInit+0x23c>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a75      	ldr	r2, [pc, #468]	; (800134c <HAL_SPI_MspInit+0x23c>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b73      	ldr	r3, [pc, #460]	; (800134c <HAL_SPI_MspInit+0x23c>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	4b6f      	ldr	r3, [pc, #444]	; (800134c <HAL_SPI_MspInit+0x23c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a6e      	ldr	r2, [pc, #440]	; (800134c <HAL_SPI_MspInit+0x23c>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b6c      	ldr	r3, [pc, #432]	; (800134c <HAL_SPI_MspInit+0x23c>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011a4:	230c      	movs	r3, #12
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b4:	2305      	movs	r3, #5
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4864      	ldr	r0, [pc, #400]	; (8001350 <HAL_SPI_MspInit+0x240>)
 80011c0:	f002 fb62 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d6:	2305      	movs	r3, #5
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	485c      	ldr	r0, [pc, #368]	; (8001354 <HAL_SPI_MspInit+0x244>)
 80011e2:	f002 fb51 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011e6:	2308      	movs	r3, #8
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011f6:	2305      	movs	r3, #5
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	4855      	ldr	r0, [pc, #340]	; (8001358 <HAL_SPI_MspInit+0x248>)
 8001202:	f002 fb41 	bl	8003888 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001206:	4b55      	ldr	r3, [pc, #340]	; (800135c <HAL_SPI_MspInit+0x24c>)
 8001208:	4a55      	ldr	r2, [pc, #340]	; (8001360 <HAL_SPI_MspInit+0x250>)
 800120a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_SPI_MspInit+0x24c>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001212:	4b52      	ldr	r3, [pc, #328]	; (800135c <HAL_SPI_MspInit+0x24c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <HAL_SPI_MspInit+0x24c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800121e:	4b4f      	ldr	r3, [pc, #316]	; (800135c <HAL_SPI_MspInit+0x24c>)
 8001220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001224:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001226:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_SPI_MspInit+0x24c>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_SPI_MspInit+0x24c>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <HAL_SPI_MspInit+0x24c>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001238:	4b48      	ldr	r3, [pc, #288]	; (800135c <HAL_SPI_MspInit+0x24c>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_SPI_MspInit+0x24c>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001244:	4845      	ldr	r0, [pc, #276]	; (800135c <HAL_SPI_MspInit+0x24c>)
 8001246:	f000 fd6f 	bl	8001d28 <HAL_DMA_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 8001250:	f7ff fe3e 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a41      	ldr	r2, [pc, #260]	; (800135c <HAL_SPI_MspInit+0x24c>)
 8001258:	64da      	str	r2, [r3, #76]	; 0x4c
 800125a:	4a40      	ldr	r2, [pc, #256]	; (800135c <HAL_SPI_MspInit+0x24c>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2024      	movs	r0, #36	; 0x24
 8001266:	f000 fd28 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800126a:	2024      	movs	r0, #36	; 0x24
 800126c:	f000 fd41 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001270:	e066      	b.n	8001340 <HAL_SPI_MspInit+0x230>
  else if(hspi->Instance==SPI4)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a3b      	ldr	r2, [pc, #236]	; (8001364 <HAL_SPI_MspInit+0x254>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d161      	bne.n	8001340 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	4b32      	ldr	r3, [pc, #200]	; (800134c <HAL_SPI_MspInit+0x23c>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_SPI_MspInit+0x23c>)
 8001286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800128a:	6453      	str	r3, [r2, #68]	; 0x44
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <HAL_SPI_MspInit+0x23c>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_SPI_MspInit+0x23c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	4a2a      	ldr	r2, [pc, #168]	; (800134c <HAL_SPI_MspInit+0x23c>)
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	6313      	str	r3, [r2, #48]	; 0x30
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_SPI_MspInit+0x23c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012b4:	2374      	movs	r3, #116	; 0x74
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80012c4:	2305      	movs	r3, #5
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4826      	ldr	r0, [pc, #152]	; (8001368 <HAL_SPI_MspInit+0x258>)
 80012d0:	f002 fada 	bl	8003888 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <HAL_SPI_MspInit+0x25c>)
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_SPI_MspInit+0x260>)
 80012d8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_SPI_MspInit+0x25c>)
 80012dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e0:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_SPI_MspInit+0x25c>)
 80012e4:	2240      	movs	r2, #64	; 0x40
 80012e6:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_SPI_MspInit+0x25c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_SPI_MspInit+0x25c>)
 80012f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f4:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_SPI_MspInit+0x25c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_SPI_MspInit+0x25c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_SPI_MspInit+0x25c>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_SPI_MspInit+0x25c>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_SPI_MspInit+0x25c>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001314:	4815      	ldr	r0, [pc, #84]	; (800136c <HAL_SPI_MspInit+0x25c>)
 8001316:	f000 fd07 	bl	8001d28 <HAL_DMA_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001320:	f7ff fdd6 	bl	8000ed0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_SPI_MspInit+0x25c>)
 8001328:	649a      	str	r2, [r3, #72]	; 0x48
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_SPI_MspInit+0x25c>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2054      	movs	r0, #84	; 0x54
 8001336:	f000 fcc0 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800133a:	2054      	movs	r0, #84	; 0x54
 800133c:	f000 fcd9 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
}
 8001340:	bf00      	nop
 8001342:	3738      	adds	r7, #56	; 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40003800 	.word	0x40003800
 800134c:	40023800 	.word	0x40023800
 8001350:	40020800 	.word	0x40020800
 8001354:	40020400 	.word	0x40020400
 8001358:	40020c00 	.word	0x40020c00
 800135c:	200002b0 	.word	0x200002b0
 8001360:	40026058 	.word	0x40026058
 8001364:	40013400 	.word	0x40013400
 8001368:	40021000 	.word	0x40021000
 800136c:	20000310 	.word	0x20000310
 8001370:	40026428 	.word	0x40026428

08001374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	; 0x38
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a82      	ldr	r2, [pc, #520]	; (800159c <HAL_UART_MspInit+0x228>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d163      	bne.n	800145e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a80      	ldr	r2, [pc, #512]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80013a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b7e      	ldr	r3, [pc, #504]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a79      	ldr	r2, [pc, #484]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b77      	ldr	r3, [pc, #476]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013e0:	2308      	movs	r3, #8
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	486e      	ldr	r0, [pc, #440]	; (80015a4 <HAL_UART_MspInit+0x230>)
 80013ec:	f002 fa4c 	bl	8003888 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80013f0:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <HAL_UART_MspInit+0x234>)
 80013f2:	4a6e      	ldr	r2, [pc, #440]	; (80015ac <HAL_UART_MspInit+0x238>)
 80013f4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80013f6:	4b6c      	ldr	r3, [pc, #432]	; (80015a8 <HAL_UART_MspInit+0x234>)
 80013f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013fe:	4b6a      	ldr	r3, [pc, #424]	; (80015a8 <HAL_UART_MspInit+0x234>)
 8001400:	2240      	movs	r2, #64	; 0x40
 8001402:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_UART_MspInit+0x234>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <HAL_UART_MspInit+0x234>)
 800140c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001410:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001412:	4b65      	ldr	r3, [pc, #404]	; (80015a8 <HAL_UART_MspInit+0x234>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001418:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <HAL_UART_MspInit+0x234>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800141e:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <HAL_UART_MspInit+0x234>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001424:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <HAL_UART_MspInit+0x234>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_UART_MspInit+0x234>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001430:	485d      	ldr	r0, [pc, #372]	; (80015a8 <HAL_UART_MspInit+0x234>)
 8001432:	f000 fc79 	bl	8001d28 <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800143c:	f7ff fd48 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a59      	ldr	r2, [pc, #356]	; (80015a8 <HAL_UART_MspInit+0x234>)
 8001444:	635a      	str	r2, [r3, #52]	; 0x34
 8001446:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_UART_MspInit+0x234>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2034      	movs	r0, #52	; 0x34
 8001452:	f000 fc32 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001456:	2034      	movs	r0, #52	; 0x34
 8001458:	f000 fc4b 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800145c:	e099      	b.n	8001592 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <HAL_UART_MspInit+0x23c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d12d      	bne.n	80014c4 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	4a4b      	ldr	r2, [pc, #300]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 8001472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001476:	6413      	str	r3, [r2, #64]	; 0x40
 8001478:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a44      	ldr	r2, [pc, #272]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b2:	2307      	movs	r3, #7
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	483d      	ldr	r0, [pc, #244]	; (80015b4 <HAL_UART_MspInit+0x240>)
 80014be:	f002 f9e3 	bl	8003888 <HAL_GPIO_Init>
}
 80014c2:	e066      	b.n	8001592 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <HAL_UART_MspInit+0x244>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d161      	bne.n	8001592 <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80014d8:	f043 0320 	orr.w	r3, r3, #32
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a2b      	ldr	r2, [pc, #172]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_UART_MspInit+0x22c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001516:	2308      	movs	r3, #8
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4820      	ldr	r0, [pc, #128]	; (80015a4 <HAL_UART_MspInit+0x230>)
 8001522:	f002 f9b1 	bl	8003888 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <HAL_UART_MspInit+0x248>)
 8001528:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <HAL_UART_MspInit+0x24c>)
 800152a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_UART_MspInit+0x248>)
 800152e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001532:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_UART_MspInit+0x248>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_UART_MspInit+0x248>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_UART_MspInit+0x248>)
 8001542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001546:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_UART_MspInit+0x248>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_UART_MspInit+0x248>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_UART_MspInit+0x248>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_UART_MspInit+0x248>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_UART_MspInit+0x248>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001566:	4815      	ldr	r0, [pc, #84]	; (80015bc <HAL_UART_MspInit+0x248>)
 8001568:	f000 fbde 	bl	8001d28 <HAL_DMA_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001572:	f7ff fcad 	bl	8000ed0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_UART_MspInit+0x248>)
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
 800157c:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_UART_MspInit+0x248>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2047      	movs	r0, #71	; 0x47
 8001588:	f000 fb97 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800158c:	2047      	movs	r0, #71	; 0x47
 800158e:	f000 fbb0 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3738      	adds	r7, #56	; 0x38
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40004c00 	.word	0x40004c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020800 	.word	0x40020800
 80015a8:	2000043c 	.word	0x2000043c
 80015ac:	40026070 	.word	0x40026070
 80015b0:	40004800 	.word	0x40004800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40011400 	.word	0x40011400
 80015bc:	2000049c 	.word	0x2000049c
 80015c0:	40026440 	.word	0x40026440

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f000 fa34 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Stream2_IRQHandler+0x10>)
 800161e:	f000 fd1b 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200001a0 	.word	0x200001a0

0800162c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA1_Stream3_IRQHandler+0x10>)
 8001632:	f000 fd11 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002b0 	.word	0x200002b0

08001640 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <DMA1_Stream4_IRQHandler+0x10>)
 8001646:	f000 fd07 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000043c 	.word	0x2000043c

08001654 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA1_Stream6_IRQHandler+0x10>)
 800165a:	f000 fcfd 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000140 	.word	0x20000140

08001668 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <I2C1_EV_IRQHandler+0x10>)
 800166e:	f002 fe17 	bl	80042a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000098 	.word	0x20000098

0800167c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <I2C2_EV_IRQHandler+0x10>)
 8001682:	f002 fe0d 	bl	80042a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000ec 	.word	0x200000ec

08001690 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <SPI2_IRQHandler+0x10>)
 8001696:	f005 fae3 	bl	8006c60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000200 	.word	0x20000200

080016a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <UART4_IRQHandler+0x10>)
 80016aa:	f005 ff8f 	bl	80075cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000370 	.word	0x20000370

080016b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA2_Stream1_IRQHandler+0x10>)
 80016be:	f000 fccb 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000310 	.word	0x20000310

080016cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <DMA2_Stream2_IRQHandler+0x10>)
 80016d2:	f000 fcc1 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000049c 	.word	0x2000049c

080016e0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <ETH_IRQHandler+0x10>)
 80016e6:	f001 fb17 	bl	8002d18 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000373c 	.word	0x2000373c

080016f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <USART6_IRQHandler+0x10>)
 80016fa:	f005 ff67 	bl	80075cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200003f8 	.word	0x200003f8

08001708 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <SPI4_IRQHandler+0x10>)
 800170e:	f005 faa7 	bl	8006c60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000258 	.word	0x20000258

0800171c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
	return 1;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_kill>:

int _kill(int pid, int sig)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <_kill+0x20>)
 8001738:	2216      	movs	r2, #22
 800173a:	601a      	str	r2, [r3, #0]
	return -1;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	20009010 	.word	0x20009010

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffe5 	bl	800172c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001762:	e7fe      	b.n	8001762 <_exit+0x12>

08001764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
	}

return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf1      	blt.n	80017b0 <_write+0x12>
	}
	return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_isatty>:

int _isatty(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d205      	bcs.n	800187c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <_sbrk+0x6c>)
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	20030000 	.word	0x20030000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000648 	.word	0x20000648
 80018a8:	20009020 	.word	0x20009020
 80018ac:	20009010 	.word	0x20009010

080018b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 80018da:	f00f f9ed 	bl	8010cb8 <udp_new>
 80018de:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 132);
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <udpServer_init+0x44>)
 80018e2:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 50014);  // 7 is the server UDP port
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	f24c 325e 	movw	r2, #50014	; 0xc35e
 80018ea:	4619      	mov	r1, r3
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f00f f863 	bl	80109b8 <udp_bind>
 80018f2:	4603      	mov	r3, r0
 80018f4:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 80018f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d105      	bne.n	800190a <udpServer_init+0x36>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 80018fe:	2200      	movs	r2, #0
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <udpServer_init+0x48>)
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f00f f976 	bl	8010bf4 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8001908:	e002      	b.n	8001910 <udpServer_init+0x3c>
	   udp_remove(upcb);
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f00f f992 	bl	8010c34 <udp_remove>
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	8400a8c0 	.word	0x8400a8c0
 800191c:	08001921 	.word	0x08001921

08001920 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
	extern struct udp_pcb *udp_info;
	extern char mem[100];
	extern char received;
	extern int len;
	/* save data for later use */
	received = 1;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <udp_receive_callback+0x54>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
	len = p->len - 1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	895b      	ldrh	r3, [r3, #10]
 8001938:	3b01      	subs	r3, #1
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <udp_receive_callback+0x58>)
 800193c:	6013      	str	r3, [r2, #0]
	udp_info = upcb;
 800193e:	4a0f      	ldr	r2, [pc, #60]	; (800197c <udp_receive_callback+0x5c>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6013      	str	r3, [r2, #0]
	udp_info->remote_ip = *addr;
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <udp_receive_callback+0x5c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	605a      	str	r2, [r3, #4]
	udp_info->remote_port = port;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <udp_receive_callback+0x5c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	8b3a      	ldrh	r2, [r7, #24]
 8001954:	829a      	strh	r2, [r3, #20]
	memcpy(mem,(char*)p->payload,p->len);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	895b      	ldrh	r3, [r3, #10]
 800195e:	461a      	mov	r2, r3
 8001960:	4807      	ldr	r0, [pc, #28]	; (8001980 <udp_receive_callback+0x60>)
 8001962:	f011 fceb 	bl	801333c <memcpy>
	/* free p buffer */
	pbuf_free(p);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f008 fea4 	bl	800a6b4 <pbuf_free>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000500 	.word	0x20000500
 8001978:	20000640 	.word	0x20000640
 800197c:	200004fc 	.word	0x200004fc
 8001980:	20000568 	.word	0x20000568

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800198a:	490e      	ldr	r1, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a0:	4c0b      	ldr	r4, [pc, #44]	; (80019d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ae:	f7ff ff7f 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f011 fc8f 	bl	80132d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7fe fe7f 	bl	80006b8 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019c8:	08017424 	.word	0x08017424
  ldr r2, =_sbss
 80019cc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019d0:	20009020 	.word	0x20009020

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f94f 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fa66 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f967 	bl	8001d0e <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 f92f 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000004 	.word	0x20000004
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	20000008 	.word	0x20000008

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	2000064c 	.word	0x2000064c

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000064c 	.word	0x2000064c

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff feb6 	bl	8001aa4 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e099      	b.n	8001e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d64:	e00f      	b.n	8001d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d66:	f7ff fe9d 	bl	8001aa4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d908      	bls.n	8001d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e078      	b.n	8001e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e8      	bne.n	8001d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_DMA_Init+0x158>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d107      	bne.n	8001df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	4313      	orrs	r3, r2
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f023 0307 	bic.w	r3, r3, #7
 8001e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d117      	bne.n	8001e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fb1b 	bl	8002468 <DMA_CheckFifoParam>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e46:	2301      	movs	r3, #1
 8001e48:	e016      	b.n	8001e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fad2 	bl	80023fc <DMA_CalcBaseAndBitshift>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	223f      	movs	r2, #63	; 0x3f
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	f010803f 	.word	0xf010803f

08001e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Start_IT+0x26>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e040      	b.n	8001f2c <HAL_DMA_Start_IT+0xa8>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d12f      	bne.n	8001f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fa64 	bl	80023a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	223f      	movs	r2, #63	; 0x3f
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0216 	orr.w	r2, r2, #22
 8001ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e005      	b.n	8001f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f42:	f7ff fdaf 	bl	8001aa4 <HAL_GetTick>
 8001f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e052      	b.n	800200c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0216 	bic.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <HAL_DMA_Abort+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0208 	bic.w	r2, r2, #8
 8001fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	e013      	b.n	8001fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb8:	f7ff fd74 	bl	8001aa4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d90c      	bls.n	8001fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e015      	b.n	800200c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1e4      	bne.n	8001fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	223f      	movs	r2, #63	; 0x3f
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d004      	beq.n	8002032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00c      	b.n	800204c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2205      	movs	r2, #5
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002064:	4b8e      	ldr	r3, [pc, #568]	; (80022a0 <HAL_DMA_IRQHandler+0x248>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a8e      	ldr	r2, [pc, #568]	; (80022a4 <HAL_DMA_IRQHandler+0x24c>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0a9b      	lsrs	r3, r3, #10
 8002070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2208      	movs	r2, #8
 8002084:	409a      	lsls	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	2208      	movs	r2, #8
 80020b2:	409a      	lsls	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2201      	movs	r2, #1
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d012      	beq.n	80020fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	2201      	movs	r2, #1
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2204      	movs	r2, #4
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00b      	beq.n	8002130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2204      	movs	r2, #4
 800211e:	409a      	lsls	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f043 0204 	orr.w	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2210      	movs	r2, #16
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d043      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03c      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2210      	movs	r2, #16
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d018      	beq.n	800219a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d024      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
 8002186:	e01f      	b.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
 8002198:	e016      	b.n	80021c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0208 	bic.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	2220      	movs	r2, #32
 80021ce:	409a      	lsls	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 808f 	beq.w	80022f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8087 	beq.w	80022f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	2220      	movs	r2, #32
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d136      	bne.n	8002270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0216 	bic.w	r2, r2, #22
 8002210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <HAL_DMA_IRQHandler+0x1da>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0208 	bic.w	r2, r2, #8
 8002240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	223f      	movs	r2, #63	; 0x3f
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002262:	2b00      	cmp	r3, #0
 8002264:	d07e      	beq.n	8002364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
        }
        return;
 800226e:	e079      	b.n	8002364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01d      	beq.n	80022ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	2b00      	cmp	r3, #0
 8002292:	d031      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e02c      	b.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
 800229e:	bf00      	nop
 80022a0:	20000004 	.word	0x20000004
 80022a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
 80022b8:	e01e      	b.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0210 	bic.w	r2, r2, #16
 80022d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d032      	beq.n	8002366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d022      	beq.n	8002352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2205      	movs	r2, #5
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3301      	adds	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	d307      	bcc.n	8002340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f2      	bne.n	8002324 <HAL_DMA_IRQHandler+0x2cc>
 800233e:	e000      	b.n	8002342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
 8002362:	e000      	b.n	8002366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002364:	bf00      	nop
    }
  }
}
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237a:	b2db      	uxtb	r3, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d108      	bne.n	80023e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023de:	e007      	b.n	80023f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	3b10      	subs	r3, #16
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <DMA_CalcBaseAndBitshift+0x64>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002416:	4a13      	ldr	r2, [pc, #76]	; (8002464 <DMA_CalcBaseAndBitshift+0x68>)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d909      	bls.n	800243e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	; 0x58
 800243c:	e007      	b.n	800244e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	aaaaaaab 	.word	0xaaaaaaab
 8002464:	080171e0 	.word	0x080171e0

08002468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d11f      	bne.n	80024c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d856      	bhi.n	8002536 <DMA_CheckFifoParam+0xce>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <DMA_CheckFifoParam+0x28>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024b3 	.word	0x080024b3
 8002498:	080024a1 	.word	0x080024a1
 800249c:	08002537 	.word	0x08002537
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d046      	beq.n	800253a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b0:	e043      	b.n	800253a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ba:	d140      	bne.n	800253e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e03d      	b.n	800253e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ca:	d121      	bne.n	8002510 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d837      	bhi.n	8002542 <DMA_CheckFifoParam+0xda>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <DMA_CheckFifoParam+0x70>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	080024e9 	.word	0x080024e9
 80024dc:	080024ef 	.word	0x080024ef
 80024e0:	080024e9 	.word	0x080024e9
 80024e4:	08002501 	.word	0x08002501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e030      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d025      	beq.n	8002546 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024fe:	e022      	b.n	8002546 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002508:	d11f      	bne.n	800254a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800250e:	e01c      	b.n	800254a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d903      	bls.n	800251e <DMA_CheckFifoParam+0xb6>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d003      	beq.n	8002524 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800251c:	e018      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      break;
 8002522:	e015      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      break;
 8002534:	e00b      	b.n	800254e <DMA_CheckFifoParam+0xe6>
      break;
 8002536:	bf00      	nop
 8002538:	e00a      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e008      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
 8002540:	e006      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
 8002544:	e004      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
 8002548:	e002      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;   
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
    }
  } 
  
  return status; 
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop

08002560 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002570:	4ba1      	ldr	r3, [pc, #644]	; (80027f8 <HAL_ETH_Init+0x298>)
 8002572:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e182      	b.n	800288c <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f006 fa2e 	bl	80089fc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	4b95      	ldr	r3, [pc, #596]	; (80027fc <HAL_ETH_Init+0x29c>)
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	4a94      	ldr	r2, [pc, #592]	; (80027fc <HAL_ETH_Init+0x29c>)
 80025aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ae:	6453      	str	r3, [r2, #68]	; 0x44
 80025b0:	4b92      	ldr	r3, [pc, #584]	; (80027fc <HAL_ETH_Init+0x29c>)
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025bc:	4b90      	ldr	r3, [pc, #576]	; (8002800 <HAL_ETH_Init+0x2a0>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a8f      	ldr	r2, [pc, #572]	; (8002800 <HAL_ETH_Init+0x2a0>)
 80025c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025c6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025c8:	4b8d      	ldr	r3, [pc, #564]	; (8002800 <HAL_ETH_Init+0x2a0>)
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	498b      	ldr	r1, [pc, #556]	; (8002800 <HAL_ETH_Init+0x2a0>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ec:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80025ee:	f7ff fa59 	bl	8001aa4 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80025f4:	e011      	b.n	800261a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80025f6:	f7ff fa55 	bl	8001aa4 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002604:	d909      	bls.n	800261a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e138      	b.n	800288c <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e4      	bne.n	80025f6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f023 031c 	bic.w	r3, r3, #28
 800263a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800263c:	f003 ffd2 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8002640:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4a6f      	ldr	r2, [pc, #444]	; (8002804 <HAL_ETH_Init+0x2a4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d908      	bls.n	800265c <HAL_ETH_Init+0xfc>
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <HAL_ETH_Init+0x2a8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d804      	bhi.n	800265c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e027      	b.n	80026ac <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4a6a      	ldr	r2, [pc, #424]	; (8002808 <HAL_ETH_Init+0x2a8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d908      	bls.n	8002676 <HAL_ETH_Init+0x116>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4a64      	ldr	r2, [pc, #400]	; (80027f8 <HAL_ETH_Init+0x298>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d204      	bcs.n	8002676 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f043 030c 	orr.w	r3, r3, #12
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	e01a      	b.n	80026ac <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4a5f      	ldr	r2, [pc, #380]	; (80027f8 <HAL_ETH_Init+0x298>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d303      	bcc.n	8002686 <HAL_ETH_Init+0x126>
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4a62      	ldr	r2, [pc, #392]	; (800280c <HAL_ETH_Init+0x2ac>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d911      	bls.n	80026aa <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4a60      	ldr	r2, [pc, #384]	; (800280c <HAL_ETH_Init+0x2ac>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d908      	bls.n	80026a0 <HAL_ETH_Init+0x140>
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4a5f      	ldr	r2, [pc, #380]	; (8002810 <HAL_ETH_Init+0x2b0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d804      	bhi.n	80026a0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e005      	b.n	80026ac <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f043 0310 	orr.w	r3, r3, #16
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	e000      	b.n	80026ac <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80026aa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80026b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026b8:	2100      	movs	r1, #0
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fc16 	bl	8002eec <HAL_ETH_WritePHYRegister>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80026ca:	6939      	ldr	r1, [r7, #16]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fdcb 	bl	8003268 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0d6      	b.n	800288c <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80026de:	20ff      	movs	r0, #255	; 0xff
 80026e0:	f7ff f9ec 	bl	8001abc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a4 	beq.w	8002836 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80026ee:	f7ff f9d9 	bl	8001aa4 <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	461a      	mov	r2, r3
 80026fa:	2101      	movs	r1, #1
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fb8d 	bl	8002e1c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002702:	f7ff f9cf 	bl	8001aa4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d90f      	bls.n	8002734 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002718:	6939      	ldr	r1, [r7, #16]
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fda4 	bl	8003268 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0ab      	b.n	800288c <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0da      	beq.n	80026f4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800273e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fbd1 	bl	8002eec <HAL_ETH_WritePHYRegister>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002754:	6939      	ldr	r1, [r7, #16]
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fd86 	bl	8003268 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002764:	2301      	movs	r3, #1
 8002766:	e091      	b.n	800288c <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002768:	f7ff f99c 	bl	8001aa4 <HAL_GetTick>
 800276c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	461a      	mov	r2, r3
 8002774:	2101      	movs	r1, #1
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fb50 	bl	8002e1c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800277c:	f7ff f992 	bl	8001aa4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d90f      	bls.n	80027ae <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002792:	6939      	ldr	r1, [r7, #16]
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fd67 	bl	8003268 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e06e      	b.n	800288c <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0da      	beq.n	800276e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	461a      	mov	r2, r3
 80027be:	2110      	movs	r1, #16
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fb2b 	bl	8002e1c <HAL_ETH_ReadPHYRegister>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027d0:	6939      	ldr	r1, [r7, #16]
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fd48 	bl	8003268 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80027e0:	2301      	movs	r3, #1
 80027e2:	e053      	b.n	800288c <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d012      	beq.n	8002814 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	e010      	b.n	800281a <HAL_ETH_Init+0x2ba>
 80027f8:	03938700 	.word	0x03938700
 80027fc:	40023800 	.word	0x40023800
 8002800:	40013800 	.word	0x40013800
 8002804:	01312cff 	.word	0x01312cff
 8002808:	02160ebf 	.word	0x02160ebf
 800280c:	05f5e0ff 	.word	0x05f5e0ff
 8002810:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e026      	b.n	800287a <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	e021      	b.n	800287a <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	08db      	lsrs	r3, r3, #3
 800283c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002846:	4313      	orrs	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fb4c 	bl	8002eec <HAL_ETH_WritePHYRegister>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800285e:	6939      	ldr	r1, [r7, #16]
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fd01 	bl	8003268 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e00c      	b.n	800288c <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002872:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002876:	f7ff f921 	bl	8001abc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800287a:	6939      	ldr	r1, [r7, #16]
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fcf3 	bl	8003268 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_ETH_DMATxDescListInit+0x20>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e051      	b.n	8002958 <HAL_ETH_DMATxDescListInit+0xc4>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e030      	b.n	8002932 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	015b      	lsls	r3, r3, #5
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	4413      	add	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028e0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	d208      	bcs.n	8002926 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3301      	adds	r3, #1
 8002918:	015b      	lsls	r3, r3, #5
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	4413      	add	r3, r2
 800291e:	461a      	mov	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	e002      	b.n	800292c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3301      	adds	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3ca      	bcc.n	80028d0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002944:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ETH_DMARxDescListInit+0x20>
 8002980:	2302      	movs	r3, #2
 8002982:	e055      	b.n	8002a30 <HAL_ETH_DMARxDescListInit+0xcc>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e034      	b.n	8002a0a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015b      	lsls	r3, r3, #5
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	4413      	add	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029b0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80029b8:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d208      	bcs.n	80029fe <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	015b      	lsls	r3, r3, #5
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	4413      	add	r3, r2
 80029f6:	461a      	mov	r2, r3
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	e002      	b.n	8002a04 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3301      	adds	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3c6      	bcc.n	80029a0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a1c:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_ETH_TransmitFrame+0x24>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0cc      	b.n	8002bfa <HAL_ETH_TransmitFrame+0x1be>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0b7      	b.n	8002bfa <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	da09      	bge.n	8002aa8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2212      	movs	r2, #18
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0a8      	b.n	8002bfa <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d915      	bls.n	8002ade <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	4a54      	ldr	r2, [pc, #336]	; (8002c08 <HAL_ETH_TransmitFrame+0x1cc>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <HAL_ETH_TransmitFrame+0x1cc>)
 8002ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e001      	b.n	8002ae2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d11c      	bne.n	8002b22 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002af6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b02:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b12:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b20:	e04b      	b.n	8002bba <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	e044      	b.n	8002bb2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b36:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b4c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b56:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b70:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <HAL_ETH_TransmitFrame+0x1d0>)
 8002b76:	fb03 f202 	mul.w	r2, r3, r2
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002b82:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b8e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b9e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d3b6      	bcc.n	8002b28 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be2:	461a      	mov	r2, r3
 8002be4:	2300      	movs	r3, #0
 8002be6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	ac02b00b 	.word	0xac02b00b
 8002c0c:	fffffa0c 	.word	0xfffffa0c

08002c10 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_ETH_GetReceivedFrame+0x1a>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e070      	b.n	8002d0c <HAL_ETH_GetReceivedFrame+0xfc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db5a      	blt.n	8002cfa <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d030      	beq.n	8002cb4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d103      	bne.n	8002c6c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002c80:	3b04      	subs	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e02b      	b.n	8002d0c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce2:	e00a      	b.n	8002cfa <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d112      	bne.n	8002d58 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f85e 	bl	8002df4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d40:	461a      	mov	r2, r3
 8002d42:	2340      	movs	r3, #64	; 0x40
 8002d44:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d56:	e01a      	b.n	8002d8e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d111      	bne.n	8002d8e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f838 	bl	8002de0 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d96:	461a      	mov	r2, r3
 8002d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d9c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db0:	d112      	bne.n	8002dd8 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f828 	bl	8002e08 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc6:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	460b      	mov	r3, r1
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b82      	cmp	r3, #130	; 0x82
 8002e3c:	d101      	bne.n	8002e42 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e050      	b.n	8002ee4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2282      	movs	r2, #130	; 0x82
 8002e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 031c 	and.w	r3, r3, #28
 8002e58:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8a1b      	ldrh	r3, [r3, #16]
 8002e5e:	02db      	lsls	r3, r3, #11
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	019b      	lsls	r3, r3, #6
 8002e6c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f023 0302 	bic.w	r3, r3, #2
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e8e:	f7fe fe09 	bl	8001aa4 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e94:	e015      	b.n	8002ec2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002e96:	f7fe fe05 	bl	8001aa4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d309      	bcc.n	8002eba <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e014      	b.n	8002ee4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e4      	bne.n	8002e96 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b42      	cmp	r3, #66	; 0x42
 8002f0c:	d101      	bne.n	8002f12 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e04e      	b.n	8002fb0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2242      	movs	r2, #66	; 0x42
 8002f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 031c 	and.w	r3, r3, #28
 8002f28:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8a1b      	ldrh	r3, [r3, #16]
 8002f2e:	02db      	lsls	r3, r3, #11
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002f38:	897b      	ldrh	r3, [r7, #10]
 8002f3a:	019b      	lsls	r3, r3, #6
 8002f3c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f68:	f7fe fd9c 	bl	8001aa4 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f6e:	e015      	b.n	8002f9c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002f70:	f7fe fd98 	bl	8001aa4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7e:	d309      	bcc.n	8002f94 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e00d      	b.n	8002fb0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e4      	bne.n	8002f70 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ETH_Start+0x16>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e01f      	b.n	800300e <HAL_ETH_Start+0x56>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fb40 	bl	8003664 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fb77 	bl	80036d8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fc06 	bl	80037fc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fbab 	bl	800374c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fbd4 	bl	80037a4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_ETH_Stop+0x16>
 8003028:	2302      	movs	r3, #2
 800302a:	e01f      	b.n	800306c <HAL_ETH_Stop+0x56>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fb9b 	bl	8003778 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fbc4 	bl	80037d0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fb62 	bl	8003712 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fbd4 	bl	80037fc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fb22 	bl	800369e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_ETH_ConfigMAC+0x1c>
 800308c:	2302      	movs	r3, #2
 800308e:	e0e4      	b.n	800325a <HAL_ETH_ConfigMAC+0x1e6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80b1 	beq.w	800320a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4b6c      	ldr	r3, [pc, #432]	; (8003264 <HAL_ETH_ConfigMAC+0x1f0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80030c0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80030c6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80030cc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80030d2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80030d8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80030de:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80030e4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80030ea:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80030f0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80030f6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80030fc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003102:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800311a:	2001      	movs	r0, #1
 800311c:	f7fe fcce 	bl	8001abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003130:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003136:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800313c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003142:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003148:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800314e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800315a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800315c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003166:	2001      	movs	r0, #1
 8003168:	f7fe fca8 	bl	8001abc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800317c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003186:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003196:	4013      	ands	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80031a4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80031aa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80031b0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80031b6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80031bc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7fe fc71 	bl	8001abc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80031fa:	2001      	movs	r0, #1
 80031fc:	f7fe fc5e 	bl	8001abc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	61da      	str	r2, [r3, #28]
 8003208:	e01e      	b.n	8003248 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003218:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800323a:	2001      	movs	r0, #1
 800323c:	f7fe fc3e 	bl	8001abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	ff20810f 	.word	0xff20810f

08003268 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b0b0      	sub	sp, #192	; 0xc0
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003284:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800328c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003292:	2300      	movs	r3, #0
 8003294:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003296:	2300      	movs	r3, #0
 8003298:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80032ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b2:	663b      	str	r3, [r7, #96]	; 0x60
 80032b4:	e001      	b.n	80032ba <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80032ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032be:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80032c4:	2300      	movs	r3, #0
 80032c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800333c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003340:	4baa      	ldr	r3, [pc, #680]	; (80035ec <ETH_MACDMAConfig+0x384>)
 8003342:	4013      	ands	r3, r2
 8003344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003348:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800334a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800334c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800334e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003350:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003354:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800335a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800335c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800335e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003362:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003368:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800336a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800336c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800336e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003370:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003374:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003378:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800337a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800337c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800337e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003390:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800339c:	2001      	movs	r0, #1
 800339e:	f7fe fb8d 	bl	8001abc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033aa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80033ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80033ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80033b0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80033b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80033b4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80033b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80033ba:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80033bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80033c0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80033c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80033c6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80033c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80033cc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80033d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80033d8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80033da:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80033e6:	2001      	movs	r0, #1
 80033e8:	f7fe fb68 	bl	8001abc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033f4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033fe:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003408:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003414:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003418:	f64f 7341 	movw	r3, #65345	; 0xff41
 800341c:	4013      	ands	r3, r2
 800341e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003426:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003428:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800342c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800342e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003432:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003434:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003438:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800343a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800343e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003444:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003446:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003458:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003464:	2001      	movs	r0, #1
 8003466:	f7fe fb29 	bl	8001abc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003472:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003474:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003478:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800348e:	2001      	movs	r0, #1
 8003490:	f7fe fb14 	bl	8001abc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800349c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80034a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80034ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034b0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80034c2:	2304      	movs	r3, #4
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80034c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80034cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80034d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034dc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034e6:	2300      	movs	r3, #0
 80034e8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80034f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034fc:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <ETH_MACDMAConfig+0x388>)
 80034fe:	4013      	ands	r3, r2
 8003500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003504:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003506:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003508:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800350a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800350c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800350e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003510:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003512:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003514:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003516:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003518:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800351a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800351c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003520:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003524:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003526:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003538:	461a      	mov	r2, r3
 800353a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800353e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800354e:	2001      	movs	r0, #1
 8003550:	f7fe fab4 	bl	8001abc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355c:	461a      	mov	r2, r3
 800355e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003562:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003568:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800356c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003570:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003574:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003578:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800357a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800357e:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003588:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800358c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800359c:	2001      	movs	r0, #1
 800359e:	f7fe fa8d 	bl	8001abc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035aa:	461a      	mov	r2, r3
 80035ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035b0:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d10d      	bne.n	80035d6 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035d4:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	461a      	mov	r2, r3
 80035dc:	2100      	movs	r1, #0
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f808 	bl	80035f4 <ETH_MACAddressConfig>
}
 80035e4:	bf00      	nop
 80035e6:	37c0      	adds	r7, #192	; 0xc0
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	ff20810f 	.word	0xff20810f
 80035f0:	f8de3f23 	.word	0xf8de3f23

080035f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3305      	adds	r3, #5
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	3204      	adds	r2, #4
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <ETH_MACAddressConfig+0x68>)
 8003616:	4413      	add	r3, r2
 8003618:	461a      	mov	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3303      	adds	r3, #3
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	061a      	lsls	r2, r3, #24
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3302      	adds	r3, #2
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3301      	adds	r3, #1
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	4313      	orrs	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	7812      	ldrb	r2, [r2, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <ETH_MACAddressConfig+0x6c>)
 8003646:	4413      	add	r3, r2
 8003648:	461a      	mov	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	6013      	str	r3, [r2, #0]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40028040 	.word	0x40028040
 8003660:	40028044 	.word	0x40028044

08003664 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003688:	2001      	movs	r0, #1
 800368a:	f000 f8dd 	bl	8003848 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0208 	bic.w	r2, r2, #8
 80036b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80036c2:	2001      	movs	r0, #1
 80036c4:	f000 f8c0 	bl	8003848 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0204 	orr.w	r2, r2, #4
 80036f2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80036fc:	2001      	movs	r0, #1
 80036fe:	f000 f8a3 	bl	8003848 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0204 	bic.w	r2, r2, #4
 800372c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003736:	2001      	movs	r0, #1
 8003738:	f000 f886 	bl	8003848 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003766:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800376a:	6193      	str	r3, [r2, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003796:	6193      	str	r3, [r2, #24]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	f043 0302 	orr.w	r3, r3, #2
 80037be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037c2:	6193      	str	r3, [r2, #24]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	f023 0302 	bic.w	r3, r3, #2
 80037ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037ee:	6193      	str	r3, [r2, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800381a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800381e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800382c:	2001      	movs	r0, #1
 800382e:	f000 f80b 	bl	8003848 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800383c:	6193      	str	r3, [r2, #24]
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <ETH_Delay+0x38>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <ETH_Delay+0x3c>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0a5b      	lsrs	r3, r3, #9
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003864:	bf00      	nop
  } 
  while (Delay --);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	60fa      	str	r2, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f9      	bne.n	8003864 <ETH_Delay+0x1c>
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000004 	.word	0x20000004
 8003884:	10624dd3 	.word	0x10624dd3

08003888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	e177      	b.n	8003b94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a4:	2201      	movs	r2, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	429a      	cmp	r2, r3
 80038be:	f040 8166 	bne.w	8003b8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d005      	beq.n	80038da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d130      	bne.n	800393c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2203      	movs	r2, #3
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003910:	2201      	movs	r2, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 0201 	and.w	r2, r3, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b03      	cmp	r3, #3
 8003946:	d017      	beq.n	8003978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d123      	bne.n	80039cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	08da      	lsrs	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3208      	adds	r2, #8
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	220f      	movs	r2, #15
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0203 	and.w	r2, r3, #3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80c0 	beq.w	8003b8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1e:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2a:	4a61      	ldr	r2, [pc, #388]	; (8003bb0 <HAL_GPIO_Init+0x328>)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	3302      	adds	r3, #2
 8003a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	220f      	movs	r2, #15
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <HAL_GPIO_Init+0x32c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d037      	beq.n	8003ac6 <HAL_GPIO_Init+0x23e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a57      	ldr	r2, [pc, #348]	; (8003bb8 <HAL_GPIO_Init+0x330>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d031      	beq.n	8003ac2 <HAL_GPIO_Init+0x23a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_GPIO_Init+0x334>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02b      	beq.n	8003abe <HAL_GPIO_Init+0x236>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a55      	ldr	r2, [pc, #340]	; (8003bc0 <HAL_GPIO_Init+0x338>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d025      	beq.n	8003aba <HAL_GPIO_Init+0x232>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a54      	ldr	r2, [pc, #336]	; (8003bc4 <HAL_GPIO_Init+0x33c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <HAL_GPIO_Init+0x22e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a53      	ldr	r2, [pc, #332]	; (8003bc8 <HAL_GPIO_Init+0x340>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x22a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_GPIO_Init+0x344>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x226>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a51      	ldr	r2, [pc, #324]	; (8003bd0 <HAL_GPIO_Init+0x348>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x222>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a50      	ldr	r2, [pc, #320]	; (8003bd4 <HAL_GPIO_Init+0x34c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x21e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4f      	ldr	r2, [pc, #316]	; (8003bd8 <HAL_GPIO_Init+0x350>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x21a>
 8003a9e:	2309      	movs	r3, #9
 8003aa0:	e012      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	e010      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	e00e      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aaa:	2307      	movs	r3, #7
 8003aac:	e00c      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aae:	2306      	movs	r3, #6
 8003ab0:	e00a      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003ab2:	2305      	movs	r3, #5
 8003ab4:	e008      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e006      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e004      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_GPIO_Init+0x240>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f002 0203 	and.w	r2, r2, #3
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	4093      	lsls	r3, r2
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad8:	4935      	ldr	r1, [pc, #212]	; (8003bb0 <HAL_GPIO_Init+0x328>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b0a:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b34:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b3a:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b5e:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <HAL_GPIO_Init+0x354>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	f67f ae84 	bls.w	80038a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40021c00 	.word	0x40021c00
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40022400 	.word	0x40022400
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bfc:	e003      	b.n	8003c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	041a      	lsls	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	619a      	str	r2, [r3, #24]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e12b      	b.n	8003e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd f976 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c78:	f002 fcc0 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a81      	ldr	r2, [pc, #516]	; (8003e88 <HAL_I2C_Init+0x274>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d807      	bhi.n	8003c98 <HAL_I2C_Init+0x84>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a80      	ldr	r2, [pc, #512]	; (8003e8c <HAL_I2C_Init+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	bf94      	ite	ls
 8003c90:	2301      	movls	r3, #1
 8003c92:	2300      	movhi	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e006      	b.n	8003ca6 <HAL_I2C_Init+0x92>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a7d      	ldr	r2, [pc, #500]	; (8003e90 <HAL_I2C_Init+0x27c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bf94      	ite	ls
 8003ca0:	2301      	movls	r3, #1
 8003ca2:	2300      	movhi	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0e7      	b.n	8003e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a78      	ldr	r2, [pc, #480]	; (8003e94 <HAL_I2C_Init+0x280>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	0c9b      	lsrs	r3, r3, #18
 8003cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <HAL_I2C_Init+0x274>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d802      	bhi.n	8003ce8 <HAL_I2C_Init+0xd4>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	e009      	b.n	8003cfc <HAL_I2C_Init+0xe8>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	4a69      	ldr	r2, [pc, #420]	; (8003e98 <HAL_I2C_Init+0x284>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	495c      	ldr	r1, [pc, #368]	; (8003e88 <HAL_I2C_Init+0x274>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d819      	bhi.n	8003d50 <HAL_I2C_Init+0x13c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e59      	subs	r1, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d30:	400b      	ands	r3, r1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_I2C_Init+0x138>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e59      	subs	r1, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	e051      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	e04f      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d111      	bne.n	8003d7c <HAL_I2C_Init+0x168>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e012      	b.n	8003da2 <HAL_I2C_Init+0x18e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1e58      	subs	r0, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	0099      	lsls	r1, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Init+0x196>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10e      	bne.n	8003dd0 <HAL_I2C_Init+0x1bc>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1e58      	subs	r0, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	440b      	add	r3, r1
 8003dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dce:	e00f      	b.n	8003df0 <HAL_I2C_Init+0x1dc>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	0099      	lsls	r1, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	6809      	ldr	r1, [r1, #0]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6911      	ldr	r1, [r2, #16]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68d2      	ldr	r2, [r2, #12]
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	000186a0 	.word	0x000186a0
 8003e8c:	001e847f 	.word	0x001e847f
 8003e90:	003d08ff 	.word	0x003d08ff
 8003e94:	431bde83 	.word	0x431bde83
 8003e98:	10624dd3 	.word	0x10624dd3

08003e9c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	817b      	strh	r3, [r7, #10]
 8003eac:	4613      	mov	r3, r2
 8003eae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	f040 810d 	bne.w	80040dc <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ec2:	4b89      	ldr	r3, [pc, #548]	; (80040e8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	4a88      	ldr	r2, [pc, #544]	; (80040ec <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0a1a      	lsrs	r2, r3, #8
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009a      	lsls	r2, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d116      	bne.n	8003f16 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0e3      	b.n	80040de <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d0db      	beq.n	8003edc <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2C_Master_Transmit_DMA+0x96>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e0d5      	b.n	80040de <HAL_I2C_Master_Transmit_DMA+0x242>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d007      	beq.n	8003f58 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2221      	movs	r2, #33	; 0x21
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2210      	movs	r2, #16
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	893a      	ldrh	r2, [r7, #8]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a56      	ldr	r2, [pc, #344]	; (80040f0 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f9a:	897a      	ldrh	r2, [r7, #10]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d07b      	beq.n	80040a0 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d02a      	beq.n	8004006 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	4a4f      	ldr	r2, [pc, #316]	; (80040f4 <HAL_I2C_Master_Transmit_DMA+0x258>)
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbc:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8003fbe:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fcc:	2200      	movs	r2, #0
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fdc:	2200      	movs	r2, #0
 8003fde:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	4619      	mov	r1, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3310      	adds	r3, #16
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	f7fd ff45 	bl	8001e84 <HAL_DMA_Start_IT>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d139      	bne.n	8004078 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8004004:	e013      	b.n	800402e <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e057      	b.n	80040de <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004044:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004054:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004064:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e02f      	b.n	80040d8 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f043 0210 	orr.w	r2, r3, #16
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e01e      	b.n	80040de <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ae:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040be:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80040d6:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000004 	.word	0x20000004
 80040ec:	14f8b589 	.word	0x14f8b589
 80040f0:	ffff0000 	.word	0xffff0000
 80040f4:	08005819 	.word	0x08005819
 80040f8:	080059c3 	.word	0x080059c3

080040fc <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b20      	cmp	r3, #32
 8004114:	f040 80b8 	bne.w	8004288 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_I2C_Slave_Receive_DMA+0x28>
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0b0      	b.n	800428a <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Slave_Receive_DMA+0x3a>
 8004132:	2302      	movs	r3, #2
 8004134:	e0a9      	b.n	800428a <HAL_I2C_Slave_Receive_DMA+0x18e>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d007      	beq.n	800415c <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2222      	movs	r2, #34	; 0x22
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a3e      	ldr	r2, [pc, #248]	; (8004294 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02a      	beq.n	80041fc <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	4a3b      	ldr	r2, [pc, #236]	; (8004298 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	4a3a      	ldr	r2, [pc, #232]	; (800429c <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 80041b4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	2200      	movs	r2, #0
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	2200      	movs	r2, #0
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	2200      	movs	r2, #0
 80041cc:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	2200      	movs	r2, #0
 80041d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3310      	adds	r3, #16
 80041e0:	4619      	mov	r1, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	f7fd fe4a 	bl	8001e84 <HAL_DMA_Start_IT>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d132      	bne.n	8004260 <HAL_I2C_Slave_Receive_DMA+0x164>
 80041fa:	e013      	b.n	8004224 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2228      	movs	r2, #40	; 0x28
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e032      	b.n	800428a <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004232:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800424a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800425a:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	e014      	b.n	800428a <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f043 0210 	orr.w	r2, r3, #16
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	ffff0000 	.word	0xffff0000
 8004298:	08005819 	.word	0x08005819
 800429c:	080059c3 	.word	0x080059c3

080042a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d003      	beq.n	80042d8 <HAL_I2C_EV_IRQHandler+0x38>
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	f040 80c1 	bne.w	800445a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <HAL_I2C_EV_IRQHandler+0x6e>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80042f8:	d003      	beq.n	8004302 <HAL_I2C_EV_IRQHandler+0x62>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004300:	d101      	bne.n	8004306 <HAL_I2C_EV_IRQHandler+0x66>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <HAL_I2C_EV_IRQHandler+0x68>
 8004306:	2300      	movs	r3, #0
 8004308:	2b01      	cmp	r3, #1
 800430a:	f000 8132 	beq.w	8004572 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <HAL_I2C_EV_IRQHandler+0x92>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	0a5b      	lsrs	r3, r3, #9
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f001 fc63 	bl	8005bf0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fcc8 	bl	8004cc0 <I2C_Master_SB>
 8004330:	e092      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	08db      	lsrs	r3, r3, #3
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_I2C_EV_IRQHandler+0xb2>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	0a5b      	lsrs	r3, r3, #9
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fd3e 	bl	8004dcc <I2C_Master_ADD10>
 8004350:	e082      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_I2C_EV_IRQHandler+0xd2>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	0a5b      	lsrs	r3, r3, #9
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fd58 	bl	8004e20 <I2C_Master_ADDR>
 8004370:	e072      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d03b      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438c:	f000 80f3 	beq.w	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	09db      	lsrs	r3, r3, #7
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00f      	beq.n	80043bc <HAL_I2C_EV_IRQHandler+0x11c>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	0a9b      	lsrs	r3, r3, #10
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <HAL_I2C_EV_IRQHandler+0x11c>
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d103      	bne.n	80043bc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f942 	bl	800463e <I2C_MasterTransmit_TXE>
 80043ba:	e04d      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80d6 	beq.w	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	0a5b      	lsrs	r3, r3, #9
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80cf 	beq.w	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043d8:	7bbb      	ldrb	r3, [r7, #14]
 80043da:	2b21      	cmp	r3, #33	; 0x21
 80043dc:	d103      	bne.n	80043e6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9c9 	bl	8004776 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e4:	e0c7      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	f040 80c4 	bne.w	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa37 	bl	8004862 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f4:	e0bf      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004404:	f000 80b7 	beq.w	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00f      	beq.n	8004434 <HAL_I2C_EV_IRQHandler+0x194>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <HAL_I2C_EV_IRQHandler+0x194>
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	089b      	lsrs	r3, r3, #2
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 faac 	bl	800498a <I2C_MasterReceive_RXNE>
 8004432:	e011      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	089b      	lsrs	r3, r3, #2
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 809a 	beq.w	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	0a5b      	lsrs	r3, r3, #9
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8093 	beq.w	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fb4b 	bl	8004aec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004456:	e08e      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004458:	e08d      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d004      	beq.n	800446c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e007      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x20e>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	0a5b      	lsrs	r3, r3, #9
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00c      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80044a4:	69b9      	ldr	r1, [r7, #24]
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 ff09 	bl	80052be <I2C_Slave_ADDR>
 80044ac:	e066      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_I2C_EV_IRQHandler+0x22e>
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	0a5b      	lsrs	r3, r3, #9
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 ff44 	bl	8005354 <I2C_Slave_STOPF>
 80044cc:	e056      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044ce:	7bbb      	ldrb	r3, [r7, #14]
 80044d0:	2b21      	cmp	r3, #33	; 0x21
 80044d2:	d002      	beq.n	80044da <HAL_I2C_EV_IRQHandler+0x23a>
 80044d4:	7bbb      	ldrb	r3, [r7, #14]
 80044d6:	2b29      	cmp	r3, #41	; 0x29
 80044d8:	d125      	bne.n	8004526 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	09db      	lsrs	r3, r3, #7
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00f      	beq.n	8004506 <HAL_I2C_EV_IRQHandler+0x266>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	0a9b      	lsrs	r3, r3, #10
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_I2C_EV_IRQHandler+0x266>
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d103      	bne.n	8004506 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fe1f 	bl	8005142 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004504:	e039      	b.n	800457a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d033      	beq.n	800457a <HAL_I2C_EV_IRQHandler+0x2da>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	0a5b      	lsrs	r3, r3, #9
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d02d      	beq.n	800457a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fe4c 	bl	80051bc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004524:	e029      	b.n	800457a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	099b      	lsrs	r3, r3, #6
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00f      	beq.n	8004552 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	0a9b      	lsrs	r3, r3, #10
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_I2C_EV_IRQHandler+0x2b2>
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fe57 	bl	80051fe <I2C_SlaveReceive_RXNE>
 8004550:	e014      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00e      	beq.n	800457c <HAL_I2C_EV_IRQHandler+0x2dc>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	0a5b      	lsrs	r3, r3, #9
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fe85 	bl	800527a <I2C_SlaveReceive_BTF>
 8004570:	e004      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004572:	bf00      	nop
 8004574:	e002      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800457a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	70fb      	strb	r3, [r7, #3]
 80045ca:	4613      	mov	r3, r2
 80045cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004654:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d150      	bne.n	8004706 <I2C_MasterTransmit_TXE+0xc8>
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b21      	cmp	r3, #33	; 0x21
 8004668:	d14d      	bne.n	8004706 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d01d      	beq.n	80046ac <I2C_MasterTransmit_TXE+0x6e>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b20      	cmp	r3, #32
 8004674:	d01a      	beq.n	80046ac <I2C_MasterTransmit_TXE+0x6e>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800467c:	d016      	beq.n	80046ac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800468c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2211      	movs	r2, #17
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff6c 	bl	8004582 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046aa:	e060      	b.n	800476e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d107      	bne.n	80046f6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff7d 	bl	80045ee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046f4:	e03b      	b.n	800476e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ff3f 	bl	8004582 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004704:	e033      	b.n	800476e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b21      	cmp	r3, #33	; 0x21
 800470a:	d005      	beq.n	8004718 <I2C_MasterTransmit_TXE+0xda>
 800470c:	7bbb      	ldrb	r3, [r7, #14]
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d12d      	bne.n	800476e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b22      	cmp	r3, #34	; 0x22
 8004716:	d12a      	bne.n	800476e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d108      	bne.n	8004734 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004730:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004732:	e01c      	b.n	800476e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d103      	bne.n	8004748 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f88e 	bl	8004862 <I2C_MemoryTransmit_TXE_BTF>
}
 8004746:	e012      	b.n	800476e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800476c:	e7ff      	b.n	800476e <I2C_MasterTransmit_TXE+0x130>
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b21      	cmp	r3, #33	; 0x21
 800478e:	d164      	bne.n	800485a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d012      	beq.n	80047c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80047be:	e04c      	b.n	800485a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d01d      	beq.n	8004802 <I2C_MasterTransmit_BTF+0x8c>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d01a      	beq.n	8004802 <I2C_MasterTransmit_BTF+0x8c>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d2:	d016      	beq.n	8004802 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2211      	movs	r2, #17
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fec1 	bl	8004582 <HAL_I2C_MasterTxCpltCallback>
}
 8004800:	e02b      	b.n	800485a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004810:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004820:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d107      	bne.n	800484c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fed2 	bl	80045ee <HAL_I2C_MemTxCpltCallback>
}
 800484a:	e006      	b.n	800485a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fe94 	bl	8004582 <HAL_I2C_MasterTxCpltCallback>
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d11d      	bne.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10b      	bne.n	800489a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	b2da      	uxtb	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004898:	e073      	b.n	8004982 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	b29b      	uxth	r3, r3
 80048a0:	121b      	asrs	r3, r3, #8
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048b4:	e065      	b.n	8004982 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10b      	bne.n	80048d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048d4:	e055      	b.n	8004982 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d151      	bne.n	8004982 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b22      	cmp	r3, #34	; 0x22
 80048e2:	d10d      	bne.n	8004900 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048fe:	e040      	b.n	8004982 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d015      	beq.n	8004936 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b21      	cmp	r3, #33	; 0x21
 800490e:	d112      	bne.n	8004936 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004934:	e025      	b.n	8004982 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d120      	bne.n	8004982 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b21      	cmp	r3, #33	; 0x21
 8004944:	d11d      	bne.n	8004982 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004954:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004964:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fe36 	bl	80045ee <HAL_I2C_MemTxCpltCallback>
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b22      	cmp	r3, #34	; 0x22
 800499c:	f040 80a2 	bne.w	8004ae4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d921      	bls.n	80049f2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b03      	cmp	r3, #3
 80049dc:	f040 8082 	bne.w	8004ae4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ee:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80049f0:	e078      	b.n	8004ae4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d074      	beq.n	8004ae4 <I2C_MasterReceive_RXNE+0x15a>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d002      	beq.n	8004a06 <I2C_MasterReceive_RXNE+0x7c>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d16e      	bne.n	8004ae4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f001 f8c0 	bl	8005b8c <I2C_WaitOnSTOPRequestThroughIT>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d142      	bne.n	8004a98 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a20:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a30:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d10a      	bne.n	8004a82 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fdc1 	bl	8004602 <HAL_I2C_MemRxCpltCallback>
}
 8004a80:	e030      	b.n	8004ae4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2212      	movs	r2, #18
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fd80 	bl	8004596 <HAL_I2C_MasterRxCpltCallback>
}
 8004a96:	e025      	b.n	8004ae4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aa6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fd99 	bl	8004616 <HAL_I2C_ErrorCallback>
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d11b      	bne.n	8004b3c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b12:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004b3a:	e0bd      	b.n	8004cb8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d129      	bne.n	8004b9a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b54:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d00a      	beq.n	8004b72 <I2C_MasterReceive_BTF+0x86>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d007      	beq.n	8004b72 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b98:	e08e      	b.n	8004cb8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d176      	bne.n	8004c92 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d002      	beq.n	8004bb0 <I2C_MasterReceive_BTF+0xc4>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d108      	bne.n	8004bc2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e019      	b.n	8004bf6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d002      	beq.n	8004bce <I2C_MasterReceive_BTF+0xe2>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d108      	bne.n	8004be0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e00a      	b.n	8004bf6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d007      	beq.n	8004bf6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c50:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b40      	cmp	r3, #64	; 0x40
 8004c64:	d10a      	bne.n	8004c7c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fcc4 	bl	8004602 <HAL_I2C_MemRxCpltCallback>
}
 8004c7a:	e01d      	b.n	8004cb8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2212      	movs	r2, #18
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff fc83 	bl	8004596 <HAL_I2C_MasterRxCpltCallback>
}
 8004c90:	e012      	b.n	8004cb8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d117      	bne.n	8004d04 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004cee:	e067      	b.n	8004dc0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	611a      	str	r2, [r3, #16]
}
 8004d02:	e05d      	b.n	8004dc0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d0c:	d133      	bne.n	8004d76 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b21      	cmp	r3, #33	; 0x21
 8004d18:	d109      	bne.n	8004d2e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d2a:	611a      	str	r2, [r3, #16]
 8004d2c:	e008      	b.n	8004d40 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d004      	beq.n	8004d52 <I2C_Master_SB+0x92>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d108      	bne.n	8004d64 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d032      	beq.n	8004dc0 <I2C_Master_SB+0x100>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02d      	beq.n	8004dc0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d72:	605a      	str	r2, [r3, #4]
}
 8004d74:	e024      	b.n	8004dc0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10e      	bne.n	8004d9c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	11db      	asrs	r3, r3, #7
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f003 0306 	and.w	r3, r3, #6
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f063 030f 	orn	r3, r3, #15
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	611a      	str	r2, [r3, #16]
}
 8004d9a:	e011      	b.n	8004dc0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10d      	bne.n	8004dc0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	11db      	asrs	r3, r3, #7
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f003 0306 	and.w	r3, r3, #6
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f063 030e 	orn	r3, r3, #14
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	611a      	str	r2, [r3, #16]
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <I2C_Master_ADD10+0x26>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <I2C_Master_ADD10+0x48>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e12:	605a      	str	r2, [r3, #4]
  }
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b091      	sub	sp, #68	; 0x44
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b22      	cmp	r3, #34	; 0x22
 8004e48:	f040 8169 	bne.w	800511e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10f      	bne.n	8004e74 <I2C_Master_ADDR+0x54>
 8004e54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d10b      	bne.n	8004e74 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	e160      	b.n	8005136 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11d      	bne.n	8004eb8 <I2C_Master_ADDR+0x98>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e84:	d118      	bne.n	8004eb8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e86:	2300      	movs	r3, #0
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eaa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	651a      	str	r2, [r3, #80]	; 0x50
 8004eb6:	e13e      	b.n	8005136 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d113      	bne.n	8004eea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e115      	b.n	8005116 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	f040 808a 	bne.w	800500a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004efc:	d137      	bne.n	8004f6e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1c:	d113      	bne.n	8004f46 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	e0e7      	b.n	8005116 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f46:	2300      	movs	r3, #0
 8004f48:	623b      	str	r3, [r7, #32]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	623b      	str	r3, [r7, #32]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	623b      	str	r3, [r7, #32]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e0d3      	b.n	8005116 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d02e      	beq.n	8004fd2 <I2C_Master_ADDR+0x1b2>
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d02b      	beq.n	8004fd2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7c:	2b12      	cmp	r3, #18
 8004f7e:	d102      	bne.n	8004f86 <I2C_Master_ADDR+0x166>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d125      	bne.n	8004fd2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d00e      	beq.n	8004faa <I2C_Master_ADDR+0x18a>
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d00b      	beq.n	8004faa <I2C_Master_ADDR+0x18a>
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d008      	beq.n	8004faa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	e007      	b.n	8004fba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	e0a1      	b.n	8005116 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e085      	b.n	8005116 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d14d      	bne.n	80050b0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	2b04      	cmp	r3, #4
 8005018:	d016      	beq.n	8005048 <I2C_Master_ADDR+0x228>
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	2b02      	cmp	r3, #2
 800501e:	d013      	beq.n	8005048 <I2C_Master_ADDR+0x228>
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	2b10      	cmp	r3, #16
 8005024:	d010      	beq.n	8005048 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e007      	b.n	8005058 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005056:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005066:	d117      	bne.n	8005098 <I2C_Master_ADDR+0x278>
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800506e:	d00b      	beq.n	8005088 <I2C_Master_ADDR+0x268>
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	2b01      	cmp	r3, #1
 8005074:	d008      	beq.n	8005088 <I2C_Master_ADDR+0x268>
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b08      	cmp	r3, #8
 800507a:	d005      	beq.n	8005088 <I2C_Master_ADDR+0x268>
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	2b10      	cmp	r3, #16
 8005080:	d002      	beq.n	8005088 <I2C_Master_ADDR+0x268>
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	2b20      	cmp	r3, #32
 8005086:	d107      	bne.n	8005098 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005096:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	e032      	b.n	8005116 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ce:	d117      	bne.n	8005100 <I2C_Master_ADDR+0x2e0>
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050d6:	d00b      	beq.n	80050f0 <I2C_Master_ADDR+0x2d0>
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d008      	beq.n	80050f0 <I2C_Master_ADDR+0x2d0>
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d005      	beq.n	80050f0 <I2C_Master_ADDR+0x2d0>
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d002      	beq.n	80050f0 <I2C_Master_ADDR+0x2d0>
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d107      	bne.n	8005100 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005100:	2300      	movs	r3, #0
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800511c:	e00b      	b.n	8005136 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
}
 8005134:	e7ff      	b.n	8005136 <I2C_Master_ADDR+0x316>
 8005136:	bf00      	nop
 8005138:	3744      	adds	r7, #68	; 0x44
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d02b      	beq.n	80051b4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d114      	bne.n	80051b4 <I2C_SlaveTransmit_TXE+0x72>
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b29      	cmp	r3, #41	; 0x29
 800518e:	d111      	bne.n	80051b4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2221      	movs	r2, #33	; 0x21
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2228      	movs	r2, #40	; 0x28
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff f9fb 	bl	80045aa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	781a      	ldrb	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02c      	beq.n	8005272 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d114      	bne.n	8005272 <I2C_SlaveReceive_RXNE+0x74>
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b2a      	cmp	r3, #42	; 0x2a
 800524c:	d111      	bne.n	8005272 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2222      	movs	r2, #34	; 0x22
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2228      	movs	r2, #40	; 0x28
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fb f9a1 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d012      	beq.n	80052b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052d8:	2b28      	cmp	r3, #40	; 0x28
 80052da:	d127      	bne.n	800532c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	089b      	lsrs	r3, r3, #2
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	09db      	lsrs	r3, r3, #7
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d103      	bne.n	8005310 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	81bb      	strh	r3, [r7, #12]
 800530e:	e002      	b.n	8005316 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800531e:	89ba      	ldrh	r2, [r7, #12]
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff f94a 	bl	80045be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800532a:	e00e      	b.n	800534a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532c:	2300      	movs	r3, #0
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005372:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b0:	d172      	bne.n	8005498 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b22      	cmp	r3, #34	; 0x22
 80053b6:	d002      	beq.n	80053be <I2C_Slave_STOPF+0x6a>
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	2b2a      	cmp	r3, #42	; 0x2a
 80053bc:	d135      	bne.n	800542a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f043 0204 	orr.w	r2, r3, #4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fc ffb8 	bl	800236c <HAL_DMA_GetState>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d049      	beq.n	8005496 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	4a69      	ldr	r2, [pc, #420]	; (80055ac <I2C_Slave_STOPF+0x258>)
 8005408:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	4618      	mov	r0, r3
 8005410:	f7fc fe00 	bl	8002014 <HAL_DMA_Abort_IT>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d03d      	beq.n	8005496 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005428:	e035      	b.n	8005496 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b29a      	uxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0204 	orr.w	r2, r3, #4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800545c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005462:	4618      	mov	r0, r3
 8005464:	f7fc ff82 	bl	800236c <HAL_DMA_GetState>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d014      	beq.n	8005498 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	4a4e      	ldr	r2, [pc, #312]	; (80055ac <I2C_Slave_STOPF+0x258>)
 8005474:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	4618      	mov	r0, r3
 800547c:	f7fc fdca 	bl	8002014 <HAL_DMA_Abort_IT>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005490:	4610      	mov	r0, r2
 8005492:	4798      	blx	r3
 8005494:	e000      	b.n	8005498 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005496:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d03e      	beq.n	8005520 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d112      	bne.n	80054d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d112      	bne.n	800550a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f843 	bl	80055b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800552e:	e039      	b.n	80055a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b2a      	cmp	r3, #42	; 0x2a
 8005534:	d109      	bne.n	800554a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2228      	movs	r2, #40	; 0x28
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fb f835 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b28      	cmp	r3, #40	; 0x28
 8005554:	d111      	bne.n	800557a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <I2C_Slave_STOPF+0x25c>)
 800555a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff f831 	bl	80045da <HAL_I2C_ListenCpltCallback>
}
 8005578:	e014      	b.n	80055a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	2b22      	cmp	r3, #34	; 0x22
 8005580:	d002      	beq.n	8005588 <I2C_Slave_STOPF+0x234>
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	2b22      	cmp	r3, #34	; 0x22
 8005586:	d10d      	bne.n	80055a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fb f808 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	08005a3d 	.word	0x08005a3d
 80055b0:	ffff0000 	.word	0xffff0000

080055b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80055cc:	7bbb      	ldrb	r3, [r7, #14]
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d002      	beq.n	80055d8 <I2C_ITError+0x24>
 80055d2:	7bbb      	ldrb	r3, [r7, #14]
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d10a      	bne.n	80055ee <I2C_ITError+0x3a>
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b22      	cmp	r3, #34	; 0x22
 80055dc:	d107      	bne.n	80055ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055f4:	2b28      	cmp	r3, #40	; 0x28
 80055f6:	d107      	bne.n	8005608 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2228      	movs	r2, #40	; 0x28
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005606:	e015      	b.n	8005634 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005616:	d00a      	beq.n	800562e <I2C_ITError+0x7a>
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b60      	cmp	r3, #96	; 0x60
 800561c:	d007      	beq.n	800562e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800563e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005642:	d162      	bne.n	800570a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005652:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d020      	beq.n	80056a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005666:	4a6a      	ldr	r2, [pc, #424]	; (8005810 <I2C_ITError+0x25c>)
 8005668:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566e:	4618      	mov	r0, r3
 8005670:	f7fc fcd0 	bl	8002014 <HAL_DMA_Abort_IT>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8089 	beq.w	800578e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800569e:	4610      	mov	r0, r2
 80056a0:	4798      	blx	r3
 80056a2:	e074      	b.n	800578e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	4a59      	ldr	r2, [pc, #356]	; (8005810 <I2C_ITError+0x25c>)
 80056aa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fc fcaf 	bl	8002014 <HAL_DMA_Abort_IT>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d068      	beq.n	800578e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d10b      	bne.n	80056e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005704:	4610      	mov	r0, r2
 8005706:	4798      	blx	r3
 8005708:	e041      	b.n	800578e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b60      	cmp	r3, #96	; 0x60
 8005714:	d125      	bne.n	8005762 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d10b      	bne.n	800574a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fe ff65 	bl	800462a <HAL_I2C_AbortCpltCallback>
 8005760:	e015      	b.n	800578e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d10b      	bne.n	8005788 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fe ff44 	bl	8004616 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10e      	bne.n	80057bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d113      	bne.n	8005808 <I2C_ITError+0x254>
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b28      	cmp	r3, #40	; 0x28
 80057e4:	d110      	bne.n	8005808 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <I2C_ITError+0x260>)
 80057ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fe fee9 	bl	80045da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	08005a3d 	.word	0x08005a3d
 8005814:	ffff0000 	.word	0xffff0000

08005818 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005834:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800584a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	2200      	movs	r2, #0
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	2200      	movs	r2, #0
 800586a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800586c:	7cfb      	ldrb	r3, [r7, #19]
 800586e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005872:	2b21      	cmp	r3, #33	; 0x21
 8005874:	d007      	beq.n	8005886 <I2C_DMAXferCplt+0x6e>
 8005876:	7cfb      	ldrb	r3, [r7, #19]
 8005878:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800587c:	2b22      	cmp	r3, #34	; 0x22
 800587e:	d131      	bne.n	80058e4 <I2C_DMAXferCplt+0xcc>
 8005880:	7cbb      	ldrb	r3, [r7, #18]
 8005882:	2b20      	cmp	r3, #32
 8005884:	d12e      	bne.n	80058e4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005894:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2200      	movs	r2, #0
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b29      	cmp	r3, #41	; 0x29
 80058a0:	d10a      	bne.n	80058b8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2221      	movs	r2, #33	; 0x21
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2228      	movs	r2, #40	; 0x28
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058b0:	6978      	ldr	r0, [r7, #20]
 80058b2:	f7fe fe7a 	bl	80045aa <HAL_I2C_SlaveTxCpltCallback>
 80058b6:	e00c      	b.n	80058d2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	2b2a      	cmp	r3, #42	; 0x2a
 80058bc:	d109      	bne.n	80058d2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2222      	movs	r2, #34	; 0x22
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2228      	movs	r2, #40	; 0x28
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058cc:	6978      	ldr	r0, [r7, #20]
 80058ce:	f7fa fe71 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80058e0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80058e2:	e06a      	b.n	80059ba <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d064      	beq.n	80059ba <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d107      	bne.n	800590a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005908:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005918:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005920:	d009      	beq.n	8005936 <I2C_DMAXferCplt+0x11e>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d006      	beq.n	8005936 <I2C_DMAXferCplt+0x11e>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800592e:	d002      	beq.n	8005936 <I2C_DMAXferCplt+0x11e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b20      	cmp	r3, #32
 8005934:	d107      	bne.n	8005946 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005944:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005954:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005964:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2200      	movs	r2, #0
 800596a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005974:	6978      	ldr	r0, [r7, #20]
 8005976:	f7fe fe4e 	bl	8004616 <HAL_I2C_ErrorCallback>
}
 800597a:	e01e      	b.n	80059ba <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d10a      	bne.n	80059a6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800599e:	6978      	ldr	r0, [r7, #20]
 80059a0:	f7fe fe2f 	bl	8004602 <HAL_I2C_MemRxCpltCallback>
}
 80059a4:	e009      	b.n	80059ba <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2212      	movs	r2, #18
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	f7fe fdee 	bl	8004596 <HAL_I2C_MasterRxCpltCallback>
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	2200      	movs	r2, #0
 80059de:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	2200      	movs	r2, #0
 80059ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7fc fcc9 	bl	8002388 <HAL_DMA_GetError>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d01b      	beq.n	8005a34 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f043 0210 	orr.w	r2, r3, #16
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7fe fdf1 	bl	8004616 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a56:	4b4b      	ldr	r3, [pc, #300]	; (8005b84 <I2C_DMAAbort+0x148>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	08db      	lsrs	r3, r3, #3
 8005a5c:	4a4a      	ldr	r2, [pc, #296]	; (8005b88 <I2C_DMAAbort+0x14c>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	0a1a      	lsrs	r2, r3, #8
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	00da      	lsls	r2, r3, #3
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f043 0220 	orr.w	r2, r3, #32
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005a82:	e00a      	b.n	8005a9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a98:	d0ea      	beq.n	8005a70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005adc:	2200      	movs	r2, #0
 8005ade:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	2200      	movs	r2, #0
 8005aee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0201 	bic.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b60      	cmp	r3, #96	; 0x60
 8005b0a:	d10e      	bne.n	8005b2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b22:	6978      	ldr	r0, [r7, #20]
 8005b24:	f7fe fd81 	bl	800462a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b28:	e027      	b.n	8005b7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b30:	2b28      	cmp	r3, #40	; 0x28
 8005b32:	d117      	bne.n	8005b64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2228      	movs	r2, #40	; 0x28
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b62:	e007      	b.n	8005b74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b74:	6978      	ldr	r0, [r7, #20]
 8005b76:	f7fe fd4e 	bl	8004616 <HAL_I2C_ErrorCallback>
}
 8005b7a:	bf00      	nop
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000004 	.word	0x20000004
 8005b88:	14f8b589 	.word	0x14f8b589

08005b8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b98:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	08db      	lsrs	r3, r3, #3
 8005b9e:	4a13      	ldr	r2, [pc, #76]	; (8005bec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	0a1a      	lsrs	r2, r3, #8
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d107      	bne.n	8005bca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e008      	b.n	8005bdc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd8:	d0e9      	beq.n	8005bae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	20000004 	.word	0x20000004
 8005bec:	14f8b589 	.word	0x14f8b589

08005bf0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c00:	d103      	bne.n	8005c0a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c08:	e007      	b.n	8005c1a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c12:	d102      	bne.n	8005c1a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2208      	movs	r2, #8
 8005c18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d129      	bne.n	8005c90 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0210 	bic.w	r2, r2, #16
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e000      	b.n	8005c92 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d12a      	bne.n	8005d0e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	; 0x24
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005cd8:	89fb      	ldrh	r3, [r7, #14]
 8005cda:	f023 030f 	bic.w	r3, r3, #15
 8005cde:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	89fb      	ldrh	r3, [r7, #14]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	89fa      	ldrh	r2, [r7, #14]
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e000      	b.n	8005d10 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
  }
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e267      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d075      	beq.n	8005e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d3a:	4b88      	ldr	r3, [pc, #544]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d00c      	beq.n	8005d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d46:	4b85      	ldr	r3, [pc, #532]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d112      	bne.n	8005d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d52:	4b82      	ldr	r3, [pc, #520]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d5e:	d10b      	bne.n	8005d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d60:	4b7e      	ldr	r3, [pc, #504]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05b      	beq.n	8005e24 <HAL_RCC_OscConfig+0x108>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d157      	bne.n	8005e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e242      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d106      	bne.n	8005d90 <HAL_RCC_OscConfig+0x74>
 8005d82:	4b76      	ldr	r3, [pc, #472]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a75      	ldr	r2, [pc, #468]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e01d      	b.n	8005dcc <HAL_RCC_OscConfig+0xb0>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x98>
 8005d9a:	4b70      	ldr	r3, [pc, #448]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a6f      	ldr	r2, [pc, #444]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	4b6d      	ldr	r3, [pc, #436]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a6c      	ldr	r2, [pc, #432]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e00b      	b.n	8005dcc <HAL_RCC_OscConfig+0xb0>
 8005db4:	4b69      	ldr	r3, [pc, #420]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a68      	ldr	r2, [pc, #416]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	4b66      	ldr	r3, [pc, #408]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a65      	ldr	r2, [pc, #404]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d013      	beq.n	8005dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd4:	f7fb fe66 	bl	8001aa4 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ddc:	f7fb fe62 	bl	8001aa4 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b64      	cmp	r3, #100	; 0x64
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e207      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dee:	4b5b      	ldr	r3, [pc, #364]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0xc0>
 8005dfa:	e014      	b.n	8005e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7fb fe52 	bl	8001aa4 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e04:	f7fb fe4e 	bl	8001aa4 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	; 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e1f3      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e16:	4b51      	ldr	r3, [pc, #324]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0xe8>
 8005e22:	e000      	b.n	8005e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d063      	beq.n	8005efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e32:	4b4a      	ldr	r3, [pc, #296]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 030c 	and.w	r3, r3, #12
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e3e:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d11c      	bne.n	8005e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e4a:	4b44      	ldr	r3, [pc, #272]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d116      	bne.n	8005e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e56:	4b41      	ldr	r3, [pc, #260]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_RCC_OscConfig+0x152>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e1c7      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6e:	4b3b      	ldr	r3, [pc, #236]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	4937      	ldr	r1, [pc, #220]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e82:	e03a      	b.n	8005efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d020      	beq.n	8005ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e8c:	4b34      	ldr	r3, [pc, #208]	; (8005f60 <HAL_RCC_OscConfig+0x244>)
 8005e8e:	2201      	movs	r2, #1
 8005e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e92:	f7fb fe07 	bl	8001aa4 <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e9a:	f7fb fe03 	bl	8001aa4 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e1a8      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eac:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f0      	beq.n	8005e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb8:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4925      	ldr	r1, [pc, #148]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]
 8005ecc:	e015      	b.n	8005efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ece:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <HAL_RCC_OscConfig+0x244>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed4:	f7fb fde6 	bl	8001aa4 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005edc:	f7fb fde2 	bl	8001aa4 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e187      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eee:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d036      	beq.n	8005f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <HAL_RCC_OscConfig+0x248>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f14:	f7fb fdc6 	bl	8001aa4 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f1c:	f7fb fdc2 	bl	8001aa4 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e167      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0x200>
 8005f3a:	e01b      	b.n	8005f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <HAL_RCC_OscConfig+0x248>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f42:	f7fb fdaf 	bl	8001aa4 <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f48:	e00e      	b.n	8005f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f4a:	f7fb fdab 	bl	8001aa4 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d907      	bls.n	8005f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e150      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	42470000 	.word	0x42470000
 8005f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f68:	4b88      	ldr	r3, [pc, #544]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1ea      	bne.n	8005f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8097 	beq.w	80060b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f86:	4b81      	ldr	r3, [pc, #516]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10f      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]
 8005f96:	4b7d      	ldr	r3, [pc, #500]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	4a7c      	ldr	r2, [pc, #496]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa2:	4b7a      	ldr	r3, [pc, #488]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005faa:	60bb      	str	r3, [r7, #8]
 8005fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb2:	4b77      	ldr	r3, [pc, #476]	; (8006190 <HAL_RCC_OscConfig+0x474>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d118      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fbe:	4b74      	ldr	r3, [pc, #464]	; (8006190 <HAL_RCC_OscConfig+0x474>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a73      	ldr	r2, [pc, #460]	; (8006190 <HAL_RCC_OscConfig+0x474>)
 8005fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fca:	f7fb fd6b 	bl	8001aa4 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd2:	f7fb fd67 	bl	8001aa4 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e10c      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe4:	4b6a      	ldr	r3, [pc, #424]	; (8006190 <HAL_RCC_OscConfig+0x474>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d106      	bne.n	8006006 <HAL_RCC_OscConfig+0x2ea>
 8005ff8:	4b64      	ldr	r3, [pc, #400]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a63      	ldr	r2, [pc, #396]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	e01c      	b.n	8006040 <HAL_RCC_OscConfig+0x324>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b05      	cmp	r3, #5
 800600c:	d10c      	bne.n	8006028 <HAL_RCC_OscConfig+0x30c>
 800600e:	4b5f      	ldr	r3, [pc, #380]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	4a5e      	ldr	r2, [pc, #376]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	6713      	str	r3, [r2, #112]	; 0x70
 800601a:	4b5c      	ldr	r3, [pc, #368]	; (800618c <HAL_RCC_OscConfig+0x470>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	4a5b      	ldr	r2, [pc, #364]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006020:	f043 0301 	orr.w	r3, r3, #1
 8006024:	6713      	str	r3, [r2, #112]	; 0x70
 8006026:	e00b      	b.n	8006040 <HAL_RCC_OscConfig+0x324>
 8006028:	4b58      	ldr	r3, [pc, #352]	; (800618c <HAL_RCC_OscConfig+0x470>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	4a57      	ldr	r2, [pc, #348]	; (800618c <HAL_RCC_OscConfig+0x470>)
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	6713      	str	r3, [r2, #112]	; 0x70
 8006034:	4b55      	ldr	r3, [pc, #340]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006038:	4a54      	ldr	r2, [pc, #336]	; (800618c <HAL_RCC_OscConfig+0x470>)
 800603a:	f023 0304 	bic.w	r3, r3, #4
 800603e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d015      	beq.n	8006074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006048:	f7fb fd2c 	bl	8001aa4 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604e:	e00a      	b.n	8006066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006050:	f7fb fd28 	bl	8001aa4 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f241 3288 	movw	r2, #5000	; 0x1388
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e0cb      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006066:	4b49      	ldr	r3, [pc, #292]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0ee      	beq.n	8006050 <HAL_RCC_OscConfig+0x334>
 8006072:	e014      	b.n	800609e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006074:	f7fb fd16 	bl	8001aa4 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607a:	e00a      	b.n	8006092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800607c:	f7fb fd12 	bl	8001aa4 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f241 3288 	movw	r2, #5000	; 0x1388
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e0b5      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006092:	4b3e      	ldr	r3, [pc, #248]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1ee      	bne.n	800607c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d105      	bne.n	80060b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a4:	4b39      	ldr	r3, [pc, #228]	; (800618c <HAL_RCC_OscConfig+0x470>)
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	4a38      	ldr	r2, [pc, #224]	; (800618c <HAL_RCC_OscConfig+0x470>)
 80060aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80a1 	beq.w	80061fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ba:	4b34      	ldr	r3, [pc, #208]	; (800618c <HAL_RCC_OscConfig+0x470>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d05c      	beq.n	8006180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d141      	bne.n	8006152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ce:	4b31      	ldr	r3, [pc, #196]	; (8006194 <HAL_RCC_OscConfig+0x478>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fb fce6 	bl	8001aa4 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fb fce2 	bl	8001aa4 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e087      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ee:	4b27      	ldr	r3, [pc, #156]	; (800618c <HAL_RCC_OscConfig+0x470>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	3b01      	subs	r3, #1
 8006114:	041b      	lsls	r3, r3, #16
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	061b      	lsls	r3, r3, #24
 800611e:	491b      	ldr	r1, [pc, #108]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006120:	4313      	orrs	r3, r2
 8006122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <HAL_RCC_OscConfig+0x478>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612a:	f7fb fcbb 	bl	8001aa4 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006132:	f7fb fcb7 	bl	8001aa4 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e05c      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006144:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <HAL_RCC_OscConfig+0x416>
 8006150:	e054      	b.n	80061fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006152:	4b10      	ldr	r3, [pc, #64]	; (8006194 <HAL_RCC_OscConfig+0x478>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006158:	f7fb fca4 	bl	8001aa4 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006160:	f7fb fca0 	bl	8001aa4 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e045      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x444>
 800617e:	e03d      	b.n	80061fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d107      	bne.n	8006198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e038      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
 800618c:	40023800 	.word	0x40023800
 8006190:	40007000 	.word	0x40007000
 8006194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <HAL_RCC_OscConfig+0x4ec>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d028      	beq.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d121      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061be:	429a      	cmp	r2, r3
 80061c0:	d11a      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d111      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	3b01      	subs	r3, #1
 80061e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d107      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d001      	beq.n	80061fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40023800 	.word	0x40023800

0800620c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e0cc      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006220:	4b68      	ldr	r3, [pc, #416]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d90c      	bls.n	8006248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b65      	ldr	r3, [pc, #404]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006236:	4b63      	ldr	r3, [pc, #396]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0b8      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d020      	beq.n	8006296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006260:	4b59      	ldr	r3, [pc, #356]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4a58      	ldr	r2, [pc, #352]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800626a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006278:	4b53      	ldr	r3, [pc, #332]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a52      	ldr	r2, [pc, #328]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006284:	4b50      	ldr	r3, [pc, #320]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	494d      	ldr	r1, [pc, #308]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d044      	beq.n	800632c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062aa:	4b47      	ldr	r3, [pc, #284]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d119      	bne.n	80062ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e07f      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d003      	beq.n	80062ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d107      	bne.n	80062da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ca:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e06f      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062da:	4b3b      	ldr	r3, [pc, #236]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e067      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ea:	4b37      	ldr	r3, [pc, #220]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f023 0203 	bic.w	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4934      	ldr	r1, [pc, #208]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062fc:	f7fb fbd2 	bl	8001aa4 <HAL_GetTick>
 8006300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006302:	e00a      	b.n	800631a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006304:	f7fb fbce 	bl	8001aa4 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e04f      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631a:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 020c 	and.w	r2, r3, #12
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	429a      	cmp	r2, r3
 800632a:	d1eb      	bne.n	8006304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d20c      	bcs.n	8006354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b22      	ldr	r3, [pc, #136]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006342:	4b20      	ldr	r3, [pc, #128]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d001      	beq.n	8006354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e032      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006360:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4916      	ldr	r1, [pc, #88]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	4313      	orrs	r3, r2
 8006370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d009      	beq.n	8006392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	490e      	ldr	r1, [pc, #56]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006392:	f000 f821 	bl	80063d8 <HAL_RCC_GetSysClockFreq>
 8006396:	4602      	mov	r2, r0
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	490a      	ldr	r1, [pc, #40]	; (80063cc <HAL_RCC_ClockConfig+0x1c0>)
 80063a4:	5ccb      	ldrb	r3, [r1, r3]
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <HAL_RCC_ClockConfig+0x1c4>)
 80063ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063ae:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <HAL_RCC_ClockConfig+0x1c8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fb fb32 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40023c00 	.word	0x40023c00
 80063c8:	40023800 	.word	0x40023800
 80063cc:	080171c8 	.word	0x080171c8
 80063d0:	20000004 	.word	0x20000004
 80063d4:	20000008 	.word	0x20000008

080063d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063dc:	b094      	sub	sp, #80	; 0x50
 80063de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	647b      	str	r3, [r7, #68]	; 0x44
 80063e4:	2300      	movs	r3, #0
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e8:	2300      	movs	r3, #0
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f0:	4b79      	ldr	r3, [pc, #484]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 030c 	and.w	r3, r3, #12
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d00d      	beq.n	8006418 <HAL_RCC_GetSysClockFreq+0x40>
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	f200 80e1 	bhi.w	80065c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_RCC_GetSysClockFreq+0x34>
 8006406:	2b04      	cmp	r3, #4
 8006408:	d003      	beq.n	8006412 <HAL_RCC_GetSysClockFreq+0x3a>
 800640a:	e0db      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800640c:	4b73      	ldr	r3, [pc, #460]	; (80065dc <HAL_RCC_GetSysClockFreq+0x204>)
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006410:	e0db      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006412:	4b73      	ldr	r3, [pc, #460]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006416:	e0d8      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006418:	4b6f      	ldr	r3, [pc, #444]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006420:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006422:	4b6d      	ldr	r3, [pc, #436]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d063      	beq.n	80064f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800642e:	4b6a      	ldr	r3, [pc, #424]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	099b      	lsrs	r3, r3, #6
 8006434:	2200      	movs	r2, #0
 8006436:	63bb      	str	r3, [r7, #56]	; 0x38
 8006438:	63fa      	str	r2, [r7, #60]	; 0x3c
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006440:	633b      	str	r3, [r7, #48]	; 0x30
 8006442:	2300      	movs	r3, #0
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800644a:	4622      	mov	r2, r4
 800644c:	462b      	mov	r3, r5
 800644e:	f04f 0000 	mov.w	r0, #0
 8006452:	f04f 0100 	mov.w	r1, #0
 8006456:	0159      	lsls	r1, r3, #5
 8006458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800645c:	0150      	lsls	r0, r2, #5
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4621      	mov	r1, r4
 8006464:	1a51      	subs	r1, r2, r1
 8006466:	6139      	str	r1, [r7, #16]
 8006468:	4629      	mov	r1, r5
 800646a:	eb63 0301 	sbc.w	r3, r3, r1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800647c:	4659      	mov	r1, fp
 800647e:	018b      	lsls	r3, r1, #6
 8006480:	4651      	mov	r1, sl
 8006482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006486:	4651      	mov	r1, sl
 8006488:	018a      	lsls	r2, r1, #6
 800648a:	4651      	mov	r1, sl
 800648c:	ebb2 0801 	subs.w	r8, r2, r1
 8006490:	4659      	mov	r1, fp
 8006492:	eb63 0901 	sbc.w	r9, r3, r1
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064aa:	4690      	mov	r8, r2
 80064ac:	4699      	mov	r9, r3
 80064ae:	4623      	mov	r3, r4
 80064b0:	eb18 0303 	adds.w	r3, r8, r3
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	462b      	mov	r3, r5
 80064b8:	eb49 0303 	adc.w	r3, r9, r3
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ca:	4629      	mov	r1, r5
 80064cc:	024b      	lsls	r3, r1, #9
 80064ce:	4621      	mov	r1, r4
 80064d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064d4:	4621      	mov	r1, r4
 80064d6:	024a      	lsls	r2, r1, #9
 80064d8:	4610      	mov	r0, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064de:	2200      	movs	r2, #0
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064e8:	f7f9 fed2 	bl	8000290 <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4613      	mov	r3, r2
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f4:	e058      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f6:	4b38      	ldr	r3, [pc, #224]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	099b      	lsrs	r3, r3, #6
 80064fc:	2200      	movs	r2, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	4611      	mov	r1, r2
 8006502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006506:	623b      	str	r3, [r7, #32]
 8006508:	2300      	movs	r3, #0
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
 800650c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006510:	4642      	mov	r2, r8
 8006512:	464b      	mov	r3, r9
 8006514:	f04f 0000 	mov.w	r0, #0
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	0159      	lsls	r1, r3, #5
 800651e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006522:	0150      	lsls	r0, r2, #5
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4641      	mov	r1, r8
 800652a:	ebb2 0a01 	subs.w	sl, r2, r1
 800652e:	4649      	mov	r1, r9
 8006530:	eb63 0b01 	sbc.w	fp, r3, r1
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006548:	ebb2 040a 	subs.w	r4, r2, sl
 800654c:	eb63 050b 	sbc.w	r5, r3, fp
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	00eb      	lsls	r3, r5, #3
 800655a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800655e:	00e2      	lsls	r2, r4, #3
 8006560:	4614      	mov	r4, r2
 8006562:	461d      	mov	r5, r3
 8006564:	4643      	mov	r3, r8
 8006566:	18e3      	adds	r3, r4, r3
 8006568:	603b      	str	r3, [r7, #0]
 800656a:	464b      	mov	r3, r9
 800656c:	eb45 0303 	adc.w	r3, r5, r3
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800657e:	4629      	mov	r1, r5
 8006580:	028b      	lsls	r3, r1, #10
 8006582:	4621      	mov	r1, r4
 8006584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006588:	4621      	mov	r1, r4
 800658a:	028a      	lsls	r2, r1, #10
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006592:	2200      	movs	r2, #0
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	61fa      	str	r2, [r7, #28]
 8006598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800659c:	f7f9 fe78 	bl	8000290 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4613      	mov	r3, r2
 80065a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	0c1b      	lsrs	r3, r3, #16
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	3301      	adds	r3, #1
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065c2:	e002      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_GetSysClockFreq+0x204>)
 80065c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3750      	adds	r7, #80	; 0x50
 80065d0:	46bd      	mov	sp, r7
 80065d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d6:	bf00      	nop
 80065d8:	40023800 	.word	0x40023800
 80065dc:	00f42400 	.word	0x00f42400
 80065e0:	007a1200 	.word	0x007a1200

080065e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065ea:	681b      	ldr	r3, [r3, #0]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000004 	.word	0x20000004

080065fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006600:	f7ff fff0 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8006604:	4602      	mov	r2, r0
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	0a9b      	lsrs	r3, r3, #10
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	4903      	ldr	r1, [pc, #12]	; (8006620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006612:	5ccb      	ldrb	r3, [r1, r3]
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	080171d8 	.word	0x080171d8

08006624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006628:	f7ff ffdc 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 800662c:	4602      	mov	r2, r0
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	0b5b      	lsrs	r3, r3, #13
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	4903      	ldr	r1, [pc, #12]	; (8006648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800663a:	5ccb      	ldrb	r3, [r1, r3]
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	080171d8 	.word	0x080171d8

0800664c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e07b      	b.n	8006756 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800666e:	d009      	beq.n	8006684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
 8006676:	e005      	b.n	8006684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fa fd36 	bl	8001110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006708:	ea42 0103 	orr.w	r1, r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	f003 0104 	and.w	r1, r3, #4
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	f003 0210 	and.w	r2, r3, #16
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_SPI_Transmit_DMA+0x20>
 800677c:	2302      	movs	r3, #2
 800677e:	e09b      	b.n	80068b8 <HAL_SPI_Transmit_DMA+0x158>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	d002      	beq.n	800679a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006794:	2302      	movs	r3, #2
 8006796:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006798:	e089      	b.n	80068ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <HAL_SPI_Transmit_DMA+0x46>
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067aa:	e080      	b.n	80068ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2203      	movs	r2, #3
 80067b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	88fa      	ldrh	r2, [r7, #6]
 80067ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f2:	d10f      	bne.n	8006814 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006802:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006812:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006818:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <HAL_SPI_Transmit_DMA+0x160>)
 800681a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006820:	4a28      	ldr	r2, [pc, #160]	; (80068c4 <HAL_SPI_Transmit_DMA+0x164>)
 8006822:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006828:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <HAL_SPI_Transmit_DMA+0x168>)
 800682a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006830:	2200      	movs	r2, #0
 8006832:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	4619      	mov	r1, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800684c:	f7fb fb1a 	bl	8001e84 <HAL_DMA_Start_IT>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	f043 0210 	orr.w	r2, r3, #16
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800686e:	e01e      	b.n	80068ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d007      	beq.n	800688e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0220 	orr.w	r2, r2, #32
 800689c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0202 	orr.w	r2, r2, #2
 80068ac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	080070b9 	.word	0x080070b9
 80068c4:	08006ed9 	.word	0x08006ed9
 80068c8:	0800710d 	.word	0x0800710d

080068cc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d110      	bne.n	8006908 <HAL_SPI_Receive_DMA+0x3c>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ee:	d10b      	bne.n	8006908 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2204      	movs	r2, #4
 80068f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f8ac 	bl	8006a5c <HAL_SPI_TransmitReceive_DMA>
 8006904:	4603      	mov	r3, r0
 8006906:	e09f      	b.n	8006a48 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_SPI_Receive_DMA+0x4a>
 8006912:	2302      	movs	r3, #2
 8006914:	e098      	b.n	8006a48 <HAL_SPI_Receive_DMA+0x17c>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b01      	cmp	r3, #1
 8006928:	d002      	beq.n	8006930 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800692a:	2302      	movs	r3, #2
 800692c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800692e:	e086      	b.n	8006a3e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_SPI_Receive_DMA+0x70>
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006940:	e07d      	b.n	8006a3e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2204      	movs	r2, #4
 8006946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	88fa      	ldrh	r2, [r7, #6]
 800695a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	88fa      	ldrh	r2, [r7, #6]
 8006960:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006982:	d10f      	bne.n	80069a4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006992:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a8:	4a29      	ldr	r2, [pc, #164]	; (8006a50 <HAL_SPI_Receive_DMA+0x184>)
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b0:	4a28      	ldr	r2, [pc, #160]	; (8006a54 <HAL_SPI_Receive_DMA+0x188>)
 80069b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b8:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <HAL_SPI_Receive_DMA+0x18c>)
 80069ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c0:	2200      	movs	r2, #0
 80069c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	4619      	mov	r1, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80069dc:	f7fb fa52 	bl	8001e84 <HAL_DMA_Start_IT>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00c      	beq.n	8006a00 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	f043 0210 	orr.w	r2, r3, #16
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80069fe:	e01e      	b.n	8006a3e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0a:	2b40      	cmp	r3, #64	; 0x40
 8006a0c:	d007      	beq.n	8006a1e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a1c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0220 	orr.w	r2, r2, #32
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	080070d5 	.word	0x080070d5
 8006a54:	08006f81 	.word	0x08006f81
 8006a58:	0800710d 	.word	0x0800710d

08006a5c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_SPI_TransmitReceive_DMA+0x20>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e0e3      	b.n	8006c44 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a8a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006a92:	7dbb      	ldrb	r3, [r7, #22]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d00d      	beq.n	8006ab4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a9e:	d106      	bne.n	8006aae <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <HAL_SPI_TransmitReceive_DMA+0x52>
 8006aa8:	7dbb      	ldrb	r3, [r7, #22]
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d002      	beq.n	8006ab4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ab2:	e0c2      	b.n	8006c3a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006ac0:	887b      	ldrh	r3, [r7, #2]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006aca:	e0b6      	b.n	8006c3a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d003      	beq.n	8006ae0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2205      	movs	r2, #5
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	887a      	ldrh	r2, [r7, #2]
 8006af0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	887a      	ldrh	r2, [r7, #2]
 8006b02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	887a      	ldrh	r2, [r7, #2]
 8006b08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d108      	bne.n	8006b34 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b26:	4a49      	ldr	r2, [pc, #292]	; (8006c4c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2e:	4a48      	ldr	r2, [pc, #288]	; (8006c50 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006b30:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b32:	e007      	b.n	8006b44 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b38:	4a46      	ldr	r2, [pc, #280]	; (8006c54 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b40:	4a45      	ldr	r2, [pc, #276]	; (8006c58 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8006b42:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b48:	4a44      	ldr	r2, [pc, #272]	; (8006c5c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8006b4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b50:	2200      	movs	r2, #0
 8006b52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	4619      	mov	r1, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006b6c:	f7fb f98a 	bl	8001e84 <HAL_DMA_Start_IT>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	f043 0210 	orr.w	r2, r3, #16
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006b8e:	e054      	b.n	8006c3a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bac:	2200      	movs	r2, #0
 8006bae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc8:	4619      	mov	r1, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	330c      	adds	r3, #12
 8006bd0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006bd8:	f7fb f954 	bl	8001e84 <HAL_DMA_Start_IT>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f043 0210 	orr.w	r2, r3, #16
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006bfa:	e01e      	b.n	8006c3a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d007      	beq.n	8006c1a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c18:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0220 	orr.w	r2, r2, #32
 8006c28:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0202 	orr.w	r2, r2, #2
 8006c38:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	080070d5 	.word	0x080070d5
 8006c50:	08006f81 	.word	0x08006f81
 8006c54:	080070f1 	.word	0x080070f1
 8006c58:	08007029 	.word	0x08007029
 8006c5c:	0800710d 	.word	0x0800710d

08006c60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	099b      	lsrs	r3, r3, #6
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10f      	bne.n	8006ca4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	099b      	lsrs	r3, r3, #6
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
    return;
 8006ca2:	e0d7      	b.n	8006e54 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_SPI_IRQHandler+0x66>
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	09db      	lsrs	r3, r3, #7
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d004      	beq.n	8006cc6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
    return;
 8006cc4:	e0c6      	b.n	8006e54 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10c      	bne.n	8006cec <HAL_SPI_IRQHandler+0x8c>
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80b4 	beq.w	8006e54 <HAL_SPI_IRQHandler+0x1f4>
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80ad 	beq.w	8006e54 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	099b      	lsrs	r3, r3, #6
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d023      	beq.n	8006d4e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d011      	beq.n	8006d36 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	f043 0204 	orr.w	r2, r3, #4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	e00b      	b.n	8006d4e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	693b      	ldr	r3, [r7, #16]
        return;
 8006d4c:	e082      	b.n	8006e54 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d014      	beq.n	8006d84 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	f043 0201 	orr.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00c      	beq.n	8006daa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d94:	f043 0208 	orr.w	r2, r3, #8
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60bb      	str	r3, [r7, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d04f      	beq.n	8006e52 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dc0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <HAL_SPI_IRQHandler+0x17e>
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d034      	beq.n	8006e48 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0203 	bic.w	r2, r2, #3
 8006dec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d011      	beq.n	8006e1a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfa:	4a18      	ldr	r2, [pc, #96]	; (8006e5c <HAL_SPI_IRQHandler+0x1fc>)
 8006dfc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fb f906 	bl	8002014 <HAL_DMA_Abort_IT>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	4a0d      	ldr	r2, [pc, #52]	; (8006e5c <HAL_SPI_IRQHandler+0x1fc>)
 8006e28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fb f8f0 	bl	8002014 <HAL_DMA_Abort_IT>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006e46:	e003      	b.n	8006e50 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f83b 	bl	8006ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e4e:	e000      	b.n	8006e52 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006e50:	bf00      	nop
    return;
 8006e52:	bf00      	nop
  }
}
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	0800714d 	.word	0x0800714d

08006e60 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ee6:	f7fa fddd 	bl	8001aa4 <HAL_GetTick>
 8006eea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efa:	d03b      	beq.n	8006f74 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0220 	bic.w	r2, r2, #32
 8006f0a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0202 	bic.w	r2, r2, #2
 8006f1a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	2164      	movs	r1, #100	; 0x64
 8006f20:	6978      	ldr	r0, [r7, #20]
 8006f22:	f000 fa15 	bl	8007350 <SPI_EndRxTxTransaction>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f30:	f043 0220 	orr.w	r2, r3, #32
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006f6c:	6978      	ldr	r0, [r7, #20]
 8006f6e:	f7ff ffa9 	bl	8006ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006f72:	e002      	b.n	8006f7a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006f74:	6978      	ldr	r0, [r7, #20]
 8006f76:	f7ff ff73 	bl	8006e60 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f8e:	f7fa fd89 	bl	8001aa4 <HAL_GetTick>
 8006f92:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa2:	d03b      	beq.n	800701c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0220 	bic.w	r2, r2, #32
 8006fb2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10d      	bne.n	8006fd8 <SPI_DMAReceiveCplt+0x58>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc4:	d108      	bne.n	8006fd8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0203 	bic.w	r2, r2, #3
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	e007      	b.n	8006fe8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	2164      	movs	r1, #100	; 0x64
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f949 	bl	8007284 <SPI_EndRxTransaction>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff ff55 	bl	8006ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800701a:	e002      	b.n	8007022 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7f9 fab9 	bl	8000594 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007036:	f7fa fd35 	bl	8001aa4 <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704a:	d02f      	beq.n	80070ac <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0220 	bic.w	r2, r2, #32
 800705a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	2164      	movs	r1, #100	; 0x64
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f975 	bl	8007350 <SPI_EndRxTxTransaction>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007070:	f043 0220 	orr.w	r2, r3, #32
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0203 	bic.w	r2, r2, #3
 8007086:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f7ff ff0d 	bl	8006ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80070aa:	e002      	b.n	80070b2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff fee1 	bl	8006e74 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fede 	bl	8006e88 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff feda 	bl	8006e9c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fed6 	bl	8006eb0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0203 	bic.w	r2, r2, #3
 8007128:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712e:	f043 0210 	orr.w	r2, r3, #16
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff fec0 	bl	8006ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7ff feac 	bl	8006ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007184:	f7fa fc8e 	bl	8001aa4 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	4413      	add	r3, r2
 8007192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007194:	f7fa fc86 	bl	8001aa4 <HAL_GetTick>
 8007198:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800719a:	4b39      	ldr	r3, [pc, #228]	; (8007280 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	015b      	lsls	r3, r3, #5
 80071a0:	0d1b      	lsrs	r3, r3, #20
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	fb02 f303 	mul.w	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071aa:	e054      	b.n	8007256 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d050      	beq.n	8007256 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071b4:	f7fa fc76 	bl	8001aa4 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d902      	bls.n	80071ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d13d      	bne.n	8007246 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071e2:	d111      	bne.n	8007208 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ec:	d004      	beq.n	80071f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f6:	d107      	bne.n	8007208 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007206:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007210:	d10f      	bne.n	8007232 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007230:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e017      	b.n	8007276 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3b01      	subs	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4013      	ands	r3, r2
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	429a      	cmp	r2, r3
 8007264:	bf0c      	ite	eq
 8007266:	2301      	moveq	r3, #1
 8007268:	2300      	movne	r3, #0
 800726a:	b2db      	uxtb	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	429a      	cmp	r2, r3
 8007272:	d19b      	bne.n	80071ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000004 	.word	0x20000004

08007284 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af02      	add	r7, sp, #8
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007298:	d111      	bne.n	80072be <SPI_EndRxTransaction+0x3a>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a2:	d004      	beq.n	80072ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ac:	d107      	bne.n	80072be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072c6:	d12a      	bne.n	800731e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d0:	d012      	beq.n	80072f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	2180      	movs	r1, #128	; 0x80
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff ff49 	bl	8007174 <SPI_WaitFlagStateUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02d      	beq.n	8007344 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0220 	orr.w	r2, r3, #32
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e026      	b.n	8007346 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2200      	movs	r2, #0
 8007300:	2101      	movs	r1, #1
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff ff36 	bl	8007174 <SPI_WaitFlagStateUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01a      	beq.n	8007344 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007312:	f043 0220 	orr.w	r2, r3, #32
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e013      	b.n	8007346 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	2101      	movs	r1, #1
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff ff23 	bl	8007174 <SPI_WaitFlagStateUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d007      	beq.n	8007344 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	f043 0220 	orr.w	r2, r3, #32
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e000      	b.n	8007346 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af02      	add	r7, sp, #8
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800735c:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <SPI_EndRxTxTransaction+0x7c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <SPI_EndRxTxTransaction+0x80>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	0d5b      	lsrs	r3, r3, #21
 8007368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800737a:	d112      	bne.n	80073a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	2180      	movs	r1, #128	; 0x80
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff fef4 	bl	8007174 <SPI_WaitFlagStateUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	f043 0220 	orr.w	r2, r3, #32
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e00f      	b.n	80073c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b8:	2b80      	cmp	r3, #128	; 0x80
 80073ba:	d0f2      	beq.n	80073a2 <SPI_EndRxTxTransaction+0x52>
 80073bc:	e000      	b.n	80073c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80073be:	bf00      	nop
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000004 	.word	0x20000004
 80073d0:	165e9f81 	.word	0x165e9f81

080073d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e03f      	b.n	8007466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7f9 ffba 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2224      	movs	r2, #36	; 0x24
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 ff49 	bl	80082b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800742c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695a      	ldr	r2, [r3, #20]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800743c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800744c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	; 0x30
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	4613      	mov	r3, r2
 800747c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b20      	cmp	r3, #32
 8007488:	d165      	bne.n	8007556 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <HAL_UART_Transmit_DMA+0x26>
 8007490:	88fb      	ldrh	r3, [r7, #6]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e05e      	b.n	8007558 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Transmit_DMA+0x38>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e057      	b.n	8007558 <HAL_UART_Transmit_DMA+0xe8>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2221      	movs	r2, #33	; 0x21
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	4a22      	ldr	r2, [pc, #136]	; (8007560 <HAL_UART_Transmit_DMA+0xf0>)
 80074d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	4a21      	ldr	r2, [pc, #132]	; (8007564 <HAL_UART_Transmit_DMA+0xf4>)
 80074de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e4:	4a20      	ldr	r2, [pc, #128]	; (8007568 <HAL_UART_Transmit_DMA+0xf8>)
 80074e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ec:	2200      	movs	r2, #0
 80074ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80074f0:	f107 0308 	add.w	r3, r7, #8
 80074f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3304      	adds	r3, #4
 8007504:	461a      	mov	r2, r3
 8007506:	88fb      	ldrh	r3, [r7, #6]
 8007508:	f7fa fcbc 	bl	8001e84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007514:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3314      	adds	r3, #20
 8007524:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	617b      	str	r3, [r7, #20]
   return(result);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3314      	adds	r3, #20
 800753c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800753e:	627a      	str	r2, [r7, #36]	; 0x24
 8007540:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6a39      	ldr	r1, [r7, #32]
 8007544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	61fb      	str	r3, [r7, #28]
   return(result);
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e5      	bne.n	800751e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	e000      	b.n	8007558 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3730      	adds	r7, #48	; 0x30
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	08007b51 	.word	0x08007b51
 8007564:	08007beb 	.word	0x08007beb
 8007568:	08007d63 	.word	0x08007d63

0800756c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b20      	cmp	r3, #32
 8007584:	d11d      	bne.n	80075c2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_UART_Receive_DMA+0x26>
 800758c:	88fb      	ldrh	r3, [r7, #6]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e016      	b.n	80075c4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_UART_Receive_DMA+0x38>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e00f      	b.n	80075c4 <HAL_UART_Receive_DMA+0x58>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	461a      	mov	r2, r3
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fc1d 	bl	8007df8 <UART_Start_Receive_DMA>
 80075be:	4603      	mov	r3, r0
 80075c0:	e000      	b.n	80075c4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b0ba      	sub	sp, #232	; 0xe8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800760a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10f      	bne.n	8007632 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <HAL_UART_IRQHandler+0x66>
 800761e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fd85 	bl	800813a <UART_Receive_IT>
      return;
 8007630:	e256      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 80de 	beq.w	80077f8 <HAL_UART_IRQHandler+0x22c>
 800763c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80d1 	beq.w	80077f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <HAL_UART_IRQHandler+0xae>
 8007662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f043 0201 	orr.w	r2, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <HAL_UART_IRQHandler+0xd2>
 8007686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f043 0202 	orr.w	r2, r3, #2
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <HAL_UART_IRQHandler+0xf6>
 80076aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f043 0204 	orr.w	r2, r3, #4
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d011      	beq.n	80076f2 <HAL_UART_IRQHandler+0x126>
 80076ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f043 0208 	orr.w	r2, r3, #8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 81ed 	beq.w	8007ad6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <HAL_UART_IRQHandler+0x14e>
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fd10 	bl	800813a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b40      	cmp	r3, #64	; 0x40
 8007726:	bf0c      	ite	eq
 8007728:	2301      	moveq	r3, #1
 800772a:	2300      	movne	r3, #0
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <HAL_UART_IRQHandler+0x17a>
 800773e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d04f      	beq.n	80077e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fc18 	bl	8007f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b40      	cmp	r3, #64	; 0x40
 8007758:	d141      	bne.n	80077de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3314      	adds	r3, #20
 8007760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007786:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800778a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800779e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1d9      	bne.n	800775a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d013      	beq.n	80077d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	4a7d      	ldr	r2, [pc, #500]	; (80079a8 <HAL_UART_IRQHandler+0x3dc>)
 80077b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fa fc2a 	bl	8002014 <HAL_DMA_Abort_IT>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d016      	beq.n	80077f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	e00e      	b.n	80077f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9a4 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077dc:	e00a      	b.n	80077f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9a0 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e4:	e006      	b.n	80077f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f99c 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077f2:	e170      	b.n	8007ad6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	bf00      	nop
    return;
 80077f6:	e16e      	b.n	8007ad6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	f040 814a 	bne.w	8007a96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007806:	f003 0310 	and.w	r3, r3, #16
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8143 	beq.w	8007a96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 813c 	beq.w	8007a96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800781e:	2300      	movs	r3, #0
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60bb      	str	r3, [r7, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	f040 80b4 	bne.w	80079ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007850:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 8140 	beq.w	8007ada <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800785e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007862:	429a      	cmp	r2, r3
 8007864:	f080 8139 	bcs.w	8007ada <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800786e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787a:	f000 8088 	beq.w	800798e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1d9      	bne.n	800787e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3314      	adds	r3, #20
 80078d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3314      	adds	r3, #20
 80078ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e1      	bne.n	80078ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3314      	adds	r3, #20
 8007926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800792a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800792c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e3      	bne.n	8007906 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800795c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800795e:	f023 0310 	bic.w	r3, r3, #16
 8007962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007970:	65ba      	str	r2, [r7, #88]	; 0x58
 8007972:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007976:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800797e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e3      	bne.n	800794c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	4618      	mov	r0, r3
 800798a:	f7fa fad3 	bl	8001f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007996:	b29b      	uxth	r3, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8ca 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079a4:	e099      	b.n	8007ada <HAL_UART_IRQHandler+0x50e>
 80079a6:	bf00      	nop
 80079a8:	08008043 	.word	0x08008043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 808b 	beq.w	8007ade <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8086 	beq.w	8007ade <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079f6:	647a      	str	r2, [r7, #68]	; 0x44
 80079f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e3      	bne.n	80079d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	623b      	str	r3, [r7, #32]
   return(result);
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	f023 0301 	bic.w	r3, r3, #1
 8007a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3314      	adds	r3, #20
 8007a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e3      	bne.n	8007a0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	330c      	adds	r3, #12
 8007a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0310 	bic.w	r3, r3, #16
 8007a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a74:	61fa      	str	r2, [r7, #28]
 8007a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	69b9      	ldr	r1, [r7, #24]
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	617b      	str	r3, [r7, #20]
   return(result);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e3      	bne.n	8007a50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f852 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a94:	e023      	b.n	8007ade <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d009      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x4ea>
 8007aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fadb 	bl	800806a <UART_Transmit_IT>
    return;
 8007ab4:	e014      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00e      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x514>
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb1b 	bl	800810a <UART_EndTransmit_IT>
    return;
 8007ad4:	e004      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
    return;
 8007ad6:	bf00      	nop
 8007ad8:	e002      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
      return;
 8007ada:	bf00      	nop
 8007adc:	e000      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
      return;
 8007ade:	bf00      	nop
  }
}
 8007ae0:	37e8      	adds	r7, #232	; 0xe8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop

08007ae8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b090      	sub	sp, #64	; 0x40
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d137      	bne.n	8007bdc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6e:	2200      	movs	r2, #0
 8007b70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3314      	adds	r3, #20
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	623b      	str	r3, [r7, #32]
   return(result);
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3314      	adds	r3, #20
 8007b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b92:	633a      	str	r2, [r7, #48]	; 0x30
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e5      	bne.n	8007b72 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	330c      	adds	r3, #12
 8007bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc6:	61fa      	str	r2, [r7, #28]
 8007bc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	69b9      	ldr	r1, [r7, #24]
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e5      	bne.n	8007ba6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bda:	e002      	b.n	8007be2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bde:	f7ff ff83 	bl	8007ae8 <HAL_UART_TxCpltCallback>
}
 8007be2:	bf00      	nop
 8007be4:	3740      	adds	r7, #64	; 0x40
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff ff7f 	bl	8007afc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b09c      	sub	sp, #112	; 0x70
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d172      	bne.n	8007d08 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c24:	2200      	movs	r2, #0
 8007c26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c48:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e5      	bne.n	8007c28 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3314      	adds	r3, #20
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
 8007c72:	667b      	str	r3, [r7, #100]	; 0x64
 8007c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3314      	adds	r3, #20
 8007c7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c7c:	647a      	str	r2, [r7, #68]	; 0x44
 8007c7e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e5      	bne.n	8007c5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3314      	adds	r3, #20
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3314      	adds	r3, #20
 8007cae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cb0:	633a      	str	r2, [r7, #48]	; 0x30
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d119      	bne.n	8007d08 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	330c      	adds	r3, #12
 8007cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0310 	bic.w	r3, r3, #16
 8007cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cf4:	61fa      	str	r2, [r7, #28]
 8007cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	69b9      	ldr	r1, [r7, #24]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	617b      	str	r3, [r7, #20]
   return(result);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e5      	bne.n	8007cd4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d106      	bne.n	8007d1e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d14:	4619      	mov	r1, r3
 8007d16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d18:	f7ff ff0e 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d1c:	e002      	b.n	8007d24 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007d1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d20:	f7f8 fc58 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8007d24:	bf00      	nop
 8007d26:	3770      	adds	r7, #112	; 0x70
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d108      	bne.n	8007d54 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fef3 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d52:	e002      	b.n	8007d5a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff fedb 	bl	8007b10 <HAL_UART_RxHalfCpltCallback>
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7e:	2b80      	cmp	r3, #128	; 0x80
 8007d80:	bf0c      	ite	eq
 8007d82:	2301      	moveq	r3, #1
 8007d84:	2300      	movne	r3, #0
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b21      	cmp	r3, #33	; 0x21
 8007d94:	d108      	bne.n	8007da8 <UART_DMAError+0x46>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007da2:	68b8      	ldr	r0, [r7, #8]
 8007da4:	f000 f8c2 	bl	8007f2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b40      	cmp	r3, #64	; 0x40
 8007db4:	bf0c      	ite	eq
 8007db6:	2301      	moveq	r3, #1
 8007db8:	2300      	movne	r3, #0
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b22      	cmp	r3, #34	; 0x22
 8007dc8:	d108      	bne.n	8007ddc <UART_DMAError+0x7a>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007dd6:	68b8      	ldr	r0, [r7, #8]
 8007dd8:	f000 f8d0 	bl	8007f7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	f043 0210 	orr.w	r2, r3, #16
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007de8:	68b8      	ldr	r0, [r7, #8]
 8007dea:	f7ff fe9b 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b098      	sub	sp, #96	; 0x60
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2222      	movs	r2, #34	; 0x22
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	4a3e      	ldr	r2, [pc, #248]	; (8007f20 <UART_Start_Receive_DMA+0x128>)
 8007e26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	4a3d      	ldr	r2, [pc, #244]	; (8007f24 <UART_Start_Receive_DMA+0x12c>)
 8007e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	4a3c      	ldr	r2, [pc, #240]	; (8007f28 <UART_Start_Receive_DMA+0x130>)
 8007e36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e40:	f107 0308 	add.w	r3, r7, #8
 8007e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	f7fa f814 	bl	8001e84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	613b      	str	r3, [r7, #16]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	330c      	adds	r3, #12
 8007e80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	330c      	adds	r3, #12
 8007e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e5      	bne.n	8007e7a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3314      	adds	r3, #20
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	f043 0301 	orr.w	r3, r3, #1
 8007ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3314      	adds	r3, #20
 8007ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ece:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e5      	bne.n	8007eae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3314      	adds	r3, #20
 8007ee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3314      	adds	r3, #20
 8007f00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f02:	627a      	str	r2, [r7, #36]	; 0x24
 8007f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6a39      	ldr	r1, [r7, #32]
 8007f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e5      	bne.n	8007ee2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3760      	adds	r7, #96	; 0x60
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	08007c07 	.word	0x08007c07
 8007f24:	08007d2d 	.word	0x08007d2d
 8007f28:	08007d63 	.word	0x08007d63

08007f2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b089      	sub	sp, #36	; 0x24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	330c      	adds	r3, #12
 8007f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	61ba      	str	r2, [r7, #24]
 8007f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6979      	ldr	r1, [r7, #20]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	613b      	str	r3, [r7, #16]
   return(result);
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e5      	bne.n	8007f34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f70:	bf00      	nop
 8007f72:	3724      	adds	r7, #36	; 0x24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b095      	sub	sp, #84	; 0x54
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fa4:	643a      	str	r2, [r7, #64]	; 0x40
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e5      	bne.n	8007f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3314      	adds	r3, #20
 8007fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f023 0301 	bic.w	r3, r3, #1
 8007fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe0:	e841 2300 	strex	r3, r2, [r1]
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e5      	bne.n	8007fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d119      	bne.n	8008028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	60bb      	str	r3, [r7, #8]
   return(result);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f023 0310 	bic.w	r3, r3, #16
 800800a:	647b      	str	r3, [r7, #68]	; 0x44
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008014:	61ba      	str	r2, [r7, #24]
 8008016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6979      	ldr	r1, [r7, #20]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	613b      	str	r3, [r7, #16]
   return(result);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008036:	bf00      	nop
 8008038:	3754      	adds	r7, #84	; 0x54
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7ff fd61 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800806a:	b480      	push	{r7}
 800806c:	b085      	sub	sp, #20
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b21      	cmp	r3, #33	; 0x21
 800807c:	d13e      	bne.n	80080fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008086:	d114      	bne.n	80080b2 <UART_Transmit_IT+0x48>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d110      	bne.n	80080b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	1c9a      	adds	r2, r3, #2
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	621a      	str	r2, [r3, #32]
 80080b0:	e008      	b.n	80080c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	1c59      	adds	r1, r3, #1
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6211      	str	r1, [r2, #32]
 80080bc:	781a      	ldrb	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	4619      	mov	r1, r3
 80080d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10f      	bne.n	80080f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080fc:	2302      	movs	r3, #2
  }
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff fcdc 	bl	8007ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b08c      	sub	sp, #48	; 0x30
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b22      	cmp	r3, #34	; 0x22
 800814c:	f040 80ab 	bne.w	80082a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008158:	d117      	bne.n	800818a <UART_Receive_IT+0x50>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d113      	bne.n	800818a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	b29b      	uxth	r3, r3
 8008174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008178:	b29a      	uxth	r2, r3
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	1c9a      	adds	r2, r3, #2
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	629a      	str	r2, [r3, #40]	; 0x28
 8008188:	e026      	b.n	80081d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008190:	2300      	movs	r3, #0
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819c:	d007      	beq.n	80081ae <UART_Receive_IT+0x74>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <UART_Receive_IT+0x82>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	e008      	b.n	80081ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081dc:	b29b      	uxth	r3, r3
 80081de:	3b01      	subs	r3, #1
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4619      	mov	r1, r3
 80081e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d15a      	bne.n	80082a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68da      	ldr	r2, [r3, #12]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0220 	bic.w	r2, r2, #32
 80081fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800820a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695a      	ldr	r2, [r3, #20]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008228:	2b01      	cmp	r3, #1
 800822a:	d135      	bne.n	8008298 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	330c      	adds	r3, #12
 8008238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	613b      	str	r3, [r7, #16]
   return(result);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f023 0310 	bic.w	r3, r3, #16
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	330c      	adds	r3, #12
 8008250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008252:	623a      	str	r2, [r7, #32]
 8008254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	69f9      	ldr	r1, [r7, #28]
 8008258:	6a3a      	ldr	r2, [r7, #32]
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e5      	bne.n	8008232 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b10      	cmp	r3, #16
 8008272:	d10a      	bne.n	800828a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff fc51 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
 8008296:	e002      	b.n	800829e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7f8 f99b 	bl	80005d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e002      	b.n	80082a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e000      	b.n	80082a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082a6:	2302      	movs	r3, #2
  }
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3730      	adds	r7, #48	; 0x30
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082b4:	b0c0      	sub	sp, #256	; 0x100
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082cc:	68d9      	ldr	r1, [r3, #12]
 80082ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	ea40 0301 	orr.w	r3, r0, r1
 80082d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	431a      	orrs	r2, r3
 80082e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008308:	f021 010c 	bic.w	r1, r1, #12
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008316:	430b      	orrs	r3, r1
 8008318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800831a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832a:	6999      	ldr	r1, [r3, #24]
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	ea40 0301 	orr.w	r3, r0, r1
 8008336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	4b8f      	ldr	r3, [pc, #572]	; (800857c <UART_SetConfig+0x2cc>)
 8008340:	429a      	cmp	r2, r3
 8008342:	d005      	beq.n	8008350 <UART_SetConfig+0xa0>
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4b8d      	ldr	r3, [pc, #564]	; (8008580 <UART_SetConfig+0x2d0>)
 800834c:	429a      	cmp	r2, r3
 800834e:	d104      	bne.n	800835a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008350:	f7fe f968 	bl	8006624 <HAL_RCC_GetPCLK2Freq>
 8008354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008358:	e003      	b.n	8008362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800835a:	f7fe f94f 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 800835e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800836c:	f040 810c 	bne.w	8008588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008374:	2200      	movs	r2, #0
 8008376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800837a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800837e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	1891      	adds	r1, r2, r2
 8008388:	65b9      	str	r1, [r7, #88]	; 0x58
 800838a:	415b      	adcs	r3, r3
 800838c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800838e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008392:	4621      	mov	r1, r4
 8008394:	eb12 0801 	adds.w	r8, r2, r1
 8008398:	4629      	mov	r1, r5
 800839a:	eb43 0901 	adc.w	r9, r3, r1
 800839e:	f04f 0200 	mov.w	r2, #0
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083b2:	4690      	mov	r8, r2
 80083b4:	4699      	mov	r9, r3
 80083b6:	4623      	mov	r3, r4
 80083b8:	eb18 0303 	adds.w	r3, r8, r3
 80083bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083c0:	462b      	mov	r3, r5
 80083c2:	eb49 0303 	adc.w	r3, r9, r3
 80083c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083de:	460b      	mov	r3, r1
 80083e0:	18db      	adds	r3, r3, r3
 80083e2:	653b      	str	r3, [r7, #80]	; 0x50
 80083e4:	4613      	mov	r3, r2
 80083e6:	eb42 0303 	adc.w	r3, r2, r3
 80083ea:	657b      	str	r3, [r7, #84]	; 0x54
 80083ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80083f4:	f7f7 ff4c 	bl	8000290 <__aeabi_uldivmod>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4b61      	ldr	r3, [pc, #388]	; (8008584 <UART_SetConfig+0x2d4>)
 80083fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	011c      	lsls	r4, r3, #4
 8008406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800840a:	2200      	movs	r2, #0
 800840c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008418:	4642      	mov	r2, r8
 800841a:	464b      	mov	r3, r9
 800841c:	1891      	adds	r1, r2, r2
 800841e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008420:	415b      	adcs	r3, r3
 8008422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008428:	4641      	mov	r1, r8
 800842a:	eb12 0a01 	adds.w	sl, r2, r1
 800842e:	4649      	mov	r1, r9
 8008430:	eb43 0b01 	adc.w	fp, r3, r1
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	f04f 0300 	mov.w	r3, #0
 800843c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008448:	4692      	mov	sl, r2
 800844a:	469b      	mov	fp, r3
 800844c:	4643      	mov	r3, r8
 800844e:	eb1a 0303 	adds.w	r3, sl, r3
 8008452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008456:	464b      	mov	r3, r9
 8008458:	eb4b 0303 	adc.w	r3, fp, r3
 800845c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800846c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008474:	460b      	mov	r3, r1
 8008476:	18db      	adds	r3, r3, r3
 8008478:	643b      	str	r3, [r7, #64]	; 0x40
 800847a:	4613      	mov	r3, r2
 800847c:	eb42 0303 	adc.w	r3, r2, r3
 8008480:	647b      	str	r3, [r7, #68]	; 0x44
 8008482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800848a:	f7f7 ff01 	bl	8000290 <__aeabi_uldivmod>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4611      	mov	r1, r2
 8008494:	4b3b      	ldr	r3, [pc, #236]	; (8008584 <UART_SetConfig+0x2d4>)
 8008496:	fba3 2301 	umull	r2, r3, r3, r1
 800849a:	095b      	lsrs	r3, r3, #5
 800849c:	2264      	movs	r2, #100	; 0x64
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	1acb      	subs	r3, r1, r3
 80084a4:	00db      	lsls	r3, r3, #3
 80084a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084aa:	4b36      	ldr	r3, [pc, #216]	; (8008584 <UART_SetConfig+0x2d4>)
 80084ac:	fba3 2302 	umull	r2, r3, r3, r2
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084b8:	441c      	add	r4, r3
 80084ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084cc:	4642      	mov	r2, r8
 80084ce:	464b      	mov	r3, r9
 80084d0:	1891      	adds	r1, r2, r2
 80084d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80084d4:	415b      	adcs	r3, r3
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084dc:	4641      	mov	r1, r8
 80084de:	1851      	adds	r1, r2, r1
 80084e0:	6339      	str	r1, [r7, #48]	; 0x30
 80084e2:	4649      	mov	r1, r9
 80084e4:	414b      	adcs	r3, r1
 80084e6:	637b      	str	r3, [r7, #52]	; 0x34
 80084e8:	f04f 0200 	mov.w	r2, #0
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80084f4:	4659      	mov	r1, fp
 80084f6:	00cb      	lsls	r3, r1, #3
 80084f8:	4651      	mov	r1, sl
 80084fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084fe:	4651      	mov	r1, sl
 8008500:	00ca      	lsls	r2, r1, #3
 8008502:	4610      	mov	r0, r2
 8008504:	4619      	mov	r1, r3
 8008506:	4603      	mov	r3, r0
 8008508:	4642      	mov	r2, r8
 800850a:	189b      	adds	r3, r3, r2
 800850c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008510:	464b      	mov	r3, r9
 8008512:	460a      	mov	r2, r1
 8008514:	eb42 0303 	adc.w	r3, r2, r3
 8008518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800851c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800852c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008530:	460b      	mov	r3, r1
 8008532:	18db      	adds	r3, r3, r3
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28
 8008536:	4613      	mov	r3, r2
 8008538:	eb42 0303 	adc.w	r3, r2, r3
 800853c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800853e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008546:	f7f7 fea3 	bl	8000290 <__aeabi_uldivmod>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <UART_SetConfig+0x2d4>)
 8008550:	fba3 1302 	umull	r1, r3, r3, r2
 8008554:	095b      	lsrs	r3, r3, #5
 8008556:	2164      	movs	r1, #100	; 0x64
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	3332      	adds	r3, #50	; 0x32
 8008562:	4a08      	ldr	r2, [pc, #32]	; (8008584 <UART_SetConfig+0x2d4>)
 8008564:	fba2 2303 	umull	r2, r3, r2, r3
 8008568:	095b      	lsrs	r3, r3, #5
 800856a:	f003 0207 	and.w	r2, r3, #7
 800856e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4422      	add	r2, r4
 8008576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008578:	e105      	b.n	8008786 <UART_SetConfig+0x4d6>
 800857a:	bf00      	nop
 800857c:	40011000 	.word	0x40011000
 8008580:	40011400 	.word	0x40011400
 8008584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800858c:	2200      	movs	r2, #0
 800858e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800859a:	4642      	mov	r2, r8
 800859c:	464b      	mov	r3, r9
 800859e:	1891      	adds	r1, r2, r2
 80085a0:	6239      	str	r1, [r7, #32]
 80085a2:	415b      	adcs	r3, r3
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
 80085a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085aa:	4641      	mov	r1, r8
 80085ac:	1854      	adds	r4, r2, r1
 80085ae:	4649      	mov	r1, r9
 80085b0:	eb43 0501 	adc.w	r5, r3, r1
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	00eb      	lsls	r3, r5, #3
 80085be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085c2:	00e2      	lsls	r2, r4, #3
 80085c4:	4614      	mov	r4, r2
 80085c6:	461d      	mov	r5, r3
 80085c8:	4643      	mov	r3, r8
 80085ca:	18e3      	adds	r3, r4, r3
 80085cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085d0:	464b      	mov	r3, r9
 80085d2:	eb45 0303 	adc.w	r3, r5, r3
 80085d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085ea:	f04f 0200 	mov.w	r2, #0
 80085ee:	f04f 0300 	mov.w	r3, #0
 80085f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80085f6:	4629      	mov	r1, r5
 80085f8:	008b      	lsls	r3, r1, #2
 80085fa:	4621      	mov	r1, r4
 80085fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008600:	4621      	mov	r1, r4
 8008602:	008a      	lsls	r2, r1, #2
 8008604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008608:	f7f7 fe42 	bl	8000290 <__aeabi_uldivmod>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4b60      	ldr	r3, [pc, #384]	; (8008794 <UART_SetConfig+0x4e4>)
 8008612:	fba3 2302 	umull	r2, r3, r3, r2
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	011c      	lsls	r4, r3, #4
 800861a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800861e:	2200      	movs	r2, #0
 8008620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800862c:	4642      	mov	r2, r8
 800862e:	464b      	mov	r3, r9
 8008630:	1891      	adds	r1, r2, r2
 8008632:	61b9      	str	r1, [r7, #24]
 8008634:	415b      	adcs	r3, r3
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800863c:	4641      	mov	r1, r8
 800863e:	1851      	adds	r1, r2, r1
 8008640:	6139      	str	r1, [r7, #16]
 8008642:	4649      	mov	r1, r9
 8008644:	414b      	adcs	r3, r1
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	f04f 0300 	mov.w	r3, #0
 8008650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008654:	4659      	mov	r1, fp
 8008656:	00cb      	lsls	r3, r1, #3
 8008658:	4651      	mov	r1, sl
 800865a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800865e:	4651      	mov	r1, sl
 8008660:	00ca      	lsls	r2, r1, #3
 8008662:	4610      	mov	r0, r2
 8008664:	4619      	mov	r1, r3
 8008666:	4603      	mov	r3, r0
 8008668:	4642      	mov	r2, r8
 800866a:	189b      	adds	r3, r3, r2
 800866c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008670:	464b      	mov	r3, r9
 8008672:	460a      	mov	r2, r1
 8008674:	eb42 0303 	adc.w	r3, r2, r3
 8008678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	67bb      	str	r3, [r7, #120]	; 0x78
 8008686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008694:	4649      	mov	r1, r9
 8008696:	008b      	lsls	r3, r1, #2
 8008698:	4641      	mov	r1, r8
 800869a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800869e:	4641      	mov	r1, r8
 80086a0:	008a      	lsls	r2, r1, #2
 80086a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086a6:	f7f7 fdf3 	bl	8000290 <__aeabi_uldivmod>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4b39      	ldr	r3, [pc, #228]	; (8008794 <UART_SetConfig+0x4e4>)
 80086b0:	fba3 1302 	umull	r1, r3, r3, r2
 80086b4:	095b      	lsrs	r3, r3, #5
 80086b6:	2164      	movs	r1, #100	; 0x64
 80086b8:	fb01 f303 	mul.w	r3, r1, r3
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	3332      	adds	r3, #50	; 0x32
 80086c2:	4a34      	ldr	r2, [pc, #208]	; (8008794 <UART_SetConfig+0x4e4>)
 80086c4:	fba2 2303 	umull	r2, r3, r2, r3
 80086c8:	095b      	lsrs	r3, r3, #5
 80086ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086ce:	441c      	add	r4, r3
 80086d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086d4:	2200      	movs	r2, #0
 80086d6:	673b      	str	r3, [r7, #112]	; 0x70
 80086d8:	677a      	str	r2, [r7, #116]	; 0x74
 80086da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086de:	4642      	mov	r2, r8
 80086e0:	464b      	mov	r3, r9
 80086e2:	1891      	adds	r1, r2, r2
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	415b      	adcs	r3, r3
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086ee:	4641      	mov	r1, r8
 80086f0:	1851      	adds	r1, r2, r1
 80086f2:	6039      	str	r1, [r7, #0]
 80086f4:	4649      	mov	r1, r9
 80086f6:	414b      	adcs	r3, r1
 80086f8:	607b      	str	r3, [r7, #4]
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	f04f 0300 	mov.w	r3, #0
 8008702:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008706:	4659      	mov	r1, fp
 8008708:	00cb      	lsls	r3, r1, #3
 800870a:	4651      	mov	r1, sl
 800870c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008710:	4651      	mov	r1, sl
 8008712:	00ca      	lsls	r2, r1, #3
 8008714:	4610      	mov	r0, r2
 8008716:	4619      	mov	r1, r3
 8008718:	4603      	mov	r3, r0
 800871a:	4642      	mov	r2, r8
 800871c:	189b      	adds	r3, r3, r2
 800871e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008720:	464b      	mov	r3, r9
 8008722:	460a      	mov	r2, r1
 8008724:	eb42 0303 	adc.w	r3, r2, r3
 8008728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800872a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	663b      	str	r3, [r7, #96]	; 0x60
 8008734:	667a      	str	r2, [r7, #100]	; 0x64
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008742:	4649      	mov	r1, r9
 8008744:	008b      	lsls	r3, r1, #2
 8008746:	4641      	mov	r1, r8
 8008748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800874c:	4641      	mov	r1, r8
 800874e:	008a      	lsls	r2, r1, #2
 8008750:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008754:	f7f7 fd9c 	bl	8000290 <__aeabi_uldivmod>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <UART_SetConfig+0x4e4>)
 800875e:	fba3 1302 	umull	r1, r3, r3, r2
 8008762:	095b      	lsrs	r3, r3, #5
 8008764:	2164      	movs	r1, #100	; 0x64
 8008766:	fb01 f303 	mul.w	r3, r1, r3
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	3332      	adds	r3, #50	; 0x32
 8008770:	4a08      	ldr	r2, [pc, #32]	; (8008794 <UART_SetConfig+0x4e4>)
 8008772:	fba2 2303 	umull	r2, r3, r2, r3
 8008776:	095b      	lsrs	r3, r3, #5
 8008778:	f003 020f 	and.w	r2, r3, #15
 800877c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4422      	add	r2, r4
 8008784:	609a      	str	r2, [r3, #8]
}
 8008786:	bf00      	nop
 8008788:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800878c:	46bd      	mov	sp, r7
 800878e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008792:	bf00      	nop
 8008794:	51eb851f 	.word	0x51eb851f

08008798 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800879e:	4b8d      	ldr	r3, [pc, #564]	; (80089d4 <MX_LWIP_Init+0x23c>)
 80087a0:	22c0      	movs	r2, #192	; 0xc0
 80087a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80087a4:	4b8b      	ldr	r3, [pc, #556]	; (80089d4 <MX_LWIP_Init+0x23c>)
 80087a6:	22a8      	movs	r2, #168	; 0xa8
 80087a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80087aa:	4b8a      	ldr	r3, [pc, #552]	; (80089d4 <MX_LWIP_Init+0x23c>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 132;
 80087b0:	4b88      	ldr	r3, [pc, #544]	; (80089d4 <MX_LWIP_Init+0x23c>)
 80087b2:	2284      	movs	r2, #132	; 0x84
 80087b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80087b6:	4b88      	ldr	r3, [pc, #544]	; (80089d8 <MX_LWIP_Init+0x240>)
 80087b8:	22ff      	movs	r2, #255	; 0xff
 80087ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80087bc:	4b86      	ldr	r3, [pc, #536]	; (80089d8 <MX_LWIP_Init+0x240>)
 80087be:	22ff      	movs	r2, #255	; 0xff
 80087c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80087c2:	4b85      	ldr	r3, [pc, #532]	; (80089d8 <MX_LWIP_Init+0x240>)
 80087c4:	22ff      	movs	r2, #255	; 0xff
 80087c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80087c8:	4b83      	ldr	r3, [pc, #524]	; (80089d8 <MX_LWIP_Init+0x240>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80087ce:	4b83      	ldr	r3, [pc, #524]	; (80089dc <MX_LWIP_Init+0x244>)
 80087d0:	22c0      	movs	r2, #192	; 0xc0
 80087d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80087d4:	4b81      	ldr	r3, [pc, #516]	; (80089dc <MX_LWIP_Init+0x244>)
 80087d6:	22a8      	movs	r2, #168	; 0xa8
 80087d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80087da:	4b80      	ldr	r3, [pc, #512]	; (80089dc <MX_LWIP_Init+0x244>)
 80087dc:	2200      	movs	r2, #0
 80087de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80087e0:	4b7e      	ldr	r3, [pc, #504]	; (80089dc <MX_LWIP_Init+0x244>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80087e6:	f000 fcdf 	bl	80091a8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80087ea:	4b7a      	ldr	r3, [pc, #488]	; (80089d4 <MX_LWIP_Init+0x23c>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	061a      	lsls	r2, r3, #24
 80087f0:	4b78      	ldr	r3, [pc, #480]	; (80089d4 <MX_LWIP_Init+0x23c>)
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	041b      	lsls	r3, r3, #16
 80087f6:	431a      	orrs	r2, r3
 80087f8:	4b76      	ldr	r3, [pc, #472]	; (80089d4 <MX_LWIP_Init+0x23c>)
 80087fa:	789b      	ldrb	r3, [r3, #2]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	4313      	orrs	r3, r2
 8008800:	4a74      	ldr	r2, [pc, #464]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008802:	78d2      	ldrb	r2, [r2, #3]
 8008804:	4313      	orrs	r3, r2
 8008806:	061a      	lsls	r2, r3, #24
 8008808:	4b72      	ldr	r3, [pc, #456]	; (80089d4 <MX_LWIP_Init+0x23c>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	0619      	lsls	r1, r3, #24
 800880e:	4b71      	ldr	r3, [pc, #452]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	041b      	lsls	r3, r3, #16
 8008814:	4319      	orrs	r1, r3
 8008816:	4b6f      	ldr	r3, [pc, #444]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008818:	789b      	ldrb	r3, [r3, #2]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	430b      	orrs	r3, r1
 800881e:	496d      	ldr	r1, [pc, #436]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008820:	78c9      	ldrb	r1, [r1, #3]
 8008822:	430b      	orrs	r3, r1
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800882a:	431a      	orrs	r2, r3
 800882c:	4b69      	ldr	r3, [pc, #420]	; (80089d4 <MX_LWIP_Init+0x23c>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	0619      	lsls	r1, r3, #24
 8008832:	4b68      	ldr	r3, [pc, #416]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	041b      	lsls	r3, r3, #16
 8008838:	4319      	orrs	r1, r3
 800883a:	4b66      	ldr	r3, [pc, #408]	; (80089d4 <MX_LWIP_Init+0x23c>)
 800883c:	789b      	ldrb	r3, [r3, #2]
 800883e:	021b      	lsls	r3, r3, #8
 8008840:	430b      	orrs	r3, r1
 8008842:	4964      	ldr	r1, [pc, #400]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008844:	78c9      	ldrb	r1, [r1, #3]
 8008846:	430b      	orrs	r3, r1
 8008848:	0a1b      	lsrs	r3, r3, #8
 800884a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800884e:	431a      	orrs	r2, r3
 8008850:	4b60      	ldr	r3, [pc, #384]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	0619      	lsls	r1, r3, #24
 8008856:	4b5f      	ldr	r3, [pc, #380]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	041b      	lsls	r3, r3, #16
 800885c:	4319      	orrs	r1, r3
 800885e:	4b5d      	ldr	r3, [pc, #372]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008860:	789b      	ldrb	r3, [r3, #2]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	430b      	orrs	r3, r1
 8008866:	495b      	ldr	r1, [pc, #364]	; (80089d4 <MX_LWIP_Init+0x23c>)
 8008868:	78c9      	ldrb	r1, [r1, #3]
 800886a:	430b      	orrs	r3, r1
 800886c:	0e1b      	lsrs	r3, r3, #24
 800886e:	4313      	orrs	r3, r2
 8008870:	4a5b      	ldr	r2, [pc, #364]	; (80089e0 <MX_LWIP_Init+0x248>)
 8008872:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008874:	4b58      	ldr	r3, [pc, #352]	; (80089d8 <MX_LWIP_Init+0x240>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	061a      	lsls	r2, r3, #24
 800887a:	4b57      	ldr	r3, [pc, #348]	; (80089d8 <MX_LWIP_Init+0x240>)
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	041b      	lsls	r3, r3, #16
 8008880:	431a      	orrs	r2, r3
 8008882:	4b55      	ldr	r3, [pc, #340]	; (80089d8 <MX_LWIP_Init+0x240>)
 8008884:	789b      	ldrb	r3, [r3, #2]
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	4313      	orrs	r3, r2
 800888a:	4a53      	ldr	r2, [pc, #332]	; (80089d8 <MX_LWIP_Init+0x240>)
 800888c:	78d2      	ldrb	r2, [r2, #3]
 800888e:	4313      	orrs	r3, r2
 8008890:	061a      	lsls	r2, r3, #24
 8008892:	4b51      	ldr	r3, [pc, #324]	; (80089d8 <MX_LWIP_Init+0x240>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	0619      	lsls	r1, r3, #24
 8008898:	4b4f      	ldr	r3, [pc, #316]	; (80089d8 <MX_LWIP_Init+0x240>)
 800889a:	785b      	ldrb	r3, [r3, #1]
 800889c:	041b      	lsls	r3, r3, #16
 800889e:	4319      	orrs	r1, r3
 80088a0:	4b4d      	ldr	r3, [pc, #308]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088a2:	789b      	ldrb	r3, [r3, #2]
 80088a4:	021b      	lsls	r3, r3, #8
 80088a6:	430b      	orrs	r3, r1
 80088a8:	494b      	ldr	r1, [pc, #300]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088aa:	78c9      	ldrb	r1, [r1, #3]
 80088ac:	430b      	orrs	r3, r1
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088b4:	431a      	orrs	r2, r3
 80088b6:	4b48      	ldr	r3, [pc, #288]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	0619      	lsls	r1, r3, #24
 80088bc:	4b46      	ldr	r3, [pc, #280]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	041b      	lsls	r3, r3, #16
 80088c2:	4319      	orrs	r1, r3
 80088c4:	4b44      	ldr	r3, [pc, #272]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088c6:	789b      	ldrb	r3, [r3, #2]
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	430b      	orrs	r3, r1
 80088cc:	4942      	ldr	r1, [pc, #264]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088ce:	78c9      	ldrb	r1, [r1, #3]
 80088d0:	430b      	orrs	r3, r1
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80088d8:	431a      	orrs	r2, r3
 80088da:	4b3f      	ldr	r3, [pc, #252]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	0619      	lsls	r1, r3, #24
 80088e0:	4b3d      	ldr	r3, [pc, #244]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088e2:	785b      	ldrb	r3, [r3, #1]
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	4319      	orrs	r1, r3
 80088e8:	4b3b      	ldr	r3, [pc, #236]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088ea:	789b      	ldrb	r3, [r3, #2]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	430b      	orrs	r3, r1
 80088f0:	4939      	ldr	r1, [pc, #228]	; (80089d8 <MX_LWIP_Init+0x240>)
 80088f2:	78c9      	ldrb	r1, [r1, #3]
 80088f4:	430b      	orrs	r3, r1
 80088f6:	0e1b      	lsrs	r3, r3, #24
 80088f8:	4313      	orrs	r3, r2
 80088fa:	4a3a      	ldr	r2, [pc, #232]	; (80089e4 <MX_LWIP_Init+0x24c>)
 80088fc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80088fe:	4b37      	ldr	r3, [pc, #220]	; (80089dc <MX_LWIP_Init+0x244>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	061a      	lsls	r2, r3, #24
 8008904:	4b35      	ldr	r3, [pc, #212]	; (80089dc <MX_LWIP_Init+0x244>)
 8008906:	785b      	ldrb	r3, [r3, #1]
 8008908:	041b      	lsls	r3, r3, #16
 800890a:	431a      	orrs	r2, r3
 800890c:	4b33      	ldr	r3, [pc, #204]	; (80089dc <MX_LWIP_Init+0x244>)
 800890e:	789b      	ldrb	r3, [r3, #2]
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	4313      	orrs	r3, r2
 8008914:	4a31      	ldr	r2, [pc, #196]	; (80089dc <MX_LWIP_Init+0x244>)
 8008916:	78d2      	ldrb	r2, [r2, #3]
 8008918:	4313      	orrs	r3, r2
 800891a:	061a      	lsls	r2, r3, #24
 800891c:	4b2f      	ldr	r3, [pc, #188]	; (80089dc <MX_LWIP_Init+0x244>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	0619      	lsls	r1, r3, #24
 8008922:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <MX_LWIP_Init+0x244>)
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	041b      	lsls	r3, r3, #16
 8008928:	4319      	orrs	r1, r3
 800892a:	4b2c      	ldr	r3, [pc, #176]	; (80089dc <MX_LWIP_Init+0x244>)
 800892c:	789b      	ldrb	r3, [r3, #2]
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	430b      	orrs	r3, r1
 8008932:	492a      	ldr	r1, [pc, #168]	; (80089dc <MX_LWIP_Init+0x244>)
 8008934:	78c9      	ldrb	r1, [r1, #3]
 8008936:	430b      	orrs	r3, r1
 8008938:	021b      	lsls	r3, r3, #8
 800893a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800893e:	431a      	orrs	r2, r3
 8008940:	4b26      	ldr	r3, [pc, #152]	; (80089dc <MX_LWIP_Init+0x244>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	0619      	lsls	r1, r3, #24
 8008946:	4b25      	ldr	r3, [pc, #148]	; (80089dc <MX_LWIP_Init+0x244>)
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	041b      	lsls	r3, r3, #16
 800894c:	4319      	orrs	r1, r3
 800894e:	4b23      	ldr	r3, [pc, #140]	; (80089dc <MX_LWIP_Init+0x244>)
 8008950:	789b      	ldrb	r3, [r3, #2]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	430b      	orrs	r3, r1
 8008956:	4921      	ldr	r1, [pc, #132]	; (80089dc <MX_LWIP_Init+0x244>)
 8008958:	78c9      	ldrb	r1, [r1, #3]
 800895a:	430b      	orrs	r3, r1
 800895c:	0a1b      	lsrs	r3, r3, #8
 800895e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008962:	431a      	orrs	r2, r3
 8008964:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <MX_LWIP_Init+0x244>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	0619      	lsls	r1, r3, #24
 800896a:	4b1c      	ldr	r3, [pc, #112]	; (80089dc <MX_LWIP_Init+0x244>)
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	041b      	lsls	r3, r3, #16
 8008970:	4319      	orrs	r1, r3
 8008972:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <MX_LWIP_Init+0x244>)
 8008974:	789b      	ldrb	r3, [r3, #2]
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	430b      	orrs	r3, r1
 800897a:	4918      	ldr	r1, [pc, #96]	; (80089dc <MX_LWIP_Init+0x244>)
 800897c:	78c9      	ldrb	r1, [r1, #3]
 800897e:	430b      	orrs	r3, r1
 8008980:	0e1b      	lsrs	r3, r3, #24
 8008982:	4313      	orrs	r3, r2
 8008984:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <MX_LWIP_Init+0x250>)
 8008986:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008988:	4b18      	ldr	r3, [pc, #96]	; (80089ec <MX_LWIP_Init+0x254>)
 800898a:	9302      	str	r3, [sp, #8]
 800898c:	4b18      	ldr	r3, [pc, #96]	; (80089f0 <MX_LWIP_Init+0x258>)
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	2300      	movs	r3, #0
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <MX_LWIP_Init+0x250>)
 8008996:	4a13      	ldr	r2, [pc, #76]	; (80089e4 <MX_LWIP_Init+0x24c>)
 8008998:	4911      	ldr	r1, [pc, #68]	; (80089e0 <MX_LWIP_Init+0x248>)
 800899a:	4816      	ldr	r0, [pc, #88]	; (80089f4 <MX_LWIP_Init+0x25c>)
 800899c:	f001 f8aa 	bl	8009af4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80089a0:	4814      	ldr	r0, [pc, #80]	; (80089f4 <MX_LWIP_Init+0x25c>)
 80089a2:	f001 fa59 	bl	8009e58 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80089a6:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <MX_LWIP_Init+0x25c>)
 80089a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089ac:	089b      	lsrs	r3, r3, #2
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80089b8:	480e      	ldr	r0, [pc, #56]	; (80089f4 <MX_LWIP_Init+0x25c>)
 80089ba:	f001 fa5d 	bl	8009e78 <netif_set_up>
 80089be:	e002      	b.n	80089c6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80089c0:	480c      	ldr	r0, [pc, #48]	; (80089f4 <MX_LWIP_Init+0x25c>)
 80089c2:	f001 fac5 	bl	8009f50 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80089c6:	490c      	ldr	r1, [pc, #48]	; (80089f8 <MX_LWIP_Init+0x260>)
 80089c8:	480a      	ldr	r0, [pc, #40]	; (80089f4 <MX_LWIP_Init+0x25c>)
 80089ca:	f001 faf3 	bl	8009fb4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80089ce:	bf00      	nop
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000690 	.word	0x20000690
 80089d8:	20000694 	.word	0x20000694
 80089dc:	20000698 	.word	0x20000698
 80089e0:	20000684 	.word	0x20000684
 80089e4:	20000688 	.word	0x20000688
 80089e8:	2000068c 	.word	0x2000068c
 80089ec:	08013129 	.word	0x08013129
 80089f0:	08008fd5 	.word	0x08008fd5
 80089f4:	20000650 	.word	0x20000650
 80089f8:	08009041 	.word	0x08009041

080089fc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08e      	sub	sp, #56	; 0x38
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	605a      	str	r2, [r3, #4]
 8008a0e:	609a      	str	r2, [r3, #8]
 8008a10:	60da      	str	r2, [r3, #12]
 8008a12:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a59      	ldr	r2, [pc, #356]	; (8008b80 <HAL_ETH_MspInit+0x184>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	f040 80ac 	bne.w	8008b78 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008a20:	2300      	movs	r3, #0
 8008a22:	623b      	str	r3, [r7, #32]
 8008a24:	4b57      	ldr	r3, [pc, #348]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a28:	4a56      	ldr	r2, [pc, #344]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8008a30:	4b54      	ldr	r3, [pc, #336]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a38:	623b      	str	r3, [r7, #32]
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	4b50      	ldr	r3, [pc, #320]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	4a4f      	ldr	r2, [pc, #316]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a4c:	4b4d      	ldr	r3, [pc, #308]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a54:	61fb      	str	r3, [r7, #28]
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	4b49      	ldr	r3, [pc, #292]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a60:	4a48      	ldr	r2, [pc, #288]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a66:	6313      	str	r3, [r2, #48]	; 0x30
 8008a68:	4b46      	ldr	r3, [pc, #280]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a70:	61bb      	str	r3, [r7, #24]
 8008a72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7c:	4a41      	ldr	r2, [pc, #260]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a7e:	f043 0304 	orr.w	r3, r3, #4
 8008a82:	6313      	str	r3, [r2, #48]	; 0x30
 8008a84:	4b3f      	ldr	r3, [pc, #252]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	617b      	str	r3, [r7, #20]
 8008a8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a90:	2300      	movs	r3, #0
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	4b3b      	ldr	r3, [pc, #236]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	4a3a      	ldr	r2, [pc, #232]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8008aa0:	4b38      	ldr	r3, [pc, #224]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	613b      	str	r3, [r7, #16]
 8008aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	4b34      	ldr	r3, [pc, #208]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	4a33      	ldr	r2, [pc, #204]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008ab6:	f043 0302 	orr.w	r3, r3, #2
 8008aba:	6313      	str	r3, [r2, #48]	; 0x30
 8008abc:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60bb      	str	r3, [r7, #8]
 8008acc:	4b2d      	ldr	r3, [pc, #180]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad0:	4a2c      	ldr	r2, [pc, #176]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8008ad8:	4b2a      	ldr	r3, [pc, #168]	; (8008b84 <HAL_ETH_MspInit+0x188>)
 8008ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae0:	60bb      	str	r3, [r7, #8]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008ae4:	2332      	movs	r3, #50	; 0x32
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008af0:	2303      	movs	r3, #3
 8008af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008af4:	230b      	movs	r3, #11
 8008af6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008afc:	4619      	mov	r1, r3
 8008afe:	4822      	ldr	r0, [pc, #136]	; (8008b88 <HAL_ETH_MspInit+0x18c>)
 8008b00:	f7fa fec2 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008b04:	2386      	movs	r3, #134	; 0x86
 8008b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b10:	2303      	movs	r3, #3
 8008b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b14:	230b      	movs	r3, #11
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	481b      	ldr	r0, [pc, #108]	; (8008b8c <HAL_ETH_MspInit+0x190>)
 8008b20:	f7fa feb2 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8008b24:	f242 0301 	movw	r3, #8193	; 0x2001
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b32:	2303      	movs	r3, #3
 8008b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b36:	230b      	movs	r3, #11
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4813      	ldr	r0, [pc, #76]	; (8008b90 <HAL_ETH_MspInit+0x194>)
 8008b42:	f7fa fea1 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008b46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b50:	2300      	movs	r3, #0
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b54:	2303      	movs	r3, #3
 8008b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b58:	230b      	movs	r3, #11
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b60:	4619      	mov	r1, r3
 8008b62:	480c      	ldr	r0, [pc, #48]	; (8008b94 <HAL_ETH_MspInit+0x198>)
 8008b64:	f7fa fe90 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	203d      	movs	r0, #61	; 0x3d
 8008b6e:	f7f9 f8a4 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008b72:	203d      	movs	r0, #61	; 0x3d
 8008b74:	f7f9 f8bd 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008b78:	bf00      	nop
 8008b7a:	3738      	adds	r7, #56	; 0x38
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	40028000 	.word	0x40028000
 8008b84:	40023800 	.word	0x40023800
 8008b88:	40020800 	.word	0x40020800
 8008b8c:	40020000 	.word	0x40020000
 8008b90:	40020400 	.word	0x40020400
 8008b94:	40021800 	.word	0x40021800

08008b98 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008ba4:	4b4d      	ldr	r3, [pc, #308]	; (8008cdc <low_level_init+0x144>)
 8008ba6:	4a4e      	ldr	r2, [pc, #312]	; (8008ce0 <low_level_init+0x148>)
 8008ba8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008baa:	4b4c      	ldr	r3, [pc, #304]	; (8008cdc <low_level_init+0x144>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008bb0:	4b4a      	ldr	r3, [pc, #296]	; (8008cdc <low_level_init+0x144>)
 8008bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008bb6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008bb8:	4b48      	ldr	r3, [pc, #288]	; (8008cdc <low_level_init+0x144>)
 8008bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bbe:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008bc0:	4b46      	ldr	r3, [pc, #280]	; (8008cdc <low_level_init+0x144>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008bca:	2380      	movs	r3, #128	; 0x80
 8008bcc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008bce:	23e1      	movs	r3, #225	; 0xe1
 8008bd0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008bde:	4a3f      	ldr	r2, [pc, #252]	; (8008cdc <low_level_init+0x144>)
 8008be0:	f107 0308 	add.w	r3, r7, #8
 8008be4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008be6:	4b3d      	ldr	r3, [pc, #244]	; (8008cdc <low_level_init+0x144>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008bec:	4b3b      	ldr	r3, [pc, #236]	; (8008cdc <low_level_init+0x144>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008bf2:	4b3a      	ldr	r3, [pc, #232]	; (8008cdc <low_level_init+0x144>)
 8008bf4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008bf8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008bfa:	4838      	ldr	r0, [pc, #224]	; (8008cdc <low_level_init+0x144>)
 8008bfc:	f7f9 fcb0 	bl	8002560 <HAL_ETH_Init>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d108      	bne.n	8008c1c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c10:	f043 0304 	orr.w	r3, r3, #4
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	4a31      	ldr	r2, [pc, #196]	; (8008ce4 <low_level_init+0x14c>)
 8008c20:	4931      	ldr	r1, [pc, #196]	; (8008ce8 <low_level_init+0x150>)
 8008c22:	482e      	ldr	r0, [pc, #184]	; (8008cdc <low_level_init+0x144>)
 8008c24:	f7f9 fe36 	bl	8002894 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008c28:	2304      	movs	r3, #4
 8008c2a:	4a30      	ldr	r2, [pc, #192]	; (8008cec <low_level_init+0x154>)
 8008c2c:	4930      	ldr	r1, [pc, #192]	; (8008cf0 <low_level_init+0x158>)
 8008c2e:	482b      	ldr	r0, [pc, #172]	; (8008cdc <low_level_init+0x144>)
 8008c30:	f7f9 fe98 	bl	8002964 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2206      	movs	r2, #6
 8008c38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008c3c:	4b27      	ldr	r3, [pc, #156]	; (8008cdc <low_level_init+0x144>)
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008c48:	4b24      	ldr	r3, [pc, #144]	; (8008cdc <low_level_init+0x144>)
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	785a      	ldrb	r2, [r3, #1]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008c54:	4b21      	ldr	r3, [pc, #132]	; (8008cdc <low_level_init+0x144>)
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	789a      	ldrb	r2, [r3, #2]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008c60:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <low_level_init+0x144>)
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	78da      	ldrb	r2, [r3, #3]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008c6c:	4b1b      	ldr	r3, [pc, #108]	; (8008cdc <low_level_init+0x144>)
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	791a      	ldrb	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008c78:	4b18      	ldr	r3, [pc, #96]	; (8008cdc <low_level_init+0x144>)
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	795a      	ldrb	r2, [r3, #5]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008c8a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c92:	f043 030a 	orr.w	r3, r3, #10
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008c9e:	480f      	ldr	r0, [pc, #60]	; (8008cdc <low_level_init+0x144>)
 8008ca0:	f7fa f98a 	bl	8002fb8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008ca4:	f107 0310 	add.w	r3, r7, #16
 8008ca8:	461a      	mov	r2, r3
 8008caa:	211d      	movs	r1, #29
 8008cac:	480b      	ldr	r0, [pc, #44]	; (8008cdc <low_level_init+0x144>)
 8008cae:	f7fa f8b5 	bl	8002e1c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f043 030b 	orr.w	r3, r3, #11
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	211d      	movs	r1, #29
 8008cc0:	4806      	ldr	r0, [pc, #24]	; (8008cdc <low_level_init+0x144>)
 8008cc2:	f7fa f913 	bl	8002eec <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008cc6:	f107 0310 	add.w	r3, r7, #16
 8008cca:	461a      	mov	r2, r3
 8008ccc:	211d      	movs	r1, #29
 8008cce:	4803      	ldr	r0, [pc, #12]	; (8008cdc <low_level_init+0x144>)
 8008cd0:	f7fa f8a4 	bl	8002e1c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008cd4:	bf00      	nop
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	2000373c 	.word	0x2000373c
 8008ce0:	40028000 	.word	0x40028000
 8008ce4:	20001f6c 	.word	0x20001f6c
 8008ce8:	2000071c 	.word	0x2000071c
 8008cec:	2000079c 	.word	0x2000079c
 8008cf0:	2000069c 	.word	0x2000069c

08008cf4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08a      	sub	sp, #40	; 0x28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008cfe:	4b4b      	ldr	r3, [pc, #300]	; (8008e2c <low_level_output+0x138>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008d16:	4b45      	ldr	r3, [pc, #276]	; (8008e2c <low_level_output+0x138>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	623b      	str	r3, [r7, #32]
 8008d24:	e05a      	b.n	8008ddc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	da03      	bge.n	8008d36 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008d2e:	23f8      	movs	r3, #248	; 0xf8
 8008d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008d34:	e05c      	b.n	8008df0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008d36:	6a3b      	ldr	r3, [r7, #32]
 8008d38:	895b      	ldrh	r3, [r3, #10]
 8008d3a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008d40:	e02f      	b.n	8008da2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	18d0      	adds	r0, r2, r3
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	18d1      	adds	r1, r2, r3
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008d56:	3304      	adds	r3, #4
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f00a faef 	bl	801333c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	da03      	bge.n	8008d74 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008d6c:	23f8      	movs	r3, #248	; 0xf8
 8008d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008d72:	e03d      	b.n	8008df0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008d84:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008d90:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008d9c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	4413      	add	r3, r2
 8008da8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d8c8      	bhi.n	8008d42 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	18d0      	adds	r0, r2, r3
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f00a fabb 	bl	801333c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	623b      	str	r3, [r7, #32]
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1a1      	bne.n	8008d26 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008de2:	6979      	ldr	r1, [r7, #20]
 8008de4:	4811      	ldr	r0, [pc, #68]	; (8008e2c <low_level_output+0x138>)
 8008de6:	f7f9 fe29 	bl	8002a3c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008df0:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <low_level_output+0x138>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00d      	beq.n	8008e1e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <low_level_output+0x138>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	2320      	movs	r3, #32
 8008e0e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008e10:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <low_level_output+0x138>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e18:	461a      	mov	r2, r3
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8008e1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3728      	adds	r7, #40	; 0x28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	2000373c 	.word	0x2000373c

08008e30 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08c      	sub	sp, #48	; 0x30
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008e54:	484e      	ldr	r0, [pc, #312]	; (8008f90 <low_level_input+0x160>)
 8008e56:	f7f9 fedb 	bl	8002c10 <HAL_ETH_GetReceivedFrame>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <low_level_input+0x34>

    return NULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	e091      	b.n	8008f88 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008e64:	4b4a      	ldr	r3, [pc, #296]	; (8008f90 <low_level_input+0x160>)
 8008e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e68:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008e6a:	4b49      	ldr	r3, [pc, #292]	; (8008f90 <low_level_input+0x160>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008e70:	89fb      	ldrh	r3, [r7, #14]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008e76:	89fb      	ldrh	r3, [r7, #14]
 8008e78:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f001 f934 	bl	800a0ec <pbuf_alloc>
 8008e84:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d04b      	beq.n	8008f24 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008e8c:	4b40      	ldr	r3, [pc, #256]	; (8008f90 <low_level_input+0x160>)
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e9a:	e040      	b.n	8008f1e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	895b      	ldrh	r3, [r3, #10]
 8008ea0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008ea6:	e021      	b.n	8008eec <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	18d0      	adds	r0, r2, r3
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	18d1      	adds	r1, r2, r3
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f00a fa3c 	bl	801333c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008eda:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008ee6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d8d6      	bhi.n	8008ea8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	18d0      	adds	r0, r2, r3
 8008f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	4413      	add	r3, r2
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	f00a fa16 	bl	801333c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008f10:	69fa      	ldr	r2, [r7, #28]
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	4413      	add	r3, r2
 8008f16:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1bb      	bne.n	8008e9c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008f24:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <low_level_input+0x160>)
 8008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f28:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	e00b      	b.n	8008f48 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3301      	adds	r3, #1
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <low_level_input+0x160>)
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d3ee      	bcc.n	8008f30 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008f52:	4b0f      	ldr	r3, [pc, #60]	; (8008f90 <low_level_input+0x160>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008f58:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <low_level_input+0x160>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00d      	beq.n	8008f86 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008f6a:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <low_level_input+0x160>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f72:	461a      	mov	r2, r3
 8008f74:	2380      	movs	r3, #128	; 0x80
 8008f76:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008f78:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <low_level_input+0x160>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f80:	461a      	mov	r2, r3
 8008f82:	2300      	movs	r3, #0
 8008f84:	6093      	str	r3, [r2, #8]
  }
  return p;
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3730      	adds	r7, #48	; 0x30
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	2000373c 	.word	0x2000373c

08008f94 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff ff47 	bl	8008e30 <low_level_input>
 8008fa2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d010      	beq.n	8008fcc <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	4798      	blx	r3
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008fb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d006      	beq.n	8008fce <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f001 fb77 	bl	800a6b4 <pbuf_free>
    p = NULL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	e000      	b.n	8008fce <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008fcc:	bf00      	nop
  }
}
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <ethernetif_init+0x1c>
 8008fe2:	4b0e      	ldr	r3, [pc, #56]	; (800901c <ethernetif_init+0x48>)
 8008fe4:	f240 2219 	movw	r2, #537	; 0x219
 8008fe8:	490d      	ldr	r1, [pc, #52]	; (8009020 <ethernetif_init+0x4c>)
 8008fea:	480e      	ldr	r0, [pc, #56]	; (8009024 <ethernetif_init+0x50>)
 8008fec:	f00a f9d6 	bl	801339c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2273      	movs	r2, #115	; 0x73
 8008ff4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2274      	movs	r2, #116	; 0x74
 8008ffc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a09      	ldr	r2, [pc, #36]	; (8009028 <ethernetif_init+0x54>)
 8009004:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a08      	ldr	r2, [pc, #32]	; (800902c <ethernetif_init+0x58>)
 800900a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fdc3 	bl	8008b98 <low_level_init>

  return ERR_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	080147e8 	.word	0x080147e8
 8009020:	08014804 	.word	0x08014804
 8009024:	08014814 	.word	0x08014814
 8009028:	080115e1 	.word	0x080115e1
 800902c:	08008cf5 	.word	0x08008cf5

08009030 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009034:	f7f8 fd36 	bl	8001aa4 <HAL_GetTick>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009056:	089b      	lsrs	r3, r3, #2
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d05d      	beq.n	800911e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009062:	4b34      	ldr	r3, [pc, #208]	; (8009134 <ethernetif_update_config+0xf4>)
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d03f      	beq.n	80090ea <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800906a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800906e:	2100      	movs	r1, #0
 8009070:	4830      	ldr	r0, [pc, #192]	; (8009134 <ethernetif_update_config+0xf4>)
 8009072:	f7f9 ff3b 	bl	8002eec <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8009076:	f7f8 fd15 	bl	8001aa4 <HAL_GetTick>
 800907a:	4603      	mov	r3, r0
 800907c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800907e:	f107 0308 	add.w	r3, r7, #8
 8009082:	461a      	mov	r2, r3
 8009084:	2101      	movs	r1, #1
 8009086:	482b      	ldr	r0, [pc, #172]	; (8009134 <ethernetif_update_config+0xf4>)
 8009088:	f7f9 fec8 	bl	8002e1c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800908c:	f7f8 fd0a 	bl	8001aa4 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800909a:	d828      	bhi.n	80090ee <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0eb      	beq.n	800907e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80090a6:	f107 0308 	add.w	r3, r7, #8
 80090aa:	461a      	mov	r2, r3
 80090ac:	2110      	movs	r1, #16
 80090ae:	4821      	ldr	r0, [pc, #132]	; (8009134 <ethernetif_update_config+0xf4>)
 80090b0:	f7f9 feb4 	bl	8002e1c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d004      	beq.n	80090c8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80090be:	4b1d      	ldr	r3, [pc, #116]	; (8009134 <ethernetif_update_config+0xf4>)
 80090c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	e002      	b.n	80090ce <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80090c8:	4b1a      	ldr	r3, [pc, #104]	; (8009134 <ethernetif_update_config+0xf4>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80090d8:	4b16      	ldr	r3, [pc, #88]	; (8009134 <ethernetif_update_config+0xf4>)
 80090da:	2200      	movs	r2, #0
 80090dc:	609a      	str	r2, [r3, #8]
 80090de:	e016      	b.n	800910e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80090e0:	4b14      	ldr	r3, [pc, #80]	; (8009134 <ethernetif_update_config+0xf4>)
 80090e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80090e6:	609a      	str	r2, [r3, #8]
 80090e8:	e011      	b.n	800910e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80090ea:	bf00      	nop
 80090ec:	e000      	b.n	80090f0 <ethernetif_update_config+0xb0>
          goto error;
 80090ee:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80090f0:	4b10      	ldr	r3, [pc, #64]	; (8009134 <ethernetif_update_config+0xf4>)
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	08db      	lsrs	r3, r3, #3
 80090f6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80090f8:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <ethernetif_update_config+0xf4>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	085b      	lsrs	r3, r3, #1
 80090fe:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009100:	4313      	orrs	r3, r2
 8009102:	b29b      	uxth	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	2100      	movs	r1, #0
 8009108:	480a      	ldr	r0, [pc, #40]	; (8009134 <ethernetif_update_config+0xf4>)
 800910a:	f7f9 feef 	bl	8002eec <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800910e:	2100      	movs	r1, #0
 8009110:	4808      	ldr	r0, [pc, #32]	; (8009134 <ethernetif_update_config+0xf4>)
 8009112:	f7f9 ffaf 	bl	8003074 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8009116:	4807      	ldr	r0, [pc, #28]	; (8009134 <ethernetif_update_config+0xf4>)
 8009118:	f7f9 ff4e 	bl	8002fb8 <HAL_ETH_Start>
 800911c:	e002      	b.n	8009124 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800911e:	4805      	ldr	r0, [pc, #20]	; (8009134 <ethernetif_update_config+0xf4>)
 8009120:	f7f9 ff79 	bl	8003016 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f807 	bl	8009138 <ethernetif_notify_conn_changed>
}
 800912a:	bf00      	nop
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	2000373c 	.word	0x2000373c

08009138 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	021b      	lsls	r3, r3, #8
 800915a:	b21a      	sxth	r2, r3
 800915c:	88fb      	ldrh	r3, [r7, #6]
 800915e:	0a1b      	lsrs	r3, r3, #8
 8009160:	b29b      	uxth	r3, r3
 8009162:	b21b      	sxth	r3, r3
 8009164:	4313      	orrs	r3, r2
 8009166:	b21b      	sxth	r3, r3
 8009168:	b29b      	uxth	r3, r3
}
 800916a:	4618      	mov	r0, r3
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	061a      	lsls	r2, r3, #24
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	021b      	lsls	r3, r3, #8
 8009186:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	0e1b      	lsrs	r3, r3, #24
 800919a:	4313      	orrs	r3, r2
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80091b2:	f000 f8d5 	bl	8009360 <mem_init>
  memp_init();
 80091b6:	f000 fbdb 	bl	8009970 <memp_init>
  pbuf_init();
  netif_init();
 80091ba:	f000 fc93 	bl	8009ae4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80091be:	f007 f84f 	bl	8010260 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80091c2:	f001 fda7 	bl	800ad14 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80091c6:	f006 ffc1 	bl	801014c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80091de:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <ptr_to_mem+0x20>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	88fb      	ldrh	r3, [r7, #6]
 80091e4:	4413      	add	r3, r2
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20005fb0 	.word	0x20005fb0

080091f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <mem_to_ptr+0x20>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	b29b      	uxth	r3, r3
}
 800920a:	4618      	mov	r0, r3
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20005fb0 	.word	0x20005fb0

0800921c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800921c:	b590      	push	{r4, r7, lr}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009224:	4b45      	ldr	r3, [pc, #276]	; (800933c <plug_holes+0x120>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	d206      	bcs.n	800923c <plug_holes+0x20>
 800922e:	4b44      	ldr	r3, [pc, #272]	; (8009340 <plug_holes+0x124>)
 8009230:	f240 12df 	movw	r2, #479	; 0x1df
 8009234:	4943      	ldr	r1, [pc, #268]	; (8009344 <plug_holes+0x128>)
 8009236:	4844      	ldr	r0, [pc, #272]	; (8009348 <plug_holes+0x12c>)
 8009238:	f00a f8b0 	bl	801339c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800923c:	4b43      	ldr	r3, [pc, #268]	; (800934c <plug_holes+0x130>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	429a      	cmp	r2, r3
 8009244:	d306      	bcc.n	8009254 <plug_holes+0x38>
 8009246:	4b3e      	ldr	r3, [pc, #248]	; (8009340 <plug_holes+0x124>)
 8009248:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800924c:	4940      	ldr	r1, [pc, #256]	; (8009350 <plug_holes+0x134>)
 800924e:	483e      	ldr	r0, [pc, #248]	; (8009348 <plug_holes+0x12c>)
 8009250:	f00a f8a4 	bl	801339c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	791b      	ldrb	r3, [r3, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <plug_holes+0x4e>
 800925c:	4b38      	ldr	r3, [pc, #224]	; (8009340 <plug_holes+0x124>)
 800925e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009262:	493c      	ldr	r1, [pc, #240]	; (8009354 <plug_holes+0x138>)
 8009264:	4838      	ldr	r0, [pc, #224]	; (8009348 <plug_holes+0x12c>)
 8009266:	f00a f899 	bl	801339c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009272:	d906      	bls.n	8009282 <plug_holes+0x66>
 8009274:	4b32      	ldr	r3, [pc, #200]	; (8009340 <plug_holes+0x124>)
 8009276:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800927a:	4937      	ldr	r1, [pc, #220]	; (8009358 <plug_holes+0x13c>)
 800927c:	4832      	ldr	r0, [pc, #200]	; (8009348 <plug_holes+0x12c>)
 800927e:	f00a f88d 	bl	801339c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff ffa4 	bl	80091d4 <ptr_to_mem>
 800928c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	429a      	cmp	r2, r3
 8009294:	d024      	beq.n	80092e0 <plug_holes+0xc4>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	791b      	ldrb	r3, [r3, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d120      	bne.n	80092e0 <plug_holes+0xc4>
 800929e:	4b2b      	ldr	r3, [pc, #172]	; (800934c <plug_holes+0x130>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d01b      	beq.n	80092e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80092a8:	4b2c      	ldr	r3, [pc, #176]	; (800935c <plug_holes+0x140>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d102      	bne.n	80092b8 <plug_holes+0x9c>
      lfree = mem;
 80092b2:	4a2a      	ldr	r2, [pc, #168]	; (800935c <plug_holes+0x140>)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	881a      	ldrh	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80092c8:	d00a      	beq.n	80092e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	881b      	ldrh	r3, [r3, #0]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff ff80 	bl	80091d4 <ptr_to_mem>
 80092d4:	4604      	mov	r4, r0
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff ff8e 	bl	80091f8 <mem_to_ptr>
 80092dc:	4603      	mov	r3, r0
 80092de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	885b      	ldrh	r3, [r3, #2]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff ff75 	bl	80091d4 <ptr_to_mem>
 80092ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d01f      	beq.n	8009334 <plug_holes+0x118>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	791b      	ldrb	r3, [r3, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d11b      	bne.n	8009334 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80092fc:	4b17      	ldr	r3, [pc, #92]	; (800935c <plug_holes+0x140>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	429a      	cmp	r2, r3
 8009304:	d102      	bne.n	800930c <plug_holes+0xf0>
      lfree = pmem;
 8009306:	4a15      	ldr	r2, [pc, #84]	; (800935c <plug_holes+0x140>)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	881a      	ldrh	r2, [r3, #0]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800931c:	d00a      	beq.n	8009334 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff ff56 	bl	80091d4 <ptr_to_mem>
 8009328:	4604      	mov	r4, r0
 800932a:	68b8      	ldr	r0, [r7, #8]
 800932c:	f7ff ff64 	bl	80091f8 <mem_to_ptr>
 8009330:	4603      	mov	r3, r0
 8009332:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009334:	bf00      	nop
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	bd90      	pop	{r4, r7, pc}
 800933c:	20005fb0 	.word	0x20005fb0
 8009340:	0801483c 	.word	0x0801483c
 8009344:	0801486c 	.word	0x0801486c
 8009348:	08014884 	.word	0x08014884
 800934c:	20005fb4 	.word	0x20005fb4
 8009350:	080148ac 	.word	0x080148ac
 8009354:	080148c8 	.word	0x080148c8
 8009358:	080148e4 	.word	0x080148e4
 800935c:	20005fb8 	.word	0x20005fb8

08009360 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009366:	4b18      	ldr	r3, [pc, #96]	; (80093c8 <mem_init+0x68>)
 8009368:	3303      	adds	r3, #3
 800936a:	f023 0303 	bic.w	r3, r3, #3
 800936e:	461a      	mov	r2, r3
 8009370:	4b16      	ldr	r3, [pc, #88]	; (80093cc <mem_init+0x6c>)
 8009372:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009374:	4b15      	ldr	r3, [pc, #84]	; (80093cc <mem_init+0x6c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009380:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800938e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8009392:	f7ff ff1f 	bl	80091d4 <ptr_to_mem>
 8009396:	4603      	mov	r3, r0
 8009398:	4a0d      	ldr	r2, [pc, #52]	; (80093d0 <mem_init+0x70>)
 800939a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <mem_init+0x70>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2201      	movs	r2, #1
 80093a2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80093a4:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <mem_init+0x70>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80093ac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80093ae:	4b08      	ldr	r3, [pc, #32]	; (80093d0 <mem_init+0x70>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80093b6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80093b8:	4b04      	ldr	r3, [pc, #16]	; (80093cc <mem_init+0x6c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a05      	ldr	r2, [pc, #20]	; (80093d4 <mem_init+0x74>)
 80093be:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	2000379c 	.word	0x2000379c
 80093cc:	20005fb0 	.word	0x20005fb0
 80093d0:	20005fb4 	.word	0x20005fb4
 80093d4:	20005fb8 	.word	0x20005fb8

080093d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff ff09 	bl	80091f8 <mem_to_ptr>
 80093e6:	4603      	mov	r3, r0
 80093e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fef0 	bl	80091d4 <ptr_to_mem>
 80093f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	885b      	ldrh	r3, [r3, #2]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff feea 	bl	80091d4 <ptr_to_mem>
 8009400:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800940a:	d818      	bhi.n	800943e <mem_link_valid+0x66>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	885b      	ldrh	r3, [r3, #2]
 8009410:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009414:	d813      	bhi.n	800943e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800941a:	8afa      	ldrh	r2, [r7, #22]
 800941c:	429a      	cmp	r2, r3
 800941e:	d004      	beq.n	800942a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	8afa      	ldrh	r2, [r7, #22]
 8009426:	429a      	cmp	r2, r3
 8009428:	d109      	bne.n	800943e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800942a:	4b08      	ldr	r3, [pc, #32]	; (800944c <mem_link_valid+0x74>)
 800942c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	429a      	cmp	r2, r3
 8009432:	d006      	beq.n	8009442 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	885b      	ldrh	r3, [r3, #2]
 8009438:	8afa      	ldrh	r2, [r7, #22]
 800943a:	429a      	cmp	r2, r3
 800943c:	d001      	beq.n	8009442 <mem_link_valid+0x6a>
    return 0;
 800943e:	2300      	movs	r3, #0
 8009440:	e000      	b.n	8009444 <mem_link_valid+0x6c>
  }
  return 1;
 8009442:	2301      	movs	r3, #1
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20005fb4 	.word	0x20005fb4

08009450 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d04c      	beq.n	80094f8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d007      	beq.n	8009478 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009468:	4b25      	ldr	r3, [pc, #148]	; (8009500 <mem_free+0xb0>)
 800946a:	f240 2273 	movw	r2, #627	; 0x273
 800946e:	4925      	ldr	r1, [pc, #148]	; (8009504 <mem_free+0xb4>)
 8009470:	4825      	ldr	r0, [pc, #148]	; (8009508 <mem_free+0xb8>)
 8009472:	f009 ff93 	bl	801339c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009476:	e040      	b.n	80094fa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3b08      	subs	r3, #8
 800947c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800947e:	4b23      	ldr	r3, [pc, #140]	; (800950c <mem_free+0xbc>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	429a      	cmp	r2, r3
 8009486:	d306      	bcc.n	8009496 <mem_free+0x46>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f103 020c 	add.w	r2, r3, #12
 800948e:	4b20      	ldr	r3, [pc, #128]	; (8009510 <mem_free+0xc0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d907      	bls.n	80094a6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <mem_free+0xb0>)
 8009498:	f240 227f 	movw	r2, #639	; 0x27f
 800949c:	491d      	ldr	r1, [pc, #116]	; (8009514 <mem_free+0xc4>)
 800949e:	481a      	ldr	r0, [pc, #104]	; (8009508 <mem_free+0xb8>)
 80094a0:	f009 ff7c 	bl	801339c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80094a4:	e029      	b.n	80094fa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	791b      	ldrb	r3, [r3, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d107      	bne.n	80094be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80094ae:	4b14      	ldr	r3, [pc, #80]	; (8009500 <mem_free+0xb0>)
 80094b0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80094b4:	4918      	ldr	r1, [pc, #96]	; (8009518 <mem_free+0xc8>)
 80094b6:	4814      	ldr	r0, [pc, #80]	; (8009508 <mem_free+0xb8>)
 80094b8:	f009 ff70 	bl	801339c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80094bc:	e01d      	b.n	80094fa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f7ff ff8a 	bl	80093d8 <mem_link_valid>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d107      	bne.n	80094da <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <mem_free+0xb0>)
 80094cc:	f240 2295 	movw	r2, #661	; 0x295
 80094d0:	4912      	ldr	r1, [pc, #72]	; (800951c <mem_free+0xcc>)
 80094d2:	480d      	ldr	r0, [pc, #52]	; (8009508 <mem_free+0xb8>)
 80094d4:	f009 ff62 	bl	801339c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80094d8:	e00f      	b.n	80094fa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80094e0:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <mem_free+0xd0>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d202      	bcs.n	80094f0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80094ea:	4a0d      	ldr	r2, [pc, #52]	; (8009520 <mem_free+0xd0>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff fe93 	bl	800921c <plug_holes>
 80094f6:	e000      	b.n	80094fa <mem_free+0xaa>
    return;
 80094f8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	0801483c 	.word	0x0801483c
 8009504:	08014910 	.word	0x08014910
 8009508:	08014884 	.word	0x08014884
 800950c:	20005fb0 	.word	0x20005fb0
 8009510:	20005fb4 	.word	0x20005fb4
 8009514:	08014934 	.word	0x08014934
 8009518:	08014950 	.word	0x08014950
 800951c:	08014978 	.word	0x08014978
 8009520:	20005fb8 	.word	0x20005fb8

08009524 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009530:	887b      	ldrh	r3, [r7, #2]
 8009532:	3303      	adds	r3, #3
 8009534:	b29b      	uxth	r3, r3
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800953c:	8bfb      	ldrh	r3, [r7, #30]
 800953e:	2b0b      	cmp	r3, #11
 8009540:	d801      	bhi.n	8009546 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009542:	230c      	movs	r3, #12
 8009544:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009546:	8bfb      	ldrh	r3, [r7, #30]
 8009548:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800954c:	d803      	bhi.n	8009556 <mem_trim+0x32>
 800954e:	8bfa      	ldrh	r2, [r7, #30]
 8009550:	887b      	ldrh	r3, [r7, #2]
 8009552:	429a      	cmp	r2, r3
 8009554:	d201      	bcs.n	800955a <mem_trim+0x36>
    return NULL;
 8009556:	2300      	movs	r3, #0
 8009558:	e0cc      	b.n	80096f4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800955a:	4b68      	ldr	r3, [pc, #416]	; (80096fc <mem_trim+0x1d8>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d304      	bcc.n	800956e <mem_trim+0x4a>
 8009564:	4b66      	ldr	r3, [pc, #408]	; (8009700 <mem_trim+0x1dc>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	429a      	cmp	r2, r3
 800956c:	d306      	bcc.n	800957c <mem_trim+0x58>
 800956e:	4b65      	ldr	r3, [pc, #404]	; (8009704 <mem_trim+0x1e0>)
 8009570:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009574:	4964      	ldr	r1, [pc, #400]	; (8009708 <mem_trim+0x1e4>)
 8009576:	4865      	ldr	r0, [pc, #404]	; (800970c <mem_trim+0x1e8>)
 8009578:	f009 ff10 	bl	801339c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800957c:	4b5f      	ldr	r3, [pc, #380]	; (80096fc <mem_trim+0x1d8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	429a      	cmp	r2, r3
 8009584:	d304      	bcc.n	8009590 <mem_trim+0x6c>
 8009586:	4b5e      	ldr	r3, [pc, #376]	; (8009700 <mem_trim+0x1dc>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	429a      	cmp	r2, r3
 800958e:	d301      	bcc.n	8009594 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	e0af      	b.n	80096f4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3b08      	subs	r3, #8
 8009598:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800959a:	69b8      	ldr	r0, [r7, #24]
 800959c:	f7ff fe2c 	bl	80091f8 <mem_to_ptr>
 80095a0:	4603      	mov	r3, r0
 80095a2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	881a      	ldrh	r2, [r3, #0]
 80095a8:	8afb      	ldrh	r3, [r7, #22]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b08      	subs	r3, #8
 80095b0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80095b2:	8bfa      	ldrh	r2, [r7, #30]
 80095b4:	8abb      	ldrh	r3, [r7, #20]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d906      	bls.n	80095c8 <mem_trim+0xa4>
 80095ba:	4b52      	ldr	r3, [pc, #328]	; (8009704 <mem_trim+0x1e0>)
 80095bc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80095c0:	4953      	ldr	r1, [pc, #332]	; (8009710 <mem_trim+0x1ec>)
 80095c2:	4852      	ldr	r0, [pc, #328]	; (800970c <mem_trim+0x1e8>)
 80095c4:	f009 feea 	bl	801339c <iprintf>
  if (newsize > size) {
 80095c8:	8bfa      	ldrh	r2, [r7, #30]
 80095ca:	8abb      	ldrh	r3, [r7, #20]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d901      	bls.n	80095d4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80095d0:	2300      	movs	r3, #0
 80095d2:	e08f      	b.n	80096f4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80095d4:	8bfa      	ldrh	r2, [r7, #30]
 80095d6:	8abb      	ldrh	r3, [r7, #20]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d101      	bne.n	80095e0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	e089      	b.n	80096f4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff fdf5 	bl	80091d4 <ptr_to_mem>
 80095ea:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	791b      	ldrb	r3, [r3, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d13f      	bne.n	8009674 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	881b      	ldrh	r3, [r3, #0]
 80095f8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80095fc:	d106      	bne.n	800960c <mem_trim+0xe8>
 80095fe:	4b41      	ldr	r3, [pc, #260]	; (8009704 <mem_trim+0x1e0>)
 8009600:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009604:	4943      	ldr	r1, [pc, #268]	; (8009714 <mem_trim+0x1f0>)
 8009606:	4841      	ldr	r0, [pc, #260]	; (800970c <mem_trim+0x1e8>)
 8009608:	f009 fec8 	bl	801339c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009612:	8afa      	ldrh	r2, [r7, #22]
 8009614:	8bfb      	ldrh	r3, [r7, #30]
 8009616:	4413      	add	r3, r2
 8009618:	b29b      	uxth	r3, r3
 800961a:	3308      	adds	r3, #8
 800961c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800961e:	4b3e      	ldr	r3, [pc, #248]	; (8009718 <mem_trim+0x1f4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	429a      	cmp	r2, r3
 8009626:	d106      	bne.n	8009636 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009628:	89fb      	ldrh	r3, [r7, #14]
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff fdd2 	bl	80091d4 <ptr_to_mem>
 8009630:	4603      	mov	r3, r0
 8009632:	4a39      	ldr	r2, [pc, #228]	; (8009718 <mem_trim+0x1f4>)
 8009634:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009636:	89fb      	ldrh	r3, [r7, #14]
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fdcb 	bl	80091d4 <ptr_to_mem>
 800963e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2200      	movs	r2, #0
 8009644:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	89ba      	ldrh	r2, [r7, #12]
 800964a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	8afa      	ldrh	r2, [r7, #22]
 8009650:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	89fa      	ldrh	r2, [r7, #14]
 8009656:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009660:	d047      	beq.n	80096f2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff fdb4 	bl	80091d4 <ptr_to_mem>
 800966c:	4602      	mov	r2, r0
 800966e:	89fb      	ldrh	r3, [r7, #14]
 8009670:	8053      	strh	r3, [r2, #2]
 8009672:	e03e      	b.n	80096f2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009674:	8bfb      	ldrh	r3, [r7, #30]
 8009676:	f103 0214 	add.w	r2, r3, #20
 800967a:	8abb      	ldrh	r3, [r7, #20]
 800967c:	429a      	cmp	r2, r3
 800967e:	d838      	bhi.n	80096f2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009680:	8afa      	ldrh	r2, [r7, #22]
 8009682:	8bfb      	ldrh	r3, [r7, #30]
 8009684:	4413      	add	r3, r2
 8009686:	b29b      	uxth	r3, r3
 8009688:	3308      	adds	r3, #8
 800968a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009694:	d106      	bne.n	80096a4 <mem_trim+0x180>
 8009696:	4b1b      	ldr	r3, [pc, #108]	; (8009704 <mem_trim+0x1e0>)
 8009698:	f240 3216 	movw	r2, #790	; 0x316
 800969c:	491d      	ldr	r1, [pc, #116]	; (8009714 <mem_trim+0x1f0>)
 800969e:	481b      	ldr	r0, [pc, #108]	; (800970c <mem_trim+0x1e8>)
 80096a0:	f009 fe7c 	bl	801339c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80096a4:	89fb      	ldrh	r3, [r7, #14]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fd94 	bl	80091d4 <ptr_to_mem>
 80096ac:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80096ae:	4b1a      	ldr	r3, [pc, #104]	; (8009718 <mem_trim+0x1f4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d202      	bcs.n	80096be <mem_trim+0x19a>
      lfree = mem2;
 80096b8:	4a17      	ldr	r2, [pc, #92]	; (8009718 <mem_trim+0x1f4>)
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2200      	movs	r2, #0
 80096c2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	881a      	ldrh	r2, [r3, #0]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	8afa      	ldrh	r2, [r7, #22]
 80096d0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	89fa      	ldrh	r2, [r7, #14]
 80096d6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80096e0:	d007      	beq.n	80096f2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff fd74 	bl	80091d4 <ptr_to_mem>
 80096ec:	4602      	mov	r2, r0
 80096ee:	89fb      	ldrh	r3, [r7, #14]
 80096f0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80096f2:	687b      	ldr	r3, [r7, #4]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3720      	adds	r7, #32
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20005fb0 	.word	0x20005fb0
 8009700:	20005fb4 	.word	0x20005fb4
 8009704:	0801483c 	.word	0x0801483c
 8009708:	080149ac 	.word	0x080149ac
 800970c:	08014884 	.word	0x08014884
 8009710:	080149c4 	.word	0x080149c4
 8009714:	080149e4 	.word	0x080149e4
 8009718:	20005fb8 	.word	0x20005fb8

0800971c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b088      	sub	sp, #32
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <mem_malloc+0x14>
    return NULL;
 800972c:	2300      	movs	r3, #0
 800972e:	e0d9      	b.n	80098e4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009730:	88fb      	ldrh	r3, [r7, #6]
 8009732:	3303      	adds	r3, #3
 8009734:	b29b      	uxth	r3, r3
 8009736:	f023 0303 	bic.w	r3, r3, #3
 800973a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800973c:	8bbb      	ldrh	r3, [r7, #28]
 800973e:	2b0b      	cmp	r3, #11
 8009740:	d801      	bhi.n	8009746 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009742:	230c      	movs	r3, #12
 8009744:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009746:	8bbb      	ldrh	r3, [r7, #28]
 8009748:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800974c:	d803      	bhi.n	8009756 <mem_malloc+0x3a>
 800974e:	8bba      	ldrh	r2, [r7, #28]
 8009750:	88fb      	ldrh	r3, [r7, #6]
 8009752:	429a      	cmp	r2, r3
 8009754:	d201      	bcs.n	800975a <mem_malloc+0x3e>
    return NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	e0c4      	b.n	80098e4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800975a:	4b64      	ldr	r3, [pc, #400]	; (80098ec <mem_malloc+0x1d0>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff fd4a 	bl	80091f8 <mem_to_ptr>
 8009764:	4603      	mov	r3, r0
 8009766:	83fb      	strh	r3, [r7, #30]
 8009768:	e0b4      	b.n	80098d4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800976a:	8bfb      	ldrh	r3, [r7, #30]
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff fd31 	bl	80091d4 <ptr_to_mem>
 8009772:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	791b      	ldrb	r3, [r3, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f040 80a4 	bne.w	80098c6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	8bfb      	ldrh	r3, [r7, #30]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	f1a3 0208 	sub.w	r2, r3, #8
 800978c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800978e:	429a      	cmp	r2, r3
 8009790:	f0c0 8099 	bcc.w	80098c6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	8bfb      	ldrh	r3, [r7, #30]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	f1a3 0208 	sub.w	r2, r3, #8
 80097a2:	8bbb      	ldrh	r3, [r7, #28]
 80097a4:	3314      	adds	r3, #20
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d333      	bcc.n	8009812 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80097aa:	8bfa      	ldrh	r2, [r7, #30]
 80097ac:	8bbb      	ldrh	r3, [r7, #28]
 80097ae:	4413      	add	r3, r2
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3308      	adds	r3, #8
 80097b4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80097b6:	8a7b      	ldrh	r3, [r7, #18]
 80097b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80097bc:	d106      	bne.n	80097cc <mem_malloc+0xb0>
 80097be:	4b4c      	ldr	r3, [pc, #304]	; (80098f0 <mem_malloc+0x1d4>)
 80097c0:	f240 3287 	movw	r2, #903	; 0x387
 80097c4:	494b      	ldr	r1, [pc, #300]	; (80098f4 <mem_malloc+0x1d8>)
 80097c6:	484c      	ldr	r0, [pc, #304]	; (80098f8 <mem_malloc+0x1dc>)
 80097c8:	f009 fde8 	bl	801339c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80097cc:	8a7b      	ldrh	r3, [r7, #18]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff fd00 	bl	80091d4 <ptr_to_mem>
 80097d4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	881a      	ldrh	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8bfa      	ldrh	r2, [r7, #30]
 80097e8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	8a7a      	ldrh	r2, [r7, #18]
 80097ee:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2201      	movs	r2, #1
 80097f4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80097fe:	d00b      	beq.n	8009818 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff fce5 	bl	80091d4 <ptr_to_mem>
 800980a:	4602      	mov	r2, r0
 800980c:	8a7b      	ldrh	r3, [r7, #18]
 800980e:	8053      	strh	r3, [r2, #2]
 8009810:	e002      	b.n	8009818 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2201      	movs	r2, #1
 8009816:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009818:	4b34      	ldr	r3, [pc, #208]	; (80098ec <mem_malloc+0x1d0>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	429a      	cmp	r2, r3
 8009820:	d127      	bne.n	8009872 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009822:	4b32      	ldr	r3, [pc, #200]	; (80098ec <mem_malloc+0x1d0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009828:	e005      	b.n	8009836 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff fcd0 	bl	80091d4 <ptr_to_mem>
 8009834:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	791b      	ldrb	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d004      	beq.n	8009848 <mem_malloc+0x12c>
 800983e:	4b2f      	ldr	r3, [pc, #188]	; (80098fc <mem_malloc+0x1e0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	429a      	cmp	r2, r3
 8009846:	d1f0      	bne.n	800982a <mem_malloc+0x10e>
          }
          lfree = cur;
 8009848:	4a28      	ldr	r2, [pc, #160]	; (80098ec <mem_malloc+0x1d0>)
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800984e:	4b27      	ldr	r3, [pc, #156]	; (80098ec <mem_malloc+0x1d0>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <mem_malloc+0x1e0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d00b      	beq.n	8009872 <mem_malloc+0x156>
 800985a:	4b24      	ldr	r3, [pc, #144]	; (80098ec <mem_malloc+0x1d0>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	791b      	ldrb	r3, [r3, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d006      	beq.n	8009872 <mem_malloc+0x156>
 8009864:	4b22      	ldr	r3, [pc, #136]	; (80098f0 <mem_malloc+0x1d4>)
 8009866:	f240 32b5 	movw	r2, #949	; 0x3b5
 800986a:	4925      	ldr	r1, [pc, #148]	; (8009900 <mem_malloc+0x1e4>)
 800986c:	4822      	ldr	r0, [pc, #136]	; (80098f8 <mem_malloc+0x1dc>)
 800986e:	f009 fd95 	bl	801339c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009872:	8bba      	ldrh	r2, [r7, #28]
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	4413      	add	r3, r2
 8009878:	3308      	adds	r3, #8
 800987a:	4a20      	ldr	r2, [pc, #128]	; (80098fc <mem_malloc+0x1e0>)
 800987c:	6812      	ldr	r2, [r2, #0]
 800987e:	4293      	cmp	r3, r2
 8009880:	d906      	bls.n	8009890 <mem_malloc+0x174>
 8009882:	4b1b      	ldr	r3, [pc, #108]	; (80098f0 <mem_malloc+0x1d4>)
 8009884:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009888:	491e      	ldr	r1, [pc, #120]	; (8009904 <mem_malloc+0x1e8>)
 800988a:	481b      	ldr	r0, [pc, #108]	; (80098f8 <mem_malloc+0x1dc>)
 800988c:	f009 fd86 	bl	801339c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d006      	beq.n	80098a8 <mem_malloc+0x18c>
 800989a:	4b15      	ldr	r3, [pc, #84]	; (80098f0 <mem_malloc+0x1d4>)
 800989c:	f240 32bb 	movw	r2, #955	; 0x3bb
 80098a0:	4919      	ldr	r1, [pc, #100]	; (8009908 <mem_malloc+0x1ec>)
 80098a2:	4815      	ldr	r0, [pc, #84]	; (80098f8 <mem_malloc+0x1dc>)
 80098a4:	f009 fd7a 	bl	801339c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d006      	beq.n	80098c0 <mem_malloc+0x1a4>
 80098b2:	4b0f      	ldr	r3, [pc, #60]	; (80098f0 <mem_malloc+0x1d4>)
 80098b4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80098b8:	4914      	ldr	r1, [pc, #80]	; (800990c <mem_malloc+0x1f0>)
 80098ba:	480f      	ldr	r0, [pc, #60]	; (80098f8 <mem_malloc+0x1dc>)
 80098bc:	f009 fd6e 	bl	801339c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	3308      	adds	r3, #8
 80098c4:	e00e      	b.n	80098e4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80098c6:	8bfb      	ldrh	r3, [r7, #30]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff fc83 	bl	80091d4 <ptr_to_mem>
 80098ce:	4603      	mov	r3, r0
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098d4:	8bfa      	ldrh	r2, [r7, #30]
 80098d6:	8bbb      	ldrh	r3, [r7, #28]
 80098d8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80098dc:	429a      	cmp	r2, r3
 80098de:	f4ff af44 	bcc.w	800976a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20005fb8 	.word	0x20005fb8
 80098f0:	0801483c 	.word	0x0801483c
 80098f4:	080149e4 	.word	0x080149e4
 80098f8:	08014884 	.word	0x08014884
 80098fc:	20005fb4 	.word	0x20005fb4
 8009900:	080149f8 	.word	0x080149f8
 8009904:	08014a14 	.word	0x08014a14
 8009908:	08014a44 	.word	0x08014a44
 800990c:	08014a74 	.word	0x08014a74

08009910 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	3303      	adds	r3, #3
 8009926:	f023 0303 	bic.w	r3, r3, #3
 800992a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e011      	b.n	8009956 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	4413      	add	r3, r2
 800994e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3301      	adds	r3, #1
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	885b      	ldrh	r3, [r3, #2]
 800995a:	461a      	mov	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4293      	cmp	r3, r2
 8009960:	dbe7      	blt.n	8009932 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009962:	bf00      	nop
 8009964:	bf00      	nop
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009976:	2300      	movs	r3, #0
 8009978:	80fb      	strh	r3, [r7, #6]
 800997a:	e009      	b.n	8009990 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800997c:	88fb      	ldrh	r3, [r7, #6]
 800997e:	4a08      	ldr	r2, [pc, #32]	; (80099a0 <memp_init+0x30>)
 8009980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff ffc3 	bl	8009910 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800998a:	88fb      	ldrh	r3, [r7, #6]
 800998c:	3301      	adds	r3, #1
 800998e:	80fb      	strh	r3, [r7, #6]
 8009990:	88fb      	ldrh	r3, [r7, #6]
 8009992:	2b08      	cmp	r3, #8
 8009994:	d9f2      	bls.n	800997c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	08017254 	.word	0x08017254

080099a4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d012      	beq.n	80099e0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	6812      	ldr	r2, [r2, #0]
 80099c2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d006      	beq.n	80099dc <do_memp_malloc_pool+0x38>
 80099ce:	4b07      	ldr	r3, [pc, #28]	; (80099ec <do_memp_malloc_pool+0x48>)
 80099d0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80099d4:	4906      	ldr	r1, [pc, #24]	; (80099f0 <do_memp_malloc_pool+0x4c>)
 80099d6:	4807      	ldr	r0, [pc, #28]	; (80099f4 <do_memp_malloc_pool+0x50>)
 80099d8:	f009 fce0 	bl	801339c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	e000      	b.n	80099e2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	08014a98 	.word	0x08014a98
 80099f0:	08014ac8 	.word	0x08014ac8
 80099f4:	08014aec 	.word	0x08014aec

080099f8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d908      	bls.n	8009a1a <memp_malloc+0x22>
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <memp_malloc+0x3c>)
 8009a0a:	f240 1257 	movw	r2, #343	; 0x157
 8009a0e:	490a      	ldr	r1, [pc, #40]	; (8009a38 <memp_malloc+0x40>)
 8009a10:	480a      	ldr	r0, [pc, #40]	; (8009a3c <memp_malloc+0x44>)
 8009a12:	f009 fcc3 	bl	801339c <iprintf>
 8009a16:	2300      	movs	r3, #0
 8009a18:	e008      	b.n	8009a2c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	4a08      	ldr	r2, [pc, #32]	; (8009a40 <memp_malloc+0x48>)
 8009a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff ffbe 	bl	80099a4 <do_memp_malloc_pool>
 8009a28:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	08014a98 	.word	0x08014a98
 8009a38:	08014b28 	.word	0x08014b28
 8009a3c:	08014aec 	.word	0x08014aec
 8009a40:	08017254 	.word	0x08017254

08009a44 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	f003 0303 	and.w	r3, r3, #3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d006      	beq.n	8009a66 <do_memp_free_pool+0x22>
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <do_memp_free_pool+0x40>)
 8009a5a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009a5e:	490a      	ldr	r1, [pc, #40]	; (8009a88 <do_memp_free_pool+0x44>)
 8009a60:	480a      	ldr	r0, [pc, #40]	; (8009a8c <do_memp_free_pool+0x48>)
 8009a62:	f009 fc9b 	bl	801339c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009a7c:	bf00      	nop
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	08014a98 	.word	0x08014a98
 8009a88:	08014b48 	.word	0x08014b48
 8009a8c:	08014aec 	.word	0x08014aec

08009a90 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	2b08      	cmp	r3, #8
 8009aa0:	d907      	bls.n	8009ab2 <memp_free+0x22>
 8009aa2:	4b0c      	ldr	r3, [pc, #48]	; (8009ad4 <memp_free+0x44>)
 8009aa4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009aa8:	490b      	ldr	r1, [pc, #44]	; (8009ad8 <memp_free+0x48>)
 8009aaa:	480c      	ldr	r0, [pc, #48]	; (8009adc <memp_free+0x4c>)
 8009aac:	f009 fc76 	bl	801339c <iprintf>
 8009ab0:	e00c      	b.n	8009acc <memp_free+0x3c>

  if (mem == NULL) {
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d008      	beq.n	8009aca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	4a09      	ldr	r2, [pc, #36]	; (8009ae0 <memp_free+0x50>)
 8009abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff ffbe 	bl	8009a44 <do_memp_free_pool>
 8009ac8:	e000      	b.n	8009acc <memp_free+0x3c>
    return;
 8009aca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	08014a98 	.word	0x08014a98
 8009ad8:	08014b68 	.word	0x08014b68
 8009adc:	08014aec 	.word	0x08014aec
 8009ae0:	08017254 	.word	0x08017254

08009ae4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009ae8:	bf00      	nop
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
	...

08009af4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d108      	bne.n	8009b1a <netif_add+0x26>
 8009b08:	4b57      	ldr	r3, [pc, #348]	; (8009c68 <netif_add+0x174>)
 8009b0a:	f240 1227 	movw	r2, #295	; 0x127
 8009b0e:	4957      	ldr	r1, [pc, #348]	; (8009c6c <netif_add+0x178>)
 8009b10:	4857      	ldr	r0, [pc, #348]	; (8009c70 <netif_add+0x17c>)
 8009b12:	f009 fc43 	bl	801339c <iprintf>
 8009b16:	2300      	movs	r3, #0
 8009b18:	e0a2      	b.n	8009c60 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d108      	bne.n	8009b32 <netif_add+0x3e>
 8009b20:	4b51      	ldr	r3, [pc, #324]	; (8009c68 <netif_add+0x174>)
 8009b22:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009b26:	4953      	ldr	r1, [pc, #332]	; (8009c74 <netif_add+0x180>)
 8009b28:	4851      	ldr	r0, [pc, #324]	; (8009c70 <netif_add+0x17c>)
 8009b2a:	f009 fc37 	bl	801339c <iprintf>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e096      	b.n	8009c60 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009b38:	4b4f      	ldr	r3, [pc, #316]	; (8009c78 <netif_add+0x184>)
 8009b3a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009b42:	4b4d      	ldr	r3, [pc, #308]	; (8009c78 <netif_add+0x184>)
 8009b44:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009b4c:	4b4a      	ldr	r3, [pc, #296]	; (8009c78 <netif_add+0x184>)
 8009b4e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4a45      	ldr	r2, [pc, #276]	; (8009c7c <netif_add+0x188>)
 8009b66:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a3a      	ldr	r2, [r7, #32]
 8009b80:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009b82:	4b3f      	ldr	r3, [pc, #252]	; (8009c80 <netif_add+0x18c>)
 8009b84:	781a      	ldrb	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b90:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	68b9      	ldr	r1, [r7, #8]
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 f913 	bl	8009dc4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	4798      	blx	r3
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <netif_add+0xba>
    return NULL;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e058      	b.n	8009c60 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009bb4:	2bff      	cmp	r3, #255	; 0xff
 8009bb6:	d103      	bne.n	8009bc0 <netif_add+0xcc>
        netif->num = 0;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009bc4:	4b2f      	ldr	r3, [pc, #188]	; (8009c84 <netif_add+0x190>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	617b      	str	r3, [r7, #20]
 8009bca:	e02b      	b.n	8009c24 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d106      	bne.n	8009be2 <netif_add+0xee>
 8009bd4:	4b24      	ldr	r3, [pc, #144]	; (8009c68 <netif_add+0x174>)
 8009bd6:	f240 128b 	movw	r2, #395	; 0x18b
 8009bda:	492b      	ldr	r1, [pc, #172]	; (8009c88 <netif_add+0x194>)
 8009bdc:	4824      	ldr	r0, [pc, #144]	; (8009c70 <netif_add+0x17c>)
 8009bde:	f009 fbdd 	bl	801339c <iprintf>
        num_netifs++;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	3301      	adds	r3, #1
 8009be6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2bff      	cmp	r3, #255	; 0xff
 8009bec:	dd06      	ble.n	8009bfc <netif_add+0x108>
 8009bee:	4b1e      	ldr	r3, [pc, #120]	; (8009c68 <netif_add+0x174>)
 8009bf0:	f240 128d 	movw	r2, #397	; 0x18d
 8009bf4:	4925      	ldr	r1, [pc, #148]	; (8009c8c <netif_add+0x198>)
 8009bf6:	481e      	ldr	r0, [pc, #120]	; (8009c70 <netif_add+0x17c>)
 8009bf8:	f009 fbd0 	bl	801339c <iprintf>
        if (netif2->num == netif->num) {
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d108      	bne.n	8009c1e <netif_add+0x12a>
          netif->num++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c12:	3301      	adds	r3, #1
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009c1c:	e005      	b.n	8009c2a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1d0      	bne.n	8009bcc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1be      	bne.n	8009bae <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c36:	2bfe      	cmp	r3, #254	; 0xfe
 8009c38:	d103      	bne.n	8009c42 <netif_add+0x14e>
    netif_num = 0;
 8009c3a:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <netif_add+0x18c>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	e006      	b.n	8009c50 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c48:	3301      	adds	r3, #1
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	4b0c      	ldr	r3, [pc, #48]	; (8009c80 <netif_add+0x18c>)
 8009c4e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009c50:	4b0c      	ldr	r3, [pc, #48]	; (8009c84 <netif_add+0x190>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009c58:	4a0a      	ldr	r2, [pc, #40]	; (8009c84 <netif_add+0x190>)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	08014b84 	.word	0x08014b84
 8009c6c:	08014c18 	.word	0x08014c18
 8009c70:	08014bd4 	.word	0x08014bd4
 8009c74:	08014c34 	.word	0x08014c34
 8009c78:	080172b8 	.word	0x080172b8
 8009c7c:	08009fd7 	.word	0x08009fd7
 8009c80:	20008eb0 	.word	0x20008eb0
 8009c84:	20008ea8 	.word	0x20008ea8
 8009c88:	08014c58 	.word	0x08014c58
 8009c8c:	08014c6c 	.word	0x08014c6c

08009c90 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f002 fb81 	bl	800c3a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f007 f81f 	bl	8010ce8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d106      	bne.n	8009cd4 <netif_do_set_ipaddr+0x20>
 8009cc6:	4b1d      	ldr	r3, [pc, #116]	; (8009d3c <netif_do_set_ipaddr+0x88>)
 8009cc8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009ccc:	491c      	ldr	r1, [pc, #112]	; (8009d40 <netif_do_set_ipaddr+0x8c>)
 8009cce:	481d      	ldr	r0, [pc, #116]	; (8009d44 <netif_do_set_ipaddr+0x90>)
 8009cd0:	f009 fb64 	bl	801339c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d106      	bne.n	8009ce8 <netif_do_set_ipaddr+0x34>
 8009cda:	4b18      	ldr	r3, [pc, #96]	; (8009d3c <netif_do_set_ipaddr+0x88>)
 8009cdc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009ce0:	4917      	ldr	r1, [pc, #92]	; (8009d40 <netif_do_set_ipaddr+0x8c>)
 8009ce2:	4818      	ldr	r0, [pc, #96]	; (8009d44 <netif_do_set_ipaddr+0x90>)
 8009ce4:	f009 fb5a 	bl	801339c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d01c      	beq.n	8009d30 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009d06:	f107 0314 	add.w	r3, r7, #20
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff ffbf 	bl	8009c90 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <netif_do_set_ipaddr+0x6a>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	e000      	b.n	8009d20 <netif_do_set_ipaddr+0x6c>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009d24:	2101      	movs	r1, #1
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 f8d2 	bl	8009ed0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e000      	b.n	8009d32 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3718      	adds	r7, #24
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	08014b84 	.word	0x08014b84
 8009d40:	08014c9c 	.word	0x08014c9c
 8009d44:	08014bd4 	.word	0x08014bd4

08009d48 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d00a      	beq.n	8009d78 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <netif_do_set_netmask+0x26>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	e000      	b.n	8009d70 <netif_do_set_netmask+0x28>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009d74:	2301      	movs	r3, #1
 8009d76:	e000      	b.n	8009d7a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b085      	sub	sp, #20
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	330c      	adds	r3, #12
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d00a      	beq.n	8009db6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <netif_do_set_gw+0x26>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	e000      	b.n	8009dae <netif_do_set_gw+0x28>
 8009dac:	2300      	movs	r3, #0
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009db2:	2301      	movs	r3, #1
 8009db4:	e000      	b.n	8009db8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009de0:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <netif_set_addr+0x90>)
 8009de2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009dea:	4b1a      	ldr	r3, [pc, #104]	; (8009e54 <netif_set_addr+0x90>)
 8009dec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009df4:	4b17      	ldr	r3, [pc, #92]	; (8009e54 <netif_set_addr+0x90>)
 8009df6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <netif_set_addr+0x42>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <netif_set_addr+0x46>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <netif_set_addr+0x48>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d006      	beq.n	8009e22 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009e14:	f107 0310 	add.w	r3, r7, #16
 8009e18:	461a      	mov	r2, r3
 8009e1a:	68b9      	ldr	r1, [r7, #8]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7ff ff49 	bl	8009cb4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7ff ff8e 	bl	8009d48 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7ff ffa8 	bl	8009d86 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d106      	bne.n	8009e4a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009e3c:	f107 0310 	add.w	r3, r7, #16
 8009e40:	461a      	mov	r2, r3
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff ff35 	bl	8009cb4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009e4a:	bf00      	nop
 8009e4c:	3720      	adds	r7, #32
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	080172b8 	.word	0x080172b8

08009e58 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009e60:	4a04      	ldr	r2, [pc, #16]	; (8009e74 <netif_set_default+0x1c>)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20008eac 	.word	0x20008eac

08009e78 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d107      	bne.n	8009e96 <netif_set_up+0x1e>
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <netif_set_up+0x4c>)
 8009e88:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009e8c:	490e      	ldr	r1, [pc, #56]	; (8009ec8 <netif_set_up+0x50>)
 8009e8e:	480f      	ldr	r0, [pc, #60]	; (8009ecc <netif_set_up+0x54>)
 8009e90:	f009 fa84 	bl	801339c <iprintf>
 8009e94:	e013      	b.n	8009ebe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10c      	bne.n	8009ebe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009eaa:	f043 0301 	orr.w	r3, r3, #1
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009eb6:	2103      	movs	r1, #3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f809 	bl	8009ed0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	08014b84 	.word	0x08014b84
 8009ec8:	08014d0c 	.word	0x08014d0c
 8009ecc:	08014bd4 	.word	0x08014bd4

08009ed0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <netif_issue_reports+0x20>
 8009ee2:	4b18      	ldr	r3, [pc, #96]	; (8009f44 <netif_issue_reports+0x74>)
 8009ee4:	f240 326d 	movw	r2, #877	; 0x36d
 8009ee8:	4917      	ldr	r1, [pc, #92]	; (8009f48 <netif_issue_reports+0x78>)
 8009eea:	4818      	ldr	r0, [pc, #96]	; (8009f4c <netif_issue_reports+0x7c>)
 8009eec:	f009 fa56 	bl	801339c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ef6:	f003 0304 	and.w	r3, r3, #4
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01e      	beq.n	8009f3c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f04:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d017      	beq.n	8009f3c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d013      	beq.n	8009f3e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00e      	beq.n	8009f3e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f26:	f003 0308 	and.w	r3, r3, #8
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d007      	beq.n	8009f3e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f007 fe41 	bl	8011bbc <etharp_request>
 8009f3a:	e000      	b.n	8009f3e <netif_issue_reports+0x6e>
    return;
 8009f3c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	08014b84 	.word	0x08014b84
 8009f48:	08014d28 	.word	0x08014d28
 8009f4c:	08014bd4 	.word	0x08014bd4

08009f50 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <netif_set_down+0x1e>
 8009f5e:	4b12      	ldr	r3, [pc, #72]	; (8009fa8 <netif_set_down+0x58>)
 8009f60:	f240 329b 	movw	r2, #923	; 0x39b
 8009f64:	4911      	ldr	r1, [pc, #68]	; (8009fac <netif_set_down+0x5c>)
 8009f66:	4812      	ldr	r0, [pc, #72]	; (8009fb0 <netif_set_down+0x60>)
 8009f68:	f009 fa18 	bl	801339c <iprintf>
 8009f6c:	e019      	b.n	8009fa2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d012      	beq.n	8009fa2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f82:	f023 0301 	bic.w	r3, r3, #1
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f94:	f003 0308 	and.w	r3, r3, #8
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f007 f9cb 	bl	8011338 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	08014b84 	.word	0x08014b84
 8009fac:	08014d4c 	.word	0x08014d4c
 8009fb0:	08014bd4 	.word	0x08014bd4

08009fb4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	61da      	str	r2, [r3, #28]
  }
}
 8009fca:	bf00      	nop
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	60b9      	str	r1, [r7, #8]
 8009fe0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009fe2:	f06f 030b 	mvn.w	r3, #11
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
	...

08009ff4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d013      	beq.n	800a02c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a004:	4b0d      	ldr	r3, [pc, #52]	; (800a03c <netif_get_by_index+0x48>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	e00c      	b.n	800a026 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a012:	3301      	adds	r3, #1
 800a014:	b2db      	uxtb	r3, r3
 800a016:	79fa      	ldrb	r2, [r7, #7]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d101      	bne.n	800a020 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	e006      	b.n	800a02e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1ef      	bne.n	800a00c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	20008ea8 	.word	0x20008ea8

0800a040 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a046:	4b0c      	ldr	r3, [pc, #48]	; (800a078 <pbuf_free_ooseq+0x38>)
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a04c:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <pbuf_free_ooseq+0x3c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	607b      	str	r3, [r7, #4]
 800a052:	e00a      	b.n	800a06a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f002 f9df 	bl	800c420 <tcp_free_ooseq>
      return;
 800a062:	e005      	b.n	800a070 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1f1      	bne.n	800a054 <pbuf_free_ooseq+0x14>
    }
  }
}
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20008eb1 	.word	0x20008eb1
 800a07c:	20008ec0 	.word	0x20008ec0

0800a080 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a084:	4b03      	ldr	r3, [pc, #12]	; (800a094 <pbuf_pool_is_empty+0x14>)
 800a086:	2201      	movs	r2, #1
 800a088:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a08a:	bf00      	nop
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	20008eb1 	.word	0x20008eb1

0800a098 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	80fb      	strh	r3, [r7, #6]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	88fa      	ldrh	r2, [r7, #6]
 800a0be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	88ba      	ldrh	r2, [r7, #4]
 800a0c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a0c6:	8b3b      	ldrh	r3, [r7, #24]
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	7f3a      	ldrb	r2, [r7, #28]
 800a0d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	73da      	strb	r2, [r3, #15]
}
 800a0e0:	bf00      	nop
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08c      	sub	sp, #48	; 0x30
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	71fb      	strb	r3, [r7, #7]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	80bb      	strh	r3, [r7, #4]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a102:	887b      	ldrh	r3, [r7, #2]
 800a104:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a108:	d07f      	beq.n	800a20a <pbuf_alloc+0x11e>
 800a10a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a10e:	f300 80c8 	bgt.w	800a2a2 <pbuf_alloc+0x1b6>
 800a112:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a116:	d010      	beq.n	800a13a <pbuf_alloc+0x4e>
 800a118:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a11c:	f300 80c1 	bgt.w	800a2a2 <pbuf_alloc+0x1b6>
 800a120:	2b01      	cmp	r3, #1
 800a122:	d002      	beq.n	800a12a <pbuf_alloc+0x3e>
 800a124:	2b41      	cmp	r3, #65	; 0x41
 800a126:	f040 80bc 	bne.w	800a2a2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a12a:	887a      	ldrh	r2, [r7, #2]
 800a12c:	88bb      	ldrh	r3, [r7, #4]
 800a12e:	4619      	mov	r1, r3
 800a130:	2000      	movs	r0, #0
 800a132:	f000 f8d1 	bl	800a2d8 <pbuf_alloc_reference>
 800a136:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a138:	e0bd      	b.n	800a2b6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a142:	88bb      	ldrh	r3, [r7, #4]
 800a144:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a146:	2008      	movs	r0, #8
 800a148:	f7ff fc56 	bl	80099f8 <memp_malloc>
 800a14c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d109      	bne.n	800a168 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a154:	f7ff ff94 	bl	800a080 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a15e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a160:	f000 faa8 	bl	800a6b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a164:	2300      	movs	r3, #0
 800a166:	e0a7      	b.n	800a2b8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a16a:	3303      	adds	r3, #3
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	f023 0303 	bic.w	r3, r3, #3
 800a172:	b29b      	uxth	r3, r3
 800a174:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a178:	b29b      	uxth	r3, r3
 800a17a:	8b7a      	ldrh	r2, [r7, #26]
 800a17c:	4293      	cmp	r3, r2
 800a17e:	bf28      	it	cs
 800a180:	4613      	movcs	r3, r2
 800a182:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a186:	3310      	adds	r3, #16
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	4413      	add	r3, r2
 800a18c:	3303      	adds	r3, #3
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	4618      	mov	r0, r3
 800a194:	89f9      	ldrh	r1, [r7, #14]
 800a196:	8b7a      	ldrh	r2, [r7, #26]
 800a198:	2300      	movs	r3, #0
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	887b      	ldrh	r3, [r7, #2]
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	6938      	ldr	r0, [r7, #16]
 800a1a6:	f7ff ff77 	bl	800a098 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f003 0303 	and.w	r3, r3, #3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d006      	beq.n	800a1c4 <pbuf_alloc+0xd8>
 800a1b6:	4b42      	ldr	r3, [pc, #264]	; (800a2c0 <pbuf_alloc+0x1d4>)
 800a1b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1bc:	4941      	ldr	r1, [pc, #260]	; (800a2c4 <pbuf_alloc+0x1d8>)
 800a1be:	4842      	ldr	r0, [pc, #264]	; (800a2c8 <pbuf_alloc+0x1dc>)
 800a1c0:	f009 f8ec 	bl	801339c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a1c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1c6:	3303      	adds	r3, #3
 800a1c8:	f023 0303 	bic.w	r3, r3, #3
 800a1cc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a1d0:	d106      	bne.n	800a1e0 <pbuf_alloc+0xf4>
 800a1d2:	4b3b      	ldr	r3, [pc, #236]	; (800a2c0 <pbuf_alloc+0x1d4>)
 800a1d4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a1d8:	493c      	ldr	r1, [pc, #240]	; (800a2cc <pbuf_alloc+0x1e0>)
 800a1da:	483b      	ldr	r0, [pc, #236]	; (800a2c8 <pbuf_alloc+0x1dc>)
 800a1dc:	f009 f8de 	bl	801339c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d102      	bne.n	800a1ec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ea:	e002      	b.n	800a1f2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a1f6:	8b7a      	ldrh	r2, [r7, #26]
 800a1f8:	89fb      	ldrh	r3, [r7, #14]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a202:	8b7b      	ldrh	r3, [r7, #26]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d19e      	bne.n	800a146 <pbuf_alloc+0x5a>
      break;
 800a208:	e055      	b.n	800a2b6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a20a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a20c:	3303      	adds	r3, #3
 800a20e:	b29b      	uxth	r3, r3
 800a210:	f023 0303 	bic.w	r3, r3, #3
 800a214:	b29a      	uxth	r2, r3
 800a216:	88bb      	ldrh	r3, [r7, #4]
 800a218:	3303      	adds	r3, #3
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	f023 0303 	bic.w	r3, r3, #3
 800a220:	b29b      	uxth	r3, r3
 800a222:	4413      	add	r3, r2
 800a224:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a226:	8b3b      	ldrh	r3, [r7, #24]
 800a228:	3310      	adds	r3, #16
 800a22a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a22c:	8b3a      	ldrh	r2, [r7, #24]
 800a22e:	88bb      	ldrh	r3, [r7, #4]
 800a230:	3303      	adds	r3, #3
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	429a      	cmp	r2, r3
 800a238:	d306      	bcc.n	800a248 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a23a:	8afa      	ldrh	r2, [r7, #22]
 800a23c:	88bb      	ldrh	r3, [r7, #4]
 800a23e:	3303      	adds	r3, #3
 800a240:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a244:	429a      	cmp	r2, r3
 800a246:	d201      	bcs.n	800a24c <pbuf_alloc+0x160>
        return NULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	e035      	b.n	800a2b8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a24c:	8afb      	ldrh	r3, [r7, #22]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff fa64 	bl	800971c <mem_malloc>
 800a254:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <pbuf_alloc+0x174>
        return NULL;
 800a25c:	2300      	movs	r3, #0
 800a25e:	e02b      	b.n	800a2b8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a262:	3310      	adds	r3, #16
 800a264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a266:	4413      	add	r3, r2
 800a268:	3303      	adds	r3, #3
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	4618      	mov	r0, r3
 800a270:	88b9      	ldrh	r1, [r7, #4]
 800a272:	88ba      	ldrh	r2, [r7, #4]
 800a274:	2300      	movs	r3, #0
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	887b      	ldrh	r3, [r7, #2]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	460b      	mov	r3, r1
 800a27e:	4601      	mov	r1, r0
 800a280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a282:	f7ff ff09 	bl	800a098 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f003 0303 	and.w	r3, r3, #3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d010      	beq.n	800a2b4 <pbuf_alloc+0x1c8>
 800a292:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <pbuf_alloc+0x1d4>)
 800a294:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a298:	490d      	ldr	r1, [pc, #52]	; (800a2d0 <pbuf_alloc+0x1e4>)
 800a29a:	480b      	ldr	r0, [pc, #44]	; (800a2c8 <pbuf_alloc+0x1dc>)
 800a29c:	f009 f87e 	bl	801339c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a2a0:	e008      	b.n	800a2b4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a2a2:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <pbuf_alloc+0x1d4>)
 800a2a4:	f240 1227 	movw	r2, #295	; 0x127
 800a2a8:	490a      	ldr	r1, [pc, #40]	; (800a2d4 <pbuf_alloc+0x1e8>)
 800a2aa:	4807      	ldr	r0, [pc, #28]	; (800a2c8 <pbuf_alloc+0x1dc>)
 800a2ac:	f009 f876 	bl	801339c <iprintf>
      return NULL;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e001      	b.n	800a2b8 <pbuf_alloc+0x1cc>
      break;
 800a2b4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3728      	adds	r7, #40	; 0x28
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	08014db4 	.word	0x08014db4
 800a2c4:	08014de4 	.word	0x08014de4
 800a2c8:	08014e14 	.word	0x08014e14
 800a2cc:	08014e3c 	.word	0x08014e3c
 800a2d0:	08014e70 	.word	0x08014e70
 800a2d4:	08014e9c 	.word	0x08014e9c

0800a2d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	807b      	strh	r3, [r7, #2]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a2e8:	883b      	ldrh	r3, [r7, #0]
 800a2ea:	2b41      	cmp	r3, #65	; 0x41
 800a2ec:	d009      	beq.n	800a302 <pbuf_alloc_reference+0x2a>
 800a2ee:	883b      	ldrh	r3, [r7, #0]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d006      	beq.n	800a302 <pbuf_alloc_reference+0x2a>
 800a2f4:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <pbuf_alloc_reference+0x5c>)
 800a2f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a2fa:	490f      	ldr	r1, [pc, #60]	; (800a338 <pbuf_alloc_reference+0x60>)
 800a2fc:	480f      	ldr	r0, [pc, #60]	; (800a33c <pbuf_alloc_reference+0x64>)
 800a2fe:	f009 f84d 	bl	801339c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a302:	2007      	movs	r0, #7
 800a304:	f7ff fb78 	bl	80099f8 <memp_malloc>
 800a308:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a310:	2300      	movs	r3, #0
 800a312:	e00b      	b.n	800a32c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a314:	8879      	ldrh	r1, [r7, #2]
 800a316:	887a      	ldrh	r2, [r7, #2]
 800a318:	2300      	movs	r3, #0
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	883b      	ldrh	r3, [r7, #0]
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	460b      	mov	r3, r1
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff feb7 	bl	800a098 <pbuf_init_alloced_pbuf>
  return p;
 800a32a:	68fb      	ldr	r3, [r7, #12]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	08014db4 	.word	0x08014db4
 800a338:	08014eb8 	.word	0x08014eb8
 800a33c:	08014e14 	.word	0x08014e14

0800a340 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af02      	add	r7, sp, #8
 800a346:	607b      	str	r3, [r7, #4]
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]
 800a34c:	460b      	mov	r3, r1
 800a34e:	81bb      	strh	r3, [r7, #12]
 800a350:	4613      	mov	r3, r2
 800a352:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a358:	8a7b      	ldrh	r3, [r7, #18]
 800a35a:	3303      	adds	r3, #3
 800a35c:	f023 0203 	bic.w	r2, r3, #3
 800a360:	89bb      	ldrh	r3, [r7, #12]
 800a362:	441a      	add	r2, r3
 800a364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a366:	429a      	cmp	r2, r3
 800a368:	d901      	bls.n	800a36e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	e018      	b.n	800a3a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a36e:	6a3b      	ldr	r3, [r7, #32]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d007      	beq.n	800a384 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a374:	8a7b      	ldrh	r3, [r7, #18]
 800a376:	3303      	adds	r3, #3
 800a378:	f023 0303 	bic.w	r3, r3, #3
 800a37c:	6a3a      	ldr	r2, [r7, #32]
 800a37e:	4413      	add	r3, r2
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	e001      	b.n	800a388 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	89b9      	ldrh	r1, [r7, #12]
 800a38c:	89ba      	ldrh	r2, [r7, #12]
 800a38e:	2302      	movs	r3, #2
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	897b      	ldrh	r3, [r7, #10]
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	460b      	mov	r3, r1
 800a398:	6979      	ldr	r1, [r7, #20]
 800a39a:	f7ff fe7d 	bl	800a098 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a39e:	687b      	ldr	r3, [r7, #4]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <pbuf_realloc+0x20>
 800a3ba:	4b3a      	ldr	r3, [pc, #232]	; (800a4a4 <pbuf_realloc+0xfc>)
 800a3bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a3c0:	4939      	ldr	r1, [pc, #228]	; (800a4a8 <pbuf_realloc+0x100>)
 800a3c2:	483a      	ldr	r0, [pc, #232]	; (800a4ac <pbuf_realloc+0x104>)
 800a3c4:	f008 ffea 	bl	801339c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	891b      	ldrh	r3, [r3, #8]
 800a3cc:	887a      	ldrh	r2, [r7, #2]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d263      	bcs.n	800a49a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	891a      	ldrh	r2, [r3, #8]
 800a3d6:	887b      	ldrh	r3, [r7, #2]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a3dc:	887b      	ldrh	r3, [r7, #2]
 800a3de:	817b      	strh	r3, [r7, #10]
  q = p;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a3e4:	e018      	b.n	800a418 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	895b      	ldrh	r3, [r3, #10]
 800a3ea:	897a      	ldrh	r2, [r7, #10]
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	891a      	ldrh	r2, [r3, #8]
 800a3f4:	893b      	ldrh	r3, [r7, #8]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <pbuf_realloc+0x70>
 800a40a:	4b26      	ldr	r3, [pc, #152]	; (800a4a4 <pbuf_realloc+0xfc>)
 800a40c:	f240 12af 	movw	r2, #431	; 0x1af
 800a410:	4927      	ldr	r1, [pc, #156]	; (800a4b0 <pbuf_realloc+0x108>)
 800a412:	4826      	ldr	r0, [pc, #152]	; (800a4ac <pbuf_realloc+0x104>)
 800a414:	f008 ffc2 	bl	801339c <iprintf>
  while (rem_len > q->len) {
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	895b      	ldrh	r3, [r3, #10]
 800a41c:	897a      	ldrh	r2, [r7, #10]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d8e1      	bhi.n	800a3e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	7b1b      	ldrb	r3, [r3, #12]
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d121      	bne.n	800a472 <pbuf_realloc+0xca>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	895b      	ldrh	r3, [r3, #10]
 800a432:	897a      	ldrh	r2, [r7, #10]
 800a434:	429a      	cmp	r2, r3
 800a436:	d01c      	beq.n	800a472 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	7b5b      	ldrb	r3, [r3, #13]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d116      	bne.n	800a472 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	897b      	ldrh	r3, [r7, #10]
 800a450:	4413      	add	r3, r2
 800a452:	b29b      	uxth	r3, r3
 800a454:	4619      	mov	r1, r3
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7ff f864 	bl	8009524 <mem_trim>
 800a45c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d106      	bne.n	800a472 <pbuf_realloc+0xca>
 800a464:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <pbuf_realloc+0xfc>)
 800a466:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a46a:	4912      	ldr	r1, [pc, #72]	; (800a4b4 <pbuf_realloc+0x10c>)
 800a46c:	480f      	ldr	r0, [pc, #60]	; (800a4ac <pbuf_realloc+0x104>)
 800a46e:	f008 ff95 	bl	801339c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	897a      	ldrh	r2, [r7, #10]
 800a476:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	895a      	ldrh	r2, [r3, #10]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d004      	beq.n	800a492 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 f911 	bl	800a6b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	e000      	b.n	800a49c <pbuf_realloc+0xf4>
    return;
 800a49a:	bf00      	nop

}
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	08014db4 	.word	0x08014db4
 800a4a8:	08014ecc 	.word	0x08014ecc
 800a4ac:	08014e14 	.word	0x08014e14
 800a4b0:	08014ee4 	.word	0x08014ee4
 800a4b4:	08014efc 	.word	0x08014efc

0800a4b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d106      	bne.n	800a4da <pbuf_add_header_impl+0x22>
 800a4cc:	4b2b      	ldr	r3, [pc, #172]	; (800a57c <pbuf_add_header_impl+0xc4>)
 800a4ce:	f240 12df 	movw	r2, #479	; 0x1df
 800a4d2:	492b      	ldr	r1, [pc, #172]	; (800a580 <pbuf_add_header_impl+0xc8>)
 800a4d4:	482b      	ldr	r0, [pc, #172]	; (800a584 <pbuf_add_header_impl+0xcc>)
 800a4d6:	f008 ff61 	bl	801339c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d003      	beq.n	800a4e8 <pbuf_add_header_impl+0x30>
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e6:	d301      	bcc.n	800a4ec <pbuf_add_header_impl+0x34>
    return 1;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e043      	b.n	800a574 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <pbuf_add_header_impl+0x3e>
    return 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e03e      	b.n	800a574 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	891a      	ldrh	r2, [r3, #8]
 800a4fe:	8a7b      	ldrh	r3, [r7, #18]
 800a500:	4413      	add	r3, r2
 800a502:	b29b      	uxth	r3, r3
 800a504:	8a7a      	ldrh	r2, [r7, #18]
 800a506:	429a      	cmp	r2, r3
 800a508:	d901      	bls.n	800a50e <pbuf_add_header_impl+0x56>
    return 1;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e032      	b.n	800a574 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	7b1b      	ldrb	r3, [r3, #12]
 800a512:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a514:	8a3b      	ldrh	r3, [r7, #16]
 800a516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00c      	beq.n	800a538 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	425b      	negs	r3, r3
 800a526:	4413      	add	r3, r2
 800a528:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3310      	adds	r3, #16
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	429a      	cmp	r2, r3
 800a532:	d20d      	bcs.n	800a550 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a534:	2301      	movs	r3, #1
 800a536:	e01d      	b.n	800a574 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d006      	beq.n	800a54c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	425b      	negs	r3, r3
 800a546:	4413      	add	r3, r2
 800a548:	617b      	str	r3, [r7, #20]
 800a54a:	e001      	b.n	800a550 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e011      	b.n	800a574 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	895a      	ldrh	r2, [r3, #10]
 800a55a:	8a7b      	ldrh	r3, [r7, #18]
 800a55c:	4413      	add	r3, r2
 800a55e:	b29a      	uxth	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	891a      	ldrh	r2, [r3, #8]
 800a568:	8a7b      	ldrh	r3, [r7, #18]
 800a56a:	4413      	add	r3, r2
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	811a      	strh	r2, [r3, #8]


  return 0;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	08014db4 	.word	0x08014db4
 800a580:	08014f18 	.word	0x08014f18
 800a584:	08014e14 	.word	0x08014e14

0800a588 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a592:	2200      	movs	r2, #0
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff ff8e 	bl	800a4b8 <pbuf_add_header_impl>
 800a59c:	4603      	mov	r3, r0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <pbuf_remove_header+0x1e>
 800a5b8:	4b20      	ldr	r3, [pc, #128]	; (800a63c <pbuf_remove_header+0x94>)
 800a5ba:	f240 224b 	movw	r2, #587	; 0x24b
 800a5be:	4920      	ldr	r1, [pc, #128]	; (800a640 <pbuf_remove_header+0x98>)
 800a5c0:	4820      	ldr	r0, [pc, #128]	; (800a644 <pbuf_remove_header+0x9c>)
 800a5c2:	f008 feeb 	bl	801339c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <pbuf_remove_header+0x2c>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d2:	d301      	bcc.n	800a5d8 <pbuf_remove_header+0x30>
    return 1;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e02c      	b.n	800a632 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <pbuf_remove_header+0x3a>
    return 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e027      	b.n	800a632 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	895b      	ldrh	r3, [r3, #10]
 800a5ea:	89fa      	ldrh	r2, [r7, #14]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d908      	bls.n	800a602 <pbuf_remove_header+0x5a>
 800a5f0:	4b12      	ldr	r3, [pc, #72]	; (800a63c <pbuf_remove_header+0x94>)
 800a5f2:	f240 2255 	movw	r2, #597	; 0x255
 800a5f6:	4914      	ldr	r1, [pc, #80]	; (800a648 <pbuf_remove_header+0xa0>)
 800a5f8:	4812      	ldr	r0, [pc, #72]	; (800a644 <pbuf_remove_header+0x9c>)
 800a5fa:	f008 fecf 	bl	801339c <iprintf>
 800a5fe:	2301      	movs	r3, #1
 800a600:	e017      	b.n	800a632 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	441a      	add	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	895a      	ldrh	r2, [r3, #10]
 800a618:	89fb      	ldrh	r3, [r7, #14]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	891a      	ldrh	r2, [r3, #8]
 800a626:	89fb      	ldrh	r3, [r7, #14]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	08014db4 	.word	0x08014db4
 800a640:	08014f18 	.word	0x08014f18
 800a644:	08014e14 	.word	0x08014e14
 800a648:	08014f24 	.word	0x08014f24

0800a64c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	807b      	strh	r3, [r7, #2]
 800a658:	4613      	mov	r3, r2
 800a65a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a65c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a660:	2b00      	cmp	r3, #0
 800a662:	da08      	bge.n	800a676 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a664:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a668:	425b      	negs	r3, r3
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff ff9b 	bl	800a5a8 <pbuf_remove_header>
 800a672:	4603      	mov	r3, r0
 800a674:	e007      	b.n	800a686 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a676:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a67a:	787a      	ldrb	r2, [r7, #1]
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff ff1a 	bl	800a4b8 <pbuf_add_header_impl>
 800a684:	4603      	mov	r3, r0
  }
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	460b      	mov	r3, r1
 800a698:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a69a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff ffd2 	bl	800a64c <pbuf_header_impl>
 800a6a8:	4603      	mov	r3, r0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10b      	bne.n	800a6da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <pbuf_free+0x22>
 800a6c8:	4b38      	ldr	r3, [pc, #224]	; (800a7ac <pbuf_free+0xf8>)
 800a6ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a6ce:	4938      	ldr	r1, [pc, #224]	; (800a7b0 <pbuf_free+0xfc>)
 800a6d0:	4838      	ldr	r0, [pc, #224]	; (800a7b4 <pbuf_free+0x100>)
 800a6d2:	f008 fe63 	bl	801339c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	e063      	b.n	800a7a2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a6de:	e05c      	b.n	800a79a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	7b9b      	ldrb	r3, [r3, #14]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <pbuf_free+0x42>
 800a6e8:	4b30      	ldr	r3, [pc, #192]	; (800a7ac <pbuf_free+0xf8>)
 800a6ea:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a6ee:	4932      	ldr	r1, [pc, #200]	; (800a7b8 <pbuf_free+0x104>)
 800a6f0:	4830      	ldr	r0, [pc, #192]	; (800a7b4 <pbuf_free+0x100>)
 800a6f2:	f008 fe53 	bl	801339c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7b9b      	ldrb	r3, [r3, #14]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	739a      	strb	r2, [r3, #14]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	7b9b      	ldrb	r3, [r3, #14]
 800a706:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a708:	7dbb      	ldrb	r3, [r7, #22]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d143      	bne.n	800a796 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7b1b      	ldrb	r3, [r3, #12]
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	7b5b      	ldrb	r3, [r3, #13]
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d011      	beq.n	800a74e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <pbuf_free+0x90>
 800a736:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <pbuf_free+0xf8>)
 800a738:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a73c:	491f      	ldr	r1, [pc, #124]	; (800a7bc <pbuf_free+0x108>)
 800a73e:	481d      	ldr	r0, [pc, #116]	; (800a7b4 <pbuf_free+0x100>)
 800a740:	f008 fe2c 	bl	801339c <iprintf>
        pc->custom_free_function(p);
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	4798      	blx	r3
 800a74c:	e01d      	b.n	800a78a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	2b02      	cmp	r3, #2
 800a752:	d104      	bne.n	800a75e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	2008      	movs	r0, #8
 800a758:	f7ff f99a 	bl	8009a90 <memp_free>
 800a75c:	e015      	b.n	800a78a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d104      	bne.n	800a76e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a764:	6879      	ldr	r1, [r7, #4]
 800a766:	2007      	movs	r0, #7
 800a768:	f7ff f992 	bl	8009a90 <memp_free>
 800a76c:	e00d      	b.n	800a78a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d103      	bne.n	800a77c <pbuf_free+0xc8>
          mem_free(p);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7fe fe6b 	bl	8009450 <mem_free>
 800a77a:	e006      	b.n	800a78a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a77c:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <pbuf_free+0xf8>)
 800a77e:	f240 320f 	movw	r2, #783	; 0x30f
 800a782:	490f      	ldr	r1, [pc, #60]	; (800a7c0 <pbuf_free+0x10c>)
 800a784:	480b      	ldr	r0, [pc, #44]	; (800a7b4 <pbuf_free+0x100>)
 800a786:	f008 fe09 	bl	801339c <iprintf>
        }
      }
      count++;
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	3301      	adds	r3, #1
 800a78e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	607b      	str	r3, [r7, #4]
 800a794:	e001      	b.n	800a79a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a796:	2300      	movs	r3, #0
 800a798:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d19f      	bne.n	800a6e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	08014db4 	.word	0x08014db4
 800a7b0:	08014f18 	.word	0x08014f18
 800a7b4:	08014e14 	.word	0x08014e14
 800a7b8:	08014f44 	.word	0x08014f44
 800a7bc:	08014f5c 	.word	0x08014f5c
 800a7c0:	08014f80 	.word	0x08014f80

0800a7c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a7d0:	e005      	b.n	800a7de <pbuf_clen+0x1a>
    ++len;
 800a7d2:	89fb      	ldrh	r3, [r7, #14]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1f6      	bne.n	800a7d2 <pbuf_clen+0xe>
  }
  return len;
 800a7e4:	89fb      	ldrh	r3, [r7, #14]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d010      	beq.n	800a824 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	7b9b      	ldrb	r3, [r3, #14]
 800a806:	3301      	adds	r3, #1
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	7b9b      	ldrb	r3, [r3, #14]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d106      	bne.n	800a824 <pbuf_ref+0x30>
 800a816:	4b05      	ldr	r3, [pc, #20]	; (800a82c <pbuf_ref+0x38>)
 800a818:	f240 3242 	movw	r2, #834	; 0x342
 800a81c:	4904      	ldr	r1, [pc, #16]	; (800a830 <pbuf_ref+0x3c>)
 800a81e:	4805      	ldr	r0, [pc, #20]	; (800a834 <pbuf_ref+0x40>)
 800a820:	f008 fdbc 	bl	801339c <iprintf>
  }
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	08014db4 	.word	0x08014db4
 800a830:	08014f94 	.word	0x08014f94
 800a834:	08014e14 	.word	0x08014e14

0800a838 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <pbuf_cat+0x16>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d107      	bne.n	800a85e <pbuf_cat+0x26>
 800a84e:	4b20      	ldr	r3, [pc, #128]	; (800a8d0 <pbuf_cat+0x98>)
 800a850:	f240 3259 	movw	r2, #857	; 0x359
 800a854:	491f      	ldr	r1, [pc, #124]	; (800a8d4 <pbuf_cat+0x9c>)
 800a856:	4820      	ldr	r0, [pc, #128]	; (800a8d8 <pbuf_cat+0xa0>)
 800a858:	f008 fda0 	bl	801339c <iprintf>
 800a85c:	e034      	b.n	800a8c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	e00a      	b.n	800a87a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	891a      	ldrh	r2, [r3, #8]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	891b      	ldrh	r3, [r3, #8]
 800a86c:	4413      	add	r3, r2
 800a86e:	b29a      	uxth	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1f0      	bne.n	800a864 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	891a      	ldrh	r2, [r3, #8]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	895b      	ldrh	r3, [r3, #10]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d006      	beq.n	800a89c <pbuf_cat+0x64>
 800a88e:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <pbuf_cat+0x98>)
 800a890:	f240 3262 	movw	r2, #866	; 0x362
 800a894:	4911      	ldr	r1, [pc, #68]	; (800a8dc <pbuf_cat+0xa4>)
 800a896:	4810      	ldr	r0, [pc, #64]	; (800a8d8 <pbuf_cat+0xa0>)
 800a898:	f008 fd80 	bl	801339c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d006      	beq.n	800a8b2 <pbuf_cat+0x7a>
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <pbuf_cat+0x98>)
 800a8a6:	f240 3263 	movw	r2, #867	; 0x363
 800a8aa:	490d      	ldr	r1, [pc, #52]	; (800a8e0 <pbuf_cat+0xa8>)
 800a8ac:	480a      	ldr	r0, [pc, #40]	; (800a8d8 <pbuf_cat+0xa0>)
 800a8ae:	f008 fd75 	bl	801339c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	891a      	ldrh	r2, [r3, #8]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	891b      	ldrh	r3, [r3, #8]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	08014db4 	.word	0x08014db4
 800a8d4:	08014fa8 	.word	0x08014fa8
 800a8d8:	08014e14 	.word	0x08014e14
 800a8dc:	08014fe0 	.word	0x08014fe0
 800a8e0:	08015010 	.word	0x08015010

0800a8e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff ffa1 	bl	800a838 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a8f6:	6838      	ldr	r0, [r7, #0]
 800a8f8:	f7ff ff7c 	bl	800a7f4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a90e:	2300      	movs	r3, #0
 800a910:	617b      	str	r3, [r7, #20]
 800a912:	2300      	movs	r3, #0
 800a914:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d008      	beq.n	800a92e <pbuf_copy+0x2a>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d005      	beq.n	800a92e <pbuf_copy+0x2a>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	891a      	ldrh	r2, [r3, #8]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	891b      	ldrh	r3, [r3, #8]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d209      	bcs.n	800a942 <pbuf_copy+0x3e>
 800a92e:	4b57      	ldr	r3, [pc, #348]	; (800aa8c <pbuf_copy+0x188>)
 800a930:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a934:	4956      	ldr	r1, [pc, #344]	; (800aa90 <pbuf_copy+0x18c>)
 800a936:	4857      	ldr	r0, [pc, #348]	; (800aa94 <pbuf_copy+0x190>)
 800a938:	f008 fd30 	bl	801339c <iprintf>
 800a93c:	f06f 030f 	mvn.w	r3, #15
 800a940:	e09f      	b.n	800aa82 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	895b      	ldrh	r3, [r3, #10]
 800a946:	461a      	mov	r2, r3
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	1ad2      	subs	r2, r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	895b      	ldrh	r3, [r3, #10]
 800a950:	4619      	mov	r1, r3
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	1acb      	subs	r3, r1, r3
 800a956:	429a      	cmp	r2, r3
 800a958:	d306      	bcc.n	800a968 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	895b      	ldrh	r3, [r3, #10]
 800a95e:	461a      	mov	r2, r3
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	e005      	b.n	800a974 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	895b      	ldrh	r3, [r3, #10]
 800a96c:	461a      	mov	r2, r3
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	18d0      	adds	r0, r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	4413      	add	r3, r2
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4619      	mov	r1, r3
 800a988:	f008 fcd8 	bl	801333c <memcpy>
    offset_to += len;
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4413      	add	r3, r2
 800a992:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	4413      	add	r3, r2
 800a99a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	895b      	ldrh	r3, [r3, #10]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d906      	bls.n	800a9b6 <pbuf_copy+0xb2>
 800a9a8:	4b38      	ldr	r3, [pc, #224]	; (800aa8c <pbuf_copy+0x188>)
 800a9aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a9ae:	493a      	ldr	r1, [pc, #232]	; (800aa98 <pbuf_copy+0x194>)
 800a9b0:	4838      	ldr	r0, [pc, #224]	; (800aa94 <pbuf_copy+0x190>)
 800a9b2:	f008 fcf3 	bl	801339c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	895b      	ldrh	r3, [r3, #10]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d906      	bls.n	800a9d0 <pbuf_copy+0xcc>
 800a9c2:	4b32      	ldr	r3, [pc, #200]	; (800aa8c <pbuf_copy+0x188>)
 800a9c4:	f240 32da 	movw	r2, #986	; 0x3da
 800a9c8:	4934      	ldr	r1, [pc, #208]	; (800aa9c <pbuf_copy+0x198>)
 800a9ca:	4832      	ldr	r0, [pc, #200]	; (800aa94 <pbuf_copy+0x190>)
 800a9cc:	f008 fce6 	bl	801339c <iprintf>
    if (offset_from >= p_from->len) {
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	895b      	ldrh	r3, [r3, #10]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d304      	bcc.n	800a9e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	895b      	ldrh	r3, [r3, #10]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d114      	bne.n	800aa1c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10c      	bne.n	800aa1c <pbuf_copy+0x118>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d009      	beq.n	800aa1c <pbuf_copy+0x118>
 800aa08:	4b20      	ldr	r3, [pc, #128]	; (800aa8c <pbuf_copy+0x188>)
 800aa0a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800aa0e:	4924      	ldr	r1, [pc, #144]	; (800aaa0 <pbuf_copy+0x19c>)
 800aa10:	4820      	ldr	r0, [pc, #128]	; (800aa94 <pbuf_copy+0x190>)
 800aa12:	f008 fcc3 	bl	801339c <iprintf>
 800aa16:	f06f 030f 	mvn.w	r3, #15
 800aa1a:	e032      	b.n	800aa82 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d013      	beq.n	800aa4a <pbuf_copy+0x146>
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	895a      	ldrh	r2, [r3, #10]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	891b      	ldrh	r3, [r3, #8]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d10d      	bne.n	800aa4a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <pbuf_copy+0x146>
 800aa36:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <pbuf_copy+0x188>)
 800aa38:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800aa3c:	4919      	ldr	r1, [pc, #100]	; (800aaa4 <pbuf_copy+0x1a0>)
 800aa3e:	4815      	ldr	r0, [pc, #84]	; (800aa94 <pbuf_copy+0x190>)
 800aa40:	f008 fcac 	bl	801339c <iprintf>
 800aa44:	f06f 0305 	mvn.w	r3, #5
 800aa48:	e01b      	b.n	800aa82 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d013      	beq.n	800aa78 <pbuf_copy+0x174>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	895a      	ldrh	r2, [r3, #10]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	891b      	ldrh	r3, [r3, #8]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d10d      	bne.n	800aa78 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d009      	beq.n	800aa78 <pbuf_copy+0x174>
 800aa64:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <pbuf_copy+0x188>)
 800aa66:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800aa6a:	490e      	ldr	r1, [pc, #56]	; (800aaa4 <pbuf_copy+0x1a0>)
 800aa6c:	4809      	ldr	r0, [pc, #36]	; (800aa94 <pbuf_copy+0x190>)
 800aa6e:	f008 fc95 	bl	801339c <iprintf>
 800aa72:	f06f 0305 	mvn.w	r3, #5
 800aa76:	e004      	b.n	800aa82 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f47f af61 	bne.w	800a942 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	08014db4 	.word	0x08014db4
 800aa90:	0801505c 	.word	0x0801505c
 800aa94:	08014e14 	.word	0x08014e14
 800aa98:	0801508c 	.word	0x0801508c
 800aa9c:	080150a4 	.word	0x080150a4
 800aaa0:	080150c0 	.word	0x080150c0
 800aaa4:	080150d0 	.word	0x080150d0

0800aaa8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	4611      	mov	r1, r2
 800aab4:	461a      	mov	r2, r3
 800aab6:	460b      	mov	r3, r1
 800aab8:	80fb      	strh	r3, [r7, #6]
 800aaba:	4613      	mov	r3, r2
 800aabc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d108      	bne.n	800aade <pbuf_copy_partial+0x36>
 800aacc:	4b2b      	ldr	r3, [pc, #172]	; (800ab7c <pbuf_copy_partial+0xd4>)
 800aace:	f240 420a 	movw	r2, #1034	; 0x40a
 800aad2:	492b      	ldr	r1, [pc, #172]	; (800ab80 <pbuf_copy_partial+0xd8>)
 800aad4:	482b      	ldr	r0, [pc, #172]	; (800ab84 <pbuf_copy_partial+0xdc>)
 800aad6:	f008 fc61 	bl	801339c <iprintf>
 800aada:	2300      	movs	r3, #0
 800aadc:	e04a      	b.n	800ab74 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d108      	bne.n	800aaf6 <pbuf_copy_partial+0x4e>
 800aae4:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <pbuf_copy_partial+0xd4>)
 800aae6:	f240 420b 	movw	r2, #1035	; 0x40b
 800aaea:	4927      	ldr	r1, [pc, #156]	; (800ab88 <pbuf_copy_partial+0xe0>)
 800aaec:	4825      	ldr	r0, [pc, #148]	; (800ab84 <pbuf_copy_partial+0xdc>)
 800aaee:	f008 fc55 	bl	801339c <iprintf>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e03e      	b.n	800ab74 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	61fb      	str	r3, [r7, #28]
 800aafa:	e034      	b.n	800ab66 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800aafc:	88bb      	ldrh	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <pbuf_copy_partial+0x70>
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	895b      	ldrh	r3, [r3, #10]
 800ab06:	88ba      	ldrh	r2, [r7, #4]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d305      	bcc.n	800ab18 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	895b      	ldrh	r3, [r3, #10]
 800ab10:	88ba      	ldrh	r2, [r7, #4]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	80bb      	strh	r3, [r7, #4]
 800ab16:	e023      	b.n	800ab60 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	895a      	ldrh	r2, [r3, #10]
 800ab1c:	88bb      	ldrh	r3, [r7, #4]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ab22:	8b3a      	ldrh	r2, [r7, #24]
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d901      	bls.n	800ab2e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ab2a:	88fb      	ldrh	r3, [r7, #6]
 800ab2c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ab2e:	8b7b      	ldrh	r3, [r7, #26]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	18d0      	adds	r0, r2, r3
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	88bb      	ldrh	r3, [r7, #4]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	8b3a      	ldrh	r2, [r7, #24]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	f008 fbfc 	bl	801333c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ab44:	8afa      	ldrh	r2, [r7, #22]
 800ab46:	8b3b      	ldrh	r3, [r7, #24]
 800ab48:	4413      	add	r3, r2
 800ab4a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ab4c:	8b7a      	ldrh	r2, [r7, #26]
 800ab4e:	8b3b      	ldrh	r3, [r7, #24]
 800ab50:	4413      	add	r3, r2
 800ab52:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ab54:	88fa      	ldrh	r2, [r7, #6]
 800ab56:	8b3b      	ldrh	r3, [r7, #24]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	61fb      	str	r3, [r7, #28]
 800ab66:	88fb      	ldrh	r3, [r7, #6]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <pbuf_copy_partial+0xca>
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1c4      	bne.n	800aafc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ab72:	8afb      	ldrh	r3, [r7, #22]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3720      	adds	r7, #32
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	08014db4 	.word	0x08014db4
 800ab80:	080150fc 	.word	0x080150fc
 800ab84:	08014e14 	.word	0x08014e14
 800ab88:	0801511c 	.word	0x0801511c

0800ab8c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	4613      	mov	r3, r2
 800ab98:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ab9a:	88fb      	ldrh	r3, [r7, #6]
 800ab9c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d109      	bne.n	800abbc <pbuf_take+0x30>
 800aba8:	4b3a      	ldr	r3, [pc, #232]	; (800ac94 <pbuf_take+0x108>)
 800abaa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800abae:	493a      	ldr	r1, [pc, #232]	; (800ac98 <pbuf_take+0x10c>)
 800abb0:	483a      	ldr	r0, [pc, #232]	; (800ac9c <pbuf_take+0x110>)
 800abb2:	f008 fbf3 	bl	801339c <iprintf>
 800abb6:	f06f 030f 	mvn.w	r3, #15
 800abba:	e067      	b.n	800ac8c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d109      	bne.n	800abd6 <pbuf_take+0x4a>
 800abc2:	4b34      	ldr	r3, [pc, #208]	; (800ac94 <pbuf_take+0x108>)
 800abc4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800abc8:	4935      	ldr	r1, [pc, #212]	; (800aca0 <pbuf_take+0x114>)
 800abca:	4834      	ldr	r0, [pc, #208]	; (800ac9c <pbuf_take+0x110>)
 800abcc:	f008 fbe6 	bl	801339c <iprintf>
 800abd0:	f06f 030f 	mvn.w	r3, #15
 800abd4:	e05a      	b.n	800ac8c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	891b      	ldrh	r3, [r3, #8]
 800abda:	88fa      	ldrh	r2, [r7, #6]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d909      	bls.n	800abf4 <pbuf_take+0x68>
 800abe0:	4b2c      	ldr	r3, [pc, #176]	; (800ac94 <pbuf_take+0x108>)
 800abe2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800abe6:	492f      	ldr	r1, [pc, #188]	; (800aca4 <pbuf_take+0x118>)
 800abe8:	482c      	ldr	r0, [pc, #176]	; (800ac9c <pbuf_take+0x110>)
 800abea:	f008 fbd7 	bl	801339c <iprintf>
 800abee:	f04f 33ff 	mov.w	r3, #4294967295
 800abf2:	e04b      	b.n	800ac8c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d007      	beq.n	800ac0a <pbuf_take+0x7e>
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d004      	beq.n	800ac0a <pbuf_take+0x7e>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	891b      	ldrh	r3, [r3, #8]
 800ac04:	88fa      	ldrh	r2, [r7, #6]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d902      	bls.n	800ac10 <pbuf_take+0x84>
    return ERR_ARG;
 800ac0a:	f06f 030f 	mvn.w	r3, #15
 800ac0e:	e03d      	b.n	800ac8c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	61fb      	str	r3, [r7, #28]
 800ac14:	e028      	b.n	800ac68 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d106      	bne.n	800ac2a <pbuf_take+0x9e>
 800ac1c:	4b1d      	ldr	r3, [pc, #116]	; (800ac94 <pbuf_take+0x108>)
 800ac1e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ac22:	4921      	ldr	r1, [pc, #132]	; (800aca8 <pbuf_take+0x11c>)
 800ac24:	481d      	ldr	r0, [pc, #116]	; (800ac9c <pbuf_take+0x110>)
 800ac26:	f008 fbb9 	bl	801339c <iprintf>
    buf_copy_len = total_copy_len;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	895b      	ldrh	r3, [r3, #10]
 800ac32:	461a      	mov	r2, r3
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d902      	bls.n	800ac40 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	895b      	ldrh	r3, [r3, #10]
 800ac3e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	6858      	ldr	r0, [r3, #4]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	4413      	add	r3, r2
 800ac4a:	69ba      	ldr	r2, [r7, #24]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	f008 fb75 	bl	801333c <memcpy>
    total_copy_len -= buf_copy_len;
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	4413      	add	r3, r2
 800ac60:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	61fb      	str	r3, [r7, #28]
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1d3      	bne.n	800ac16 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d103      	bne.n	800ac7c <pbuf_take+0xf0>
 800ac74:	88fb      	ldrh	r3, [r7, #6]
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d006      	beq.n	800ac8a <pbuf_take+0xfe>
 800ac7c:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <pbuf_take+0x108>)
 800ac7e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800ac82:	490a      	ldr	r1, [pc, #40]	; (800acac <pbuf_take+0x120>)
 800ac84:	4805      	ldr	r0, [pc, #20]	; (800ac9c <pbuf_take+0x110>)
 800ac86:	f008 fb89 	bl	801339c <iprintf>
  return ERR_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3720      	adds	r7, #32
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	08014db4 	.word	0x08014db4
 800ac98:	0801518c 	.word	0x0801518c
 800ac9c:	08014e14 	.word	0x08014e14
 800aca0:	080151a4 	.word	0x080151a4
 800aca4:	080151c0 	.word	0x080151c0
 800aca8:	080151e0 	.word	0x080151e0
 800acac:	080151f8 	.word	0x080151f8

0800acb0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	603a      	str	r2, [r7, #0]
 800acba:	71fb      	strb	r3, [r7, #7]
 800acbc:	460b      	mov	r3, r1
 800acbe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	8919      	ldrh	r1, [r3, #8]
 800acc4:	88ba      	ldrh	r2, [r7, #4]
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff fa0f 	bl	800a0ec <pbuf_alloc>
 800acce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <pbuf_clone+0x2a>
    return NULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	e011      	b.n	800acfe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff fe11 	bl	800a904 <pbuf_copy>
 800ace2:	4603      	mov	r3, r0
 800ace4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ace6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d006      	beq.n	800acfc <pbuf_clone+0x4c>
 800acee:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <pbuf_clone+0x58>)
 800acf0:	f240 5224 	movw	r2, #1316	; 0x524
 800acf4:	4905      	ldr	r1, [pc, #20]	; (800ad0c <pbuf_clone+0x5c>)
 800acf6:	4806      	ldr	r0, [pc, #24]	; (800ad10 <pbuf_clone+0x60>)
 800acf8:	f008 fb50 	bl	801339c <iprintf>
  return q;
 800acfc:	68fb      	ldr	r3, [r7, #12]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	08014db4 	.word	0x08014db4
 800ad0c:	08015228 	.word	0x08015228
 800ad10:	08014e14 	.word	0x08014e14

0800ad14 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ad18:	f008 fb58 	bl	80133cc <rand>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	4b01      	ldr	r3, [pc, #4]	; (800ad34 <tcp_init+0x20>)
 800ad2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ad30:	bf00      	nop
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	2000000e 	.word	0x2000000e

0800ad38 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	7d1b      	ldrb	r3, [r3, #20]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d105      	bne.n	800ad54 <tcp_free+0x1c>
 800ad48:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <tcp_free+0x2c>)
 800ad4a:	22d4      	movs	r2, #212	; 0xd4
 800ad4c:	4906      	ldr	r1, [pc, #24]	; (800ad68 <tcp_free+0x30>)
 800ad4e:	4807      	ldr	r0, [pc, #28]	; (800ad6c <tcp_free+0x34>)
 800ad50:	f008 fb24 	bl	801339c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	2001      	movs	r0, #1
 800ad58:	f7fe fe9a 	bl	8009a90 <memp_free>
}
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	080152b4 	.word	0x080152b4
 800ad68:	080152e4 	.word	0x080152e4
 800ad6c:	080152f8 	.word	0x080152f8

0800ad70 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7d1b      	ldrb	r3, [r3, #20]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d105      	bne.n	800ad8c <tcp_free_listen+0x1c>
 800ad80:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <tcp_free_listen+0x2c>)
 800ad82:	22df      	movs	r2, #223	; 0xdf
 800ad84:	4906      	ldr	r1, [pc, #24]	; (800ada0 <tcp_free_listen+0x30>)
 800ad86:	4807      	ldr	r0, [pc, #28]	; (800ada4 <tcp_free_listen+0x34>)
 800ad88:	f008 fb08 	bl	801339c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	2002      	movs	r0, #2
 800ad90:	f7fe fe7e 	bl	8009a90 <memp_free>
}
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	080152b4 	.word	0x080152b4
 800ada0:	08015320 	.word	0x08015320
 800ada4:	080152f8 	.word	0x080152f8

0800ada8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800adac:	f000 fea2 	bl	800baf4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <tcp_tmr+0x28>)
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <tcp_tmr+0x28>)
 800adba:	701a      	strb	r2, [r3, #0]
 800adbc:	4b04      	ldr	r3, [pc, #16]	; (800add0 <tcp_tmr+0x28>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800adc8:	f000 fb54 	bl	800b474 <tcp_slowtmr>
  }
}
 800adcc:	bf00      	nop
 800adce:	bd80      	pop	{r7, pc}
 800add0:	20008ec9 	.word	0x20008ec9

0800add4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d105      	bne.n	800adf0 <tcp_remove_listener+0x1c>
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <tcp_remove_listener+0x48>)
 800ade6:	22ff      	movs	r2, #255	; 0xff
 800ade8:	490d      	ldr	r1, [pc, #52]	; (800ae20 <tcp_remove_listener+0x4c>)
 800adea:	480e      	ldr	r0, [pc, #56]	; (800ae24 <tcp_remove_listener+0x50>)
 800adec:	f008 fad6 	bl	801339c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	e00a      	b.n	800ae0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d102      	bne.n	800ae06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1f1      	bne.n	800adf6 <tcp_remove_listener+0x22>
    }
  }
}
 800ae12:	bf00      	nop
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	080152b4 	.word	0x080152b4
 800ae20:	0801533c 	.word	0x0801533c
 800ae24:	080152f8 	.word	0x080152f8

0800ae28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d106      	bne.n	800ae44 <tcp_listen_closed+0x1c>
 800ae36:	4b14      	ldr	r3, [pc, #80]	; (800ae88 <tcp_listen_closed+0x60>)
 800ae38:	f240 1211 	movw	r2, #273	; 0x111
 800ae3c:	4913      	ldr	r1, [pc, #76]	; (800ae8c <tcp_listen_closed+0x64>)
 800ae3e:	4814      	ldr	r0, [pc, #80]	; (800ae90 <tcp_listen_closed+0x68>)
 800ae40:	f008 faac 	bl	801339c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	7d1b      	ldrb	r3, [r3, #20]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d006      	beq.n	800ae5a <tcp_listen_closed+0x32>
 800ae4c:	4b0e      	ldr	r3, [pc, #56]	; (800ae88 <tcp_listen_closed+0x60>)
 800ae4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ae52:	4910      	ldr	r1, [pc, #64]	; (800ae94 <tcp_listen_closed+0x6c>)
 800ae54:	480e      	ldr	r0, [pc, #56]	; (800ae90 <tcp_listen_closed+0x68>)
 800ae56:	f008 faa1 	bl	801339c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	e00b      	b.n	800ae78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ae60:	4a0d      	ldr	r2, [pc, #52]	; (800ae98 <tcp_listen_closed+0x70>)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff ffb1 	bl	800add4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3301      	adds	r3, #1
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d9f0      	bls.n	800ae60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ae7e:	bf00      	nop
 800ae80:	bf00      	nop
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	080152b4 	.word	0x080152b4
 800ae8c:	08015364 	.word	0x08015364
 800ae90:	080152f8 	.word	0x080152f8
 800ae94:	08015370 	.word	0x08015370
 800ae98:	08017290 	.word	0x08017290

0800ae9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ae9c:	b5b0      	push	{r4, r5, r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af04      	add	r7, sp, #16
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <tcp_close_shutdown+0x20>
 800aeae:	4b63      	ldr	r3, [pc, #396]	; (800b03c <tcp_close_shutdown+0x1a0>)
 800aeb0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800aeb4:	4962      	ldr	r1, [pc, #392]	; (800b040 <tcp_close_shutdown+0x1a4>)
 800aeb6:	4863      	ldr	r0, [pc, #396]	; (800b044 <tcp_close_shutdown+0x1a8>)
 800aeb8:	f008 fa70 	bl	801339c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aebc:	78fb      	ldrb	r3, [r7, #3]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d066      	beq.n	800af90 <tcp_close_shutdown+0xf4>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7d1b      	ldrb	r3, [r3, #20]
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	d003      	beq.n	800aed2 <tcp_close_shutdown+0x36>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	7d1b      	ldrb	r3, [r3, #20]
 800aece:	2b07      	cmp	r3, #7
 800aed0:	d15e      	bne.n	800af90 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d104      	bne.n	800aee4 <tcp_close_shutdown+0x48>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aede:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aee2:	d055      	beq.n	800af90 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	8b5b      	ldrh	r3, [r3, #26]
 800aee8:	f003 0310 	and.w	r3, r3, #16
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d106      	bne.n	800aefe <tcp_close_shutdown+0x62>
 800aef0:	4b52      	ldr	r3, [pc, #328]	; (800b03c <tcp_close_shutdown+0x1a0>)
 800aef2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800aef6:	4954      	ldr	r1, [pc, #336]	; (800b048 <tcp_close_shutdown+0x1ac>)
 800aef8:	4852      	ldr	r0, [pc, #328]	; (800b044 <tcp_close_shutdown+0x1a8>)
 800aefa:	f008 fa4f 	bl	801339c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800af06:	687d      	ldr	r5, [r7, #4]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3304      	adds	r3, #4
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	8ad2      	ldrh	r2, [r2, #22]
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	8b09      	ldrh	r1, [r1, #24]
 800af14:	9102      	str	r1, [sp, #8]
 800af16:	9201      	str	r2, [sp, #4]
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	462b      	mov	r3, r5
 800af1c:	4622      	mov	r2, r4
 800af1e:	4601      	mov	r1, r0
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f004 fe91 	bl	800fc48 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 f8c6 	bl	800c0b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800af2c:	4b47      	ldr	r3, [pc, #284]	; (800b04c <tcp_close_shutdown+0x1b0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	429a      	cmp	r2, r3
 800af34:	d105      	bne.n	800af42 <tcp_close_shutdown+0xa6>
 800af36:	4b45      	ldr	r3, [pc, #276]	; (800b04c <tcp_close_shutdown+0x1b0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	4a43      	ldr	r2, [pc, #268]	; (800b04c <tcp_close_shutdown+0x1b0>)
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	e013      	b.n	800af6a <tcp_close_shutdown+0xce>
 800af42:	4b42      	ldr	r3, [pc, #264]	; (800b04c <tcp_close_shutdown+0x1b0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	e00c      	b.n	800af64 <tcp_close_shutdown+0xc8>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d104      	bne.n	800af5e <tcp_close_shutdown+0xc2>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68da      	ldr	r2, [r3, #12]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	60da      	str	r2, [r3, #12]
 800af5c:	e005      	b.n	800af6a <tcp_close_shutdown+0xce>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	60fb      	str	r3, [r7, #12]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1ef      	bne.n	800af4a <tcp_close_shutdown+0xae>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	60da      	str	r2, [r3, #12]
 800af70:	4b37      	ldr	r3, [pc, #220]	; (800b050 <tcp_close_shutdown+0x1b4>)
 800af72:	2201      	movs	r2, #1
 800af74:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800af76:	4b37      	ldr	r3, [pc, #220]	; (800b054 <tcp_close_shutdown+0x1b8>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d102      	bne.n	800af86 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800af80:	f003 fd5e 	bl	800ea40 <tcp_trigger_input_pcb_close>
 800af84:	e002      	b.n	800af8c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff fed6 	bl	800ad38 <tcp_free>
      }
      return ERR_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	e050      	b.n	800b032 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	7d1b      	ldrb	r3, [r3, #20]
 800af94:	2b02      	cmp	r3, #2
 800af96:	d03b      	beq.n	800b010 <tcp_close_shutdown+0x174>
 800af98:	2b02      	cmp	r3, #2
 800af9a:	dc44      	bgt.n	800b026 <tcp_close_shutdown+0x18a>
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <tcp_close_shutdown+0x10a>
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d02a      	beq.n	800affa <tcp_close_shutdown+0x15e>
 800afa4:	e03f      	b.n	800b026 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	8adb      	ldrh	r3, [r3, #22]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d021      	beq.n	800aff2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800afae:	4b2a      	ldr	r3, [pc, #168]	; (800b058 <tcp_close_shutdown+0x1bc>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d105      	bne.n	800afc4 <tcp_close_shutdown+0x128>
 800afb8:	4b27      	ldr	r3, [pc, #156]	; (800b058 <tcp_close_shutdown+0x1bc>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	4a26      	ldr	r2, [pc, #152]	; (800b058 <tcp_close_shutdown+0x1bc>)
 800afc0:	6013      	str	r3, [r2, #0]
 800afc2:	e013      	b.n	800afec <tcp_close_shutdown+0x150>
 800afc4:	4b24      	ldr	r3, [pc, #144]	; (800b058 <tcp_close_shutdown+0x1bc>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	60bb      	str	r3, [r7, #8]
 800afca:	e00c      	b.n	800afe6 <tcp_close_shutdown+0x14a>
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d104      	bne.n	800afe0 <tcp_close_shutdown+0x144>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	60da      	str	r2, [r3, #12]
 800afde:	e005      	b.n	800afec <tcp_close_shutdown+0x150>
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	60bb      	str	r3, [r7, #8]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1ef      	bne.n	800afcc <tcp_close_shutdown+0x130>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fea0 	bl	800ad38 <tcp_free>
      break;
 800aff8:	e01a      	b.n	800b030 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff ff14 	bl	800ae28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	4816      	ldr	r0, [pc, #88]	; (800b05c <tcp_close_shutdown+0x1c0>)
 800b004:	f001 f8a8 	bl	800c158 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff feb1 	bl	800ad70 <tcp_free_listen>
      break;
 800b00e:	e00f      	b.n	800b030 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	480e      	ldr	r0, [pc, #56]	; (800b04c <tcp_close_shutdown+0x1b0>)
 800b014:	f001 f8a0 	bl	800c158 <tcp_pcb_remove>
 800b018:	4b0d      	ldr	r3, [pc, #52]	; (800b050 <tcp_close_shutdown+0x1b4>)
 800b01a:	2201      	movs	r2, #1
 800b01c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff fe8a 	bl	800ad38 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b024:	e004      	b.n	800b030 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f81a 	bl	800b060 <tcp_close_shutdown_fin>
 800b02c:	4603      	mov	r3, r0
 800b02e:	e000      	b.n	800b032 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bdb0      	pop	{r4, r5, r7, pc}
 800b03a:	bf00      	nop
 800b03c:	080152b4 	.word	0x080152b4
 800b040:	08015388 	.word	0x08015388
 800b044:	080152f8 	.word	0x080152f8
 800b048:	080153a8 	.word	0x080153a8
 800b04c:	20008ec0 	.word	0x20008ec0
 800b050:	20008ec8 	.word	0x20008ec8
 800b054:	20008f00 	.word	0x20008f00
 800b058:	20008eb8 	.word	0x20008eb8
 800b05c:	20008ebc 	.word	0x20008ebc

0800b060 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d106      	bne.n	800b07c <tcp_close_shutdown_fin+0x1c>
 800b06e:	4b2e      	ldr	r3, [pc, #184]	; (800b128 <tcp_close_shutdown_fin+0xc8>)
 800b070:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b074:	492d      	ldr	r1, [pc, #180]	; (800b12c <tcp_close_shutdown_fin+0xcc>)
 800b076:	482e      	ldr	r0, [pc, #184]	; (800b130 <tcp_close_shutdown_fin+0xd0>)
 800b078:	f008 f990 	bl	801339c <iprintf>

  switch (pcb->state) {
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7d1b      	ldrb	r3, [r3, #20]
 800b080:	2b07      	cmp	r3, #7
 800b082:	d020      	beq.n	800b0c6 <tcp_close_shutdown_fin+0x66>
 800b084:	2b07      	cmp	r3, #7
 800b086:	dc2b      	bgt.n	800b0e0 <tcp_close_shutdown_fin+0x80>
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d002      	beq.n	800b092 <tcp_close_shutdown_fin+0x32>
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d00d      	beq.n	800b0ac <tcp_close_shutdown_fin+0x4c>
 800b090:	e026      	b.n	800b0e0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f003 fee6 	bl	800ee64 <tcp_send_fin>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d11f      	bne.n	800b0e4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2205      	movs	r2, #5
 800b0a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b0aa:	e01b      	b.n	800b0e4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f003 fed9 	bl	800ee64 <tcp_send_fin>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d114      	bne.n	800b0e8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2205      	movs	r2, #5
 800b0c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b0c4:	e010      	b.n	800b0e8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f003 fecc 	bl	800ee64 <tcp_send_fin>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d109      	bne.n	800b0ec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2209      	movs	r2, #9
 800b0dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b0de:	e005      	b.n	800b0ec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e01c      	b.n	800b11e <tcp_close_shutdown_fin+0xbe>
      break;
 800b0e4:	bf00      	nop
 800b0e6:	e002      	b.n	800b0ee <tcp_close_shutdown_fin+0x8e>
      break;
 800b0e8:	bf00      	nop
 800b0ea:	e000      	b.n	800b0ee <tcp_close_shutdown_fin+0x8e>
      break;
 800b0ec:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b0ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d103      	bne.n	800b0fe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f003 fff2 	bl	800f0e0 <tcp_output>
 800b0fc:	e00d      	b.n	800b11a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b106:	d108      	bne.n	800b11a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	8b5b      	ldrh	r3, [r3, #26]
 800b10c:	f043 0308 	orr.w	r3, r3, #8
 800b110:	b29a      	uxth	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	e001      	b.n	800b11e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	080152b4 	.word	0x080152b4
 800b12c:	08015364 	.word	0x08015364
 800b130:	080152f8 	.word	0x080152f8

0800b134 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d109      	bne.n	800b156 <tcp_close+0x22>
 800b142:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <tcp_close+0x4c>)
 800b144:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b148:	490e      	ldr	r1, [pc, #56]	; (800b184 <tcp_close+0x50>)
 800b14a:	480f      	ldr	r0, [pc, #60]	; (800b188 <tcp_close+0x54>)
 800b14c:	f008 f926 	bl	801339c <iprintf>
 800b150:	f06f 030f 	mvn.w	r3, #15
 800b154:	e00f      	b.n	800b176 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	7d1b      	ldrb	r3, [r3, #20]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d006      	beq.n	800b16c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	8b5b      	ldrh	r3, [r3, #26]
 800b162:	f043 0310 	orr.w	r3, r3, #16
 800b166:	b29a      	uxth	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b16c:	2101      	movs	r1, #1
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7ff fe94 	bl	800ae9c <tcp_close_shutdown>
 800b174:	4603      	mov	r3, r0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	080152b4 	.word	0x080152b4
 800b184:	080153c4 	.word	0x080153c4
 800b188:	080152f8 	.word	0x080152f8

0800b18c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b08e      	sub	sp, #56	; 0x38
 800b190:	af04      	add	r7, sp, #16
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d107      	bne.n	800b1ac <tcp_abandon+0x20>
 800b19c:	4b52      	ldr	r3, [pc, #328]	; (800b2e8 <tcp_abandon+0x15c>)
 800b19e:	f240 223d 	movw	r2, #573	; 0x23d
 800b1a2:	4952      	ldr	r1, [pc, #328]	; (800b2ec <tcp_abandon+0x160>)
 800b1a4:	4852      	ldr	r0, [pc, #328]	; (800b2f0 <tcp_abandon+0x164>)
 800b1a6:	f008 f8f9 	bl	801339c <iprintf>
 800b1aa:	e099      	b.n	800b2e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	7d1b      	ldrb	r3, [r3, #20]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d106      	bne.n	800b1c2 <tcp_abandon+0x36>
 800b1b4:	4b4c      	ldr	r3, [pc, #304]	; (800b2e8 <tcp_abandon+0x15c>)
 800b1b6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b1ba:	494e      	ldr	r1, [pc, #312]	; (800b2f4 <tcp_abandon+0x168>)
 800b1bc:	484c      	ldr	r0, [pc, #304]	; (800b2f0 <tcp_abandon+0x164>)
 800b1be:	f008 f8ed 	bl	801339c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	7d1b      	ldrb	r3, [r3, #20]
 800b1c6:	2b0a      	cmp	r3, #10
 800b1c8:	d107      	bne.n	800b1da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	484a      	ldr	r0, [pc, #296]	; (800b2f8 <tcp_abandon+0x16c>)
 800b1ce:	f000 ffc3 	bl	800c158 <tcp_pcb_remove>
    tcp_free(pcb);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff fdb0 	bl	800ad38 <tcp_free>
 800b1d8:	e082      	b.n	800b2e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7d1b      	ldrb	r3, [r3, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d126      	bne.n	800b252 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	8adb      	ldrh	r3, [r3, #22]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d02e      	beq.n	800b26a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b20c:	4b3b      	ldr	r3, [pc, #236]	; (800b2fc <tcp_abandon+0x170>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	429a      	cmp	r2, r3
 800b214:	d105      	bne.n	800b222 <tcp_abandon+0x96>
 800b216:	4b39      	ldr	r3, [pc, #228]	; (800b2fc <tcp_abandon+0x170>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	4a37      	ldr	r2, [pc, #220]	; (800b2fc <tcp_abandon+0x170>)
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	e013      	b.n	800b24a <tcp_abandon+0xbe>
 800b222:	4b36      	ldr	r3, [pc, #216]	; (800b2fc <tcp_abandon+0x170>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	61fb      	str	r3, [r7, #28]
 800b228:	e00c      	b.n	800b244 <tcp_abandon+0xb8>
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	429a      	cmp	r2, r3
 800b232:	d104      	bne.n	800b23e <tcp_abandon+0xb2>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	68da      	ldr	r2, [r3, #12]
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	60da      	str	r2, [r3, #12]
 800b23c:	e005      	b.n	800b24a <tcp_abandon+0xbe>
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	61fb      	str	r3, [r7, #28]
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1ef      	bne.n	800b22a <tcp_abandon+0x9e>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	60da      	str	r2, [r3, #12]
 800b250:	e00b      	b.n	800b26a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8adb      	ldrh	r3, [r3, #22]
 800b25a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	4828      	ldr	r0, [pc, #160]	; (800b300 <tcp_abandon+0x174>)
 800b260:	f000 ff7a 	bl	800c158 <tcp_pcb_remove>
 800b264:	4b27      	ldr	r3, [pc, #156]	; (800b304 <tcp_abandon+0x178>)
 800b266:	2201      	movs	r2, #1
 800b268:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d004      	beq.n	800b27c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b276:	4618      	mov	r0, r3
 800b278:	f000 fd1c 	bl	800bcb4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b280:	2b00      	cmp	r3, #0
 800b282:	d004      	beq.n	800b28e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 fd13 	bl	800bcb4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b292:	2b00      	cmp	r3, #0
 800b294:	d004      	beq.n	800b2a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fd0a 	bl	800bcb4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00e      	beq.n	800b2c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	8b12      	ldrh	r2, [r2, #24]
 800b2b0:	9202      	str	r2, [sp, #8]
 800b2b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b2b4:	9201      	str	r2, [sp, #4]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	69b9      	ldr	r1, [r7, #24]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f004 fcc2 	bl	800fc48 <tcp_rst>
    }
    last_state = pcb->state;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7d1b      	ldrb	r3, [r3, #20]
 800b2c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff fd34 	bl	800ad38 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d004      	beq.n	800b2e0 <tcp_abandon+0x154>
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f06f 010c 	mvn.w	r1, #12
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	4798      	blx	r3
  }
}
 800b2e0:	3728      	adds	r7, #40	; 0x28
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	080152b4 	.word	0x080152b4
 800b2ec:	080153f8 	.word	0x080153f8
 800b2f0:	080152f8 	.word	0x080152f8
 800b2f4:	08015414 	.word	0x08015414
 800b2f8:	20008ec4 	.word	0x20008ec4
 800b2fc:	20008eb8 	.word	0x20008eb8
 800b300:	20008ec0 	.word	0x20008ec0
 800b304:	20008ec8 	.word	0x20008ec8

0800b308 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b310:	2101      	movs	r1, #1
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff ff3a 	bl	800b18c <tcp_abandon>
}
 800b318:	bf00      	nop
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d106      	bne.n	800b33c <tcp_update_rcv_ann_wnd+0x1c>
 800b32e:	4b25      	ldr	r3, [pc, #148]	; (800b3c4 <tcp_update_rcv_ann_wnd+0xa4>)
 800b330:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b334:	4924      	ldr	r1, [pc, #144]	; (800b3c8 <tcp_update_rcv_ann_wnd+0xa8>)
 800b336:	4825      	ldr	r0, [pc, #148]	; (800b3cc <tcp_update_rcv_ann_wnd+0xac>)
 800b338:	f008 f830 	bl	801339c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b344:	4413      	add	r3, r2
 800b346:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b350:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b354:	bf28      	it	cs
 800b356:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b35a:	b292      	uxth	r2, r2
 800b35c:	4413      	add	r3, r2
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	db08      	blt.n	800b378 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	e020      	b.n	800b3ba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	dd03      	ble.n	800b38e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b38c:	e014      	b.n	800b3b8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a0:	d306      	bcc.n	800b3b0 <tcp_update_rcv_ann_wnd+0x90>
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <tcp_update_rcv_ann_wnd+0xa4>)
 800b3a4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b3a8:	4909      	ldr	r1, [pc, #36]	; (800b3d0 <tcp_update_rcv_ann_wnd+0xb0>)
 800b3aa:	4808      	ldr	r0, [pc, #32]	; (800b3cc <tcp_update_rcv_ann_wnd+0xac>)
 800b3ac:	f007 fff6 	bl	801339c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b3b8:	2300      	movs	r3, #0
  }
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	080152b4 	.word	0x080152b4
 800b3c8:	08015510 	.word	0x08015510
 800b3cc:	080152f8 	.word	0x080152f8
 800b3d0:	08015534 	.word	0x08015534

0800b3d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d107      	bne.n	800b3f6 <tcp_recved+0x22>
 800b3e6:	4b1f      	ldr	r3, [pc, #124]	; (800b464 <tcp_recved+0x90>)
 800b3e8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b3ec:	491e      	ldr	r1, [pc, #120]	; (800b468 <tcp_recved+0x94>)
 800b3ee:	481f      	ldr	r0, [pc, #124]	; (800b46c <tcp_recved+0x98>)
 800b3f0:	f007 ffd4 	bl	801339c <iprintf>
 800b3f4:	e032      	b.n	800b45c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	7d1b      	ldrb	r3, [r3, #20]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d106      	bne.n	800b40c <tcp_recved+0x38>
 800b3fe:	4b19      	ldr	r3, [pc, #100]	; (800b464 <tcp_recved+0x90>)
 800b400:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b404:	491a      	ldr	r1, [pc, #104]	; (800b470 <tcp_recved+0x9c>)
 800b406:	4819      	ldr	r0, [pc, #100]	; (800b46c <tcp_recved+0x98>)
 800b408:	f007 ffc8 	bl	801339c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b410:	887b      	ldrh	r3, [r7, #2]
 800b412:	4413      	add	r3, r2
 800b414:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b416:	89fb      	ldrh	r3, [r7, #14]
 800b418:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b41c:	d804      	bhi.n	800b428 <tcp_recved+0x54>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b422:	89fa      	ldrh	r2, [r7, #14]
 800b424:	429a      	cmp	r2, r3
 800b426:	d204      	bcs.n	800b432 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b42e:	851a      	strh	r2, [r3, #40]	; 0x28
 800b430:	e002      	b.n	800b438 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	89fa      	ldrh	r2, [r7, #14]
 800b436:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff ff71 	bl	800b320 <tcp_update_rcv_ann_wnd>
 800b43e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b446:	d309      	bcc.n	800b45c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	8b5b      	ldrh	r3, [r3, #26]
 800b44c:	f043 0302 	orr.w	r3, r3, #2
 800b450:	b29a      	uxth	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f003 fe42 	bl	800f0e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	080152b4 	.word	0x080152b4
 800b468:	08015550 	.word	0x08015550
 800b46c:	080152f8 	.word	0x080152f8
 800b470:	08015568 	.word	0x08015568

0800b474 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b474:	b5b0      	push	{r4, r5, r7, lr}
 800b476:	b090      	sub	sp, #64	; 0x40
 800b478:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b480:	4b94      	ldr	r3, [pc, #592]	; (800b6d4 <tcp_slowtmr+0x260>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3301      	adds	r3, #1
 800b486:	4a93      	ldr	r2, [pc, #588]	; (800b6d4 <tcp_slowtmr+0x260>)
 800b488:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b48a:	4b93      	ldr	r3, [pc, #588]	; (800b6d8 <tcp_slowtmr+0x264>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	3301      	adds	r3, #1
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4b91      	ldr	r3, [pc, #580]	; (800b6d8 <tcp_slowtmr+0x264>)
 800b494:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b496:	2300      	movs	r3, #0
 800b498:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b49a:	4b90      	ldr	r3, [pc, #576]	; (800b6dc <tcp_slowtmr+0x268>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b4a0:	e29f      	b.n	800b9e2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a4:	7d1b      	ldrb	r3, [r3, #20]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <tcp_slowtmr+0x44>
 800b4aa:	4b8d      	ldr	r3, [pc, #564]	; (800b6e0 <tcp_slowtmr+0x26c>)
 800b4ac:	f240 42be 	movw	r2, #1214	; 0x4be
 800b4b0:	498c      	ldr	r1, [pc, #560]	; (800b6e4 <tcp_slowtmr+0x270>)
 800b4b2:	488d      	ldr	r0, [pc, #564]	; (800b6e8 <tcp_slowtmr+0x274>)
 800b4b4:	f007 ff72 	bl	801339c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ba:	7d1b      	ldrb	r3, [r3, #20]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d106      	bne.n	800b4ce <tcp_slowtmr+0x5a>
 800b4c0:	4b87      	ldr	r3, [pc, #540]	; (800b6e0 <tcp_slowtmr+0x26c>)
 800b4c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b4c6:	4989      	ldr	r1, [pc, #548]	; (800b6ec <tcp_slowtmr+0x278>)
 800b4c8:	4887      	ldr	r0, [pc, #540]	; (800b6e8 <tcp_slowtmr+0x274>)
 800b4ca:	f007 ff67 	bl	801339c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	7d1b      	ldrb	r3, [r3, #20]
 800b4d2:	2b0a      	cmp	r3, #10
 800b4d4:	d106      	bne.n	800b4e4 <tcp_slowtmr+0x70>
 800b4d6:	4b82      	ldr	r3, [pc, #520]	; (800b6e0 <tcp_slowtmr+0x26c>)
 800b4d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b4dc:	4984      	ldr	r1, [pc, #528]	; (800b6f0 <tcp_slowtmr+0x27c>)
 800b4de:	4882      	ldr	r0, [pc, #520]	; (800b6e8 <tcp_slowtmr+0x274>)
 800b4e0:	f007 ff5c 	bl	801339c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e6:	7f9a      	ldrb	r2, [r3, #30]
 800b4e8:	4b7b      	ldr	r3, [pc, #492]	; (800b6d8 <tcp_slowtmr+0x264>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d105      	bne.n	800b4fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b4fa:	e272      	b.n	800b9e2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b4fc:	4b76      	ldr	r3, [pc, #472]	; (800b6d8 <tcp_slowtmr+0x264>)
 800b4fe:	781a      	ldrb	r2, [r3, #0]
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	7d1b      	ldrb	r3, [r3, #20]
 800b514:	2b02      	cmp	r3, #2
 800b516:	d10a      	bne.n	800b52e <tcp_slowtmr+0xba>
 800b518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d905      	bls.n	800b52e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b526:	3301      	adds	r3, #1
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b52c:	e11e      	b.n	800b76c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b530:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b534:	2b0b      	cmp	r3, #11
 800b536:	d905      	bls.n	800b544 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b53c:	3301      	adds	r3, #1
 800b53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b542:	e113      	b.n	800b76c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d075      	beq.n	800b63a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b552:	2b00      	cmp	r3, #0
 800b554:	d006      	beq.n	800b564 <tcp_slowtmr+0xf0>
 800b556:	4b62      	ldr	r3, [pc, #392]	; (800b6e0 <tcp_slowtmr+0x26c>)
 800b558:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b55c:	4965      	ldr	r1, [pc, #404]	; (800b6f4 <tcp_slowtmr+0x280>)
 800b55e:	4862      	ldr	r0, [pc, #392]	; (800b6e8 <tcp_slowtmr+0x274>)
 800b560:	f007 ff1c 	bl	801339c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <tcp_slowtmr+0x106>
 800b56c:	4b5c      	ldr	r3, [pc, #368]	; (800b6e0 <tcp_slowtmr+0x26c>)
 800b56e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b572:	4961      	ldr	r1, [pc, #388]	; (800b6f8 <tcp_slowtmr+0x284>)
 800b574:	485c      	ldr	r0, [pc, #368]	; (800b6e8 <tcp_slowtmr+0x274>)
 800b576:	f007 ff11 	bl	801339c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b580:	2b0b      	cmp	r3, #11
 800b582:	d905      	bls.n	800b590 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b588:	3301      	adds	r3, #1
 800b58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b58e:	e0ed      	b.n	800b76c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b592:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b596:	3b01      	subs	r3, #1
 800b598:	4a58      	ldr	r2, [pc, #352]	; (800b6fc <tcp_slowtmr+0x288>)
 800b59a:	5cd3      	ldrb	r3, [r2, r3]
 800b59c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5a4:	7c7a      	ldrb	r2, [r7, #17]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d907      	bls.n	800b5ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5c0:	7c7a      	ldrb	r2, [r7, #17]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	f200 80d2 	bhi.w	800b76c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d108      	bne.n	800b5e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b5d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5d8:	f004 fc2a 	bl	800fe30 <tcp_zero_window_probe>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d014      	beq.n	800b60c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	623b      	str	r3, [r7, #32]
 800b5e6:	e011      	b.n	800b60c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5f2:	f003 faef 	bl	800ebd4 <tcp_split_unsent_seg>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d107      	bne.n	800b60c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b5fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5fe:	f003 fd6f 	bl	800f0e0 <tcp_output>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b60c:	6a3b      	ldr	r3, [r7, #32]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f000 80ac 	beq.w	800b76c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	2200      	movs	r2, #0
 800b618:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b622:	2b06      	cmp	r3, #6
 800b624:	f200 80a2 	bhi.w	800b76c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b62e:	3301      	adds	r3, #1
 800b630:	b2da      	uxtb	r2, r3
 800b632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b634:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b638:	e098      	b.n	800b76c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b640:	2b00      	cmp	r3, #0
 800b642:	db0f      	blt.n	800b664 <tcp_slowtmr+0x1f0>
 800b644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b646:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b64a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b64e:	4293      	cmp	r3, r2
 800b650:	d008      	beq.n	800b664 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b654:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b658:	b29b      	uxth	r3, r3
 800b65a:	3301      	adds	r3, #1
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	b21a      	sxth	r2, r3
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b666:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b670:	429a      	cmp	r2, r3
 800b672:	db7b      	blt.n	800b76c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b676:	f004 f825 	bl	800f6c4 <tcp_rexmit_rto_prepare>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d007      	beq.n	800b690 <tcp_slowtmr+0x21c>
 800b680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b684:	2b00      	cmp	r3, #0
 800b686:	d171      	bne.n	800b76c <tcp_slowtmr+0x2f8>
 800b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d06d      	beq.n	800b76c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	7d1b      	ldrb	r3, [r3, #20]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d03a      	beq.n	800b70e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b69e:	2b0c      	cmp	r3, #12
 800b6a0:	bf28      	it	cs
 800b6a2:	230c      	movcs	r3, #12
 800b6a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b6ac:	10db      	asrs	r3, r3, #3
 800b6ae:	b21b      	sxth	r3, r3
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b6b8:	4413      	add	r3, r2
 800b6ba:	7efa      	ldrb	r2, [r7, #27]
 800b6bc:	4910      	ldr	r1, [pc, #64]	; (800b700 <tcp_slowtmr+0x28c>)
 800b6be:	5c8a      	ldrb	r2, [r1, r2]
 800b6c0:	4093      	lsls	r3, r2
 800b6c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	dc1a      	bgt.n	800b704 <tcp_slowtmr+0x290>
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	b21a      	sxth	r2, r3
 800b6d2:	e019      	b.n	800b708 <tcp_slowtmr+0x294>
 800b6d4:	20008eb4 	.word	0x20008eb4
 800b6d8:	20008eca 	.word	0x20008eca
 800b6dc:	20008ec0 	.word	0x20008ec0
 800b6e0:	080152b4 	.word	0x080152b4
 800b6e4:	080155f8 	.word	0x080155f8
 800b6e8:	080152f8 	.word	0x080152f8
 800b6ec:	08015624 	.word	0x08015624
 800b6f0:	08015650 	.word	0x08015650
 800b6f4:	08015680 	.word	0x08015680
 800b6f8:	080156b4 	.word	0x080156b4
 800b6fc:	08017288 	.word	0x08017288
 800b700:	08017278 	.word	0x08017278
 800b704:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b710:	2200      	movs	r2, #0
 800b712:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b720:	4293      	cmp	r3, r2
 800b722:	bf28      	it	cs
 800b724:	4613      	movcs	r3, r2
 800b726:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b728:	8a7b      	ldrh	r3, [r7, #18]
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	b29b      	uxth	r3, r3
 800b742:	429a      	cmp	r2, r3
 800b744:	d206      	bcs.n	800b754 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b74a:	005b      	lsls	r3, r3, #1
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b750:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	2200      	movs	r2, #0
 800b762:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b768:	f004 f81c 	bl	800f7a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	7d1b      	ldrb	r3, [r3, #20]
 800b770:	2b06      	cmp	r3, #6
 800b772:	d111      	bne.n	800b798 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b776:	8b5b      	ldrh	r3, [r3, #26]
 800b778:	f003 0310 	and.w	r3, r3, #16
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00b      	beq.n	800b798 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b780:	4b9d      	ldr	r3, [pc, #628]	; (800b9f8 <tcp_slowtmr+0x584>)
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	2b28      	cmp	r3, #40	; 0x28
 800b78c:	d904      	bls.n	800b798 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b78e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b792:	3301      	adds	r3, #1
 800b794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79a:	7a5b      	ldrb	r3, [r3, #9]
 800b79c:	f003 0308 	and.w	r3, r3, #8
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d04c      	beq.n	800b83e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b7a8:	2b04      	cmp	r3, #4
 800b7aa:	d003      	beq.n	800b7b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b7b0:	2b07      	cmp	r3, #7
 800b7b2:	d144      	bne.n	800b83e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7b4:	4b90      	ldr	r3, [pc, #576]	; (800b9f8 <tcp_slowtmr+0x584>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7c4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b7c8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b7cc:	498b      	ldr	r1, [pc, #556]	; (800b9fc <tcp_slowtmr+0x588>)
 800b7ce:	fba1 1303 	umull	r1, r3, r1, r3
 800b7d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d90a      	bls.n	800b7ee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7dc:	3301      	adds	r3, #1
 800b7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b7e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b7ec:	e027      	b.n	800b83e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7ee:	4b82      	ldr	r3, [pc, #520]	; (800b9f8 <tcp_slowtmr+0x584>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b804:	4618      	mov	r0, r3
 800b806:	4b7e      	ldr	r3, [pc, #504]	; (800ba00 <tcp_slowtmr+0x58c>)
 800b808:	fb00 f303 	mul.w	r3, r0, r3
 800b80c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b80e:	497b      	ldr	r1, [pc, #492]	; (800b9fc <tcp_slowtmr+0x588>)
 800b810:	fba1 1303 	umull	r1, r3, r1, r3
 800b814:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b816:	429a      	cmp	r2, r3
 800b818:	d911      	bls.n	800b83e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b81a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b81c:	f004 fac8 	bl	800fdb0 <tcp_keepalive>
 800b820:	4603      	mov	r3, r0
 800b822:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b826:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d107      	bne.n	800b83e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b834:	3301      	adds	r3, #1
 800b836:	b2da      	uxtb	r2, r3
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b842:	2b00      	cmp	r3, #0
 800b844:	d011      	beq.n	800b86a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b846:	4b6c      	ldr	r3, [pc, #432]	; (800b9f8 <tcp_slowtmr+0x584>)
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	1ad2      	subs	r2, r2, r3
 800b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b852:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b856:	4619      	mov	r1, r3
 800b858:	460b      	mov	r3, r1
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	440b      	add	r3, r1
 800b85e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b860:	429a      	cmp	r2, r3
 800b862:	d302      	bcc.n	800b86a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b864:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b866:	f000 fddb 	bl	800c420 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	7d1b      	ldrb	r3, [r3, #20]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d10b      	bne.n	800b88a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b872:	4b61      	ldr	r3, [pc, #388]	; (800b9f8 <tcp_slowtmr+0x584>)
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	2b28      	cmp	r3, #40	; 0x28
 800b87e:	d904      	bls.n	800b88a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b884:	3301      	adds	r3, #1
 800b886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	7d1b      	ldrb	r3, [r3, #20]
 800b88e:	2b09      	cmp	r3, #9
 800b890:	d10b      	bne.n	800b8aa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b892:	4b59      	ldr	r3, [pc, #356]	; (800b9f8 <tcp_slowtmr+0x584>)
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	2bf0      	cmp	r3, #240	; 0xf0
 800b89e:	d904      	bls.n	800b8aa <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d060      	beq.n	800b974 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b8ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8bc:	f000 fbfc 	bl	800c0b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d010      	beq.n	800b8e8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b8c6:	4b4f      	ldr	r3, [pc, #316]	; (800ba04 <tcp_slowtmr+0x590>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d106      	bne.n	800b8de <tcp_slowtmr+0x46a>
 800b8d0:	4b4d      	ldr	r3, [pc, #308]	; (800ba08 <tcp_slowtmr+0x594>)
 800b8d2:	f240 526d 	movw	r2, #1389	; 0x56d
 800b8d6:	494d      	ldr	r1, [pc, #308]	; (800ba0c <tcp_slowtmr+0x598>)
 800b8d8:	484d      	ldr	r0, [pc, #308]	; (800ba10 <tcp_slowtmr+0x59c>)
 800b8da:	f007 fd5f 	bl	801339c <iprintf>
        prev->next = pcb->next;
 800b8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e0:	68da      	ldr	r2, [r3, #12]
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	60da      	str	r2, [r3, #12]
 800b8e6:	e00f      	b.n	800b908 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b8e8:	4b46      	ldr	r3, [pc, #280]	; (800ba04 <tcp_slowtmr+0x590>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d006      	beq.n	800b900 <tcp_slowtmr+0x48c>
 800b8f2:	4b45      	ldr	r3, [pc, #276]	; (800ba08 <tcp_slowtmr+0x594>)
 800b8f4:	f240 5271 	movw	r2, #1393	; 0x571
 800b8f8:	4946      	ldr	r1, [pc, #280]	; (800ba14 <tcp_slowtmr+0x5a0>)
 800b8fa:	4845      	ldr	r0, [pc, #276]	; (800ba10 <tcp_slowtmr+0x59c>)
 800b8fc:	f007 fd4e 	bl	801339c <iprintf>
        tcp_active_pcbs = pcb->next;
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	4a3f      	ldr	r2, [pc, #252]	; (800ba04 <tcp_slowtmr+0x590>)
 800b906:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d013      	beq.n	800b938 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b912:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b916:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b918:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91c:	3304      	adds	r3, #4
 800b91e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b920:	8ad2      	ldrh	r2, [r2, #22]
 800b922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b924:	8b09      	ldrh	r1, [r1, #24]
 800b926:	9102      	str	r1, [sp, #8]
 800b928:	9201      	str	r2, [sp, #4]
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	462b      	mov	r3, r5
 800b92e:	4622      	mov	r2, r4
 800b930:	4601      	mov	r1, r0
 800b932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b934:	f004 f988 	bl	800fc48 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b940:	7d1b      	ldrb	r3, [r3, #20]
 800b942:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b94e:	6838      	ldr	r0, [r7, #0]
 800b950:	f7ff f9f2 	bl	800ad38 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b954:	4b30      	ldr	r3, [pc, #192]	; (800ba18 <tcp_slowtmr+0x5a4>)
 800b956:	2200      	movs	r2, #0
 800b958:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d004      	beq.n	800b96a <tcp_slowtmr+0x4f6>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f06f 010c 	mvn.w	r1, #12
 800b966:	68b8      	ldr	r0, [r7, #8]
 800b968:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b96a:	4b2b      	ldr	r3, [pc, #172]	; (800ba18 <tcp_slowtmr+0x5a4>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d037      	beq.n	800b9e2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b972:	e590      	b.n	800b496 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	7f1b      	ldrb	r3, [r3, #28]
 800b982:	3301      	adds	r3, #1
 800b984:	b2da      	uxtb	r2, r3
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98c:	7f1a      	ldrb	r2, [r3, #28]
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	7f5b      	ldrb	r3, [r3, #29]
 800b992:	429a      	cmp	r2, r3
 800b994:	d325      	bcc.n	800b9e2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	2200      	movs	r2, #0
 800b99a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b99c:	4b1e      	ldr	r3, [pc, #120]	; (800ba18 <tcp_slowtmr+0x5a4>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00b      	beq.n	800b9c4 <tcp_slowtmr+0x550>
 800b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9b4:	6912      	ldr	r2, [r2, #16]
 800b9b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	4798      	blx	r3
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b9c2:	e002      	b.n	800b9ca <tcp_slowtmr+0x556>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b9ca:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <tcp_slowtmr+0x5a4>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d000      	beq.n	800b9d4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b9d2:	e560      	b.n	800b496 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b9d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d102      	bne.n	800b9e2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9de:	f003 fb7f 	bl	800f0e0 <tcp_output>
  while (pcb != NULL) {
 800b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f47f ad5c 	bne.w	800b4a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b9ee:	4b0b      	ldr	r3, [pc, #44]	; (800ba1c <tcp_slowtmr+0x5a8>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b9f4:	e067      	b.n	800bac6 <tcp_slowtmr+0x652>
 800b9f6:	bf00      	nop
 800b9f8:	20008eb4 	.word	0x20008eb4
 800b9fc:	10624dd3 	.word	0x10624dd3
 800ba00:	000124f8 	.word	0x000124f8
 800ba04:	20008ec0 	.word	0x20008ec0
 800ba08:	080152b4 	.word	0x080152b4
 800ba0c:	080156ec 	.word	0x080156ec
 800ba10:	080152f8 	.word	0x080152f8
 800ba14:	08015718 	.word	0x08015718
 800ba18:	20008ec8 	.word	0x20008ec8
 800ba1c:	20008ec4 	.word	0x20008ec4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba22:	7d1b      	ldrb	r3, [r3, #20]
 800ba24:	2b0a      	cmp	r3, #10
 800ba26:	d006      	beq.n	800ba36 <tcp_slowtmr+0x5c2>
 800ba28:	4b2b      	ldr	r3, [pc, #172]	; (800bad8 <tcp_slowtmr+0x664>)
 800ba2a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ba2e:	492b      	ldr	r1, [pc, #172]	; (800badc <tcp_slowtmr+0x668>)
 800ba30:	482b      	ldr	r0, [pc, #172]	; (800bae0 <tcp_slowtmr+0x66c>)
 800ba32:	f007 fcb3 	bl	801339c <iprintf>
    pcb_remove = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ba3c:	4b29      	ldr	r3, [pc, #164]	; (800bae4 <tcp_slowtmr+0x670>)
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	6a1b      	ldr	r3, [r3, #32]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	2bf0      	cmp	r3, #240	; 0xf0
 800ba48:	d904      	bls.n	800ba54 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ba4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba4e:	3301      	adds	r3, #1
 800ba50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ba54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d02f      	beq.n	800babc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ba5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba5e:	f000 fb2b 	bl	800c0b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d010      	beq.n	800ba8a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ba68:	4b1f      	ldr	r3, [pc, #124]	; (800bae8 <tcp_slowtmr+0x674>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d106      	bne.n	800ba80 <tcp_slowtmr+0x60c>
 800ba72:	4b19      	ldr	r3, [pc, #100]	; (800bad8 <tcp_slowtmr+0x664>)
 800ba74:	f240 52af 	movw	r2, #1455	; 0x5af
 800ba78:	491c      	ldr	r1, [pc, #112]	; (800baec <tcp_slowtmr+0x678>)
 800ba7a:	4819      	ldr	r0, [pc, #100]	; (800bae0 <tcp_slowtmr+0x66c>)
 800ba7c:	f007 fc8e 	bl	801339c <iprintf>
        prev->next = pcb->next;
 800ba80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	60da      	str	r2, [r3, #12]
 800ba88:	e00f      	b.n	800baaa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ba8a:	4b17      	ldr	r3, [pc, #92]	; (800bae8 <tcp_slowtmr+0x674>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d006      	beq.n	800baa2 <tcp_slowtmr+0x62e>
 800ba94:	4b10      	ldr	r3, [pc, #64]	; (800bad8 <tcp_slowtmr+0x664>)
 800ba96:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ba9a:	4915      	ldr	r1, [pc, #84]	; (800baf0 <tcp_slowtmr+0x67c>)
 800ba9c:	4810      	ldr	r0, [pc, #64]	; (800bae0 <tcp_slowtmr+0x66c>)
 800ba9e:	f007 fc7d 	bl	801339c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	4a10      	ldr	r2, [pc, #64]	; (800bae8 <tcp_slowtmr+0x674>)
 800baa8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bab4:	69f8      	ldr	r0, [r7, #28]
 800bab6:	f7ff f93f 	bl	800ad38 <tcp_free>
 800baba:	e004      	b.n	800bac6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1a9      	bne.n	800ba20 <tcp_slowtmr+0x5ac>
    }
  }
}
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	3730      	adds	r7, #48	; 0x30
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bdb0      	pop	{r4, r5, r7, pc}
 800bad6:	bf00      	nop
 800bad8:	080152b4 	.word	0x080152b4
 800badc:	08015744 	.word	0x08015744
 800bae0:	080152f8 	.word	0x080152f8
 800bae4:	20008eb4 	.word	0x20008eb4
 800bae8:	20008ec4 	.word	0x20008ec4
 800baec:	08015774 	.word	0x08015774
 800baf0:	0801579c 	.word	0x0801579c

0800baf4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bafa:	4b2d      	ldr	r3, [pc, #180]	; (800bbb0 <tcp_fasttmr+0xbc>)
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	3301      	adds	r3, #1
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	4b2b      	ldr	r3, [pc, #172]	; (800bbb0 <tcp_fasttmr+0xbc>)
 800bb04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bb06:	4b2b      	ldr	r3, [pc, #172]	; (800bbb4 <tcp_fasttmr+0xc0>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb0c:	e048      	b.n	800bba0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	7f9a      	ldrb	r2, [r3, #30]
 800bb12:	4b27      	ldr	r3, [pc, #156]	; (800bbb0 <tcp_fasttmr+0xbc>)
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d03f      	beq.n	800bb9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bb1a:	4b25      	ldr	r3, [pc, #148]	; (800bbb0 <tcp_fasttmr+0xbc>)
 800bb1c:	781a      	ldrb	r2, [r3, #0]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	8b5b      	ldrh	r3, [r3, #26]
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d010      	beq.n	800bb50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	8b5b      	ldrh	r3, [r3, #26]
 800bb32:	f043 0302 	orr.w	r3, r3, #2
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f003 facf 	bl	800f0e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8b5b      	ldrh	r3, [r3, #26]
 800bb46:	f023 0303 	bic.w	r3, r3, #3
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	8b5b      	ldrh	r3, [r3, #26]
 800bb54:	f003 0308 	and.w	r3, r3, #8
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d009      	beq.n	800bb70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	8b5b      	ldrh	r3, [r3, #26]
 800bb60:	f023 0308 	bic.w	r3, r3, #8
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fa78 	bl	800b060 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00a      	beq.n	800bb94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bb7e:	4b0e      	ldr	r3, [pc, #56]	; (800bbb8 <tcp_fasttmr+0xc4>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f819 	bl	800bbbc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bb8a:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <tcp_fasttmr+0xc4>)
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d000      	beq.n	800bb94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bb92:	e7b8      	b.n	800bb06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	607b      	str	r3, [r7, #4]
 800bb98:	e002      	b.n	800bba0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1b3      	bne.n	800bb0e <tcp_fasttmr+0x1a>
    }
  }
}
 800bba6:	bf00      	nop
 800bba8:	bf00      	nop
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	20008eca 	.word	0x20008eca
 800bbb4:	20008ec0 	.word	0x20008ec0
 800bbb8:	20008ec8 	.word	0x20008ec8

0800bbbc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bbbc:	b590      	push	{r4, r7, lr}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d109      	bne.n	800bbde <tcp_process_refused_data+0x22>
 800bbca:	4b37      	ldr	r3, [pc, #220]	; (800bca8 <tcp_process_refused_data+0xec>)
 800bbcc:	f240 6209 	movw	r2, #1545	; 0x609
 800bbd0:	4936      	ldr	r1, [pc, #216]	; (800bcac <tcp_process_refused_data+0xf0>)
 800bbd2:	4837      	ldr	r0, [pc, #220]	; (800bcb0 <tcp_process_refused_data+0xf4>)
 800bbd4:	f007 fbe2 	bl	801339c <iprintf>
 800bbd8:	f06f 030f 	mvn.w	r3, #15
 800bbdc:	e060      	b.n	800bca0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbe2:	7b5b      	ldrb	r3, [r3, #13]
 800bbe4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <tcp_process_refused_data+0x58>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6918      	ldr	r0, [r3, #16]
 800bc06:	2300      	movs	r3, #0
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	47a0      	blx	r4
 800bc0e:	4603      	mov	r3, r0
 800bc10:	73fb      	strb	r3, [r7, #15]
 800bc12:	e007      	b.n	800bc24 <tcp_process_refused_data+0x68>
 800bc14:	2300      	movs	r3, #0
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	f000 f8a4 	bl	800bd68 <tcp_recv_null>
 800bc20:	4603      	mov	r3, r0
 800bc22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bc24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d12a      	bne.n	800bc82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bc2c:	7bbb      	ldrb	r3, [r7, #14]
 800bc2e:	f003 0320 	and.w	r3, r3, #32
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d033      	beq.n	800bc9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bc3e:	d005      	beq.n	800bc4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc44:	3301      	adds	r3, #1
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00b      	beq.n	800bc6e <tcp_process_refused_data+0xb2>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6918      	ldr	r0, [r3, #16]
 800bc60:	2300      	movs	r3, #0
 800bc62:	2200      	movs	r2, #0
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	47a0      	blx	r4
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73fb      	strb	r3, [r7, #15]
 800bc6c:	e001      	b.n	800bc72 <tcp_process_refused_data+0xb6>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bc72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc76:	f113 0f0d 	cmn.w	r3, #13
 800bc7a:	d110      	bne.n	800bc9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bc7c:	f06f 030c 	mvn.w	r3, #12
 800bc80:	e00e      	b.n	800bca0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bc82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc86:	f113 0f0d 	cmn.w	r3, #13
 800bc8a:	d102      	bne.n	800bc92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bc8c:	f06f 030c 	mvn.w	r3, #12
 800bc90:	e006      	b.n	800bca0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bc98:	f06f 0304 	mvn.w	r3, #4
 800bc9c:	e000      	b.n	800bca0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd90      	pop	{r4, r7, pc}
 800bca8:	080152b4 	.word	0x080152b4
 800bcac:	080157c4 	.word	0x080157c4
 800bcb0:	080152f8 	.word	0x080152f8

0800bcb4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bcbc:	e007      	b.n	800bcce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f80a 	bl	800bcde <tcp_seg_free>
    seg = next;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1f4      	bne.n	800bcbe <tcp_segs_free+0xa>
  }
}
 800bcd4:	bf00      	nop
 800bcd6:	bf00      	nop
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b082      	sub	sp, #8
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00c      	beq.n	800bd06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d004      	beq.n	800bcfe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fe fcdb 	bl	800a6b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	2003      	movs	r0, #3
 800bd02:	f7fd fec5 	bl	8009a90 <memp_free>
  }
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d106      	bne.n	800bd2c <tcp_seg_copy+0x1c>
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <tcp_seg_copy+0x4c>)
 800bd20:	f240 6282 	movw	r2, #1666	; 0x682
 800bd24:	490e      	ldr	r1, [pc, #56]	; (800bd60 <tcp_seg_copy+0x50>)
 800bd26:	480f      	ldr	r0, [pc, #60]	; (800bd64 <tcp_seg_copy+0x54>)
 800bd28:	f007 fb38 	bl	801339c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bd2c:	2003      	movs	r0, #3
 800bd2e:	f7fd fe63 	bl	80099f8 <memp_malloc>
 800bd32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <tcp_seg_copy+0x2e>
    return NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e00a      	b.n	800bd54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bd3e:	2210      	movs	r2, #16
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f007 fafa 	bl	801333c <memcpy>
  pbuf_ref(cseg->p);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe fd51 	bl	800a7f4 <pbuf_ref>
  return cseg;
 800bd52:	68fb      	ldr	r3, [r7, #12]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	080152b4 	.word	0x080152b4
 800bd60:	08015808 	.word	0x08015808
 800bd64:	080152f8 	.word	0x080152f8

0800bd68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d109      	bne.n	800bd90 <tcp_recv_null+0x28>
 800bd7c:	4b12      	ldr	r3, [pc, #72]	; (800bdc8 <tcp_recv_null+0x60>)
 800bd7e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bd82:	4912      	ldr	r1, [pc, #72]	; (800bdcc <tcp_recv_null+0x64>)
 800bd84:	4812      	ldr	r0, [pc, #72]	; (800bdd0 <tcp_recv_null+0x68>)
 800bd86:	f007 fb09 	bl	801339c <iprintf>
 800bd8a:	f06f 030f 	mvn.w	r3, #15
 800bd8e:	e016      	b.n	800bdbe <tcp_recv_null+0x56>

  if (p != NULL) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d009      	beq.n	800bdaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	891b      	ldrh	r3, [r3, #8]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	68b8      	ldr	r0, [r7, #8]
 800bd9e:	f7ff fb19 	bl	800b3d4 <tcp_recved>
    pbuf_free(p);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7fe fc86 	bl	800a6b4 <pbuf_free>
 800bda8:	e008      	b.n	800bdbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bdaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d104      	bne.n	800bdbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bdb2:	68b8      	ldr	r0, [r7, #8]
 800bdb4:	f7ff f9be 	bl	800b134 <tcp_close>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	e000      	b.n	800bdbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	080152b4 	.word	0x080152b4
 800bdcc:	08015824 	.word	0x08015824
 800bdd0:	080152f8 	.word	0x080152f8

0800bdd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	4603      	mov	r3, r0
 800bddc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bdde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	db01      	blt.n	800bdea <tcp_kill_prio+0x16>
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	e000      	b.n	800bdec <tcp_kill_prio+0x18>
 800bdea:	237f      	movs	r3, #127	; 0x7f
 800bdec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bdee:	7afb      	ldrb	r3, [r7, #11]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d034      	beq.n	800be5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bdf4:	7afb      	ldrb	r3, [r7, #11]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be02:	4b19      	ldr	r3, [pc, #100]	; (800be68 <tcp_kill_prio+0x94>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	e01f      	b.n	800be4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	7d5b      	ldrb	r3, [r3, #21]
 800be0e:	7afa      	ldrb	r2, [r7, #11]
 800be10:	429a      	cmp	r2, r3
 800be12:	d80c      	bhi.n	800be2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800be18:	7afa      	ldrb	r2, [r7, #11]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d112      	bne.n	800be44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be1e:	4b13      	ldr	r3, [pc, #76]	; (800be6c <tcp_kill_prio+0x98>)
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d80a      	bhi.n	800be44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800be2e:	4b0f      	ldr	r3, [pc, #60]	; (800be6c <tcp_kill_prio+0x98>)
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	7d5b      	ldrb	r3, [r3, #21]
 800be42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1dc      	bne.n	800be0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d004      	beq.n	800be60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800be56:	6938      	ldr	r0, [r7, #16]
 800be58:	f7ff fa56 	bl	800b308 <tcp_abort>
 800be5c:	e000      	b.n	800be60 <tcp_kill_prio+0x8c>
    return;
 800be5e:	bf00      	nop
  }
}
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20008ec0 	.word	0x20008ec0
 800be6c:	20008eb4 	.word	0x20008eb4

0800be70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	2b08      	cmp	r3, #8
 800be7e:	d009      	beq.n	800be94 <tcp_kill_state+0x24>
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	2b09      	cmp	r3, #9
 800be84:	d006      	beq.n	800be94 <tcp_kill_state+0x24>
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <tcp_kill_state+0x80>)
 800be88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800be8c:	4919      	ldr	r1, [pc, #100]	; (800bef4 <tcp_kill_state+0x84>)
 800be8e:	481a      	ldr	r0, [pc, #104]	; (800bef8 <tcp_kill_state+0x88>)
 800be90:	f007 fa84 	bl	801339c <iprintf>

  inactivity = 0;
 800be94:	2300      	movs	r3, #0
 800be96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800be98:	2300      	movs	r3, #0
 800be9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be9c:	4b17      	ldr	r3, [pc, #92]	; (800befc <tcp_kill_state+0x8c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	617b      	str	r3, [r7, #20]
 800bea2:	e017      	b.n	800bed4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	7d1b      	ldrb	r3, [r3, #20]
 800bea8:	79fa      	ldrb	r2, [r7, #7]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d10f      	bne.n	800bece <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800beae:	4b14      	ldr	r3, [pc, #80]	; (800bf00 <tcp_kill_state+0x90>)
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d807      	bhi.n	800bece <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bebe:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <tcp_kill_state+0x90>)
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	617b      	str	r3, [r7, #20]
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1e4      	bne.n	800bea4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bee0:	2100      	movs	r1, #0
 800bee2:	6938      	ldr	r0, [r7, #16]
 800bee4:	f7ff f952 	bl	800b18c <tcp_abandon>
  }
}
 800bee8:	bf00      	nop
 800beea:	3718      	adds	r7, #24
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	080152b4 	.word	0x080152b4
 800bef4:	08015840 	.word	0x08015840
 800bef8:	080152f8 	.word	0x080152f8
 800befc:	20008ec0 	.word	0x20008ec0
 800bf00:	20008eb4 	.word	0x20008eb4

0800bf04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf12:	4b12      	ldr	r3, [pc, #72]	; (800bf5c <tcp_kill_timewait+0x58>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	e012      	b.n	800bf40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bf1a:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <tcp_kill_timewait+0x5c>)
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d807      	bhi.n	800bf3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bf2a:	4b0d      	ldr	r3, [pc, #52]	; (800bf60 <tcp_kill_timewait+0x5c>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	60fb      	str	r3, [r7, #12]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e9      	bne.n	800bf1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bf4c:	68b8      	ldr	r0, [r7, #8]
 800bf4e:	f7ff f9db 	bl	800b308 <tcp_abort>
  }
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	20008ec4 	.word	0x20008ec4
 800bf60:	20008eb4 	.word	0x20008eb4

0800bf64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bf6a:	4b10      	ldr	r3, [pc, #64]	; (800bfac <tcp_handle_closepend+0x48>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bf70:	e014      	b.n	800bf9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	8b5b      	ldrh	r3, [r3, #26]
 800bf7c:	f003 0308 	and.w	r3, r3, #8
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d009      	beq.n	800bf98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	8b5b      	ldrh	r3, [r3, #26]
 800bf88:	f023 0308 	bic.w	r3, r3, #8
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7ff f864 	bl	800b060 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e7      	bne.n	800bf72 <tcp_handle_closepend+0xe>
  }
}
 800bfa2:	bf00      	nop
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	20008ec0 	.word	0x20008ec0

0800bfb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfba:	2001      	movs	r0, #1
 800bfbc:	f7fd fd1c 	bl	80099f8 <memp_malloc>
 800bfc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d126      	bne.n	800c016 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bfc8:	f7ff ffcc 	bl	800bf64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bfcc:	f7ff ff9a 	bl	800bf04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	f7fd fd11 	bl	80099f8 <memp_malloc>
 800bfd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d11b      	bne.n	800c016 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bfde:	2009      	movs	r0, #9
 800bfe0:	f7ff ff46 	bl	800be70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	f7fd fd07 	bl	80099f8 <memp_malloc>
 800bfea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d111      	bne.n	800c016 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bff2:	2008      	movs	r0, #8
 800bff4:	f7ff ff3c 	bl	800be70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bff8:	2001      	movs	r0, #1
 800bffa:	f7fd fcfd 	bl	80099f8 <memp_malloc>
 800bffe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d107      	bne.n	800c016 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff fee3 	bl	800bdd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c00e:	2001      	movs	r0, #1
 800c010:	f7fd fcf2 	bl	80099f8 <memp_malloc>
 800c014:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d03f      	beq.n	800c09c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c01c:	229c      	movs	r2, #156	; 0x9c
 800c01e:	2100      	movs	r1, #0
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f007 f9b3 	bl	801338c <memset>
    pcb->prio = prio;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	79fa      	ldrb	r2, [r7, #7]
 800c02a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c032:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c03c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	22ff      	movs	r2, #255	; 0xff
 800c04a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c052:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2206      	movs	r2, #6
 800c058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2206      	movs	r2, #6
 800c060:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c068:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c072:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <tcp_alloc+0xf8>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c07a:	4b0c      	ldr	r3, [pc, #48]	; (800c0ac <tcp_alloc+0xfc>)
 800c07c:	781a      	ldrb	r2, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c088:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4a08      	ldr	r2, [pc, #32]	; (800c0b0 <tcp_alloc+0x100>)
 800c090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	4a07      	ldr	r2, [pc, #28]	; (800c0b4 <tcp_alloc+0x104>)
 800c098:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c09c:	68fb      	ldr	r3, [r7, #12]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20008eb4 	.word	0x20008eb4
 800c0ac:	20008eca 	.word	0x20008eca
 800c0b0:	0800bd69 	.word	0x0800bd69
 800c0b4:	006ddd00 	.word	0x006ddd00

0800c0b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d107      	bne.n	800c0d6 <tcp_pcb_purge+0x1e>
 800c0c6:	4b21      	ldr	r3, [pc, #132]	; (800c14c <tcp_pcb_purge+0x94>)
 800c0c8:	f640 0251 	movw	r2, #2129	; 0x851
 800c0cc:	4920      	ldr	r1, [pc, #128]	; (800c150 <tcp_pcb_purge+0x98>)
 800c0ce:	4821      	ldr	r0, [pc, #132]	; (800c154 <tcp_pcb_purge+0x9c>)
 800c0d0:	f007 f964 	bl	801339c <iprintf>
 800c0d4:	e037      	b.n	800c146 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	7d1b      	ldrb	r3, [r3, #20]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d033      	beq.n	800c146 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c0e2:	2b0a      	cmp	r3, #10
 800c0e4:	d02f      	beq.n	800c146 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d02b      	beq.n	800c146 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d007      	beq.n	800c106 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fada 	bl	800a6b4 <pbuf_free>
      pcb->refused_data = NULL;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f986 	bl	800c420 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c11a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff fdc7 	bl	800bcb4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff fdc2 	bl	800bcb4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	66da      	str	r2, [r3, #108]	; 0x6c
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	080152b4 	.word	0x080152b4
 800c150:	08015900 	.word	0x08015900
 800c154:	080152f8 	.word	0x080152f8

0800c158 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d106      	bne.n	800c176 <tcp_pcb_remove+0x1e>
 800c168:	4b3e      	ldr	r3, [pc, #248]	; (800c264 <tcp_pcb_remove+0x10c>)
 800c16a:	f640 0283 	movw	r2, #2179	; 0x883
 800c16e:	493e      	ldr	r1, [pc, #248]	; (800c268 <tcp_pcb_remove+0x110>)
 800c170:	483e      	ldr	r0, [pc, #248]	; (800c26c <tcp_pcb_remove+0x114>)
 800c172:	f007 f913 	bl	801339c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <tcp_pcb_remove+0x32>
 800c17c:	4b39      	ldr	r3, [pc, #228]	; (800c264 <tcp_pcb_remove+0x10c>)
 800c17e:	f640 0284 	movw	r2, #2180	; 0x884
 800c182:	493b      	ldr	r1, [pc, #236]	; (800c270 <tcp_pcb_remove+0x118>)
 800c184:	4839      	ldr	r0, [pc, #228]	; (800c26c <tcp_pcb_remove+0x114>)
 800c186:	f007 f909 	bl	801339c <iprintf>

  TCP_RMV(pcblist, pcb);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	429a      	cmp	r2, r3
 800c192:	d105      	bne.n	800c1a0 <tcp_pcb_remove+0x48>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	e013      	b.n	800c1c8 <tcp_pcb_remove+0x70>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	e00c      	b.n	800c1c2 <tcp_pcb_remove+0x6a>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d104      	bne.n	800c1bc <tcp_pcb_remove+0x64>
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	60da      	str	r2, [r3, #12]
 800c1ba:	e005      	b.n	800c1c8 <tcp_pcb_remove+0x70>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	60fb      	str	r3, [r7, #12]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1ef      	bne.n	800c1a8 <tcp_pcb_remove+0x50>
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c1ce:	6838      	ldr	r0, [r7, #0]
 800c1d0:	f7ff ff72 	bl	800c0b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	7d1b      	ldrb	r3, [r3, #20]
 800c1d8:	2b0a      	cmp	r3, #10
 800c1da:	d013      	beq.n	800c204 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d00f      	beq.n	800c204 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	8b5b      	ldrh	r3, [r3, #26]
 800c1e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d009      	beq.n	800c204 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	8b5b      	ldrh	r3, [r3, #26]
 800c1f4:	f043 0302 	orr.w	r3, r3, #2
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c1fe:	6838      	ldr	r0, [r7, #0]
 800c200:	f002 ff6e 	bl	800f0e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	7d1b      	ldrb	r3, [r3, #20]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d020      	beq.n	800c24e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c210:	2b00      	cmp	r3, #0
 800c212:	d006      	beq.n	800c222 <tcp_pcb_remove+0xca>
 800c214:	4b13      	ldr	r3, [pc, #76]	; (800c264 <tcp_pcb_remove+0x10c>)
 800c216:	f640 0293 	movw	r2, #2195	; 0x893
 800c21a:	4916      	ldr	r1, [pc, #88]	; (800c274 <tcp_pcb_remove+0x11c>)
 800c21c:	4813      	ldr	r0, [pc, #76]	; (800c26c <tcp_pcb_remove+0x114>)
 800c21e:	f007 f8bd 	bl	801339c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c226:	2b00      	cmp	r3, #0
 800c228:	d006      	beq.n	800c238 <tcp_pcb_remove+0xe0>
 800c22a:	4b0e      	ldr	r3, [pc, #56]	; (800c264 <tcp_pcb_remove+0x10c>)
 800c22c:	f640 0294 	movw	r2, #2196	; 0x894
 800c230:	4911      	ldr	r1, [pc, #68]	; (800c278 <tcp_pcb_remove+0x120>)
 800c232:	480e      	ldr	r0, [pc, #56]	; (800c26c <tcp_pcb_remove+0x114>)
 800c234:	f007 f8b2 	bl	801339c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d006      	beq.n	800c24e <tcp_pcb_remove+0xf6>
 800c240:	4b08      	ldr	r3, [pc, #32]	; (800c264 <tcp_pcb_remove+0x10c>)
 800c242:	f640 0296 	movw	r2, #2198	; 0x896
 800c246:	490d      	ldr	r1, [pc, #52]	; (800c27c <tcp_pcb_remove+0x124>)
 800c248:	4808      	ldr	r0, [pc, #32]	; (800c26c <tcp_pcb_remove+0x114>)
 800c24a:	f007 f8a7 	bl	801339c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2200      	movs	r2, #0
 800c252:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2200      	movs	r2, #0
 800c258:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	080152b4 	.word	0x080152b4
 800c268:	0801591c 	.word	0x0801591c
 800c26c:	080152f8 	.word	0x080152f8
 800c270:	08015938 	.word	0x08015938
 800c274:	08015958 	.word	0x08015958
 800c278:	08015970 	.word	0x08015970
 800c27c:	0801598c 	.word	0x0801598c

0800c280 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d106      	bne.n	800c29c <tcp_next_iss+0x1c>
 800c28e:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <tcp_next_iss+0x38>)
 800c290:	f640 02af 	movw	r2, #2223	; 0x8af
 800c294:	4909      	ldr	r1, [pc, #36]	; (800c2bc <tcp_next_iss+0x3c>)
 800c296:	480a      	ldr	r0, [pc, #40]	; (800c2c0 <tcp_next_iss+0x40>)
 800c298:	f007 f880 	bl	801339c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c29c:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <tcp_next_iss+0x44>)
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	4b09      	ldr	r3, [pc, #36]	; (800c2c8 <tcp_next_iss+0x48>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	4a07      	ldr	r2, [pc, #28]	; (800c2c4 <tcp_next_iss+0x44>)
 800c2a8:	6013      	str	r3, [r2, #0]
  return iss;
 800c2aa:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <tcp_next_iss+0x44>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	080152b4 	.word	0x080152b4
 800c2bc:	080159a4 	.word	0x080159a4
 800c2c0:	080152f8 	.word	0x080152f8
 800c2c4:	20000010 	.word	0x20000010
 800c2c8:	20008eb4 	.word	0x20008eb4

0800c2cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d106      	bne.n	800c2ee <tcp_eff_send_mss_netif+0x22>
 800c2e0:	4b14      	ldr	r3, [pc, #80]	; (800c334 <tcp_eff_send_mss_netif+0x68>)
 800c2e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c2e6:	4914      	ldr	r1, [pc, #80]	; (800c338 <tcp_eff_send_mss_netif+0x6c>)
 800c2e8:	4814      	ldr	r0, [pc, #80]	; (800c33c <tcp_eff_send_mss_netif+0x70>)
 800c2ea:	f007 f857 	bl	801339c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d101      	bne.n	800c2f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c2f4:	89fb      	ldrh	r3, [r7, #14]
 800c2f6:	e019      	b.n	800c32c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c2fe:	8afb      	ldrh	r3, [r7, #22]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d012      	beq.n	800c32a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c304:	2328      	movs	r3, #40	; 0x28
 800c306:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c308:	8afa      	ldrh	r2, [r7, #22]
 800c30a:	8abb      	ldrh	r3, [r7, #20]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d904      	bls.n	800c31a <tcp_eff_send_mss_netif+0x4e>
 800c310:	8afa      	ldrh	r2, [r7, #22]
 800c312:	8abb      	ldrh	r3, [r7, #20]
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	b29b      	uxth	r3, r3
 800c318:	e000      	b.n	800c31c <tcp_eff_send_mss_netif+0x50>
 800c31a:	2300      	movs	r3, #0
 800c31c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c31e:	8a7a      	ldrh	r2, [r7, #18]
 800c320:	89fb      	ldrh	r3, [r7, #14]
 800c322:	4293      	cmp	r3, r2
 800c324:	bf28      	it	cs
 800c326:	4613      	movcs	r3, r2
 800c328:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c32a:	89fb      	ldrh	r3, [r7, #14]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3718      	adds	r7, #24
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	080152b4 	.word	0x080152b4
 800c338:	080159c0 	.word	0x080159c0
 800c33c:	080152f8 	.word	0x080152f8

0800c340 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d119      	bne.n	800c388 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c354:	4b10      	ldr	r3, [pc, #64]	; (800c398 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c356:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c35a:	4910      	ldr	r1, [pc, #64]	; (800c39c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c35c:	4810      	ldr	r0, [pc, #64]	; (800c3a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c35e:	f007 f81d 	bl	801339c <iprintf>

  while (pcb != NULL) {
 800c362:	e011      	b.n	800c388 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d108      	bne.n	800c382 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f7fe ffc6 	bl	800b308 <tcp_abort>
      pcb = next;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e002      	b.n	800c388 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1ea      	bne.n	800c364 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c38e:	bf00      	nop
 800c390:	bf00      	nop
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	080152b4 	.word	0x080152b4
 800c39c:	080159e8 	.word	0x080159e8
 800c3a0:	080152f8 	.word	0x080152f8

0800c3a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d02a      	beq.n	800c40a <tcp_netif_ip_addr_changed+0x66>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d026      	beq.n	800c40a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c3bc:	4b15      	ldr	r3, [pc, #84]	; (800c414 <tcp_netif_ip_addr_changed+0x70>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff ffbc 	bl	800c340 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c3c8:	4b13      	ldr	r3, [pc, #76]	; (800c418 <tcp_netif_ip_addr_changed+0x74>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff ffb6 	bl	800c340 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d017      	beq.n	800c40a <tcp_netif_ip_addr_changed+0x66>
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d013      	beq.n	800c40a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c3e2:	4b0e      	ldr	r3, [pc, #56]	; (800c41c <tcp_netif_ip_addr_changed+0x78>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	60fb      	str	r3, [r7, #12]
 800c3e8:	e00c      	b.n	800c404 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d103      	bne.n	800c3fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1ef      	bne.n	800c3ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c40a:	bf00      	nop
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20008ec0 	.word	0x20008ec0
 800c418:	20008eb8 	.word	0x20008eb8
 800c41c:	20008ebc 	.word	0x20008ebc

0800c420 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d007      	beq.n	800c440 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff fc3d 	bl	800bcb4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b08d      	sub	sp, #52	; 0x34
 800c44c:	af04      	add	r7, sp, #16
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d105      	bne.n	800c464 <tcp_input+0x1c>
 800c458:	4b9b      	ldr	r3, [pc, #620]	; (800c6c8 <tcp_input+0x280>)
 800c45a:	2283      	movs	r2, #131	; 0x83
 800c45c:	499b      	ldr	r1, [pc, #620]	; (800c6cc <tcp_input+0x284>)
 800c45e:	489c      	ldr	r0, [pc, #624]	; (800c6d0 <tcp_input+0x288>)
 800c460:	f006 ff9c 	bl	801339c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	4a9a      	ldr	r2, [pc, #616]	; (800c6d4 <tcp_input+0x28c>)
 800c46a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	895b      	ldrh	r3, [r3, #10]
 800c470:	2b13      	cmp	r3, #19
 800c472:	f240 83d1 	bls.w	800cc18 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c476:	4b98      	ldr	r3, [pc, #608]	; (800c6d8 <tcp_input+0x290>)
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	4a97      	ldr	r2, [pc, #604]	; (800c6d8 <tcp_input+0x290>)
 800c47c:	6812      	ldr	r2, [r2, #0]
 800c47e:	4611      	mov	r1, r2
 800c480:	4618      	mov	r0, r3
 800c482:	f005 ffd1 	bl	8012428 <ip4_addr_isbroadcast_u32>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f040 83c7 	bne.w	800cc1c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c48e:	4b92      	ldr	r3, [pc, #584]	; (800c6d8 <tcp_input+0x290>)
 800c490:	695b      	ldr	r3, [r3, #20]
 800c492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c496:	2be0      	cmp	r3, #224	; 0xe0
 800c498:	f000 83c0 	beq.w	800cc1c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c49c:	4b8d      	ldr	r3, [pc, #564]	; (800c6d4 <tcp_input+0x28c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	899b      	ldrh	r3, [r3, #12]
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fc fe51 	bl	800914c <lwip_htons>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	0b1b      	lsrs	r3, r3, #12
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c4b6:	7cbb      	ldrb	r3, [r7, #18]
 800c4b8:	2b13      	cmp	r3, #19
 800c4ba:	f240 83b1 	bls.w	800cc20 <tcp_input+0x7d8>
 800c4be:	7cbb      	ldrb	r3, [r7, #18]
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	891b      	ldrh	r3, [r3, #8]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	f200 83aa 	bhi.w	800cc20 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c4cc:	7cbb      	ldrb	r3, [r7, #18]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	3b14      	subs	r3, #20
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	4b81      	ldr	r3, [pc, #516]	; (800c6dc <tcp_input+0x294>)
 800c4d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c4d8:	4b81      	ldr	r3, [pc, #516]	; (800c6e0 <tcp_input+0x298>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	895a      	ldrh	r2, [r3, #10]
 800c4e2:	7cbb      	ldrb	r3, [r7, #18]
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d309      	bcc.n	800c4fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c4ea:	4b7c      	ldr	r3, [pc, #496]	; (800c6dc <tcp_input+0x294>)
 800c4ec:	881a      	ldrh	r2, [r3, #0]
 800c4ee:	4b7d      	ldr	r3, [pc, #500]	; (800c6e4 <tcp_input+0x29c>)
 800c4f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c4f2:	7cbb      	ldrb	r3, [r7, #18]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7fe f856 	bl	800a5a8 <pbuf_remove_header>
 800c4fc:	e04e      	b.n	800c59c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d105      	bne.n	800c512 <tcp_input+0xca>
 800c506:	4b70      	ldr	r3, [pc, #448]	; (800c6c8 <tcp_input+0x280>)
 800c508:	22c2      	movs	r2, #194	; 0xc2
 800c50a:	4977      	ldr	r1, [pc, #476]	; (800c6e8 <tcp_input+0x2a0>)
 800c50c:	4870      	ldr	r0, [pc, #448]	; (800c6d0 <tcp_input+0x288>)
 800c50e:	f006 ff45 	bl	801339c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c512:	2114      	movs	r1, #20
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7fe f847 	bl	800a5a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	895a      	ldrh	r2, [r3, #10]
 800c51e:	4b71      	ldr	r3, [pc, #452]	; (800c6e4 <tcp_input+0x29c>)
 800c520:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c522:	4b6e      	ldr	r3, [pc, #440]	; (800c6dc <tcp_input+0x294>)
 800c524:	881a      	ldrh	r2, [r3, #0]
 800c526:	4b6f      	ldr	r3, [pc, #444]	; (800c6e4 <tcp_input+0x29c>)
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c52e:	4b6d      	ldr	r3, [pc, #436]	; (800c6e4 <tcp_input+0x29c>)
 800c530:	881b      	ldrh	r3, [r3, #0]
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7fe f837 	bl	800a5a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	895b      	ldrh	r3, [r3, #10]
 800c540:	8a3a      	ldrh	r2, [r7, #16]
 800c542:	429a      	cmp	r2, r3
 800c544:	f200 836e 	bhi.w	800cc24 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	4a64      	ldr	r2, [pc, #400]	; (800c6e0 <tcp_input+0x298>)
 800c550:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	8a3a      	ldrh	r2, [r7, #16]
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe f824 	bl	800a5a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	891a      	ldrh	r2, [r3, #8]
 800c564:	8a3b      	ldrh	r3, [r7, #16]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	b29a      	uxth	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	895b      	ldrh	r3, [r3, #10]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <tcp_input+0x13a>
 800c576:	4b54      	ldr	r3, [pc, #336]	; (800c6c8 <tcp_input+0x280>)
 800c578:	22df      	movs	r2, #223	; 0xdf
 800c57a:	495c      	ldr	r1, [pc, #368]	; (800c6ec <tcp_input+0x2a4>)
 800c57c:	4854      	ldr	r0, [pc, #336]	; (800c6d0 <tcp_input+0x288>)
 800c57e:	f006 ff0d 	bl	801339c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	891a      	ldrh	r2, [r3, #8]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	891b      	ldrh	r3, [r3, #8]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d005      	beq.n	800c59c <tcp_input+0x154>
 800c590:	4b4d      	ldr	r3, [pc, #308]	; (800c6c8 <tcp_input+0x280>)
 800c592:	22e0      	movs	r2, #224	; 0xe0
 800c594:	4956      	ldr	r1, [pc, #344]	; (800c6f0 <tcp_input+0x2a8>)
 800c596:	484e      	ldr	r0, [pc, #312]	; (800c6d0 <tcp_input+0x288>)
 800c598:	f006 ff00 	bl	801339c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c59c:	4b4d      	ldr	r3, [pc, #308]	; (800c6d4 <tcp_input+0x28c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	4a4b      	ldr	r2, [pc, #300]	; (800c6d4 <tcp_input+0x28c>)
 800c5a6:	6814      	ldr	r4, [r2, #0]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fc fdcf 	bl	800914c <lwip_htons>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c5b2:	4b48      	ldr	r3, [pc, #288]	; (800c6d4 <tcp_input+0x28c>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	885b      	ldrh	r3, [r3, #2]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	4a46      	ldr	r2, [pc, #280]	; (800c6d4 <tcp_input+0x28c>)
 800c5bc:	6814      	ldr	r4, [r2, #0]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fc fdc4 	bl	800914c <lwip_htons>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c5c8:	4b42      	ldr	r3, [pc, #264]	; (800c6d4 <tcp_input+0x28c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	4a41      	ldr	r2, [pc, #260]	; (800c6d4 <tcp_input+0x28c>)
 800c5d0:	6814      	ldr	r4, [r2, #0]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fc fdcf 	bl	8009176 <lwip_htonl>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	6063      	str	r3, [r4, #4]
 800c5dc:	6863      	ldr	r3, [r4, #4]
 800c5de:	4a45      	ldr	r2, [pc, #276]	; (800c6f4 <tcp_input+0x2ac>)
 800c5e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c5e2:	4b3c      	ldr	r3, [pc, #240]	; (800c6d4 <tcp_input+0x28c>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	4a3a      	ldr	r2, [pc, #232]	; (800c6d4 <tcp_input+0x28c>)
 800c5ea:	6814      	ldr	r4, [r2, #0]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fc fdc2 	bl	8009176 <lwip_htonl>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	60a3      	str	r3, [r4, #8]
 800c5f6:	68a3      	ldr	r3, [r4, #8]
 800c5f8:	4a3f      	ldr	r2, [pc, #252]	; (800c6f8 <tcp_input+0x2b0>)
 800c5fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c5fc:	4b35      	ldr	r3, [pc, #212]	; (800c6d4 <tcp_input+0x28c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	89db      	ldrh	r3, [r3, #14]
 800c602:	b29b      	uxth	r3, r3
 800c604:	4a33      	ldr	r2, [pc, #204]	; (800c6d4 <tcp_input+0x28c>)
 800c606:	6814      	ldr	r4, [r2, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fc fd9f 	bl	800914c <lwip_htons>
 800c60e:	4603      	mov	r3, r0
 800c610:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c612:	4b30      	ldr	r3, [pc, #192]	; (800c6d4 <tcp_input+0x28c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	899b      	ldrh	r3, [r3, #12]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fc fd96 	bl	800914c <lwip_htons>
 800c620:	4603      	mov	r3, r0
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	4b34      	ldr	r3, [pc, #208]	; (800c6fc <tcp_input+0x2b4>)
 800c62c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	891a      	ldrh	r2, [r3, #8]
 800c632:	4b33      	ldr	r3, [pc, #204]	; (800c700 <tcp_input+0x2b8>)
 800c634:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c636:	4b31      	ldr	r3, [pc, #196]	; (800c6fc <tcp_input+0x2b4>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	f003 0303 	and.w	r3, r3, #3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00c      	beq.n	800c65c <tcp_input+0x214>
    tcplen++;
 800c642:	4b2f      	ldr	r3, [pc, #188]	; (800c700 <tcp_input+0x2b8>)
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	3301      	adds	r3, #1
 800c648:	b29a      	uxth	r2, r3
 800c64a:	4b2d      	ldr	r3, [pc, #180]	; (800c700 <tcp_input+0x2b8>)
 800c64c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	891a      	ldrh	r2, [r3, #8]
 800c652:	4b2b      	ldr	r3, [pc, #172]	; (800c700 <tcp_input+0x2b8>)
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	429a      	cmp	r2, r3
 800c658:	f200 82e6 	bhi.w	800cc28 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c65c:	2300      	movs	r3, #0
 800c65e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c660:	4b28      	ldr	r3, [pc, #160]	; (800c704 <tcp_input+0x2bc>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	e09d      	b.n	800c7a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	7d1b      	ldrb	r3, [r3, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d105      	bne.n	800c67c <tcp_input+0x234>
 800c670:	4b15      	ldr	r3, [pc, #84]	; (800c6c8 <tcp_input+0x280>)
 800c672:	22fb      	movs	r2, #251	; 0xfb
 800c674:	4924      	ldr	r1, [pc, #144]	; (800c708 <tcp_input+0x2c0>)
 800c676:	4816      	ldr	r0, [pc, #88]	; (800c6d0 <tcp_input+0x288>)
 800c678:	f006 fe90 	bl	801339c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	7d1b      	ldrb	r3, [r3, #20]
 800c680:	2b0a      	cmp	r3, #10
 800c682:	d105      	bne.n	800c690 <tcp_input+0x248>
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <tcp_input+0x280>)
 800c686:	22fc      	movs	r2, #252	; 0xfc
 800c688:	4920      	ldr	r1, [pc, #128]	; (800c70c <tcp_input+0x2c4>)
 800c68a:	4811      	ldr	r0, [pc, #68]	; (800c6d0 <tcp_input+0x288>)
 800c68c:	f006 fe86 	bl	801339c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	7d1b      	ldrb	r3, [r3, #20]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d105      	bne.n	800c6a4 <tcp_input+0x25c>
 800c698:	4b0b      	ldr	r3, [pc, #44]	; (800c6c8 <tcp_input+0x280>)
 800c69a:	22fd      	movs	r2, #253	; 0xfd
 800c69c:	491c      	ldr	r1, [pc, #112]	; (800c710 <tcp_input+0x2c8>)
 800c69e:	480c      	ldr	r0, [pc, #48]	; (800c6d0 <tcp_input+0x288>)
 800c6a0:	f006 fe7c 	bl	801339c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	7a1b      	ldrb	r3, [r3, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d033      	beq.n	800c714 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	7a1a      	ldrb	r2, [r3, #8]
 800c6b0:	4b09      	ldr	r3, [pc, #36]	; (800c6d8 <tcp_input+0x290>)
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d029      	beq.n	800c714 <tcp_input+0x2cc>
      prev = pcb;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	61bb      	str	r3, [r7, #24]
      continue;
 800c6c4:	e06b      	b.n	800c79e <tcp_input+0x356>
 800c6c6:	bf00      	nop
 800c6c8:	08015a1c 	.word	0x08015a1c
 800c6cc:	08015a50 	.word	0x08015a50
 800c6d0:	08015a68 	.word	0x08015a68
 800c6d4:	20008edc 	.word	0x20008edc
 800c6d8:	20003784 	.word	0x20003784
 800c6dc:	20008ee0 	.word	0x20008ee0
 800c6e0:	20008ee4 	.word	0x20008ee4
 800c6e4:	20008ee2 	.word	0x20008ee2
 800c6e8:	08015a90 	.word	0x08015a90
 800c6ec:	08015aa0 	.word	0x08015aa0
 800c6f0:	08015aac 	.word	0x08015aac
 800c6f4:	20008eec 	.word	0x20008eec
 800c6f8:	20008ef0 	.word	0x20008ef0
 800c6fc:	20008ef8 	.word	0x20008ef8
 800c700:	20008ef6 	.word	0x20008ef6
 800c704:	20008ec0 	.word	0x20008ec0
 800c708:	08015acc 	.word	0x08015acc
 800c70c:	08015af4 	.word	0x08015af4
 800c710:	08015b20 	.word	0x08015b20
    }

    if (pcb->remote_port == tcphdr->src &&
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	8b1a      	ldrh	r2, [r3, #24]
 800c718:	4b72      	ldr	r3, [pc, #456]	; (800c8e4 <tcp_input+0x49c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	429a      	cmp	r2, r3
 800c722:	d13a      	bne.n	800c79a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	8ada      	ldrh	r2, [r3, #22]
 800c728:	4b6e      	ldr	r3, [pc, #440]	; (800c8e4 <tcp_input+0x49c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	885b      	ldrh	r3, [r3, #2]
 800c72e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c730:	429a      	cmp	r2, r3
 800c732:	d132      	bne.n	800c79a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	685a      	ldr	r2, [r3, #4]
 800c738:	4b6b      	ldr	r3, [pc, #428]	; (800c8e8 <tcp_input+0x4a0>)
 800c73a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d12c      	bne.n	800c79a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	4b68      	ldr	r3, [pc, #416]	; (800c8e8 <tcp_input+0x4a0>)
 800c746:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c748:	429a      	cmp	r2, r3
 800c74a:	d126      	bne.n	800c79a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	69fa      	ldr	r2, [r7, #28]
 800c752:	429a      	cmp	r2, r3
 800c754:	d106      	bne.n	800c764 <tcp_input+0x31c>
 800c756:	4b65      	ldr	r3, [pc, #404]	; (800c8ec <tcp_input+0x4a4>)
 800c758:	f240 120d 	movw	r2, #269	; 0x10d
 800c75c:	4964      	ldr	r1, [pc, #400]	; (800c8f0 <tcp_input+0x4a8>)
 800c75e:	4865      	ldr	r0, [pc, #404]	; (800c8f4 <tcp_input+0x4ac>)
 800c760:	f006 fe1c 	bl	801339c <iprintf>
      if (prev != NULL) {
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00a      	beq.n	800c780 <tcp_input+0x338>
        prev->next = pcb->next;
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	68da      	ldr	r2, [r3, #12]
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c772:	4b61      	ldr	r3, [pc, #388]	; (800c8f8 <tcp_input+0x4b0>)
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c77a:	4a5f      	ldr	r2, [pc, #380]	; (800c8f8 <tcp_input+0x4b0>)
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	69fa      	ldr	r2, [r7, #28]
 800c786:	429a      	cmp	r2, r3
 800c788:	d111      	bne.n	800c7ae <tcp_input+0x366>
 800c78a:	4b58      	ldr	r3, [pc, #352]	; (800c8ec <tcp_input+0x4a4>)
 800c78c:	f240 1215 	movw	r2, #277	; 0x115
 800c790:	495a      	ldr	r1, [pc, #360]	; (800c8fc <tcp_input+0x4b4>)
 800c792:	4858      	ldr	r0, [pc, #352]	; (800c8f4 <tcp_input+0x4ac>)
 800c794:	f006 fe02 	bl	801339c <iprintf>
      break;
 800c798:	e009      	b.n	800c7ae <tcp_input+0x366>
    }
    prev = pcb;
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	61fb      	str	r3, [r7, #28]
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f47f af5e 	bne.w	800c668 <tcp_input+0x220>
 800c7ac:	e000      	b.n	800c7b0 <tcp_input+0x368>
      break;
 800c7ae:	bf00      	nop
  }

  if (pcb == NULL) {
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f040 80aa 	bne.w	800c90c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7b8:	4b51      	ldr	r3, [pc, #324]	; (800c900 <tcp_input+0x4b8>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	61fb      	str	r3, [r7, #28]
 800c7be:	e03f      	b.n	800c840 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	7d1b      	ldrb	r3, [r3, #20]
 800c7c4:	2b0a      	cmp	r3, #10
 800c7c6:	d006      	beq.n	800c7d6 <tcp_input+0x38e>
 800c7c8:	4b48      	ldr	r3, [pc, #288]	; (800c8ec <tcp_input+0x4a4>)
 800c7ca:	f240 121f 	movw	r2, #287	; 0x11f
 800c7ce:	494d      	ldr	r1, [pc, #308]	; (800c904 <tcp_input+0x4bc>)
 800c7d0:	4848      	ldr	r0, [pc, #288]	; (800c8f4 <tcp_input+0x4ac>)
 800c7d2:	f006 fde3 	bl	801339c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	7a1b      	ldrb	r3, [r3, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d009      	beq.n	800c7f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	7a1a      	ldrb	r2, [r3, #8]
 800c7e2:	4b41      	ldr	r3, [pc, #260]	; (800c8e8 <tcp_input+0x4a0>)
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d122      	bne.n	800c838 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	8b1a      	ldrh	r2, [r3, #24]
 800c7f6:	4b3b      	ldr	r3, [pc, #236]	; (800c8e4 <tcp_input+0x49c>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	881b      	ldrh	r3, [r3, #0]
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d11b      	bne.n	800c83a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	8ada      	ldrh	r2, [r3, #22]
 800c806:	4b37      	ldr	r3, [pc, #220]	; (800c8e4 <tcp_input+0x49c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	885b      	ldrh	r3, [r3, #2]
 800c80c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c80e:	429a      	cmp	r2, r3
 800c810:	d113      	bne.n	800c83a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	4b34      	ldr	r3, [pc, #208]	; (800c8e8 <tcp_input+0x4a0>)
 800c818:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d10d      	bne.n	800c83a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	4b31      	ldr	r3, [pc, #196]	; (800c8e8 <tcp_input+0x4a0>)
 800c824:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c826:	429a      	cmp	r2, r3
 800c828:	d107      	bne.n	800c83a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c82a:	69f8      	ldr	r0, [r7, #28]
 800c82c:	f000 fb56 	bl	800cedc <tcp_timewait_input>
        }
        pbuf_free(p);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7fd ff3f 	bl	800a6b4 <pbuf_free>
        return;
 800c836:	e1fd      	b.n	800cc34 <tcp_input+0x7ec>
        continue;
 800c838:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	61fb      	str	r3, [r7, #28]
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1bc      	bne.n	800c7c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c846:	2300      	movs	r3, #0
 800c848:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c84a:	4b2f      	ldr	r3, [pc, #188]	; (800c908 <tcp_input+0x4c0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	617b      	str	r3, [r7, #20]
 800c850:	e02a      	b.n	800c8a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	7a1b      	ldrb	r3, [r3, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00c      	beq.n	800c874 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	7a1a      	ldrb	r2, [r3, #8]
 800c85e:	4b22      	ldr	r3, [pc, #136]	; (800c8e8 <tcp_input+0x4a0>)
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c866:	3301      	adds	r3, #1
 800c868:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d002      	beq.n	800c874 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	61bb      	str	r3, [r7, #24]
        continue;
 800c872:	e016      	b.n	800c8a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	8ada      	ldrh	r2, [r3, #22]
 800c878:	4b1a      	ldr	r3, [pc, #104]	; (800c8e4 <tcp_input+0x49c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	885b      	ldrh	r3, [r3, #2]
 800c87e:	b29b      	uxth	r3, r3
 800c880:	429a      	cmp	r2, r3
 800c882:	d10c      	bne.n	800c89e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	4b17      	ldr	r3, [pc, #92]	; (800c8e8 <tcp_input+0x4a0>)
 800c88a:	695b      	ldr	r3, [r3, #20]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d00f      	beq.n	800c8b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00d      	beq.n	800c8b2 <tcp_input+0x46a>
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d009      	beq.n	800c8b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	617b      	str	r3, [r7, #20]
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1d1      	bne.n	800c852 <tcp_input+0x40a>
 800c8ae:	e000      	b.n	800c8b2 <tcp_input+0x46a>
            break;
 800c8b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d029      	beq.n	800c90c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00a      	beq.n	800c8d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c8c6:	4b10      	ldr	r3, [pc, #64]	; (800c908 <tcp_input+0x4c0>)
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c8ce:	4a0e      	ldr	r2, [pc, #56]	; (800c908 <tcp_input+0x4c0>)
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c8d4:	6978      	ldr	r0, [r7, #20]
 800c8d6:	f000 fa03 	bl	800cce0 <tcp_listen_input>
      }
      pbuf_free(p);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7fd feea 	bl	800a6b4 <pbuf_free>
      return;
 800c8e0:	e1a8      	b.n	800cc34 <tcp_input+0x7ec>
 800c8e2:	bf00      	nop
 800c8e4:	20008edc 	.word	0x20008edc
 800c8e8:	20003784 	.word	0x20003784
 800c8ec:	08015a1c 	.word	0x08015a1c
 800c8f0:	08015b48 	.word	0x08015b48
 800c8f4:	08015a68 	.word	0x08015a68
 800c8f8:	20008ec0 	.word	0x20008ec0
 800c8fc:	08015b74 	.word	0x08015b74
 800c900:	20008ec4 	.word	0x20008ec4
 800c904:	08015ba0 	.word	0x08015ba0
 800c908:	20008ebc 	.word	0x20008ebc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f000 8158 	beq.w	800cbc4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c914:	4b95      	ldr	r3, [pc, #596]	; (800cb6c <tcp_input+0x724>)
 800c916:	2200      	movs	r2, #0
 800c918:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	891a      	ldrh	r2, [r3, #8]
 800c91e:	4b93      	ldr	r3, [pc, #588]	; (800cb6c <tcp_input+0x724>)
 800c920:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c922:	4a92      	ldr	r2, [pc, #584]	; (800cb6c <tcp_input+0x724>)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c928:	4b91      	ldr	r3, [pc, #580]	; (800cb70 <tcp_input+0x728>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a8f      	ldr	r2, [pc, #572]	; (800cb6c <tcp_input+0x724>)
 800c92e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c930:	4b90      	ldr	r3, [pc, #576]	; (800cb74 <tcp_input+0x72c>)
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c936:	4b90      	ldr	r3, [pc, #576]	; (800cb78 <tcp_input+0x730>)
 800c938:	2200      	movs	r2, #0
 800c93a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c93c:	4b8f      	ldr	r3, [pc, #572]	; (800cb7c <tcp_input+0x734>)
 800c93e:	2200      	movs	r2, #0
 800c940:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c942:	4b8f      	ldr	r3, [pc, #572]	; (800cb80 <tcp_input+0x738>)
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	f003 0308 	and.w	r3, r3, #8
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d006      	beq.n	800c95c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7b5b      	ldrb	r3, [r3, #13]
 800c952:	f043 0301 	orr.w	r3, r3, #1
 800c956:	b2da      	uxtb	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c960:	2b00      	cmp	r3, #0
 800c962:	d017      	beq.n	800c994 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c964:	69f8      	ldr	r0, [r7, #28]
 800c966:	f7ff f929 	bl	800bbbc <tcp_process_refused_data>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f113 0f0d 	cmn.w	r3, #13
 800c970:	d007      	beq.n	800c982 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00c      	beq.n	800c994 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c97a:	4b82      	ldr	r3, [pc, #520]	; (800cb84 <tcp_input+0x73c>)
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d008      	beq.n	800c994 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c986:	2b00      	cmp	r3, #0
 800c988:	f040 80e3 	bne.w	800cb52 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c98c:	69f8      	ldr	r0, [r7, #28]
 800c98e:	f003 f9ad 	bl	800fcec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c992:	e0de      	b.n	800cb52 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c994:	4a7c      	ldr	r2, [pc, #496]	; (800cb88 <tcp_input+0x740>)
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c99a:	69f8      	ldr	r0, [r7, #28]
 800c99c:	f000 fb18 	bl	800cfd0 <tcp_process>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c9a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9a8:	f113 0f0d 	cmn.w	r3, #13
 800c9ac:	f000 80d3 	beq.w	800cb56 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c9b0:	4b71      	ldr	r3, [pc, #452]	; (800cb78 <tcp_input+0x730>)
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	f003 0308 	and.w	r3, r3, #8
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d015      	beq.n	800c9e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d008      	beq.n	800c9d8 <tcp_input+0x590>
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9cc:	69fa      	ldr	r2, [r7, #28]
 800c9ce:	6912      	ldr	r2, [r2, #16]
 800c9d0:	f06f 010d 	mvn.w	r1, #13
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c9d8:	69f9      	ldr	r1, [r7, #28]
 800c9da:	486c      	ldr	r0, [pc, #432]	; (800cb8c <tcp_input+0x744>)
 800c9dc:	f7ff fbbc 	bl	800c158 <tcp_pcb_remove>
        tcp_free(pcb);
 800c9e0:	69f8      	ldr	r0, [r7, #28]
 800c9e2:	f7fe f9a9 	bl	800ad38 <tcp_free>
 800c9e6:	e0da      	b.n	800cb9e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c9ec:	4b63      	ldr	r3, [pc, #396]	; (800cb7c <tcp_input+0x734>)
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01d      	beq.n	800ca30 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c9f4:	4b61      	ldr	r3, [pc, #388]	; (800cb7c <tcp_input+0x734>)
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00a      	beq.n	800ca1a <tcp_input+0x5d2>
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca0a:	69fa      	ldr	r2, [r7, #28]
 800ca0c:	6910      	ldr	r0, [r2, #16]
 800ca0e:	89fa      	ldrh	r2, [r7, #14]
 800ca10:	69f9      	ldr	r1, [r7, #28]
 800ca12:	4798      	blx	r3
 800ca14:	4603      	mov	r3, r0
 800ca16:	74fb      	strb	r3, [r7, #19]
 800ca18:	e001      	b.n	800ca1e <tcp_input+0x5d6>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ca1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca22:	f113 0f0d 	cmn.w	r3, #13
 800ca26:	f000 8098 	beq.w	800cb5a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ca2a:	4b54      	ldr	r3, [pc, #336]	; (800cb7c <tcp_input+0x734>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ca30:	69f8      	ldr	r0, [r7, #28]
 800ca32:	f000 f915 	bl	800cc60 <tcp_input_delayed_close>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f040 8090 	bne.w	800cb5e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ca3e:	4b4d      	ldr	r3, [pc, #308]	; (800cb74 <tcp_input+0x72c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d041      	beq.n	800caca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d006      	beq.n	800ca5c <tcp_input+0x614>
 800ca4e:	4b50      	ldr	r3, [pc, #320]	; (800cb90 <tcp_input+0x748>)
 800ca50:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ca54:	494f      	ldr	r1, [pc, #316]	; (800cb94 <tcp_input+0x74c>)
 800ca56:	4850      	ldr	r0, [pc, #320]	; (800cb98 <tcp_input+0x750>)
 800ca58:	f006 fca0 	bl	801339c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	8b5b      	ldrh	r3, [r3, #26]
 800ca60:	f003 0310 	and.w	r3, r3, #16
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d008      	beq.n	800ca7a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ca68:	4b42      	ldr	r3, [pc, #264]	; (800cb74 <tcp_input+0x72c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7fd fe21 	bl	800a6b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ca72:	69f8      	ldr	r0, [r7, #28]
 800ca74:	f7fe fc48 	bl	800b308 <tcp_abort>
            goto aborted;
 800ca78:	e091      	b.n	800cb9e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00c      	beq.n	800ca9e <tcp_input+0x656>
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	6918      	ldr	r0, [r3, #16]
 800ca8e:	4b39      	ldr	r3, [pc, #228]	; (800cb74 <tcp_input+0x72c>)
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	2300      	movs	r3, #0
 800ca94:	69f9      	ldr	r1, [r7, #28]
 800ca96:	47a0      	blx	r4
 800ca98:	4603      	mov	r3, r0
 800ca9a:	74fb      	strb	r3, [r7, #19]
 800ca9c:	e008      	b.n	800cab0 <tcp_input+0x668>
 800ca9e:	4b35      	ldr	r3, [pc, #212]	; (800cb74 <tcp_input+0x72c>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	2300      	movs	r3, #0
 800caa4:	69f9      	ldr	r1, [r7, #28]
 800caa6:	2000      	movs	r0, #0
 800caa8:	f7ff f95e 	bl	800bd68 <tcp_recv_null>
 800caac:	4603      	mov	r3, r0
 800caae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cab0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cab4:	f113 0f0d 	cmn.w	r3, #13
 800cab8:	d053      	beq.n	800cb62 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800caba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d003      	beq.n	800caca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cac2:	4b2c      	ldr	r3, [pc, #176]	; (800cb74 <tcp_input+0x72c>)
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800caca:	4b2b      	ldr	r3, [pc, #172]	; (800cb78 <tcp_input+0x730>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	f003 0320 	and.w	r3, r3, #32
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d030      	beq.n	800cb38 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d009      	beq.n	800caf2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cae2:	7b5a      	ldrb	r2, [r3, #13]
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cae8:	f042 0220 	orr.w	r2, r2, #32
 800caec:	b2d2      	uxtb	r2, r2
 800caee:	735a      	strb	r2, [r3, #13]
 800caf0:	e022      	b.n	800cb38 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caf6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cafa:	d005      	beq.n	800cb08 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb00:	3301      	adds	r3, #1
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00b      	beq.n	800cb2a <tcp_input+0x6e2>
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	6918      	ldr	r0, [r3, #16]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	2200      	movs	r2, #0
 800cb20:	69f9      	ldr	r1, [r7, #28]
 800cb22:	47a0      	blx	r4
 800cb24:	4603      	mov	r3, r0
 800cb26:	74fb      	strb	r3, [r7, #19]
 800cb28:	e001      	b.n	800cb2e <tcp_input+0x6e6>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cb2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb32:	f113 0f0d 	cmn.w	r3, #13
 800cb36:	d016      	beq.n	800cb66 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cb38:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <tcp_input+0x740>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cb3e:	69f8      	ldr	r0, [r7, #28]
 800cb40:	f000 f88e 	bl	800cc60 <tcp_input_delayed_close>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d128      	bne.n	800cb9c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cb4a:	69f8      	ldr	r0, [r7, #28]
 800cb4c:	f002 fac8 	bl	800f0e0 <tcp_output>
 800cb50:	e025      	b.n	800cb9e <tcp_input+0x756>
        goto aborted;
 800cb52:	bf00      	nop
 800cb54:	e023      	b.n	800cb9e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cb56:	bf00      	nop
 800cb58:	e021      	b.n	800cb9e <tcp_input+0x756>
              goto aborted;
 800cb5a:	bf00      	nop
 800cb5c:	e01f      	b.n	800cb9e <tcp_input+0x756>
          goto aborted;
 800cb5e:	bf00      	nop
 800cb60:	e01d      	b.n	800cb9e <tcp_input+0x756>
            goto aborted;
 800cb62:	bf00      	nop
 800cb64:	e01b      	b.n	800cb9e <tcp_input+0x756>
              goto aborted;
 800cb66:	bf00      	nop
 800cb68:	e019      	b.n	800cb9e <tcp_input+0x756>
 800cb6a:	bf00      	nop
 800cb6c:	20008ecc 	.word	0x20008ecc
 800cb70:	20008edc 	.word	0x20008edc
 800cb74:	20008efc 	.word	0x20008efc
 800cb78:	20008ef9 	.word	0x20008ef9
 800cb7c:	20008ef4 	.word	0x20008ef4
 800cb80:	20008ef8 	.word	0x20008ef8
 800cb84:	20008ef6 	.word	0x20008ef6
 800cb88:	20008f00 	.word	0x20008f00
 800cb8c:	20008ec0 	.word	0x20008ec0
 800cb90:	08015a1c 	.word	0x08015a1c
 800cb94:	08015bd0 	.word	0x08015bd0
 800cb98:	08015a68 	.word	0x08015a68
          goto aborted;
 800cb9c:	bf00      	nop
    tcp_input_pcb = NULL;
 800cb9e:	4b27      	ldr	r3, [pc, #156]	; (800cc3c <tcp_input+0x7f4>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cba4:	4b26      	ldr	r3, [pc, #152]	; (800cc40 <tcp_input+0x7f8>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cbaa:	4b26      	ldr	r3, [pc, #152]	; (800cc44 <tcp_input+0x7fc>)
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d03f      	beq.n	800cc32 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cbb2:	4b24      	ldr	r3, [pc, #144]	; (800cc44 <tcp_input+0x7fc>)
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fd fd7c 	bl	800a6b4 <pbuf_free>
      inseg.p = NULL;
 800cbbc:	4b21      	ldr	r3, [pc, #132]	; (800cc44 <tcp_input+0x7fc>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cbc2:	e036      	b.n	800cc32 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cbc4:	4b20      	ldr	r3, [pc, #128]	; (800cc48 <tcp_input+0x800>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	899b      	ldrh	r3, [r3, #12]
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fc fabd 	bl	800914c <lwip_htons>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	f003 0304 	and.w	r3, r3, #4
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d118      	bne.n	800cc10 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbde:	4b1b      	ldr	r3, [pc, #108]	; (800cc4c <tcp_input+0x804>)
 800cbe0:	6819      	ldr	r1, [r3, #0]
 800cbe2:	4b1b      	ldr	r3, [pc, #108]	; (800cc50 <tcp_input+0x808>)
 800cbe4:	881b      	ldrh	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4b1a      	ldr	r3, [pc, #104]	; (800cc54 <tcp_input+0x80c>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbee:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <tcp_input+0x800>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbf2:	885b      	ldrh	r3, [r3, #2]
 800cbf4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbf6:	4a14      	ldr	r2, [pc, #80]	; (800cc48 <tcp_input+0x800>)
 800cbf8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbfa:	8812      	ldrh	r2, [r2, #0]
 800cbfc:	b292      	uxth	r2, r2
 800cbfe:	9202      	str	r2, [sp, #8]
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	4b15      	ldr	r3, [pc, #84]	; (800cc58 <tcp_input+0x810>)
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	4b15      	ldr	r3, [pc, #84]	; (800cc5c <tcp_input+0x814>)
 800cc08:	4602      	mov	r2, r0
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	f003 f81c 	bl	800fc48 <tcp_rst>
    pbuf_free(p);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7fd fd4f 	bl	800a6b4 <pbuf_free>
  return;
 800cc16:	e00c      	b.n	800cc32 <tcp_input+0x7ea>
    goto dropped;
 800cc18:	bf00      	nop
 800cc1a:	e006      	b.n	800cc2a <tcp_input+0x7e2>
    goto dropped;
 800cc1c:	bf00      	nop
 800cc1e:	e004      	b.n	800cc2a <tcp_input+0x7e2>
    goto dropped;
 800cc20:	bf00      	nop
 800cc22:	e002      	b.n	800cc2a <tcp_input+0x7e2>
      goto dropped;
 800cc24:	bf00      	nop
 800cc26:	e000      	b.n	800cc2a <tcp_input+0x7e2>
      goto dropped;
 800cc28:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7fd fd42 	bl	800a6b4 <pbuf_free>
 800cc30:	e000      	b.n	800cc34 <tcp_input+0x7ec>
  return;
 800cc32:	bf00      	nop
}
 800cc34:	3724      	adds	r7, #36	; 0x24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd90      	pop	{r4, r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20008f00 	.word	0x20008f00
 800cc40:	20008efc 	.word	0x20008efc
 800cc44:	20008ecc 	.word	0x20008ecc
 800cc48:	20008edc 	.word	0x20008edc
 800cc4c:	20008ef0 	.word	0x20008ef0
 800cc50:	20008ef6 	.word	0x20008ef6
 800cc54:	20008eec 	.word	0x20008eec
 800cc58:	20003794 	.word	0x20003794
 800cc5c:	20003798 	.word	0x20003798

0800cc60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d106      	bne.n	800cc7c <tcp_input_delayed_close+0x1c>
 800cc6e:	4b17      	ldr	r3, [pc, #92]	; (800cccc <tcp_input_delayed_close+0x6c>)
 800cc70:	f240 225a 	movw	r2, #602	; 0x25a
 800cc74:	4916      	ldr	r1, [pc, #88]	; (800ccd0 <tcp_input_delayed_close+0x70>)
 800cc76:	4817      	ldr	r0, [pc, #92]	; (800ccd4 <tcp_input_delayed_close+0x74>)
 800cc78:	f006 fb90 	bl	801339c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cc7c:	4b16      	ldr	r3, [pc, #88]	; (800ccd8 <tcp_input_delayed_close+0x78>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	f003 0310 	and.w	r3, r3, #16
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d01c      	beq.n	800ccc2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	8b5b      	ldrh	r3, [r3, #26]
 800cc8c:	f003 0310 	and.w	r3, r3, #16
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10d      	bne.n	800ccb0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d008      	beq.n	800ccb0 <tcp_input_delayed_close+0x50>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	6912      	ldr	r2, [r2, #16]
 800cca8:	f06f 010e 	mvn.w	r1, #14
 800ccac:	4610      	mov	r0, r2
 800ccae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	480a      	ldr	r0, [pc, #40]	; (800ccdc <tcp_input_delayed_close+0x7c>)
 800ccb4:	f7ff fa50 	bl	800c158 <tcp_pcb_remove>
    tcp_free(pcb);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7fe f83d 	bl	800ad38 <tcp_free>
    return 1;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e000      	b.n	800ccc4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	08015a1c 	.word	0x08015a1c
 800ccd0:	08015bec 	.word	0x08015bec
 800ccd4:	08015a68 	.word	0x08015a68
 800ccd8:	20008ef9 	.word	0x20008ef9
 800ccdc:	20008ec0 	.word	0x20008ec0

0800cce0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cce0:	b590      	push	{r4, r7, lr}
 800cce2:	b08b      	sub	sp, #44	; 0x2c
 800cce4:	af04      	add	r7, sp, #16
 800cce6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cce8:	4b6f      	ldr	r3, [pc, #444]	; (800cea8 <tcp_listen_input+0x1c8>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f040 80d2 	bne.w	800ce9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d106      	bne.n	800cd0a <tcp_listen_input+0x2a>
 800ccfc:	4b6b      	ldr	r3, [pc, #428]	; (800ceac <tcp_listen_input+0x1cc>)
 800ccfe:	f240 2281 	movw	r2, #641	; 0x281
 800cd02:	496b      	ldr	r1, [pc, #428]	; (800ceb0 <tcp_listen_input+0x1d0>)
 800cd04:	486b      	ldr	r0, [pc, #428]	; (800ceb4 <tcp_listen_input+0x1d4>)
 800cd06:	f006 fb49 	bl	801339c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cd0a:	4b67      	ldr	r3, [pc, #412]	; (800cea8 <tcp_listen_input+0x1c8>)
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	f003 0310 	and.w	r3, r3, #16
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d019      	beq.n	800cd4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd16:	4b68      	ldr	r3, [pc, #416]	; (800ceb8 <tcp_listen_input+0x1d8>)
 800cd18:	6819      	ldr	r1, [r3, #0]
 800cd1a:	4b68      	ldr	r3, [pc, #416]	; (800cebc <tcp_listen_input+0x1dc>)
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	4b67      	ldr	r3, [pc, #412]	; (800cec0 <tcp_listen_input+0x1e0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd26:	4b67      	ldr	r3, [pc, #412]	; (800cec4 <tcp_listen_input+0x1e4>)
 800cd28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd2a:	885b      	ldrh	r3, [r3, #2]
 800cd2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd2e:	4a65      	ldr	r2, [pc, #404]	; (800cec4 <tcp_listen_input+0x1e4>)
 800cd30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd32:	8812      	ldrh	r2, [r2, #0]
 800cd34:	b292      	uxth	r2, r2
 800cd36:	9202      	str	r2, [sp, #8]
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	4b63      	ldr	r3, [pc, #396]	; (800cec8 <tcp_listen_input+0x1e8>)
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	4b63      	ldr	r3, [pc, #396]	; (800cecc <tcp_listen_input+0x1ec>)
 800cd40:	4602      	mov	r2, r0
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f002 ff80 	bl	800fc48 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cd48:	e0a9      	b.n	800ce9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cd4a:	4b57      	ldr	r3, [pc, #348]	; (800cea8 <tcp_listen_input+0x1c8>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	f003 0302 	and.w	r3, r3, #2
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 80a3 	beq.w	800ce9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	7d5b      	ldrb	r3, [r3, #21]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7ff f927 	bl	800bfb0 <tcp_alloc>
 800cd62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d111      	bne.n	800cd8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00a      	beq.n	800cd88 <tcp_listen_input+0xa8>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	699b      	ldr	r3, [r3, #24]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	6910      	ldr	r0, [r2, #16]
 800cd7a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd7e:	2100      	movs	r1, #0
 800cd80:	4798      	blx	r3
 800cd82:	4603      	mov	r3, r0
 800cd84:	73bb      	strb	r3, [r7, #14]
      return;
 800cd86:	e08b      	b.n	800cea0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cd88:	23f0      	movs	r3, #240	; 0xf0
 800cd8a:	73bb      	strb	r3, [r7, #14]
      return;
 800cd8c:	e088      	b.n	800cea0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cd8e:	4b50      	ldr	r3, [pc, #320]	; (800ced0 <tcp_listen_input+0x1f0>)
 800cd90:	695a      	ldr	r2, [r3, #20]
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cd96:	4b4e      	ldr	r3, [pc, #312]	; (800ced0 <tcp_listen_input+0x1f0>)
 800cd98:	691a      	ldr	r2, [r3, #16]
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	8ada      	ldrh	r2, [r3, #22]
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cda6:	4b47      	ldr	r3, [pc, #284]	; (800cec4 <tcp_listen_input+0x1e4>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	2203      	movs	r2, #3
 800cdb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cdb8:	4b41      	ldr	r3, [pc, #260]	; (800cec0 <tcp_listen_input+0x1e0>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cdca:	6978      	ldr	r0, [r7, #20]
 800cdcc:	f7ff fa58 	bl	800c280 <tcp_next_iss>
 800cdd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	693a      	ldr	r2, [r7, #16]
 800cddc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	693a      	ldr	r2, [r7, #16]
 800cde2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cdea:	4b35      	ldr	r3, [pc, #212]	; (800cec0 <tcp_listen_input+0x1e0>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	1e5a      	subs	r2, r3, #1
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	691a      	ldr	r2, [r3, #16]
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	7a5b      	ldrb	r3, [r3, #9]
 800ce06:	f003 030c 	and.w	r3, r3, #12
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	7a1a      	ldrb	r2, [r3, #8]
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ce18:	4b2e      	ldr	r3, [pc, #184]	; (800ced4 <tcp_listen_input+0x1f4>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	60da      	str	r2, [r3, #12]
 800ce20:	4a2c      	ldr	r2, [pc, #176]	; (800ced4 <tcp_listen_input+0x1f4>)
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	6013      	str	r3, [r2, #0]
 800ce26:	f003 f8d1 	bl	800ffcc <tcp_timer_needed>
 800ce2a:	4b2b      	ldr	r3, [pc, #172]	; (800ced8 <tcp_listen_input+0x1f8>)
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ce30:	6978      	ldr	r0, [r7, #20]
 800ce32:	f001 fd8f 	bl	800e954 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ce36:	4b23      	ldr	r3, [pc, #140]	; (800cec4 <tcp_listen_input+0x1e4>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	89db      	ldrh	r3, [r3, #14]
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	3304      	adds	r3, #4
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f005 f84f 	bl	8011efc <ip4_route>
 800ce5e:	4601      	mov	r1, r0
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	3304      	adds	r3, #4
 800ce64:	461a      	mov	r2, r3
 800ce66:	4620      	mov	r0, r4
 800ce68:	f7ff fa30 	bl	800c2cc <tcp_eff_send_mss_netif>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	461a      	mov	r2, r3
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce74:	2112      	movs	r1, #18
 800ce76:	6978      	ldr	r0, [r7, #20]
 800ce78:	f002 f844 	bl	800ef04 <tcp_enqueue_flags>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ce80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d004      	beq.n	800ce92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ce88:	2100      	movs	r1, #0
 800ce8a:	6978      	ldr	r0, [r7, #20]
 800ce8c:	f7fe f97e 	bl	800b18c <tcp_abandon>
      return;
 800ce90:	e006      	b.n	800cea0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ce92:	6978      	ldr	r0, [r7, #20]
 800ce94:	f002 f924 	bl	800f0e0 <tcp_output>
  return;
 800ce98:	e001      	b.n	800ce9e <tcp_listen_input+0x1be>
    return;
 800ce9a:	bf00      	nop
 800ce9c:	e000      	b.n	800cea0 <tcp_listen_input+0x1c0>
  return;
 800ce9e:	bf00      	nop
}
 800cea0:	371c      	adds	r7, #28
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd90      	pop	{r4, r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20008ef8 	.word	0x20008ef8
 800ceac:	08015a1c 	.word	0x08015a1c
 800ceb0:	08015c14 	.word	0x08015c14
 800ceb4:	08015a68 	.word	0x08015a68
 800ceb8:	20008ef0 	.word	0x20008ef0
 800cebc:	20008ef6 	.word	0x20008ef6
 800cec0:	20008eec 	.word	0x20008eec
 800cec4:	20008edc 	.word	0x20008edc
 800cec8:	20003794 	.word	0x20003794
 800cecc:	20003798 	.word	0x20003798
 800ced0:	20003784 	.word	0x20003784
 800ced4:	20008ec0 	.word	0x20008ec0
 800ced8:	20008ec8 	.word	0x20008ec8

0800cedc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b086      	sub	sp, #24
 800cee0:	af04      	add	r7, sp, #16
 800cee2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cee4:	4b2f      	ldr	r3, [pc, #188]	; (800cfa4 <tcp_timewait_input+0xc8>)
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	f003 0304 	and.w	r3, r3, #4
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d153      	bne.n	800cf98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <tcp_timewait_input+0x28>
 800cef6:	4b2c      	ldr	r3, [pc, #176]	; (800cfa8 <tcp_timewait_input+0xcc>)
 800cef8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cefc:	492b      	ldr	r1, [pc, #172]	; (800cfac <tcp_timewait_input+0xd0>)
 800cefe:	482c      	ldr	r0, [pc, #176]	; (800cfb0 <tcp_timewait_input+0xd4>)
 800cf00:	f006 fa4c 	bl	801339c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cf04:	4b27      	ldr	r3, [pc, #156]	; (800cfa4 <tcp_timewait_input+0xc8>)
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d02a      	beq.n	800cf66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cf10:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <tcp_timewait_input+0xd8>)
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	db2d      	blt.n	800cf7a <tcp_timewait_input+0x9e>
 800cf1e:	4b25      	ldr	r3, [pc, #148]	; (800cfb4 <tcp_timewait_input+0xd8>)
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf26:	6879      	ldr	r1, [r7, #4]
 800cf28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf2a:	440b      	add	r3, r1
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	dc23      	bgt.n	800cf7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf32:	4b21      	ldr	r3, [pc, #132]	; (800cfb8 <tcp_timewait_input+0xdc>)
 800cf34:	6819      	ldr	r1, [r3, #0]
 800cf36:	4b21      	ldr	r3, [pc, #132]	; (800cfbc <tcp_timewait_input+0xe0>)
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	4b1d      	ldr	r3, [pc, #116]	; (800cfb4 <tcp_timewait_input+0xd8>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf42:	4b1f      	ldr	r3, [pc, #124]	; (800cfc0 <tcp_timewait_input+0xe4>)
 800cf44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf46:	885b      	ldrh	r3, [r3, #2]
 800cf48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf4a:	4a1d      	ldr	r2, [pc, #116]	; (800cfc0 <tcp_timewait_input+0xe4>)
 800cf4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf4e:	8812      	ldrh	r2, [r2, #0]
 800cf50:	b292      	uxth	r2, r2
 800cf52:	9202      	str	r2, [sp, #8]
 800cf54:	9301      	str	r3, [sp, #4]
 800cf56:	4b1b      	ldr	r3, [pc, #108]	; (800cfc4 <tcp_timewait_input+0xe8>)
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	4b1b      	ldr	r3, [pc, #108]	; (800cfc8 <tcp_timewait_input+0xec>)
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f002 fe72 	bl	800fc48 <tcp_rst>
      return;
 800cf64:	e01b      	b.n	800cf9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cf66:	4b0f      	ldr	r3, [pc, #60]	; (800cfa4 <tcp_timewait_input+0xc8>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d003      	beq.n	800cf7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cf72:	4b16      	ldr	r3, [pc, #88]	; (800cfcc <tcp_timewait_input+0xf0>)
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cf7a:	4b10      	ldr	r3, [pc, #64]	; (800cfbc <tcp_timewait_input+0xe0>)
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00c      	beq.n	800cf9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	8b5b      	ldrh	r3, [r3, #26]
 800cf86:	f043 0302 	orr.w	r3, r3, #2
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f002 f8a5 	bl	800f0e0 <tcp_output>
  }
  return;
 800cf96:	e001      	b.n	800cf9c <tcp_timewait_input+0xc0>
    return;
 800cf98:	bf00      	nop
 800cf9a:	e000      	b.n	800cf9e <tcp_timewait_input+0xc2>
  return;
 800cf9c:	bf00      	nop
}
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	20008ef8 	.word	0x20008ef8
 800cfa8:	08015a1c 	.word	0x08015a1c
 800cfac:	08015c34 	.word	0x08015c34
 800cfb0:	08015a68 	.word	0x08015a68
 800cfb4:	20008eec 	.word	0x20008eec
 800cfb8:	20008ef0 	.word	0x20008ef0
 800cfbc:	20008ef6 	.word	0x20008ef6
 800cfc0:	20008edc 	.word	0x20008edc
 800cfc4:	20003794 	.word	0x20003794
 800cfc8:	20003798 	.word	0x20003798
 800cfcc:	20008eb4 	.word	0x20008eb4

0800cfd0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cfd0:	b590      	push	{r4, r7, lr}
 800cfd2:	b08d      	sub	sp, #52	; 0x34
 800cfd4:	af04      	add	r7, sp, #16
 800cfd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <tcp_process+0x24>
 800cfe6:	4b9d      	ldr	r3, [pc, #628]	; (800d25c <tcp_process+0x28c>)
 800cfe8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cfec:	499c      	ldr	r1, [pc, #624]	; (800d260 <tcp_process+0x290>)
 800cfee:	489d      	ldr	r0, [pc, #628]	; (800d264 <tcp_process+0x294>)
 800cff0:	f006 f9d4 	bl	801339c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cff4:	4b9c      	ldr	r3, [pc, #624]	; (800d268 <tcp_process+0x298>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	f003 0304 	and.w	r3, r3, #4
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d04e      	beq.n	800d09e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	7d1b      	ldrb	r3, [r3, #20]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d108      	bne.n	800d01a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d00c:	4b97      	ldr	r3, [pc, #604]	; (800d26c <tcp_process+0x29c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	429a      	cmp	r2, r3
 800d012:	d123      	bne.n	800d05c <tcp_process+0x8c>
        acceptable = 1;
 800d014:	2301      	movs	r3, #1
 800d016:	76fb      	strb	r3, [r7, #27]
 800d018:	e020      	b.n	800d05c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d01e:	4b94      	ldr	r3, [pc, #592]	; (800d270 <tcp_process+0x2a0>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	429a      	cmp	r2, r3
 800d024:	d102      	bne.n	800d02c <tcp_process+0x5c>
        acceptable = 1;
 800d026:	2301      	movs	r3, #1
 800d028:	76fb      	strb	r3, [r7, #27]
 800d02a:	e017      	b.n	800d05c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d02c:	4b90      	ldr	r3, [pc, #576]	; (800d270 <tcp_process+0x2a0>)
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d034:	1ad3      	subs	r3, r2, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	db10      	blt.n	800d05c <tcp_process+0x8c>
 800d03a:	4b8d      	ldr	r3, [pc, #564]	; (800d270 <tcp_process+0x2a0>)
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d042:	6879      	ldr	r1, [r7, #4]
 800d044:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d046:	440b      	add	r3, r1
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	dc06      	bgt.n	800d05c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	8b5b      	ldrh	r3, [r3, #26]
 800d052:	f043 0302 	orr.w	r3, r3, #2
 800d056:	b29a      	uxth	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d05c:	7efb      	ldrb	r3, [r7, #27]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d01b      	beq.n	800d09a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	7d1b      	ldrb	r3, [r3, #20]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d106      	bne.n	800d078 <tcp_process+0xa8>
 800d06a:	4b7c      	ldr	r3, [pc, #496]	; (800d25c <tcp_process+0x28c>)
 800d06c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d070:	4980      	ldr	r1, [pc, #512]	; (800d274 <tcp_process+0x2a4>)
 800d072:	487c      	ldr	r0, [pc, #496]	; (800d264 <tcp_process+0x294>)
 800d074:	f006 f992 	bl	801339c <iprintf>
      recv_flags |= TF_RESET;
 800d078:	4b7f      	ldr	r3, [pc, #508]	; (800d278 <tcp_process+0x2a8>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	f043 0308 	orr.w	r3, r3, #8
 800d080:	b2da      	uxtb	r2, r3
 800d082:	4b7d      	ldr	r3, [pc, #500]	; (800d278 <tcp_process+0x2a8>)
 800d084:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	8b5b      	ldrh	r3, [r3, #26]
 800d08a:	f023 0301 	bic.w	r3, r3, #1
 800d08e:	b29a      	uxth	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d094:	f06f 030d 	mvn.w	r3, #13
 800d098:	e37a      	b.n	800d790 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	e378      	b.n	800d790 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d09e:	4b72      	ldr	r3, [pc, #456]	; (800d268 <tcp_process+0x298>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	f003 0302 	and.w	r3, r3, #2
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d010      	beq.n	800d0cc <tcp_process+0xfc>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	7d1b      	ldrb	r3, [r3, #20]
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d00c      	beq.n	800d0cc <tcp_process+0xfc>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	7d1b      	ldrb	r3, [r3, #20]
 800d0b6:	2b03      	cmp	r3, #3
 800d0b8:	d008      	beq.n	800d0cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	8b5b      	ldrh	r3, [r3, #26]
 800d0be:	f043 0302 	orr.w	r3, r3, #2
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	e361      	b.n	800d790 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	8b5b      	ldrh	r3, [r3, #26]
 800d0d0:	f003 0310 	and.w	r3, r3, #16
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d103      	bne.n	800d0e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d0d8:	4b68      	ldr	r3, [pc, #416]	; (800d27c <tcp_process+0x2ac>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 fc2f 	bl	800e954 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	7d1b      	ldrb	r3, [r3, #20]
 800d0fa:	3b02      	subs	r3, #2
 800d0fc:	2b07      	cmp	r3, #7
 800d0fe:	f200 8337 	bhi.w	800d770 <tcp_process+0x7a0>
 800d102:	a201      	add	r2, pc, #4	; (adr r2, 800d108 <tcp_process+0x138>)
 800d104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d108:	0800d129 	.word	0x0800d129
 800d10c:	0800d359 	.word	0x0800d359
 800d110:	0800d4d1 	.word	0x0800d4d1
 800d114:	0800d4fb 	.word	0x0800d4fb
 800d118:	0800d61f 	.word	0x0800d61f
 800d11c:	0800d4d1 	.word	0x0800d4d1
 800d120:	0800d6ab 	.word	0x0800d6ab
 800d124:	0800d73b 	.word	0x0800d73b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d128:	4b4f      	ldr	r3, [pc, #316]	; (800d268 <tcp_process+0x298>)
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	f003 0310 	and.w	r3, r3, #16
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 80e4 	beq.w	800d2fe <tcp_process+0x32e>
 800d136:	4b4c      	ldr	r3, [pc, #304]	; (800d268 <tcp_process+0x298>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	f003 0302 	and.w	r3, r3, #2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f000 80dd 	beq.w	800d2fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	4b48      	ldr	r3, [pc, #288]	; (800d26c <tcp_process+0x29c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	429a      	cmp	r2, r3
 800d150:	f040 80d5 	bne.w	800d2fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d154:	4b46      	ldr	r3, [pc, #280]	; (800d270 <tcp_process+0x2a0>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d166:	4b41      	ldr	r3, [pc, #260]	; (800d26c <tcp_process+0x29c>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d16e:	4b44      	ldr	r3, [pc, #272]	; (800d280 <tcp_process+0x2b0>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	89db      	ldrh	r3, [r3, #14]
 800d174:	b29a      	uxth	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d188:	4b39      	ldr	r3, [pc, #228]	; (800d270 <tcp_process+0x2a0>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	1e5a      	subs	r2, r3, #1
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2204      	movs	r2, #4
 800d196:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	3304      	adds	r3, #4
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f004 feab 	bl	8011efc <ip4_route>
 800d1a6:	4601      	mov	r1, r0
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f7ff f88c 	bl	800c2cc <tcp_eff_send_mss_netif>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1c0:	009a      	lsls	r2, r3, #2
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	f241 111c 	movw	r1, #4380	; 0x111c
 800d1cc:	428b      	cmp	r3, r1
 800d1ce:	bf38      	it	cc
 800d1d0:	460b      	movcc	r3, r1
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d204      	bcs.n	800d1e0 <tcp_process+0x210>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	e00d      	b.n	800d1fc <tcp_process+0x22c>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	f241 121c 	movw	r2, #4380	; 0x111c
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d904      	bls.n	800d1f8 <tcp_process+0x228>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	e001      	b.n	800d1fc <tcp_process+0x22c>
 800d1f8:	f241 131c 	movw	r3, #4380	; 0x111c
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d106      	bne.n	800d21a <tcp_process+0x24a>
 800d20c:	4b13      	ldr	r3, [pc, #76]	; (800d25c <tcp_process+0x28c>)
 800d20e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d212:	491c      	ldr	r1, [pc, #112]	; (800d284 <tcp_process+0x2b4>)
 800d214:	4813      	ldr	r0, [pc, #76]	; (800d264 <tcp_process+0x294>)
 800d216:	f006 f8c1 	bl	801339c <iprintf>
        --pcb->snd_queuelen;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d220:	3b01      	subs	r3, #1
 800d222:	b29a      	uxth	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d22e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d12a      	bne.n	800d28c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d23a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d106      	bne.n	800d250 <tcp_process+0x280>
 800d242:	4b06      	ldr	r3, [pc, #24]	; (800d25c <tcp_process+0x28c>)
 800d244:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d248:	490f      	ldr	r1, [pc, #60]	; (800d288 <tcp_process+0x2b8>)
 800d24a:	4806      	ldr	r0, [pc, #24]	; (800d264 <tcp_process+0x294>)
 800d24c:	f006 f8a6 	bl	801339c <iprintf>
          pcb->unsent = rseg->next;
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	66da      	str	r2, [r3, #108]	; 0x6c
 800d258:	e01c      	b.n	800d294 <tcp_process+0x2c4>
 800d25a:	bf00      	nop
 800d25c:	08015a1c 	.word	0x08015a1c
 800d260:	08015c54 	.word	0x08015c54
 800d264:	08015a68 	.word	0x08015a68
 800d268:	20008ef8 	.word	0x20008ef8
 800d26c:	20008ef0 	.word	0x20008ef0
 800d270:	20008eec 	.word	0x20008eec
 800d274:	08015c70 	.word	0x08015c70
 800d278:	20008ef9 	.word	0x20008ef9
 800d27c:	20008eb4 	.word	0x20008eb4
 800d280:	20008edc 	.word	0x20008edc
 800d284:	08015c90 	.word	0x08015c90
 800d288:	08015ca8 	.word	0x08015ca8
        } else {
          pcb->unacked = rseg->next;
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d294:	69f8      	ldr	r0, [r7, #28]
 800d296:	f7fe fd22 	bl	800bcde <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d104      	bne.n	800d2ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2a8:	861a      	strh	r2, [r3, #48]	; 0x30
 800d2aa:	e006      	b.n	800d2ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00a      	beq.n	800d2da <tcp_process+0x30a>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	6910      	ldr	r0, [r2, #16]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	4798      	blx	r3
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	76bb      	strb	r3, [r7, #26]
 800d2d8:	e001      	b.n	800d2de <tcp_process+0x30e>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d2de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d2e2:	f113 0f0d 	cmn.w	r3, #13
 800d2e6:	d102      	bne.n	800d2ee <tcp_process+0x31e>
          return ERR_ABRT;
 800d2e8:	f06f 030c 	mvn.w	r3, #12
 800d2ec:	e250      	b.n	800d790 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	8b5b      	ldrh	r3, [r3, #26]
 800d2f2:	f043 0302 	orr.w	r3, r3, #2
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d2fc:	e23a      	b.n	800d774 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d2fe:	4b98      	ldr	r3, [pc, #608]	; (800d560 <tcp_process+0x590>)
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	f003 0310 	and.w	r3, r3, #16
 800d306:	2b00      	cmp	r3, #0
 800d308:	f000 8234 	beq.w	800d774 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d30c:	4b95      	ldr	r3, [pc, #596]	; (800d564 <tcp_process+0x594>)
 800d30e:	6819      	ldr	r1, [r3, #0]
 800d310:	4b95      	ldr	r3, [pc, #596]	; (800d568 <tcp_process+0x598>)
 800d312:	881b      	ldrh	r3, [r3, #0]
 800d314:	461a      	mov	r2, r3
 800d316:	4b95      	ldr	r3, [pc, #596]	; (800d56c <tcp_process+0x59c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d31c:	4b94      	ldr	r3, [pc, #592]	; (800d570 <tcp_process+0x5a0>)
 800d31e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d320:	885b      	ldrh	r3, [r3, #2]
 800d322:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d324:	4a92      	ldr	r2, [pc, #584]	; (800d570 <tcp_process+0x5a0>)
 800d326:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d328:	8812      	ldrh	r2, [r2, #0]
 800d32a:	b292      	uxth	r2, r2
 800d32c:	9202      	str	r2, [sp, #8]
 800d32e:	9301      	str	r3, [sp, #4]
 800d330:	4b90      	ldr	r3, [pc, #576]	; (800d574 <tcp_process+0x5a4>)
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	4b90      	ldr	r3, [pc, #576]	; (800d578 <tcp_process+0x5a8>)
 800d336:	4602      	mov	r2, r0
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f002 fc85 	bl	800fc48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d344:	2b05      	cmp	r3, #5
 800d346:	f200 8215 	bhi.w	800d774 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f002 fa4f 	bl	800f7f4 <tcp_rexmit_rto>
      break;
 800d356:	e20d      	b.n	800d774 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d358:	4b81      	ldr	r3, [pc, #516]	; (800d560 <tcp_process+0x590>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	f003 0310 	and.w	r3, r3, #16
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 80a1 	beq.w	800d4a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d366:	4b7f      	ldr	r3, [pc, #508]	; (800d564 <tcp_process+0x594>)
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d36e:	1ad3      	subs	r3, r2, r3
 800d370:	3b01      	subs	r3, #1
 800d372:	2b00      	cmp	r3, #0
 800d374:	db7e      	blt.n	800d474 <tcp_process+0x4a4>
 800d376:	4b7b      	ldr	r3, [pc, #492]	; (800d564 <tcp_process+0x594>)
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	2b00      	cmp	r3, #0
 800d382:	dc77      	bgt.n	800d474 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2204      	movs	r2, #4
 800d388:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d102      	bne.n	800d398 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d392:	23fa      	movs	r3, #250	; 0xfa
 800d394:	76bb      	strb	r3, [r7, #26]
 800d396:	e01d      	b.n	800d3d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <tcp_process+0x3e0>
 800d3a2:	4b76      	ldr	r3, [pc, #472]	; (800d57c <tcp_process+0x5ac>)
 800d3a4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d3a8:	4975      	ldr	r1, [pc, #468]	; (800d580 <tcp_process+0x5b0>)
 800d3aa:	4876      	ldr	r0, [pc, #472]	; (800d584 <tcp_process+0x5b4>)
 800d3ac:	f005 fff6 	bl	801339c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00a      	beq.n	800d3d0 <tcp_process+0x400>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	6910      	ldr	r0, [r2, #16]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	6879      	ldr	r1, [r7, #4]
 800d3c8:	4798      	blx	r3
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	76bb      	strb	r3, [r7, #26]
 800d3ce:	e001      	b.n	800d3d4 <tcp_process+0x404>
 800d3d0:	23f0      	movs	r3, #240	; 0xf0
 800d3d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d3d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00a      	beq.n	800d3f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d3dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d3e0:	f113 0f0d 	cmn.w	r3, #13
 800d3e4:	d002      	beq.n	800d3ec <tcp_process+0x41c>
              tcp_abort(pcb);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7fd ff8e 	bl	800b308 <tcp_abort>
            }
            return ERR_ABRT;
 800d3ec:	f06f 030c 	mvn.w	r3, #12
 800d3f0:	e1ce      	b.n	800d790 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fae0 	bl	800d9b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d3f8:	4b63      	ldr	r3, [pc, #396]	; (800d588 <tcp_process+0x5b8>)
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d005      	beq.n	800d40c <tcp_process+0x43c>
            recv_acked--;
 800d400:	4b61      	ldr	r3, [pc, #388]	; (800d588 <tcp_process+0x5b8>)
 800d402:	881b      	ldrh	r3, [r3, #0]
 800d404:	3b01      	subs	r3, #1
 800d406:	b29a      	uxth	r2, r3
 800d408:	4b5f      	ldr	r3, [pc, #380]	; (800d588 <tcp_process+0x5b8>)
 800d40a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d410:	009a      	lsls	r2, r3, #2
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d416:	005b      	lsls	r3, r3, #1
 800d418:	f241 111c 	movw	r1, #4380	; 0x111c
 800d41c:	428b      	cmp	r3, r1
 800d41e:	bf38      	it	cc
 800d420:	460b      	movcc	r3, r1
 800d422:	429a      	cmp	r2, r3
 800d424:	d204      	bcs.n	800d430 <tcp_process+0x460>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	e00d      	b.n	800d44c <tcp_process+0x47c>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	f241 121c 	movw	r2, #4380	; 0x111c
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d904      	bls.n	800d448 <tcp_process+0x478>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	b29b      	uxth	r3, r3
 800d446:	e001      	b.n	800d44c <tcp_process+0x47c>
 800d448:	f241 131c 	movw	r3, #4380	; 0x111c
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d452:	4b4e      	ldr	r3, [pc, #312]	; (800d58c <tcp_process+0x5bc>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	f003 0320 	and.w	r3, r3, #32
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d037      	beq.n	800d4ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	8b5b      	ldrh	r3, [r3, #26]
 800d462:	f043 0302 	orr.w	r3, r3, #2
 800d466:	b29a      	uxth	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2207      	movs	r2, #7
 800d470:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d472:	e02c      	b.n	800d4ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d474:	4b3b      	ldr	r3, [pc, #236]	; (800d564 <tcp_process+0x594>)
 800d476:	6819      	ldr	r1, [r3, #0]
 800d478:	4b3b      	ldr	r3, [pc, #236]	; (800d568 <tcp_process+0x598>)
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	4b3b      	ldr	r3, [pc, #236]	; (800d56c <tcp_process+0x59c>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d484:	4b3a      	ldr	r3, [pc, #232]	; (800d570 <tcp_process+0x5a0>)
 800d486:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d488:	885b      	ldrh	r3, [r3, #2]
 800d48a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d48c:	4a38      	ldr	r2, [pc, #224]	; (800d570 <tcp_process+0x5a0>)
 800d48e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d490:	8812      	ldrh	r2, [r2, #0]
 800d492:	b292      	uxth	r2, r2
 800d494:	9202      	str	r2, [sp, #8]
 800d496:	9301      	str	r3, [sp, #4]
 800d498:	4b36      	ldr	r3, [pc, #216]	; (800d574 <tcp_process+0x5a4>)
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	4b36      	ldr	r3, [pc, #216]	; (800d578 <tcp_process+0x5a8>)
 800d49e:	4602      	mov	r2, r0
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f002 fbd1 	bl	800fc48 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d4a6:	e167      	b.n	800d778 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d4a8:	4b2d      	ldr	r3, [pc, #180]	; (800d560 <tcp_process+0x590>)
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	f003 0302 	and.w	r3, r3, #2
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 8161 	beq.w	800d778 <tcp_process+0x7a8>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	1e5a      	subs	r2, r3, #1
 800d4bc:	4b2b      	ldr	r3, [pc, #172]	; (800d56c <tcp_process+0x59c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	f040 8159 	bne.w	800d778 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f002 f9b6 	bl	800f838 <tcp_rexmit>
      break;
 800d4cc:	e154      	b.n	800d778 <tcp_process+0x7a8>
 800d4ce:	e153      	b.n	800d778 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fa71 	bl	800d9b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d4d6:	4b2d      	ldr	r3, [pc, #180]	; (800d58c <tcp_process+0x5bc>)
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	f003 0320 	and.w	r3, r3, #32
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 814c 	beq.w	800d77c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	8b5b      	ldrh	r3, [r3, #26]
 800d4e8:	f043 0302 	orr.w	r3, r3, #2
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2207      	movs	r2, #7
 800d4f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d4f8:	e140      	b.n	800d77c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fa5c 	bl	800d9b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d500:	4b22      	ldr	r3, [pc, #136]	; (800d58c <tcp_process+0x5bc>)
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	f003 0320 	and.w	r3, r3, #32
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d071      	beq.n	800d5f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d50c:	4b14      	ldr	r3, [pc, #80]	; (800d560 <tcp_process+0x590>)
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	f003 0310 	and.w	r3, r3, #16
 800d514:	2b00      	cmp	r3, #0
 800d516:	d060      	beq.n	800d5da <tcp_process+0x60a>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d51c:	4b11      	ldr	r3, [pc, #68]	; (800d564 <tcp_process+0x594>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	429a      	cmp	r2, r3
 800d522:	d15a      	bne.n	800d5da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d156      	bne.n	800d5da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	8b5b      	ldrh	r3, [r3, #26]
 800d530:	f043 0302 	orr.w	r3, r3, #2
 800d534:	b29a      	uxth	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7fe fdbc 	bl	800c0b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d540:	4b13      	ldr	r3, [pc, #76]	; (800d590 <tcp_process+0x5c0>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	429a      	cmp	r2, r3
 800d548:	d105      	bne.n	800d556 <tcp_process+0x586>
 800d54a:	4b11      	ldr	r3, [pc, #68]	; (800d590 <tcp_process+0x5c0>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	4a0f      	ldr	r2, [pc, #60]	; (800d590 <tcp_process+0x5c0>)
 800d552:	6013      	str	r3, [r2, #0]
 800d554:	e02e      	b.n	800d5b4 <tcp_process+0x5e4>
 800d556:	4b0e      	ldr	r3, [pc, #56]	; (800d590 <tcp_process+0x5c0>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	617b      	str	r3, [r7, #20]
 800d55c:	e027      	b.n	800d5ae <tcp_process+0x5de>
 800d55e:	bf00      	nop
 800d560:	20008ef8 	.word	0x20008ef8
 800d564:	20008ef0 	.word	0x20008ef0
 800d568:	20008ef6 	.word	0x20008ef6
 800d56c:	20008eec 	.word	0x20008eec
 800d570:	20008edc 	.word	0x20008edc
 800d574:	20003794 	.word	0x20003794
 800d578:	20003798 	.word	0x20003798
 800d57c:	08015a1c 	.word	0x08015a1c
 800d580:	08015cbc 	.word	0x08015cbc
 800d584:	08015a68 	.word	0x08015a68
 800d588:	20008ef4 	.word	0x20008ef4
 800d58c:	20008ef9 	.word	0x20008ef9
 800d590:	20008ec0 	.word	0x20008ec0
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d104      	bne.n	800d5a8 <tcp_process+0x5d8>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	60da      	str	r2, [r3, #12]
 800d5a6:	e005      	b.n	800d5b4 <tcp_process+0x5e4>
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	617b      	str	r3, [r7, #20]
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1ef      	bne.n	800d594 <tcp_process+0x5c4>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	60da      	str	r2, [r3, #12]
 800d5ba:	4b77      	ldr	r3, [pc, #476]	; (800d798 <tcp_process+0x7c8>)
 800d5bc:	2201      	movs	r2, #1
 800d5be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	220a      	movs	r2, #10
 800d5c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d5c6:	4b75      	ldr	r3, [pc, #468]	; (800d79c <tcp_process+0x7cc>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	60da      	str	r2, [r3, #12]
 800d5ce:	4a73      	ldr	r2, [pc, #460]	; (800d79c <tcp_process+0x7cc>)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6013      	str	r3, [r2, #0]
 800d5d4:	f002 fcfa 	bl	800ffcc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d5d8:	e0d2      	b.n	800d780 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	8b5b      	ldrh	r3, [r3, #26]
 800d5de:	f043 0302 	orr.w	r3, r3, #2
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2208      	movs	r2, #8
 800d5ec:	751a      	strb	r2, [r3, #20]
      break;
 800d5ee:	e0c7      	b.n	800d780 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d5f0:	4b6b      	ldr	r3, [pc, #428]	; (800d7a0 <tcp_process+0x7d0>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	f003 0310 	and.w	r3, r3, #16
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 80c1 	beq.w	800d780 <tcp_process+0x7b0>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d602:	4b68      	ldr	r3, [pc, #416]	; (800d7a4 <tcp_process+0x7d4>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	f040 80ba 	bne.w	800d780 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d610:	2b00      	cmp	r3, #0
 800d612:	f040 80b5 	bne.w	800d780 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2206      	movs	r2, #6
 800d61a:	751a      	strb	r2, [r3, #20]
      break;
 800d61c:	e0b0      	b.n	800d780 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f9ca 	bl	800d9b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d624:	4b60      	ldr	r3, [pc, #384]	; (800d7a8 <tcp_process+0x7d8>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	f003 0320 	and.w	r3, r3, #32
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 80a9 	beq.w	800d784 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	8b5b      	ldrh	r3, [r3, #26]
 800d636:	f043 0302 	orr.w	r3, r3, #2
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7fe fd39 	bl	800c0b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d646:	4b59      	ldr	r3, [pc, #356]	; (800d7ac <tcp_process+0x7dc>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d105      	bne.n	800d65c <tcp_process+0x68c>
 800d650:	4b56      	ldr	r3, [pc, #344]	; (800d7ac <tcp_process+0x7dc>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	4a55      	ldr	r2, [pc, #340]	; (800d7ac <tcp_process+0x7dc>)
 800d658:	6013      	str	r3, [r2, #0]
 800d65a:	e013      	b.n	800d684 <tcp_process+0x6b4>
 800d65c:	4b53      	ldr	r3, [pc, #332]	; (800d7ac <tcp_process+0x7dc>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	613b      	str	r3, [r7, #16]
 800d662:	e00c      	b.n	800d67e <tcp_process+0x6ae>
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d104      	bne.n	800d678 <tcp_process+0x6a8>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	68da      	ldr	r2, [r3, #12]
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	60da      	str	r2, [r3, #12]
 800d676:	e005      	b.n	800d684 <tcp_process+0x6b4>
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	613b      	str	r3, [r7, #16]
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1ef      	bne.n	800d664 <tcp_process+0x694>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	60da      	str	r2, [r3, #12]
 800d68a:	4b43      	ldr	r3, [pc, #268]	; (800d798 <tcp_process+0x7c8>)
 800d68c:	2201      	movs	r2, #1
 800d68e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	220a      	movs	r2, #10
 800d694:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d696:	4b41      	ldr	r3, [pc, #260]	; (800d79c <tcp_process+0x7cc>)
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	60da      	str	r2, [r3, #12]
 800d69e:	4a3f      	ldr	r2, [pc, #252]	; (800d79c <tcp_process+0x7cc>)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	f002 fc92 	bl	800ffcc <tcp_timer_needed>
      }
      break;
 800d6a8:	e06c      	b.n	800d784 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f984 	bl	800d9b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d6b0:	4b3b      	ldr	r3, [pc, #236]	; (800d7a0 <tcp_process+0x7d0>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	f003 0310 	and.w	r3, r3, #16
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d065      	beq.n	800d788 <tcp_process+0x7b8>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6c0:	4b38      	ldr	r3, [pc, #224]	; (800d7a4 <tcp_process+0x7d4>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d15f      	bne.n	800d788 <tcp_process+0x7b8>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d15b      	bne.n	800d788 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7fe fcf1 	bl	800c0b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d6d6:	4b35      	ldr	r3, [pc, #212]	; (800d7ac <tcp_process+0x7dc>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d105      	bne.n	800d6ec <tcp_process+0x71c>
 800d6e0:	4b32      	ldr	r3, [pc, #200]	; (800d7ac <tcp_process+0x7dc>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	4a31      	ldr	r2, [pc, #196]	; (800d7ac <tcp_process+0x7dc>)
 800d6e8:	6013      	str	r3, [r2, #0]
 800d6ea:	e013      	b.n	800d714 <tcp_process+0x744>
 800d6ec:	4b2f      	ldr	r3, [pc, #188]	; (800d7ac <tcp_process+0x7dc>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e00c      	b.n	800d70e <tcp_process+0x73e>
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d104      	bne.n	800d708 <tcp_process+0x738>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	68da      	ldr	r2, [r3, #12]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	60da      	str	r2, [r3, #12]
 800d706:	e005      	b.n	800d714 <tcp_process+0x744>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	60fb      	str	r3, [r7, #12]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1ef      	bne.n	800d6f4 <tcp_process+0x724>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	60da      	str	r2, [r3, #12]
 800d71a:	4b1f      	ldr	r3, [pc, #124]	; (800d798 <tcp_process+0x7c8>)
 800d71c:	2201      	movs	r2, #1
 800d71e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	220a      	movs	r2, #10
 800d724:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d726:	4b1d      	ldr	r3, [pc, #116]	; (800d79c <tcp_process+0x7cc>)
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60da      	str	r2, [r3, #12]
 800d72e:	4a1b      	ldr	r2, [pc, #108]	; (800d79c <tcp_process+0x7cc>)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6013      	str	r3, [r2, #0]
 800d734:	f002 fc4a 	bl	800ffcc <tcp_timer_needed>
      }
      break;
 800d738:	e026      	b.n	800d788 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f93c 	bl	800d9b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d740:	4b17      	ldr	r3, [pc, #92]	; (800d7a0 <tcp_process+0x7d0>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	f003 0310 	and.w	r3, r3, #16
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01f      	beq.n	800d78c <tcp_process+0x7bc>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d750:	4b14      	ldr	r3, [pc, #80]	; (800d7a4 <tcp_process+0x7d4>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	429a      	cmp	r2, r3
 800d756:	d119      	bne.n	800d78c <tcp_process+0x7bc>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d115      	bne.n	800d78c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d760:	4b11      	ldr	r3, [pc, #68]	; (800d7a8 <tcp_process+0x7d8>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	f043 0310 	orr.w	r3, r3, #16
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	4b0f      	ldr	r3, [pc, #60]	; (800d7a8 <tcp_process+0x7d8>)
 800d76c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d76e:	e00d      	b.n	800d78c <tcp_process+0x7bc>
    default:
      break;
 800d770:	bf00      	nop
 800d772:	e00c      	b.n	800d78e <tcp_process+0x7be>
      break;
 800d774:	bf00      	nop
 800d776:	e00a      	b.n	800d78e <tcp_process+0x7be>
      break;
 800d778:	bf00      	nop
 800d77a:	e008      	b.n	800d78e <tcp_process+0x7be>
      break;
 800d77c:	bf00      	nop
 800d77e:	e006      	b.n	800d78e <tcp_process+0x7be>
      break;
 800d780:	bf00      	nop
 800d782:	e004      	b.n	800d78e <tcp_process+0x7be>
      break;
 800d784:	bf00      	nop
 800d786:	e002      	b.n	800d78e <tcp_process+0x7be>
      break;
 800d788:	bf00      	nop
 800d78a:	e000      	b.n	800d78e <tcp_process+0x7be>
      break;
 800d78c:	bf00      	nop
  }
  return ERR_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3724      	adds	r7, #36	; 0x24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd90      	pop	{r4, r7, pc}
 800d798:	20008ec8 	.word	0x20008ec8
 800d79c:	20008ec4 	.word	0x20008ec4
 800d7a0:	20008ef8 	.word	0x20008ef8
 800d7a4:	20008ef0 	.word	0x20008ef0
 800d7a8:	20008ef9 	.word	0x20008ef9
 800d7ac:	20008ec0 	.word	0x20008ec0

0800d7b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d7b0:	b590      	push	{r4, r7, lr}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d106      	bne.n	800d7ce <tcp_oos_insert_segment+0x1e>
 800d7c0:	4b3b      	ldr	r3, [pc, #236]	; (800d8b0 <tcp_oos_insert_segment+0x100>)
 800d7c2:	f240 421f 	movw	r2, #1055	; 0x41f
 800d7c6:	493b      	ldr	r1, [pc, #236]	; (800d8b4 <tcp_oos_insert_segment+0x104>)
 800d7c8:	483b      	ldr	r0, [pc, #236]	; (800d8b8 <tcp_oos_insert_segment+0x108>)
 800d7ca:	f005 fde7 	bl	801339c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	899b      	ldrh	r3, [r3, #12]
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fb fcb8 	bl	800914c <lwip_htons>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	f003 0301 	and.w	r3, r3, #1
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d028      	beq.n	800d83a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d7e8:	6838      	ldr	r0, [r7, #0]
 800d7ea:	f7fe fa63 	bl	800bcb4 <tcp_segs_free>
    next = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	603b      	str	r3, [r7, #0]
 800d7f2:	e056      	b.n	800d8a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	899b      	ldrh	r3, [r3, #12]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fb fca5 	bl	800914c <lwip_htons>
 800d802:	4603      	mov	r3, r0
 800d804:	b2db      	uxtb	r3, r3
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00d      	beq.n	800d82a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	899b      	ldrh	r3, [r3, #12]
 800d814:	b29c      	uxth	r4, r3
 800d816:	2001      	movs	r0, #1
 800d818:	f7fb fc98 	bl	800914c <lwip_htons>
 800d81c:	4603      	mov	r3, r0
 800d81e:	461a      	mov	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	4322      	orrs	r2, r4
 800d826:	b292      	uxth	r2, r2
 800d828:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f7fe fa52 	bl	800bcde <tcp_seg_free>
    while (next &&
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00e      	beq.n	800d85e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	891b      	ldrh	r3, [r3, #8]
 800d844:	461a      	mov	r2, r3
 800d846:	4b1d      	ldr	r3, [pc, #116]	; (800d8bc <tcp_oos_insert_segment+0x10c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	441a      	add	r2, r3
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	8909      	ldrh	r1, [r1, #8]
 800d856:	440b      	add	r3, r1
 800d858:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	daca      	bge.n	800d7f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d01e      	beq.n	800d8a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	891b      	ldrh	r3, [r3, #8]
 800d868:	461a      	mov	r2, r3
 800d86a:	4b14      	ldr	r3, [pc, #80]	; (800d8bc <tcp_oos_insert_segment+0x10c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	441a      	add	r2, r3
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d878:	2b00      	cmp	r3, #0
 800d87a:	dd12      	ble.n	800d8a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	b29a      	uxth	r2, r3
 800d884:	4b0d      	ldr	r3, [pc, #52]	; (800d8bc <tcp_oos_insert_segment+0x10c>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	891b      	ldrh	r3, [r3, #8]
 800d89a:	4619      	mov	r1, r3
 800d89c:	4610      	mov	r0, r2
 800d89e:	f7fc fd83 	bl	800a3a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	601a      	str	r2, [r3, #0]
}
 800d8a8:	bf00      	nop
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd90      	pop	{r4, r7, pc}
 800d8b0:	08015a1c 	.word	0x08015a1c
 800d8b4:	08015cdc 	.word	0x08015cdc
 800d8b8:	08015a68 	.word	0x08015a68
 800d8bc:	20008eec 	.word	0x20008eec

0800d8c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d8c0:	b5b0      	push	{r4, r5, r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d8ce:	e03e      	b.n	800d94e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fc ff70 	bl	800a7c4 <pbuf_clen>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8ee:	8a7a      	ldrh	r2, [r7, #18]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d906      	bls.n	800d902 <tcp_free_acked_segments+0x42>
 800d8f4:	4b2a      	ldr	r3, [pc, #168]	; (800d9a0 <tcp_free_acked_segments+0xe0>)
 800d8f6:	f240 4257 	movw	r2, #1111	; 0x457
 800d8fa:	492a      	ldr	r1, [pc, #168]	; (800d9a4 <tcp_free_acked_segments+0xe4>)
 800d8fc:	482a      	ldr	r0, [pc, #168]	; (800d9a8 <tcp_free_acked_segments+0xe8>)
 800d8fe:	f005 fd4d 	bl	801339c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d908:	8a7b      	ldrh	r3, [r7, #18]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	891a      	ldrh	r2, [r3, #8]
 800d918:	4b24      	ldr	r3, [pc, #144]	; (800d9ac <tcp_free_acked_segments+0xec>)
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	4413      	add	r3, r2
 800d91e:	b29a      	uxth	r2, r3
 800d920:	4b22      	ldr	r3, [pc, #136]	; (800d9ac <tcp_free_acked_segments+0xec>)
 800d922:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d924:	6978      	ldr	r0, [r7, #20]
 800d926:	f7fe f9da 	bl	800bcde <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00c      	beq.n	800d94e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d109      	bne.n	800d94e <tcp_free_acked_segments+0x8e>
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d106      	bne.n	800d94e <tcp_free_acked_segments+0x8e>
 800d940:	4b17      	ldr	r3, [pc, #92]	; (800d9a0 <tcp_free_acked_segments+0xe0>)
 800d942:	f240 4261 	movw	r2, #1121	; 0x461
 800d946:	491a      	ldr	r1, [pc, #104]	; (800d9b0 <tcp_free_acked_segments+0xf0>)
 800d948:	4817      	ldr	r0, [pc, #92]	; (800d9a8 <tcp_free_acked_segments+0xe8>)
 800d94a:	f005 fd27 	bl	801339c <iprintf>
  while (seg_list != NULL &&
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d020      	beq.n	800d996 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fb fc0b 	bl	8009176 <lwip_htonl>
 800d960:	4604      	mov	r4, r0
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	891b      	ldrh	r3, [r3, #8]
 800d966:	461d      	mov	r5, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	899b      	ldrh	r3, [r3, #12]
 800d96e:	b29b      	uxth	r3, r3
 800d970:	4618      	mov	r0, r3
 800d972:	f7fb fbeb 	bl	800914c <lwip_htons>
 800d976:	4603      	mov	r3, r0
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 0303 	and.w	r3, r3, #3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <tcp_free_acked_segments+0xc6>
 800d982:	2301      	movs	r3, #1
 800d984:	e000      	b.n	800d988 <tcp_free_acked_segments+0xc8>
 800d986:	2300      	movs	r3, #0
 800d988:	442b      	add	r3, r5
 800d98a:	18e2      	adds	r2, r4, r3
 800d98c:	4b09      	ldr	r3, [pc, #36]	; (800d9b4 <tcp_free_acked_segments+0xf4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d992:	2b00      	cmp	r3, #0
 800d994:	dd9c      	ble.n	800d8d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d996:	68bb      	ldr	r3, [r7, #8]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a0:	08015a1c 	.word	0x08015a1c
 800d9a4:	08015d04 	.word	0x08015d04
 800d9a8:	08015a68 	.word	0x08015a68
 800d9ac:	20008ef4 	.word	0x20008ef4
 800d9b0:	08015d2c 	.word	0x08015d2c
 800d9b4:	20008ef0 	.word	0x20008ef0

0800d9b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d9b8:	b5b0      	push	{r4, r5, r7, lr}
 800d9ba:	b094      	sub	sp, #80	; 0x50
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d106      	bne.n	800d9d8 <tcp_receive+0x20>
 800d9ca:	4b91      	ldr	r3, [pc, #580]	; (800dc10 <tcp_receive+0x258>)
 800d9cc:	f240 427b 	movw	r2, #1147	; 0x47b
 800d9d0:	4990      	ldr	r1, [pc, #576]	; (800dc14 <tcp_receive+0x25c>)
 800d9d2:	4891      	ldr	r0, [pc, #580]	; (800dc18 <tcp_receive+0x260>)
 800d9d4:	f005 fce2 	bl	801339c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	7d1b      	ldrb	r3, [r3, #20]
 800d9dc:	2b03      	cmp	r3, #3
 800d9de:	d806      	bhi.n	800d9ee <tcp_receive+0x36>
 800d9e0:	4b8b      	ldr	r3, [pc, #556]	; (800dc10 <tcp_receive+0x258>)
 800d9e2:	f240 427c 	movw	r2, #1148	; 0x47c
 800d9e6:	498d      	ldr	r1, [pc, #564]	; (800dc1c <tcp_receive+0x264>)
 800d9e8:	488b      	ldr	r0, [pc, #556]	; (800dc18 <tcp_receive+0x260>)
 800d9ea:	f005 fcd7 	bl	801339c <iprintf>

  if (flags & TCP_ACK) {
 800d9ee:	4b8c      	ldr	r3, [pc, #560]	; (800dc20 <tcp_receive+0x268>)
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	f003 0310 	and.w	r3, r3, #16
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f000 8264 	beq.w	800dec4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da02:	461a      	mov	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da08:	4413      	add	r3, r2
 800da0a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da10:	4b84      	ldr	r3, [pc, #528]	; (800dc24 <tcp_receive+0x26c>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	db1b      	blt.n	800da52 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da1e:	4b81      	ldr	r3, [pc, #516]	; (800dc24 <tcp_receive+0x26c>)
 800da20:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800da22:	429a      	cmp	r2, r3
 800da24:	d106      	bne.n	800da34 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da2a:	4b7f      	ldr	r3, [pc, #508]	; (800dc28 <tcp_receive+0x270>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	2b00      	cmp	r3, #0
 800da32:	db0e      	blt.n	800da52 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da38:	4b7b      	ldr	r3, [pc, #492]	; (800dc28 <tcp_receive+0x270>)
 800da3a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d125      	bne.n	800da8c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800da40:	4b7a      	ldr	r3, [pc, #488]	; (800dc2c <tcp_receive+0x274>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	89db      	ldrh	r3, [r3, #14]
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da4e:	429a      	cmp	r2, r3
 800da50:	d91c      	bls.n	800da8c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800da52:	4b76      	ldr	r3, [pc, #472]	; (800dc2c <tcp_receive+0x274>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	89db      	ldrh	r3, [r3, #14]
 800da58:	b29a      	uxth	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d205      	bcs.n	800da7c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800da7c:	4b69      	ldr	r3, [pc, #420]	; (800dc24 <tcp_receive+0x26c>)
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800da84:	4b68      	ldr	r3, [pc, #416]	; (800dc28 <tcp_receive+0x270>)
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800da8c:	4b66      	ldr	r3, [pc, #408]	; (800dc28 <tcp_receive+0x270>)
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	2b00      	cmp	r3, #0
 800da98:	dc58      	bgt.n	800db4c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800da9a:	4b65      	ldr	r3, [pc, #404]	; (800dc30 <tcp_receive+0x278>)
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d14b      	bne.n	800db3a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800daac:	4413      	add	r3, r2
 800daae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d142      	bne.n	800db3a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800daba:	2b00      	cmp	r3, #0
 800dabc:	db3d      	blt.n	800db3a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dac2:	4b59      	ldr	r3, [pc, #356]	; (800dc28 <tcp_receive+0x270>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d137      	bne.n	800db3a <tcp_receive+0x182>
              found_dupack = 1;
 800daca:	2301      	movs	r3, #1
 800dacc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dad4:	2bff      	cmp	r3, #255	; 0xff
 800dad6:	d007      	beq.n	800dae8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dade:	3301      	adds	r3, #1
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d91b      	bls.n	800db2a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dafc:	4413      	add	r3, r2
 800dafe:	b29a      	uxth	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db06:	429a      	cmp	r2, r3
 800db08:	d30a      	bcc.n	800db20 <tcp_receive+0x168>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db14:	4413      	add	r3, r2
 800db16:	b29a      	uxth	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800db1e:	e004      	b.n	800db2a <tcp_receive+0x172>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db30:	2b02      	cmp	r3, #2
 800db32:	d902      	bls.n	800db3a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f001 feeb 	bl	800f910 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800db3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f040 8161 	bne.w	800de04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db4a:	e15b      	b.n	800de04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db4c:	4b36      	ldr	r3, [pc, #216]	; (800dc28 <tcp_receive+0x270>)
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	3b01      	subs	r3, #1
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f2c0 814e 	blt.w	800ddfa <tcp_receive+0x442>
 800db5e:	4b32      	ldr	r3, [pc, #200]	; (800dc28 <tcp_receive+0x270>)
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f300 8146 	bgt.w	800ddfa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	8b5b      	ldrh	r3, [r3, #26]
 800db72:	f003 0304 	and.w	r3, r3, #4
 800db76:	2b00      	cmp	r3, #0
 800db78:	d010      	beq.n	800db9c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	8b5b      	ldrh	r3, [r3, #26]
 800db7e:	f023 0304 	bic.w	r3, r3, #4
 800db82:	b29a      	uxth	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbaa:	10db      	asrs	r3, r3, #3
 800dbac:	b21b      	sxth	r3, r3
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	4413      	add	r3, r2
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	b21a      	sxth	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800dbc4:	4b18      	ldr	r3, [pc, #96]	; (800dc28 <tcp_receive+0x270>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dbdc:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <tcp_receive+0x270>)
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	7d1b      	ldrb	r3, [r3, #20]
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	f240 8097 	bls.w	800dd1c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d245      	bcs.n	800dc8a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	8b5b      	ldrh	r3, [r3, #26]
 800dc02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d014      	beq.n	800dc34 <tcp_receive+0x27c>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e013      	b.n	800dc36 <tcp_receive+0x27e>
 800dc0e:	bf00      	nop
 800dc10:	08015a1c 	.word	0x08015a1c
 800dc14:	08015d4c 	.word	0x08015d4c
 800dc18:	08015a68 	.word	0x08015a68
 800dc1c:	08015d68 	.word	0x08015d68
 800dc20:	20008ef8 	.word	0x20008ef8
 800dc24:	20008eec 	.word	0x20008eec
 800dc28:	20008ef0 	.word	0x20008ef0
 800dc2c:	20008edc 	.word	0x20008edc
 800dc30:	20008ef6 	.word	0x20008ef6
 800dc34:	2302      	movs	r3, #2
 800dc36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dc3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc44:	fb12 f303 	smulbb	r3, r2, r3
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	bf28      	it	cs
 800dc50:	4613      	movcs	r3, r2
 800dc52:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc5c:	4413      	add	r3, r2
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d309      	bcc.n	800dc7e <tcp_receive+0x2c6>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc72:	4413      	add	r3, r2
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc7c:	e04e      	b.n	800dd1c <tcp_receive+0x364>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc88:	e048      	b.n	800dd1c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dc90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc92:	4413      	add	r3, r2
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d309      	bcc.n	800dcb4 <tcp_receive+0x2fc>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dca8:	4413      	add	r3, r2
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcb2:	e004      	b.n	800dcbe <tcp_receive+0x306>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d326      	bcc.n	800dd1c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dcda:	1ad3      	subs	r3, r2, r3
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcee:	4413      	add	r3, r2
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d30a      	bcc.n	800dd12 <tcp_receive+0x35a>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd06:	4413      	add	r3, r2
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dd10:	e004      	b.n	800dd1c <tcp_receive+0x364>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd24:	4a98      	ldr	r2, [pc, #608]	; (800df88 <tcp_receive+0x5d0>)
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff fdca 	bl	800d8c0 <tcp_free_acked_segments>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3a:	4a94      	ldr	r2, [pc, #592]	; (800df8c <tcp_receive+0x5d4>)
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7ff fdbf 	bl	800d8c0 <tcp_free_acked_segments>
 800dd42:	4602      	mov	r2, r0
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d104      	bne.n	800dd5a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd56:	861a      	strh	r2, [r3, #48]	; 0x30
 800dd58:	e002      	b.n	800dd60 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d103      	bne.n	800dd76 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dd7c:	4b84      	ldr	r3, [pc, #528]	; (800df90 <tcp_receive+0x5d8>)
 800dd7e:	881b      	ldrh	r3, [r3, #0]
 800dd80:	4413      	add	r3, r2
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	8b5b      	ldrh	r3, [r3, #26]
 800dd8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d035      	beq.n	800de02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d118      	bne.n	800ddd0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d00c      	beq.n	800ddc0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fb f9df 	bl	8009176 <lwip_htonl>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	dc20      	bgt.n	800de02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	8b5b      	ldrh	r3, [r3, #26]
 800ddc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ddce:	e018      	b.n	800de02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fb f9ca 	bl	8009176 <lwip_htonl>
 800dde2:	4603      	mov	r3, r0
 800dde4:	1ae3      	subs	r3, r4, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	dc0b      	bgt.n	800de02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	8b5b      	ldrh	r3, [r3, #26]
 800ddee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ddf8:	e003      	b.n	800de02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f001 ff76 	bl	800fcec <tcp_send_empty_ack>
 800de00:	e000      	b.n	800de04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d05b      	beq.n	800dec4 <tcp_receive+0x50c>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de10:	4b60      	ldr	r3, [pc, #384]	; (800df94 <tcp_receive+0x5dc>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	2b00      	cmp	r3, #0
 800de18:	da54      	bge.n	800dec4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800de1a:	4b5f      	ldr	r3, [pc, #380]	; (800df98 <tcp_receive+0x5e0>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	b29a      	uxth	r2, r3
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de24:	b29b      	uxth	r3, r3
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	b29b      	uxth	r3, r3
 800de2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800de2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de38:	10db      	asrs	r3, r3, #3
 800de3a:	b21b      	sxth	r3, r3
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	b29b      	uxth	r3, r3
 800de42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de52:	4413      	add	r3, r2
 800de54:	b29b      	uxth	r3, r3
 800de56:	b21a      	sxth	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800de5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800de60:	2b00      	cmp	r3, #0
 800de62:	da05      	bge.n	800de70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800de64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de68:	425b      	negs	r3, r3
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800de70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de7a:	109b      	asrs	r3, r3, #2
 800de7c:	b21b      	sxth	r3, r3
 800de7e:	b29b      	uxth	r3, r3
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	b29b      	uxth	r3, r3
 800de84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de8e:	b29a      	uxth	r2, r3
 800de90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de94:	4413      	add	r3, r2
 800de96:	b29b      	uxth	r3, r3
 800de98:	b21a      	sxth	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dea4:	10db      	asrs	r3, r3, #3
 800dea6:	b21b      	sxth	r3, r3
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	4413      	add	r3, r2
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	b21a      	sxth	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dec4:	4b35      	ldr	r3, [pc, #212]	; (800df9c <tcp_receive+0x5e4>)
 800dec6:	881b      	ldrh	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f000 84e2 	beq.w	800e892 <tcp_receive+0xeda>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	7d1b      	ldrb	r3, [r3, #20]
 800ded2:	2b06      	cmp	r3, #6
 800ded4:	f200 84dd 	bhi.w	800e892 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dedc:	4b30      	ldr	r3, [pc, #192]	; (800dfa0 <tcp_receive+0x5e8>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	3b01      	subs	r3, #1
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f2c0 808f 	blt.w	800e008 <tcp_receive+0x650>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800deee:	4b2b      	ldr	r3, [pc, #172]	; (800df9c <tcp_receive+0x5e4>)
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	4619      	mov	r1, r3
 800def4:	4b2a      	ldr	r3, [pc, #168]	; (800dfa0 <tcp_receive+0x5e8>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	440b      	add	r3, r1
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	3301      	adds	r3, #1
 800defe:	2b00      	cmp	r3, #0
 800df00:	f300 8082 	bgt.w	800e008 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800df04:	4b27      	ldr	r3, [pc, #156]	; (800dfa4 <tcp_receive+0x5ec>)
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df0e:	4b24      	ldr	r3, [pc, #144]	; (800dfa0 <tcp_receive+0x5e8>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	1ad3      	subs	r3, r2, r3
 800df14:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800df16:	4b23      	ldr	r3, [pc, #140]	; (800dfa4 <tcp_receive+0x5ec>)
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d106      	bne.n	800df2c <tcp_receive+0x574>
 800df1e:	4b22      	ldr	r3, [pc, #136]	; (800dfa8 <tcp_receive+0x5f0>)
 800df20:	f240 5294 	movw	r2, #1428	; 0x594
 800df24:	4921      	ldr	r1, [pc, #132]	; (800dfac <tcp_receive+0x5f4>)
 800df26:	4822      	ldr	r0, [pc, #136]	; (800dfb0 <tcp_receive+0x5f8>)
 800df28:	f005 fa38 	bl	801339c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df32:	4293      	cmp	r3, r2
 800df34:	d906      	bls.n	800df44 <tcp_receive+0x58c>
 800df36:	4b1c      	ldr	r3, [pc, #112]	; (800dfa8 <tcp_receive+0x5f0>)
 800df38:	f240 5295 	movw	r2, #1429	; 0x595
 800df3c:	491d      	ldr	r1, [pc, #116]	; (800dfb4 <tcp_receive+0x5fc>)
 800df3e:	481c      	ldr	r0, [pc, #112]	; (800dfb0 <tcp_receive+0x5f8>)
 800df40:	f005 fa2c 	bl	801339c <iprintf>
      off = (u16_t)off32;
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800df4a:	4b16      	ldr	r3, [pc, #88]	; (800dfa4 <tcp_receive+0x5ec>)
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	891b      	ldrh	r3, [r3, #8]
 800df50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df54:	429a      	cmp	r2, r3
 800df56:	d906      	bls.n	800df66 <tcp_receive+0x5ae>
 800df58:	4b13      	ldr	r3, [pc, #76]	; (800dfa8 <tcp_receive+0x5f0>)
 800df5a:	f240 5297 	movw	r2, #1431	; 0x597
 800df5e:	4916      	ldr	r1, [pc, #88]	; (800dfb8 <tcp_receive+0x600>)
 800df60:	4813      	ldr	r0, [pc, #76]	; (800dfb0 <tcp_receive+0x5f8>)
 800df62:	f005 fa1b 	bl	801339c <iprintf>
      inseg.len -= off;
 800df66:	4b0f      	ldr	r3, [pc, #60]	; (800dfa4 <tcp_receive+0x5ec>)
 800df68:	891a      	ldrh	r2, [r3, #8]
 800df6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	b29a      	uxth	r2, r3
 800df72:	4b0c      	ldr	r3, [pc, #48]	; (800dfa4 <tcp_receive+0x5ec>)
 800df74:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800df76:	4b0b      	ldr	r3, [pc, #44]	; (800dfa4 <tcp_receive+0x5ec>)
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	891a      	ldrh	r2, [r3, #8]
 800df7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800df84:	e02a      	b.n	800dfdc <tcp_receive+0x624>
 800df86:	bf00      	nop
 800df88:	08015d84 	.word	0x08015d84
 800df8c:	08015d8c 	.word	0x08015d8c
 800df90:	20008ef4 	.word	0x20008ef4
 800df94:	20008ef0 	.word	0x20008ef0
 800df98:	20008eb4 	.word	0x20008eb4
 800df9c:	20008ef6 	.word	0x20008ef6
 800dfa0:	20008eec 	.word	0x20008eec
 800dfa4:	20008ecc 	.word	0x20008ecc
 800dfa8:	08015a1c 	.word	0x08015a1c
 800dfac:	08015d94 	.word	0x08015d94
 800dfb0:	08015a68 	.word	0x08015a68
 800dfb4:	08015da4 	.word	0x08015da4
 800dfb8:	08015db4 	.word	0x08015db4
        off -= p->len;
 800dfbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfbe:	895b      	ldrh	r3, [r3, #10]
 800dfc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dfca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfcc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dfce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dfd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800dfdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfde:	895b      	ldrh	r3, [r3, #10]
 800dfe0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d8e9      	bhi.n	800dfbc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dfe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfec:	4619      	mov	r1, r3
 800dfee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dff0:	f7fc fada 	bl	800a5a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff8:	4a91      	ldr	r2, [pc, #580]	; (800e240 <tcp_receive+0x888>)
 800dffa:	6013      	str	r3, [r2, #0]
 800dffc:	4b91      	ldr	r3, [pc, #580]	; (800e244 <tcp_receive+0x88c>)
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	4a8f      	ldr	r2, [pc, #572]	; (800e240 <tcp_receive+0x888>)
 800e002:	6812      	ldr	r2, [r2, #0]
 800e004:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e006:	e00d      	b.n	800e024 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e008:	4b8d      	ldr	r3, [pc, #564]	; (800e240 <tcp_receive+0x888>)
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	2b00      	cmp	r3, #0
 800e014:	da06      	bge.n	800e024 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	8b5b      	ldrh	r3, [r3, #26]
 800e01a:	f043 0302 	orr.w	r3, r3, #2
 800e01e:	b29a      	uxth	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e024:	4b86      	ldr	r3, [pc, #536]	; (800e240 <tcp_receive+0x888>)
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f2c0 842a 	blt.w	800e888 <tcp_receive+0xed0>
 800e034:	4b82      	ldr	r3, [pc, #520]	; (800e240 <tcp_receive+0x888>)
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03c:	6879      	ldr	r1, [r7, #4]
 800e03e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e040:	440b      	add	r3, r1
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	3301      	adds	r3, #1
 800e046:	2b00      	cmp	r3, #0
 800e048:	f300 841e 	bgt.w	800e888 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e050:	4b7b      	ldr	r3, [pc, #492]	; (800e240 <tcp_receive+0x888>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	f040 829a 	bne.w	800e58e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e05a:	4b7a      	ldr	r3, [pc, #488]	; (800e244 <tcp_receive+0x88c>)
 800e05c:	891c      	ldrh	r4, [r3, #8]
 800e05e:	4b79      	ldr	r3, [pc, #484]	; (800e244 <tcp_receive+0x88c>)
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	899b      	ldrh	r3, [r3, #12]
 800e064:	b29b      	uxth	r3, r3
 800e066:	4618      	mov	r0, r3
 800e068:	f7fb f870 	bl	800914c <lwip_htons>
 800e06c:	4603      	mov	r3, r0
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	f003 0303 	and.w	r3, r3, #3
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <tcp_receive+0x6c4>
 800e078:	2301      	movs	r3, #1
 800e07a:	e000      	b.n	800e07e <tcp_receive+0x6c6>
 800e07c:	2300      	movs	r3, #0
 800e07e:	4423      	add	r3, r4
 800e080:	b29a      	uxth	r2, r3
 800e082:	4b71      	ldr	r3, [pc, #452]	; (800e248 <tcp_receive+0x890>)
 800e084:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e08a:	4b6f      	ldr	r3, [pc, #444]	; (800e248 <tcp_receive+0x890>)
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d275      	bcs.n	800e17e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e092:	4b6c      	ldr	r3, [pc, #432]	; (800e244 <tcp_receive+0x88c>)
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	899b      	ldrh	r3, [r3, #12]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7fb f856 	bl	800914c <lwip_htons>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	f003 0301 	and.w	r3, r3, #1
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d01f      	beq.n	800e0ec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e0ac:	4b65      	ldr	r3, [pc, #404]	; (800e244 <tcp_receive+0x88c>)
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	899b      	ldrh	r3, [r3, #12]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	b21b      	sxth	r3, r3
 800e0b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0ba:	b21c      	sxth	r4, r3
 800e0bc:	4b61      	ldr	r3, [pc, #388]	; (800e244 <tcp_receive+0x88c>)
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fb f841 	bl	800914c <lwip_htons>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fb f838 	bl	800914c <lwip_htons>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	b21b      	sxth	r3, r3
 800e0e0:	4323      	orrs	r3, r4
 800e0e2:	b21a      	sxth	r2, r3
 800e0e4:	4b57      	ldr	r3, [pc, #348]	; (800e244 <tcp_receive+0x88c>)
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	b292      	uxth	r2, r2
 800e0ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0f0:	4b54      	ldr	r3, [pc, #336]	; (800e244 <tcp_receive+0x88c>)
 800e0f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e0f4:	4b53      	ldr	r3, [pc, #332]	; (800e244 <tcp_receive+0x88c>)
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	899b      	ldrh	r3, [r3, #12]
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fb f825 	bl	800914c <lwip_htons>
 800e102:	4603      	mov	r3, r0
 800e104:	b2db      	uxtb	r3, r3
 800e106:	f003 0302 	and.w	r3, r3, #2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d005      	beq.n	800e11a <tcp_receive+0x762>
            inseg.len -= 1;
 800e10e:	4b4d      	ldr	r3, [pc, #308]	; (800e244 <tcp_receive+0x88c>)
 800e110:	891b      	ldrh	r3, [r3, #8]
 800e112:	3b01      	subs	r3, #1
 800e114:	b29a      	uxth	r2, r3
 800e116:	4b4b      	ldr	r3, [pc, #300]	; (800e244 <tcp_receive+0x88c>)
 800e118:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e11a:	4b4a      	ldr	r3, [pc, #296]	; (800e244 <tcp_receive+0x88c>)
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	4a49      	ldr	r2, [pc, #292]	; (800e244 <tcp_receive+0x88c>)
 800e120:	8912      	ldrh	r2, [r2, #8]
 800e122:	4611      	mov	r1, r2
 800e124:	4618      	mov	r0, r3
 800e126:	f7fc f93f 	bl	800a3a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e12a:	4b46      	ldr	r3, [pc, #280]	; (800e244 <tcp_receive+0x88c>)
 800e12c:	891c      	ldrh	r4, [r3, #8]
 800e12e:	4b45      	ldr	r3, [pc, #276]	; (800e244 <tcp_receive+0x88c>)
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	899b      	ldrh	r3, [r3, #12]
 800e134:	b29b      	uxth	r3, r3
 800e136:	4618      	mov	r0, r3
 800e138:	f7fb f808 	bl	800914c <lwip_htons>
 800e13c:	4603      	mov	r3, r0
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	f003 0303 	and.w	r3, r3, #3
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <tcp_receive+0x794>
 800e148:	2301      	movs	r3, #1
 800e14a:	e000      	b.n	800e14e <tcp_receive+0x796>
 800e14c:	2300      	movs	r3, #0
 800e14e:	4423      	add	r3, r4
 800e150:	b29a      	uxth	r2, r3
 800e152:	4b3d      	ldr	r3, [pc, #244]	; (800e248 <tcp_receive+0x890>)
 800e154:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e156:	4b3c      	ldr	r3, [pc, #240]	; (800e248 <tcp_receive+0x890>)
 800e158:	881b      	ldrh	r3, [r3, #0]
 800e15a:	461a      	mov	r2, r3
 800e15c:	4b38      	ldr	r3, [pc, #224]	; (800e240 <tcp_receive+0x888>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	441a      	add	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e16a:	440b      	add	r3, r1
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d006      	beq.n	800e17e <tcp_receive+0x7c6>
 800e170:	4b36      	ldr	r3, [pc, #216]	; (800e24c <tcp_receive+0x894>)
 800e172:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e176:	4936      	ldr	r1, [pc, #216]	; (800e250 <tcp_receive+0x898>)
 800e178:	4836      	ldr	r0, [pc, #216]	; (800e254 <tcp_receive+0x89c>)
 800e17a:	f005 f90f 	bl	801339c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e182:	2b00      	cmp	r3, #0
 800e184:	f000 80e7 	beq.w	800e356 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e188:	4b2e      	ldr	r3, [pc, #184]	; (800e244 <tcp_receive+0x88c>)
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	899b      	ldrh	r3, [r3, #12]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	4618      	mov	r0, r3
 800e192:	f7fa ffdb 	bl	800914c <lwip_htons>
 800e196:	4603      	mov	r3, r0
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d010      	beq.n	800e1c4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e1a2:	e00a      	b.n	800e1ba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f7fd fd92 	bl	800bcde <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1f0      	bne.n	800e1a4 <tcp_receive+0x7ec>
 800e1c2:	e0c8      	b.n	800e356 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e1ca:	e052      	b.n	800e272 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	899b      	ldrh	r3, [r3, #12]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fa ffb9 	bl	800914c <lwip_htons>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d03d      	beq.n	800e262 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e1e6:	4b17      	ldr	r3, [pc, #92]	; (800e244 <tcp_receive+0x88c>)
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	899b      	ldrh	r3, [r3, #12]
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fa ffac 	bl	800914c <lwip_htons>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d130      	bne.n	800e262 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e200:	4b10      	ldr	r3, [pc, #64]	; (800e244 <tcp_receive+0x88c>)
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	899b      	ldrh	r3, [r3, #12]
 800e206:	b29c      	uxth	r4, r3
 800e208:	2001      	movs	r0, #1
 800e20a:	f7fa ff9f 	bl	800914c <lwip_htons>
 800e20e:	4603      	mov	r3, r0
 800e210:	461a      	mov	r2, r3
 800e212:	4b0c      	ldr	r3, [pc, #48]	; (800e244 <tcp_receive+0x88c>)
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	4322      	orrs	r2, r4
 800e218:	b292      	uxth	r2, r2
 800e21a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e21c:	4b09      	ldr	r3, [pc, #36]	; (800e244 <tcp_receive+0x88c>)
 800e21e:	891c      	ldrh	r4, [r3, #8]
 800e220:	4b08      	ldr	r3, [pc, #32]	; (800e244 <tcp_receive+0x88c>)
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	899b      	ldrh	r3, [r3, #12]
 800e226:	b29b      	uxth	r3, r3
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fa ff8f 	bl	800914c <lwip_htons>
 800e22e:	4603      	mov	r3, r0
 800e230:	b2db      	uxtb	r3, r3
 800e232:	f003 0303 	and.w	r3, r3, #3
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00e      	beq.n	800e258 <tcp_receive+0x8a0>
 800e23a:	2301      	movs	r3, #1
 800e23c:	e00d      	b.n	800e25a <tcp_receive+0x8a2>
 800e23e:	bf00      	nop
 800e240:	20008eec 	.word	0x20008eec
 800e244:	20008ecc 	.word	0x20008ecc
 800e248:	20008ef6 	.word	0x20008ef6
 800e24c:	08015a1c 	.word	0x08015a1c
 800e250:	08015dc4 	.word	0x08015dc4
 800e254:	08015a68 	.word	0x08015a68
 800e258:	2300      	movs	r3, #0
 800e25a:	4423      	add	r3, r4
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	4b98      	ldr	r3, [pc, #608]	; (800e4c0 <tcp_receive+0xb08>)
 800e260:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e264:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e26c:	6938      	ldr	r0, [r7, #16]
 800e26e:	f7fd fd36 	bl	800bcde <tcp_seg_free>
            while (next &&
 800e272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00e      	beq.n	800e296 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e278:	4b91      	ldr	r3, [pc, #580]	; (800e4c0 <tcp_receive+0xb08>)
 800e27a:	881b      	ldrh	r3, [r3, #0]
 800e27c:	461a      	mov	r2, r3
 800e27e:	4b91      	ldr	r3, [pc, #580]	; (800e4c4 <tcp_receive+0xb0c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	441a      	add	r2, r3
 800e284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e28c:	8909      	ldrh	r1, [r1, #8]
 800e28e:	440b      	add	r3, r1
 800e290:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e292:	2b00      	cmp	r3, #0
 800e294:	da9a      	bge.n	800e1cc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d059      	beq.n	800e350 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e29c:	4b88      	ldr	r3, [pc, #544]	; (800e4c0 <tcp_receive+0xb08>)
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4b88      	ldr	r3, [pc, #544]	; (800e4c4 <tcp_receive+0xb0c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	441a      	add	r2, r3
 800e2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	dd4d      	ble.n	800e350 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	4b81      	ldr	r3, [pc, #516]	; (800e4c4 <tcp_receive+0xb0c>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	4b80      	ldr	r3, [pc, #512]	; (800e4c8 <tcp_receive+0xb10>)
 800e2c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e2ca:	4b7f      	ldr	r3, [pc, #508]	; (800e4c8 <tcp_receive+0xb10>)
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	899b      	ldrh	r3, [r3, #12]
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fa ff3a 	bl	800914c <lwip_htons>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	f003 0302 	and.w	r3, r3, #2
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <tcp_receive+0x938>
                inseg.len -= 1;
 800e2e4:	4b78      	ldr	r3, [pc, #480]	; (800e4c8 <tcp_receive+0xb10>)
 800e2e6:	891b      	ldrh	r3, [r3, #8]
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	4b76      	ldr	r3, [pc, #472]	; (800e4c8 <tcp_receive+0xb10>)
 800e2ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e2f0:	4b75      	ldr	r3, [pc, #468]	; (800e4c8 <tcp_receive+0xb10>)
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	4a74      	ldr	r2, [pc, #464]	; (800e4c8 <tcp_receive+0xb10>)
 800e2f6:	8912      	ldrh	r2, [r2, #8]
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fc f854 	bl	800a3a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e300:	4b71      	ldr	r3, [pc, #452]	; (800e4c8 <tcp_receive+0xb10>)
 800e302:	891c      	ldrh	r4, [r3, #8]
 800e304:	4b70      	ldr	r3, [pc, #448]	; (800e4c8 <tcp_receive+0xb10>)
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	899b      	ldrh	r3, [r3, #12]
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fa ff1d 	bl	800914c <lwip_htons>
 800e312:	4603      	mov	r3, r0
 800e314:	b2db      	uxtb	r3, r3
 800e316:	f003 0303 	and.w	r3, r3, #3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <tcp_receive+0x96a>
 800e31e:	2301      	movs	r3, #1
 800e320:	e000      	b.n	800e324 <tcp_receive+0x96c>
 800e322:	2300      	movs	r3, #0
 800e324:	4423      	add	r3, r4
 800e326:	b29a      	uxth	r2, r3
 800e328:	4b65      	ldr	r3, [pc, #404]	; (800e4c0 <tcp_receive+0xb08>)
 800e32a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e32c:	4b64      	ldr	r3, [pc, #400]	; (800e4c0 <tcp_receive+0xb08>)
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	461a      	mov	r2, r3
 800e332:	4b64      	ldr	r3, [pc, #400]	; (800e4c4 <tcp_receive+0xb0c>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	441a      	add	r2, r3
 800e338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d006      	beq.n	800e350 <tcp_receive+0x998>
 800e342:	4b62      	ldr	r3, [pc, #392]	; (800e4cc <tcp_receive+0xb14>)
 800e344:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e348:	4961      	ldr	r1, [pc, #388]	; (800e4d0 <tcp_receive+0xb18>)
 800e34a:	4862      	ldr	r0, [pc, #392]	; (800e4d4 <tcp_receive+0xb1c>)
 800e34c:	f005 f826 	bl	801339c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e354:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e356:	4b5a      	ldr	r3, [pc, #360]	; (800e4c0 <tcp_receive+0xb08>)
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	4b59      	ldr	r3, [pc, #356]	; (800e4c4 <tcp_receive+0xb0c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	441a      	add	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e36a:	4b55      	ldr	r3, [pc, #340]	; (800e4c0 <tcp_receive+0xb08>)
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d206      	bcs.n	800e380 <tcp_receive+0x9c8>
 800e372:	4b56      	ldr	r3, [pc, #344]	; (800e4cc <tcp_receive+0xb14>)
 800e374:	f240 6207 	movw	r2, #1543	; 0x607
 800e378:	4957      	ldr	r1, [pc, #348]	; (800e4d8 <tcp_receive+0xb20>)
 800e37a:	4856      	ldr	r0, [pc, #344]	; (800e4d4 <tcp_receive+0xb1c>)
 800e37c:	f005 f80e 	bl	801339c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e384:	4b4e      	ldr	r3, [pc, #312]	; (800e4c0 <tcp_receive+0xb08>)
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7fc ffc5 	bl	800b320 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e396:	4b4c      	ldr	r3, [pc, #304]	; (800e4c8 <tcp_receive+0xb10>)
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	891b      	ldrh	r3, [r3, #8]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d006      	beq.n	800e3ae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e3a0:	4b49      	ldr	r3, [pc, #292]	; (800e4c8 <tcp_receive+0xb10>)
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	4a4d      	ldr	r2, [pc, #308]	; (800e4dc <tcp_receive+0xb24>)
 800e3a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e3a8:	4b47      	ldr	r3, [pc, #284]	; (800e4c8 <tcp_receive+0xb10>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e3ae:	4b46      	ldr	r3, [pc, #280]	; (800e4c8 <tcp_receive+0xb10>)
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	899b      	ldrh	r3, [r3, #12]
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fa fec8 	bl	800914c <lwip_htons>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	f003 0301 	and.w	r3, r3, #1
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	f000 80b8 	beq.w	800e53a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e3ca:	4b45      	ldr	r3, [pc, #276]	; (800e4e0 <tcp_receive+0xb28>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f043 0320 	orr.w	r3, r3, #32
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	4b42      	ldr	r3, [pc, #264]	; (800e4e0 <tcp_receive+0xb28>)
 800e3d6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e3d8:	e0af      	b.n	800e53a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3de:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	4a36      	ldr	r2, [pc, #216]	; (800e4c4 <tcp_receive+0xb0c>)
 800e3ea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	891b      	ldrh	r3, [r3, #8]
 800e3f0:	461c      	mov	r4, r3
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	899b      	ldrh	r3, [r3, #12]
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fa fea6 	bl	800914c <lwip_htons>
 800e400:	4603      	mov	r3, r0
 800e402:	b2db      	uxtb	r3, r3
 800e404:	f003 0303 	and.w	r3, r3, #3
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d001      	beq.n	800e410 <tcp_receive+0xa58>
 800e40c:	2301      	movs	r3, #1
 800e40e:	e000      	b.n	800e412 <tcp_receive+0xa5a>
 800e410:	2300      	movs	r3, #0
 800e412:	191a      	adds	r2, r3, r4
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e418:	441a      	add	r2, r3
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e422:	461c      	mov	r4, r3
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	891b      	ldrh	r3, [r3, #8]
 800e428:	461d      	mov	r5, r3
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	899b      	ldrh	r3, [r3, #12]
 800e430:	b29b      	uxth	r3, r3
 800e432:	4618      	mov	r0, r3
 800e434:	f7fa fe8a 	bl	800914c <lwip_htons>
 800e438:	4603      	mov	r3, r0
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	f003 0303 	and.w	r3, r3, #3
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <tcp_receive+0xa90>
 800e444:	2301      	movs	r3, #1
 800e446:	e000      	b.n	800e44a <tcp_receive+0xa92>
 800e448:	2300      	movs	r3, #0
 800e44a:	442b      	add	r3, r5
 800e44c:	429c      	cmp	r4, r3
 800e44e:	d206      	bcs.n	800e45e <tcp_receive+0xaa6>
 800e450:	4b1e      	ldr	r3, [pc, #120]	; (800e4cc <tcp_receive+0xb14>)
 800e452:	f240 622b 	movw	r2, #1579	; 0x62b
 800e456:	4923      	ldr	r1, [pc, #140]	; (800e4e4 <tcp_receive+0xb2c>)
 800e458:	481e      	ldr	r0, [pc, #120]	; (800e4d4 <tcp_receive+0xb1c>)
 800e45a:	f004 ff9f 	bl	801339c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	891b      	ldrh	r3, [r3, #8]
 800e462:	461c      	mov	r4, r3
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	899b      	ldrh	r3, [r3, #12]
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fa fe6d 	bl	800914c <lwip_htons>
 800e472:	4603      	mov	r3, r0
 800e474:	b2db      	uxtb	r3, r3
 800e476:	f003 0303 	and.w	r3, r3, #3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <tcp_receive+0xaca>
 800e47e:	2301      	movs	r3, #1
 800e480:	e000      	b.n	800e484 <tcp_receive+0xacc>
 800e482:	2300      	movs	r3, #0
 800e484:	1919      	adds	r1, r3, r4
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e48a:	b28b      	uxth	r3, r1
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	b29a      	uxth	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7fc ff43 	bl	800b320 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	891b      	ldrh	r3, [r3, #8]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d028      	beq.n	800e4f6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e4a4:	4b0d      	ldr	r3, [pc, #52]	; (800e4dc <tcp_receive+0xb24>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d01d      	beq.n	800e4e8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e4ac:	4b0b      	ldr	r3, [pc, #44]	; (800e4dc <tcp_receive+0xb24>)
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	f7fc f9be 	bl	800a838 <pbuf_cat>
 800e4bc:	e018      	b.n	800e4f0 <tcp_receive+0xb38>
 800e4be:	bf00      	nop
 800e4c0:	20008ef6 	.word	0x20008ef6
 800e4c4:	20008eec 	.word	0x20008eec
 800e4c8:	20008ecc 	.word	0x20008ecc
 800e4cc:	08015a1c 	.word	0x08015a1c
 800e4d0:	08015dfc 	.word	0x08015dfc
 800e4d4:	08015a68 	.word	0x08015a68
 800e4d8:	08015e38 	.word	0x08015e38
 800e4dc:	20008efc 	.word	0x20008efc
 800e4e0:	20008ef9 	.word	0x20008ef9
 800e4e4:	08015e58 	.word	0x08015e58
            } else {
              recv_data = cseg->p;
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	4a70      	ldr	r2, [pc, #448]	; (800e6b0 <tcp_receive+0xcf8>)
 800e4ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	899b      	ldrh	r3, [r3, #12]
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fa fe24 	bl	800914c <lwip_htons>
 800e504:	4603      	mov	r3, r0
 800e506:	b2db      	uxtb	r3, r3
 800e508:	f003 0301 	and.w	r3, r3, #1
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00d      	beq.n	800e52c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e510:	4b68      	ldr	r3, [pc, #416]	; (800e6b4 <tcp_receive+0xcfc>)
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	f043 0320 	orr.w	r3, r3, #32
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	4b66      	ldr	r3, [pc, #408]	; (800e6b4 <tcp_receive+0xcfc>)
 800e51c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	7d1b      	ldrb	r3, [r3, #20]
 800e522:	2b04      	cmp	r3, #4
 800e524:	d102      	bne.n	800e52c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2207      	movs	r2, #7
 800e52a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e534:	68b8      	ldr	r0, [r7, #8]
 800e536:	f7fd fbd2 	bl	800bcde <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d008      	beq.n	800e554 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	685a      	ldr	r2, [r3, #4]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e54e:	429a      	cmp	r2, r3
 800e550:	f43f af43 	beq.w	800e3da <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	8b5b      	ldrh	r3, [r3, #26]
 800e558:	f003 0301 	and.w	r3, r3, #1
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00e      	beq.n	800e57e <tcp_receive+0xbc6>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	8b5b      	ldrh	r3, [r3, #26]
 800e564:	f023 0301 	bic.w	r3, r3, #1
 800e568:	b29a      	uxth	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	835a      	strh	r2, [r3, #26]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	8b5b      	ldrh	r3, [r3, #26]
 800e572:	f043 0302 	orr.w	r3, r3, #2
 800e576:	b29a      	uxth	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e57c:	e188      	b.n	800e890 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	8b5b      	ldrh	r3, [r3, #26]
 800e582:	f043 0301 	orr.w	r3, r3, #1
 800e586:	b29a      	uxth	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e58c:	e180      	b.n	800e890 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e596:	4848      	ldr	r0, [pc, #288]	; (800e6b8 <tcp_receive+0xd00>)
 800e598:	f7fd fbba 	bl	800bd10 <tcp_seg_copy>
 800e59c:	4602      	mov	r2, r0
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	675a      	str	r2, [r3, #116]	; 0x74
 800e5a2:	e16d      	b.n	800e880 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5ae:	e157      	b.n	800e860 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	685a      	ldr	r2, [r3, #4]
 800e5b6:	4b41      	ldr	r3, [pc, #260]	; (800e6bc <tcp_receive+0xd04>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d11d      	bne.n	800e5fa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e5be:	4b3e      	ldr	r3, [pc, #248]	; (800e6b8 <tcp_receive+0xd00>)
 800e5c0:	891a      	ldrh	r2, [r3, #8]
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c4:	891b      	ldrh	r3, [r3, #8]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	f240 814f 	bls.w	800e86a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e5cc:	483a      	ldr	r0, [pc, #232]	; (800e6b8 <tcp_receive+0xd00>)
 800e5ce:	f7fd fb9f 	bl	800bd10 <tcp_seg_copy>
 800e5d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f000 8149 	beq.w	800e86e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d003      	beq.n	800e5ea <tcp_receive+0xc32>
                    prev->next = cseg;
 800e5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	e002      	b.n	800e5f0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e5f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5f2:	6978      	ldr	r0, [r7, #20]
 800e5f4:	f7ff f8dc 	bl	800d7b0 <tcp_oos_insert_segment>
                }
                break;
 800e5f8:	e139      	b.n	800e86e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d117      	bne.n	800e630 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e600:	4b2e      	ldr	r3, [pc, #184]	; (800e6bc <tcp_receive+0xd04>)
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	da57      	bge.n	800e6c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e610:	4829      	ldr	r0, [pc, #164]	; (800e6b8 <tcp_receive+0xd00>)
 800e612:	f7fd fb7d 	bl	800bd10 <tcp_seg_copy>
 800e616:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f000 8129 	beq.w	800e872 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	69ba      	ldr	r2, [r7, #24]
 800e624:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e628:	69b8      	ldr	r0, [r7, #24]
 800e62a:	f7ff f8c1 	bl	800d7b0 <tcp_oos_insert_segment>
                  }
                  break;
 800e62e:	e120      	b.n	800e872 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e630:	4b22      	ldr	r3, [pc, #136]	; (800e6bc <tcp_receive+0xd04>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	1ad3      	subs	r3, r2, r3
 800e63c:	3b01      	subs	r3, #1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	db3e      	blt.n	800e6c0 <tcp_receive+0xd08>
 800e642:	4b1e      	ldr	r3, [pc, #120]	; (800e6bc <tcp_receive+0xd04>)
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	3301      	adds	r3, #1
 800e650:	2b00      	cmp	r3, #0
 800e652:	dc35      	bgt.n	800e6c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e654:	4818      	ldr	r0, [pc, #96]	; (800e6b8 <tcp_receive+0xd00>)
 800e656:	f7fd fb5b 	bl	800bd10 <tcp_seg_copy>
 800e65a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	f000 8109 	beq.w	800e876 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e66c:	8912      	ldrh	r2, [r2, #8]
 800e66e:	441a      	add	r2, r3
 800e670:	4b12      	ldr	r3, [pc, #72]	; (800e6bc <tcp_receive+0xd04>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	2b00      	cmp	r3, #0
 800e678:	dd12      	ble.n	800e6a0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e67a:	4b10      	ldr	r3, [pc, #64]	; (800e6bc <tcp_receive+0xd04>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	b29a      	uxth	r2, r3
 800e680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	b29b      	uxth	r3, r3
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e696:	891b      	ldrh	r3, [r3, #8]
 800e698:	4619      	mov	r1, r3
 800e69a:	4610      	mov	r0, r2
 800e69c:	f7fb fe84 	bl	800a3a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a2:	69fa      	ldr	r2, [r7, #28]
 800e6a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e6a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6a8:	69f8      	ldr	r0, [r7, #28]
 800e6aa:	f7ff f881 	bl	800d7b0 <tcp_oos_insert_segment>
                  }
                  break;
 800e6ae:	e0e2      	b.n	800e876 <tcp_receive+0xebe>
 800e6b0:	20008efc 	.word	0x20008efc
 800e6b4:	20008ef9 	.word	0x20008ef9
 800e6b8:	20008ecc 	.word	0x20008ecc
 800e6bc:	20008eec 	.word	0x20008eec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f040 80c6 	bne.w	800e85a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e6ce:	4b80      	ldr	r3, [pc, #512]	; (800e8d0 <tcp_receive+0xf18>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f340 80bd 	ble.w	800e85a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	899b      	ldrh	r3, [r3, #12]
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fa fd2f 	bl	800914c <lwip_htons>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f040 80bf 	bne.w	800e87a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e6fc:	4875      	ldr	r0, [pc, #468]	; (800e8d4 <tcp_receive+0xf1c>)
 800e6fe:	f7fd fb07 	bl	800bd10 <tcp_seg_copy>
 800e702:	4602      	mov	r2, r0
 800e704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e706:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f000 80b6 	beq.w	800e87e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e71a:	8912      	ldrh	r2, [r2, #8]
 800e71c:	441a      	add	r2, r3
 800e71e:	4b6c      	ldr	r3, [pc, #432]	; (800e8d0 <tcp_receive+0xf18>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	dd12      	ble.n	800e74e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e728:	4b69      	ldr	r3, [pc, #420]	; (800e8d0 <tcp_receive+0xf18>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	b29b      	uxth	r3, r3
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	b29a      	uxth	r2, r3
 800e73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e740:	685a      	ldr	r2, [r3, #4]
 800e742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e744:	891b      	ldrh	r3, [r3, #8]
 800e746:	4619      	mov	r1, r3
 800e748:	4610      	mov	r0, r2
 800e74a:	f7fb fe2d 	bl	800a3a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e74e:	4b62      	ldr	r3, [pc, #392]	; (800e8d8 <tcp_receive+0xf20>)
 800e750:	881b      	ldrh	r3, [r3, #0]
 800e752:	461a      	mov	r2, r3
 800e754:	4b5e      	ldr	r3, [pc, #376]	; (800e8d0 <tcp_receive+0xf18>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	441a      	add	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75e:	6879      	ldr	r1, [r7, #4]
 800e760:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e762:	440b      	add	r3, r1
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	f340 8089 	ble.w	800e87e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	899b      	ldrh	r3, [r3, #12]
 800e774:	b29b      	uxth	r3, r3
 800e776:	4618      	mov	r0, r3
 800e778:	f7fa fce8 	bl	800914c <lwip_htons>
 800e77c:	4603      	mov	r3, r0
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	f003 0301 	and.w	r3, r3, #1
 800e784:	2b00      	cmp	r3, #0
 800e786:	d022      	beq.n	800e7ce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	899b      	ldrh	r3, [r3, #12]
 800e790:	b29b      	uxth	r3, r3
 800e792:	b21b      	sxth	r3, r3
 800e794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e798:	b21c      	sxth	r4, r3
 800e79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	899b      	ldrh	r3, [r3, #12]
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fa fcd1 	bl	800914c <lwip_htons>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fa fcc8 	bl	800914c <lwip_htons>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	b21b      	sxth	r3, r3
 800e7c0:	4323      	orrs	r3, r4
 800e7c2:	b21a      	sxth	r2, r3
 800e7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	b292      	uxth	r2, r2
 800e7cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7d8:	4413      	add	r3, r2
 800e7da:	b299      	uxth	r1, r3
 800e7dc:	4b3c      	ldr	r3, [pc, #240]	; (800e8d0 <tcp_receive+0xf18>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	1a8a      	subs	r2, r1, r2
 800e7e8:	b292      	uxth	r2, r2
 800e7ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	891b      	ldrh	r3, [r3, #8]
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	f7fb fdd4 	bl	800a3a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	891c      	ldrh	r4, [r3, #8]
 800e806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	899b      	ldrh	r3, [r3, #12]
 800e80e:	b29b      	uxth	r3, r3
 800e810:	4618      	mov	r0, r3
 800e812:	f7fa fc9b 	bl	800914c <lwip_htons>
 800e816:	4603      	mov	r3, r0
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d001      	beq.n	800e826 <tcp_receive+0xe6e>
 800e822:	2301      	movs	r3, #1
 800e824:	e000      	b.n	800e828 <tcp_receive+0xe70>
 800e826:	2300      	movs	r3, #0
 800e828:	4423      	add	r3, r4
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	4b2a      	ldr	r3, [pc, #168]	; (800e8d8 <tcp_receive+0xf20>)
 800e82e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e830:	4b29      	ldr	r3, [pc, #164]	; (800e8d8 <tcp_receive+0xf20>)
 800e832:	881b      	ldrh	r3, [r3, #0]
 800e834:	461a      	mov	r2, r3
 800e836:	4b26      	ldr	r3, [pc, #152]	; (800e8d0 <tcp_receive+0xf18>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	441a      	add	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e840:	6879      	ldr	r1, [r7, #4]
 800e842:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e844:	440b      	add	r3, r1
 800e846:	429a      	cmp	r2, r3
 800e848:	d019      	beq.n	800e87e <tcp_receive+0xec6>
 800e84a:	4b24      	ldr	r3, [pc, #144]	; (800e8dc <tcp_receive+0xf24>)
 800e84c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e850:	4923      	ldr	r1, [pc, #140]	; (800e8e0 <tcp_receive+0xf28>)
 800e852:	4824      	ldr	r0, [pc, #144]	; (800e8e4 <tcp_receive+0xf2c>)
 800e854:	f004 fda2 	bl	801339c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e858:	e011      	b.n	800e87e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e862:	2b00      	cmp	r3, #0
 800e864:	f47f aea4 	bne.w	800e5b0 <tcp_receive+0xbf8>
 800e868:	e00a      	b.n	800e880 <tcp_receive+0xec8>
                break;
 800e86a:	bf00      	nop
 800e86c:	e008      	b.n	800e880 <tcp_receive+0xec8>
                break;
 800e86e:	bf00      	nop
 800e870:	e006      	b.n	800e880 <tcp_receive+0xec8>
                  break;
 800e872:	bf00      	nop
 800e874:	e004      	b.n	800e880 <tcp_receive+0xec8>
                  break;
 800e876:	bf00      	nop
 800e878:	e002      	b.n	800e880 <tcp_receive+0xec8>
                  break;
 800e87a:	bf00      	nop
 800e87c:	e000      	b.n	800e880 <tcp_receive+0xec8>
                break;
 800e87e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f001 fa33 	bl	800fcec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e886:	e003      	b.n	800e890 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f001 fa2f 	bl	800fcec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e88e:	e01a      	b.n	800e8c6 <tcp_receive+0xf0e>
 800e890:	e019      	b.n	800e8c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e892:	4b0f      	ldr	r3, [pc, #60]	; (800e8d0 <tcp_receive+0xf18>)
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	db0a      	blt.n	800e8b6 <tcp_receive+0xefe>
 800e8a0:	4b0b      	ldr	r3, [pc, #44]	; (800e8d0 <tcp_receive+0xf18>)
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a8:	6879      	ldr	r1, [r7, #4]
 800e8aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8ac:	440b      	add	r3, r1
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	dd07      	ble.n	800e8c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	8b5b      	ldrh	r3, [r3, #26]
 800e8ba:	f043 0302 	orr.w	r3, r3, #2
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e8c4:	e7ff      	b.n	800e8c6 <tcp_receive+0xf0e>
 800e8c6:	bf00      	nop
 800e8c8:	3750      	adds	r7, #80	; 0x50
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20008eec 	.word	0x20008eec
 800e8d4:	20008ecc 	.word	0x20008ecc
 800e8d8:	20008ef6 	.word	0x20008ef6
 800e8dc:	08015a1c 	.word	0x08015a1c
 800e8e0:	08015dc4 	.word	0x08015dc4
 800e8e4:	08015a68 	.word	0x08015a68

0800e8e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e8ee:	4b15      	ldr	r3, [pc, #84]	; (800e944 <tcp_get_next_optbyte+0x5c>)
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	1c5a      	adds	r2, r3, #1
 800e8f4:	b291      	uxth	r1, r2
 800e8f6:	4a13      	ldr	r2, [pc, #76]	; (800e944 <tcp_get_next_optbyte+0x5c>)
 800e8f8:	8011      	strh	r1, [r2, #0]
 800e8fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e8fc:	4b12      	ldr	r3, [pc, #72]	; (800e948 <tcp_get_next_optbyte+0x60>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <tcp_get_next_optbyte+0x26>
 800e904:	4b11      	ldr	r3, [pc, #68]	; (800e94c <tcp_get_next_optbyte+0x64>)
 800e906:	881b      	ldrh	r3, [r3, #0]
 800e908:	88fa      	ldrh	r2, [r7, #6]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d208      	bcs.n	800e920 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e90e:	4b10      	ldr	r3, [pc, #64]	; (800e950 <tcp_get_next_optbyte+0x68>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	3314      	adds	r3, #20
 800e914:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e916:	88fb      	ldrh	r3, [r7, #6]
 800e918:	683a      	ldr	r2, [r7, #0]
 800e91a:	4413      	add	r3, r2
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	e00b      	b.n	800e938 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e920:	88fb      	ldrh	r3, [r7, #6]
 800e922:	b2da      	uxtb	r2, r3
 800e924:	4b09      	ldr	r3, [pc, #36]	; (800e94c <tcp_get_next_optbyte+0x64>)
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e92e:	4b06      	ldr	r3, [pc, #24]	; (800e948 <tcp_get_next_optbyte+0x60>)
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	797b      	ldrb	r3, [r7, #5]
 800e934:	4413      	add	r3, r2
 800e936:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e938:	4618      	mov	r0, r3
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	20008ee8 	.word	0x20008ee8
 800e948:	20008ee4 	.word	0x20008ee4
 800e94c:	20008ee2 	.word	0x20008ee2
 800e950:	20008edc 	.word	0x20008edc

0800e954 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d106      	bne.n	800e970 <tcp_parseopt+0x1c>
 800e962:	4b32      	ldr	r3, [pc, #200]	; (800ea2c <tcp_parseopt+0xd8>)
 800e964:	f240 727d 	movw	r2, #1917	; 0x77d
 800e968:	4931      	ldr	r1, [pc, #196]	; (800ea30 <tcp_parseopt+0xdc>)
 800e96a:	4832      	ldr	r0, [pc, #200]	; (800ea34 <tcp_parseopt+0xe0>)
 800e96c:	f004 fd16 	bl	801339c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e970:	4b31      	ldr	r3, [pc, #196]	; (800ea38 <tcp_parseopt+0xe4>)
 800e972:	881b      	ldrh	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d055      	beq.n	800ea24 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e978:	4b30      	ldr	r3, [pc, #192]	; (800ea3c <tcp_parseopt+0xe8>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	801a      	strh	r2, [r3, #0]
 800e97e:	e045      	b.n	800ea0c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e980:	f7ff ffb2 	bl	800e8e8 <tcp_get_next_optbyte>
 800e984:	4603      	mov	r3, r0
 800e986:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e988:	7bfb      	ldrb	r3, [r7, #15]
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d006      	beq.n	800e99c <tcp_parseopt+0x48>
 800e98e:	2b02      	cmp	r3, #2
 800e990:	dc2b      	bgt.n	800e9ea <tcp_parseopt+0x96>
 800e992:	2b00      	cmp	r3, #0
 800e994:	d041      	beq.n	800ea1a <tcp_parseopt+0xc6>
 800e996:	2b01      	cmp	r3, #1
 800e998:	d127      	bne.n	800e9ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e99a:	e037      	b.n	800ea0c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e99c:	f7ff ffa4 	bl	800e8e8 <tcp_get_next_optbyte>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b04      	cmp	r3, #4
 800e9a4:	d13b      	bne.n	800ea1e <tcp_parseopt+0xca>
 800e9a6:	4b25      	ldr	r3, [pc, #148]	; (800ea3c <tcp_parseopt+0xe8>)
 800e9a8:	881b      	ldrh	r3, [r3, #0]
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	4a22      	ldr	r2, [pc, #136]	; (800ea38 <tcp_parseopt+0xe4>)
 800e9ae:	8812      	ldrh	r2, [r2, #0]
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	da34      	bge.n	800ea1e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e9b4:	f7ff ff98 	bl	800e8e8 <tcp_get_next_optbyte>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	021b      	lsls	r3, r3, #8
 800e9be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e9c0:	f7ff ff92 	bl	800e8e8 <tcp_get_next_optbyte>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	89bb      	ldrh	r3, [r7, #12]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e9ce:	89bb      	ldrh	r3, [r7, #12]
 800e9d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e9d4:	d804      	bhi.n	800e9e0 <tcp_parseopt+0x8c>
 800e9d6:	89bb      	ldrh	r3, [r7, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d001      	beq.n	800e9e0 <tcp_parseopt+0x8c>
 800e9dc:	89ba      	ldrh	r2, [r7, #12]
 800e9de:	e001      	b.n	800e9e4 <tcp_parseopt+0x90>
 800e9e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e9e8:	e010      	b.n	800ea0c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e9ea:	f7ff ff7d 	bl	800e8e8 <tcp_get_next_optbyte>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e9f2:	7afb      	ldrb	r3, [r7, #11]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d914      	bls.n	800ea22 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e9f8:	7afb      	ldrb	r3, [r7, #11]
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	4b0f      	ldr	r3, [pc, #60]	; (800ea3c <tcp_parseopt+0xe8>)
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	4413      	add	r3, r2
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	3b02      	subs	r3, #2
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	4b0c      	ldr	r3, [pc, #48]	; (800ea3c <tcp_parseopt+0xe8>)
 800ea0a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ea0c:	4b0b      	ldr	r3, [pc, #44]	; (800ea3c <tcp_parseopt+0xe8>)
 800ea0e:	881a      	ldrh	r2, [r3, #0]
 800ea10:	4b09      	ldr	r3, [pc, #36]	; (800ea38 <tcp_parseopt+0xe4>)
 800ea12:	881b      	ldrh	r3, [r3, #0]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d3b3      	bcc.n	800e980 <tcp_parseopt+0x2c>
 800ea18:	e004      	b.n	800ea24 <tcp_parseopt+0xd0>
          return;
 800ea1a:	bf00      	nop
 800ea1c:	e002      	b.n	800ea24 <tcp_parseopt+0xd0>
            return;
 800ea1e:	bf00      	nop
 800ea20:	e000      	b.n	800ea24 <tcp_parseopt+0xd0>
            return;
 800ea22:	bf00      	nop
      }
    }
  }
}
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	08015a1c 	.word	0x08015a1c
 800ea30:	08015e80 	.word	0x08015e80
 800ea34:	08015a68 	.word	0x08015a68
 800ea38:	20008ee0 	.word	0x20008ee0
 800ea3c:	20008ee8 	.word	0x20008ee8

0800ea40 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ea40:	b480      	push	{r7}
 800ea42:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ea44:	4b05      	ldr	r3, [pc, #20]	; (800ea5c <tcp_trigger_input_pcb_close+0x1c>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	f043 0310 	orr.w	r3, r3, #16
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	4b03      	ldr	r3, [pc, #12]	; (800ea5c <tcp_trigger_input_pcb_close+0x1c>)
 800ea50:	701a      	strb	r2, [r3, #0]
}
 800ea52:	bf00      	nop
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr
 800ea5c:	20008ef9 	.word	0x20008ef9

0800ea60 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00a      	beq.n	800ea88 <tcp_route+0x28>
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	7a1b      	ldrb	r3, [r3, #8]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d006      	beq.n	800ea88 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	7a1b      	ldrb	r3, [r3, #8]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fb fab8 	bl	8009ff4 <netif_get_by_index>
 800ea84:	4603      	mov	r3, r0
 800ea86:	e003      	b.n	800ea90 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f003 fa37 	bl	8011efc <ip4_route>
 800ea8e:	4603      	mov	r3, r0
  }
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ea98:	b590      	push	{r4, r7, lr}
 800ea9a:	b087      	sub	sp, #28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	603b      	str	r3, [r7, #0]
 800eaa4:	4613      	mov	r3, r2
 800eaa6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d105      	bne.n	800eaba <tcp_create_segment+0x22>
 800eaae:	4b44      	ldr	r3, [pc, #272]	; (800ebc0 <tcp_create_segment+0x128>)
 800eab0:	22a3      	movs	r2, #163	; 0xa3
 800eab2:	4944      	ldr	r1, [pc, #272]	; (800ebc4 <tcp_create_segment+0x12c>)
 800eab4:	4844      	ldr	r0, [pc, #272]	; (800ebc8 <tcp_create_segment+0x130>)
 800eab6:	f004 fc71 	bl	801339c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d105      	bne.n	800eacc <tcp_create_segment+0x34>
 800eac0:	4b3f      	ldr	r3, [pc, #252]	; (800ebc0 <tcp_create_segment+0x128>)
 800eac2:	22a4      	movs	r2, #164	; 0xa4
 800eac4:	4941      	ldr	r1, [pc, #260]	; (800ebcc <tcp_create_segment+0x134>)
 800eac6:	4840      	ldr	r0, [pc, #256]	; (800ebc8 <tcp_create_segment+0x130>)
 800eac8:	f004 fc68 	bl	801339c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eacc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	f003 0304 	and.w	r3, r3, #4
 800ead8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800eada:	2003      	movs	r0, #3
 800eadc:	f7fa ff8c 	bl	80099f8 <memp_malloc>
 800eae0:	6138      	str	r0, [r7, #16]
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d104      	bne.n	800eaf2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800eae8:	68b8      	ldr	r0, [r7, #8]
 800eaea:	f7fb fde3 	bl	800a6b4 <pbuf_free>
    return NULL;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	e061      	b.n	800ebb6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eaf8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	2200      	movs	r2, #0
 800eafe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	891a      	ldrh	r2, [r3, #8]
 800eb0a:	7dfb      	ldrb	r3, [r7, #23]
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d205      	bcs.n	800eb1e <tcp_create_segment+0x86>
 800eb12:	4b2b      	ldr	r3, [pc, #172]	; (800ebc0 <tcp_create_segment+0x128>)
 800eb14:	22b0      	movs	r2, #176	; 0xb0
 800eb16:	492e      	ldr	r1, [pc, #184]	; (800ebd0 <tcp_create_segment+0x138>)
 800eb18:	482b      	ldr	r0, [pc, #172]	; (800ebc8 <tcp_create_segment+0x130>)
 800eb1a:	f004 fc3f 	bl	801339c <iprintf>
  seg->len = p->tot_len - optlen;
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	891a      	ldrh	r2, [r3, #8]
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eb2e:	2114      	movs	r1, #20
 800eb30:	68b8      	ldr	r0, [r7, #8]
 800eb32:	f7fb fd29 	bl	800a588 <pbuf_add_header>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d004      	beq.n	800eb46 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800eb3c:	6938      	ldr	r0, [r7, #16]
 800eb3e:	f7fd f8ce 	bl	800bcde <tcp_seg_free>
    return NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	e037      	b.n	800ebb6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	685a      	ldr	r2, [r3, #4]
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	8ada      	ldrh	r2, [r3, #22]
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	68dc      	ldr	r4, [r3, #12]
 800eb58:	4610      	mov	r0, r2
 800eb5a:	f7fa faf7 	bl	800914c <lwip_htons>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	8b1a      	ldrh	r2, [r3, #24]
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	68dc      	ldr	r4, [r3, #12]
 800eb6a:	4610      	mov	r0, r2
 800eb6c:	f7fa faee 	bl	800914c <lwip_htons>
 800eb70:	4603      	mov	r3, r0
 800eb72:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	68dc      	ldr	r4, [r3, #12]
 800eb78:	6838      	ldr	r0, [r7, #0]
 800eb7a:	f7fa fafc 	bl	8009176 <lwip_htonl>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	089b      	lsrs	r3, r3, #2
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	3305      	adds	r3, #5
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	031b      	lsls	r3, r3, #12
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	79fb      	ldrb	r3, [r7, #7]
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	4313      	orrs	r3, r2
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	68dc      	ldr	r4, [r3, #12]
 800eb9e:	4610      	mov	r0, r2
 800eba0:	f7fa fad4 	bl	800914c <lwip_htons>
 800eba4:	4603      	mov	r3, r0
 800eba6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	2200      	movs	r2, #0
 800ebae:	749a      	strb	r2, [r3, #18]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	74da      	strb	r2, [r3, #19]
  return seg;
 800ebb4:	693b      	ldr	r3, [r7, #16]
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	371c      	adds	r7, #28
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd90      	pop	{r4, r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	08015e9c 	.word	0x08015e9c
 800ebc4:	08015ed0 	.word	0x08015ed0
 800ebc8:	08015ef0 	.word	0x08015ef0
 800ebcc:	08015f18 	.word	0x08015f18
 800ebd0:	08015f3c 	.word	0x08015f3c

0800ebd4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ebd4:	b590      	push	{r4, r7, lr}
 800ebd6:	b08b      	sub	sp, #44	; 0x2c
 800ebd8:	af02      	add	r7, sp, #8
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d106      	bne.n	800ec00 <tcp_split_unsent_seg+0x2c>
 800ebf2:	4b95      	ldr	r3, [pc, #596]	; (800ee48 <tcp_split_unsent_seg+0x274>)
 800ebf4:	f240 324b 	movw	r2, #843	; 0x34b
 800ebf8:	4994      	ldr	r1, [pc, #592]	; (800ee4c <tcp_split_unsent_seg+0x278>)
 800ebfa:	4895      	ldr	r0, [pc, #596]	; (800ee50 <tcp_split_unsent_seg+0x27c>)
 800ebfc:	f004 fbce 	bl	801339c <iprintf>

  useg = pcb->unsent;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec04:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d102      	bne.n	800ec12 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ec0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec10:	e116      	b.n	800ee40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ec12:	887b      	ldrh	r3, [r7, #2]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d109      	bne.n	800ec2c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ec18:	4b8b      	ldr	r3, [pc, #556]	; (800ee48 <tcp_split_unsent_seg+0x274>)
 800ec1a:	f240 3253 	movw	r2, #851	; 0x353
 800ec1e:	498d      	ldr	r1, [pc, #564]	; (800ee54 <tcp_split_unsent_seg+0x280>)
 800ec20:	488b      	ldr	r0, [pc, #556]	; (800ee50 <tcp_split_unsent_seg+0x27c>)
 800ec22:	f004 fbbb 	bl	801339c <iprintf>
    return ERR_VAL;
 800ec26:	f06f 0305 	mvn.w	r3, #5
 800ec2a:	e109      	b.n	800ee40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	891b      	ldrh	r3, [r3, #8]
 800ec30:	887a      	ldrh	r2, [r7, #2]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d301      	bcc.n	800ec3a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ec36:	2300      	movs	r3, #0
 800ec38:	e102      	b.n	800ee40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec3e:	887a      	ldrh	r2, [r7, #2]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d906      	bls.n	800ec52 <tcp_split_unsent_seg+0x7e>
 800ec44:	4b80      	ldr	r3, [pc, #512]	; (800ee48 <tcp_split_unsent_seg+0x274>)
 800ec46:	f240 325b 	movw	r2, #859	; 0x35b
 800ec4a:	4983      	ldr	r1, [pc, #524]	; (800ee58 <tcp_split_unsent_seg+0x284>)
 800ec4c:	4880      	ldr	r0, [pc, #512]	; (800ee50 <tcp_split_unsent_seg+0x27c>)
 800ec4e:	f004 fba5 	bl	801339c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	891b      	ldrh	r3, [r3, #8]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d106      	bne.n	800ec68 <tcp_split_unsent_seg+0x94>
 800ec5a:	4b7b      	ldr	r3, [pc, #492]	; (800ee48 <tcp_split_unsent_seg+0x274>)
 800ec5c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ec60:	497e      	ldr	r1, [pc, #504]	; (800ee5c <tcp_split_unsent_seg+0x288>)
 800ec62:	487b      	ldr	r0, [pc, #492]	; (800ee50 <tcp_split_unsent_seg+0x27c>)
 800ec64:	f004 fb9a 	bl	801339c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	7a9b      	ldrb	r3, [r3, #10]
 800ec6c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ec6e:	7bfb      	ldrb	r3, [r7, #15]
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	f003 0304 	and.w	r3, r3, #4
 800ec78:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	891a      	ldrh	r2, [r3, #8]
 800ec7e:	887b      	ldrh	r3, [r7, #2]
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ec84:	7bbb      	ldrb	r3, [r7, #14]
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	89bb      	ldrh	r3, [r7, #12]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec92:	4619      	mov	r1, r3
 800ec94:	2036      	movs	r0, #54	; 0x36
 800ec96:	f7fb fa29 	bl	800a0ec <pbuf_alloc>
 800ec9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 80b7 	beq.w	800ee12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	891a      	ldrh	r2, [r3, #8]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	891b      	ldrh	r3, [r3, #8]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	887b      	ldrh	r3, [r7, #2]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	6858      	ldr	r0, [r3, #4]
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	685a      	ldr	r2, [r3, #4]
 800ecc0:	7bbb      	ldrb	r3, [r7, #14]
 800ecc2:	18d1      	adds	r1, r2, r3
 800ecc4:	897b      	ldrh	r3, [r7, #10]
 800ecc6:	89ba      	ldrh	r2, [r7, #12]
 800ecc8:	f7fb feee 	bl	800aaa8 <pbuf_copy_partial>
 800eccc:	4603      	mov	r3, r0
 800ecce:	461a      	mov	r2, r3
 800ecd0:	89bb      	ldrh	r3, [r7, #12]
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	f040 809f 	bne.w	800ee16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	899b      	ldrh	r3, [r3, #12]
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fa fa33 	bl	800914c <lwip_htons>
 800ece6:	4603      	mov	r3, r0
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ecf4:	7efb      	ldrb	r3, [r7, #27]
 800ecf6:	f003 0308 	and.w	r3, r3, #8
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d007      	beq.n	800ed0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ecfe:	7efb      	ldrb	r3, [r7, #27]
 800ed00:	f023 0308 	bic.w	r3, r3, #8
 800ed04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ed06:	7ebb      	ldrb	r3, [r7, #26]
 800ed08:	f043 0308 	orr.w	r3, r3, #8
 800ed0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ed0e:	7efb      	ldrb	r3, [r7, #27]
 800ed10:	f003 0301 	and.w	r3, r3, #1
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d007      	beq.n	800ed28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ed18:	7efb      	ldrb	r3, [r7, #27]
 800ed1a:	f023 0301 	bic.w	r3, r3, #1
 800ed1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ed20:	7ebb      	ldrb	r3, [r7, #26]
 800ed22:	f043 0301 	orr.w	r3, r3, #1
 800ed26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fa fa21 	bl	8009176 <lwip_htonl>
 800ed34:	4602      	mov	r2, r0
 800ed36:	887b      	ldrh	r3, [r7, #2]
 800ed38:	18d1      	adds	r1, r2, r3
 800ed3a:	7eba      	ldrb	r2, [r7, #26]
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	460b      	mov	r3, r1
 800ed42:	6939      	ldr	r1, [r7, #16]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff fea7 	bl	800ea98 <tcp_create_segment>
 800ed4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d063      	beq.n	800ee1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fb fd34 	bl	800a7c4 <pbuf_clen>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	461a      	mov	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed66:	1a9b      	subs	r3, r3, r2
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	6858      	ldr	r0, [r3, #4]
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	891a      	ldrh	r2, [r3, #8]
 800ed7a:	89bb      	ldrh	r3, [r7, #12]
 800ed7c:	1ad3      	subs	r3, r2, r3
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	4619      	mov	r1, r3
 800ed82:	f7fb fb11 	bl	800a3a8 <pbuf_realloc>
  useg->len -= remainder;
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	891a      	ldrh	r2, [r3, #8]
 800ed8a:	89bb      	ldrh	r3, [r7, #12]
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	899b      	ldrh	r3, [r3, #12]
 800ed9a:	b29c      	uxth	r4, r3
 800ed9c:	7efb      	ldrb	r3, [r7, #27]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7fa f9d3 	bl	800914c <lwip_htons>
 800eda6:	4603      	mov	r3, r0
 800eda8:	461a      	mov	r2, r3
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	4322      	orrs	r2, r4
 800edb0:	b292      	uxth	r2, r2
 800edb2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fb fd03 	bl	800a7c4 <pbuf_clen>
 800edbe:	4603      	mov	r3, r0
 800edc0:	461a      	mov	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800edc8:	4413      	add	r3, r2
 800edca:	b29a      	uxth	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7fb fcf4 	bl	800a7c4 <pbuf_clen>
 800eddc:	4603      	mov	r3, r0
 800edde:	461a      	mov	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ede6:	4413      	add	r3, r2
 800ede8:	b29a      	uxth	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	69fa      	ldr	r2, [r7, #28]
 800edfc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d103      	bne.n	800ee0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e016      	b.n	800ee40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ee12:	bf00      	nop
 800ee14:	e002      	b.n	800ee1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ee16:	bf00      	nop
 800ee18:	e000      	b.n	800ee1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ee1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d006      	beq.n	800ee30 <tcp_split_unsent_seg+0x25c>
 800ee22:	4b09      	ldr	r3, [pc, #36]	; (800ee48 <tcp_split_unsent_seg+0x274>)
 800ee24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ee28:	490d      	ldr	r1, [pc, #52]	; (800ee60 <tcp_split_unsent_seg+0x28c>)
 800ee2a:	4809      	ldr	r0, [pc, #36]	; (800ee50 <tcp_split_unsent_seg+0x27c>)
 800ee2c:	f004 fab6 	bl	801339c <iprintf>
  if (p != NULL) {
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ee36:	6938      	ldr	r0, [r7, #16]
 800ee38:	f7fb fc3c 	bl	800a6b4 <pbuf_free>
  }

  return ERR_MEM;
 800ee3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3724      	adds	r7, #36	; 0x24
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd90      	pop	{r4, r7, pc}
 800ee48:	08015e9c 	.word	0x08015e9c
 800ee4c:	08016230 	.word	0x08016230
 800ee50:	08015ef0 	.word	0x08015ef0
 800ee54:	08016254 	.word	0x08016254
 800ee58:	08016278 	.word	0x08016278
 800ee5c:	08016288 	.word	0x08016288
 800ee60:	08016298 	.word	0x08016298

0800ee64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ee64:	b590      	push	{r4, r7, lr}
 800ee66:	b085      	sub	sp, #20
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d106      	bne.n	800ee80 <tcp_send_fin+0x1c>
 800ee72:	4b21      	ldr	r3, [pc, #132]	; (800eef8 <tcp_send_fin+0x94>)
 800ee74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ee78:	4920      	ldr	r1, [pc, #128]	; (800eefc <tcp_send_fin+0x98>)
 800ee7a:	4821      	ldr	r0, [pc, #132]	; (800ef00 <tcp_send_fin+0x9c>)
 800ee7c:	f004 fa8e 	bl	801339c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d02e      	beq.n	800eee6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee8c:	60fb      	str	r3, [r7, #12]
 800ee8e:	e002      	b.n	800ee96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1f8      	bne.n	800ee90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	899b      	ldrh	r3, [r3, #12]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fa f950 	bl	800914c <lwip_htons>
 800eeac:	4603      	mov	r3, r0
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	f003 0307 	and.w	r3, r3, #7
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d116      	bne.n	800eee6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	899b      	ldrh	r3, [r3, #12]
 800eebe:	b29c      	uxth	r4, r3
 800eec0:	2001      	movs	r0, #1
 800eec2:	f7fa f943 	bl	800914c <lwip_htons>
 800eec6:	4603      	mov	r3, r0
 800eec8:	461a      	mov	r2, r3
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	4322      	orrs	r2, r4
 800eed0:	b292      	uxth	r2, r2
 800eed2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	8b5b      	ldrh	r3, [r3, #26]
 800eed8:	f043 0320 	orr.w	r3, r3, #32
 800eedc:	b29a      	uxth	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800eee2:	2300      	movs	r3, #0
 800eee4:	e004      	b.n	800eef0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800eee6:	2101      	movs	r1, #1
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f80b 	bl	800ef04 <tcp_enqueue_flags>
 800eeee:	4603      	mov	r3, r0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3714      	adds	r7, #20
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd90      	pop	{r4, r7, pc}
 800eef8:	08015e9c 	.word	0x08015e9c
 800eefc:	080162a4 	.word	0x080162a4
 800ef00:	08015ef0 	.word	0x08015ef0

0800ef04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b08a      	sub	sp, #40	; 0x28
 800ef08:	af02      	add	r7, sp, #8
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ef10:	2300      	movs	r3, #0
 800ef12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ef14:	2300      	movs	r3, #0
 800ef16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ef18:	78fb      	ldrb	r3, [r7, #3]
 800ef1a:	f003 0303 	and.w	r3, r3, #3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d106      	bne.n	800ef30 <tcp_enqueue_flags+0x2c>
 800ef22:	4b67      	ldr	r3, [pc, #412]	; (800f0c0 <tcp_enqueue_flags+0x1bc>)
 800ef24:	f240 4211 	movw	r2, #1041	; 0x411
 800ef28:	4966      	ldr	r1, [pc, #408]	; (800f0c4 <tcp_enqueue_flags+0x1c0>)
 800ef2a:	4867      	ldr	r0, [pc, #412]	; (800f0c8 <tcp_enqueue_flags+0x1c4>)
 800ef2c:	f004 fa36 	bl	801339c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d106      	bne.n	800ef44 <tcp_enqueue_flags+0x40>
 800ef36:	4b62      	ldr	r3, [pc, #392]	; (800f0c0 <tcp_enqueue_flags+0x1bc>)
 800ef38:	f240 4213 	movw	r2, #1043	; 0x413
 800ef3c:	4963      	ldr	r1, [pc, #396]	; (800f0cc <tcp_enqueue_flags+0x1c8>)
 800ef3e:	4862      	ldr	r0, [pc, #392]	; (800f0c8 <tcp_enqueue_flags+0x1c4>)
 800ef40:	f004 fa2c 	bl	801339c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	f003 0302 	and.w	r3, r3, #2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ef52:	7ffb      	ldrb	r3, [r7, #31]
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	f003 0304 	and.w	r3, r3, #4
 800ef5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ef5e:	7dfb      	ldrb	r3, [r7, #23]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef66:	4619      	mov	r1, r3
 800ef68:	2036      	movs	r0, #54	; 0x36
 800ef6a:	f7fb f8bf 	bl	800a0ec <pbuf_alloc>
 800ef6e:	6138      	str	r0, [r7, #16]
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d109      	bne.n	800ef8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	8b5b      	ldrh	r3, [r3, #26]
 800ef7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ef84:	f04f 33ff 	mov.w	r3, #4294967295
 800ef88:	e095      	b.n	800f0b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	895a      	ldrh	r2, [r3, #10]
 800ef8e:	7dfb      	ldrb	r3, [r7, #23]
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d206      	bcs.n	800efa4 <tcp_enqueue_flags+0xa0>
 800ef96:	4b4a      	ldr	r3, [pc, #296]	; (800f0c0 <tcp_enqueue_flags+0x1bc>)
 800ef98:	f240 4239 	movw	r2, #1081	; 0x439
 800ef9c:	494c      	ldr	r1, [pc, #304]	; (800f0d0 <tcp_enqueue_flags+0x1cc>)
 800ef9e:	484a      	ldr	r0, [pc, #296]	; (800f0c8 <tcp_enqueue_flags+0x1c4>)
 800efa0:	f004 f9fc 	bl	801339c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800efa8:	78fa      	ldrb	r2, [r7, #3]
 800efaa:	7ffb      	ldrb	r3, [r7, #31]
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	460b      	mov	r3, r1
 800efb0:	6939      	ldr	r1, [r7, #16]
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7ff fd70 	bl	800ea98 <tcp_create_segment>
 800efb8:	60f8      	str	r0, [r7, #12]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d109      	bne.n	800efd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	8b5b      	ldrh	r3, [r3, #26]
 800efc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efc8:	b29a      	uxth	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800efce:	f04f 33ff 	mov.w	r3, #4294967295
 800efd2:	e070      	b.n	800f0b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	f003 0303 	and.w	r3, r3, #3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d006      	beq.n	800efee <tcp_enqueue_flags+0xea>
 800efe0:	4b37      	ldr	r3, [pc, #220]	; (800f0c0 <tcp_enqueue_flags+0x1bc>)
 800efe2:	f240 4242 	movw	r2, #1090	; 0x442
 800efe6:	493b      	ldr	r1, [pc, #236]	; (800f0d4 <tcp_enqueue_flags+0x1d0>)
 800efe8:	4837      	ldr	r0, [pc, #220]	; (800f0c8 <tcp_enqueue_flags+0x1c4>)
 800efea:	f004 f9d7 	bl	801339c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	891b      	ldrh	r3, [r3, #8]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d006      	beq.n	800f004 <tcp_enqueue_flags+0x100>
 800eff6:	4b32      	ldr	r3, [pc, #200]	; (800f0c0 <tcp_enqueue_flags+0x1bc>)
 800eff8:	f240 4243 	movw	r2, #1091	; 0x443
 800effc:	4936      	ldr	r1, [pc, #216]	; (800f0d8 <tcp_enqueue_flags+0x1d4>)
 800effe:	4832      	ldr	r0, [pc, #200]	; (800f0c8 <tcp_enqueue_flags+0x1c4>)
 800f000:	f004 f9cc 	bl	801339c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d103      	bne.n	800f014 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	66da      	str	r2, [r3, #108]	; 0x6c
 800f012:	e00d      	b.n	800f030 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f018:	61bb      	str	r3, [r7, #24]
 800f01a:	e002      	b.n	800f022 <tcp_enqueue_flags+0x11e>
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	61bb      	str	r3, [r7, #24]
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1f8      	bne.n	800f01c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2200      	movs	r2, #0
 800f034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f038:	78fb      	ldrb	r3, [r7, #3]
 800f03a:	f003 0302 	and.w	r3, r3, #2
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d104      	bne.n	800f04c <tcp_enqueue_flags+0x148>
 800f042:	78fb      	ldrb	r3, [r7, #3]
 800f044:	f003 0301 	and.w	r3, r3, #1
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d004      	beq.n	800f056 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f050:	1c5a      	adds	r2, r3, #1
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f056:	78fb      	ldrb	r3, [r7, #3]
 800f058:	f003 0301 	and.w	r3, r3, #1
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d006      	beq.n	800f06e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	8b5b      	ldrh	r3, [r3, #26]
 800f064:	f043 0320 	orr.w	r3, r3, #32
 800f068:	b29a      	uxth	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	4618      	mov	r0, r3
 800f074:	f7fb fba6 	bl	800a7c4 <pbuf_clen>
 800f078:	4603      	mov	r3, r0
 800f07a:	461a      	mov	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f082:	4413      	add	r3, r2
 800f084:	b29a      	uxth	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00e      	beq.n	800f0b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d10a      	bne.n	800f0b4 <tcp_enqueue_flags+0x1b0>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d106      	bne.n	800f0b4 <tcp_enqueue_flags+0x1b0>
 800f0a6:	4b06      	ldr	r3, [pc, #24]	; (800f0c0 <tcp_enqueue_flags+0x1bc>)
 800f0a8:	f240 4265 	movw	r2, #1125	; 0x465
 800f0ac:	490b      	ldr	r1, [pc, #44]	; (800f0dc <tcp_enqueue_flags+0x1d8>)
 800f0ae:	4806      	ldr	r0, [pc, #24]	; (800f0c8 <tcp_enqueue_flags+0x1c4>)
 800f0b0:	f004 f974 	bl	801339c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3720      	adds	r7, #32
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	08015e9c 	.word	0x08015e9c
 800f0c4:	080162c0 	.word	0x080162c0
 800f0c8:	08015ef0 	.word	0x08015ef0
 800f0cc:	08016318 	.word	0x08016318
 800f0d0:	08016338 	.word	0x08016338
 800f0d4:	08016374 	.word	0x08016374
 800f0d8:	0801638c 	.word	0x0801638c
 800f0dc:	080163b8 	.word	0x080163b8

0800f0e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f0e0:	b5b0      	push	{r4, r5, r7, lr}
 800f0e2:	b08a      	sub	sp, #40	; 0x28
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d106      	bne.n	800f0fc <tcp_output+0x1c>
 800f0ee:	4b8a      	ldr	r3, [pc, #552]	; (800f318 <tcp_output+0x238>)
 800f0f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f0f4:	4989      	ldr	r1, [pc, #548]	; (800f31c <tcp_output+0x23c>)
 800f0f6:	488a      	ldr	r0, [pc, #552]	; (800f320 <tcp_output+0x240>)
 800f0f8:	f004 f950 	bl	801339c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7d1b      	ldrb	r3, [r3, #20]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d106      	bne.n	800f112 <tcp_output+0x32>
 800f104:	4b84      	ldr	r3, [pc, #528]	; (800f318 <tcp_output+0x238>)
 800f106:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f10a:	4986      	ldr	r1, [pc, #536]	; (800f324 <tcp_output+0x244>)
 800f10c:	4884      	ldr	r0, [pc, #528]	; (800f320 <tcp_output+0x240>)
 800f10e:	f004 f945 	bl	801339c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f112:	4b85      	ldr	r3, [pc, #532]	; (800f328 <tcp_output+0x248>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d101      	bne.n	800f120 <tcp_output+0x40>
    return ERR_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	e1ce      	b.n	800f4be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f12c:	4293      	cmp	r3, r2
 800f12e:	bf28      	it	cs
 800f130:	4613      	movcs	r3, r2
 800f132:	b29b      	uxth	r3, r3
 800f134:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f13a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d10b      	bne.n	800f15a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	8b5b      	ldrh	r3, [r3, #26]
 800f146:	f003 0302 	and.w	r3, r3, #2
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f000 81aa 	beq.w	800f4a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fdcb 	bl	800fcec <tcp_send_empty_ack>
 800f156:	4603      	mov	r3, r0
 800f158:	e1b1      	b.n	800f4be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f15a:	6879      	ldr	r1, [r7, #4]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	3304      	adds	r3, #4
 800f160:	461a      	mov	r2, r3
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7ff fc7c 	bl	800ea60 <tcp_route>
 800f168:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d102      	bne.n	800f176 <tcp_output+0x96>
    return ERR_RTE;
 800f170:	f06f 0303 	mvn.w	r3, #3
 800f174:	e1a3      	b.n	800f4be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d003      	beq.n	800f184 <tcp_output+0xa4>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d111      	bne.n	800f1a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <tcp_output+0xb0>
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	3304      	adds	r3, #4
 800f18e:	e000      	b.n	800f192 <tcp_output+0xb2>
 800f190:	2300      	movs	r3, #0
 800f192:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d102      	bne.n	800f1a0 <tcp_output+0xc0>
      return ERR_RTE;
 800f19a:	f06f 0303 	mvn.w	r3, #3
 800f19e:	e18e      	b.n	800f4be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7f9 ffe1 	bl	8009176 <lwip_htonl>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1be:	8912      	ldrh	r2, [r2, #8]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	69ba      	ldr	r2, [r7, #24]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d227      	bcs.n	800f218 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d114      	bne.n	800f200 <tcp_output+0x120>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d110      	bne.n	800f200 <tcp_output+0x120>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d10b      	bne.n	800f200 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	8b5b      	ldrh	r3, [r3, #26]
 800f204:	f003 0302 	and.w	r3, r3, #2
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f000 814d 	beq.w	800f4a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 fd6c 	bl	800fcec <tcp_send_empty_ack>
 800f214:	4603      	mov	r3, r0
 800f216:	e152      	b.n	800f4be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f224:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f000 811c 	beq.w	800f466 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f22e:	e002      	b.n	800f236 <tcp_output+0x156>
 800f230:	6a3b      	ldr	r3, [r7, #32]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	623b      	str	r3, [r7, #32]
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d1f8      	bne.n	800f230 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f23e:	e112      	b.n	800f466 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	899b      	ldrh	r3, [r3, #12]
 800f246:	b29b      	uxth	r3, r3
 800f248:	4618      	mov	r0, r3
 800f24a:	f7f9 ff7f 	bl	800914c <lwip_htons>
 800f24e:	4603      	mov	r3, r0
 800f250:	b2db      	uxtb	r3, r3
 800f252:	f003 0304 	and.w	r3, r3, #4
 800f256:	2b00      	cmp	r3, #0
 800f258:	d006      	beq.n	800f268 <tcp_output+0x188>
 800f25a:	4b2f      	ldr	r3, [pc, #188]	; (800f318 <tcp_output+0x238>)
 800f25c:	f240 5236 	movw	r2, #1334	; 0x536
 800f260:	4932      	ldr	r1, [pc, #200]	; (800f32c <tcp_output+0x24c>)
 800f262:	482f      	ldr	r0, [pc, #188]	; (800f320 <tcp_output+0x240>)
 800f264:	f004 f89a 	bl	801339c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d01f      	beq.n	800f2b0 <tcp_output+0x1d0>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	8b5b      	ldrh	r3, [r3, #26]
 800f274:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d119      	bne.n	800f2b0 <tcp_output+0x1d0>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00b      	beq.n	800f29c <tcp_output+0x1bc>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d110      	bne.n	800f2b0 <tcp_output+0x1d0>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f292:	891a      	ldrh	r2, [r3, #8]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f298:	429a      	cmp	r2, r3
 800f29a:	d209      	bcs.n	800f2b0 <tcp_output+0x1d0>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d004      	beq.n	800f2b0 <tcp_output+0x1d0>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2ac:	2b08      	cmp	r3, #8
 800f2ae:	d901      	bls.n	800f2b4 <tcp_output+0x1d4>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e000      	b.n	800f2b6 <tcp_output+0x1d6>
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d106      	bne.n	800f2c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	8b5b      	ldrh	r3, [r3, #26]
 800f2be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 80e4 	beq.w	800f490 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	7d1b      	ldrb	r3, [r3, #20]
 800f2cc:	2b02      	cmp	r3, #2
 800f2ce:	d00d      	beq.n	800f2ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	899b      	ldrh	r3, [r3, #12]
 800f2d6:	b29c      	uxth	r4, r3
 800f2d8:	2010      	movs	r0, #16
 800f2da:	f7f9 ff37 	bl	800914c <lwip_htons>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	4322      	orrs	r2, r4
 800f2e8:	b292      	uxth	r2, r2
 800f2ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f2ec:	697a      	ldr	r2, [r7, #20]
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2f2:	f000 f909 	bl	800f508 <tcp_output_segment>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d016      	beq.n	800f330 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	8b5b      	ldrh	r3, [r3, #26]
 800f306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	835a      	strh	r2, [r3, #26]
      return err;
 800f310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f314:	e0d3      	b.n	800f4be <tcp_output+0x3de>
 800f316:	bf00      	nop
 800f318:	08015e9c 	.word	0x08015e9c
 800f31c:	080163e0 	.word	0x080163e0
 800f320:	08015ef0 	.word	0x08015ef0
 800f324:	080163f8 	.word	0x080163f8
 800f328:	20008f00 	.word	0x20008f00
 800f32c:	08016420 	.word	0x08016420
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	7d1b      	ldrb	r3, [r3, #20]
 800f33c:	2b02      	cmp	r3, #2
 800f33e:	d006      	beq.n	800f34e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	8b5b      	ldrh	r3, [r3, #26]
 800f344:	f023 0303 	bic.w	r3, r3, #3
 800f348:	b29a      	uxth	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	f7f9 ff0e 	bl	8009176 <lwip_htonl>
 800f35a:	4604      	mov	r4, r0
 800f35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35e:	891b      	ldrh	r3, [r3, #8]
 800f360:	461d      	mov	r5, r3
 800f362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	899b      	ldrh	r3, [r3, #12]
 800f368:	b29b      	uxth	r3, r3
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7f9 feee 	bl	800914c <lwip_htons>
 800f370:	4603      	mov	r3, r0
 800f372:	b2db      	uxtb	r3, r3
 800f374:	f003 0303 	and.w	r3, r3, #3
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <tcp_output+0x2a0>
 800f37c:	2301      	movs	r3, #1
 800f37e:	e000      	b.n	800f382 <tcp_output+0x2a2>
 800f380:	2300      	movs	r3, #0
 800f382:	442b      	add	r3, r5
 800f384:	4423      	add	r3, r4
 800f386:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	da02      	bge.n	800f39a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	891b      	ldrh	r3, [r3, #8]
 800f39e:	461c      	mov	r4, r3
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	899b      	ldrh	r3, [r3, #12]
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7f9 fecf 	bl	800914c <lwip_htons>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	f003 0303 	and.w	r3, r3, #3
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d001      	beq.n	800f3be <tcp_output+0x2de>
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e000      	b.n	800f3c0 <tcp_output+0x2e0>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	4423      	add	r3, r4
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d049      	beq.n	800f45a <tcp_output+0x37a>
      seg->next = NULL;
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d105      	bne.n	800f3e0 <tcp_output+0x300>
        pcb->unacked = seg;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3d8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	623b      	str	r3, [r7, #32]
 800f3de:	e03f      	b.n	800f460 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7f9 fec5 	bl	8009176 <lwip_htonl>
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	6a3b      	ldr	r3, [r7, #32]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7f9 febe 	bl	8009176 <lwip_htonl>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	1ae3      	subs	r3, r4, r3
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	da24      	bge.n	800f44c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	3370      	adds	r3, #112	; 0x70
 800f406:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f408:	e002      	b.n	800f410 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d011      	beq.n	800f43c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	4618      	mov	r0, r3
 800f422:	f7f9 fea8 	bl	8009176 <lwip_htonl>
 800f426:	4604      	mov	r4, r0
 800f428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	4618      	mov	r0, r3
 800f430:	f7f9 fea1 	bl	8009176 <lwip_htonl>
 800f434:	4603      	mov	r3, r0
 800f436:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f438:	2b00      	cmp	r3, #0
 800f43a:	dbe6      	blt.n	800f40a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	e009      	b.n	800f460 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f450:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f452:	6a3b      	ldr	r3, [r7, #32]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	623b      	str	r3, [r7, #32]
 800f458:	e002      	b.n	800f460 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f45a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f45c:	f7fc fc3f 	bl	800bcde <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f464:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d012      	beq.n	800f492 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	4618      	mov	r0, r3
 800f474:	f7f9 fe7f 	bl	8009176 <lwip_htonl>
 800f478:	4602      	mov	r2, r0
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f47e:	1ad3      	subs	r3, r2, r3
 800f480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f482:	8912      	ldrh	r2, [r2, #8]
 800f484:	4413      	add	r3, r2
  while (seg != NULL &&
 800f486:	69ba      	ldr	r2, [r7, #24]
 800f488:	429a      	cmp	r2, r3
 800f48a:	f4bf aed9 	bcs.w	800f240 <tcp_output+0x160>
 800f48e:	e000      	b.n	800f492 <tcp_output+0x3b2>
      break;
 800f490:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f496:	2b00      	cmp	r3, #0
 800f498:	d108      	bne.n	800f4ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f4a2:	e004      	b.n	800f4ae <tcp_output+0x3ce>
    goto output_done;
 800f4a4:	bf00      	nop
 800f4a6:	e002      	b.n	800f4ae <tcp_output+0x3ce>
    goto output_done;
 800f4a8:	bf00      	nop
 800f4aa:	e000      	b.n	800f4ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f4ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	8b5b      	ldrh	r3, [r3, #26]
 800f4b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3728      	adds	r7, #40	; 0x28
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800f4c6:	bf00      	nop

0800f4c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d106      	bne.n	800f4e4 <tcp_output_segment_busy+0x1c>
 800f4d6:	4b09      	ldr	r3, [pc, #36]	; (800f4fc <tcp_output_segment_busy+0x34>)
 800f4d8:	f240 529a 	movw	r2, #1434	; 0x59a
 800f4dc:	4908      	ldr	r1, [pc, #32]	; (800f500 <tcp_output_segment_busy+0x38>)
 800f4de:	4809      	ldr	r0, [pc, #36]	; (800f504 <tcp_output_segment_busy+0x3c>)
 800f4e0:	f003 ff5c 	bl	801339c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	7b9b      	ldrb	r3, [r3, #14]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d001      	beq.n	800f4f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e000      	b.n	800f4f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	08015e9c 	.word	0x08015e9c
 800f500:	08016438 	.word	0x08016438
 800f504:	08015ef0 	.word	0x08015ef0

0800f508 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f508:	b5b0      	push	{r4, r5, r7, lr}
 800f50a:	b08c      	sub	sp, #48	; 0x30
 800f50c:	af04      	add	r7, sp, #16
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d106      	bne.n	800f528 <tcp_output_segment+0x20>
 800f51a:	4b63      	ldr	r3, [pc, #396]	; (800f6a8 <tcp_output_segment+0x1a0>)
 800f51c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f520:	4962      	ldr	r1, [pc, #392]	; (800f6ac <tcp_output_segment+0x1a4>)
 800f522:	4863      	ldr	r0, [pc, #396]	; (800f6b0 <tcp_output_segment+0x1a8>)
 800f524:	f003 ff3a 	bl	801339c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d106      	bne.n	800f53c <tcp_output_segment+0x34>
 800f52e:	4b5e      	ldr	r3, [pc, #376]	; (800f6a8 <tcp_output_segment+0x1a0>)
 800f530:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f534:	495f      	ldr	r1, [pc, #380]	; (800f6b4 <tcp_output_segment+0x1ac>)
 800f536:	485e      	ldr	r0, [pc, #376]	; (800f6b0 <tcp_output_segment+0x1a8>)
 800f538:	f003 ff30 	bl	801339c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <tcp_output_segment+0x48>
 800f542:	4b59      	ldr	r3, [pc, #356]	; (800f6a8 <tcp_output_segment+0x1a0>)
 800f544:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f548:	495b      	ldr	r1, [pc, #364]	; (800f6b8 <tcp_output_segment+0x1b0>)
 800f54a:	4859      	ldr	r0, [pc, #356]	; (800f6b0 <tcp_output_segment+0x1a8>)
 800f54c:	f003 ff26 	bl	801339c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f7ff ffb9 	bl	800f4c8 <tcp_output_segment_busy>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d001      	beq.n	800f560 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f55c:	2300      	movs	r3, #0
 800f55e:	e09f      	b.n	800f6a0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	68dc      	ldr	r4, [r3, #12]
 800f568:	4610      	mov	r0, r2
 800f56a:	f7f9 fe04 	bl	8009176 <lwip_htonl>
 800f56e:	4603      	mov	r3, r0
 800f570:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	68dc      	ldr	r4, [r3, #12]
 800f57a:	4610      	mov	r0, r2
 800f57c:	f7f9 fde6 	bl	800914c <lwip_htons>
 800f580:	4603      	mov	r3, r0
 800f582:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f588:	68ba      	ldr	r2, [r7, #8]
 800f58a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f58c:	441a      	add	r2, r3
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	3314      	adds	r3, #20
 800f598:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	7a9b      	ldrb	r3, [r3, #10]
 800f59e:	f003 0301 	and.w	r3, r3, #1
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d015      	beq.n	800f5d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	6879      	ldr	r1, [r7, #4]
 800f5ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f5b2:	f7fc fe8b 	bl	800c2cc <tcp_eff_send_mss_netif>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f5ba:	8b7b      	ldrh	r3, [r7, #26]
 800f5bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7f9 fdd8 	bl	8009176 <lwip_htonl>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	3304      	adds	r3, #4
 800f5d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	da02      	bge.n	800f5e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10c      	bne.n	800f604 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f5ea:	4b34      	ldr	r3, [pc, #208]	; (800f6bc <tcp_output_segment+0x1b4>)
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7f9 fdbc 	bl	8009176 <lwip_htonl>
 800f5fe:	4602      	mov	r2, r0
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	68da      	ldr	r2, [r3, #12]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	8959      	ldrh	r1, [r3, #10]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	8b3a      	ldrh	r2, [r7, #24]
 800f61e:	1a8a      	subs	r2, r1, r2
 800f620:	b292      	uxth	r2, r2
 800f622:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	8919      	ldrh	r1, [r3, #8]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	8b3a      	ldrh	r2, [r7, #24]
 800f630:	1a8a      	subs	r2, r1, r2
 800f632:	b292      	uxth	r2, r2
 800f634:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	68d2      	ldr	r2, [r2, #12]
 800f63e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	2200      	movs	r2, #0
 800f646:	741a      	strb	r2, [r3, #16]
 800f648:	2200      	movs	r2, #0
 800f64a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	f103 0214 	add.w	r2, r3, #20
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	7a9b      	ldrb	r3, [r3, #10]
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	f003 0304 	and.w	r3, r3, #4
 800f65e:	4413      	add	r3, r2
 800f660:	69fa      	ldr	r2, [r7, #28]
 800f662:	429a      	cmp	r2, r3
 800f664:	d006      	beq.n	800f674 <tcp_output_segment+0x16c>
 800f666:	4b10      	ldr	r3, [pc, #64]	; (800f6a8 <tcp_output_segment+0x1a0>)
 800f668:	f240 621c 	movw	r2, #1564	; 0x61c
 800f66c:	4914      	ldr	r1, [pc, #80]	; (800f6c0 <tcp_output_segment+0x1b8>)
 800f66e:	4810      	ldr	r0, [pc, #64]	; (800f6b0 <tcp_output_segment+0x1a8>)
 800f670:	f003 fe94 	bl	801339c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6858      	ldr	r0, [r3, #4]
 800f678:	68b9      	ldr	r1, [r7, #8]
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	1d1c      	adds	r4, r3, #4
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	7add      	ldrb	r5, [r3, #11]
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	7a9b      	ldrb	r3, [r3, #10]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	9202      	str	r2, [sp, #8]
 800f68a:	2206      	movs	r2, #6
 800f68c:	9201      	str	r2, [sp, #4]
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	462b      	mov	r3, r5
 800f692:	4622      	mov	r2, r4
 800f694:	f002 fdf0 	bl	8012278 <ip4_output_if>
 800f698:	4603      	mov	r3, r0
 800f69a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f69c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3720      	adds	r7, #32
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bdb0      	pop	{r4, r5, r7, pc}
 800f6a8:	08015e9c 	.word	0x08015e9c
 800f6ac:	08016460 	.word	0x08016460
 800f6b0:	08015ef0 	.word	0x08015ef0
 800f6b4:	08016480 	.word	0x08016480
 800f6b8:	080164a0 	.word	0x080164a0
 800f6bc:	20008eb4 	.word	0x20008eb4
 800f6c0:	080164c4 	.word	0x080164c4

0800f6c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f6c4:	b5b0      	push	{r4, r5, r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d106      	bne.n	800f6e0 <tcp_rexmit_rto_prepare+0x1c>
 800f6d2:	4b31      	ldr	r3, [pc, #196]	; (800f798 <tcp_rexmit_rto_prepare+0xd4>)
 800f6d4:	f240 6263 	movw	r2, #1635	; 0x663
 800f6d8:	4930      	ldr	r1, [pc, #192]	; (800f79c <tcp_rexmit_rto_prepare+0xd8>)
 800f6da:	4831      	ldr	r0, [pc, #196]	; (800f7a0 <tcp_rexmit_rto_prepare+0xdc>)
 800f6dc:	f003 fe5e 	bl	801339c <iprintf>

  if (pcb->unacked == NULL) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d102      	bne.n	800f6ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f6e8:	f06f 0305 	mvn.w	r3, #5
 800f6ec:	e050      	b.n	800f790 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	e00b      	b.n	800f70e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	f7ff fee6 	bl	800f4c8 <tcp_output_segment_busy>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d002      	beq.n	800f708 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f702:	f06f 0305 	mvn.w	r3, #5
 800f706:	e043      	b.n	800f790 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1ef      	bne.n	800f6f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f7ff fed6 	bl	800f4c8 <tcp_output_segment_busy>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d002      	beq.n	800f728 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f722:	f06f 0305 	mvn.w	r3, #5
 800f726:	e033      	b.n	800f790 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	8b5b      	ldrh	r3, [r3, #26]
 800f742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f746:	b29a      	uxth	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	68db      	ldr	r3, [r3, #12]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	4618      	mov	r0, r3
 800f754:	f7f9 fd0f 	bl	8009176 <lwip_htonl>
 800f758:	4604      	mov	r4, r0
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	891b      	ldrh	r3, [r3, #8]
 800f75e:	461d      	mov	r5, r3
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	899b      	ldrh	r3, [r3, #12]
 800f766:	b29b      	uxth	r3, r3
 800f768:	4618      	mov	r0, r3
 800f76a:	f7f9 fcef 	bl	800914c <lwip_htons>
 800f76e:	4603      	mov	r3, r0
 800f770:	b2db      	uxtb	r3, r3
 800f772:	f003 0303 	and.w	r3, r3, #3
 800f776:	2b00      	cmp	r3, #0
 800f778:	d001      	beq.n	800f77e <tcp_rexmit_rto_prepare+0xba>
 800f77a:	2301      	movs	r3, #1
 800f77c:	e000      	b.n	800f780 <tcp_rexmit_rto_prepare+0xbc>
 800f77e:	2300      	movs	r3, #0
 800f780:	442b      	add	r3, r5
 800f782:	18e2      	adds	r2, r4, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3710      	adds	r7, #16
 800f794:	46bd      	mov	sp, r7
 800f796:	bdb0      	pop	{r4, r5, r7, pc}
 800f798:	08015e9c 	.word	0x08015e9c
 800f79c:	080164d8 	.word	0x080164d8
 800f7a0:	08015ef0 	.word	0x08015ef0

0800f7a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d106      	bne.n	800f7c0 <tcp_rexmit_rto_commit+0x1c>
 800f7b2:	4b0d      	ldr	r3, [pc, #52]	; (800f7e8 <tcp_rexmit_rto_commit+0x44>)
 800f7b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f7b8:	490c      	ldr	r1, [pc, #48]	; (800f7ec <tcp_rexmit_rto_commit+0x48>)
 800f7ba:	480d      	ldr	r0, [pc, #52]	; (800f7f0 <tcp_rexmit_rto_commit+0x4c>)
 800f7bc:	f003 fdee 	bl	801339c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7c6:	2bff      	cmp	r3, #255	; 0xff
 800f7c8:	d007      	beq.n	800f7da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	b2da      	uxtb	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f7ff fc80 	bl	800f0e0 <tcp_output>
}
 800f7e0:	bf00      	nop
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	08015e9c 	.word	0x08015e9c
 800f7ec:	080164fc 	.word	0x080164fc
 800f7f0:	08015ef0 	.word	0x08015ef0

0800f7f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <tcp_rexmit_rto+0x1c>
 800f802:	4b0a      	ldr	r3, [pc, #40]	; (800f82c <tcp_rexmit_rto+0x38>)
 800f804:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f808:	4909      	ldr	r1, [pc, #36]	; (800f830 <tcp_rexmit_rto+0x3c>)
 800f80a:	480a      	ldr	r0, [pc, #40]	; (800f834 <tcp_rexmit_rto+0x40>)
 800f80c:	f003 fdc6 	bl	801339c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7ff ff57 	bl	800f6c4 <tcp_rexmit_rto_prepare>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d102      	bne.n	800f822 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7ff ffc1 	bl	800f7a4 <tcp_rexmit_rto_commit>
  }
}
 800f822:	bf00      	nop
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	08015e9c 	.word	0x08015e9c
 800f830:	08016520 	.word	0x08016520
 800f834:	08015ef0 	.word	0x08015ef0

0800f838 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f838:	b590      	push	{r4, r7, lr}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d106      	bne.n	800f854 <tcp_rexmit+0x1c>
 800f846:	4b2f      	ldr	r3, [pc, #188]	; (800f904 <tcp_rexmit+0xcc>)
 800f848:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f84c:	492e      	ldr	r1, [pc, #184]	; (800f908 <tcp_rexmit+0xd0>)
 800f84e:	482f      	ldr	r0, [pc, #188]	; (800f90c <tcp_rexmit+0xd4>)
 800f850:	f003 fda4 	bl	801339c <iprintf>

  if (pcb->unacked == NULL) {
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d102      	bne.n	800f862 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f85c:	f06f 0305 	mvn.w	r3, #5
 800f860:	e04c      	b.n	800f8fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f866:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f868:	68b8      	ldr	r0, [r7, #8]
 800f86a:	f7ff fe2d 	bl	800f4c8 <tcp_output_segment_busy>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d002      	beq.n	800f87a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f874:	f06f 0305 	mvn.w	r3, #5
 800f878:	e040      	b.n	800f8fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	336c      	adds	r3, #108	; 0x6c
 800f886:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f888:	e002      	b.n	800f890 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d011      	beq.n	800f8bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7f9 fc68 	bl	8009176 <lwip_htonl>
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7f9 fc61 	bl	8009176 <lwip_htonl>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dbe6      	blt.n	800f88a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	68ba      	ldr	r2, [r7, #8]
 800f8c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d103      	bne.n	800f8da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8e0:	2bff      	cmp	r3, #255	; 0xff
 800f8e2:	d007      	beq.n	800f8f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	b2da      	uxtb	r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3714      	adds	r7, #20
 800f900:	46bd      	mov	sp, r7
 800f902:	bd90      	pop	{r4, r7, pc}
 800f904:	08015e9c 	.word	0x08015e9c
 800f908:	0801653c 	.word	0x0801653c
 800f90c:	08015ef0 	.word	0x08015ef0

0800f910 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d106      	bne.n	800f92c <tcp_rexmit_fast+0x1c>
 800f91e:	4b2a      	ldr	r3, [pc, #168]	; (800f9c8 <tcp_rexmit_fast+0xb8>)
 800f920:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f924:	4929      	ldr	r1, [pc, #164]	; (800f9cc <tcp_rexmit_fast+0xbc>)
 800f926:	482a      	ldr	r0, [pc, #168]	; (800f9d0 <tcp_rexmit_fast+0xc0>)
 800f928:	f003 fd38 	bl	801339c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f930:	2b00      	cmp	r3, #0
 800f932:	d044      	beq.n	800f9be <tcp_rexmit_fast+0xae>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	8b5b      	ldrh	r3, [r3, #26]
 800f938:	f003 0304 	and.w	r3, r3, #4
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d13e      	bne.n	800f9be <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff ff79 	bl	800f838 <tcp_rexmit>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d138      	bne.n	800f9be <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f958:	4293      	cmp	r3, r2
 800f95a:	bf28      	it	cs
 800f95c:	4613      	movcs	r3, r2
 800f95e:	b29b      	uxth	r3, r3
 800f960:	0fda      	lsrs	r2, r3, #31
 800f962:	4413      	add	r3, r2
 800f964:	105b      	asrs	r3, r3, #1
 800f966:	b29a      	uxth	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f974:	461a      	mov	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f97a:	005b      	lsls	r3, r3, #1
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d206      	bcs.n	800f98e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f984:	005b      	lsls	r3, r3, #1
 800f986:	b29a      	uxth	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f998:	4619      	mov	r1, r3
 800f99a:	0049      	lsls	r1, r1, #1
 800f99c:	440b      	add	r3, r1
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	4413      	add	r3, r2
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	8b5b      	ldrh	r3, [r3, #26]
 800f9ae:	f043 0304 	orr.w	r3, r3, #4
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f9be:	bf00      	nop
 800f9c0:	3708      	adds	r7, #8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	08015e9c 	.word	0x08015e9c
 800f9cc:	08016554 	.word	0x08016554
 800f9d0:	08015ef0 	.word	0x08015ef0

0800f9d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b086      	sub	sp, #24
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	607b      	str	r3, [r7, #4]
 800f9de:	460b      	mov	r3, r1
 800f9e0:	817b      	strh	r3, [r7, #10]
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f9e6:	897a      	ldrh	r2, [r7, #10]
 800f9e8:	893b      	ldrh	r3, [r7, #8]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	3314      	adds	r3, #20
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	2022      	movs	r0, #34	; 0x22
 800f9fa:	f7fa fb77 	bl	800a0ec <pbuf_alloc>
 800f9fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d04d      	beq.n	800faa2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fa06:	897b      	ldrh	r3, [r7, #10]
 800fa08:	3313      	adds	r3, #19
 800fa0a:	697a      	ldr	r2, [r7, #20]
 800fa0c:	8952      	ldrh	r2, [r2, #10]
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	db06      	blt.n	800fa20 <tcp_output_alloc_header_common+0x4c>
 800fa12:	4b26      	ldr	r3, [pc, #152]	; (800faac <tcp_output_alloc_header_common+0xd8>)
 800fa14:	f240 7223 	movw	r2, #1827	; 0x723
 800fa18:	4925      	ldr	r1, [pc, #148]	; (800fab0 <tcp_output_alloc_header_common+0xdc>)
 800fa1a:	4826      	ldr	r0, [pc, #152]	; (800fab4 <tcp_output_alloc_header_common+0xe0>)
 800fa1c:	f003 fcbe 	bl	801339c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fa26:	8c3b      	ldrh	r3, [r7, #32]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7f9 fb8f 	bl	800914c <lwip_htons>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	461a      	mov	r2, r3
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fa36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7f9 fb87 	bl	800914c <lwip_htons>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	461a      	mov	r2, r3
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f7f9 fb92 	bl	8009176 <lwip_htonl>
 800fa52:	4602      	mov	r2, r0
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fa58:	897b      	ldrh	r3, [r7, #10]
 800fa5a:	089b      	lsrs	r3, r3, #2
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	3305      	adds	r3, #5
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	031b      	lsls	r3, r3, #12
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7f9 fb6b 	bl	800914c <lwip_htons>
 800fa76:	4603      	mov	r3, r0
 800fa78:	461a      	mov	r2, r3
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fa7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7f9 fb63 	bl	800914c <lwip_htons>
 800fa86:	4603      	mov	r3, r0
 800fa88:	461a      	mov	r2, r3
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	2200      	movs	r2, #0
 800fa92:	741a      	strb	r2, [r3, #16]
 800fa94:	2200      	movs	r2, #0
 800fa96:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	749a      	strb	r2, [r3, #18]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800faa2:	697b      	ldr	r3, [r7, #20]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3718      	adds	r7, #24
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	08015e9c 	.word	0x08015e9c
 800fab0:	08016574 	.word	0x08016574
 800fab4:	08015ef0 	.word	0x08015ef0

0800fab8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fab8:	b5b0      	push	{r4, r5, r7, lr}
 800faba:	b08a      	sub	sp, #40	; 0x28
 800fabc:	af04      	add	r7, sp, #16
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	607b      	str	r3, [r7, #4]
 800fac2:	460b      	mov	r3, r1
 800fac4:	817b      	strh	r3, [r7, #10]
 800fac6:	4613      	mov	r3, r2
 800fac8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d106      	bne.n	800fade <tcp_output_alloc_header+0x26>
 800fad0:	4b15      	ldr	r3, [pc, #84]	; (800fb28 <tcp_output_alloc_header+0x70>)
 800fad2:	f240 7242 	movw	r2, #1858	; 0x742
 800fad6:	4915      	ldr	r1, [pc, #84]	; (800fb2c <tcp_output_alloc_header+0x74>)
 800fad8:	4815      	ldr	r0, [pc, #84]	; (800fb30 <tcp_output_alloc_header+0x78>)
 800fada:	f003 fc5f 	bl	801339c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	8adb      	ldrh	r3, [r3, #22]
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	8b12      	ldrh	r2, [r2, #24]
 800faea:	68f9      	ldr	r1, [r7, #12]
 800faec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800faee:	893d      	ldrh	r5, [r7, #8]
 800faf0:	897c      	ldrh	r4, [r7, #10]
 800faf2:	9103      	str	r1, [sp, #12]
 800faf4:	2110      	movs	r1, #16
 800faf6:	9102      	str	r1, [sp, #8]
 800faf8:	9201      	str	r2, [sp, #4]
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	462a      	mov	r2, r5
 800fb00:	4621      	mov	r1, r4
 800fb02:	f7ff ff67 	bl	800f9d4 <tcp_output_alloc_header_common>
 800fb06:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d006      	beq.n	800fb1c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fb16:	441a      	add	r2, r3
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fb1c:	697b      	ldr	r3, [r7, #20]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3718      	adds	r7, #24
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bdb0      	pop	{r4, r5, r7, pc}
 800fb26:	bf00      	nop
 800fb28:	08015e9c 	.word	0x08015e9c
 800fb2c:	080165a4 	.word	0x080165a4
 800fb30:	08015ef0 	.word	0x08015ef0

0800fb34 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b088      	sub	sp, #32
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	4611      	mov	r1, r2
 800fb40:	461a      	mov	r2, r3
 800fb42:	460b      	mov	r3, r1
 800fb44:	71fb      	strb	r3, [r7, #7]
 800fb46:	4613      	mov	r3, r2
 800fb48:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d106      	bne.n	800fb62 <tcp_output_fill_options+0x2e>
 800fb54:	4b13      	ldr	r3, [pc, #76]	; (800fba4 <tcp_output_fill_options+0x70>)
 800fb56:	f240 7256 	movw	r2, #1878	; 0x756
 800fb5a:	4913      	ldr	r1, [pc, #76]	; (800fba8 <tcp_output_fill_options+0x74>)
 800fb5c:	4813      	ldr	r0, [pc, #76]	; (800fbac <tcp_output_fill_options+0x78>)
 800fb5e:	f003 fc1d 	bl	801339c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fb68:	69bb      	ldr	r3, [r7, #24]
 800fb6a:	3314      	adds	r3, #20
 800fb6c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	f103 0214 	add.w	r2, r3, #20
 800fb74:	8bfb      	ldrh	r3, [r7, #30]
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4619      	mov	r1, r3
 800fb7a:	79fb      	ldrb	r3, [r7, #7]
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	f003 0304 	and.w	r3, r3, #4
 800fb82:	440b      	add	r3, r1
 800fb84:	4413      	add	r3, r2
 800fb86:	697a      	ldr	r2, [r7, #20]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d006      	beq.n	800fb9a <tcp_output_fill_options+0x66>
 800fb8c:	4b05      	ldr	r3, [pc, #20]	; (800fba4 <tcp_output_fill_options+0x70>)
 800fb8e:	f240 7275 	movw	r2, #1909	; 0x775
 800fb92:	4907      	ldr	r1, [pc, #28]	; (800fbb0 <tcp_output_fill_options+0x7c>)
 800fb94:	4805      	ldr	r0, [pc, #20]	; (800fbac <tcp_output_fill_options+0x78>)
 800fb96:	f003 fc01 	bl	801339c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fb9a:	bf00      	nop
 800fb9c:	3720      	adds	r7, #32
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	08015e9c 	.word	0x08015e9c
 800fba8:	080165cc 	.word	0x080165cc
 800fbac:	08015ef0 	.word	0x08015ef0
 800fbb0:	080164c4 	.word	0x080164c4

0800fbb4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b08a      	sub	sp, #40	; 0x28
 800fbb8:	af04      	add	r7, sp, #16
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]
 800fbc0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d106      	bne.n	800fbd6 <tcp_output_control_segment+0x22>
 800fbc8:	4b1c      	ldr	r3, [pc, #112]	; (800fc3c <tcp_output_control_segment+0x88>)
 800fbca:	f240 7287 	movw	r2, #1927	; 0x787
 800fbce:	491c      	ldr	r1, [pc, #112]	; (800fc40 <tcp_output_control_segment+0x8c>)
 800fbd0:	481c      	ldr	r0, [pc, #112]	; (800fc44 <tcp_output_control_segment+0x90>)
 800fbd2:	f003 fbe3 	bl	801339c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fbd6:	683a      	ldr	r2, [r7, #0]
 800fbd8:	6879      	ldr	r1, [r7, #4]
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	f7fe ff40 	bl	800ea60 <tcp_route>
 800fbe0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d102      	bne.n	800fbee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fbe8:	23fc      	movs	r3, #252	; 0xfc
 800fbea:	75fb      	strb	r3, [r7, #23]
 800fbec:	e01c      	b.n	800fc28 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d006      	beq.n	800fc02 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	7adb      	ldrb	r3, [r3, #11]
 800fbf8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	7a9b      	ldrb	r3, [r3, #10]
 800fbfe:	757b      	strb	r3, [r7, #21]
 800fc00:	e003      	b.n	800fc0a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fc02:	23ff      	movs	r3, #255	; 0xff
 800fc04:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fc06:	2300      	movs	r3, #0
 800fc08:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fc0a:	7dba      	ldrb	r2, [r7, #22]
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	9302      	str	r3, [sp, #8]
 800fc10:	2306      	movs	r3, #6
 800fc12:	9301      	str	r3, [sp, #4]
 800fc14:	7d7b      	ldrb	r3, [r7, #21]
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	683a      	ldr	r2, [r7, #0]
 800fc1c:	6879      	ldr	r1, [r7, #4]
 800fc1e:	68b8      	ldr	r0, [r7, #8]
 800fc20:	f002 fb2a 	bl	8012278 <ip4_output_if>
 800fc24:	4603      	mov	r3, r0
 800fc26:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fc28:	68b8      	ldr	r0, [r7, #8]
 800fc2a:	f7fa fd43 	bl	800a6b4 <pbuf_free>
  return err;
 800fc2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3718      	adds	r7, #24
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	08015e9c 	.word	0x08015e9c
 800fc40:	080165f4 	.word	0x080165f4
 800fc44:	08015ef0 	.word	0x08015ef0

0800fc48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fc48:	b590      	push	{r4, r7, lr}
 800fc4a:	b08b      	sub	sp, #44	; 0x2c
 800fc4c:	af04      	add	r7, sp, #16
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
 800fc54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d106      	bne.n	800fc6a <tcp_rst+0x22>
 800fc5c:	4b1f      	ldr	r3, [pc, #124]	; (800fcdc <tcp_rst+0x94>)
 800fc5e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fc62:	491f      	ldr	r1, [pc, #124]	; (800fce0 <tcp_rst+0x98>)
 800fc64:	481f      	ldr	r0, [pc, #124]	; (800fce4 <tcp_rst+0x9c>)
 800fc66:	f003 fb99 	bl	801339c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <tcp_rst+0x36>
 800fc70:	4b1a      	ldr	r3, [pc, #104]	; (800fcdc <tcp_rst+0x94>)
 800fc72:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fc76:	491c      	ldr	r1, [pc, #112]	; (800fce8 <tcp_rst+0xa0>)
 800fc78:	481a      	ldr	r0, [pc, #104]	; (800fce4 <tcp_rst+0x9c>)
 800fc7a:	f003 fb8f 	bl	801339c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fc7e:	2300      	movs	r3, #0
 800fc80:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fc82:	f246 0308 	movw	r3, #24584	; 0x6008
 800fc86:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fc88:	7dfb      	ldrb	r3, [r7, #23]
 800fc8a:	b29c      	uxth	r4, r3
 800fc8c:	68b8      	ldr	r0, [r7, #8]
 800fc8e:	f7f9 fa72 	bl	8009176 <lwip_htonl>
 800fc92:	4602      	mov	r2, r0
 800fc94:	8abb      	ldrh	r3, [r7, #20]
 800fc96:	9303      	str	r3, [sp, #12]
 800fc98:	2314      	movs	r3, #20
 800fc9a:	9302      	str	r3, [sp, #8]
 800fc9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fc9e:	9301      	str	r3, [sp, #4]
 800fca0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	4613      	mov	r3, r2
 800fca6:	2200      	movs	r2, #0
 800fca8:	4621      	mov	r1, r4
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f7ff fe92 	bl	800f9d4 <tcp_output_alloc_header_common>
 800fcb0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d00c      	beq.n	800fcd2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fcb8:	7dfb      	ldrb	r3, [r7, #23]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	6939      	ldr	r1, [r7, #16]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f7ff ff38 	bl	800fb34 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc6:	683a      	ldr	r2, [r7, #0]
 800fcc8:	6939      	ldr	r1, [r7, #16]
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f7ff ff72 	bl	800fbb4 <tcp_output_control_segment>
 800fcd0:	e000      	b.n	800fcd4 <tcp_rst+0x8c>
    return;
 800fcd2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fcd4:	371c      	adds	r7, #28
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd90      	pop	{r4, r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	08015e9c 	.word	0x08015e9c
 800fce0:	08016620 	.word	0x08016620
 800fce4:	08015ef0 	.word	0x08015ef0
 800fce8:	0801663c 	.word	0x0801663c

0800fcec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fcec:	b590      	push	{r4, r7, lr}
 800fcee:	b087      	sub	sp, #28
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d106      	bne.n	800fd10 <tcp_send_empty_ack+0x24>
 800fd02:	4b28      	ldr	r3, [pc, #160]	; (800fda4 <tcp_send_empty_ack+0xb8>)
 800fd04:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fd08:	4927      	ldr	r1, [pc, #156]	; (800fda8 <tcp_send_empty_ack+0xbc>)
 800fd0a:	4828      	ldr	r0, [pc, #160]	; (800fdac <tcp_send_empty_ack+0xc0>)
 800fd0c:	f003 fb46 	bl	801339c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd10:	7dfb      	ldrb	r3, [r7, #23]
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	f003 0304 	and.w	r3, r3, #4
 800fd1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fd1c:	7d7b      	ldrb	r3, [r7, #21]
 800fd1e:	b29c      	uxth	r4, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f9 fa26 	bl	8009176 <lwip_htonl>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	4621      	mov	r1, r4
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7ff fec1 	bl	800fab8 <tcp_output_alloc_header>
 800fd36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d109      	bne.n	800fd52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	8b5b      	ldrh	r3, [r3, #26]
 800fd42:	f043 0303 	orr.w	r3, r3, #3
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fd4c:	f06f 0301 	mvn.w	r3, #1
 800fd50:	e023      	b.n	800fd9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fd52:	7dbb      	ldrb	r3, [r7, #22]
 800fd54:	7dfa      	ldrb	r2, [r7, #23]
 800fd56:	6939      	ldr	r1, [r7, #16]
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff feeb 	bl	800fb34 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	3304      	adds	r3, #4
 800fd64:	6939      	ldr	r1, [r7, #16]
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f7ff ff24 	bl	800fbb4 <tcp_output_control_segment>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d007      	beq.n	800fd88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	8b5b      	ldrh	r3, [r3, #26]
 800fd7c:	f043 0303 	orr.w	r3, r3, #3
 800fd80:	b29a      	uxth	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	835a      	strh	r2, [r3, #26]
 800fd86:	e006      	b.n	800fd96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	8b5b      	ldrh	r3, [r3, #26]
 800fd8c:	f023 0303 	bic.w	r3, r3, #3
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fd96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	371c      	adds	r7, #28
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd90      	pop	{r4, r7, pc}
 800fda2:	bf00      	nop
 800fda4:	08015e9c 	.word	0x08015e9c
 800fda8:	08016658 	.word	0x08016658
 800fdac:	08015ef0 	.word	0x08015ef0

0800fdb0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fdb0:	b590      	push	{r4, r7, lr}
 800fdb2:	b087      	sub	sp, #28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fdb8:	2300      	movs	r3, #0
 800fdba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d106      	bne.n	800fdd0 <tcp_keepalive+0x20>
 800fdc2:	4b18      	ldr	r3, [pc, #96]	; (800fe24 <tcp_keepalive+0x74>)
 800fdc4:	f640 0224 	movw	r2, #2084	; 0x824
 800fdc8:	4917      	ldr	r1, [pc, #92]	; (800fe28 <tcp_keepalive+0x78>)
 800fdca:	4818      	ldr	r0, [pc, #96]	; (800fe2c <tcp_keepalive+0x7c>)
 800fdcc:	f003 fae6 	bl	801339c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fdd0:	7dfb      	ldrb	r3, [r7, #23]
 800fdd2:	b29c      	uxth	r4, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7f9 f9cb 	bl	8009176 <lwip_htonl>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2200      	movs	r2, #0
 800fde4:	4621      	mov	r1, r4
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f7ff fe66 	bl	800fab8 <tcp_output_alloc_header>
 800fdec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d102      	bne.n	800fdfa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800fdf8:	e010      	b.n	800fe1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fdfa:	7dfb      	ldrb	r3, [r7, #23]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	6939      	ldr	r1, [r7, #16]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f7ff fe97 	bl	800fb34 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	6939      	ldr	r1, [r7, #16]
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7ff fed0 	bl	800fbb4 <tcp_output_control_segment>
 800fe14:	4603      	mov	r3, r0
 800fe16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fe18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	371c      	adds	r7, #28
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd90      	pop	{r4, r7, pc}
 800fe24:	08015e9c 	.word	0x08015e9c
 800fe28:	08016678 	.word	0x08016678
 800fe2c:	08015ef0 	.word	0x08015ef0

0800fe30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fe30:	b590      	push	{r4, r7, lr}
 800fe32:	b08b      	sub	sp, #44	; 0x2c
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fe38:	2300      	movs	r3, #0
 800fe3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d106      	bne.n	800fe52 <tcp_zero_window_probe+0x22>
 800fe44:	4b4c      	ldr	r3, [pc, #304]	; (800ff78 <tcp_zero_window_probe+0x148>)
 800fe46:	f640 024f 	movw	r2, #2127	; 0x84f
 800fe4a:	494c      	ldr	r1, [pc, #304]	; (800ff7c <tcp_zero_window_probe+0x14c>)
 800fe4c:	484c      	ldr	r0, [pc, #304]	; (800ff80 <tcp_zero_window_probe+0x150>)
 800fe4e:	f003 faa5 	bl	801339c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fe58:	6a3b      	ldr	r3, [r7, #32]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d101      	bne.n	800fe62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	e086      	b.n	800ff70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fe68:	2bff      	cmp	r3, #255	; 0xff
 800fe6a:	d007      	beq.n	800fe7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fe72:	3301      	adds	r3, #1
 800fe74:	b2da      	uxtb	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	899b      	ldrh	r3, [r3, #12]
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7f9 f961 	bl	800914c <lwip_htons>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	f003 0301 	and.w	r3, r3, #1
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d005      	beq.n	800fea2 <tcp_zero_window_probe+0x72>
 800fe96:	6a3b      	ldr	r3, [r7, #32]
 800fe98:	891b      	ldrh	r3, [r3, #8]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d101      	bne.n	800fea2 <tcp_zero_window_probe+0x72>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e000      	b.n	800fea4 <tcp_zero_window_probe+0x74>
 800fea2:	2300      	movs	r3, #0
 800fea4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fea6:	7ffb      	ldrb	r3, [r7, #31]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	bf0c      	ite	eq
 800feac:	2301      	moveq	r3, #1
 800feae:	2300      	movne	r3, #0
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800feb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feb8:	b299      	uxth	r1, r3
 800feba:	6a3b      	ldr	r3, [r7, #32]
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	8bba      	ldrh	r2, [r7, #28]
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7ff fdf8 	bl	800fab8 <tcp_output_alloc_header>
 800fec8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d102      	bne.n	800fed6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fed0:	f04f 33ff 	mov.w	r3, #4294967295
 800fed4:	e04c      	b.n	800ff70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fedc:	7ffb      	ldrb	r3, [r7, #31]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d011      	beq.n	800ff06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	899b      	ldrh	r3, [r3, #12]
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	b21b      	sxth	r3, r3
 800feea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800feee:	b21c      	sxth	r4, r3
 800fef0:	2011      	movs	r0, #17
 800fef2:	f7f9 f92b 	bl	800914c <lwip_htons>
 800fef6:	4603      	mov	r3, r0
 800fef8:	b21b      	sxth	r3, r3
 800fefa:	4323      	orrs	r3, r4
 800fefc:	b21b      	sxth	r3, r3
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	819a      	strh	r2, [r3, #12]
 800ff04:	e010      	b.n	800ff28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	3314      	adds	r3, #20
 800ff0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ff0e:	6a3b      	ldr	r3, [r7, #32]
 800ff10:	6858      	ldr	r0, [r3, #4]
 800ff12:	6a3b      	ldr	r3, [r7, #32]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	891a      	ldrh	r2, [r3, #8]
 800ff18:	6a3b      	ldr	r3, [r7, #32]
 800ff1a:	891b      	ldrh	r3, [r3, #8]
 800ff1c:	1ad3      	subs	r3, r2, r3
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	2201      	movs	r2, #1
 800ff22:	6939      	ldr	r1, [r7, #16]
 800ff24:	f7fa fdc0 	bl	800aaa8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ff28:	6a3b      	ldr	r3, [r7, #32]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7f9 f921 	bl	8009176 <lwip_htonl>
 800ff34:	4603      	mov	r3, r0
 800ff36:	3301      	adds	r3, #1
 800ff38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	da02      	bge.n	800ff4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ff4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff50:	2200      	movs	r2, #0
 800ff52:	69b9      	ldr	r1, [r7, #24]
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7ff fded 	bl	800fb34 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	3304      	adds	r3, #4
 800ff60:	69b9      	ldr	r1, [r7, #24]
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7ff fe26 	bl	800fbb4 <tcp_output_control_segment>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ff6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	372c      	adds	r7, #44	; 0x2c
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd90      	pop	{r4, r7, pc}
 800ff78:	08015e9c 	.word	0x08015e9c
 800ff7c:	08016694 	.word	0x08016694
 800ff80:	08015ef0 	.word	0x08015ef0

0800ff84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ff8c:	f7fa ff0c 	bl	800ada8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ff90:	4b0a      	ldr	r3, [pc, #40]	; (800ffbc <tcpip_tcp_timer+0x38>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d103      	bne.n	800ffa0 <tcpip_tcp_timer+0x1c>
 800ff98:	4b09      	ldr	r3, [pc, #36]	; (800ffc0 <tcpip_tcp_timer+0x3c>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d005      	beq.n	800ffac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	4908      	ldr	r1, [pc, #32]	; (800ffc4 <tcpip_tcp_timer+0x40>)
 800ffa4:	20fa      	movs	r0, #250	; 0xfa
 800ffa6:	f000 f8f3 	bl	8010190 <sys_timeout>
 800ffaa:	e003      	b.n	800ffb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ffac:	4b06      	ldr	r3, [pc, #24]	; (800ffc8 <tcpip_tcp_timer+0x44>)
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]
  }
}
 800ffb2:	bf00      	nop
 800ffb4:	bf00      	nop
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	20008ec0 	.word	0x20008ec0
 800ffc0:	20008ec4 	.word	0x20008ec4
 800ffc4:	0800ff85 	.word	0x0800ff85
 800ffc8:	20008f0c 	.word	0x20008f0c

0800ffcc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ffd0:	4b0a      	ldr	r3, [pc, #40]	; (800fffc <tcp_timer_needed+0x30>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d10f      	bne.n	800fff8 <tcp_timer_needed+0x2c>
 800ffd8:	4b09      	ldr	r3, [pc, #36]	; (8010000 <tcp_timer_needed+0x34>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d103      	bne.n	800ffe8 <tcp_timer_needed+0x1c>
 800ffe0:	4b08      	ldr	r3, [pc, #32]	; (8010004 <tcp_timer_needed+0x38>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d007      	beq.n	800fff8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ffe8:	4b04      	ldr	r3, [pc, #16]	; (800fffc <tcp_timer_needed+0x30>)
 800ffea:	2201      	movs	r2, #1
 800ffec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ffee:	2200      	movs	r2, #0
 800fff0:	4905      	ldr	r1, [pc, #20]	; (8010008 <tcp_timer_needed+0x3c>)
 800fff2:	20fa      	movs	r0, #250	; 0xfa
 800fff4:	f000 f8cc 	bl	8010190 <sys_timeout>
  }
}
 800fff8:	bf00      	nop
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	20008f0c 	.word	0x20008f0c
 8010000:	20008ec0 	.word	0x20008ec0
 8010004:	20008ec4 	.word	0x20008ec4
 8010008:	0800ff85 	.word	0x0800ff85

0801000c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010018:	2006      	movs	r0, #6
 801001a:	f7f9 fced 	bl	80099f8 <memp_malloc>
 801001e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d109      	bne.n	801003a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d151      	bne.n	80100d0 <sys_timeout_abs+0xc4>
 801002c:	4b2a      	ldr	r3, [pc, #168]	; (80100d8 <sys_timeout_abs+0xcc>)
 801002e:	22be      	movs	r2, #190	; 0xbe
 8010030:	492a      	ldr	r1, [pc, #168]	; (80100dc <sys_timeout_abs+0xd0>)
 8010032:	482b      	ldr	r0, [pc, #172]	; (80100e0 <sys_timeout_abs+0xd4>)
 8010034:	f003 f9b2 	bl	801339c <iprintf>
    return;
 8010038:	e04a      	b.n	80100d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	2200      	movs	r2, #0
 801003e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010052:	4b24      	ldr	r3, [pc, #144]	; (80100e4 <sys_timeout_abs+0xd8>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d103      	bne.n	8010062 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801005a:	4a22      	ldr	r2, [pc, #136]	; (80100e4 <sys_timeout_abs+0xd8>)
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	6013      	str	r3, [r2, #0]
    return;
 8010060:	e037      	b.n	80100d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	685a      	ldr	r2, [r3, #4]
 8010066:	4b1f      	ldr	r3, [pc, #124]	; (80100e4 <sys_timeout_abs+0xd8>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	0fdb      	lsrs	r3, r3, #31
 8010070:	f003 0301 	and.w	r3, r3, #1
 8010074:	b2db      	uxtb	r3, r3
 8010076:	2b00      	cmp	r3, #0
 8010078:	d007      	beq.n	801008a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801007a:	4b1a      	ldr	r3, [pc, #104]	; (80100e4 <sys_timeout_abs+0xd8>)
 801007c:	681a      	ldr	r2, [r3, #0]
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010082:	4a18      	ldr	r2, [pc, #96]	; (80100e4 <sys_timeout_abs+0xd8>)
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	6013      	str	r3, [r2, #0]
 8010088:	e023      	b.n	80100d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801008a:	4b16      	ldr	r3, [pc, #88]	; (80100e4 <sys_timeout_abs+0xd8>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	617b      	str	r3, [r7, #20]
 8010090:	e01a      	b.n	80100c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00b      	beq.n	80100b2 <sys_timeout_abs+0xa6>
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	685a      	ldr	r2, [r3, #4]
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	1ad3      	subs	r3, r2, r3
 80100a6:	0fdb      	lsrs	r3, r3, #31
 80100a8:	f003 0301 	and.w	r3, r3, #1
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d007      	beq.n	80100c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	693a      	ldr	r2, [r7, #16]
 80100be:	601a      	str	r2, [r3, #0]
        break;
 80100c0:	e007      	b.n	80100d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	617b      	str	r3, [r7, #20]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1e1      	bne.n	8010092 <sys_timeout_abs+0x86>
 80100ce:	e000      	b.n	80100d2 <sys_timeout_abs+0xc6>
    return;
 80100d0:	bf00      	nop
      }
    }
  }
}
 80100d2:	3718      	adds	r7, #24
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	080166b8 	.word	0x080166b8
 80100dc:	080166ec 	.word	0x080166ec
 80100e0:	0801672c 	.word	0x0801672c
 80100e4:	20008f04 	.word	0x20008f04

080100e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b086      	sub	sp, #24
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	4798      	blx	r3

  now = sys_now();
 80100fa:	f7f8 ff99 	bl	8009030 <sys_now>
 80100fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	4b0f      	ldr	r3, [pc, #60]	; (8010144 <lwip_cyclic_timer+0x5c>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4413      	add	r3, r2
 801010a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801010c:	68fa      	ldr	r2, [r7, #12]
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	0fdb      	lsrs	r3, r3, #31
 8010114:	f003 0301 	and.w	r3, r3, #1
 8010118:	b2db      	uxtb	r3, r3
 801011a:	2b00      	cmp	r3, #0
 801011c:	d009      	beq.n	8010132 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	4413      	add	r3, r2
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	4907      	ldr	r1, [pc, #28]	; (8010148 <lwip_cyclic_timer+0x60>)
 801012a:	4618      	mov	r0, r3
 801012c:	f7ff ff6e 	bl	801000c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010130:	e004      	b.n	801013c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010132:	687a      	ldr	r2, [r7, #4]
 8010134:	4904      	ldr	r1, [pc, #16]	; (8010148 <lwip_cyclic_timer+0x60>)
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f7ff ff68 	bl	801000c <sys_timeout_abs>
}
 801013c:	bf00      	nop
 801013e:	3718      	adds	r7, #24
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}
 8010144:	20008f08 	.word	0x20008f08
 8010148:	080100e9 	.word	0x080100e9

0801014c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010152:	2301      	movs	r3, #1
 8010154:	607b      	str	r3, [r7, #4]
 8010156:	e00e      	b.n	8010176 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010158:	4a0b      	ldr	r2, [pc, #44]	; (8010188 <sys_timeouts_init+0x3c>)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	4a08      	ldr	r2, [pc, #32]	; (8010188 <sys_timeouts_init+0x3c>)
 8010166:	4413      	add	r3, r2
 8010168:	461a      	mov	r2, r3
 801016a:	4908      	ldr	r1, [pc, #32]	; (801018c <sys_timeouts_init+0x40>)
 801016c:	f000 f810 	bl	8010190 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	3301      	adds	r3, #1
 8010174:	607b      	str	r3, [r7, #4]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b02      	cmp	r3, #2
 801017a:	d9ed      	bls.n	8010158 <sys_timeouts_init+0xc>
  }
}
 801017c:	bf00      	nop
 801017e:	bf00      	nop
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	080172a0 	.word	0x080172a0
 801018c:	080100e9 	.word	0x080100e9

08010190 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101a2:	d306      	bcc.n	80101b2 <sys_timeout+0x22>
 80101a4:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <sys_timeout+0x40>)
 80101a6:	f240 1229 	movw	r2, #297	; 0x129
 80101aa:	490a      	ldr	r1, [pc, #40]	; (80101d4 <sys_timeout+0x44>)
 80101ac:	480a      	ldr	r0, [pc, #40]	; (80101d8 <sys_timeout+0x48>)
 80101ae:	f003 f8f5 	bl	801339c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80101b2:	f7f8 ff3d 	bl	8009030 <sys_now>
 80101b6:	4602      	mov	r2, r0
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	4413      	add	r3, r2
 80101bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	68b9      	ldr	r1, [r7, #8]
 80101c2:	6978      	ldr	r0, [r7, #20]
 80101c4:	f7ff ff22 	bl	801000c <sys_timeout_abs>
#endif
}
 80101c8:	bf00      	nop
 80101ca:	3718      	adds	r7, #24
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	080166b8 	.word	0x080166b8
 80101d4:	08016754 	.word	0x08016754
 80101d8:	0801672c 	.word	0x0801672c

080101dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80101e2:	f7f8 ff25 	bl	8009030 <sys_now>
 80101e6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80101e8:	4b1a      	ldr	r3, [pc, #104]	; (8010254 <sys_check_timeouts+0x78>)
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d001      	beq.n	80101f6 <sys_check_timeouts+0x1a>
 80101f2:	f7f9 ff25 	bl	800a040 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80101f6:	4b18      	ldr	r3, [pc, #96]	; (8010258 <sys_check_timeouts+0x7c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d022      	beq.n	8010248 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	0fdb      	lsrs	r3, r3, #31
 801020c:	f003 0301 	and.w	r3, r3, #1
 8010210:	b2db      	uxtb	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	d11a      	bne.n	801024c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a0f      	ldr	r2, [pc, #60]	; (8010258 <sys_check_timeouts+0x7c>)
 801021c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	4a0b      	ldr	r2, [pc, #44]	; (801025c <sys_check_timeouts+0x80>)
 8010230:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010232:	68b9      	ldr	r1, [r7, #8]
 8010234:	2006      	movs	r0, #6
 8010236:	f7f9 fc2b 	bl	8009a90 <memp_free>
    if (handler != NULL) {
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d0d3      	beq.n	80101e8 <sys_check_timeouts+0xc>
      handler(arg);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6838      	ldr	r0, [r7, #0]
 8010244:	4798      	blx	r3
  do {
 8010246:	e7cf      	b.n	80101e8 <sys_check_timeouts+0xc>
      return;
 8010248:	bf00      	nop
 801024a:	e000      	b.n	801024e <sys_check_timeouts+0x72>
      return;
 801024c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801024e:	3710      	adds	r7, #16
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	20008eb1 	.word	0x20008eb1
 8010258:	20008f04 	.word	0x20008f04
 801025c:	20008f08 	.word	0x20008f08

08010260 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010264:	f003 f8b2 	bl	80133cc <rand>
 8010268:	4603      	mov	r3, r0
 801026a:	b29b      	uxth	r3, r3
 801026c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010270:	b29b      	uxth	r3, r3
 8010272:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010276:	b29a      	uxth	r2, r3
 8010278:	4b01      	ldr	r3, [pc, #4]	; (8010280 <udp_init+0x20>)
 801027a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801027c:	bf00      	nop
 801027e:	bd80      	pop	{r7, pc}
 8010280:	20000014 	.word	0x20000014

08010284 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801028a:	2300      	movs	r3, #0
 801028c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801028e:	4b17      	ldr	r3, [pc, #92]	; (80102ec <udp_new_port+0x68>)
 8010290:	881b      	ldrh	r3, [r3, #0]
 8010292:	1c5a      	adds	r2, r3, #1
 8010294:	b291      	uxth	r1, r2
 8010296:	4a15      	ldr	r2, [pc, #84]	; (80102ec <udp_new_port+0x68>)
 8010298:	8011      	strh	r1, [r2, #0]
 801029a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801029e:	4293      	cmp	r3, r2
 80102a0:	d103      	bne.n	80102aa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80102a2:	4b12      	ldr	r3, [pc, #72]	; (80102ec <udp_new_port+0x68>)
 80102a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80102a8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80102aa:	4b11      	ldr	r3, [pc, #68]	; (80102f0 <udp_new_port+0x6c>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	603b      	str	r3, [r7, #0]
 80102b0:	e011      	b.n	80102d6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	8a5a      	ldrh	r2, [r3, #18]
 80102b6:	4b0d      	ldr	r3, [pc, #52]	; (80102ec <udp_new_port+0x68>)
 80102b8:	881b      	ldrh	r3, [r3, #0]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d108      	bne.n	80102d0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80102be:	88fb      	ldrh	r3, [r7, #6]
 80102c0:	3301      	adds	r3, #1
 80102c2:	80fb      	strh	r3, [r7, #6]
 80102c4:	88fb      	ldrh	r3, [r7, #6]
 80102c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80102ca:	d3e0      	bcc.n	801028e <udp_new_port+0xa>
        return 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	e007      	b.n	80102e0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	603b      	str	r3, [r7, #0]
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1ea      	bne.n	80102b2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80102dc:	4b03      	ldr	r3, [pc, #12]	; (80102ec <udp_new_port+0x68>)
 80102de:	881b      	ldrh	r3, [r3, #0]
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr
 80102ec:	20000014 	.word	0x20000014
 80102f0:	20008f10 	.word	0x20008f10

080102f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	4613      	mov	r3, r2
 8010300:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d105      	bne.n	8010314 <udp_input_local_match+0x20>
 8010308:	4b27      	ldr	r3, [pc, #156]	; (80103a8 <udp_input_local_match+0xb4>)
 801030a:	2287      	movs	r2, #135	; 0x87
 801030c:	4927      	ldr	r1, [pc, #156]	; (80103ac <udp_input_local_match+0xb8>)
 801030e:	4828      	ldr	r0, [pc, #160]	; (80103b0 <udp_input_local_match+0xbc>)
 8010310:	f003 f844 	bl	801339c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d105      	bne.n	8010326 <udp_input_local_match+0x32>
 801031a:	4b23      	ldr	r3, [pc, #140]	; (80103a8 <udp_input_local_match+0xb4>)
 801031c:	2288      	movs	r2, #136	; 0x88
 801031e:	4925      	ldr	r1, [pc, #148]	; (80103b4 <udp_input_local_match+0xc0>)
 8010320:	4823      	ldr	r0, [pc, #140]	; (80103b0 <udp_input_local_match+0xbc>)
 8010322:	f003 f83b 	bl	801339c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	7a1b      	ldrb	r3, [r3, #8]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00b      	beq.n	8010346 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	7a1a      	ldrb	r2, [r3, #8]
 8010332:	4b21      	ldr	r3, [pc, #132]	; (80103b8 <udp_input_local_match+0xc4>)
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801033a:	3301      	adds	r3, #1
 801033c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801033e:	429a      	cmp	r2, r3
 8010340:	d001      	beq.n	8010346 <udp_input_local_match+0x52>
    return 0;
 8010342:	2300      	movs	r3, #0
 8010344:	e02b      	b.n	801039e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010346:	79fb      	ldrb	r3, [r7, #7]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d018      	beq.n	801037e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d013      	beq.n	801037a <udp_input_local_match+0x86>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d00f      	beq.n	801037a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801035a:	4b17      	ldr	r3, [pc, #92]	; (80103b8 <udp_input_local_match+0xc4>)
 801035c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801035e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010362:	d00a      	beq.n	801037a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	4b13      	ldr	r3, [pc, #76]	; (80103b8 <udp_input_local_match+0xc4>)
 801036a:	695b      	ldr	r3, [r3, #20]
 801036c:	405a      	eors	r2, r3
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	3308      	adds	r3, #8
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010376:	2b00      	cmp	r3, #0
 8010378:	d110      	bne.n	801039c <udp_input_local_match+0xa8>
          return 1;
 801037a:	2301      	movs	r3, #1
 801037c:	e00f      	b.n	801039e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d009      	beq.n	8010398 <udp_input_local_match+0xa4>
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d005      	beq.n	8010398 <udp_input_local_match+0xa4>
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	4b09      	ldr	r3, [pc, #36]	; (80103b8 <udp_input_local_match+0xc4>)
 8010392:	695b      	ldr	r3, [r3, #20]
 8010394:	429a      	cmp	r2, r3
 8010396:	d101      	bne.n	801039c <udp_input_local_match+0xa8>
        return 1;
 8010398:	2301      	movs	r3, #1
 801039a:	e000      	b.n	801039e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801039c:	2300      	movs	r3, #0
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3710      	adds	r7, #16
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	080167a0 	.word	0x080167a0
 80103ac:	080167d0 	.word	0x080167d0
 80103b0:	080167f4 	.word	0x080167f4
 80103b4:	0801681c 	.word	0x0801681c
 80103b8:	20003784 	.word	0x20003784

080103bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80103bc:	b590      	push	{r4, r7, lr}
 80103be:	b08d      	sub	sp, #52	; 0x34
 80103c0:	af02      	add	r7, sp, #8
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d105      	bne.n	80103dc <udp_input+0x20>
 80103d0:	4b7c      	ldr	r3, [pc, #496]	; (80105c4 <udp_input+0x208>)
 80103d2:	22cf      	movs	r2, #207	; 0xcf
 80103d4:	497c      	ldr	r1, [pc, #496]	; (80105c8 <udp_input+0x20c>)
 80103d6:	487d      	ldr	r0, [pc, #500]	; (80105cc <udp_input+0x210>)
 80103d8:	f002 ffe0 	bl	801339c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d105      	bne.n	80103ee <udp_input+0x32>
 80103e2:	4b78      	ldr	r3, [pc, #480]	; (80105c4 <udp_input+0x208>)
 80103e4:	22d0      	movs	r2, #208	; 0xd0
 80103e6:	497a      	ldr	r1, [pc, #488]	; (80105d0 <udp_input+0x214>)
 80103e8:	4878      	ldr	r0, [pc, #480]	; (80105cc <udp_input+0x210>)
 80103ea:	f002 ffd7 	bl	801339c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	895b      	ldrh	r3, [r3, #10]
 80103f2:	2b07      	cmp	r3, #7
 80103f4:	d803      	bhi.n	80103fe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f7fa f95c 	bl	800a6b4 <pbuf_free>
    goto end;
 80103fc:	e0de      	b.n	80105bc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010404:	4b73      	ldr	r3, [pc, #460]	; (80105d4 <udp_input+0x218>)
 8010406:	695b      	ldr	r3, [r3, #20]
 8010408:	4a72      	ldr	r2, [pc, #456]	; (80105d4 <udp_input+0x218>)
 801040a:	6812      	ldr	r2, [r2, #0]
 801040c:	4611      	mov	r1, r2
 801040e:	4618      	mov	r0, r3
 8010410:	f002 f80a 	bl	8012428 <ip4_addr_isbroadcast_u32>
 8010414:	4603      	mov	r3, r0
 8010416:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	b29b      	uxth	r3, r3
 801041e:	4618      	mov	r0, r3
 8010420:	f7f8 fe94 	bl	800914c <lwip_htons>
 8010424:	4603      	mov	r3, r0
 8010426:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	885b      	ldrh	r3, [r3, #2]
 801042c:	b29b      	uxth	r3, r3
 801042e:	4618      	mov	r0, r3
 8010430:	f7f8 fe8c 	bl	800914c <lwip_htons>
 8010434:	4603      	mov	r3, r0
 8010436:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010438:	2300      	movs	r3, #0
 801043a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801043c:	2300      	movs	r3, #0
 801043e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010440:	2300      	movs	r3, #0
 8010442:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010444:	4b64      	ldr	r3, [pc, #400]	; (80105d8 <udp_input+0x21c>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	627b      	str	r3, [r7, #36]	; 0x24
 801044a:	e054      	b.n	80104f6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044e:	8a5b      	ldrh	r3, [r3, #18]
 8010450:	89fa      	ldrh	r2, [r7, #14]
 8010452:	429a      	cmp	r2, r3
 8010454:	d14a      	bne.n	80104ec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010456:	7cfb      	ldrb	r3, [r7, #19]
 8010458:	461a      	mov	r2, r3
 801045a:	6839      	ldr	r1, [r7, #0]
 801045c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801045e:	f7ff ff49 	bl	80102f4 <udp_input_local_match>
 8010462:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010464:	2b00      	cmp	r3, #0
 8010466:	d041      	beq.n	80104ec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046a:	7c1b      	ldrb	r3, [r3, #16]
 801046c:	f003 0304 	and.w	r3, r3, #4
 8010470:	2b00      	cmp	r3, #0
 8010472:	d11d      	bne.n	80104b0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d102      	bne.n	8010480 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801047a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047c:	61fb      	str	r3, [r7, #28]
 801047e:	e017      	b.n	80104b0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010480:	7cfb      	ldrb	r3, [r7, #19]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d014      	beq.n	80104b0 <udp_input+0xf4>
 8010486:	4b53      	ldr	r3, [pc, #332]	; (80105d4 <udp_input+0x218>)
 8010488:	695b      	ldr	r3, [r3, #20]
 801048a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048e:	d10f      	bne.n	80104b0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	3304      	adds	r3, #4
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	429a      	cmp	r2, r3
 801049c:	d008      	beq.n	80104b0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	3304      	adds	r3, #4
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d101      	bne.n	80104b0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b2:	8a9b      	ldrh	r3, [r3, #20]
 80104b4:	8a3a      	ldrh	r2, [r7, #16]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d118      	bne.n	80104ec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104bc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d005      	beq.n	80104ce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80104c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	4b43      	ldr	r3, [pc, #268]	; (80105d4 <udp_input+0x218>)
 80104c8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d10e      	bne.n	80104ec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d014      	beq.n	80104fe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80104d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d6:	68da      	ldr	r2, [r3, #12]
 80104d8:	6a3b      	ldr	r3, [r7, #32]
 80104da:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80104dc:	4b3e      	ldr	r3, [pc, #248]	; (80105d8 <udp_input+0x21c>)
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80104e4:	4a3c      	ldr	r2, [pc, #240]	; (80105d8 <udp_input+0x21c>)
 80104e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80104ea:	e008      	b.n	80104fe <udp_input+0x142>
      }
    }

    prev = pcb;
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80104f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	627b      	str	r3, [r7, #36]	; 0x24
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d1a7      	bne.n	801044c <udp_input+0x90>
 80104fc:	e000      	b.n	8010500 <udp_input+0x144>
        break;
 80104fe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	2b00      	cmp	r3, #0
 8010504:	d101      	bne.n	801050a <udp_input+0x14e>
    pcb = uncon_pcb;
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050c:	2b00      	cmp	r3, #0
 801050e:	d002      	beq.n	8010516 <udp_input+0x15a>
    for_us = 1;
 8010510:	2301      	movs	r3, #1
 8010512:	76fb      	strb	r3, [r7, #27]
 8010514:	e00a      	b.n	801052c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	3304      	adds	r3, #4
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	4b2d      	ldr	r3, [pc, #180]	; (80105d4 <udp_input+0x218>)
 801051e:	695b      	ldr	r3, [r3, #20]
 8010520:	429a      	cmp	r2, r3
 8010522:	bf0c      	ite	eq
 8010524:	2301      	moveq	r3, #1
 8010526:	2300      	movne	r3, #0
 8010528:	b2db      	uxtb	r3, r3
 801052a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801052c:	7efb      	ldrb	r3, [r7, #27]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d041      	beq.n	80105b6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010532:	2108      	movs	r1, #8
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7fa f837 	bl	800a5a8 <pbuf_remove_header>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d00a      	beq.n	8010556 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010540:	4b20      	ldr	r3, [pc, #128]	; (80105c4 <udp_input+0x208>)
 8010542:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010546:	4925      	ldr	r1, [pc, #148]	; (80105dc <udp_input+0x220>)
 8010548:	4820      	ldr	r0, [pc, #128]	; (80105cc <udp_input+0x210>)
 801054a:	f002 ff27 	bl	801339c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7fa f8b0 	bl	800a6b4 <pbuf_free>
      goto end;
 8010554:	e032      	b.n	80105bc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010558:	2b00      	cmp	r3, #0
 801055a:	d012      	beq.n	8010582 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055e:	699b      	ldr	r3, [r3, #24]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00a      	beq.n	801057a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	699c      	ldr	r4, [r3, #24]
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056a:	69d8      	ldr	r0, [r3, #28]
 801056c:	8a3b      	ldrh	r3, [r7, #16]
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	4b1b      	ldr	r3, [pc, #108]	; (80105e0 <udp_input+0x224>)
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010576:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010578:	e021      	b.n	80105be <udp_input+0x202>
        pbuf_free(p);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f7fa f89a 	bl	800a6b4 <pbuf_free>
        goto end;
 8010580:	e01c      	b.n	80105bc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010582:	7cfb      	ldrb	r3, [r7, #19]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d112      	bne.n	80105ae <udp_input+0x1f2>
 8010588:	4b12      	ldr	r3, [pc, #72]	; (80105d4 <udp_input+0x218>)
 801058a:	695b      	ldr	r3, [r3, #20]
 801058c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010590:	2be0      	cmp	r3, #224	; 0xe0
 8010592:	d00c      	beq.n	80105ae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010594:	4b0f      	ldr	r3, [pc, #60]	; (80105d4 <udp_input+0x218>)
 8010596:	899b      	ldrh	r3, [r3, #12]
 8010598:	3308      	adds	r3, #8
 801059a:	b29b      	uxth	r3, r3
 801059c:	b21b      	sxth	r3, r3
 801059e:	4619      	mov	r1, r3
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7fa f874 	bl	800a68e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80105a6:	2103      	movs	r1, #3
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f001 fc1d 	bl	8011de8 <icmp_dest_unreach>
      pbuf_free(p);
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f7fa f880 	bl	800a6b4 <pbuf_free>
  return;
 80105b4:	e003      	b.n	80105be <udp_input+0x202>
    pbuf_free(p);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7fa f87c 	bl	800a6b4 <pbuf_free>
  return;
 80105bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80105be:	372c      	adds	r7, #44	; 0x2c
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd90      	pop	{r4, r7, pc}
 80105c4:	080167a0 	.word	0x080167a0
 80105c8:	08016844 	.word	0x08016844
 80105cc:	080167f4 	.word	0x080167f4
 80105d0:	0801685c 	.word	0x0801685c
 80105d4:	20003784 	.word	0x20003784
 80105d8:	20008f10 	.word	0x20008f10
 80105dc:	08016878 	.word	0x08016878
 80105e0:	20003794 	.word	0x20003794

080105e4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d109      	bne.n	8010608 <udp_send+0x24>
 80105f4:	4b11      	ldr	r3, [pc, #68]	; (801063c <udp_send+0x58>)
 80105f6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80105fa:	4911      	ldr	r1, [pc, #68]	; (8010640 <udp_send+0x5c>)
 80105fc:	4811      	ldr	r0, [pc, #68]	; (8010644 <udp_send+0x60>)
 80105fe:	f002 fecd 	bl	801339c <iprintf>
 8010602:	f06f 030f 	mvn.w	r3, #15
 8010606:	e015      	b.n	8010634 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d109      	bne.n	8010622 <udp_send+0x3e>
 801060e:	4b0b      	ldr	r3, [pc, #44]	; (801063c <udp_send+0x58>)
 8010610:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8010614:	490c      	ldr	r1, [pc, #48]	; (8010648 <udp_send+0x64>)
 8010616:	480b      	ldr	r0, [pc, #44]	; (8010644 <udp_send+0x60>)
 8010618:	f002 fec0 	bl	801339c <iprintf>
 801061c:	f06f 030f 	mvn.w	r3, #15
 8010620:	e008      	b.n	8010634 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	1d1a      	adds	r2, r3, #4
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	8a9b      	ldrh	r3, [r3, #20]
 801062a:	6839      	ldr	r1, [r7, #0]
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 f80d 	bl	801064c <udp_sendto>
 8010632:	4603      	mov	r3, r0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	080167a0 	.word	0x080167a0
 8010640:	08016894 	.word	0x08016894
 8010644:	080167f4 	.word	0x080167f4
 8010648:	080168ac 	.word	0x080168ac

0801064c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b088      	sub	sp, #32
 8010650:	af02      	add	r7, sp, #8
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
 8010658:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d109      	bne.n	8010674 <udp_sendto+0x28>
 8010660:	4b23      	ldr	r3, [pc, #140]	; (80106f0 <udp_sendto+0xa4>)
 8010662:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010666:	4923      	ldr	r1, [pc, #140]	; (80106f4 <udp_sendto+0xa8>)
 8010668:	4823      	ldr	r0, [pc, #140]	; (80106f8 <udp_sendto+0xac>)
 801066a:	f002 fe97 	bl	801339c <iprintf>
 801066e:	f06f 030f 	mvn.w	r3, #15
 8010672:	e038      	b.n	80106e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d109      	bne.n	801068e <udp_sendto+0x42>
 801067a:	4b1d      	ldr	r3, [pc, #116]	; (80106f0 <udp_sendto+0xa4>)
 801067c:	f240 2219 	movw	r2, #537	; 0x219
 8010680:	491e      	ldr	r1, [pc, #120]	; (80106fc <udp_sendto+0xb0>)
 8010682:	481d      	ldr	r0, [pc, #116]	; (80106f8 <udp_sendto+0xac>)
 8010684:	f002 fe8a 	bl	801339c <iprintf>
 8010688:	f06f 030f 	mvn.w	r3, #15
 801068c:	e02b      	b.n	80106e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d109      	bne.n	80106a8 <udp_sendto+0x5c>
 8010694:	4b16      	ldr	r3, [pc, #88]	; (80106f0 <udp_sendto+0xa4>)
 8010696:	f240 221a 	movw	r2, #538	; 0x21a
 801069a:	4919      	ldr	r1, [pc, #100]	; (8010700 <udp_sendto+0xb4>)
 801069c:	4816      	ldr	r0, [pc, #88]	; (80106f8 <udp_sendto+0xac>)
 801069e:	f002 fe7d 	bl	801339c <iprintf>
 80106a2:	f06f 030f 	mvn.w	r3, #15
 80106a6:	e01e      	b.n	80106e6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	7a1b      	ldrb	r3, [r3, #8]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d006      	beq.n	80106be <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	7a1b      	ldrb	r3, [r3, #8]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7f9 fc9d 	bl	8009ff4 <netif_get_by_index>
 80106ba:	6178      	str	r0, [r7, #20]
 80106bc:	e003      	b.n	80106c6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f001 fc1c 	bl	8011efc <ip4_route>
 80106c4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d102      	bne.n	80106d2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80106cc:	f06f 0303 	mvn.w	r3, #3
 80106d0:	e009      	b.n	80106e6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80106d2:	887a      	ldrh	r2, [r7, #2]
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	4613      	mov	r3, r2
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	68b9      	ldr	r1, [r7, #8]
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f000 f810 	bl	8010704 <udp_sendto_if>
 80106e4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3718      	adds	r7, #24
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	080167a0 	.word	0x080167a0
 80106f4:	080168c4 	.word	0x080168c4
 80106f8:	080167f4 	.word	0x080167f4
 80106fc:	080168dc 	.word	0x080168dc
 8010700:	080168f8 	.word	0x080168f8

08010704 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b088      	sub	sp, #32
 8010708:	af02      	add	r7, sp, #8
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d109      	bne.n	801072c <udp_sendto_if+0x28>
 8010718:	4b2e      	ldr	r3, [pc, #184]	; (80107d4 <udp_sendto_if+0xd0>)
 801071a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801071e:	492e      	ldr	r1, [pc, #184]	; (80107d8 <udp_sendto_if+0xd4>)
 8010720:	482e      	ldr	r0, [pc, #184]	; (80107dc <udp_sendto_if+0xd8>)
 8010722:	f002 fe3b 	bl	801339c <iprintf>
 8010726:	f06f 030f 	mvn.w	r3, #15
 801072a:	e04f      	b.n	80107cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d109      	bne.n	8010746 <udp_sendto_if+0x42>
 8010732:	4b28      	ldr	r3, [pc, #160]	; (80107d4 <udp_sendto_if+0xd0>)
 8010734:	f240 2281 	movw	r2, #641	; 0x281
 8010738:	4929      	ldr	r1, [pc, #164]	; (80107e0 <udp_sendto_if+0xdc>)
 801073a:	4828      	ldr	r0, [pc, #160]	; (80107dc <udp_sendto_if+0xd8>)
 801073c:	f002 fe2e 	bl	801339c <iprintf>
 8010740:	f06f 030f 	mvn.w	r3, #15
 8010744:	e042      	b.n	80107cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d109      	bne.n	8010760 <udp_sendto_if+0x5c>
 801074c:	4b21      	ldr	r3, [pc, #132]	; (80107d4 <udp_sendto_if+0xd0>)
 801074e:	f240 2282 	movw	r2, #642	; 0x282
 8010752:	4924      	ldr	r1, [pc, #144]	; (80107e4 <udp_sendto_if+0xe0>)
 8010754:	4821      	ldr	r0, [pc, #132]	; (80107dc <udp_sendto_if+0xd8>)
 8010756:	f002 fe21 	bl	801339c <iprintf>
 801075a:	f06f 030f 	mvn.w	r3, #15
 801075e:	e035      	b.n	80107cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010760:	6a3b      	ldr	r3, [r7, #32]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d109      	bne.n	801077a <udp_sendto_if+0x76>
 8010766:	4b1b      	ldr	r3, [pc, #108]	; (80107d4 <udp_sendto_if+0xd0>)
 8010768:	f240 2283 	movw	r2, #643	; 0x283
 801076c:	491e      	ldr	r1, [pc, #120]	; (80107e8 <udp_sendto_if+0xe4>)
 801076e:	481b      	ldr	r0, [pc, #108]	; (80107dc <udp_sendto_if+0xd8>)
 8010770:	f002 fe14 	bl	801339c <iprintf>
 8010774:	f06f 030f 	mvn.w	r3, #15
 8010778:	e028      	b.n	80107cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d009      	beq.n	8010794 <udp_sendto_if+0x90>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d005      	beq.n	8010794 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010790:	2be0      	cmp	r3, #224	; 0xe0
 8010792:	d103      	bne.n	801079c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010794:	6a3b      	ldr	r3, [r7, #32]
 8010796:	3304      	adds	r3, #4
 8010798:	617b      	str	r3, [r7, #20]
 801079a:	e00b      	b.n	80107b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681a      	ldr	r2, [r3, #0]
 80107a0:	6a3b      	ldr	r3, [r7, #32]
 80107a2:	3304      	adds	r3, #4
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d002      	beq.n	80107b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80107aa:	f06f 0303 	mvn.w	r3, #3
 80107ae:	e00d      	b.n	80107cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80107b4:	887a      	ldrh	r2, [r7, #2]
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	9301      	str	r3, [sp, #4]
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	4613      	mov	r3, r2
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	68b9      	ldr	r1, [r7, #8]
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	f000 f811 	bl	80107ec <udp_sendto_if_src>
 80107ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3718      	adds	r7, #24
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	080167a0 	.word	0x080167a0
 80107d8:	08016914 	.word	0x08016914
 80107dc:	080167f4 	.word	0x080167f4
 80107e0:	08016930 	.word	0x08016930
 80107e4:	0801694c 	.word	0x0801694c
 80107e8:	0801696c 	.word	0x0801696c

080107ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08c      	sub	sp, #48	; 0x30
 80107f0:	af04      	add	r7, sp, #16
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
 80107f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d109      	bne.n	8010814 <udp_sendto_if_src+0x28>
 8010800:	4b65      	ldr	r3, [pc, #404]	; (8010998 <udp_sendto_if_src+0x1ac>)
 8010802:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010806:	4965      	ldr	r1, [pc, #404]	; (801099c <udp_sendto_if_src+0x1b0>)
 8010808:	4865      	ldr	r0, [pc, #404]	; (80109a0 <udp_sendto_if_src+0x1b4>)
 801080a:	f002 fdc7 	bl	801339c <iprintf>
 801080e:	f06f 030f 	mvn.w	r3, #15
 8010812:	e0bc      	b.n	801098e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d109      	bne.n	801082e <udp_sendto_if_src+0x42>
 801081a:	4b5f      	ldr	r3, [pc, #380]	; (8010998 <udp_sendto_if_src+0x1ac>)
 801081c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010820:	4960      	ldr	r1, [pc, #384]	; (80109a4 <udp_sendto_if_src+0x1b8>)
 8010822:	485f      	ldr	r0, [pc, #380]	; (80109a0 <udp_sendto_if_src+0x1b4>)
 8010824:	f002 fdba 	bl	801339c <iprintf>
 8010828:	f06f 030f 	mvn.w	r3, #15
 801082c:	e0af      	b.n	801098e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d109      	bne.n	8010848 <udp_sendto_if_src+0x5c>
 8010834:	4b58      	ldr	r3, [pc, #352]	; (8010998 <udp_sendto_if_src+0x1ac>)
 8010836:	f240 22d3 	movw	r2, #723	; 0x2d3
 801083a:	495b      	ldr	r1, [pc, #364]	; (80109a8 <udp_sendto_if_src+0x1bc>)
 801083c:	4858      	ldr	r0, [pc, #352]	; (80109a0 <udp_sendto_if_src+0x1b4>)
 801083e:	f002 fdad 	bl	801339c <iprintf>
 8010842:	f06f 030f 	mvn.w	r3, #15
 8010846:	e0a2      	b.n	801098e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084a:	2b00      	cmp	r3, #0
 801084c:	d109      	bne.n	8010862 <udp_sendto_if_src+0x76>
 801084e:	4b52      	ldr	r3, [pc, #328]	; (8010998 <udp_sendto_if_src+0x1ac>)
 8010850:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010854:	4955      	ldr	r1, [pc, #340]	; (80109ac <udp_sendto_if_src+0x1c0>)
 8010856:	4852      	ldr	r0, [pc, #328]	; (80109a0 <udp_sendto_if_src+0x1b4>)
 8010858:	f002 fda0 	bl	801339c <iprintf>
 801085c:	f06f 030f 	mvn.w	r3, #15
 8010860:	e095      	b.n	801098e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010864:	2b00      	cmp	r3, #0
 8010866:	d109      	bne.n	801087c <udp_sendto_if_src+0x90>
 8010868:	4b4b      	ldr	r3, [pc, #300]	; (8010998 <udp_sendto_if_src+0x1ac>)
 801086a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801086e:	4950      	ldr	r1, [pc, #320]	; (80109b0 <udp_sendto_if_src+0x1c4>)
 8010870:	484b      	ldr	r0, [pc, #300]	; (80109a0 <udp_sendto_if_src+0x1b4>)
 8010872:	f002 fd93 	bl	801339c <iprintf>
 8010876:	f06f 030f 	mvn.w	r3, #15
 801087a:	e088      	b.n	801098e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	8a5b      	ldrh	r3, [r3, #18]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d10f      	bne.n	80108a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010884:	68f9      	ldr	r1, [r7, #12]
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	8a5b      	ldrh	r3, [r3, #18]
 801088a:	461a      	mov	r2, r3
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f000 f893 	bl	80109b8 <udp_bind>
 8010892:	4603      	mov	r3, r0
 8010894:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010896:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801089e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80108a2:	e074      	b.n	801098e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	891b      	ldrh	r3, [r3, #8]
 80108a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d902      	bls.n	80108b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80108b0:	f04f 33ff 	mov.w	r3, #4294967295
 80108b4:	e06b      	b.n	801098e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80108b6:	2108      	movs	r1, #8
 80108b8:	68b8      	ldr	r0, [r7, #8]
 80108ba:	f7f9 fe65 	bl	800a588 <pbuf_add_header>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d015      	beq.n	80108f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80108c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108c8:	2108      	movs	r1, #8
 80108ca:	2022      	movs	r0, #34	; 0x22
 80108cc:	f7f9 fc0e 	bl	800a0ec <pbuf_alloc>
 80108d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d102      	bne.n	80108de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80108d8:	f04f 33ff 	mov.w	r3, #4294967295
 80108dc:	e057      	b.n	801098e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	891b      	ldrh	r3, [r3, #8]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d006      	beq.n	80108f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80108e6:	68b9      	ldr	r1, [r7, #8]
 80108e8:	69f8      	ldr	r0, [r7, #28]
 80108ea:	f7f9 fffb 	bl	800a8e4 <pbuf_chain>
 80108ee:	e001      	b.n	80108f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	895b      	ldrh	r3, [r3, #10]
 80108f8:	2b07      	cmp	r3, #7
 80108fa:	d806      	bhi.n	801090a <udp_sendto_if_src+0x11e>
 80108fc:	4b26      	ldr	r3, [pc, #152]	; (8010998 <udp_sendto_if_src+0x1ac>)
 80108fe:	f240 320d 	movw	r2, #781	; 0x30d
 8010902:	492c      	ldr	r1, [pc, #176]	; (80109b4 <udp_sendto_if_src+0x1c8>)
 8010904:	4826      	ldr	r0, [pc, #152]	; (80109a0 <udp_sendto_if_src+0x1b4>)
 8010906:	f002 fd49 	bl	801339c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	8a5b      	ldrh	r3, [r3, #18]
 8010914:	4618      	mov	r0, r3
 8010916:	f7f8 fc19 	bl	800914c <lwip_htons>
 801091a:	4603      	mov	r3, r0
 801091c:	461a      	mov	r2, r3
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010922:	887b      	ldrh	r3, [r7, #2]
 8010924:	4618      	mov	r0, r3
 8010926:	f7f8 fc11 	bl	800914c <lwip_htons>
 801092a:	4603      	mov	r3, r0
 801092c:	461a      	mov	r2, r3
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	2200      	movs	r2, #0
 8010936:	719a      	strb	r2, [r3, #6]
 8010938:	2200      	movs	r2, #0
 801093a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	891b      	ldrh	r3, [r3, #8]
 8010940:	4618      	mov	r0, r3
 8010942:	f7f8 fc03 	bl	800914c <lwip_htons>
 8010946:	4603      	mov	r3, r0
 8010948:	461a      	mov	r2, r3
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801094e:	2311      	movs	r3, #17
 8010950:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	7adb      	ldrb	r3, [r3, #11]
 8010956:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	7a9b      	ldrb	r3, [r3, #10]
 801095c:	7cb9      	ldrb	r1, [r7, #18]
 801095e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010960:	9202      	str	r2, [sp, #8]
 8010962:	7cfa      	ldrb	r2, [r7, #19]
 8010964:	9201      	str	r2, [sp, #4]
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	460b      	mov	r3, r1
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801096e:	69f8      	ldr	r0, [r7, #28]
 8010970:	f001 fcac 	bl	80122cc <ip4_output_if_src>
 8010974:	4603      	mov	r3, r0
 8010976:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010978:	69fa      	ldr	r2, [r7, #28]
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	429a      	cmp	r2, r3
 801097e:	d004      	beq.n	801098a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010980:	69f8      	ldr	r0, [r7, #28]
 8010982:	f7f9 fe97 	bl	800a6b4 <pbuf_free>
    q = NULL;
 8010986:	2300      	movs	r3, #0
 8010988:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801098a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3720      	adds	r7, #32
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	080167a0 	.word	0x080167a0
 801099c:	0801698c 	.word	0x0801698c
 80109a0:	080167f4 	.word	0x080167f4
 80109a4:	080169ac 	.word	0x080169ac
 80109a8:	080169cc 	.word	0x080169cc
 80109ac:	080169f0 	.word	0x080169f0
 80109b0:	08016a14 	.word	0x08016a14
 80109b4:	08016a38 	.word	0x08016a38

080109b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	4613      	mov	r3, r2
 80109c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d101      	bne.n	80109d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80109cc:	4b39      	ldr	r3, [pc, #228]	; (8010ab4 <udp_bind+0xfc>)
 80109ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d109      	bne.n	80109ea <udp_bind+0x32>
 80109d6:	4b38      	ldr	r3, [pc, #224]	; (8010ab8 <udp_bind+0x100>)
 80109d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80109dc:	4937      	ldr	r1, [pc, #220]	; (8010abc <udp_bind+0x104>)
 80109de:	4838      	ldr	r0, [pc, #224]	; (8010ac0 <udp_bind+0x108>)
 80109e0:	f002 fcdc 	bl	801339c <iprintf>
 80109e4:	f06f 030f 	mvn.w	r3, #15
 80109e8:	e060      	b.n	8010aac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80109ea:	2300      	movs	r3, #0
 80109ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80109ee:	4b35      	ldr	r3, [pc, #212]	; (8010ac4 <udp_bind+0x10c>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	617b      	str	r3, [r7, #20]
 80109f4:	e009      	b.n	8010a0a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d102      	bne.n	8010a04 <udp_bind+0x4c>
      rebind = 1;
 80109fe:	2301      	movs	r3, #1
 8010a00:	74fb      	strb	r3, [r7, #19]
      break;
 8010a02:	e005      	b.n	8010a10 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	617b      	str	r3, [r7, #20]
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d1f2      	bne.n	80109f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010a10:	88fb      	ldrh	r3, [r7, #6]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d109      	bne.n	8010a2a <udp_bind+0x72>
    port = udp_new_port();
 8010a16:	f7ff fc35 	bl	8010284 <udp_new_port>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010a1e:	88fb      	ldrh	r3, [r7, #6]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d12c      	bne.n	8010a7e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010a24:	f06f 0307 	mvn.w	r3, #7
 8010a28:	e040      	b.n	8010aac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a2a:	4b26      	ldr	r3, [pc, #152]	; (8010ac4 <udp_bind+0x10c>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	617b      	str	r3, [r7, #20]
 8010a30:	e022      	b.n	8010a78 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d01b      	beq.n	8010a72 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	8a5b      	ldrh	r3, [r3, #18]
 8010a3e:	88fa      	ldrh	r2, [r7, #6]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d116      	bne.n	8010a72 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d00d      	beq.n	8010a6c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00a      	beq.n	8010a6c <udp_bind+0xb4>
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d006      	beq.n	8010a6c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010a5e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d003      	beq.n	8010a6c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d102      	bne.n	8010a72 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010a6c:	f06f 0307 	mvn.w	r3, #7
 8010a70:	e01c      	b.n	8010aac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	68db      	ldr	r3, [r3, #12]
 8010a76:	617b      	str	r3, [r7, #20]
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1d9      	bne.n	8010a32 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d002      	beq.n	8010a8a <udp_bind+0xd2>
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	e000      	b.n	8010a8c <udp_bind+0xd4>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	88fa      	ldrh	r2, [r7, #6]
 8010a94:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010a96:	7cfb      	ldrb	r3, [r7, #19]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d106      	bne.n	8010aaa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010a9c:	4b09      	ldr	r3, [pc, #36]	; (8010ac4 <udp_bind+0x10c>)
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010aa4:	4a07      	ldr	r2, [pc, #28]	; (8010ac4 <udp_bind+0x10c>)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3718      	adds	r7, #24
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	080172b8 	.word	0x080172b8
 8010ab8:	080167a0 	.word	0x080167a0
 8010abc:	08016a68 	.word	0x08016a68
 8010ac0:	080167f4 	.word	0x080167f4
 8010ac4:	20008f10 	.word	0x20008f10

08010ac8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d109      	bne.n	8010af0 <udp_connect+0x28>
 8010adc:	4b2c      	ldr	r3, [pc, #176]	; (8010b90 <udp_connect+0xc8>)
 8010ade:	f240 4235 	movw	r2, #1077	; 0x435
 8010ae2:	492c      	ldr	r1, [pc, #176]	; (8010b94 <udp_connect+0xcc>)
 8010ae4:	482c      	ldr	r0, [pc, #176]	; (8010b98 <udp_connect+0xd0>)
 8010ae6:	f002 fc59 	bl	801339c <iprintf>
 8010aea:	f06f 030f 	mvn.w	r3, #15
 8010aee:	e04b      	b.n	8010b88 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d109      	bne.n	8010b0a <udp_connect+0x42>
 8010af6:	4b26      	ldr	r3, [pc, #152]	; (8010b90 <udp_connect+0xc8>)
 8010af8:	f240 4236 	movw	r2, #1078	; 0x436
 8010afc:	4927      	ldr	r1, [pc, #156]	; (8010b9c <udp_connect+0xd4>)
 8010afe:	4826      	ldr	r0, [pc, #152]	; (8010b98 <udp_connect+0xd0>)
 8010b00:	f002 fc4c 	bl	801339c <iprintf>
 8010b04:	f06f 030f 	mvn.w	r3, #15
 8010b08:	e03e      	b.n	8010b88 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	8a5b      	ldrh	r3, [r3, #18]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10f      	bne.n	8010b32 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010b12:	68f9      	ldr	r1, [r7, #12]
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	8a5b      	ldrh	r3, [r3, #18]
 8010b18:	461a      	mov	r2, r3
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f7ff ff4c 	bl	80109b8 <udp_bind>
 8010b20:	4603      	mov	r3, r0
 8010b22:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010b24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d002      	beq.n	8010b32 <udp_connect+0x6a>
      return err;
 8010b2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b30:	e02a      	b.n	8010b88 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d002      	beq.n	8010b3e <udp_connect+0x76>
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	e000      	b.n	8010b40 <udp_connect+0x78>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	88fa      	ldrh	r2, [r7, #6]
 8010b48:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	7c1b      	ldrb	r3, [r3, #16]
 8010b4e:	f043 0304 	orr.w	r3, r3, #4
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b58:	4b11      	ldr	r3, [pc, #68]	; (8010ba0 <udp_connect+0xd8>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	617b      	str	r3, [r7, #20]
 8010b5e:	e008      	b.n	8010b72 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d101      	bne.n	8010b6c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	e00d      	b.n	8010b88 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	617b      	str	r3, [r7, #20]
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1f3      	bne.n	8010b60 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010b78:	4b09      	ldr	r3, [pc, #36]	; (8010ba0 <udp_connect+0xd8>)
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010b80:	4a07      	ldr	r2, [pc, #28]	; (8010ba0 <udp_connect+0xd8>)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	080167a0 	.word	0x080167a0
 8010b94:	08016a80 	.word	0x08016a80
 8010b98:	080167f4 	.word	0x080167f4
 8010b9c:	08016a9c 	.word	0x08016a9c
 8010ba0:	20008f10 	.word	0x20008f10

08010ba4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d107      	bne.n	8010bc2 <udp_disconnect+0x1e>
 8010bb2:	4b0d      	ldr	r3, [pc, #52]	; (8010be8 <udp_disconnect+0x44>)
 8010bb4:	f240 426a 	movw	r2, #1130	; 0x46a
 8010bb8:	490c      	ldr	r1, [pc, #48]	; (8010bec <udp_disconnect+0x48>)
 8010bba:	480d      	ldr	r0, [pc, #52]	; (8010bf0 <udp_disconnect+0x4c>)
 8010bbc:	f002 fbee 	bl	801339c <iprintf>
 8010bc0:	e00f      	b.n	8010be2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	7c1b      	ldrb	r3, [r3, #16]
 8010bd8:	f023 0304 	bic.w	r3, r3, #4
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	741a      	strb	r2, [r3, #16]
}
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	080167a0 	.word	0x080167a0
 8010bec:	08016ab8 	.word	0x08016ab8
 8010bf0:	080167f4 	.word	0x080167f4

08010bf4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	60f8      	str	r0, [r7, #12]
 8010bfc:	60b9      	str	r1, [r7, #8]
 8010bfe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d107      	bne.n	8010c16 <udp_recv+0x22>
 8010c06:	4b08      	ldr	r3, [pc, #32]	; (8010c28 <udp_recv+0x34>)
 8010c08:	f240 428a 	movw	r2, #1162	; 0x48a
 8010c0c:	4907      	ldr	r1, [pc, #28]	; (8010c2c <udp_recv+0x38>)
 8010c0e:	4808      	ldr	r0, [pc, #32]	; (8010c30 <udp_recv+0x3c>)
 8010c10:	f002 fbc4 	bl	801339c <iprintf>
 8010c14:	e005      	b.n	8010c22 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	68ba      	ldr	r2, [r7, #8]
 8010c1a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	61da      	str	r2, [r3, #28]
}
 8010c22:	3710      	adds	r7, #16
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	080167a0 	.word	0x080167a0
 8010c2c:	08016ad4 	.word	0x08016ad4
 8010c30:	080167f4 	.word	0x080167f4

08010c34 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d107      	bne.n	8010c52 <udp_remove+0x1e>
 8010c42:	4b19      	ldr	r3, [pc, #100]	; (8010ca8 <udp_remove+0x74>)
 8010c44:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010c48:	4918      	ldr	r1, [pc, #96]	; (8010cac <udp_remove+0x78>)
 8010c4a:	4819      	ldr	r0, [pc, #100]	; (8010cb0 <udp_remove+0x7c>)
 8010c4c:	f002 fba6 	bl	801339c <iprintf>
 8010c50:	e026      	b.n	8010ca0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010c52:	4b18      	ldr	r3, [pc, #96]	; (8010cb4 <udp_remove+0x80>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d105      	bne.n	8010c68 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010c5c:	4b15      	ldr	r3, [pc, #84]	; (8010cb4 <udp_remove+0x80>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	4a14      	ldr	r2, [pc, #80]	; (8010cb4 <udp_remove+0x80>)
 8010c64:	6013      	str	r3, [r2, #0]
 8010c66:	e017      	b.n	8010c98 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010c68:	4b12      	ldr	r3, [pc, #72]	; (8010cb4 <udp_remove+0x80>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	60fb      	str	r3, [r7, #12]
 8010c6e:	e010      	b.n	8010c92 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	68db      	ldr	r3, [r3, #12]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d009      	beq.n	8010c8c <udp_remove+0x58>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d104      	bne.n	8010c8c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	68da      	ldr	r2, [r3, #12]
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	60da      	str	r2, [r3, #12]
        break;
 8010c8a:	e005      	b.n	8010c98 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	60fb      	str	r3, [r7, #12]
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1eb      	bne.n	8010c70 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010c98:	6879      	ldr	r1, [r7, #4]
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	f7f8 fef8 	bl	8009a90 <memp_free>
}
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	080167a0 	.word	0x080167a0
 8010cac:	08016aec 	.word	0x08016aec
 8010cb0:	080167f4 	.word	0x080167f4
 8010cb4:	20008f10 	.word	0x20008f10

08010cb8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	f7f8 fe9a 	bl	80099f8 <memp_malloc>
 8010cc4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d007      	beq.n	8010cdc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010ccc:	2220      	movs	r2, #32
 8010cce:	2100      	movs	r1, #0
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f002 fb5b 	bl	801338c <memset>
    pcb->ttl = UDP_TTL;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	22ff      	movs	r2, #255	; 0xff
 8010cda:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010cdc:	687b      	ldr	r3, [r7, #4]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3708      	adds	r7, #8
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
	...

08010ce8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d01e      	beq.n	8010d36 <udp_netif_ip_addr_changed+0x4e>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d01a      	beq.n	8010d36 <udp_netif_ip_addr_changed+0x4e>
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d017      	beq.n	8010d36 <udp_netif_ip_addr_changed+0x4e>
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d013      	beq.n	8010d36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010d0e:	4b0d      	ldr	r3, [pc, #52]	; (8010d44 <udp_netif_ip_addr_changed+0x5c>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	60fb      	str	r3, [r7, #12]
 8010d14:	e00c      	b.n	8010d30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d103      	bne.n	8010d2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	60fb      	str	r3, [r7, #12]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d1ef      	bne.n	8010d16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010d36:	bf00      	nop
 8010d38:	3714      	adds	r7, #20
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	20008f10 	.word	0x20008f10

08010d48 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010d50:	4915      	ldr	r1, [pc, #84]	; (8010da8 <etharp_free_entry+0x60>)
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	4613      	mov	r3, r2
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	4413      	add	r3, r2
 8010d5a:	00db      	lsls	r3, r3, #3
 8010d5c:	440b      	add	r3, r1
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d013      	beq.n	8010d8c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010d64:	4910      	ldr	r1, [pc, #64]	; (8010da8 <etharp_free_entry+0x60>)
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	4613      	mov	r3, r2
 8010d6a:	005b      	lsls	r3, r3, #1
 8010d6c:	4413      	add	r3, r2
 8010d6e:	00db      	lsls	r3, r3, #3
 8010d70:	440b      	add	r3, r1
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7f9 fc9d 	bl	800a6b4 <pbuf_free>
    arp_table[i].q = NULL;
 8010d7a:	490b      	ldr	r1, [pc, #44]	; (8010da8 <etharp_free_entry+0x60>)
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	005b      	lsls	r3, r3, #1
 8010d82:	4413      	add	r3, r2
 8010d84:	00db      	lsls	r3, r3, #3
 8010d86:	440b      	add	r3, r1
 8010d88:	2200      	movs	r2, #0
 8010d8a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010d8c:	4906      	ldr	r1, [pc, #24]	; (8010da8 <etharp_free_entry+0x60>)
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	4613      	mov	r3, r2
 8010d92:	005b      	lsls	r3, r3, #1
 8010d94:	4413      	add	r3, r2
 8010d96:	00db      	lsls	r3, r3, #3
 8010d98:	440b      	add	r3, r1
 8010d9a:	3314      	adds	r3, #20
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010da0:	bf00      	nop
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	20008f14 	.word	0x20008f14

08010dac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010db2:	2300      	movs	r3, #0
 8010db4:	607b      	str	r3, [r7, #4]
 8010db6:	e096      	b.n	8010ee6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010db8:	494f      	ldr	r1, [pc, #316]	; (8010ef8 <etharp_tmr+0x14c>)
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	4413      	add	r3, r2
 8010dc2:	00db      	lsls	r3, r3, #3
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3314      	adds	r3, #20
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010dcc:	78fb      	ldrb	r3, [r7, #3]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f000 8086 	beq.w	8010ee0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010dd4:	4948      	ldr	r1, [pc, #288]	; (8010ef8 <etharp_tmr+0x14c>)
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	4613      	mov	r3, r2
 8010dda:	005b      	lsls	r3, r3, #1
 8010ddc:	4413      	add	r3, r2
 8010dde:	00db      	lsls	r3, r3, #3
 8010de0:	440b      	add	r3, r1
 8010de2:	3312      	adds	r3, #18
 8010de4:	881b      	ldrh	r3, [r3, #0]
 8010de6:	3301      	adds	r3, #1
 8010de8:	b298      	uxth	r0, r3
 8010dea:	4943      	ldr	r1, [pc, #268]	; (8010ef8 <etharp_tmr+0x14c>)
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	4613      	mov	r3, r2
 8010df0:	005b      	lsls	r3, r3, #1
 8010df2:	4413      	add	r3, r2
 8010df4:	00db      	lsls	r3, r3, #3
 8010df6:	440b      	add	r3, r1
 8010df8:	3312      	adds	r3, #18
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010dfe:	493e      	ldr	r1, [pc, #248]	; (8010ef8 <etharp_tmr+0x14c>)
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	4613      	mov	r3, r2
 8010e04:	005b      	lsls	r3, r3, #1
 8010e06:	4413      	add	r3, r2
 8010e08:	00db      	lsls	r3, r3, #3
 8010e0a:	440b      	add	r3, r1
 8010e0c:	3312      	adds	r3, #18
 8010e0e:	881b      	ldrh	r3, [r3, #0]
 8010e10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010e14:	d215      	bcs.n	8010e42 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e16:	4938      	ldr	r1, [pc, #224]	; (8010ef8 <etharp_tmr+0x14c>)
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	4413      	add	r3, r2
 8010e20:	00db      	lsls	r3, r3, #3
 8010e22:	440b      	add	r3, r1
 8010e24:	3314      	adds	r3, #20
 8010e26:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	d10e      	bne.n	8010e4a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010e2c:	4932      	ldr	r1, [pc, #200]	; (8010ef8 <etharp_tmr+0x14c>)
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	4613      	mov	r3, r2
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	4413      	add	r3, r2
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	440b      	add	r3, r1
 8010e3a:	3312      	adds	r3, #18
 8010e3c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e3e:	2b04      	cmp	r3, #4
 8010e40:	d903      	bls.n	8010e4a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff ff80 	bl	8010d48 <etharp_free_entry>
 8010e48:	e04a      	b.n	8010ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010e4a:	492b      	ldr	r1, [pc, #172]	; (8010ef8 <etharp_tmr+0x14c>)
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	4613      	mov	r3, r2
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	4413      	add	r3, r2
 8010e54:	00db      	lsls	r3, r3, #3
 8010e56:	440b      	add	r3, r1
 8010e58:	3314      	adds	r3, #20
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2b03      	cmp	r3, #3
 8010e5e:	d10a      	bne.n	8010e76 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010e60:	4925      	ldr	r1, [pc, #148]	; (8010ef8 <etharp_tmr+0x14c>)
 8010e62:	687a      	ldr	r2, [r7, #4]
 8010e64:	4613      	mov	r3, r2
 8010e66:	005b      	lsls	r3, r3, #1
 8010e68:	4413      	add	r3, r2
 8010e6a:	00db      	lsls	r3, r3, #3
 8010e6c:	440b      	add	r3, r1
 8010e6e:	3314      	adds	r3, #20
 8010e70:	2204      	movs	r2, #4
 8010e72:	701a      	strb	r2, [r3, #0]
 8010e74:	e034      	b.n	8010ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010e76:	4920      	ldr	r1, [pc, #128]	; (8010ef8 <etharp_tmr+0x14c>)
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	005b      	lsls	r3, r3, #1
 8010e7e:	4413      	add	r3, r2
 8010e80:	00db      	lsls	r3, r3, #3
 8010e82:	440b      	add	r3, r1
 8010e84:	3314      	adds	r3, #20
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	2b04      	cmp	r3, #4
 8010e8a:	d10a      	bne.n	8010ea2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010e8c:	491a      	ldr	r1, [pc, #104]	; (8010ef8 <etharp_tmr+0x14c>)
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	4613      	mov	r3, r2
 8010e92:	005b      	lsls	r3, r3, #1
 8010e94:	4413      	add	r3, r2
 8010e96:	00db      	lsls	r3, r3, #3
 8010e98:	440b      	add	r3, r1
 8010e9a:	3314      	adds	r3, #20
 8010e9c:	2202      	movs	r2, #2
 8010e9e:	701a      	strb	r2, [r3, #0]
 8010ea0:	e01e      	b.n	8010ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010ea2:	4915      	ldr	r1, [pc, #84]	; (8010ef8 <etharp_tmr+0x14c>)
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	4613      	mov	r3, r2
 8010ea8:	005b      	lsls	r3, r3, #1
 8010eaa:	4413      	add	r3, r2
 8010eac:	00db      	lsls	r3, r3, #3
 8010eae:	440b      	add	r3, r1
 8010eb0:	3314      	adds	r3, #20
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d113      	bne.n	8010ee0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010eb8:	490f      	ldr	r1, [pc, #60]	; (8010ef8 <etharp_tmr+0x14c>)
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	4613      	mov	r3, r2
 8010ebe:	005b      	lsls	r3, r3, #1
 8010ec0:	4413      	add	r3, r2
 8010ec2:	00db      	lsls	r3, r3, #3
 8010ec4:	440b      	add	r3, r1
 8010ec6:	3308      	adds	r3, #8
 8010ec8:	6818      	ldr	r0, [r3, #0]
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	4413      	add	r3, r2
 8010ed2:	00db      	lsls	r3, r3, #3
 8010ed4:	4a08      	ldr	r2, [pc, #32]	; (8010ef8 <etharp_tmr+0x14c>)
 8010ed6:	4413      	add	r3, r2
 8010ed8:	3304      	adds	r3, #4
 8010eda:	4619      	mov	r1, r3
 8010edc:	f000 fe6e 	bl	8011bbc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	607b      	str	r3, [r7, #4]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2b09      	cmp	r3, #9
 8010eea:	f77f af65 	ble.w	8010db8 <etharp_tmr+0xc>
      }
    }
  }
}
 8010eee:	bf00      	nop
 8010ef0:	bf00      	nop
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}
 8010ef8:	20008f14 	.word	0x20008f14

08010efc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b08a      	sub	sp, #40	; 0x28
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	460b      	mov	r3, r1
 8010f06:	607a      	str	r2, [r7, #4]
 8010f08:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010f0a:	230a      	movs	r3, #10
 8010f0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010f0e:	230a      	movs	r3, #10
 8010f10:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010f12:	230a      	movs	r3, #10
 8010f14:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010f1a:	230a      	movs	r3, #10
 8010f1c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	83bb      	strh	r3, [r7, #28]
 8010f22:	2300      	movs	r3, #0
 8010f24:	837b      	strh	r3, [r7, #26]
 8010f26:	2300      	movs	r3, #0
 8010f28:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	843b      	strh	r3, [r7, #32]
 8010f2e:	e0ae      	b.n	801108e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010f30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f34:	49a6      	ldr	r1, [pc, #664]	; (80111d0 <etharp_find_entry+0x2d4>)
 8010f36:	4613      	mov	r3, r2
 8010f38:	005b      	lsls	r3, r3, #1
 8010f3a:	4413      	add	r3, r2
 8010f3c:	00db      	lsls	r3, r3, #3
 8010f3e:	440b      	add	r3, r1
 8010f40:	3314      	adds	r3, #20
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010f46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010f4a:	2b0a      	cmp	r3, #10
 8010f4c:	d105      	bne.n	8010f5a <etharp_find_entry+0x5e>
 8010f4e:	7dfb      	ldrb	r3, [r7, #23]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d102      	bne.n	8010f5a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010f54:	8c3b      	ldrh	r3, [r7, #32]
 8010f56:	847b      	strh	r3, [r7, #34]	; 0x22
 8010f58:	e095      	b.n	8011086 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010f5a:	7dfb      	ldrb	r3, [r7, #23]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 8092 	beq.w	8011086 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010f62:	7dfb      	ldrb	r3, [r7, #23]
 8010f64:	2b01      	cmp	r3, #1
 8010f66:	d009      	beq.n	8010f7c <etharp_find_entry+0x80>
 8010f68:	7dfb      	ldrb	r3, [r7, #23]
 8010f6a:	2b01      	cmp	r3, #1
 8010f6c:	d806      	bhi.n	8010f7c <etharp_find_entry+0x80>
 8010f6e:	4b99      	ldr	r3, [pc, #612]	; (80111d4 <etharp_find_entry+0x2d8>)
 8010f70:	f240 1223 	movw	r2, #291	; 0x123
 8010f74:	4998      	ldr	r1, [pc, #608]	; (80111d8 <etharp_find_entry+0x2dc>)
 8010f76:	4899      	ldr	r0, [pc, #612]	; (80111dc <etharp_find_entry+0x2e0>)
 8010f78:	f002 fa10 	bl	801339c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d020      	beq.n	8010fc4 <etharp_find_entry+0xc8>
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	6819      	ldr	r1, [r3, #0]
 8010f86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f8a:	4891      	ldr	r0, [pc, #580]	; (80111d0 <etharp_find_entry+0x2d4>)
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	4413      	add	r3, r2
 8010f92:	00db      	lsls	r3, r3, #3
 8010f94:	4403      	add	r3, r0
 8010f96:	3304      	adds	r3, #4
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4299      	cmp	r1, r3
 8010f9c:	d112      	bne.n	8010fc4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d00c      	beq.n	8010fbe <etharp_find_entry+0xc2>
 8010fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fa8:	4989      	ldr	r1, [pc, #548]	; (80111d0 <etharp_find_entry+0x2d4>)
 8010faa:	4613      	mov	r3, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4413      	add	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3308      	adds	r3, #8
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d102      	bne.n	8010fc4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010fbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010fc2:	e100      	b.n	80111c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010fc4:	7dfb      	ldrb	r3, [r7, #23]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d140      	bne.n	801104c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010fca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fce:	4980      	ldr	r1, [pc, #512]	; (80111d0 <etharp_find_entry+0x2d4>)
 8010fd0:	4613      	mov	r3, r2
 8010fd2:	005b      	lsls	r3, r3, #1
 8010fd4:	4413      	add	r3, r2
 8010fd6:	00db      	lsls	r3, r3, #3
 8010fd8:	440b      	add	r3, r1
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d01a      	beq.n	8011016 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010fe0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fe4:	497a      	ldr	r1, [pc, #488]	; (80111d0 <etharp_find_entry+0x2d4>)
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	4413      	add	r3, r2
 8010fec:	00db      	lsls	r3, r3, #3
 8010fee:	440b      	add	r3, r1
 8010ff0:	3312      	adds	r3, #18
 8010ff2:	881b      	ldrh	r3, [r3, #0]
 8010ff4:	8bba      	ldrh	r2, [r7, #28]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d845      	bhi.n	8011086 <etharp_find_entry+0x18a>
            old_queue = i;
 8010ffa:	8c3b      	ldrh	r3, [r7, #32]
 8010ffc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010ffe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011002:	4973      	ldr	r1, [pc, #460]	; (80111d0 <etharp_find_entry+0x2d4>)
 8011004:	4613      	mov	r3, r2
 8011006:	005b      	lsls	r3, r3, #1
 8011008:	4413      	add	r3, r2
 801100a:	00db      	lsls	r3, r3, #3
 801100c:	440b      	add	r3, r1
 801100e:	3312      	adds	r3, #18
 8011010:	881b      	ldrh	r3, [r3, #0]
 8011012:	83bb      	strh	r3, [r7, #28]
 8011014:	e037      	b.n	8011086 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011016:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801101a:	496d      	ldr	r1, [pc, #436]	; (80111d0 <etharp_find_entry+0x2d4>)
 801101c:	4613      	mov	r3, r2
 801101e:	005b      	lsls	r3, r3, #1
 8011020:	4413      	add	r3, r2
 8011022:	00db      	lsls	r3, r3, #3
 8011024:	440b      	add	r3, r1
 8011026:	3312      	adds	r3, #18
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	8b7a      	ldrh	r2, [r7, #26]
 801102c:	429a      	cmp	r2, r3
 801102e:	d82a      	bhi.n	8011086 <etharp_find_entry+0x18a>
            old_pending = i;
 8011030:	8c3b      	ldrh	r3, [r7, #32]
 8011032:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011038:	4965      	ldr	r1, [pc, #404]	; (80111d0 <etharp_find_entry+0x2d4>)
 801103a:	4613      	mov	r3, r2
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	4413      	add	r3, r2
 8011040:	00db      	lsls	r3, r3, #3
 8011042:	440b      	add	r3, r1
 8011044:	3312      	adds	r3, #18
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	837b      	strh	r3, [r7, #26]
 801104a:	e01c      	b.n	8011086 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801104c:	7dfb      	ldrb	r3, [r7, #23]
 801104e:	2b01      	cmp	r3, #1
 8011050:	d919      	bls.n	8011086 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011056:	495e      	ldr	r1, [pc, #376]	; (80111d0 <etharp_find_entry+0x2d4>)
 8011058:	4613      	mov	r3, r2
 801105a:	005b      	lsls	r3, r3, #1
 801105c:	4413      	add	r3, r2
 801105e:	00db      	lsls	r3, r3, #3
 8011060:	440b      	add	r3, r1
 8011062:	3312      	adds	r3, #18
 8011064:	881b      	ldrh	r3, [r3, #0]
 8011066:	8b3a      	ldrh	r2, [r7, #24]
 8011068:	429a      	cmp	r2, r3
 801106a:	d80c      	bhi.n	8011086 <etharp_find_entry+0x18a>
            old_stable = i;
 801106c:	8c3b      	ldrh	r3, [r7, #32]
 801106e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011070:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011074:	4956      	ldr	r1, [pc, #344]	; (80111d0 <etharp_find_entry+0x2d4>)
 8011076:	4613      	mov	r3, r2
 8011078:	005b      	lsls	r3, r3, #1
 801107a:	4413      	add	r3, r2
 801107c:	00db      	lsls	r3, r3, #3
 801107e:	440b      	add	r3, r1
 8011080:	3312      	adds	r3, #18
 8011082:	881b      	ldrh	r3, [r3, #0]
 8011084:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011086:	8c3b      	ldrh	r3, [r7, #32]
 8011088:	3301      	adds	r3, #1
 801108a:	b29b      	uxth	r3, r3
 801108c:	843b      	strh	r3, [r7, #32]
 801108e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011092:	2b09      	cmp	r3, #9
 8011094:	f77f af4c 	ble.w	8010f30 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011098:	7afb      	ldrb	r3, [r7, #11]
 801109a:	f003 0302 	and.w	r3, r3, #2
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d108      	bne.n	80110b4 <etharp_find_entry+0x1b8>
 80110a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110a6:	2b0a      	cmp	r3, #10
 80110a8:	d107      	bne.n	80110ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80110aa:	7afb      	ldrb	r3, [r7, #11]
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d102      	bne.n	80110ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80110b4:	f04f 33ff 	mov.w	r3, #4294967295
 80110b8:	e085      	b.n	80111c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80110ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110be:	2b09      	cmp	r3, #9
 80110c0:	dc02      	bgt.n	80110c8 <etharp_find_entry+0x1cc>
    i = empty;
 80110c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110c4:	843b      	strh	r3, [r7, #32]
 80110c6:	e039      	b.n	801113c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80110c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80110cc:	2b09      	cmp	r3, #9
 80110ce:	dc14      	bgt.n	80110fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80110d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80110d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110d8:	493d      	ldr	r1, [pc, #244]	; (80111d0 <etharp_find_entry+0x2d4>)
 80110da:	4613      	mov	r3, r2
 80110dc:	005b      	lsls	r3, r3, #1
 80110de:	4413      	add	r3, r2
 80110e0:	00db      	lsls	r3, r3, #3
 80110e2:	440b      	add	r3, r1
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d018      	beq.n	801111c <etharp_find_entry+0x220>
 80110ea:	4b3a      	ldr	r3, [pc, #232]	; (80111d4 <etharp_find_entry+0x2d8>)
 80110ec:	f240 126d 	movw	r2, #365	; 0x16d
 80110f0:	493b      	ldr	r1, [pc, #236]	; (80111e0 <etharp_find_entry+0x2e4>)
 80110f2:	483a      	ldr	r0, [pc, #232]	; (80111dc <etharp_find_entry+0x2e0>)
 80110f4:	f002 f952 	bl	801339c <iprintf>
 80110f8:	e010      	b.n	801111c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80110fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80110fe:	2b09      	cmp	r3, #9
 8011100:	dc02      	bgt.n	8011108 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011104:	843b      	strh	r3, [r7, #32]
 8011106:	e009      	b.n	801111c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011108:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801110c:	2b09      	cmp	r3, #9
 801110e:	dc02      	bgt.n	8011116 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011110:	8bfb      	ldrh	r3, [r7, #30]
 8011112:	843b      	strh	r3, [r7, #32]
 8011114:	e002      	b.n	801111c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011116:	f04f 33ff 	mov.w	r3, #4294967295
 801111a:	e054      	b.n	80111c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801111c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011120:	2b09      	cmp	r3, #9
 8011122:	dd06      	ble.n	8011132 <etharp_find_entry+0x236>
 8011124:	4b2b      	ldr	r3, [pc, #172]	; (80111d4 <etharp_find_entry+0x2d8>)
 8011126:	f240 127f 	movw	r2, #383	; 0x17f
 801112a:	492e      	ldr	r1, [pc, #184]	; (80111e4 <etharp_find_entry+0x2e8>)
 801112c:	482b      	ldr	r0, [pc, #172]	; (80111dc <etharp_find_entry+0x2e0>)
 801112e:	f002 f935 	bl	801339c <iprintf>
    etharp_free_entry(i);
 8011132:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011136:	4618      	mov	r0, r3
 8011138:	f7ff fe06 	bl	8010d48 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801113c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011140:	2b09      	cmp	r3, #9
 8011142:	dd06      	ble.n	8011152 <etharp_find_entry+0x256>
 8011144:	4b23      	ldr	r3, [pc, #140]	; (80111d4 <etharp_find_entry+0x2d8>)
 8011146:	f240 1283 	movw	r2, #387	; 0x183
 801114a:	4926      	ldr	r1, [pc, #152]	; (80111e4 <etharp_find_entry+0x2e8>)
 801114c:	4823      	ldr	r0, [pc, #140]	; (80111dc <etharp_find_entry+0x2e0>)
 801114e:	f002 f925 	bl	801339c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011156:	491e      	ldr	r1, [pc, #120]	; (80111d0 <etharp_find_entry+0x2d4>)
 8011158:	4613      	mov	r3, r2
 801115a:	005b      	lsls	r3, r3, #1
 801115c:	4413      	add	r3, r2
 801115e:	00db      	lsls	r3, r3, #3
 8011160:	440b      	add	r3, r1
 8011162:	3314      	adds	r3, #20
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d006      	beq.n	8011178 <etharp_find_entry+0x27c>
 801116a:	4b1a      	ldr	r3, [pc, #104]	; (80111d4 <etharp_find_entry+0x2d8>)
 801116c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011170:	491d      	ldr	r1, [pc, #116]	; (80111e8 <etharp_find_entry+0x2ec>)
 8011172:	481a      	ldr	r0, [pc, #104]	; (80111dc <etharp_find_entry+0x2e0>)
 8011174:	f002 f912 	bl	801339c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d00b      	beq.n	8011196 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801117e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	6819      	ldr	r1, [r3, #0]
 8011186:	4812      	ldr	r0, [pc, #72]	; (80111d0 <etharp_find_entry+0x2d4>)
 8011188:	4613      	mov	r3, r2
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	4413      	add	r3, r2
 801118e:	00db      	lsls	r3, r3, #3
 8011190:	4403      	add	r3, r0
 8011192:	3304      	adds	r3, #4
 8011194:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801119a:	490d      	ldr	r1, [pc, #52]	; (80111d0 <etharp_find_entry+0x2d4>)
 801119c:	4613      	mov	r3, r2
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	4413      	add	r3, r2
 80111a2:	00db      	lsls	r3, r3, #3
 80111a4:	440b      	add	r3, r1
 80111a6:	3312      	adds	r3, #18
 80111a8:	2200      	movs	r2, #0
 80111aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80111ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111b0:	4907      	ldr	r1, [pc, #28]	; (80111d0 <etharp_find_entry+0x2d4>)
 80111b2:	4613      	mov	r3, r2
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	4413      	add	r3, r2
 80111b8:	00db      	lsls	r3, r3, #3
 80111ba:	440b      	add	r3, r1
 80111bc:	3308      	adds	r3, #8
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80111c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3728      	adds	r7, #40	; 0x28
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	20008f14 	.word	0x20008f14
 80111d4:	08016b04 	.word	0x08016b04
 80111d8:	08016b3c 	.word	0x08016b3c
 80111dc:	08016b7c 	.word	0x08016b7c
 80111e0:	08016ba4 	.word	0x08016ba4
 80111e4:	08016bbc 	.word	0x08016bbc
 80111e8:	08016bd0 	.word	0x08016bd0

080111ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b088      	sub	sp, #32
 80111f0:	af02      	add	r7, sp, #8
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011200:	2b06      	cmp	r3, #6
 8011202:	d006      	beq.n	8011212 <etharp_update_arp_entry+0x26>
 8011204:	4b48      	ldr	r3, [pc, #288]	; (8011328 <etharp_update_arp_entry+0x13c>)
 8011206:	f240 12a9 	movw	r2, #425	; 0x1a9
 801120a:	4948      	ldr	r1, [pc, #288]	; (801132c <etharp_update_arp_entry+0x140>)
 801120c:	4848      	ldr	r0, [pc, #288]	; (8011330 <etharp_update_arp_entry+0x144>)
 801120e:	f002 f8c5 	bl	801339c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d012      	beq.n	801123e <etharp_update_arp_entry+0x52>
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d00e      	beq.n	801123e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	68f9      	ldr	r1, [r7, #12]
 8011226:	4618      	mov	r0, r3
 8011228:	f001 f8fe 	bl	8012428 <ip4_addr_isbroadcast_u32>
 801122c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801122e:	2b00      	cmp	r3, #0
 8011230:	d105      	bne.n	801123e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801123a:	2be0      	cmp	r3, #224	; 0xe0
 801123c:	d102      	bne.n	8011244 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801123e:	f06f 030f 	mvn.w	r3, #15
 8011242:	e06c      	b.n	801131e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011244:	78fb      	ldrb	r3, [r7, #3]
 8011246:	68fa      	ldr	r2, [r7, #12]
 8011248:	4619      	mov	r1, r3
 801124a:	68b8      	ldr	r0, [r7, #8]
 801124c:	f7ff fe56 	bl	8010efc <etharp_find_entry>
 8011250:	4603      	mov	r3, r0
 8011252:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011254:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011258:	2b00      	cmp	r3, #0
 801125a:	da02      	bge.n	8011262 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801125c:	8afb      	ldrh	r3, [r7, #22]
 801125e:	b25b      	sxtb	r3, r3
 8011260:	e05d      	b.n	801131e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011266:	4933      	ldr	r1, [pc, #204]	; (8011334 <etharp_update_arp_entry+0x148>)
 8011268:	4613      	mov	r3, r2
 801126a:	005b      	lsls	r3, r3, #1
 801126c:	4413      	add	r3, r2
 801126e:	00db      	lsls	r3, r3, #3
 8011270:	440b      	add	r3, r1
 8011272:	3314      	adds	r3, #20
 8011274:	2202      	movs	r2, #2
 8011276:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011278:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801127c:	492d      	ldr	r1, [pc, #180]	; (8011334 <etharp_update_arp_entry+0x148>)
 801127e:	4613      	mov	r3, r2
 8011280:	005b      	lsls	r3, r3, #1
 8011282:	4413      	add	r3, r2
 8011284:	00db      	lsls	r3, r3, #3
 8011286:	440b      	add	r3, r1
 8011288:	3308      	adds	r3, #8
 801128a:	68fa      	ldr	r2, [r7, #12]
 801128c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801128e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011292:	4613      	mov	r3, r2
 8011294:	005b      	lsls	r3, r3, #1
 8011296:	4413      	add	r3, r2
 8011298:	00db      	lsls	r3, r3, #3
 801129a:	3308      	adds	r3, #8
 801129c:	4a25      	ldr	r2, [pc, #148]	; (8011334 <etharp_update_arp_entry+0x148>)
 801129e:	4413      	add	r3, r2
 80112a0:	3304      	adds	r3, #4
 80112a2:	2206      	movs	r2, #6
 80112a4:	6879      	ldr	r1, [r7, #4]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f002 f848 	bl	801333c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80112ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112b0:	4920      	ldr	r1, [pc, #128]	; (8011334 <etharp_update_arp_entry+0x148>)
 80112b2:	4613      	mov	r3, r2
 80112b4:	005b      	lsls	r3, r3, #1
 80112b6:	4413      	add	r3, r2
 80112b8:	00db      	lsls	r3, r3, #3
 80112ba:	440b      	add	r3, r1
 80112bc:	3312      	adds	r3, #18
 80112be:	2200      	movs	r2, #0
 80112c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80112c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112c6:	491b      	ldr	r1, [pc, #108]	; (8011334 <etharp_update_arp_entry+0x148>)
 80112c8:	4613      	mov	r3, r2
 80112ca:	005b      	lsls	r3, r3, #1
 80112cc:	4413      	add	r3, r2
 80112ce:	00db      	lsls	r3, r3, #3
 80112d0:	440b      	add	r3, r1
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d021      	beq.n	801131c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80112d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112dc:	4915      	ldr	r1, [pc, #84]	; (8011334 <etharp_update_arp_entry+0x148>)
 80112de:	4613      	mov	r3, r2
 80112e0:	005b      	lsls	r3, r3, #1
 80112e2:	4413      	add	r3, r2
 80112e4:	00db      	lsls	r3, r3, #3
 80112e6:	440b      	add	r3, r1
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80112ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112f0:	4910      	ldr	r1, [pc, #64]	; (8011334 <etharp_update_arp_entry+0x148>)
 80112f2:	4613      	mov	r3, r2
 80112f4:	005b      	lsls	r3, r3, #1
 80112f6:	4413      	add	r3, r2
 80112f8:	00db      	lsls	r3, r3, #3
 80112fa:	440b      	add	r3, r1
 80112fc:	2200      	movs	r2, #0
 80112fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801130a:	9300      	str	r3, [sp, #0]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6939      	ldr	r1, [r7, #16]
 8011310:	68f8      	ldr	r0, [r7, #12]
 8011312:	f001 ff97 	bl	8013244 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011316:	6938      	ldr	r0, [r7, #16]
 8011318:	f7f9 f9cc 	bl	800a6b4 <pbuf_free>
  }
  return ERR_OK;
 801131c:	2300      	movs	r3, #0
}
 801131e:	4618      	mov	r0, r3
 8011320:	3718      	adds	r7, #24
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	08016b04 	.word	0x08016b04
 801132c:	08016bfc 	.word	0x08016bfc
 8011330:	08016b7c 	.word	0x08016b7c
 8011334:	20008f14 	.word	0x20008f14

08011338 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011340:	2300      	movs	r3, #0
 8011342:	60fb      	str	r3, [r7, #12]
 8011344:	e01e      	b.n	8011384 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011346:	4913      	ldr	r1, [pc, #76]	; (8011394 <etharp_cleanup_netif+0x5c>)
 8011348:	68fa      	ldr	r2, [r7, #12]
 801134a:	4613      	mov	r3, r2
 801134c:	005b      	lsls	r3, r3, #1
 801134e:	4413      	add	r3, r2
 8011350:	00db      	lsls	r3, r3, #3
 8011352:	440b      	add	r3, r1
 8011354:	3314      	adds	r3, #20
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801135a:	7afb      	ldrb	r3, [r7, #11]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d00e      	beq.n	801137e <etharp_cleanup_netif+0x46>
 8011360:	490c      	ldr	r1, [pc, #48]	; (8011394 <etharp_cleanup_netif+0x5c>)
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	4613      	mov	r3, r2
 8011366:	005b      	lsls	r3, r3, #1
 8011368:	4413      	add	r3, r2
 801136a:	00db      	lsls	r3, r3, #3
 801136c:	440b      	add	r3, r1
 801136e:	3308      	adds	r3, #8
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	429a      	cmp	r2, r3
 8011376:	d102      	bne.n	801137e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011378:	68f8      	ldr	r0, [r7, #12]
 801137a:	f7ff fce5 	bl	8010d48 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	3301      	adds	r3, #1
 8011382:	60fb      	str	r3, [r7, #12]
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2b09      	cmp	r3, #9
 8011388:	dddd      	ble.n	8011346 <etharp_cleanup_netif+0xe>
    }
  }
}
 801138a:	bf00      	nop
 801138c:	bf00      	nop
 801138e:	3710      	adds	r7, #16
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	20008f14 	.word	0x20008f14

08011398 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011398:	b5b0      	push	{r4, r5, r7, lr}
 801139a:	b08a      	sub	sp, #40	; 0x28
 801139c:	af04      	add	r7, sp, #16
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d107      	bne.n	80113b8 <etharp_input+0x20>
 80113a8:	4b3d      	ldr	r3, [pc, #244]	; (80114a0 <etharp_input+0x108>)
 80113aa:	f240 228a 	movw	r2, #650	; 0x28a
 80113ae:	493d      	ldr	r1, [pc, #244]	; (80114a4 <etharp_input+0x10c>)
 80113b0:	483d      	ldr	r0, [pc, #244]	; (80114a8 <etharp_input+0x110>)
 80113b2:	f001 fff3 	bl	801339c <iprintf>
 80113b6:	e06f      	b.n	8011498 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113c8:	d10c      	bne.n	80113e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80113ce:	2b06      	cmp	r3, #6
 80113d0:	d108      	bne.n	80113e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80113d6:	2b04      	cmp	r3, #4
 80113d8:	d104      	bne.n	80113e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	885b      	ldrh	r3, [r3, #2]
 80113de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80113e0:	2b08      	cmp	r3, #8
 80113e2:	d003      	beq.n	80113ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f7f9 f965 	bl	800a6b4 <pbuf_free>
    return;
 80113ea:	e055      	b.n	8011498 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	330e      	adds	r3, #14
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	3318      	adds	r3, #24
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	3304      	adds	r3, #4
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d102      	bne.n	801140c <etharp_input+0x74>
    for_us = 0;
 8011406:	2300      	movs	r3, #0
 8011408:	75fb      	strb	r3, [r7, #23]
 801140a:	e009      	b.n	8011420 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801140c:	68ba      	ldr	r2, [r7, #8]
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	3304      	adds	r3, #4
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	bf0c      	ite	eq
 8011418:	2301      	moveq	r3, #1
 801141a:	2300      	movne	r3, #0
 801141c:	b2db      	uxtb	r3, r3
 801141e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	f103 0208 	add.w	r2, r3, #8
 8011426:	7dfb      	ldrb	r3, [r7, #23]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d001      	beq.n	8011430 <etharp_input+0x98>
 801142c:	2301      	movs	r3, #1
 801142e:	e000      	b.n	8011432 <etharp_input+0x9a>
 8011430:	2302      	movs	r3, #2
 8011432:	f107 010c 	add.w	r1, r7, #12
 8011436:	6838      	ldr	r0, [r7, #0]
 8011438:	f7ff fed8 	bl	80111ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	88db      	ldrh	r3, [r3, #6]
 8011440:	b29b      	uxth	r3, r3
 8011442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011446:	d003      	beq.n	8011450 <etharp_input+0xb8>
 8011448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801144c:	d01e      	beq.n	801148c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801144e:	e020      	b.n	8011492 <etharp_input+0xfa>
      if (for_us) {
 8011450:	7dfb      	ldrb	r3, [r7, #23]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d01c      	beq.n	8011490 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801146c:	693a      	ldr	r2, [r7, #16]
 801146e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011470:	2102      	movs	r1, #2
 8011472:	9103      	str	r1, [sp, #12]
 8011474:	f107 010c 	add.w	r1, r7, #12
 8011478:	9102      	str	r1, [sp, #8]
 801147a:	9201      	str	r2, [sp, #4]
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	462b      	mov	r3, r5
 8011480:	4622      	mov	r2, r4
 8011482:	4601      	mov	r1, r0
 8011484:	6838      	ldr	r0, [r7, #0]
 8011486:	f000 faeb 	bl	8011a60 <etharp_raw>
      break;
 801148a:	e001      	b.n	8011490 <etharp_input+0xf8>
      break;
 801148c:	bf00      	nop
 801148e:	e000      	b.n	8011492 <etharp_input+0xfa>
      break;
 8011490:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7f9 f90e 	bl	800a6b4 <pbuf_free>
}
 8011498:	3718      	adds	r7, #24
 801149a:	46bd      	mov	sp, r7
 801149c:	bdb0      	pop	{r4, r5, r7, pc}
 801149e:	bf00      	nop
 80114a0:	08016b04 	.word	0x08016b04
 80114a4:	08016c54 	.word	0x08016c54
 80114a8:	08016b7c 	.word	0x08016b7c

080114ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b086      	sub	sp, #24
 80114b0:	af02      	add	r7, sp, #8
 80114b2:	60f8      	str	r0, [r7, #12]
 80114b4:	60b9      	str	r1, [r7, #8]
 80114b6:	4613      	mov	r3, r2
 80114b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80114ba:	79fa      	ldrb	r2, [r7, #7]
 80114bc:	4944      	ldr	r1, [pc, #272]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 80114be:	4613      	mov	r3, r2
 80114c0:	005b      	lsls	r3, r3, #1
 80114c2:	4413      	add	r3, r2
 80114c4:	00db      	lsls	r3, r3, #3
 80114c6:	440b      	add	r3, r1
 80114c8:	3314      	adds	r3, #20
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d806      	bhi.n	80114de <etharp_output_to_arp_index+0x32>
 80114d0:	4b40      	ldr	r3, [pc, #256]	; (80115d4 <etharp_output_to_arp_index+0x128>)
 80114d2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80114d6:	4940      	ldr	r1, [pc, #256]	; (80115d8 <etharp_output_to_arp_index+0x12c>)
 80114d8:	4840      	ldr	r0, [pc, #256]	; (80115dc <etharp_output_to_arp_index+0x130>)
 80114da:	f001 ff5f 	bl	801339c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80114de:	79fa      	ldrb	r2, [r7, #7]
 80114e0:	493b      	ldr	r1, [pc, #236]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 80114e2:	4613      	mov	r3, r2
 80114e4:	005b      	lsls	r3, r3, #1
 80114e6:	4413      	add	r3, r2
 80114e8:	00db      	lsls	r3, r3, #3
 80114ea:	440b      	add	r3, r1
 80114ec:	3314      	adds	r3, #20
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	2b02      	cmp	r3, #2
 80114f2:	d153      	bne.n	801159c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80114f4:	79fa      	ldrb	r2, [r7, #7]
 80114f6:	4936      	ldr	r1, [pc, #216]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 80114f8:	4613      	mov	r3, r2
 80114fa:	005b      	lsls	r3, r3, #1
 80114fc:	4413      	add	r3, r2
 80114fe:	00db      	lsls	r3, r3, #3
 8011500:	440b      	add	r3, r1
 8011502:	3312      	adds	r3, #18
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801150a:	d919      	bls.n	8011540 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801150c:	79fa      	ldrb	r2, [r7, #7]
 801150e:	4613      	mov	r3, r2
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	4413      	add	r3, r2
 8011514:	00db      	lsls	r3, r3, #3
 8011516:	4a2e      	ldr	r2, [pc, #184]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 8011518:	4413      	add	r3, r2
 801151a:	3304      	adds	r3, #4
 801151c:	4619      	mov	r1, r3
 801151e:	68f8      	ldr	r0, [r7, #12]
 8011520:	f000 fb4c 	bl	8011bbc <etharp_request>
 8011524:	4603      	mov	r3, r0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d138      	bne.n	801159c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801152a:	79fa      	ldrb	r2, [r7, #7]
 801152c:	4928      	ldr	r1, [pc, #160]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 801152e:	4613      	mov	r3, r2
 8011530:	005b      	lsls	r3, r3, #1
 8011532:	4413      	add	r3, r2
 8011534:	00db      	lsls	r3, r3, #3
 8011536:	440b      	add	r3, r1
 8011538:	3314      	adds	r3, #20
 801153a:	2203      	movs	r2, #3
 801153c:	701a      	strb	r2, [r3, #0]
 801153e:	e02d      	b.n	801159c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011540:	79fa      	ldrb	r2, [r7, #7]
 8011542:	4923      	ldr	r1, [pc, #140]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 8011544:	4613      	mov	r3, r2
 8011546:	005b      	lsls	r3, r3, #1
 8011548:	4413      	add	r3, r2
 801154a:	00db      	lsls	r3, r3, #3
 801154c:	440b      	add	r3, r1
 801154e:	3312      	adds	r3, #18
 8011550:	881b      	ldrh	r3, [r3, #0]
 8011552:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011556:	d321      	bcc.n	801159c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011558:	79fa      	ldrb	r2, [r7, #7]
 801155a:	4613      	mov	r3, r2
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	4413      	add	r3, r2
 8011560:	00db      	lsls	r3, r3, #3
 8011562:	4a1b      	ldr	r2, [pc, #108]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 8011564:	4413      	add	r3, r2
 8011566:	1d19      	adds	r1, r3, #4
 8011568:	79fa      	ldrb	r2, [r7, #7]
 801156a:	4613      	mov	r3, r2
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	4413      	add	r3, r2
 8011570:	00db      	lsls	r3, r3, #3
 8011572:	3308      	adds	r3, #8
 8011574:	4a16      	ldr	r2, [pc, #88]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 8011576:	4413      	add	r3, r2
 8011578:	3304      	adds	r3, #4
 801157a:	461a      	mov	r2, r3
 801157c:	68f8      	ldr	r0, [r7, #12]
 801157e:	f000 fafb 	bl	8011b78 <etharp_request_dst>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d109      	bne.n	801159c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011588:	79fa      	ldrb	r2, [r7, #7]
 801158a:	4911      	ldr	r1, [pc, #68]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 801158c:	4613      	mov	r3, r2
 801158e:	005b      	lsls	r3, r3, #1
 8011590:	4413      	add	r3, r2
 8011592:	00db      	lsls	r3, r3, #3
 8011594:	440b      	add	r3, r1
 8011596:	3314      	adds	r3, #20
 8011598:	2203      	movs	r2, #3
 801159a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80115a2:	79fa      	ldrb	r2, [r7, #7]
 80115a4:	4613      	mov	r3, r2
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	4413      	add	r3, r2
 80115aa:	00db      	lsls	r3, r3, #3
 80115ac:	3308      	adds	r3, #8
 80115ae:	4a08      	ldr	r2, [pc, #32]	; (80115d0 <etharp_output_to_arp_index+0x124>)
 80115b0:	4413      	add	r3, r2
 80115b2:	3304      	adds	r3, #4
 80115b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115b8:	9200      	str	r2, [sp, #0]
 80115ba:	460a      	mov	r2, r1
 80115bc:	68b9      	ldr	r1, [r7, #8]
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f001 fe40 	bl	8013244 <ethernet_output>
 80115c4:	4603      	mov	r3, r0
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	20008f14 	.word	0x20008f14
 80115d4:	08016b04 	.word	0x08016b04
 80115d8:	08016c74 	.word	0x08016c74
 80115dc:	08016b7c 	.word	0x08016b7c

080115e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b08a      	sub	sp, #40	; 0x28
 80115e4:	af02      	add	r7, sp, #8
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d106      	bne.n	8011604 <etharp_output+0x24>
 80115f6:	4b73      	ldr	r3, [pc, #460]	; (80117c4 <etharp_output+0x1e4>)
 80115f8:	f240 321e 	movw	r2, #798	; 0x31e
 80115fc:	4972      	ldr	r1, [pc, #456]	; (80117c8 <etharp_output+0x1e8>)
 80115fe:	4873      	ldr	r0, [pc, #460]	; (80117cc <etharp_output+0x1ec>)
 8011600:	f001 fecc 	bl	801339c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d106      	bne.n	8011618 <etharp_output+0x38>
 801160a:	4b6e      	ldr	r3, [pc, #440]	; (80117c4 <etharp_output+0x1e4>)
 801160c:	f240 321f 	movw	r2, #799	; 0x31f
 8011610:	496f      	ldr	r1, [pc, #444]	; (80117d0 <etharp_output+0x1f0>)
 8011612:	486e      	ldr	r0, [pc, #440]	; (80117cc <etharp_output+0x1ec>)
 8011614:	f001 fec2 	bl	801339c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d106      	bne.n	801162c <etharp_output+0x4c>
 801161e:	4b69      	ldr	r3, [pc, #420]	; (80117c4 <etharp_output+0x1e4>)
 8011620:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011624:	496b      	ldr	r1, [pc, #428]	; (80117d4 <etharp_output+0x1f4>)
 8011626:	4869      	ldr	r0, [pc, #420]	; (80117cc <etharp_output+0x1ec>)
 8011628:	f001 feb8 	bl	801339c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	68f9      	ldr	r1, [r7, #12]
 8011632:	4618      	mov	r0, r3
 8011634:	f000 fef8 	bl	8012428 <ip4_addr_isbroadcast_u32>
 8011638:	4603      	mov	r3, r0
 801163a:	2b00      	cmp	r3, #0
 801163c:	d002      	beq.n	8011644 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801163e:	4b66      	ldr	r3, [pc, #408]	; (80117d8 <etharp_output+0x1f8>)
 8011640:	61fb      	str	r3, [r7, #28]
 8011642:	e0af      	b.n	80117a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801164c:	2be0      	cmp	r3, #224	; 0xe0
 801164e:	d118      	bne.n	8011682 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011650:	2301      	movs	r3, #1
 8011652:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011654:	2300      	movs	r3, #0
 8011656:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011658:	235e      	movs	r3, #94	; 0x5e
 801165a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	3301      	adds	r3, #1
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011666:	b2db      	uxtb	r3, r3
 8011668:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	3302      	adds	r3, #2
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	3303      	adds	r3, #3
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801167a:	f107 0310 	add.w	r3, r7, #16
 801167e:	61fb      	str	r3, [r7, #28]
 8011680:	e090      	b.n	80117a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	3304      	adds	r3, #4
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	405a      	eors	r2, r3
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	3308      	adds	r3, #8
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4013      	ands	r3, r2
 8011696:	2b00      	cmp	r3, #0
 8011698:	d012      	beq.n	80116c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80116a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d00b      	beq.n	80116c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	330c      	adds	r3, #12
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d003      	beq.n	80116ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	330c      	adds	r3, #12
 80116b6:	61bb      	str	r3, [r7, #24]
 80116b8:	e002      	b.n	80116c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80116ba:	f06f 0303 	mvn.w	r3, #3
 80116be:	e07d      	b.n	80117bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80116c0:	4b46      	ldr	r3, [pc, #280]	; (80117dc <etharp_output+0x1fc>)
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	4619      	mov	r1, r3
 80116c6:	4a46      	ldr	r2, [pc, #280]	; (80117e0 <etharp_output+0x200>)
 80116c8:	460b      	mov	r3, r1
 80116ca:	005b      	lsls	r3, r3, #1
 80116cc:	440b      	add	r3, r1
 80116ce:	00db      	lsls	r3, r3, #3
 80116d0:	4413      	add	r3, r2
 80116d2:	3314      	adds	r3, #20
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d925      	bls.n	8011726 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80116da:	4b40      	ldr	r3, [pc, #256]	; (80117dc <etharp_output+0x1fc>)
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	4619      	mov	r1, r3
 80116e0:	4a3f      	ldr	r2, [pc, #252]	; (80117e0 <etharp_output+0x200>)
 80116e2:	460b      	mov	r3, r1
 80116e4:	005b      	lsls	r3, r3, #1
 80116e6:	440b      	add	r3, r1
 80116e8:	00db      	lsls	r3, r3, #3
 80116ea:	4413      	add	r3, r2
 80116ec:	3308      	adds	r3, #8
 80116ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d117      	bne.n	8011726 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80116f6:	69bb      	ldr	r3, [r7, #24]
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	4b38      	ldr	r3, [pc, #224]	; (80117dc <etharp_output+0x1fc>)
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	4618      	mov	r0, r3
 8011700:	4937      	ldr	r1, [pc, #220]	; (80117e0 <etharp_output+0x200>)
 8011702:	4603      	mov	r3, r0
 8011704:	005b      	lsls	r3, r3, #1
 8011706:	4403      	add	r3, r0
 8011708:	00db      	lsls	r3, r3, #3
 801170a:	440b      	add	r3, r1
 801170c:	3304      	adds	r3, #4
 801170e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011710:	429a      	cmp	r2, r3
 8011712:	d108      	bne.n	8011726 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011714:	4b31      	ldr	r3, [pc, #196]	; (80117dc <etharp_output+0x1fc>)
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	461a      	mov	r2, r3
 801171a:	68b9      	ldr	r1, [r7, #8]
 801171c:	68f8      	ldr	r0, [r7, #12]
 801171e:	f7ff fec5 	bl	80114ac <etharp_output_to_arp_index>
 8011722:	4603      	mov	r3, r0
 8011724:	e04a      	b.n	80117bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011726:	2300      	movs	r3, #0
 8011728:	75fb      	strb	r3, [r7, #23]
 801172a:	e031      	b.n	8011790 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801172c:	7dfa      	ldrb	r2, [r7, #23]
 801172e:	492c      	ldr	r1, [pc, #176]	; (80117e0 <etharp_output+0x200>)
 8011730:	4613      	mov	r3, r2
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	4413      	add	r3, r2
 8011736:	00db      	lsls	r3, r3, #3
 8011738:	440b      	add	r3, r1
 801173a:	3314      	adds	r3, #20
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	2b01      	cmp	r3, #1
 8011740:	d923      	bls.n	801178a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011742:	7dfa      	ldrb	r2, [r7, #23]
 8011744:	4926      	ldr	r1, [pc, #152]	; (80117e0 <etharp_output+0x200>)
 8011746:	4613      	mov	r3, r2
 8011748:	005b      	lsls	r3, r3, #1
 801174a:	4413      	add	r3, r2
 801174c:	00db      	lsls	r3, r3, #3
 801174e:	440b      	add	r3, r1
 8011750:	3308      	adds	r3, #8
 8011752:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011754:	68fa      	ldr	r2, [r7, #12]
 8011756:	429a      	cmp	r2, r3
 8011758:	d117      	bne.n	801178a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	6819      	ldr	r1, [r3, #0]
 801175e:	7dfa      	ldrb	r2, [r7, #23]
 8011760:	481f      	ldr	r0, [pc, #124]	; (80117e0 <etharp_output+0x200>)
 8011762:	4613      	mov	r3, r2
 8011764:	005b      	lsls	r3, r3, #1
 8011766:	4413      	add	r3, r2
 8011768:	00db      	lsls	r3, r3, #3
 801176a:	4403      	add	r3, r0
 801176c:	3304      	adds	r3, #4
 801176e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011770:	4299      	cmp	r1, r3
 8011772:	d10a      	bne.n	801178a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011774:	4a19      	ldr	r2, [pc, #100]	; (80117dc <etharp_output+0x1fc>)
 8011776:	7dfb      	ldrb	r3, [r7, #23]
 8011778:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801177a:	7dfb      	ldrb	r3, [r7, #23]
 801177c:	461a      	mov	r2, r3
 801177e:	68b9      	ldr	r1, [r7, #8]
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f7ff fe93 	bl	80114ac <etharp_output_to_arp_index>
 8011786:	4603      	mov	r3, r0
 8011788:	e018      	b.n	80117bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801178a:	7dfb      	ldrb	r3, [r7, #23]
 801178c:	3301      	adds	r3, #1
 801178e:	75fb      	strb	r3, [r7, #23]
 8011790:	7dfb      	ldrb	r3, [r7, #23]
 8011792:	2b09      	cmp	r3, #9
 8011794:	d9ca      	bls.n	801172c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011796:	68ba      	ldr	r2, [r7, #8]
 8011798:	69b9      	ldr	r1, [r7, #24]
 801179a:	68f8      	ldr	r0, [r7, #12]
 801179c:	f000 f822 	bl	80117e4 <etharp_query>
 80117a0:	4603      	mov	r3, r0
 80117a2:	e00b      	b.n	80117bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80117aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80117ae:	9300      	str	r3, [sp, #0]
 80117b0:	69fb      	ldr	r3, [r7, #28]
 80117b2:	68b9      	ldr	r1, [r7, #8]
 80117b4:	68f8      	ldr	r0, [r7, #12]
 80117b6:	f001 fd45 	bl	8013244 <ethernet_output>
 80117ba:	4603      	mov	r3, r0
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3720      	adds	r7, #32
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	08016b04 	.word	0x08016b04
 80117c8:	08016c54 	.word	0x08016c54
 80117cc:	08016b7c 	.word	0x08016b7c
 80117d0:	08016ca4 	.word	0x08016ca4
 80117d4:	08016c44 	.word	0x08016c44
 80117d8:	080172bc 	.word	0x080172bc
 80117dc:	20009004 	.word	0x20009004
 80117e0:	20008f14 	.word	0x20008f14

080117e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b08c      	sub	sp, #48	; 0x30
 80117e8:	af02      	add	r7, sp, #8
 80117ea:	60f8      	str	r0, [r7, #12]
 80117ec:	60b9      	str	r1, [r7, #8]
 80117ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	3326      	adds	r3, #38	; 0x26
 80117f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80117f6:	23ff      	movs	r3, #255	; 0xff
 80117f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80117fc:	2300      	movs	r3, #0
 80117fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	68f9      	ldr	r1, [r7, #12]
 8011806:	4618      	mov	r0, r3
 8011808:	f000 fe0e 	bl	8012428 <ip4_addr_isbroadcast_u32>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d10c      	bne.n	801182c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801181a:	2be0      	cmp	r3, #224	; 0xe0
 801181c:	d006      	beq.n	801182c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d003      	beq.n	801182c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d102      	bne.n	8011832 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801182c:	f06f 030f 	mvn.w	r3, #15
 8011830:	e101      	b.n	8011a36 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011832:	68fa      	ldr	r2, [r7, #12]
 8011834:	2101      	movs	r1, #1
 8011836:	68b8      	ldr	r0, [r7, #8]
 8011838:	f7ff fb60 	bl	8010efc <etharp_find_entry>
 801183c:	4603      	mov	r3, r0
 801183e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011844:	2b00      	cmp	r3, #0
 8011846:	da02      	bge.n	801184e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011848:	8a7b      	ldrh	r3, [r7, #18]
 801184a:	b25b      	sxtb	r3, r3
 801184c:	e0f3      	b.n	8011a36 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801184e:	8a7b      	ldrh	r3, [r7, #18]
 8011850:	2b7e      	cmp	r3, #126	; 0x7e
 8011852:	d906      	bls.n	8011862 <etharp_query+0x7e>
 8011854:	4b7a      	ldr	r3, [pc, #488]	; (8011a40 <etharp_query+0x25c>)
 8011856:	f240 32c1 	movw	r2, #961	; 0x3c1
 801185a:	497a      	ldr	r1, [pc, #488]	; (8011a44 <etharp_query+0x260>)
 801185c:	487a      	ldr	r0, [pc, #488]	; (8011a48 <etharp_query+0x264>)
 801185e:	f001 fd9d 	bl	801339c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011862:	8a7b      	ldrh	r3, [r7, #18]
 8011864:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011866:	7c7a      	ldrb	r2, [r7, #17]
 8011868:	4978      	ldr	r1, [pc, #480]	; (8011a4c <etharp_query+0x268>)
 801186a:	4613      	mov	r3, r2
 801186c:	005b      	lsls	r3, r3, #1
 801186e:	4413      	add	r3, r2
 8011870:	00db      	lsls	r3, r3, #3
 8011872:	440b      	add	r3, r1
 8011874:	3314      	adds	r3, #20
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d115      	bne.n	80118a8 <etharp_query+0xc4>
    is_new_entry = 1;
 801187c:	2301      	movs	r3, #1
 801187e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011880:	7c7a      	ldrb	r2, [r7, #17]
 8011882:	4972      	ldr	r1, [pc, #456]	; (8011a4c <etharp_query+0x268>)
 8011884:	4613      	mov	r3, r2
 8011886:	005b      	lsls	r3, r3, #1
 8011888:	4413      	add	r3, r2
 801188a:	00db      	lsls	r3, r3, #3
 801188c:	440b      	add	r3, r1
 801188e:	3314      	adds	r3, #20
 8011890:	2201      	movs	r2, #1
 8011892:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011894:	7c7a      	ldrb	r2, [r7, #17]
 8011896:	496d      	ldr	r1, [pc, #436]	; (8011a4c <etharp_query+0x268>)
 8011898:	4613      	mov	r3, r2
 801189a:	005b      	lsls	r3, r3, #1
 801189c:	4413      	add	r3, r2
 801189e:	00db      	lsls	r3, r3, #3
 80118a0:	440b      	add	r3, r1
 80118a2:	3308      	adds	r3, #8
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80118a8:	7c7a      	ldrb	r2, [r7, #17]
 80118aa:	4968      	ldr	r1, [pc, #416]	; (8011a4c <etharp_query+0x268>)
 80118ac:	4613      	mov	r3, r2
 80118ae:	005b      	lsls	r3, r3, #1
 80118b0:	4413      	add	r3, r2
 80118b2:	00db      	lsls	r3, r3, #3
 80118b4:	440b      	add	r3, r1
 80118b6:	3314      	adds	r3, #20
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d011      	beq.n	80118e2 <etharp_query+0xfe>
 80118be:	7c7a      	ldrb	r2, [r7, #17]
 80118c0:	4962      	ldr	r1, [pc, #392]	; (8011a4c <etharp_query+0x268>)
 80118c2:	4613      	mov	r3, r2
 80118c4:	005b      	lsls	r3, r3, #1
 80118c6:	4413      	add	r3, r2
 80118c8:	00db      	lsls	r3, r3, #3
 80118ca:	440b      	add	r3, r1
 80118cc:	3314      	adds	r3, #20
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d806      	bhi.n	80118e2 <etharp_query+0xfe>
 80118d4:	4b5a      	ldr	r3, [pc, #360]	; (8011a40 <etharp_query+0x25c>)
 80118d6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80118da:	495d      	ldr	r1, [pc, #372]	; (8011a50 <etharp_query+0x26c>)
 80118dc:	485a      	ldr	r0, [pc, #360]	; (8011a48 <etharp_query+0x264>)
 80118de:	f001 fd5d 	bl	801339c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80118e2:	6a3b      	ldr	r3, [r7, #32]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d102      	bne.n	80118ee <etharp_query+0x10a>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d10c      	bne.n	8011908 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80118ee:	68b9      	ldr	r1, [r7, #8]
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	f000 f963 	bl	8011bbc <etharp_request>
 80118f6:	4603      	mov	r3, r0
 80118f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d102      	bne.n	8011908 <etharp_query+0x124>
      return result;
 8011902:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011906:	e096      	b.n	8011a36 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <etharp_query+0x138>
 801190e:	4b4c      	ldr	r3, [pc, #304]	; (8011a40 <etharp_query+0x25c>)
 8011910:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011914:	494f      	ldr	r1, [pc, #316]	; (8011a54 <etharp_query+0x270>)
 8011916:	484c      	ldr	r0, [pc, #304]	; (8011a48 <etharp_query+0x264>)
 8011918:	f001 fd40 	bl	801339c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801191c:	7c7a      	ldrb	r2, [r7, #17]
 801191e:	494b      	ldr	r1, [pc, #300]	; (8011a4c <etharp_query+0x268>)
 8011920:	4613      	mov	r3, r2
 8011922:	005b      	lsls	r3, r3, #1
 8011924:	4413      	add	r3, r2
 8011926:	00db      	lsls	r3, r3, #3
 8011928:	440b      	add	r3, r1
 801192a:	3314      	adds	r3, #20
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	2b01      	cmp	r3, #1
 8011930:	d917      	bls.n	8011962 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011932:	4a49      	ldr	r2, [pc, #292]	; (8011a58 <etharp_query+0x274>)
 8011934:	7c7b      	ldrb	r3, [r7, #17]
 8011936:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011938:	7c7a      	ldrb	r2, [r7, #17]
 801193a:	4613      	mov	r3, r2
 801193c:	005b      	lsls	r3, r3, #1
 801193e:	4413      	add	r3, r2
 8011940:	00db      	lsls	r3, r3, #3
 8011942:	3308      	adds	r3, #8
 8011944:	4a41      	ldr	r2, [pc, #260]	; (8011a4c <etharp_query+0x268>)
 8011946:	4413      	add	r3, r2
 8011948:	3304      	adds	r3, #4
 801194a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801194e:	9200      	str	r2, [sp, #0]
 8011950:	697a      	ldr	r2, [r7, #20]
 8011952:	6879      	ldr	r1, [r7, #4]
 8011954:	68f8      	ldr	r0, [r7, #12]
 8011956:	f001 fc75 	bl	8013244 <ethernet_output>
 801195a:	4603      	mov	r3, r0
 801195c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011960:	e067      	b.n	8011a32 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011962:	7c7a      	ldrb	r2, [r7, #17]
 8011964:	4939      	ldr	r1, [pc, #228]	; (8011a4c <etharp_query+0x268>)
 8011966:	4613      	mov	r3, r2
 8011968:	005b      	lsls	r3, r3, #1
 801196a:	4413      	add	r3, r2
 801196c:	00db      	lsls	r3, r3, #3
 801196e:	440b      	add	r3, r1
 8011970:	3314      	adds	r3, #20
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	2b01      	cmp	r3, #1
 8011976:	d15c      	bne.n	8011a32 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011978:	2300      	movs	r3, #0
 801197a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011980:	e01c      	b.n	80119bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011982:	69fb      	ldr	r3, [r7, #28]
 8011984:	895a      	ldrh	r2, [r3, #10]
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	891b      	ldrh	r3, [r3, #8]
 801198a:	429a      	cmp	r2, r3
 801198c:	d10a      	bne.n	80119a4 <etharp_query+0x1c0>
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d006      	beq.n	80119a4 <etharp_query+0x1c0>
 8011996:	4b2a      	ldr	r3, [pc, #168]	; (8011a40 <etharp_query+0x25c>)
 8011998:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801199c:	492f      	ldr	r1, [pc, #188]	; (8011a5c <etharp_query+0x278>)
 801199e:	482a      	ldr	r0, [pc, #168]	; (8011a48 <etharp_query+0x264>)
 80119a0:	f001 fcfc 	bl	801339c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	7b1b      	ldrb	r3, [r3, #12]
 80119a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d002      	beq.n	80119b6 <etharp_query+0x1d2>
        copy_needed = 1;
 80119b0:	2301      	movs	r3, #1
 80119b2:	61bb      	str	r3, [r7, #24]
        break;
 80119b4:	e005      	b.n	80119c2 <etharp_query+0x1de>
      }
      p = p->next;
 80119b6:	69fb      	ldr	r3, [r7, #28]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1df      	bne.n	8011982 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d007      	beq.n	80119d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	f44f 7120 	mov.w	r1, #640	; 0x280
 80119ce:	200e      	movs	r0, #14
 80119d0:	f7f9 f96e 	bl	800acb0 <pbuf_clone>
 80119d4:	61f8      	str	r0, [r7, #28]
 80119d6:	e004      	b.n	80119e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80119dc:	69f8      	ldr	r0, [r7, #28]
 80119de:	f7f8 ff09 	bl	800a7f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80119e2:	69fb      	ldr	r3, [r7, #28]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d021      	beq.n	8011a2c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80119e8:	7c7a      	ldrb	r2, [r7, #17]
 80119ea:	4918      	ldr	r1, [pc, #96]	; (8011a4c <etharp_query+0x268>)
 80119ec:	4613      	mov	r3, r2
 80119ee:	005b      	lsls	r3, r3, #1
 80119f0:	4413      	add	r3, r2
 80119f2:	00db      	lsls	r3, r3, #3
 80119f4:	440b      	add	r3, r1
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d00a      	beq.n	8011a12 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80119fc:	7c7a      	ldrb	r2, [r7, #17]
 80119fe:	4913      	ldr	r1, [pc, #76]	; (8011a4c <etharp_query+0x268>)
 8011a00:	4613      	mov	r3, r2
 8011a02:	005b      	lsls	r3, r3, #1
 8011a04:	4413      	add	r3, r2
 8011a06:	00db      	lsls	r3, r3, #3
 8011a08:	440b      	add	r3, r1
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7f8 fe51 	bl	800a6b4 <pbuf_free>
      }
      arp_table[i].q = p;
 8011a12:	7c7a      	ldrb	r2, [r7, #17]
 8011a14:	490d      	ldr	r1, [pc, #52]	; (8011a4c <etharp_query+0x268>)
 8011a16:	4613      	mov	r3, r2
 8011a18:	005b      	lsls	r3, r3, #1
 8011a1a:	4413      	add	r3, r2
 8011a1c:	00db      	lsls	r3, r3, #3
 8011a1e:	440b      	add	r3, r1
 8011a20:	69fa      	ldr	r2, [r7, #28]
 8011a22:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011a24:	2300      	movs	r3, #0
 8011a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a2a:	e002      	b.n	8011a32 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011a2c:	23ff      	movs	r3, #255	; 0xff
 8011a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011a32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3728      	adds	r7, #40	; 0x28
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	08016b04 	.word	0x08016b04
 8011a44:	08016cb0 	.word	0x08016cb0
 8011a48:	08016b7c 	.word	0x08016b7c
 8011a4c:	20008f14 	.word	0x20008f14
 8011a50:	08016cc0 	.word	0x08016cc0
 8011a54:	08016ca4 	.word	0x08016ca4
 8011a58:	20009004 	.word	0x20009004
 8011a5c:	08016ce8 	.word	0x08016ce8

08011a60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b08a      	sub	sp, #40	; 0x28
 8011a64:	af02      	add	r7, sp, #8
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	607a      	str	r2, [r7, #4]
 8011a6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d106      	bne.n	8011a86 <etharp_raw+0x26>
 8011a78:	4b3a      	ldr	r3, [pc, #232]	; (8011b64 <etharp_raw+0x104>)
 8011a7a:	f240 4257 	movw	r2, #1111	; 0x457
 8011a7e:	493a      	ldr	r1, [pc, #232]	; (8011b68 <etharp_raw+0x108>)
 8011a80:	483a      	ldr	r0, [pc, #232]	; (8011b6c <etharp_raw+0x10c>)
 8011a82:	f001 fc8b 	bl	801339c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011a86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a8a:	211c      	movs	r1, #28
 8011a8c:	200e      	movs	r0, #14
 8011a8e:	f7f8 fb2d 	bl	800a0ec <pbuf_alloc>
 8011a92:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d102      	bne.n	8011aa0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a9e:	e05d      	b.n	8011b5c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	895b      	ldrh	r3, [r3, #10]
 8011aa4:	2b1b      	cmp	r3, #27
 8011aa6:	d806      	bhi.n	8011ab6 <etharp_raw+0x56>
 8011aa8:	4b2e      	ldr	r3, [pc, #184]	; (8011b64 <etharp_raw+0x104>)
 8011aaa:	f240 4262 	movw	r2, #1122	; 0x462
 8011aae:	4930      	ldr	r1, [pc, #192]	; (8011b70 <etharp_raw+0x110>)
 8011ab0:	482e      	ldr	r0, [pc, #184]	; (8011b6c <etharp_raw+0x10c>)
 8011ab2:	f001 fc73 	bl	801339c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011abc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7f7 fb44 	bl	800914c <lwip_htons>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011ad2:	2b06      	cmp	r3, #6
 8011ad4:	d006      	beq.n	8011ae4 <etharp_raw+0x84>
 8011ad6:	4b23      	ldr	r3, [pc, #140]	; (8011b64 <etharp_raw+0x104>)
 8011ad8:	f240 4269 	movw	r2, #1129	; 0x469
 8011adc:	4925      	ldr	r1, [pc, #148]	; (8011b74 <etharp_raw+0x114>)
 8011ade:	4823      	ldr	r0, [pc, #140]	; (8011b6c <etharp_raw+0x10c>)
 8011ae0:	f001 fc5c 	bl	801339c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	3308      	adds	r3, #8
 8011ae8:	2206      	movs	r2, #6
 8011aea:	6839      	ldr	r1, [r7, #0]
 8011aec:	4618      	mov	r0, r3
 8011aee:	f001 fc25 	bl	801333c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	3312      	adds	r3, #18
 8011af6:	2206      	movs	r2, #6
 8011af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011afa:	4618      	mov	r0, r3
 8011afc:	f001 fc1e 	bl	801333c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	330e      	adds	r3, #14
 8011b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b06:	6812      	ldr	r2, [r2, #0]
 8011b08:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	3318      	adds	r3, #24
 8011b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b10:	6812      	ldr	r2, [r2, #0]
 8011b12:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	2200      	movs	r2, #0
 8011b18:	701a      	strb	r2, [r3, #0]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	f042 0201 	orr.w	r2, r2, #1
 8011b20:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	2200      	movs	r2, #0
 8011b26:	f042 0208 	orr.w	r2, r2, #8
 8011b2a:	709a      	strb	r2, [r3, #2]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	2206      	movs	r2, #6
 8011b34:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	2204      	movs	r2, #4
 8011b3a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011b3c:	f640 0306 	movw	r3, #2054	; 0x806
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	68ba      	ldr	r2, [r7, #8]
 8011b46:	69b9      	ldr	r1, [r7, #24]
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f001 fb7b 	bl	8013244 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011b4e:	69b8      	ldr	r0, [r7, #24]
 8011b50:	f7f8 fdb0 	bl	800a6b4 <pbuf_free>
  p = NULL;
 8011b54:	2300      	movs	r3, #0
 8011b56:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3720      	adds	r7, #32
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	08016b04 	.word	0x08016b04
 8011b68:	08016c54 	.word	0x08016c54
 8011b6c:	08016b7c 	.word	0x08016b7c
 8011b70:	08016d04 	.word	0x08016d04
 8011b74:	08016d38 	.word	0x08016d38

08011b78 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b088      	sub	sp, #32
 8011b7c:	af04      	add	r7, sp, #16
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b94:	2201      	movs	r2, #1
 8011b96:	9203      	str	r2, [sp, #12]
 8011b98:	68ba      	ldr	r2, [r7, #8]
 8011b9a:	9202      	str	r2, [sp, #8]
 8011b9c:	4a06      	ldr	r2, [pc, #24]	; (8011bb8 <etharp_request_dst+0x40>)
 8011b9e:	9201      	str	r2, [sp, #4]
 8011ba0:	9300      	str	r3, [sp, #0]
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f7ff ff5a 	bl	8011a60 <etharp_raw>
 8011bac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3710      	adds	r7, #16
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	080172c4 	.word	0x080172c4

08011bbc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011bc6:	4a05      	ldr	r2, [pc, #20]	; (8011bdc <etharp_request+0x20>)
 8011bc8:	6839      	ldr	r1, [r7, #0]
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f7ff ffd4 	bl	8011b78 <etharp_request_dst>
 8011bd0:	4603      	mov	r3, r0
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3708      	adds	r7, #8
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	080172bc 	.word	0x080172bc

08011be0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b08e      	sub	sp, #56	; 0x38
 8011be4:	af04      	add	r7, sp, #16
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011bea:	4b79      	ldr	r3, [pc, #484]	; (8011dd0 <icmp_input+0x1f0>)
 8011bec:	689b      	ldr	r3, [r3, #8]
 8011bee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	f003 030f 	and.w	r3, r3, #15
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011c00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c02:	2b13      	cmp	r3, #19
 8011c04:	f240 80cd 	bls.w	8011da2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	895b      	ldrh	r3, [r3, #10]
 8011c0c:	2b03      	cmp	r3, #3
 8011c0e:	f240 80ca 	bls.w	8011da6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011c1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	f000 80b7 	beq.w	8011d94 <icmp_input+0x1b4>
 8011c26:	2b08      	cmp	r3, #8
 8011c28:	f040 80b7 	bne.w	8011d9a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011c2c:	4b69      	ldr	r3, [pc, #420]	; (8011dd4 <icmp_input+0x1f4>)
 8011c2e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011c30:	4b67      	ldr	r3, [pc, #412]	; (8011dd0 <icmp_input+0x1f0>)
 8011c32:	695b      	ldr	r3, [r3, #20]
 8011c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c38:	2be0      	cmp	r3, #224	; 0xe0
 8011c3a:	f000 80bb 	beq.w	8011db4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011c3e:	4b64      	ldr	r3, [pc, #400]	; (8011dd0 <icmp_input+0x1f0>)
 8011c40:	695b      	ldr	r3, [r3, #20]
 8011c42:	4a63      	ldr	r2, [pc, #396]	; (8011dd0 <icmp_input+0x1f0>)
 8011c44:	6812      	ldr	r2, [r2, #0]
 8011c46:	4611      	mov	r1, r2
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f000 fbed 	bl	8012428 <ip4_addr_isbroadcast_u32>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	f040 80b1 	bne.w	8011db8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	891b      	ldrh	r3, [r3, #8]
 8011c5a:	2b07      	cmp	r3, #7
 8011c5c:	f240 80a5 	bls.w	8011daa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c62:	330e      	adds	r3, #14
 8011c64:	4619      	mov	r1, r3
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7f8 fc8e 	bl	800a588 <pbuf_add_header>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d04b      	beq.n	8011d0a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	891a      	ldrh	r2, [r3, #8]
 8011c76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c78:	4413      	add	r3, r2
 8011c7a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	891b      	ldrh	r3, [r3, #8]
 8011c80:	8b7a      	ldrh	r2, [r7, #26]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	f0c0 809a 	bcc.w	8011dbc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011c88:	8b7b      	ldrh	r3, [r7, #26]
 8011c8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c8e:	4619      	mov	r1, r3
 8011c90:	200e      	movs	r0, #14
 8011c92:	f7f8 fa2b 	bl	800a0ec <pbuf_alloc>
 8011c96:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	f000 8090 	beq.w	8011dc0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	895b      	ldrh	r3, [r3, #10]
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ca8:	3308      	adds	r3, #8
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d203      	bcs.n	8011cb6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011cae:	6978      	ldr	r0, [r7, #20]
 8011cb0:	f7f8 fd00 	bl	800a6b4 <pbuf_free>
          goto icmperr;
 8011cb4:	e085      	b.n	8011dc2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f001 fb3c 	bl	801333c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011cc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	6978      	ldr	r0, [r7, #20]
 8011cca:	f7f8 fc6d 	bl	800a5a8 <pbuf_remove_header>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d009      	beq.n	8011ce8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011cd4:	4b40      	ldr	r3, [pc, #256]	; (8011dd8 <icmp_input+0x1f8>)
 8011cd6:	22b6      	movs	r2, #182	; 0xb6
 8011cd8:	4940      	ldr	r1, [pc, #256]	; (8011ddc <icmp_input+0x1fc>)
 8011cda:	4841      	ldr	r0, [pc, #260]	; (8011de0 <icmp_input+0x200>)
 8011cdc:	f001 fb5e 	bl	801339c <iprintf>
          pbuf_free(r);
 8011ce0:	6978      	ldr	r0, [r7, #20]
 8011ce2:	f7f8 fce7 	bl	800a6b4 <pbuf_free>
          goto icmperr;
 8011ce6:	e06c      	b.n	8011dc2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011ce8:	6879      	ldr	r1, [r7, #4]
 8011cea:	6978      	ldr	r0, [r7, #20]
 8011cec:	f7f8 fe0a 	bl	800a904 <pbuf_copy>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d003      	beq.n	8011cfe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011cf6:	6978      	ldr	r0, [r7, #20]
 8011cf8:	f7f8 fcdc 	bl	800a6b4 <pbuf_free>
          goto icmperr;
 8011cfc:	e061      	b.n	8011dc2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7f8 fcd8 	bl	800a6b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	607b      	str	r3, [r7, #4]
 8011d08:	e00f      	b.n	8011d2a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011d0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d0c:	330e      	adds	r3, #14
 8011d0e:	4619      	mov	r1, r3
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7f8 fc49 	bl	800a5a8 <pbuf_remove_header>
 8011d16:	4603      	mov	r3, r0
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d006      	beq.n	8011d2a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011d1c:	4b2e      	ldr	r3, [pc, #184]	; (8011dd8 <icmp_input+0x1f8>)
 8011d1e:	22c7      	movs	r2, #199	; 0xc7
 8011d20:	4930      	ldr	r1, [pc, #192]	; (8011de4 <icmp_input+0x204>)
 8011d22:	482f      	ldr	r0, [pc, #188]	; (8011de0 <icmp_input+0x200>)
 8011d24:	f001 fb3a 	bl	801339c <iprintf>
          goto icmperr;
 8011d28:	e04b      	b.n	8011dc2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d32:	4619      	mov	r1, r3
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7f8 fc27 	bl	800a588 <pbuf_add_header>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d12b      	bne.n	8011d98 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	681a      	ldr	r2, [r3, #0]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011d4e:	4b20      	ldr	r3, [pc, #128]	; (8011dd0 <icmp_input+0x1f0>)
 8011d50:	691a      	ldr	r2, [r3, #16]
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	709a      	strb	r2, [r3, #2]
 8011d62:	2200      	movs	r2, #0
 8011d64:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	22ff      	movs	r2, #255	; 0xff
 8011d6a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	729a      	strb	r2, [r3, #10]
 8011d72:	2200      	movs	r2, #0
 8011d74:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	9302      	str	r3, [sp, #8]
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	9301      	str	r3, [sp, #4]
 8011d7e:	2300      	movs	r3, #0
 8011d80:	9300      	str	r3, [sp, #0]
 8011d82:	23ff      	movs	r3, #255	; 0xff
 8011d84:	2200      	movs	r2, #0
 8011d86:	69f9      	ldr	r1, [r7, #28]
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f000 fa75 	bl	8012278 <ip4_output_if>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011d92:	e001      	b.n	8011d98 <icmp_input+0x1b8>
      break;
 8011d94:	bf00      	nop
 8011d96:	e000      	b.n	8011d9a <icmp_input+0x1ba>
      break;
 8011d98:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7f8 fc8a 	bl	800a6b4 <pbuf_free>
  return;
 8011da0:	e013      	b.n	8011dca <icmp_input+0x1ea>
    goto lenerr;
 8011da2:	bf00      	nop
 8011da4:	e002      	b.n	8011dac <icmp_input+0x1cc>
    goto lenerr;
 8011da6:	bf00      	nop
 8011da8:	e000      	b.n	8011dac <icmp_input+0x1cc>
        goto lenerr;
 8011daa:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7f8 fc81 	bl	800a6b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011db2:	e00a      	b.n	8011dca <icmp_input+0x1ea>
        goto icmperr;
 8011db4:	bf00      	nop
 8011db6:	e004      	b.n	8011dc2 <icmp_input+0x1e2>
        goto icmperr;
 8011db8:	bf00      	nop
 8011dba:	e002      	b.n	8011dc2 <icmp_input+0x1e2>
          goto icmperr;
 8011dbc:	bf00      	nop
 8011dbe:	e000      	b.n	8011dc2 <icmp_input+0x1e2>
          goto icmperr;
 8011dc0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7f8 fc76 	bl	800a6b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011dc8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011dca:	3728      	adds	r7, #40	; 0x28
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	20003784 	.word	0x20003784
 8011dd4:	20003798 	.word	0x20003798
 8011dd8:	08016d7c 	.word	0x08016d7c
 8011ddc:	08016db4 	.word	0x08016db4
 8011de0:	08016dec 	.word	0x08016dec
 8011de4:	08016e14 	.word	0x08016e14

08011de8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	460b      	mov	r3, r1
 8011df2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011df4:	78fb      	ldrb	r3, [r7, #3]
 8011df6:	461a      	mov	r2, r3
 8011df8:	2103      	movs	r1, #3
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 f814 	bl	8011e28 <icmp_send_response>
}
 8011e00:	bf00      	nop
 8011e02:	3708      	adds	r7, #8
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}

08011e08 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b082      	sub	sp, #8
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	460b      	mov	r3, r1
 8011e12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011e14:	78fb      	ldrb	r3, [r7, #3]
 8011e16:	461a      	mov	r2, r3
 8011e18:	210b      	movs	r1, #11
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 f804 	bl	8011e28 <icmp_send_response>
}
 8011e20:	bf00      	nop
 8011e22:	3708      	adds	r7, #8
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b08c      	sub	sp, #48	; 0x30
 8011e2c:	af04      	add	r7, sp, #16
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	460b      	mov	r3, r1
 8011e32:	70fb      	strb	r3, [r7, #3]
 8011e34:	4613      	mov	r3, r2
 8011e36:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011e38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e3c:	2124      	movs	r1, #36	; 0x24
 8011e3e:	2022      	movs	r0, #34	; 0x22
 8011e40:	f7f8 f954 	bl	800a0ec <pbuf_alloc>
 8011e44:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d04c      	beq.n	8011ee6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	895b      	ldrh	r3, [r3, #10]
 8011e50:	2b23      	cmp	r3, #35	; 0x23
 8011e52:	d806      	bhi.n	8011e62 <icmp_send_response+0x3a>
 8011e54:	4b26      	ldr	r3, [pc, #152]	; (8011ef0 <icmp_send_response+0xc8>)
 8011e56:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011e5a:	4926      	ldr	r1, [pc, #152]	; (8011ef4 <icmp_send_response+0xcc>)
 8011e5c:	4826      	ldr	r0, [pc, #152]	; (8011ef8 <icmp_send_response+0xd0>)
 8011e5e:	f001 fa9d 	bl	801339c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	78fa      	ldrb	r2, [r7, #3]
 8011e72:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	78ba      	ldrb	r2, [r7, #2]
 8011e78:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	711a      	strb	r2, [r3, #4]
 8011e80:	2200      	movs	r2, #0
 8011e82:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	2200      	movs	r2, #0
 8011e88:	719a      	strb	r2, [r3, #6]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011e8e:	69fb      	ldr	r3, [r7, #28]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	f103 0008 	add.w	r0, r3, #8
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	221c      	movs	r2, #28
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	f001 fa4d 	bl	801333c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011ea2:	69bb      	ldr	r3, [r7, #24]
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011ea8:	f107 030c 	add.w	r3, r7, #12
 8011eac:	4618      	mov	r0, r3
 8011eae:	f000 f825 	bl	8011efc <ip4_route>
 8011eb2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d011      	beq.n	8011ede <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	709a      	strb	r2, [r3, #2]
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011ec4:	f107 020c 	add.w	r2, r7, #12
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	9302      	str	r3, [sp, #8]
 8011ecc:	2301      	movs	r3, #1
 8011ece:	9301      	str	r3, [sp, #4]
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	23ff      	movs	r3, #255	; 0xff
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	69f8      	ldr	r0, [r7, #28]
 8011eda:	f000 f9cd 	bl	8012278 <ip4_output_if>
  }
  pbuf_free(q);
 8011ede:	69f8      	ldr	r0, [r7, #28]
 8011ee0:	f7f8 fbe8 	bl	800a6b4 <pbuf_free>
 8011ee4:	e000      	b.n	8011ee8 <icmp_send_response+0xc0>
    return;
 8011ee6:	bf00      	nop
}
 8011ee8:	3720      	adds	r7, #32
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	08016d7c 	.word	0x08016d7c
 8011ef4:	08016e48 	.word	0x08016e48
 8011ef8:	08016dec 	.word	0x08016dec

08011efc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011efc:	b480      	push	{r7}
 8011efe:	b085      	sub	sp, #20
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011f04:	4b33      	ldr	r3, [pc, #204]	; (8011fd4 <ip4_route+0xd8>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	60fb      	str	r3, [r7, #12]
 8011f0a:	e036      	b.n	8011f7a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d02b      	beq.n	8011f74 <ip4_route+0x78>
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f22:	089b      	lsrs	r3, r3, #2
 8011f24:	f003 0301 	and.w	r3, r3, #1
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d022      	beq.n	8011f74 <ip4_route+0x78>
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	3304      	adds	r3, #4
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d01d      	beq.n	8011f74 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	3304      	adds	r3, #4
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	405a      	eors	r2, r3
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	3308      	adds	r3, #8
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d101      	bne.n	8011f54 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	e038      	b.n	8011fc6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f5a:	f003 0302 	and.w	r3, r3, #2
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d108      	bne.n	8011f74 <ip4_route+0x78>
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681a      	ldr	r2, [r3, #0]
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	330c      	adds	r3, #12
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d101      	bne.n	8011f74 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	e028      	b.n	8011fc6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1c5      	bne.n	8011f0c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011f80:	4b15      	ldr	r3, [pc, #84]	; (8011fd8 <ip4_route+0xdc>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d01a      	beq.n	8011fbe <ip4_route+0xc2>
 8011f88:	4b13      	ldr	r3, [pc, #76]	; (8011fd8 <ip4_route+0xdc>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f90:	f003 0301 	and.w	r3, r3, #1
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d012      	beq.n	8011fbe <ip4_route+0xc2>
 8011f98:	4b0f      	ldr	r3, [pc, #60]	; (8011fd8 <ip4_route+0xdc>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fa0:	f003 0304 	and.w	r3, r3, #4
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d00a      	beq.n	8011fbe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011fa8:	4b0b      	ldr	r3, [pc, #44]	; (8011fd8 <ip4_route+0xdc>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	3304      	adds	r3, #4
 8011fae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d004      	beq.n	8011fbe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	2b7f      	cmp	r3, #127	; 0x7f
 8011fbc:	d101      	bne.n	8011fc2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	e001      	b.n	8011fc6 <ip4_route+0xca>
  }

  return netif_default;
 8011fc2:	4b05      	ldr	r3, [pc, #20]	; (8011fd8 <ip4_route+0xdc>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3714      	adds	r7, #20
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop
 8011fd4:	20008ea8 	.word	0x20008ea8
 8011fd8:	20008eac 	.word	0x20008eac

08011fdc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fea:	f003 0301 	and.w	r3, r3, #1
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d016      	beq.n	8012022 <ip4_input_accept+0x46>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	3304      	adds	r3, #4
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d011      	beq.n	8012022 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011ffe:	4b0b      	ldr	r3, [pc, #44]	; (801202c <ip4_input_accept+0x50>)
 8012000:	695a      	ldr	r2, [r3, #20]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	3304      	adds	r3, #4
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	429a      	cmp	r2, r3
 801200a:	d008      	beq.n	801201e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801200c:	4b07      	ldr	r3, [pc, #28]	; (801202c <ip4_input_accept+0x50>)
 801200e:	695b      	ldr	r3, [r3, #20]
 8012010:	6879      	ldr	r1, [r7, #4]
 8012012:	4618      	mov	r0, r3
 8012014:	f000 fa08 	bl	8012428 <ip4_addr_isbroadcast_u32>
 8012018:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801201a:	2b00      	cmp	r3, #0
 801201c:	d001      	beq.n	8012022 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801201e:	2301      	movs	r3, #1
 8012020:	e000      	b.n	8012024 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012022:	2300      	movs	r3, #0
}
 8012024:	4618      	mov	r0, r3
 8012026:	3708      	adds	r7, #8
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	20003784 	.word	0x20003784

08012030 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b086      	sub	sp, #24
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	091b      	lsrs	r3, r3, #4
 8012046:	b2db      	uxtb	r3, r3
 8012048:	2b04      	cmp	r3, #4
 801204a:	d004      	beq.n	8012056 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f7f8 fb31 	bl	800a6b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012052:	2300      	movs	r3, #0
 8012054:	e107      	b.n	8012266 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	f003 030f 	and.w	r3, r3, #15
 801205e:	b2db      	uxtb	r3, r3
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	b2db      	uxtb	r3, r3
 8012064:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012066:	697b      	ldr	r3, [r7, #20]
 8012068:	885b      	ldrh	r3, [r3, #2]
 801206a:	b29b      	uxth	r3, r3
 801206c:	4618      	mov	r0, r3
 801206e:	f7f7 f86d 	bl	800914c <lwip_htons>
 8012072:	4603      	mov	r3, r0
 8012074:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	891b      	ldrh	r3, [r3, #8]
 801207a:	89ba      	ldrh	r2, [r7, #12]
 801207c:	429a      	cmp	r2, r3
 801207e:	d204      	bcs.n	801208a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012080:	89bb      	ldrh	r3, [r7, #12]
 8012082:	4619      	mov	r1, r3
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7f8 f98f 	bl	800a3a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	895b      	ldrh	r3, [r3, #10]
 801208e:	89fa      	ldrh	r2, [r7, #14]
 8012090:	429a      	cmp	r2, r3
 8012092:	d807      	bhi.n	80120a4 <ip4_input+0x74>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	891b      	ldrh	r3, [r3, #8]
 8012098:	89ba      	ldrh	r2, [r7, #12]
 801209a:	429a      	cmp	r2, r3
 801209c:	d802      	bhi.n	80120a4 <ip4_input+0x74>
 801209e:	89fb      	ldrh	r3, [r7, #14]
 80120a0:	2b13      	cmp	r3, #19
 80120a2:	d804      	bhi.n	80120ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f7f8 fb05 	bl	800a6b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80120aa:	2300      	movs	r3, #0
 80120ac:	e0db      	b.n	8012266 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	691b      	ldr	r3, [r3, #16]
 80120b2:	4a6f      	ldr	r2, [pc, #444]	; (8012270 <ip4_input+0x240>)
 80120b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	68db      	ldr	r3, [r3, #12]
 80120ba:	4a6d      	ldr	r2, [pc, #436]	; (8012270 <ip4_input+0x240>)
 80120bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80120be:	4b6c      	ldr	r3, [pc, #432]	; (8012270 <ip4_input+0x240>)
 80120c0:	695b      	ldr	r3, [r3, #20]
 80120c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120c6:	2be0      	cmp	r3, #224	; 0xe0
 80120c8:	d112      	bne.n	80120f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120d0:	f003 0301 	and.w	r3, r3, #1
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d007      	beq.n	80120ea <ip4_input+0xba>
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	3304      	adds	r3, #4
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d002      	beq.n	80120ea <ip4_input+0xba>
      netif = inp;
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	613b      	str	r3, [r7, #16]
 80120e8:	e02a      	b.n	8012140 <ip4_input+0x110>
    } else {
      netif = NULL;
 80120ea:	2300      	movs	r3, #0
 80120ec:	613b      	str	r3, [r7, #16]
 80120ee:	e027      	b.n	8012140 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80120f0:	6838      	ldr	r0, [r7, #0]
 80120f2:	f7ff ff73 	bl	8011fdc <ip4_input_accept>
 80120f6:	4603      	mov	r3, r0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d002      	beq.n	8012102 <ip4_input+0xd2>
      netif = inp;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	613b      	str	r3, [r7, #16]
 8012100:	e01e      	b.n	8012140 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012102:	2300      	movs	r3, #0
 8012104:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012106:	4b5a      	ldr	r3, [pc, #360]	; (8012270 <ip4_input+0x240>)
 8012108:	695b      	ldr	r3, [r3, #20]
 801210a:	b2db      	uxtb	r3, r3
 801210c:	2b7f      	cmp	r3, #127	; 0x7f
 801210e:	d017      	beq.n	8012140 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012110:	4b58      	ldr	r3, [pc, #352]	; (8012274 <ip4_input+0x244>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	613b      	str	r3, [r7, #16]
 8012116:	e00e      	b.n	8012136 <ip4_input+0x106>
          if (netif == inp) {
 8012118:	693a      	ldr	r2, [r7, #16]
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	429a      	cmp	r2, r3
 801211e:	d006      	beq.n	801212e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012120:	6938      	ldr	r0, [r7, #16]
 8012122:	f7ff ff5b 	bl	8011fdc <ip4_input_accept>
 8012126:	4603      	mov	r3, r0
 8012128:	2b00      	cmp	r3, #0
 801212a:	d108      	bne.n	801213e <ip4_input+0x10e>
 801212c:	e000      	b.n	8012130 <ip4_input+0x100>
            continue;
 801212e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	613b      	str	r3, [r7, #16]
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1ed      	bne.n	8012118 <ip4_input+0xe8>
 801213c:	e000      	b.n	8012140 <ip4_input+0x110>
            break;
 801213e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012140:	4b4b      	ldr	r3, [pc, #300]	; (8012270 <ip4_input+0x240>)
 8012142:	691b      	ldr	r3, [r3, #16]
 8012144:	6839      	ldr	r1, [r7, #0]
 8012146:	4618      	mov	r0, r3
 8012148:	f000 f96e 	bl	8012428 <ip4_addr_isbroadcast_u32>
 801214c:	4603      	mov	r3, r0
 801214e:	2b00      	cmp	r3, #0
 8012150:	d105      	bne.n	801215e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012152:	4b47      	ldr	r3, [pc, #284]	; (8012270 <ip4_input+0x240>)
 8012154:	691b      	ldr	r3, [r3, #16]
 8012156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801215a:	2be0      	cmp	r3, #224	; 0xe0
 801215c:	d104      	bne.n	8012168 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7f8 faa8 	bl	800a6b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012164:	2300      	movs	r3, #0
 8012166:	e07e      	b.n	8012266 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d104      	bne.n	8012178 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f7f8 faa0 	bl	800a6b4 <pbuf_free>
    return ERR_OK;
 8012174:	2300      	movs	r3, #0
 8012176:	e076      	b.n	8012266 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	88db      	ldrh	r3, [r3, #6]
 801217c:	b29b      	uxth	r3, r3
 801217e:	461a      	mov	r2, r3
 8012180:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012184:	4013      	ands	r3, r2
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00b      	beq.n	80121a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f000 fc92 	bl	8012ab4 <ip4_reass>
 8012190:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d101      	bne.n	801219c <ip4_input+0x16c>
      return ERR_OK;
 8012198:	2300      	movs	r3, #0
 801219a:	e064      	b.n	8012266 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	685b      	ldr	r3, [r3, #4]
 80121a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80121a2:	4a33      	ldr	r2, [pc, #204]	; (8012270 <ip4_input+0x240>)
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80121a8:	4a31      	ldr	r2, [pc, #196]	; (8012270 <ip4_input+0x240>)
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80121ae:	4a30      	ldr	r2, [pc, #192]	; (8012270 <ip4_input+0x240>)
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	f003 030f 	and.w	r3, r3, #15
 80121bc:	b2db      	uxtb	r3, r3
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	4b2a      	ldr	r3, [pc, #168]	; (8012270 <ip4_input+0x240>)
 80121c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80121c8:	89fb      	ldrh	r3, [r7, #14]
 80121ca:	4619      	mov	r1, r3
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7f8 f9eb 	bl	800a5a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	7a5b      	ldrb	r3, [r3, #9]
 80121d6:	2b11      	cmp	r3, #17
 80121d8:	d006      	beq.n	80121e8 <ip4_input+0x1b8>
 80121da:	2b11      	cmp	r3, #17
 80121dc:	dc13      	bgt.n	8012206 <ip4_input+0x1d6>
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d00c      	beq.n	80121fc <ip4_input+0x1cc>
 80121e2:	2b06      	cmp	r3, #6
 80121e4:	d005      	beq.n	80121f2 <ip4_input+0x1c2>
 80121e6:	e00e      	b.n	8012206 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80121e8:	6839      	ldr	r1, [r7, #0]
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7fe f8e6 	bl	80103bc <udp_input>
        break;
 80121f0:	e026      	b.n	8012240 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80121f2:	6839      	ldr	r1, [r7, #0]
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7fa f927 	bl	800c448 <tcp_input>
        break;
 80121fa:	e021      	b.n	8012240 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80121fc:	6839      	ldr	r1, [r7, #0]
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f7ff fcee 	bl	8011be0 <icmp_input>
        break;
 8012204:	e01c      	b.n	8012240 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012206:	4b1a      	ldr	r3, [pc, #104]	; (8012270 <ip4_input+0x240>)
 8012208:	695b      	ldr	r3, [r3, #20]
 801220a:	6939      	ldr	r1, [r7, #16]
 801220c:	4618      	mov	r0, r3
 801220e:	f000 f90b 	bl	8012428 <ip4_addr_isbroadcast_u32>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d10f      	bne.n	8012238 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012218:	4b15      	ldr	r3, [pc, #84]	; (8012270 <ip4_input+0x240>)
 801221a:	695b      	ldr	r3, [r3, #20]
 801221c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012220:	2be0      	cmp	r3, #224	; 0xe0
 8012222:	d009      	beq.n	8012238 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012228:	4619      	mov	r1, r3
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f7f8 fa2f 	bl	800a68e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012230:	2102      	movs	r1, #2
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7ff fdd8 	bl	8011de8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7f8 fa3b 	bl	800a6b4 <pbuf_free>
        break;
 801223e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012240:	4b0b      	ldr	r3, [pc, #44]	; (8012270 <ip4_input+0x240>)
 8012242:	2200      	movs	r2, #0
 8012244:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012246:	4b0a      	ldr	r3, [pc, #40]	; (8012270 <ip4_input+0x240>)
 8012248:	2200      	movs	r2, #0
 801224a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801224c:	4b08      	ldr	r3, [pc, #32]	; (8012270 <ip4_input+0x240>)
 801224e:	2200      	movs	r2, #0
 8012250:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012252:	4b07      	ldr	r3, [pc, #28]	; (8012270 <ip4_input+0x240>)
 8012254:	2200      	movs	r2, #0
 8012256:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012258:	4b05      	ldr	r3, [pc, #20]	; (8012270 <ip4_input+0x240>)
 801225a:	2200      	movs	r2, #0
 801225c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801225e:	4b04      	ldr	r3, [pc, #16]	; (8012270 <ip4_input+0x240>)
 8012260:	2200      	movs	r2, #0
 8012262:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012264:	2300      	movs	r3, #0
}
 8012266:	4618      	mov	r0, r3
 8012268:	3718      	adds	r7, #24
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	20003784 	.word	0x20003784
 8012274:	20008ea8 	.word	0x20008ea8

08012278 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b08a      	sub	sp, #40	; 0x28
 801227c:	af04      	add	r7, sp, #16
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
 8012284:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d009      	beq.n	80122a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d003      	beq.n	801229e <ip4_output_if+0x26>
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d102      	bne.n	80122a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a0:	3304      	adds	r3, #4
 80122a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80122a4:	78fa      	ldrb	r2, [r7, #3]
 80122a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a8:	9302      	str	r3, [sp, #8]
 80122aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80122ae:	9301      	str	r3, [sp, #4]
 80122b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	4613      	mov	r3, r2
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	6979      	ldr	r1, [r7, #20]
 80122bc:	68f8      	ldr	r0, [r7, #12]
 80122be:	f000 f805 	bl	80122cc <ip4_output_if_src>
 80122c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3718      	adds	r7, #24
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b088      	sub	sp, #32
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	60b9      	str	r1, [r7, #8]
 80122d6:	607a      	str	r2, [r7, #4]
 80122d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	7b9b      	ldrb	r3, [r3, #14]
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d006      	beq.n	80122f0 <ip4_output_if_src+0x24>
 80122e2:	4b4b      	ldr	r3, [pc, #300]	; (8012410 <ip4_output_if_src+0x144>)
 80122e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80122e8:	494a      	ldr	r1, [pc, #296]	; (8012414 <ip4_output_if_src+0x148>)
 80122ea:	484b      	ldr	r0, [pc, #300]	; (8012418 <ip4_output_if_src+0x14c>)
 80122ec:	f001 f856 	bl	801339c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d060      	beq.n	80123b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80122f6:	2314      	movs	r3, #20
 80122f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80122fa:	2114      	movs	r1, #20
 80122fc:	68f8      	ldr	r0, [r7, #12]
 80122fe:	f7f8 f943 	bl	800a588 <pbuf_add_header>
 8012302:	4603      	mov	r3, r0
 8012304:	2b00      	cmp	r3, #0
 8012306:	d002      	beq.n	801230e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012308:	f06f 0301 	mvn.w	r3, #1
 801230c:	e07c      	b.n	8012408 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	895b      	ldrh	r3, [r3, #10]
 8012318:	2b13      	cmp	r3, #19
 801231a:	d806      	bhi.n	801232a <ip4_output_if_src+0x5e>
 801231c:	4b3c      	ldr	r3, [pc, #240]	; (8012410 <ip4_output_if_src+0x144>)
 801231e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012322:	493e      	ldr	r1, [pc, #248]	; (801241c <ip4_output_if_src+0x150>)
 8012324:	483c      	ldr	r0, [pc, #240]	; (8012418 <ip4_output_if_src+0x14c>)
 8012326:	f001 f839 	bl	801339c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801232a:	69fb      	ldr	r3, [r7, #28]
 801232c:	78fa      	ldrb	r2, [r7, #3]
 801232e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012330:	69fb      	ldr	r3, [r7, #28]
 8012332:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012336:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012340:	8b7b      	ldrh	r3, [r7, #26]
 8012342:	089b      	lsrs	r3, r3, #2
 8012344:	b29b      	uxth	r3, r3
 8012346:	b2db      	uxtb	r3, r3
 8012348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801234c:	b2da      	uxtb	r2, r3
 801234e:	69fb      	ldr	r3, [r7, #28]
 8012350:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012358:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	891b      	ldrh	r3, [r3, #8]
 801235e:	4618      	mov	r0, r3
 8012360:	f7f6 fef4 	bl	800914c <lwip_htons>
 8012364:	4603      	mov	r3, r0
 8012366:	461a      	mov	r2, r3
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801236c:	69fb      	ldr	r3, [r7, #28]
 801236e:	2200      	movs	r2, #0
 8012370:	719a      	strb	r2, [r3, #6]
 8012372:	2200      	movs	r2, #0
 8012374:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012376:	4b2a      	ldr	r3, [pc, #168]	; (8012420 <ip4_output_if_src+0x154>)
 8012378:	881b      	ldrh	r3, [r3, #0]
 801237a:	4618      	mov	r0, r3
 801237c:	f7f6 fee6 	bl	800914c <lwip_htons>
 8012380:	4603      	mov	r3, r0
 8012382:	461a      	mov	r2, r3
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012388:	4b25      	ldr	r3, [pc, #148]	; (8012420 <ip4_output_if_src+0x154>)
 801238a:	881b      	ldrh	r3, [r3, #0]
 801238c:	3301      	adds	r3, #1
 801238e:	b29a      	uxth	r2, r3
 8012390:	4b23      	ldr	r3, [pc, #140]	; (8012420 <ip4_output_if_src+0x154>)
 8012392:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d104      	bne.n	80123a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801239a:	4b22      	ldr	r3, [pc, #136]	; (8012424 <ip4_output_if_src+0x158>)
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	60da      	str	r2, [r3, #12]
 80123a2:	e003      	b.n	80123ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	2200      	movs	r2, #0
 80123b0:	729a      	strb	r2, [r3, #10]
 80123b2:	2200      	movs	r2, #0
 80123b4:	72da      	strb	r2, [r3, #11]
 80123b6:	e00f      	b.n	80123d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	895b      	ldrh	r3, [r3, #10]
 80123bc:	2b13      	cmp	r3, #19
 80123be:	d802      	bhi.n	80123c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80123c0:	f06f 0301 	mvn.w	r3, #1
 80123c4:	e020      	b.n	8012408 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	691b      	ldr	r3, [r3, #16]
 80123d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80123d2:	f107 0314 	add.w	r3, r7, #20
 80123d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80123d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d00c      	beq.n	80123fa <ip4_output_if_src+0x12e>
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	891a      	ldrh	r2, [r3, #8]
 80123e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d906      	bls.n	80123fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f000 fd53 	bl	8012e9c <ip4_frag>
 80123f6:	4603      	mov	r3, r0
 80123f8:	e006      	b.n	8012408 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80123fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fc:	695b      	ldr	r3, [r3, #20]
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	68f9      	ldr	r1, [r7, #12]
 8012402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012404:	4798      	blx	r3
 8012406:	4603      	mov	r3, r0
}
 8012408:	4618      	mov	r0, r3
 801240a:	3720      	adds	r7, #32
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	08016e74 	.word	0x08016e74
 8012414:	08016ea8 	.word	0x08016ea8
 8012418:	08016eb4 	.word	0x08016eb4
 801241c:	08016edc 	.word	0x08016edc
 8012420:	20009006 	.word	0x20009006
 8012424:	080172b8 	.word	0x080172b8

08012428 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012428:	b480      	push	{r7}
 801242a:	b085      	sub	sp, #20
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801243c:	d002      	beq.n	8012444 <ip4_addr_isbroadcast_u32+0x1c>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d101      	bne.n	8012448 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012444:	2301      	movs	r3, #1
 8012446:	e02a      	b.n	801249e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801244e:	f003 0302 	and.w	r3, r3, #2
 8012452:	2b00      	cmp	r3, #0
 8012454:	d101      	bne.n	801245a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012456:	2300      	movs	r3, #0
 8012458:	e021      	b.n	801249e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	3304      	adds	r3, #4
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	429a      	cmp	r2, r3
 8012464:	d101      	bne.n	801246a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012466:	2300      	movs	r3, #0
 8012468:	e019      	b.n	801249e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	3304      	adds	r3, #4
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	405a      	eors	r2, r3
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	3308      	adds	r3, #8
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	4013      	ands	r3, r2
 801247c:	2b00      	cmp	r3, #0
 801247e:	d10d      	bne.n	801249c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	3308      	adds	r3, #8
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	43da      	mvns	r2, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	3308      	adds	r3, #8
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012494:	429a      	cmp	r2, r3
 8012496:	d101      	bne.n	801249c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012498:	2301      	movs	r3, #1
 801249a:	e000      	b.n	801249e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801249c:	2300      	movs	r3, #0
  }
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3714      	adds	r7, #20
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr
	...

080124ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80124b2:	2300      	movs	r3, #0
 80124b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80124b6:	4b12      	ldr	r3, [pc, #72]	; (8012500 <ip_reass_tmr+0x54>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80124bc:	e018      	b.n	80124f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	7fdb      	ldrb	r3, [r3, #31]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00b      	beq.n	80124de <ip_reass_tmr+0x32>
      r->timer--;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	7fdb      	ldrb	r3, [r3, #31]
 80124ca:	3b01      	subs	r3, #1
 80124cc:	b2da      	uxtb	r2, r3
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	60fb      	str	r3, [r7, #12]
 80124dc:	e008      	b.n	80124f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80124e8:	68b9      	ldr	r1, [r7, #8]
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f000 f80a 	bl	8012504 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1e3      	bne.n	80124be <ip_reass_tmr+0x12>
    }
  }
}
 80124f6:	bf00      	nop
 80124f8:	bf00      	nop
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	20009008 	.word	0x20009008

08012504 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b088      	sub	sp, #32
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801250e:	2300      	movs	r3, #0
 8012510:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012512:	683a      	ldr	r2, [r7, #0]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	429a      	cmp	r2, r3
 8012518:	d105      	bne.n	8012526 <ip_reass_free_complete_datagram+0x22>
 801251a:	4b45      	ldr	r3, [pc, #276]	; (8012630 <ip_reass_free_complete_datagram+0x12c>)
 801251c:	22ab      	movs	r2, #171	; 0xab
 801251e:	4945      	ldr	r1, [pc, #276]	; (8012634 <ip_reass_free_complete_datagram+0x130>)
 8012520:	4845      	ldr	r0, [pc, #276]	; (8012638 <ip_reass_free_complete_datagram+0x134>)
 8012522:	f000 ff3b 	bl	801339c <iprintf>
  if (prev != NULL) {
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00a      	beq.n	8012542 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	429a      	cmp	r2, r3
 8012534:	d005      	beq.n	8012542 <ip_reass_free_complete_datagram+0x3e>
 8012536:	4b3e      	ldr	r3, [pc, #248]	; (8012630 <ip_reass_free_complete_datagram+0x12c>)
 8012538:	22ad      	movs	r2, #173	; 0xad
 801253a:	4940      	ldr	r1, [pc, #256]	; (801263c <ip_reass_free_complete_datagram+0x138>)
 801253c:	483e      	ldr	r0, [pc, #248]	; (8012638 <ip_reass_free_complete_datagram+0x134>)
 801253e:	f000 ff2d 	bl	801339c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	889b      	ldrh	r3, [r3, #4]
 801254e:	b29b      	uxth	r3, r3
 8012550:	2b00      	cmp	r3, #0
 8012552:	d12a      	bne.n	80125aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	681a      	ldr	r2, [r3, #0]
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	6858      	ldr	r0, [r3, #4]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	3308      	adds	r3, #8
 801256a:	2214      	movs	r2, #20
 801256c:	4619      	mov	r1, r3
 801256e:	f000 fee5 	bl	801333c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012572:	2101      	movs	r1, #1
 8012574:	69b8      	ldr	r0, [r7, #24]
 8012576:	f7ff fc47 	bl	8011e08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801257a:	69b8      	ldr	r0, [r7, #24]
 801257c:	f7f8 f922 	bl	800a7c4 <pbuf_clen>
 8012580:	4603      	mov	r3, r0
 8012582:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012584:	8bfa      	ldrh	r2, [r7, #30]
 8012586:	8a7b      	ldrh	r3, [r7, #18]
 8012588:	4413      	add	r3, r2
 801258a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801258e:	db05      	blt.n	801259c <ip_reass_free_complete_datagram+0x98>
 8012590:	4b27      	ldr	r3, [pc, #156]	; (8012630 <ip_reass_free_complete_datagram+0x12c>)
 8012592:	22bc      	movs	r2, #188	; 0xbc
 8012594:	492a      	ldr	r1, [pc, #168]	; (8012640 <ip_reass_free_complete_datagram+0x13c>)
 8012596:	4828      	ldr	r0, [pc, #160]	; (8012638 <ip_reass_free_complete_datagram+0x134>)
 8012598:	f000 ff00 	bl	801339c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801259c:	8bfa      	ldrh	r2, [r7, #30]
 801259e:	8a7b      	ldrh	r3, [r7, #18]
 80125a0:	4413      	add	r3, r2
 80125a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80125a4:	69b8      	ldr	r0, [r7, #24]
 80125a6:	f7f8 f885 	bl	800a6b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	685b      	ldr	r3, [r3, #4]
 80125ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80125b0:	e01f      	b.n	80125f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80125b8:	69bb      	ldr	r3, [r7, #24]
 80125ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80125c2:	68f8      	ldr	r0, [r7, #12]
 80125c4:	f7f8 f8fe 	bl	800a7c4 <pbuf_clen>
 80125c8:	4603      	mov	r3, r0
 80125ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80125cc:	8bfa      	ldrh	r2, [r7, #30]
 80125ce:	8a7b      	ldrh	r3, [r7, #18]
 80125d0:	4413      	add	r3, r2
 80125d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125d6:	db05      	blt.n	80125e4 <ip_reass_free_complete_datagram+0xe0>
 80125d8:	4b15      	ldr	r3, [pc, #84]	; (8012630 <ip_reass_free_complete_datagram+0x12c>)
 80125da:	22cc      	movs	r2, #204	; 0xcc
 80125dc:	4918      	ldr	r1, [pc, #96]	; (8012640 <ip_reass_free_complete_datagram+0x13c>)
 80125de:	4816      	ldr	r0, [pc, #88]	; (8012638 <ip_reass_free_complete_datagram+0x134>)
 80125e0:	f000 fedc 	bl	801339c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80125e4:	8bfa      	ldrh	r2, [r7, #30]
 80125e6:	8a7b      	ldrh	r3, [r7, #18]
 80125e8:	4413      	add	r3, r2
 80125ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80125ec:	68f8      	ldr	r0, [r7, #12]
 80125ee:	f7f8 f861 	bl	800a6b4 <pbuf_free>
  while (p != NULL) {
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d1dc      	bne.n	80125b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80125f8:	6839      	ldr	r1, [r7, #0]
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 f8c2 	bl	8012784 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012600:	4b10      	ldr	r3, [pc, #64]	; (8012644 <ip_reass_free_complete_datagram+0x140>)
 8012602:	881b      	ldrh	r3, [r3, #0]
 8012604:	8bfa      	ldrh	r2, [r7, #30]
 8012606:	429a      	cmp	r2, r3
 8012608:	d905      	bls.n	8012616 <ip_reass_free_complete_datagram+0x112>
 801260a:	4b09      	ldr	r3, [pc, #36]	; (8012630 <ip_reass_free_complete_datagram+0x12c>)
 801260c:	22d2      	movs	r2, #210	; 0xd2
 801260e:	490e      	ldr	r1, [pc, #56]	; (8012648 <ip_reass_free_complete_datagram+0x144>)
 8012610:	4809      	ldr	r0, [pc, #36]	; (8012638 <ip_reass_free_complete_datagram+0x134>)
 8012612:	f000 fec3 	bl	801339c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012616:	4b0b      	ldr	r3, [pc, #44]	; (8012644 <ip_reass_free_complete_datagram+0x140>)
 8012618:	881a      	ldrh	r2, [r3, #0]
 801261a:	8bfb      	ldrh	r3, [r7, #30]
 801261c:	1ad3      	subs	r3, r2, r3
 801261e:	b29a      	uxth	r2, r3
 8012620:	4b08      	ldr	r3, [pc, #32]	; (8012644 <ip_reass_free_complete_datagram+0x140>)
 8012622:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012624:	8bfb      	ldrh	r3, [r7, #30]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3720      	adds	r7, #32
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	08016f0c 	.word	0x08016f0c
 8012634:	08016f48 	.word	0x08016f48
 8012638:	08016f54 	.word	0x08016f54
 801263c:	08016f7c 	.word	0x08016f7c
 8012640:	08016f90 	.word	0x08016f90
 8012644:	2000900c 	.word	0x2000900c
 8012648:	08016fb0 	.word	0x08016fb0

0801264c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b08a      	sub	sp, #40	; 0x28
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012656:	2300      	movs	r3, #0
 8012658:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801265a:	2300      	movs	r3, #0
 801265c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801265e:	2300      	movs	r3, #0
 8012660:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012662:	2300      	movs	r3, #0
 8012664:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012666:	2300      	movs	r3, #0
 8012668:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801266a:	4b28      	ldr	r3, [pc, #160]	; (801270c <ip_reass_remove_oldest_datagram+0xc0>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012670:	e030      	b.n	80126d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012674:	695a      	ldr	r2, [r3, #20]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	429a      	cmp	r2, r3
 801267c:	d10c      	bne.n	8012698 <ip_reass_remove_oldest_datagram+0x4c>
 801267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012680:	699a      	ldr	r2, [r3, #24]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	691b      	ldr	r3, [r3, #16]
 8012686:	429a      	cmp	r2, r3
 8012688:	d106      	bne.n	8012698 <ip_reass_remove_oldest_datagram+0x4c>
 801268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268c:	899a      	ldrh	r2, [r3, #12]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	889b      	ldrh	r3, [r3, #4]
 8012692:	b29b      	uxth	r3, r3
 8012694:	429a      	cmp	r2, r3
 8012696:	d014      	beq.n	80126c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012698:	693b      	ldr	r3, [r7, #16]
 801269a:	3301      	adds	r3, #1
 801269c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801269e:	6a3b      	ldr	r3, [r7, #32]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d104      	bne.n	80126ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80126a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	61bb      	str	r3, [r7, #24]
 80126ac:	e009      	b.n	80126c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80126ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b0:	7fda      	ldrb	r2, [r3, #31]
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	7fdb      	ldrb	r3, [r3, #31]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d803      	bhi.n	80126c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80126ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80126c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d001      	beq.n	80126ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d1cb      	bne.n	8012672 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80126da:	6a3b      	ldr	r3, [r7, #32]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d008      	beq.n	80126f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80126e0:	69b9      	ldr	r1, [r7, #24]
 80126e2:	6a38      	ldr	r0, [r7, #32]
 80126e4:	f7ff ff0e 	bl	8012504 <ip_reass_free_complete_datagram>
 80126e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80126ea:	697a      	ldr	r2, [r7, #20]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	4413      	add	r3, r2
 80126f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80126f2:	697a      	ldr	r2, [r7, #20]
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	da02      	bge.n	8012700 <ip_reass_remove_oldest_datagram+0xb4>
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	dcac      	bgt.n	801265a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012700:	697b      	ldr	r3, [r7, #20]
}
 8012702:	4618      	mov	r0, r3
 8012704:	3728      	adds	r7, #40	; 0x28
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	20009008 	.word	0x20009008

08012710 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801271a:	2004      	movs	r0, #4
 801271c:	f7f7 f96c 	bl	80099f8 <memp_malloc>
 8012720:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d110      	bne.n	801274a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012728:	6839      	ldr	r1, [r7, #0]
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f7ff ff8e 	bl	801264c <ip_reass_remove_oldest_datagram>
 8012730:	4602      	mov	r2, r0
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	4293      	cmp	r3, r2
 8012736:	dc03      	bgt.n	8012740 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012738:	2004      	movs	r0, #4
 801273a:	f7f7 f95d 	bl	80099f8 <memp_malloc>
 801273e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d101      	bne.n	801274a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012746:	2300      	movs	r3, #0
 8012748:	e016      	b.n	8012778 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801274a:	2220      	movs	r2, #32
 801274c:	2100      	movs	r1, #0
 801274e:	68f8      	ldr	r0, [r7, #12]
 8012750:	f000 fe1c 	bl	801338c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	220f      	movs	r2, #15
 8012758:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801275a:	4b09      	ldr	r3, [pc, #36]	; (8012780 <ip_reass_enqueue_new_datagram+0x70>)
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012762:	4a07      	ldr	r2, [pc, #28]	; (8012780 <ip_reass_enqueue_new_datagram+0x70>)
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	3308      	adds	r3, #8
 801276c:	2214      	movs	r2, #20
 801276e:	6879      	ldr	r1, [r7, #4]
 8012770:	4618      	mov	r0, r3
 8012772:	f000 fde3 	bl	801333c <memcpy>
  return ipr;
 8012776:	68fb      	ldr	r3, [r7, #12]
}
 8012778:	4618      	mov	r0, r3
 801277a:	3710      	adds	r7, #16
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	20009008 	.word	0x20009008

08012784 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801278e:	4b10      	ldr	r3, [pc, #64]	; (80127d0 <ip_reass_dequeue_datagram+0x4c>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	429a      	cmp	r2, r3
 8012796:	d104      	bne.n	80127a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	4a0c      	ldr	r2, [pc, #48]	; (80127d0 <ip_reass_dequeue_datagram+0x4c>)
 801279e:	6013      	str	r3, [r2, #0]
 80127a0:	e00d      	b.n	80127be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d106      	bne.n	80127b6 <ip_reass_dequeue_datagram+0x32>
 80127a8:	4b0a      	ldr	r3, [pc, #40]	; (80127d4 <ip_reass_dequeue_datagram+0x50>)
 80127aa:	f240 1245 	movw	r2, #325	; 0x145
 80127ae:	490a      	ldr	r1, [pc, #40]	; (80127d8 <ip_reass_dequeue_datagram+0x54>)
 80127b0:	480a      	ldr	r0, [pc, #40]	; (80127dc <ip_reass_dequeue_datagram+0x58>)
 80127b2:	f000 fdf3 	bl	801339c <iprintf>
    prev->next = ipr->next;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681a      	ldr	r2, [r3, #0]
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80127be:	6879      	ldr	r1, [r7, #4]
 80127c0:	2004      	movs	r0, #4
 80127c2:	f7f7 f965 	bl	8009a90 <memp_free>
}
 80127c6:	bf00      	nop
 80127c8:	3708      	adds	r7, #8
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	bf00      	nop
 80127d0:	20009008 	.word	0x20009008
 80127d4:	08016f0c 	.word	0x08016f0c
 80127d8:	08016fd4 	.word	0x08016fd4
 80127dc:	08016f54 	.word	0x08016f54

080127e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b08c      	sub	sp, #48	; 0x30
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80127ec:	2300      	movs	r3, #0
 80127ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80127f0:	2301      	movs	r3, #1
 80127f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	885b      	ldrh	r3, [r3, #2]
 80127fe:	b29b      	uxth	r3, r3
 8012800:	4618      	mov	r0, r3
 8012802:	f7f6 fca3 	bl	800914c <lwip_htons>
 8012806:	4603      	mov	r3, r0
 8012808:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	f003 030f 	and.w	r3, r3, #15
 8012812:	b2db      	uxtb	r3, r3
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012818:	7e7b      	ldrb	r3, [r7, #25]
 801281a:	b29b      	uxth	r3, r3
 801281c:	8b7a      	ldrh	r2, [r7, #26]
 801281e:	429a      	cmp	r2, r3
 8012820:	d202      	bcs.n	8012828 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012822:	f04f 33ff 	mov.w	r3, #4294967295
 8012826:	e135      	b.n	8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012828:	7e7b      	ldrb	r3, [r7, #25]
 801282a:	b29b      	uxth	r3, r3
 801282c:	8b7a      	ldrh	r2, [r7, #26]
 801282e:	1ad3      	subs	r3, r2, r3
 8012830:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012832:	69fb      	ldr	r3, [r7, #28]
 8012834:	88db      	ldrh	r3, [r3, #6]
 8012836:	b29b      	uxth	r3, r3
 8012838:	4618      	mov	r0, r3
 801283a:	f7f6 fc87 	bl	800914c <lwip_htons>
 801283e:	4603      	mov	r3, r0
 8012840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012844:	b29b      	uxth	r3, r3
 8012846:	00db      	lsls	r3, r3, #3
 8012848:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	2200      	movs	r2, #0
 8012854:	701a      	strb	r2, [r3, #0]
 8012856:	2200      	movs	r2, #0
 8012858:	705a      	strb	r2, [r3, #1]
 801285a:	2200      	movs	r2, #0
 801285c:	709a      	strb	r2, [r3, #2]
 801285e:	2200      	movs	r2, #0
 8012860:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012864:	8afa      	ldrh	r2, [r7, #22]
 8012866:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012868:	8afa      	ldrh	r2, [r7, #22]
 801286a:	8b7b      	ldrh	r3, [r7, #26]
 801286c:	4413      	add	r3, r2
 801286e:	b29a      	uxth	r2, r3
 8012870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012872:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012876:	88db      	ldrh	r3, [r3, #6]
 8012878:	b29b      	uxth	r3, r3
 801287a:	8afa      	ldrh	r2, [r7, #22]
 801287c:	429a      	cmp	r2, r3
 801287e:	d902      	bls.n	8012886 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012880:	f04f 33ff 	mov.w	r3, #4294967295
 8012884:	e106      	b.n	8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	627b      	str	r3, [r7, #36]	; 0x24
 801288c:	e068      	b.n	8012960 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012896:	889b      	ldrh	r3, [r3, #4]
 8012898:	b29a      	uxth	r2, r3
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	889b      	ldrh	r3, [r3, #4]
 801289e:	b29b      	uxth	r3, r3
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d235      	bcs.n	8012910 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80128a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80128aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d020      	beq.n	80128f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80128b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b2:	889b      	ldrh	r3, [r3, #4]
 80128b4:	b29a      	uxth	r2, r3
 80128b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b8:	88db      	ldrh	r3, [r3, #6]
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	429a      	cmp	r2, r3
 80128be:	d307      	bcc.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80128c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c2:	88db      	ldrh	r3, [r3, #6]
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	889b      	ldrh	r3, [r3, #4]
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d902      	bls.n	80128d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128d0:	f04f 33ff 	mov.w	r3, #4294967295
 80128d4:	e0de      	b.n	8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80128d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d8:	68ba      	ldr	r2, [r7, #8]
 80128da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80128dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128de:	88db      	ldrh	r3, [r3, #6]
 80128e0:	b29a      	uxth	r2, r3
 80128e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e4:	889b      	ldrh	r3, [r3, #4]
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d03d      	beq.n	8012968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80128ec:	2300      	movs	r3, #0
 80128ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80128f0:	e03a      	b.n	8012968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80128f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f4:	88db      	ldrh	r3, [r3, #6]
 80128f6:	b29a      	uxth	r2, r3
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	889b      	ldrh	r3, [r3, #4]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	429a      	cmp	r2, r3
 8012900:	d902      	bls.n	8012908 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012902:	f04f 33ff 	mov.w	r3, #4294967295
 8012906:	e0c5      	b.n	8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	68ba      	ldr	r2, [r7, #8]
 801290c:	605a      	str	r2, [r3, #4]
      break;
 801290e:	e02b      	b.n	8012968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012912:	889b      	ldrh	r3, [r3, #4]
 8012914:	b29a      	uxth	r2, r3
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	889b      	ldrh	r3, [r3, #4]
 801291a:	b29b      	uxth	r3, r3
 801291c:	429a      	cmp	r2, r3
 801291e:	d102      	bne.n	8012926 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012920:	f04f 33ff 	mov.w	r3, #4294967295
 8012924:	e0b6      	b.n	8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012928:	889b      	ldrh	r3, [r3, #4]
 801292a:	b29a      	uxth	r2, r3
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	88db      	ldrh	r3, [r3, #6]
 8012930:	b29b      	uxth	r3, r3
 8012932:	429a      	cmp	r2, r3
 8012934:	d202      	bcs.n	801293c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012936:	f04f 33ff 	mov.w	r3, #4294967295
 801293a:	e0ab      	b.n	8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293e:	2b00      	cmp	r3, #0
 8012940:	d009      	beq.n	8012956 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012944:	88db      	ldrh	r3, [r3, #6]
 8012946:	b29a      	uxth	r2, r3
 8012948:	693b      	ldr	r3, [r7, #16]
 801294a:	889b      	ldrh	r3, [r3, #4]
 801294c:	b29b      	uxth	r3, r3
 801294e:	429a      	cmp	r2, r3
 8012950:	d001      	beq.n	8012956 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012952:	2300      	movs	r3, #0
 8012954:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012962:	2b00      	cmp	r3, #0
 8012964:	d193      	bne.n	801288e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012966:	e000      	b.n	801296a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012968:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296c:	2b00      	cmp	r3, #0
 801296e:	d12d      	bne.n	80129cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012972:	2b00      	cmp	r3, #0
 8012974:	d01c      	beq.n	80129b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012978:	88db      	ldrh	r3, [r3, #6]
 801297a:	b29a      	uxth	r2, r3
 801297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801297e:	889b      	ldrh	r3, [r3, #4]
 8012980:	b29b      	uxth	r3, r3
 8012982:	429a      	cmp	r2, r3
 8012984:	d906      	bls.n	8012994 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012986:	4b45      	ldr	r3, [pc, #276]	; (8012a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012988:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801298c:	4944      	ldr	r1, [pc, #272]	; (8012aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801298e:	4845      	ldr	r0, [pc, #276]	; (8012aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012990:	f000 fd04 	bl	801339c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299c:	88db      	ldrh	r3, [r3, #6]
 801299e:	b29a      	uxth	r2, r3
 80129a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a2:	889b      	ldrh	r3, [r3, #4]
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d010      	beq.n	80129cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80129aa:	2300      	movs	r3, #0
 80129ac:	623b      	str	r3, [r7, #32]
 80129ae:	e00d      	b.n	80129cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d006      	beq.n	80129c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80129b8:	4b38      	ldr	r3, [pc, #224]	; (8012a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129ba:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80129be:	493a      	ldr	r1, [pc, #232]	; (8012aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80129c0:	4838      	ldr	r0, [pc, #224]	; (8012aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129c2:	f000 fceb 	bl	801339c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	68ba      	ldr	r2, [r7, #8]
 80129ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d105      	bne.n	80129de <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	7f9b      	ldrb	r3, [r3, #30]
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d059      	beq.n	8012a92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80129de:	6a3b      	ldr	r3, [r7, #32]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d04f      	beq.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d006      	beq.n	80129fa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	685b      	ldr	r3, [r3, #4]
 80129f0:	685b      	ldr	r3, [r3, #4]
 80129f2:	889b      	ldrh	r3, [r3, #4]
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d002      	beq.n	8012a00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80129fa:	2300      	movs	r3, #0
 80129fc:	623b      	str	r3, [r7, #32]
 80129fe:	e041      	b.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a02:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012a0a:	e012      	b.n	8012a32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a14:	88db      	ldrh	r3, [r3, #6]
 8012a16:	b29a      	uxth	r2, r3
 8012a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1a:	889b      	ldrh	r3, [r3, #4]
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d002      	beq.n	8012a28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012a22:	2300      	movs	r3, #0
 8012a24:	623b      	str	r3, [r7, #32]
            break;
 8012a26:	e007      	b.n	8012a38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1e9      	bne.n	8012a0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012a38:	6a3b      	ldr	r3, [r7, #32]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d022      	beq.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d106      	bne.n	8012a54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012a46:	4b15      	ldr	r3, [pc, #84]	; (8012a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a48:	f240 12df 	movw	r2, #479	; 0x1df
 8012a4c:	4917      	ldr	r1, [pc, #92]	; (8012aac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012a4e:	4815      	ldr	r0, [pc, #84]	; (8012aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a50:	f000 fca4 	bl	801339c <iprintf>
          LWIP_ASSERT("sanity check",
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	685b      	ldr	r3, [r3, #4]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d106      	bne.n	8012a6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012a60:	4b0e      	ldr	r3, [pc, #56]	; (8012a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a62:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012a66:	4911      	ldr	r1, [pc, #68]	; (8012aac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012a68:	480e      	ldr	r0, [pc, #56]	; (8012aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a6a:	f000 fc97 	bl	801339c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d006      	beq.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012a76:	4b09      	ldr	r3, [pc, #36]	; (8012a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a78:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012a7c:	490c      	ldr	r1, [pc, #48]	; (8012ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012a7e:	4809      	ldr	r0, [pc, #36]	; (8012aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a80:	f000 fc8c 	bl	801339c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012a84:	6a3b      	ldr	r3, [r7, #32]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	bf14      	ite	ne
 8012a8a:	2301      	movne	r3, #1
 8012a8c:	2300      	moveq	r3, #0
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	e000      	b.n	8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012a92:	2300      	movs	r3, #0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3730      	adds	r7, #48	; 0x30
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	08016f0c 	.word	0x08016f0c
 8012aa0:	08016ff0 	.word	0x08016ff0
 8012aa4:	08016f54 	.word	0x08016f54
 8012aa8:	08017010 	.word	0x08017010
 8012aac:	08017048 	.word	0x08017048
 8012ab0:	08017058 	.word	0x08017058

08012ab4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b08e      	sub	sp, #56	; 0x38
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	f003 030f 	and.w	r3, r3, #15
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	009b      	lsls	r3, r3, #2
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	2b14      	cmp	r3, #20
 8012ad2:	f040 8171 	bne.w	8012db8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad8:	88db      	ldrh	r3, [r3, #6]
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7f6 fb35 	bl	800914c <lwip_htons>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	00db      	lsls	r3, r3, #3
 8012aec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af0:	885b      	ldrh	r3, [r3, #2]
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7f6 fb29 	bl	800914c <lwip_htons>
 8012afa:	4603      	mov	r3, r0
 8012afc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	f003 030f 	and.w	r3, r3, #15
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b16:	429a      	cmp	r2, r3
 8012b18:	f0c0 8150 	bcc.w	8012dbc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b24:	1ad3      	subs	r3, r2, r3
 8012b26:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7f7 fe4b 	bl	800a7c4 <pbuf_clen>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012b32:	4b8c      	ldr	r3, [pc, #560]	; (8012d64 <ip4_reass+0x2b0>)
 8012b34:	881b      	ldrh	r3, [r3, #0]
 8012b36:	461a      	mov	r2, r3
 8012b38:	8c3b      	ldrh	r3, [r7, #32]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	2b0a      	cmp	r3, #10
 8012b3e:	dd10      	ble.n	8012b62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b40:	8c3b      	ldrh	r3, [r7, #32]
 8012b42:	4619      	mov	r1, r3
 8012b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b46:	f7ff fd81 	bl	801264c <ip_reass_remove_oldest_datagram>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	f000 8137 	beq.w	8012dc0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012b52:	4b84      	ldr	r3, [pc, #528]	; (8012d64 <ip4_reass+0x2b0>)
 8012b54:	881b      	ldrh	r3, [r3, #0]
 8012b56:	461a      	mov	r2, r3
 8012b58:	8c3b      	ldrh	r3, [r7, #32]
 8012b5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b5c:	2b0a      	cmp	r3, #10
 8012b5e:	f300 812f 	bgt.w	8012dc0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b62:	4b81      	ldr	r3, [pc, #516]	; (8012d68 <ip4_reass+0x2b4>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	633b      	str	r3, [r7, #48]	; 0x30
 8012b68:	e015      	b.n	8012b96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6c:	695a      	ldr	r2, [r3, #20]
 8012b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d10c      	bne.n	8012b90 <ip4_reass+0xdc>
 8012b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b78:	699a      	ldr	r2, [r3, #24]
 8012b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7c:	691b      	ldr	r3, [r3, #16]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d106      	bne.n	8012b90 <ip4_reass+0xdc>
 8012b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b84:	899a      	ldrh	r2, [r3, #12]
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b88:	889b      	ldrh	r3, [r3, #4]
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d006      	beq.n	8012b9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	633b      	str	r3, [r7, #48]	; 0x30
 8012b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d1e6      	bne.n	8012b6a <ip4_reass+0xb6>
 8012b9c:	e000      	b.n	8012ba0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012b9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d109      	bne.n	8012bba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012ba6:	8c3b      	ldrh	r3, [r7, #32]
 8012ba8:	4619      	mov	r1, r3
 8012baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bac:	f7ff fdb0 	bl	8012710 <ip_reass_enqueue_new_datagram>
 8012bb0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d11c      	bne.n	8012bf2 <ip4_reass+0x13e>
      goto nullreturn;
 8012bb8:	e105      	b.n	8012dc6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bbc:	88db      	ldrh	r3, [r3, #6]
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7f6 fac3 	bl	800914c <lwip_htons>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d110      	bne.n	8012bf2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd2:	89db      	ldrh	r3, [r3, #14]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f6 fab9 	bl	800914c <lwip_htons>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d006      	beq.n	8012bf2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be6:	3308      	adds	r3, #8
 8012be8:	2214      	movs	r2, #20
 8012bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012bec:	4618      	mov	r0, r3
 8012bee:	f000 fba5 	bl	801333c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf4:	88db      	ldrh	r3, [r3, #6]
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	f003 0320 	and.w	r3, r3, #32
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	bf0c      	ite	eq
 8012c00:	2301      	moveq	r3, #1
 8012c02:	2300      	movne	r3, #0
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d00e      	beq.n	8012c2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012c0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c12:	4413      	add	r3, r2
 8012c14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012c16:	8b7a      	ldrh	r2, [r7, #26]
 8012c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	f0c0 80a0 	bcc.w	8012d60 <ip4_reass+0x2ac>
 8012c20:	8b7b      	ldrh	r3, [r7, #26]
 8012c22:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012c26:	4293      	cmp	r3, r2
 8012c28:	f200 809a 	bhi.w	8012d60 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012c2c:	69fa      	ldr	r2, [r7, #28]
 8012c2e:	6879      	ldr	r1, [r7, #4]
 8012c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c32:	f7ff fdd5 	bl	80127e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8012c36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c3e:	f000 809b 	beq.w	8012d78 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012c42:	4b48      	ldr	r3, [pc, #288]	; (8012d64 <ip4_reass+0x2b0>)
 8012c44:	881a      	ldrh	r2, [r3, #0]
 8012c46:	8c3b      	ldrh	r3, [r7, #32]
 8012c48:	4413      	add	r3, r2
 8012c4a:	b29a      	uxth	r2, r3
 8012c4c:	4b45      	ldr	r3, [pc, #276]	; (8012d64 <ip4_reass+0x2b0>)
 8012c4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d00d      	beq.n	8012c72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012c56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c5a:	4413      	add	r3, r2
 8012c5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c60:	8a7a      	ldrh	r2, [r7, #18]
 8012c62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c66:	7f9b      	ldrb	r3, [r3, #30]
 8012c68:	f043 0301 	orr.w	r3, r3, #1
 8012c6c:	b2da      	uxtb	r2, r3
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d171      	bne.n	8012d5c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7a:	8b9b      	ldrh	r3, [r3, #28]
 8012c7c:	3314      	adds	r3, #20
 8012c7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c94:	3308      	adds	r3, #8
 8012c96:	2214      	movs	r2, #20
 8012c98:	4619      	mov	r1, r3
 8012c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c9c:	f000 fb4e 	bl	801333c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012ca0:	8a3b      	ldrh	r3, [r7, #16]
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7f6 fa52 	bl	800914c <lwip_htons>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	461a      	mov	r2, r3
 8012cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	719a      	strb	r2, [r3, #6]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	729a      	strb	r2, [r3, #10]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012cca:	e00d      	b.n	8012ce8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012cd2:	2114      	movs	r1, #20
 8012cd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012cd6:	f7f7 fc67 	bl	800a5a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012cda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f7f7 fdab 	bl	800a838 <pbuf_cat>
      r = iprh->next_pbuf;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d1ee      	bne.n	8012ccc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012cee:	4b1e      	ldr	r3, [pc, #120]	; (8012d68 <ip4_reass+0x2b4>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d102      	bne.n	8012cfe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012cfc:	e010      	b.n	8012d20 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012cfe:	4b1a      	ldr	r3, [pc, #104]	; (8012d68 <ip4_reass+0x2b4>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d04:	e007      	b.n	8012d16 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d006      	beq.n	8012d1e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d1f4      	bne.n	8012d06 <ip4_reass+0x252>
 8012d1c:	e000      	b.n	8012d20 <ip4_reass+0x26c>
          break;
 8012d1e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d24:	f7ff fd2e 	bl	8012784 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7f7 fd4b 	bl	800a7c4 <pbuf_clen>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012d32:	4b0c      	ldr	r3, [pc, #48]	; (8012d64 <ip4_reass+0x2b0>)
 8012d34:	881b      	ldrh	r3, [r3, #0]
 8012d36:	8c3a      	ldrh	r2, [r7, #32]
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d906      	bls.n	8012d4a <ip4_reass+0x296>
 8012d3c:	4b0b      	ldr	r3, [pc, #44]	; (8012d6c <ip4_reass+0x2b8>)
 8012d3e:	f240 229b 	movw	r2, #667	; 0x29b
 8012d42:	490b      	ldr	r1, [pc, #44]	; (8012d70 <ip4_reass+0x2bc>)
 8012d44:	480b      	ldr	r0, [pc, #44]	; (8012d74 <ip4_reass+0x2c0>)
 8012d46:	f000 fb29 	bl	801339c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012d4a:	4b06      	ldr	r3, [pc, #24]	; (8012d64 <ip4_reass+0x2b0>)
 8012d4c:	881a      	ldrh	r2, [r3, #0]
 8012d4e:	8c3b      	ldrh	r3, [r7, #32]
 8012d50:	1ad3      	subs	r3, r2, r3
 8012d52:	b29a      	uxth	r2, r3
 8012d54:	4b03      	ldr	r3, [pc, #12]	; (8012d64 <ip4_reass+0x2b0>)
 8012d56:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	e038      	b.n	8012dce <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	e036      	b.n	8012dce <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012d60:	bf00      	nop
 8012d62:	e00a      	b.n	8012d7a <ip4_reass+0x2c6>
 8012d64:	2000900c 	.word	0x2000900c
 8012d68:	20009008 	.word	0x20009008
 8012d6c:	08016f0c 	.word	0x08016f0c
 8012d70:	0801707c 	.word	0x0801707c
 8012d74:	08016f54 	.word	0x08016f54
    goto nullreturn_ipr;
 8012d78:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d106      	bne.n	8012d8e <ip4_reass+0x2da>
 8012d80:	4b15      	ldr	r3, [pc, #84]	; (8012dd8 <ip4_reass+0x324>)
 8012d82:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012d86:	4915      	ldr	r1, [pc, #84]	; (8012ddc <ip4_reass+0x328>)
 8012d88:	4815      	ldr	r0, [pc, #84]	; (8012de0 <ip4_reass+0x32c>)
 8012d8a:	f000 fb07 	bl	801339c <iprintf>
  if (ipr->p == NULL) {
 8012d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d116      	bne.n	8012dc4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012d96:	4b13      	ldr	r3, [pc, #76]	; (8012de4 <ip4_reass+0x330>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d006      	beq.n	8012dae <ip4_reass+0x2fa>
 8012da0:	4b0d      	ldr	r3, [pc, #52]	; (8012dd8 <ip4_reass+0x324>)
 8012da2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012da6:	4910      	ldr	r1, [pc, #64]	; (8012de8 <ip4_reass+0x334>)
 8012da8:	480d      	ldr	r0, [pc, #52]	; (8012de0 <ip4_reass+0x32c>)
 8012daa:	f000 faf7 	bl	801339c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012dae:	2100      	movs	r1, #0
 8012db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012db2:	f7ff fce7 	bl	8012784 <ip_reass_dequeue_datagram>
 8012db6:	e006      	b.n	8012dc6 <ip4_reass+0x312>
    goto nullreturn;
 8012db8:	bf00      	nop
 8012dba:	e004      	b.n	8012dc6 <ip4_reass+0x312>
    goto nullreturn;
 8012dbc:	bf00      	nop
 8012dbe:	e002      	b.n	8012dc6 <ip4_reass+0x312>
      goto nullreturn;
 8012dc0:	bf00      	nop
 8012dc2:	e000      	b.n	8012dc6 <ip4_reass+0x312>
  }

nullreturn:
 8012dc4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7f7 fc74 	bl	800a6b4 <pbuf_free>
  return NULL;
 8012dcc:	2300      	movs	r3, #0
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3738      	adds	r7, #56	; 0x38
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	08016f0c 	.word	0x08016f0c
 8012ddc:	08017098 	.word	0x08017098
 8012de0:	08016f54 	.word	0x08016f54
 8012de4:	20009008 	.word	0x20009008
 8012de8:	080170a4 	.word	0x080170a4

08012dec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012df0:	2005      	movs	r0, #5
 8012df2:	f7f6 fe01 	bl	80099f8 <memp_malloc>
 8012df6:	4603      	mov	r3, r0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d106      	bne.n	8012e18 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012e0a:	4b07      	ldr	r3, [pc, #28]	; (8012e28 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012e0c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012e10:	4906      	ldr	r1, [pc, #24]	; (8012e2c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012e12:	4807      	ldr	r0, [pc, #28]	; (8012e30 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012e14:	f000 fac2 	bl	801339c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012e18:	6879      	ldr	r1, [r7, #4]
 8012e1a:	2005      	movs	r0, #5
 8012e1c:	f7f6 fe38 	bl	8009a90 <memp_free>
}
 8012e20:	bf00      	nop
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	08016f0c 	.word	0x08016f0c
 8012e2c:	080170c4 	.word	0x080170c4
 8012e30:	08016f54 	.word	0x08016f54

08012e34 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b084      	sub	sp, #16
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d106      	bne.n	8012e54 <ipfrag_free_pbuf_custom+0x20>
 8012e46:	4b11      	ldr	r3, [pc, #68]	; (8012e8c <ipfrag_free_pbuf_custom+0x58>)
 8012e48:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012e4c:	4910      	ldr	r1, [pc, #64]	; (8012e90 <ipfrag_free_pbuf_custom+0x5c>)
 8012e4e:	4811      	ldr	r0, [pc, #68]	; (8012e94 <ipfrag_free_pbuf_custom+0x60>)
 8012e50:	f000 faa4 	bl	801339c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012e54:	68fa      	ldr	r2, [r7, #12]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d006      	beq.n	8012e6a <ipfrag_free_pbuf_custom+0x36>
 8012e5c:	4b0b      	ldr	r3, [pc, #44]	; (8012e8c <ipfrag_free_pbuf_custom+0x58>)
 8012e5e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012e62:	490d      	ldr	r1, [pc, #52]	; (8012e98 <ipfrag_free_pbuf_custom+0x64>)
 8012e64:	480b      	ldr	r0, [pc, #44]	; (8012e94 <ipfrag_free_pbuf_custom+0x60>)
 8012e66:	f000 fa99 	bl	801339c <iprintf>
  if (pcr->original != NULL) {
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	695b      	ldr	r3, [r3, #20]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d004      	beq.n	8012e7c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	695b      	ldr	r3, [r3, #20]
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7f7 fc1c 	bl	800a6b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f7ff ffbd 	bl	8012dfc <ip_frag_free_pbuf_custom_ref>
}
 8012e82:	bf00      	nop
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	08016f0c 	.word	0x08016f0c
 8012e90:	080170d0 	.word	0x080170d0
 8012e94:	08016f54 	.word	0x08016f54
 8012e98:	080170dc 	.word	0x080170dc

08012e9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b094      	sub	sp, #80	; 0x50
 8012ea0:	af02      	add	r7, sp, #8
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012eb2:	3b14      	subs	r3, #20
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	da00      	bge.n	8012eba <ip4_frag+0x1e>
 8012eb8:	3307      	adds	r3, #7
 8012eba:	10db      	asrs	r3, r3, #3
 8012ebc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012ebe:	2314      	movs	r3, #20
 8012ec0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	f003 030f 	and.w	r3, r3, #15
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	009b      	lsls	r3, r3, #2
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b14      	cmp	r3, #20
 8012edc:	d002      	beq.n	8012ee4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012ede:	f06f 0305 	mvn.w	r3, #5
 8012ee2:	e110      	b.n	8013106 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	895b      	ldrh	r3, [r3, #10]
 8012ee8:	2b13      	cmp	r3, #19
 8012eea:	d809      	bhi.n	8012f00 <ip4_frag+0x64>
 8012eec:	4b88      	ldr	r3, [pc, #544]	; (8013110 <ip4_frag+0x274>)
 8012eee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012ef2:	4988      	ldr	r1, [pc, #544]	; (8013114 <ip4_frag+0x278>)
 8012ef4:	4888      	ldr	r0, [pc, #544]	; (8013118 <ip4_frag+0x27c>)
 8012ef6:	f000 fa51 	bl	801339c <iprintf>
 8012efa:	f06f 0305 	mvn.w	r3, #5
 8012efe:	e102      	b.n	8013106 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f02:	88db      	ldrh	r3, [r3, #6]
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7f6 f920 	bl	800914c <lwip_htons>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012f10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012f1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012f20:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	891b      	ldrh	r3, [r3, #8]
 8012f26:	3b14      	subs	r3, #20
 8012f28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012f2c:	e0e1      	b.n	80130f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012f2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012f30:	00db      	lsls	r3, r3, #3
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	bf28      	it	cs
 8012f3c:	4613      	movcs	r3, r2
 8012f3e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012f40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f44:	2114      	movs	r1, #20
 8012f46:	200e      	movs	r0, #14
 8012f48:	f7f7 f8d0 	bl	800a0ec <pbuf_alloc>
 8012f4c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	f000 80d5 	beq.w	8013100 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f58:	895b      	ldrh	r3, [r3, #10]
 8012f5a:	2b13      	cmp	r3, #19
 8012f5c:	d806      	bhi.n	8012f6c <ip4_frag+0xd0>
 8012f5e:	4b6c      	ldr	r3, [pc, #432]	; (8013110 <ip4_frag+0x274>)
 8012f60:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012f64:	496d      	ldr	r1, [pc, #436]	; (801311c <ip4_frag+0x280>)
 8012f66:	486c      	ldr	r0, [pc, #432]	; (8013118 <ip4_frag+0x27c>)
 8012f68:	f000 fa18 	bl	801339c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	2214      	movs	r2, #20
 8012f72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012f74:	4618      	mov	r0, r3
 8012f76:	f000 f9e1 	bl	801333c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7c:	685b      	ldr	r3, [r3, #4]
 8012f7e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012f80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012f82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012f86:	e064      	b.n	8013052 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	895a      	ldrh	r2, [r3, #10]
 8012f8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	895b      	ldrh	r3, [r3, #10]
 8012f96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d906      	bls.n	8012faa <ip4_frag+0x10e>
 8012f9c:	4b5c      	ldr	r3, [pc, #368]	; (8013110 <ip4_frag+0x274>)
 8012f9e:	f240 322d 	movw	r2, #813	; 0x32d
 8012fa2:	495f      	ldr	r1, [pc, #380]	; (8013120 <ip4_frag+0x284>)
 8012fa4:	485c      	ldr	r0, [pc, #368]	; (8013118 <ip4_frag+0x27c>)
 8012fa6:	f000 f9f9 	bl	801339c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012faa:	8bfa      	ldrh	r2, [r7, #30]
 8012fac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	bf28      	it	cs
 8012fb4:	4613      	movcs	r3, r2
 8012fb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012fba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d105      	bne.n	8012fce <ip4_frag+0x132>
        poff = 0;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	60fb      	str	r3, [r7, #12]
        continue;
 8012fcc:	e041      	b.n	8013052 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012fce:	f7ff ff0d 	bl	8012dec <ip_frag_alloc_pbuf_custom_ref>
 8012fd2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012fd4:	69bb      	ldr	r3, [r7, #24]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d103      	bne.n	8012fe2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fdc:	f7f7 fb6a 	bl	800a6b4 <pbuf_free>
        goto memerr;
 8012fe0:	e08f      	b.n	8013102 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012fe2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012fe8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012fea:	4413      	add	r3, r2
 8012fec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012ff0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012ff4:	9201      	str	r2, [sp, #4]
 8012ff6:	9300      	str	r3, [sp, #0]
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	2241      	movs	r2, #65	; 0x41
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	f7f7 f99f 	bl	800a340 <pbuf_alloced_custom>
 8013002:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d106      	bne.n	8013018 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801300a:	69b8      	ldr	r0, [r7, #24]
 801300c:	f7ff fef6 	bl	8012dfc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013012:	f7f7 fb4f 	bl	800a6b4 <pbuf_free>
        goto memerr;
 8013016:	e074      	b.n	8013102 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013018:	68f8      	ldr	r0, [r7, #12]
 801301a:	f7f7 fbeb 	bl	800a7f4 <pbuf_ref>
      pcr->original = p;
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013024:	69bb      	ldr	r3, [r7, #24]
 8013026:	4a3f      	ldr	r2, [pc, #252]	; (8013124 <ip4_frag+0x288>)
 8013028:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801302a:	6979      	ldr	r1, [r7, #20]
 801302c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801302e:	f7f7 fc03 	bl	800a838 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013032:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013036:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801303a:	1ad3      	subs	r3, r2, r3
 801303c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013040:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013044:	2b00      	cmp	r3, #0
 8013046:	d004      	beq.n	8013052 <ip4_frag+0x1b6>
        poff = 0;
 8013048:	2300      	movs	r3, #0
 801304a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013052:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013056:	2b00      	cmp	r3, #0
 8013058:	d196      	bne.n	8012f88 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801305a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801305c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013060:	4413      	add	r3, r2
 8013062:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013068:	f1a3 0213 	sub.w	r2, r3, #19
 801306c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013070:	429a      	cmp	r2, r3
 8013072:	bfcc      	ite	gt
 8013074:	2301      	movgt	r3, #1
 8013076:	2300      	movle	r3, #0
 8013078:	b2db      	uxtb	r3, r3
 801307a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801307c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013084:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013086:	6a3b      	ldr	r3, [r7, #32]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d002      	beq.n	8013092 <ip4_frag+0x1f6>
 801308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013092:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013094:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013098:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801309a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801309c:	4618      	mov	r0, r3
 801309e:	f7f6 f855 	bl	800914c <lwip_htons>
 80130a2:	4603      	mov	r3, r0
 80130a4:	461a      	mov	r2, r3
 80130a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80130aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130ac:	3314      	adds	r3, #20
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7f6 f84b 	bl	800914c <lwip_htons>
 80130b6:	4603      	mov	r3, r0
 80130b8:	461a      	mov	r2, r3
 80130ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80130be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c0:	2200      	movs	r2, #0
 80130c2:	729a      	strb	r2, [r3, #10]
 80130c4:	2200      	movs	r2, #0
 80130c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	695b      	ldr	r3, [r3, #20]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130d0:	68b8      	ldr	r0, [r7, #8]
 80130d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80130d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130d6:	f7f7 faed 	bl	800a6b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80130da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130e0:	1ad3      	subs	r3, r2, r3
 80130e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80130e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80130ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80130ec:	4413      	add	r3, r2
 80130ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80130f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	f47f af19 	bne.w	8012f2e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80130fc:	2300      	movs	r3, #0
 80130fe:	e002      	b.n	8013106 <ip4_frag+0x26a>
      goto memerr;
 8013100:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013106:	4618      	mov	r0, r3
 8013108:	3748      	adds	r7, #72	; 0x48
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	08016f0c 	.word	0x08016f0c
 8013114:	080170e8 	.word	0x080170e8
 8013118:	08016f54 	.word	0x08016f54
 801311c:	08017104 	.word	0x08017104
 8013120:	08017124 	.word	0x08017124
 8013124:	08012e35 	.word	0x08012e35

08013128 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b086      	sub	sp, #24
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013132:	230e      	movs	r3, #14
 8013134:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	895b      	ldrh	r3, [r3, #10]
 801313a:	2b0e      	cmp	r3, #14
 801313c:	d96e      	bls.n	801321c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	7bdb      	ldrb	r3, [r3, #15]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d106      	bne.n	8013154 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801314c:	3301      	adds	r3, #1
 801314e:	b2da      	uxtb	r2, r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	685b      	ldr	r3, [r3, #4]
 8013158:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	7b1a      	ldrb	r2, [r3, #12]
 801315e:	7b5b      	ldrb	r3, [r3, #13]
 8013160:	021b      	lsls	r3, r3, #8
 8013162:	4313      	orrs	r3, r2
 8013164:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	f003 0301 	and.w	r3, r3, #1
 801316e:	2b00      	cmp	r3, #0
 8013170:	d023      	beq.n	80131ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	2b01      	cmp	r3, #1
 8013178:	d10f      	bne.n	801319a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	785b      	ldrb	r3, [r3, #1]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d11b      	bne.n	80131ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013186:	2b5e      	cmp	r3, #94	; 0x5e
 8013188:	d117      	bne.n	80131ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	7b5b      	ldrb	r3, [r3, #13]
 801318e:	f043 0310 	orr.w	r3, r3, #16
 8013192:	b2da      	uxtb	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	735a      	strb	r2, [r3, #13]
 8013198:	e00f      	b.n	80131ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	2206      	movs	r2, #6
 801319e:	4928      	ldr	r1, [pc, #160]	; (8013240 <ethernet_input+0x118>)
 80131a0:	4618      	mov	r0, r3
 80131a2:	f000 f8bb 	bl	801331c <memcmp>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d106      	bne.n	80131ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	7b5b      	ldrb	r3, [r3, #13]
 80131b0:	f043 0308 	orr.w	r3, r3, #8
 80131b4:	b2da      	uxtb	r2, r3
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80131ba:	89fb      	ldrh	r3, [r7, #14]
 80131bc:	2b08      	cmp	r3, #8
 80131be:	d003      	beq.n	80131c8 <ethernet_input+0xa0>
 80131c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80131c4:	d014      	beq.n	80131f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80131c6:	e032      	b.n	801322e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131ce:	f003 0308 	and.w	r3, r3, #8
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d024      	beq.n	8013220 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80131d6:	8afb      	ldrh	r3, [r7, #22]
 80131d8:	4619      	mov	r1, r3
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f7f7 f9e4 	bl	800a5a8 <pbuf_remove_header>
 80131e0:	4603      	mov	r3, r0
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d11e      	bne.n	8013224 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80131e6:	6839      	ldr	r1, [r7, #0]
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7fe ff21 	bl	8012030 <ip4_input>
      break;
 80131ee:	e013      	b.n	8013218 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131f6:	f003 0308 	and.w	r3, r3, #8
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d014      	beq.n	8013228 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80131fe:	8afb      	ldrh	r3, [r7, #22]
 8013200:	4619      	mov	r1, r3
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f7f7 f9d0 	bl	800a5a8 <pbuf_remove_header>
 8013208:	4603      	mov	r3, r0
 801320a:	2b00      	cmp	r3, #0
 801320c:	d10e      	bne.n	801322c <ethernet_input+0x104>
        etharp_input(p, netif);
 801320e:	6839      	ldr	r1, [r7, #0]
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f7fe f8c1 	bl	8011398 <etharp_input>
      break;
 8013216:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013218:	2300      	movs	r3, #0
 801321a:	e00c      	b.n	8013236 <ethernet_input+0x10e>
    goto free_and_return;
 801321c:	bf00      	nop
 801321e:	e006      	b.n	801322e <ethernet_input+0x106>
        goto free_and_return;
 8013220:	bf00      	nop
 8013222:	e004      	b.n	801322e <ethernet_input+0x106>
        goto free_and_return;
 8013224:	bf00      	nop
 8013226:	e002      	b.n	801322e <ethernet_input+0x106>
        goto free_and_return;
 8013228:	bf00      	nop
 801322a:	e000      	b.n	801322e <ethernet_input+0x106>
        goto free_and_return;
 801322c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7f7 fa40 	bl	800a6b4 <pbuf_free>
  return ERR_OK;
 8013234:	2300      	movs	r3, #0
}
 8013236:	4618      	mov	r0, r3
 8013238:	3718      	adds	r7, #24
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	080172bc 	.word	0x080172bc

08013244 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013244:	b580      	push	{r7, lr}
 8013246:	b086      	sub	sp, #24
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	607a      	str	r2, [r7, #4]
 8013250:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013252:	8c3b      	ldrh	r3, [r7, #32]
 8013254:	4618      	mov	r0, r3
 8013256:	f7f5 ff79 	bl	800914c <lwip_htons>
 801325a:	4603      	mov	r3, r0
 801325c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801325e:	210e      	movs	r1, #14
 8013260:	68b8      	ldr	r0, [r7, #8]
 8013262:	f7f7 f991 	bl	800a588 <pbuf_add_header>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d125      	bne.n	80132b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	8afa      	ldrh	r2, [r7, #22]
 8013276:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	2206      	movs	r2, #6
 801327c:	6839      	ldr	r1, [r7, #0]
 801327e:	4618      	mov	r0, r3
 8013280:	f000 f85c 	bl	801333c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	3306      	adds	r3, #6
 8013288:	2206      	movs	r2, #6
 801328a:	6879      	ldr	r1, [r7, #4]
 801328c:	4618      	mov	r0, r3
 801328e:	f000 f855 	bl	801333c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013298:	2b06      	cmp	r3, #6
 801329a:	d006      	beq.n	80132aa <ethernet_output+0x66>
 801329c:	4b0a      	ldr	r3, [pc, #40]	; (80132c8 <ethernet_output+0x84>)
 801329e:	f44f 7299 	mov.w	r2, #306	; 0x132
 80132a2:	490a      	ldr	r1, [pc, #40]	; (80132cc <ethernet_output+0x88>)
 80132a4:	480a      	ldr	r0, [pc, #40]	; (80132d0 <ethernet_output+0x8c>)
 80132a6:	f000 f879 	bl	801339c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	699b      	ldr	r3, [r3, #24]
 80132ae:	68b9      	ldr	r1, [r7, #8]
 80132b0:	68f8      	ldr	r0, [r7, #12]
 80132b2:	4798      	blx	r3
 80132b4:	4603      	mov	r3, r0
 80132b6:	e002      	b.n	80132be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80132b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80132ba:	f06f 0301 	mvn.w	r3, #1
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3718      	adds	r7, #24
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	08017134 	.word	0x08017134
 80132cc:	0801716c 	.word	0x0801716c
 80132d0:	080171a0 	.word	0x080171a0

080132d4 <__libc_init_array>:
 80132d4:	b570      	push	{r4, r5, r6, lr}
 80132d6:	4d0d      	ldr	r5, [pc, #52]	; (801330c <__libc_init_array+0x38>)
 80132d8:	4c0d      	ldr	r4, [pc, #52]	; (8013310 <__libc_init_array+0x3c>)
 80132da:	1b64      	subs	r4, r4, r5
 80132dc:	10a4      	asrs	r4, r4, #2
 80132de:	2600      	movs	r6, #0
 80132e0:	42a6      	cmp	r6, r4
 80132e2:	d109      	bne.n	80132f8 <__libc_init_array+0x24>
 80132e4:	4d0b      	ldr	r5, [pc, #44]	; (8013314 <__libc_init_array+0x40>)
 80132e6:	4c0c      	ldr	r4, [pc, #48]	; (8013318 <__libc_init_array+0x44>)
 80132e8:	f001 fa5c 	bl	80147a4 <_init>
 80132ec:	1b64      	subs	r4, r4, r5
 80132ee:	10a4      	asrs	r4, r4, #2
 80132f0:	2600      	movs	r6, #0
 80132f2:	42a6      	cmp	r6, r4
 80132f4:	d105      	bne.n	8013302 <__libc_init_array+0x2e>
 80132f6:	bd70      	pop	{r4, r5, r6, pc}
 80132f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80132fc:	4798      	blx	r3
 80132fe:	3601      	adds	r6, #1
 8013300:	e7ee      	b.n	80132e0 <__libc_init_array+0xc>
 8013302:	f855 3b04 	ldr.w	r3, [r5], #4
 8013306:	4798      	blx	r3
 8013308:	3601      	adds	r6, #1
 801330a:	e7f2      	b.n	80132f2 <__libc_init_array+0x1e>
 801330c:	0801741c 	.word	0x0801741c
 8013310:	0801741c 	.word	0x0801741c
 8013314:	0801741c 	.word	0x0801741c
 8013318:	08017420 	.word	0x08017420

0801331c <memcmp>:
 801331c:	b510      	push	{r4, lr}
 801331e:	3901      	subs	r1, #1
 8013320:	4402      	add	r2, r0
 8013322:	4290      	cmp	r0, r2
 8013324:	d101      	bne.n	801332a <memcmp+0xe>
 8013326:	2000      	movs	r0, #0
 8013328:	e005      	b.n	8013336 <memcmp+0x1a>
 801332a:	7803      	ldrb	r3, [r0, #0]
 801332c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013330:	42a3      	cmp	r3, r4
 8013332:	d001      	beq.n	8013338 <memcmp+0x1c>
 8013334:	1b18      	subs	r0, r3, r4
 8013336:	bd10      	pop	{r4, pc}
 8013338:	3001      	adds	r0, #1
 801333a:	e7f2      	b.n	8013322 <memcmp+0x6>

0801333c <memcpy>:
 801333c:	440a      	add	r2, r1
 801333e:	4291      	cmp	r1, r2
 8013340:	f100 33ff 	add.w	r3, r0, #4294967295
 8013344:	d100      	bne.n	8013348 <memcpy+0xc>
 8013346:	4770      	bx	lr
 8013348:	b510      	push	{r4, lr}
 801334a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801334e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013352:	4291      	cmp	r1, r2
 8013354:	d1f9      	bne.n	801334a <memcpy+0xe>
 8013356:	bd10      	pop	{r4, pc}

08013358 <memmove>:
 8013358:	4288      	cmp	r0, r1
 801335a:	b510      	push	{r4, lr}
 801335c:	eb01 0402 	add.w	r4, r1, r2
 8013360:	d902      	bls.n	8013368 <memmove+0x10>
 8013362:	4284      	cmp	r4, r0
 8013364:	4623      	mov	r3, r4
 8013366:	d807      	bhi.n	8013378 <memmove+0x20>
 8013368:	1e43      	subs	r3, r0, #1
 801336a:	42a1      	cmp	r1, r4
 801336c:	d008      	beq.n	8013380 <memmove+0x28>
 801336e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013376:	e7f8      	b.n	801336a <memmove+0x12>
 8013378:	4402      	add	r2, r0
 801337a:	4601      	mov	r1, r0
 801337c:	428a      	cmp	r2, r1
 801337e:	d100      	bne.n	8013382 <memmove+0x2a>
 8013380:	bd10      	pop	{r4, pc}
 8013382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801338a:	e7f7      	b.n	801337c <memmove+0x24>

0801338c <memset>:
 801338c:	4402      	add	r2, r0
 801338e:	4603      	mov	r3, r0
 8013390:	4293      	cmp	r3, r2
 8013392:	d100      	bne.n	8013396 <memset+0xa>
 8013394:	4770      	bx	lr
 8013396:	f803 1b01 	strb.w	r1, [r3], #1
 801339a:	e7f9      	b.n	8013390 <memset+0x4>

0801339c <iprintf>:
 801339c:	b40f      	push	{r0, r1, r2, r3}
 801339e:	4b0a      	ldr	r3, [pc, #40]	; (80133c8 <iprintf+0x2c>)
 80133a0:	b513      	push	{r0, r1, r4, lr}
 80133a2:	681c      	ldr	r4, [r3, #0]
 80133a4:	b124      	cbz	r4, 80133b0 <iprintf+0x14>
 80133a6:	69a3      	ldr	r3, [r4, #24]
 80133a8:	b913      	cbnz	r3, 80133b0 <iprintf+0x14>
 80133aa:	4620      	mov	r0, r4
 80133ac:	f000 f8e2 	bl	8013574 <__sinit>
 80133b0:	ab05      	add	r3, sp, #20
 80133b2:	9a04      	ldr	r2, [sp, #16]
 80133b4:	68a1      	ldr	r1, [r4, #8]
 80133b6:	9301      	str	r3, [sp, #4]
 80133b8:	4620      	mov	r0, r4
 80133ba:	f000 fbfb 	bl	8013bb4 <_vfiprintf_r>
 80133be:	b002      	add	sp, #8
 80133c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133c4:	b004      	add	sp, #16
 80133c6:	4770      	bx	lr
 80133c8:	20000018 	.word	0x20000018

080133cc <rand>:
 80133cc:	4b16      	ldr	r3, [pc, #88]	; (8013428 <rand+0x5c>)
 80133ce:	b510      	push	{r4, lr}
 80133d0:	681c      	ldr	r4, [r3, #0]
 80133d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80133d4:	b9b3      	cbnz	r3, 8013404 <rand+0x38>
 80133d6:	2018      	movs	r0, #24
 80133d8:	f000 f97e 	bl	80136d8 <malloc>
 80133dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80133de:	b928      	cbnz	r0, 80133ec <rand+0x20>
 80133e0:	4602      	mov	r2, r0
 80133e2:	4b12      	ldr	r3, [pc, #72]	; (801342c <rand+0x60>)
 80133e4:	4812      	ldr	r0, [pc, #72]	; (8013430 <rand+0x64>)
 80133e6:	214e      	movs	r1, #78	; 0x4e
 80133e8:	f000 f84e 	bl	8013488 <__assert_func>
 80133ec:	4a11      	ldr	r2, [pc, #68]	; (8013434 <rand+0x68>)
 80133ee:	4b12      	ldr	r3, [pc, #72]	; (8013438 <rand+0x6c>)
 80133f0:	e9c0 2300 	strd	r2, r3, [r0]
 80133f4:	4b11      	ldr	r3, [pc, #68]	; (801343c <rand+0x70>)
 80133f6:	6083      	str	r3, [r0, #8]
 80133f8:	230b      	movs	r3, #11
 80133fa:	8183      	strh	r3, [r0, #12]
 80133fc:	2201      	movs	r2, #1
 80133fe:	2300      	movs	r3, #0
 8013400:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013404:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013406:	4a0e      	ldr	r2, [pc, #56]	; (8013440 <rand+0x74>)
 8013408:	6920      	ldr	r0, [r4, #16]
 801340a:	6963      	ldr	r3, [r4, #20]
 801340c:	490d      	ldr	r1, [pc, #52]	; (8013444 <rand+0x78>)
 801340e:	4342      	muls	r2, r0
 8013410:	fb01 2203 	mla	r2, r1, r3, r2
 8013414:	fba0 0101 	umull	r0, r1, r0, r1
 8013418:	1c43      	adds	r3, r0, #1
 801341a:	eb42 0001 	adc.w	r0, r2, r1
 801341e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013422:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013426:	bd10      	pop	{r4, pc}
 8013428:	20000018 	.word	0x20000018
 801342c:	080172d0 	.word	0x080172d0
 8013430:	080172e7 	.word	0x080172e7
 8013434:	abcd330e 	.word	0xabcd330e
 8013438:	e66d1234 	.word	0xe66d1234
 801343c:	0005deec 	.word	0x0005deec
 8013440:	5851f42d 	.word	0x5851f42d
 8013444:	4c957f2d 	.word	0x4c957f2d

08013448 <siprintf>:
 8013448:	b40e      	push	{r1, r2, r3}
 801344a:	b500      	push	{lr}
 801344c:	b09c      	sub	sp, #112	; 0x70
 801344e:	ab1d      	add	r3, sp, #116	; 0x74
 8013450:	9002      	str	r0, [sp, #8]
 8013452:	9006      	str	r0, [sp, #24]
 8013454:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013458:	4809      	ldr	r0, [pc, #36]	; (8013480 <siprintf+0x38>)
 801345a:	9107      	str	r1, [sp, #28]
 801345c:	9104      	str	r1, [sp, #16]
 801345e:	4909      	ldr	r1, [pc, #36]	; (8013484 <siprintf+0x3c>)
 8013460:	f853 2b04 	ldr.w	r2, [r3], #4
 8013464:	9105      	str	r1, [sp, #20]
 8013466:	6800      	ldr	r0, [r0, #0]
 8013468:	9301      	str	r3, [sp, #4]
 801346a:	a902      	add	r1, sp, #8
 801346c:	f000 fa78 	bl	8013960 <_svfiprintf_r>
 8013470:	9b02      	ldr	r3, [sp, #8]
 8013472:	2200      	movs	r2, #0
 8013474:	701a      	strb	r2, [r3, #0]
 8013476:	b01c      	add	sp, #112	; 0x70
 8013478:	f85d eb04 	ldr.w	lr, [sp], #4
 801347c:	b003      	add	sp, #12
 801347e:	4770      	bx	lr
 8013480:	20000018 	.word	0x20000018
 8013484:	ffff0208 	.word	0xffff0208

08013488 <__assert_func>:
 8013488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801348a:	4614      	mov	r4, r2
 801348c:	461a      	mov	r2, r3
 801348e:	4b09      	ldr	r3, [pc, #36]	; (80134b4 <__assert_func+0x2c>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	4605      	mov	r5, r0
 8013494:	68d8      	ldr	r0, [r3, #12]
 8013496:	b14c      	cbz	r4, 80134ac <__assert_func+0x24>
 8013498:	4b07      	ldr	r3, [pc, #28]	; (80134b8 <__assert_func+0x30>)
 801349a:	9100      	str	r1, [sp, #0]
 801349c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80134a0:	4906      	ldr	r1, [pc, #24]	; (80134bc <__assert_func+0x34>)
 80134a2:	462b      	mov	r3, r5
 80134a4:	f000 f8e4 	bl	8013670 <fiprintf>
 80134a8:	f000 ff6e 	bl	8014388 <abort>
 80134ac:	4b04      	ldr	r3, [pc, #16]	; (80134c0 <__assert_func+0x38>)
 80134ae:	461c      	mov	r4, r3
 80134b0:	e7f3      	b.n	801349a <__assert_func+0x12>
 80134b2:	bf00      	nop
 80134b4:	20000018 	.word	0x20000018
 80134b8:	08017342 	.word	0x08017342
 80134bc:	0801734f 	.word	0x0801734f
 80134c0:	0801737d 	.word	0x0801737d

080134c4 <std>:
 80134c4:	2300      	movs	r3, #0
 80134c6:	b510      	push	{r4, lr}
 80134c8:	4604      	mov	r4, r0
 80134ca:	e9c0 3300 	strd	r3, r3, [r0]
 80134ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80134d2:	6083      	str	r3, [r0, #8]
 80134d4:	8181      	strh	r1, [r0, #12]
 80134d6:	6643      	str	r3, [r0, #100]	; 0x64
 80134d8:	81c2      	strh	r2, [r0, #14]
 80134da:	6183      	str	r3, [r0, #24]
 80134dc:	4619      	mov	r1, r3
 80134de:	2208      	movs	r2, #8
 80134e0:	305c      	adds	r0, #92	; 0x5c
 80134e2:	f7ff ff53 	bl	801338c <memset>
 80134e6:	4b05      	ldr	r3, [pc, #20]	; (80134fc <std+0x38>)
 80134e8:	6263      	str	r3, [r4, #36]	; 0x24
 80134ea:	4b05      	ldr	r3, [pc, #20]	; (8013500 <std+0x3c>)
 80134ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80134ee:	4b05      	ldr	r3, [pc, #20]	; (8013504 <std+0x40>)
 80134f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80134f2:	4b05      	ldr	r3, [pc, #20]	; (8013508 <std+0x44>)
 80134f4:	6224      	str	r4, [r4, #32]
 80134f6:	6323      	str	r3, [r4, #48]	; 0x30
 80134f8:	bd10      	pop	{r4, pc}
 80134fa:	bf00      	nop
 80134fc:	0801415d 	.word	0x0801415d
 8013500:	0801417f 	.word	0x0801417f
 8013504:	080141b7 	.word	0x080141b7
 8013508:	080141db 	.word	0x080141db

0801350c <_cleanup_r>:
 801350c:	4901      	ldr	r1, [pc, #4]	; (8013514 <_cleanup_r+0x8>)
 801350e:	f000 b8c1 	b.w	8013694 <_fwalk_reent>
 8013512:	bf00      	nop
 8013514:	080144c5 	.word	0x080144c5

08013518 <__sfmoreglue>:
 8013518:	b570      	push	{r4, r5, r6, lr}
 801351a:	2268      	movs	r2, #104	; 0x68
 801351c:	1e4d      	subs	r5, r1, #1
 801351e:	4355      	muls	r5, r2
 8013520:	460e      	mov	r6, r1
 8013522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013526:	f000 f94b 	bl	80137c0 <_malloc_r>
 801352a:	4604      	mov	r4, r0
 801352c:	b140      	cbz	r0, 8013540 <__sfmoreglue+0x28>
 801352e:	2100      	movs	r1, #0
 8013530:	e9c0 1600 	strd	r1, r6, [r0]
 8013534:	300c      	adds	r0, #12
 8013536:	60a0      	str	r0, [r4, #8]
 8013538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801353c:	f7ff ff26 	bl	801338c <memset>
 8013540:	4620      	mov	r0, r4
 8013542:	bd70      	pop	{r4, r5, r6, pc}

08013544 <__sfp_lock_acquire>:
 8013544:	4801      	ldr	r0, [pc, #4]	; (801354c <__sfp_lock_acquire+0x8>)
 8013546:	f000 b8c5 	b.w	80136d4 <__retarget_lock_acquire_recursive>
 801354a:	bf00      	nop
 801354c:	20009015 	.word	0x20009015

08013550 <__sfp_lock_release>:
 8013550:	4801      	ldr	r0, [pc, #4]	; (8013558 <__sfp_lock_release+0x8>)
 8013552:	f000 b8c0 	b.w	80136d6 <__retarget_lock_release_recursive>
 8013556:	bf00      	nop
 8013558:	20009015 	.word	0x20009015

0801355c <__sinit_lock_acquire>:
 801355c:	4801      	ldr	r0, [pc, #4]	; (8013564 <__sinit_lock_acquire+0x8>)
 801355e:	f000 b8b9 	b.w	80136d4 <__retarget_lock_acquire_recursive>
 8013562:	bf00      	nop
 8013564:	20009016 	.word	0x20009016

08013568 <__sinit_lock_release>:
 8013568:	4801      	ldr	r0, [pc, #4]	; (8013570 <__sinit_lock_release+0x8>)
 801356a:	f000 b8b4 	b.w	80136d6 <__retarget_lock_release_recursive>
 801356e:	bf00      	nop
 8013570:	20009016 	.word	0x20009016

08013574 <__sinit>:
 8013574:	b510      	push	{r4, lr}
 8013576:	4604      	mov	r4, r0
 8013578:	f7ff fff0 	bl	801355c <__sinit_lock_acquire>
 801357c:	69a3      	ldr	r3, [r4, #24]
 801357e:	b11b      	cbz	r3, 8013588 <__sinit+0x14>
 8013580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013584:	f7ff bff0 	b.w	8013568 <__sinit_lock_release>
 8013588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801358c:	6523      	str	r3, [r4, #80]	; 0x50
 801358e:	4b13      	ldr	r3, [pc, #76]	; (80135dc <__sinit+0x68>)
 8013590:	4a13      	ldr	r2, [pc, #76]	; (80135e0 <__sinit+0x6c>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	62a2      	str	r2, [r4, #40]	; 0x28
 8013596:	42a3      	cmp	r3, r4
 8013598:	bf04      	itt	eq
 801359a:	2301      	moveq	r3, #1
 801359c:	61a3      	streq	r3, [r4, #24]
 801359e:	4620      	mov	r0, r4
 80135a0:	f000 f820 	bl	80135e4 <__sfp>
 80135a4:	6060      	str	r0, [r4, #4]
 80135a6:	4620      	mov	r0, r4
 80135a8:	f000 f81c 	bl	80135e4 <__sfp>
 80135ac:	60a0      	str	r0, [r4, #8]
 80135ae:	4620      	mov	r0, r4
 80135b0:	f000 f818 	bl	80135e4 <__sfp>
 80135b4:	2200      	movs	r2, #0
 80135b6:	60e0      	str	r0, [r4, #12]
 80135b8:	2104      	movs	r1, #4
 80135ba:	6860      	ldr	r0, [r4, #4]
 80135bc:	f7ff ff82 	bl	80134c4 <std>
 80135c0:	68a0      	ldr	r0, [r4, #8]
 80135c2:	2201      	movs	r2, #1
 80135c4:	2109      	movs	r1, #9
 80135c6:	f7ff ff7d 	bl	80134c4 <std>
 80135ca:	68e0      	ldr	r0, [r4, #12]
 80135cc:	2202      	movs	r2, #2
 80135ce:	2112      	movs	r1, #18
 80135d0:	f7ff ff78 	bl	80134c4 <std>
 80135d4:	2301      	movs	r3, #1
 80135d6:	61a3      	str	r3, [r4, #24]
 80135d8:	e7d2      	b.n	8013580 <__sinit+0xc>
 80135da:	bf00      	nop
 80135dc:	080172cc 	.word	0x080172cc
 80135e0:	0801350d 	.word	0x0801350d

080135e4 <__sfp>:
 80135e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135e6:	4607      	mov	r7, r0
 80135e8:	f7ff ffac 	bl	8013544 <__sfp_lock_acquire>
 80135ec:	4b1e      	ldr	r3, [pc, #120]	; (8013668 <__sfp+0x84>)
 80135ee:	681e      	ldr	r6, [r3, #0]
 80135f0:	69b3      	ldr	r3, [r6, #24]
 80135f2:	b913      	cbnz	r3, 80135fa <__sfp+0x16>
 80135f4:	4630      	mov	r0, r6
 80135f6:	f7ff ffbd 	bl	8013574 <__sinit>
 80135fa:	3648      	adds	r6, #72	; 0x48
 80135fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013600:	3b01      	subs	r3, #1
 8013602:	d503      	bpl.n	801360c <__sfp+0x28>
 8013604:	6833      	ldr	r3, [r6, #0]
 8013606:	b30b      	cbz	r3, 801364c <__sfp+0x68>
 8013608:	6836      	ldr	r6, [r6, #0]
 801360a:	e7f7      	b.n	80135fc <__sfp+0x18>
 801360c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013610:	b9d5      	cbnz	r5, 8013648 <__sfp+0x64>
 8013612:	4b16      	ldr	r3, [pc, #88]	; (801366c <__sfp+0x88>)
 8013614:	60e3      	str	r3, [r4, #12]
 8013616:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801361a:	6665      	str	r5, [r4, #100]	; 0x64
 801361c:	f000 f859 	bl	80136d2 <__retarget_lock_init_recursive>
 8013620:	f7ff ff96 	bl	8013550 <__sfp_lock_release>
 8013624:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013628:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801362c:	6025      	str	r5, [r4, #0]
 801362e:	61a5      	str	r5, [r4, #24]
 8013630:	2208      	movs	r2, #8
 8013632:	4629      	mov	r1, r5
 8013634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013638:	f7ff fea8 	bl	801338c <memset>
 801363c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013644:	4620      	mov	r0, r4
 8013646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013648:	3468      	adds	r4, #104	; 0x68
 801364a:	e7d9      	b.n	8013600 <__sfp+0x1c>
 801364c:	2104      	movs	r1, #4
 801364e:	4638      	mov	r0, r7
 8013650:	f7ff ff62 	bl	8013518 <__sfmoreglue>
 8013654:	4604      	mov	r4, r0
 8013656:	6030      	str	r0, [r6, #0]
 8013658:	2800      	cmp	r0, #0
 801365a:	d1d5      	bne.n	8013608 <__sfp+0x24>
 801365c:	f7ff ff78 	bl	8013550 <__sfp_lock_release>
 8013660:	230c      	movs	r3, #12
 8013662:	603b      	str	r3, [r7, #0]
 8013664:	e7ee      	b.n	8013644 <__sfp+0x60>
 8013666:	bf00      	nop
 8013668:	080172cc 	.word	0x080172cc
 801366c:	ffff0001 	.word	0xffff0001

08013670 <fiprintf>:
 8013670:	b40e      	push	{r1, r2, r3}
 8013672:	b503      	push	{r0, r1, lr}
 8013674:	4601      	mov	r1, r0
 8013676:	ab03      	add	r3, sp, #12
 8013678:	4805      	ldr	r0, [pc, #20]	; (8013690 <fiprintf+0x20>)
 801367a:	f853 2b04 	ldr.w	r2, [r3], #4
 801367e:	6800      	ldr	r0, [r0, #0]
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	f000 fa97 	bl	8013bb4 <_vfiprintf_r>
 8013686:	b002      	add	sp, #8
 8013688:	f85d eb04 	ldr.w	lr, [sp], #4
 801368c:	b003      	add	sp, #12
 801368e:	4770      	bx	lr
 8013690:	20000018 	.word	0x20000018

08013694 <_fwalk_reent>:
 8013694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013698:	4606      	mov	r6, r0
 801369a:	4688      	mov	r8, r1
 801369c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80136a0:	2700      	movs	r7, #0
 80136a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136a6:	f1b9 0901 	subs.w	r9, r9, #1
 80136aa:	d505      	bpl.n	80136b8 <_fwalk_reent+0x24>
 80136ac:	6824      	ldr	r4, [r4, #0]
 80136ae:	2c00      	cmp	r4, #0
 80136b0:	d1f7      	bne.n	80136a2 <_fwalk_reent+0xe>
 80136b2:	4638      	mov	r0, r7
 80136b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136b8:	89ab      	ldrh	r3, [r5, #12]
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d907      	bls.n	80136ce <_fwalk_reent+0x3a>
 80136be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136c2:	3301      	adds	r3, #1
 80136c4:	d003      	beq.n	80136ce <_fwalk_reent+0x3a>
 80136c6:	4629      	mov	r1, r5
 80136c8:	4630      	mov	r0, r6
 80136ca:	47c0      	blx	r8
 80136cc:	4307      	orrs	r7, r0
 80136ce:	3568      	adds	r5, #104	; 0x68
 80136d0:	e7e9      	b.n	80136a6 <_fwalk_reent+0x12>

080136d2 <__retarget_lock_init_recursive>:
 80136d2:	4770      	bx	lr

080136d4 <__retarget_lock_acquire_recursive>:
 80136d4:	4770      	bx	lr

080136d6 <__retarget_lock_release_recursive>:
 80136d6:	4770      	bx	lr

080136d8 <malloc>:
 80136d8:	4b02      	ldr	r3, [pc, #8]	; (80136e4 <malloc+0xc>)
 80136da:	4601      	mov	r1, r0
 80136dc:	6818      	ldr	r0, [r3, #0]
 80136de:	f000 b86f 	b.w	80137c0 <_malloc_r>
 80136e2:	bf00      	nop
 80136e4:	20000018 	.word	0x20000018

080136e8 <_free_r>:
 80136e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136ea:	2900      	cmp	r1, #0
 80136ec:	d044      	beq.n	8013778 <_free_r+0x90>
 80136ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136f2:	9001      	str	r0, [sp, #4]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	f1a1 0404 	sub.w	r4, r1, #4
 80136fa:	bfb8      	it	lt
 80136fc:	18e4      	addlt	r4, r4, r3
 80136fe:	f000 ff95 	bl	801462c <__malloc_lock>
 8013702:	4a1e      	ldr	r2, [pc, #120]	; (801377c <_free_r+0x94>)
 8013704:	9801      	ldr	r0, [sp, #4]
 8013706:	6813      	ldr	r3, [r2, #0]
 8013708:	b933      	cbnz	r3, 8013718 <_free_r+0x30>
 801370a:	6063      	str	r3, [r4, #4]
 801370c:	6014      	str	r4, [r2, #0]
 801370e:	b003      	add	sp, #12
 8013710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013714:	f000 bf90 	b.w	8014638 <__malloc_unlock>
 8013718:	42a3      	cmp	r3, r4
 801371a:	d908      	bls.n	801372e <_free_r+0x46>
 801371c:	6825      	ldr	r5, [r4, #0]
 801371e:	1961      	adds	r1, r4, r5
 8013720:	428b      	cmp	r3, r1
 8013722:	bf01      	itttt	eq
 8013724:	6819      	ldreq	r1, [r3, #0]
 8013726:	685b      	ldreq	r3, [r3, #4]
 8013728:	1949      	addeq	r1, r1, r5
 801372a:	6021      	streq	r1, [r4, #0]
 801372c:	e7ed      	b.n	801370a <_free_r+0x22>
 801372e:	461a      	mov	r2, r3
 8013730:	685b      	ldr	r3, [r3, #4]
 8013732:	b10b      	cbz	r3, 8013738 <_free_r+0x50>
 8013734:	42a3      	cmp	r3, r4
 8013736:	d9fa      	bls.n	801372e <_free_r+0x46>
 8013738:	6811      	ldr	r1, [r2, #0]
 801373a:	1855      	adds	r5, r2, r1
 801373c:	42a5      	cmp	r5, r4
 801373e:	d10b      	bne.n	8013758 <_free_r+0x70>
 8013740:	6824      	ldr	r4, [r4, #0]
 8013742:	4421      	add	r1, r4
 8013744:	1854      	adds	r4, r2, r1
 8013746:	42a3      	cmp	r3, r4
 8013748:	6011      	str	r1, [r2, #0]
 801374a:	d1e0      	bne.n	801370e <_free_r+0x26>
 801374c:	681c      	ldr	r4, [r3, #0]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	6053      	str	r3, [r2, #4]
 8013752:	4421      	add	r1, r4
 8013754:	6011      	str	r1, [r2, #0]
 8013756:	e7da      	b.n	801370e <_free_r+0x26>
 8013758:	d902      	bls.n	8013760 <_free_r+0x78>
 801375a:	230c      	movs	r3, #12
 801375c:	6003      	str	r3, [r0, #0]
 801375e:	e7d6      	b.n	801370e <_free_r+0x26>
 8013760:	6825      	ldr	r5, [r4, #0]
 8013762:	1961      	adds	r1, r4, r5
 8013764:	428b      	cmp	r3, r1
 8013766:	bf04      	itt	eq
 8013768:	6819      	ldreq	r1, [r3, #0]
 801376a:	685b      	ldreq	r3, [r3, #4]
 801376c:	6063      	str	r3, [r4, #4]
 801376e:	bf04      	itt	eq
 8013770:	1949      	addeq	r1, r1, r5
 8013772:	6021      	streq	r1, [r4, #0]
 8013774:	6054      	str	r4, [r2, #4]
 8013776:	e7ca      	b.n	801370e <_free_r+0x26>
 8013778:	b003      	add	sp, #12
 801377a:	bd30      	pop	{r4, r5, pc}
 801377c:	20009018 	.word	0x20009018

08013780 <sbrk_aligned>:
 8013780:	b570      	push	{r4, r5, r6, lr}
 8013782:	4e0e      	ldr	r6, [pc, #56]	; (80137bc <sbrk_aligned+0x3c>)
 8013784:	460c      	mov	r4, r1
 8013786:	6831      	ldr	r1, [r6, #0]
 8013788:	4605      	mov	r5, r0
 801378a:	b911      	cbnz	r1, 8013792 <sbrk_aligned+0x12>
 801378c:	f000 fcd6 	bl	801413c <_sbrk_r>
 8013790:	6030      	str	r0, [r6, #0]
 8013792:	4621      	mov	r1, r4
 8013794:	4628      	mov	r0, r5
 8013796:	f000 fcd1 	bl	801413c <_sbrk_r>
 801379a:	1c43      	adds	r3, r0, #1
 801379c:	d00a      	beq.n	80137b4 <sbrk_aligned+0x34>
 801379e:	1cc4      	adds	r4, r0, #3
 80137a0:	f024 0403 	bic.w	r4, r4, #3
 80137a4:	42a0      	cmp	r0, r4
 80137a6:	d007      	beq.n	80137b8 <sbrk_aligned+0x38>
 80137a8:	1a21      	subs	r1, r4, r0
 80137aa:	4628      	mov	r0, r5
 80137ac:	f000 fcc6 	bl	801413c <_sbrk_r>
 80137b0:	3001      	adds	r0, #1
 80137b2:	d101      	bne.n	80137b8 <sbrk_aligned+0x38>
 80137b4:	f04f 34ff 	mov.w	r4, #4294967295
 80137b8:	4620      	mov	r0, r4
 80137ba:	bd70      	pop	{r4, r5, r6, pc}
 80137bc:	2000901c 	.word	0x2000901c

080137c0 <_malloc_r>:
 80137c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c4:	1ccd      	adds	r5, r1, #3
 80137c6:	f025 0503 	bic.w	r5, r5, #3
 80137ca:	3508      	adds	r5, #8
 80137cc:	2d0c      	cmp	r5, #12
 80137ce:	bf38      	it	cc
 80137d0:	250c      	movcc	r5, #12
 80137d2:	2d00      	cmp	r5, #0
 80137d4:	4607      	mov	r7, r0
 80137d6:	db01      	blt.n	80137dc <_malloc_r+0x1c>
 80137d8:	42a9      	cmp	r1, r5
 80137da:	d905      	bls.n	80137e8 <_malloc_r+0x28>
 80137dc:	230c      	movs	r3, #12
 80137de:	603b      	str	r3, [r7, #0]
 80137e0:	2600      	movs	r6, #0
 80137e2:	4630      	mov	r0, r6
 80137e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e8:	4e2e      	ldr	r6, [pc, #184]	; (80138a4 <_malloc_r+0xe4>)
 80137ea:	f000 ff1f 	bl	801462c <__malloc_lock>
 80137ee:	6833      	ldr	r3, [r6, #0]
 80137f0:	461c      	mov	r4, r3
 80137f2:	bb34      	cbnz	r4, 8013842 <_malloc_r+0x82>
 80137f4:	4629      	mov	r1, r5
 80137f6:	4638      	mov	r0, r7
 80137f8:	f7ff ffc2 	bl	8013780 <sbrk_aligned>
 80137fc:	1c43      	adds	r3, r0, #1
 80137fe:	4604      	mov	r4, r0
 8013800:	d14d      	bne.n	801389e <_malloc_r+0xde>
 8013802:	6834      	ldr	r4, [r6, #0]
 8013804:	4626      	mov	r6, r4
 8013806:	2e00      	cmp	r6, #0
 8013808:	d140      	bne.n	801388c <_malloc_r+0xcc>
 801380a:	6823      	ldr	r3, [r4, #0]
 801380c:	4631      	mov	r1, r6
 801380e:	4638      	mov	r0, r7
 8013810:	eb04 0803 	add.w	r8, r4, r3
 8013814:	f000 fc92 	bl	801413c <_sbrk_r>
 8013818:	4580      	cmp	r8, r0
 801381a:	d13a      	bne.n	8013892 <_malloc_r+0xd2>
 801381c:	6821      	ldr	r1, [r4, #0]
 801381e:	3503      	adds	r5, #3
 8013820:	1a6d      	subs	r5, r5, r1
 8013822:	f025 0503 	bic.w	r5, r5, #3
 8013826:	3508      	adds	r5, #8
 8013828:	2d0c      	cmp	r5, #12
 801382a:	bf38      	it	cc
 801382c:	250c      	movcc	r5, #12
 801382e:	4629      	mov	r1, r5
 8013830:	4638      	mov	r0, r7
 8013832:	f7ff ffa5 	bl	8013780 <sbrk_aligned>
 8013836:	3001      	adds	r0, #1
 8013838:	d02b      	beq.n	8013892 <_malloc_r+0xd2>
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	442b      	add	r3, r5
 801383e:	6023      	str	r3, [r4, #0]
 8013840:	e00e      	b.n	8013860 <_malloc_r+0xa0>
 8013842:	6822      	ldr	r2, [r4, #0]
 8013844:	1b52      	subs	r2, r2, r5
 8013846:	d41e      	bmi.n	8013886 <_malloc_r+0xc6>
 8013848:	2a0b      	cmp	r2, #11
 801384a:	d916      	bls.n	801387a <_malloc_r+0xba>
 801384c:	1961      	adds	r1, r4, r5
 801384e:	42a3      	cmp	r3, r4
 8013850:	6025      	str	r5, [r4, #0]
 8013852:	bf18      	it	ne
 8013854:	6059      	strne	r1, [r3, #4]
 8013856:	6863      	ldr	r3, [r4, #4]
 8013858:	bf08      	it	eq
 801385a:	6031      	streq	r1, [r6, #0]
 801385c:	5162      	str	r2, [r4, r5]
 801385e:	604b      	str	r3, [r1, #4]
 8013860:	4638      	mov	r0, r7
 8013862:	f104 060b 	add.w	r6, r4, #11
 8013866:	f000 fee7 	bl	8014638 <__malloc_unlock>
 801386a:	f026 0607 	bic.w	r6, r6, #7
 801386e:	1d23      	adds	r3, r4, #4
 8013870:	1af2      	subs	r2, r6, r3
 8013872:	d0b6      	beq.n	80137e2 <_malloc_r+0x22>
 8013874:	1b9b      	subs	r3, r3, r6
 8013876:	50a3      	str	r3, [r4, r2]
 8013878:	e7b3      	b.n	80137e2 <_malloc_r+0x22>
 801387a:	6862      	ldr	r2, [r4, #4]
 801387c:	42a3      	cmp	r3, r4
 801387e:	bf0c      	ite	eq
 8013880:	6032      	streq	r2, [r6, #0]
 8013882:	605a      	strne	r2, [r3, #4]
 8013884:	e7ec      	b.n	8013860 <_malloc_r+0xa0>
 8013886:	4623      	mov	r3, r4
 8013888:	6864      	ldr	r4, [r4, #4]
 801388a:	e7b2      	b.n	80137f2 <_malloc_r+0x32>
 801388c:	4634      	mov	r4, r6
 801388e:	6876      	ldr	r6, [r6, #4]
 8013890:	e7b9      	b.n	8013806 <_malloc_r+0x46>
 8013892:	230c      	movs	r3, #12
 8013894:	603b      	str	r3, [r7, #0]
 8013896:	4638      	mov	r0, r7
 8013898:	f000 fece 	bl	8014638 <__malloc_unlock>
 801389c:	e7a1      	b.n	80137e2 <_malloc_r+0x22>
 801389e:	6025      	str	r5, [r4, #0]
 80138a0:	e7de      	b.n	8013860 <_malloc_r+0xa0>
 80138a2:	bf00      	nop
 80138a4:	20009018 	.word	0x20009018

080138a8 <__ssputs_r>:
 80138a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138ac:	688e      	ldr	r6, [r1, #8]
 80138ae:	429e      	cmp	r6, r3
 80138b0:	4682      	mov	sl, r0
 80138b2:	460c      	mov	r4, r1
 80138b4:	4690      	mov	r8, r2
 80138b6:	461f      	mov	r7, r3
 80138b8:	d838      	bhi.n	801392c <__ssputs_r+0x84>
 80138ba:	898a      	ldrh	r2, [r1, #12]
 80138bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80138c0:	d032      	beq.n	8013928 <__ssputs_r+0x80>
 80138c2:	6825      	ldr	r5, [r4, #0]
 80138c4:	6909      	ldr	r1, [r1, #16]
 80138c6:	eba5 0901 	sub.w	r9, r5, r1
 80138ca:	6965      	ldr	r5, [r4, #20]
 80138cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80138d4:	3301      	adds	r3, #1
 80138d6:	444b      	add	r3, r9
 80138d8:	106d      	asrs	r5, r5, #1
 80138da:	429d      	cmp	r5, r3
 80138dc:	bf38      	it	cc
 80138de:	461d      	movcc	r5, r3
 80138e0:	0553      	lsls	r3, r2, #21
 80138e2:	d531      	bpl.n	8013948 <__ssputs_r+0xa0>
 80138e4:	4629      	mov	r1, r5
 80138e6:	f7ff ff6b 	bl	80137c0 <_malloc_r>
 80138ea:	4606      	mov	r6, r0
 80138ec:	b950      	cbnz	r0, 8013904 <__ssputs_r+0x5c>
 80138ee:	230c      	movs	r3, #12
 80138f0:	f8ca 3000 	str.w	r3, [sl]
 80138f4:	89a3      	ldrh	r3, [r4, #12]
 80138f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138fa:	81a3      	strh	r3, [r4, #12]
 80138fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013904:	6921      	ldr	r1, [r4, #16]
 8013906:	464a      	mov	r2, r9
 8013908:	f7ff fd18 	bl	801333c <memcpy>
 801390c:	89a3      	ldrh	r3, [r4, #12]
 801390e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013916:	81a3      	strh	r3, [r4, #12]
 8013918:	6126      	str	r6, [r4, #16]
 801391a:	6165      	str	r5, [r4, #20]
 801391c:	444e      	add	r6, r9
 801391e:	eba5 0509 	sub.w	r5, r5, r9
 8013922:	6026      	str	r6, [r4, #0]
 8013924:	60a5      	str	r5, [r4, #8]
 8013926:	463e      	mov	r6, r7
 8013928:	42be      	cmp	r6, r7
 801392a:	d900      	bls.n	801392e <__ssputs_r+0x86>
 801392c:	463e      	mov	r6, r7
 801392e:	6820      	ldr	r0, [r4, #0]
 8013930:	4632      	mov	r2, r6
 8013932:	4641      	mov	r1, r8
 8013934:	f7ff fd10 	bl	8013358 <memmove>
 8013938:	68a3      	ldr	r3, [r4, #8]
 801393a:	1b9b      	subs	r3, r3, r6
 801393c:	60a3      	str	r3, [r4, #8]
 801393e:	6823      	ldr	r3, [r4, #0]
 8013940:	4433      	add	r3, r6
 8013942:	6023      	str	r3, [r4, #0]
 8013944:	2000      	movs	r0, #0
 8013946:	e7db      	b.n	8013900 <__ssputs_r+0x58>
 8013948:	462a      	mov	r2, r5
 801394a:	f000 fe7b 	bl	8014644 <_realloc_r>
 801394e:	4606      	mov	r6, r0
 8013950:	2800      	cmp	r0, #0
 8013952:	d1e1      	bne.n	8013918 <__ssputs_r+0x70>
 8013954:	6921      	ldr	r1, [r4, #16]
 8013956:	4650      	mov	r0, sl
 8013958:	f7ff fec6 	bl	80136e8 <_free_r>
 801395c:	e7c7      	b.n	80138ee <__ssputs_r+0x46>
	...

08013960 <_svfiprintf_r>:
 8013960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013964:	4698      	mov	r8, r3
 8013966:	898b      	ldrh	r3, [r1, #12]
 8013968:	061b      	lsls	r3, r3, #24
 801396a:	b09d      	sub	sp, #116	; 0x74
 801396c:	4607      	mov	r7, r0
 801396e:	460d      	mov	r5, r1
 8013970:	4614      	mov	r4, r2
 8013972:	d50e      	bpl.n	8013992 <_svfiprintf_r+0x32>
 8013974:	690b      	ldr	r3, [r1, #16]
 8013976:	b963      	cbnz	r3, 8013992 <_svfiprintf_r+0x32>
 8013978:	2140      	movs	r1, #64	; 0x40
 801397a:	f7ff ff21 	bl	80137c0 <_malloc_r>
 801397e:	6028      	str	r0, [r5, #0]
 8013980:	6128      	str	r0, [r5, #16]
 8013982:	b920      	cbnz	r0, 801398e <_svfiprintf_r+0x2e>
 8013984:	230c      	movs	r3, #12
 8013986:	603b      	str	r3, [r7, #0]
 8013988:	f04f 30ff 	mov.w	r0, #4294967295
 801398c:	e0d1      	b.n	8013b32 <_svfiprintf_r+0x1d2>
 801398e:	2340      	movs	r3, #64	; 0x40
 8013990:	616b      	str	r3, [r5, #20]
 8013992:	2300      	movs	r3, #0
 8013994:	9309      	str	r3, [sp, #36]	; 0x24
 8013996:	2320      	movs	r3, #32
 8013998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801399c:	f8cd 800c 	str.w	r8, [sp, #12]
 80139a0:	2330      	movs	r3, #48	; 0x30
 80139a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013b4c <_svfiprintf_r+0x1ec>
 80139a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139aa:	f04f 0901 	mov.w	r9, #1
 80139ae:	4623      	mov	r3, r4
 80139b0:	469a      	mov	sl, r3
 80139b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139b6:	b10a      	cbz	r2, 80139bc <_svfiprintf_r+0x5c>
 80139b8:	2a25      	cmp	r2, #37	; 0x25
 80139ba:	d1f9      	bne.n	80139b0 <_svfiprintf_r+0x50>
 80139bc:	ebba 0b04 	subs.w	fp, sl, r4
 80139c0:	d00b      	beq.n	80139da <_svfiprintf_r+0x7a>
 80139c2:	465b      	mov	r3, fp
 80139c4:	4622      	mov	r2, r4
 80139c6:	4629      	mov	r1, r5
 80139c8:	4638      	mov	r0, r7
 80139ca:	f7ff ff6d 	bl	80138a8 <__ssputs_r>
 80139ce:	3001      	adds	r0, #1
 80139d0:	f000 80aa 	beq.w	8013b28 <_svfiprintf_r+0x1c8>
 80139d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139d6:	445a      	add	r2, fp
 80139d8:	9209      	str	r2, [sp, #36]	; 0x24
 80139da:	f89a 3000 	ldrb.w	r3, [sl]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	f000 80a2 	beq.w	8013b28 <_svfiprintf_r+0x1c8>
 80139e4:	2300      	movs	r3, #0
 80139e6:	f04f 32ff 	mov.w	r2, #4294967295
 80139ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139ee:	f10a 0a01 	add.w	sl, sl, #1
 80139f2:	9304      	str	r3, [sp, #16]
 80139f4:	9307      	str	r3, [sp, #28]
 80139f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139fa:	931a      	str	r3, [sp, #104]	; 0x68
 80139fc:	4654      	mov	r4, sl
 80139fe:	2205      	movs	r2, #5
 8013a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a04:	4851      	ldr	r0, [pc, #324]	; (8013b4c <_svfiprintf_r+0x1ec>)
 8013a06:	f7ec fbf3 	bl	80001f0 <memchr>
 8013a0a:	9a04      	ldr	r2, [sp, #16]
 8013a0c:	b9d8      	cbnz	r0, 8013a46 <_svfiprintf_r+0xe6>
 8013a0e:	06d0      	lsls	r0, r2, #27
 8013a10:	bf44      	itt	mi
 8013a12:	2320      	movmi	r3, #32
 8013a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a18:	0711      	lsls	r1, r2, #28
 8013a1a:	bf44      	itt	mi
 8013a1c:	232b      	movmi	r3, #43	; 0x2b
 8013a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a22:	f89a 3000 	ldrb.w	r3, [sl]
 8013a26:	2b2a      	cmp	r3, #42	; 0x2a
 8013a28:	d015      	beq.n	8013a56 <_svfiprintf_r+0xf6>
 8013a2a:	9a07      	ldr	r2, [sp, #28]
 8013a2c:	4654      	mov	r4, sl
 8013a2e:	2000      	movs	r0, #0
 8013a30:	f04f 0c0a 	mov.w	ip, #10
 8013a34:	4621      	mov	r1, r4
 8013a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a3a:	3b30      	subs	r3, #48	; 0x30
 8013a3c:	2b09      	cmp	r3, #9
 8013a3e:	d94e      	bls.n	8013ade <_svfiprintf_r+0x17e>
 8013a40:	b1b0      	cbz	r0, 8013a70 <_svfiprintf_r+0x110>
 8013a42:	9207      	str	r2, [sp, #28]
 8013a44:	e014      	b.n	8013a70 <_svfiprintf_r+0x110>
 8013a46:	eba0 0308 	sub.w	r3, r0, r8
 8013a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	9304      	str	r3, [sp, #16]
 8013a52:	46a2      	mov	sl, r4
 8013a54:	e7d2      	b.n	80139fc <_svfiprintf_r+0x9c>
 8013a56:	9b03      	ldr	r3, [sp, #12]
 8013a58:	1d19      	adds	r1, r3, #4
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	9103      	str	r1, [sp, #12]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	bfbb      	ittet	lt
 8013a62:	425b      	neglt	r3, r3
 8013a64:	f042 0202 	orrlt.w	r2, r2, #2
 8013a68:	9307      	strge	r3, [sp, #28]
 8013a6a:	9307      	strlt	r3, [sp, #28]
 8013a6c:	bfb8      	it	lt
 8013a6e:	9204      	strlt	r2, [sp, #16]
 8013a70:	7823      	ldrb	r3, [r4, #0]
 8013a72:	2b2e      	cmp	r3, #46	; 0x2e
 8013a74:	d10c      	bne.n	8013a90 <_svfiprintf_r+0x130>
 8013a76:	7863      	ldrb	r3, [r4, #1]
 8013a78:	2b2a      	cmp	r3, #42	; 0x2a
 8013a7a:	d135      	bne.n	8013ae8 <_svfiprintf_r+0x188>
 8013a7c:	9b03      	ldr	r3, [sp, #12]
 8013a7e:	1d1a      	adds	r2, r3, #4
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	9203      	str	r2, [sp, #12]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	bfb8      	it	lt
 8013a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a8c:	3402      	adds	r4, #2
 8013a8e:	9305      	str	r3, [sp, #20]
 8013a90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013b5c <_svfiprintf_r+0x1fc>
 8013a94:	7821      	ldrb	r1, [r4, #0]
 8013a96:	2203      	movs	r2, #3
 8013a98:	4650      	mov	r0, sl
 8013a9a:	f7ec fba9 	bl	80001f0 <memchr>
 8013a9e:	b140      	cbz	r0, 8013ab2 <_svfiprintf_r+0x152>
 8013aa0:	2340      	movs	r3, #64	; 0x40
 8013aa2:	eba0 000a 	sub.w	r0, r0, sl
 8013aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8013aaa:	9b04      	ldr	r3, [sp, #16]
 8013aac:	4303      	orrs	r3, r0
 8013aae:	3401      	adds	r4, #1
 8013ab0:	9304      	str	r3, [sp, #16]
 8013ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ab6:	4826      	ldr	r0, [pc, #152]	; (8013b50 <_svfiprintf_r+0x1f0>)
 8013ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013abc:	2206      	movs	r2, #6
 8013abe:	f7ec fb97 	bl	80001f0 <memchr>
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	d038      	beq.n	8013b38 <_svfiprintf_r+0x1d8>
 8013ac6:	4b23      	ldr	r3, [pc, #140]	; (8013b54 <_svfiprintf_r+0x1f4>)
 8013ac8:	bb1b      	cbnz	r3, 8013b12 <_svfiprintf_r+0x1b2>
 8013aca:	9b03      	ldr	r3, [sp, #12]
 8013acc:	3307      	adds	r3, #7
 8013ace:	f023 0307 	bic.w	r3, r3, #7
 8013ad2:	3308      	adds	r3, #8
 8013ad4:	9303      	str	r3, [sp, #12]
 8013ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ad8:	4433      	add	r3, r6
 8013ada:	9309      	str	r3, [sp, #36]	; 0x24
 8013adc:	e767      	b.n	80139ae <_svfiprintf_r+0x4e>
 8013ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ae2:	460c      	mov	r4, r1
 8013ae4:	2001      	movs	r0, #1
 8013ae6:	e7a5      	b.n	8013a34 <_svfiprintf_r+0xd4>
 8013ae8:	2300      	movs	r3, #0
 8013aea:	3401      	adds	r4, #1
 8013aec:	9305      	str	r3, [sp, #20]
 8013aee:	4619      	mov	r1, r3
 8013af0:	f04f 0c0a 	mov.w	ip, #10
 8013af4:	4620      	mov	r0, r4
 8013af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013afa:	3a30      	subs	r2, #48	; 0x30
 8013afc:	2a09      	cmp	r2, #9
 8013afe:	d903      	bls.n	8013b08 <_svfiprintf_r+0x1a8>
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d0c5      	beq.n	8013a90 <_svfiprintf_r+0x130>
 8013b04:	9105      	str	r1, [sp, #20]
 8013b06:	e7c3      	b.n	8013a90 <_svfiprintf_r+0x130>
 8013b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	2301      	movs	r3, #1
 8013b10:	e7f0      	b.n	8013af4 <_svfiprintf_r+0x194>
 8013b12:	ab03      	add	r3, sp, #12
 8013b14:	9300      	str	r3, [sp, #0]
 8013b16:	462a      	mov	r2, r5
 8013b18:	4b0f      	ldr	r3, [pc, #60]	; (8013b58 <_svfiprintf_r+0x1f8>)
 8013b1a:	a904      	add	r1, sp, #16
 8013b1c:	4638      	mov	r0, r7
 8013b1e:	f3af 8000 	nop.w
 8013b22:	1c42      	adds	r2, r0, #1
 8013b24:	4606      	mov	r6, r0
 8013b26:	d1d6      	bne.n	8013ad6 <_svfiprintf_r+0x176>
 8013b28:	89ab      	ldrh	r3, [r5, #12]
 8013b2a:	065b      	lsls	r3, r3, #25
 8013b2c:	f53f af2c 	bmi.w	8013988 <_svfiprintf_r+0x28>
 8013b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b32:	b01d      	add	sp, #116	; 0x74
 8013b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b38:	ab03      	add	r3, sp, #12
 8013b3a:	9300      	str	r3, [sp, #0]
 8013b3c:	462a      	mov	r2, r5
 8013b3e:	4b06      	ldr	r3, [pc, #24]	; (8013b58 <_svfiprintf_r+0x1f8>)
 8013b40:	a904      	add	r1, sp, #16
 8013b42:	4638      	mov	r0, r7
 8013b44:	f000 f9d4 	bl	8013ef0 <_printf_i>
 8013b48:	e7eb      	b.n	8013b22 <_svfiprintf_r+0x1c2>
 8013b4a:	bf00      	nop
 8013b4c:	080173e0 	.word	0x080173e0
 8013b50:	080173ea 	.word	0x080173ea
 8013b54:	00000000 	.word	0x00000000
 8013b58:	080138a9 	.word	0x080138a9
 8013b5c:	080173e6 	.word	0x080173e6

08013b60 <__sfputc_r>:
 8013b60:	6893      	ldr	r3, [r2, #8]
 8013b62:	3b01      	subs	r3, #1
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	b410      	push	{r4}
 8013b68:	6093      	str	r3, [r2, #8]
 8013b6a:	da08      	bge.n	8013b7e <__sfputc_r+0x1e>
 8013b6c:	6994      	ldr	r4, [r2, #24]
 8013b6e:	42a3      	cmp	r3, r4
 8013b70:	db01      	blt.n	8013b76 <__sfputc_r+0x16>
 8013b72:	290a      	cmp	r1, #10
 8013b74:	d103      	bne.n	8013b7e <__sfputc_r+0x1e>
 8013b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b7a:	f000 bb33 	b.w	80141e4 <__swbuf_r>
 8013b7e:	6813      	ldr	r3, [r2, #0]
 8013b80:	1c58      	adds	r0, r3, #1
 8013b82:	6010      	str	r0, [r2, #0]
 8013b84:	7019      	strb	r1, [r3, #0]
 8013b86:	4608      	mov	r0, r1
 8013b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b8c:	4770      	bx	lr

08013b8e <__sfputs_r>:
 8013b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b90:	4606      	mov	r6, r0
 8013b92:	460f      	mov	r7, r1
 8013b94:	4614      	mov	r4, r2
 8013b96:	18d5      	adds	r5, r2, r3
 8013b98:	42ac      	cmp	r4, r5
 8013b9a:	d101      	bne.n	8013ba0 <__sfputs_r+0x12>
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	e007      	b.n	8013bb0 <__sfputs_r+0x22>
 8013ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ba4:	463a      	mov	r2, r7
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	f7ff ffda 	bl	8013b60 <__sfputc_r>
 8013bac:	1c43      	adds	r3, r0, #1
 8013bae:	d1f3      	bne.n	8013b98 <__sfputs_r+0xa>
 8013bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013bb4 <_vfiprintf_r>:
 8013bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb8:	460d      	mov	r5, r1
 8013bba:	b09d      	sub	sp, #116	; 0x74
 8013bbc:	4614      	mov	r4, r2
 8013bbe:	4698      	mov	r8, r3
 8013bc0:	4606      	mov	r6, r0
 8013bc2:	b118      	cbz	r0, 8013bcc <_vfiprintf_r+0x18>
 8013bc4:	6983      	ldr	r3, [r0, #24]
 8013bc6:	b90b      	cbnz	r3, 8013bcc <_vfiprintf_r+0x18>
 8013bc8:	f7ff fcd4 	bl	8013574 <__sinit>
 8013bcc:	4b89      	ldr	r3, [pc, #548]	; (8013df4 <_vfiprintf_r+0x240>)
 8013bce:	429d      	cmp	r5, r3
 8013bd0:	d11b      	bne.n	8013c0a <_vfiprintf_r+0x56>
 8013bd2:	6875      	ldr	r5, [r6, #4]
 8013bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bd6:	07d9      	lsls	r1, r3, #31
 8013bd8:	d405      	bmi.n	8013be6 <_vfiprintf_r+0x32>
 8013bda:	89ab      	ldrh	r3, [r5, #12]
 8013bdc:	059a      	lsls	r2, r3, #22
 8013bde:	d402      	bmi.n	8013be6 <_vfiprintf_r+0x32>
 8013be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013be2:	f7ff fd77 	bl	80136d4 <__retarget_lock_acquire_recursive>
 8013be6:	89ab      	ldrh	r3, [r5, #12]
 8013be8:	071b      	lsls	r3, r3, #28
 8013bea:	d501      	bpl.n	8013bf0 <_vfiprintf_r+0x3c>
 8013bec:	692b      	ldr	r3, [r5, #16]
 8013bee:	b9eb      	cbnz	r3, 8013c2c <_vfiprintf_r+0x78>
 8013bf0:	4629      	mov	r1, r5
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f000 fb5a 	bl	80142ac <__swsetup_r>
 8013bf8:	b1c0      	cbz	r0, 8013c2c <_vfiprintf_r+0x78>
 8013bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bfc:	07dc      	lsls	r4, r3, #31
 8013bfe:	d50e      	bpl.n	8013c1e <_vfiprintf_r+0x6a>
 8013c00:	f04f 30ff 	mov.w	r0, #4294967295
 8013c04:	b01d      	add	sp, #116	; 0x74
 8013c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0a:	4b7b      	ldr	r3, [pc, #492]	; (8013df8 <_vfiprintf_r+0x244>)
 8013c0c:	429d      	cmp	r5, r3
 8013c0e:	d101      	bne.n	8013c14 <_vfiprintf_r+0x60>
 8013c10:	68b5      	ldr	r5, [r6, #8]
 8013c12:	e7df      	b.n	8013bd4 <_vfiprintf_r+0x20>
 8013c14:	4b79      	ldr	r3, [pc, #484]	; (8013dfc <_vfiprintf_r+0x248>)
 8013c16:	429d      	cmp	r5, r3
 8013c18:	bf08      	it	eq
 8013c1a:	68f5      	ldreq	r5, [r6, #12]
 8013c1c:	e7da      	b.n	8013bd4 <_vfiprintf_r+0x20>
 8013c1e:	89ab      	ldrh	r3, [r5, #12]
 8013c20:	0598      	lsls	r0, r3, #22
 8013c22:	d4ed      	bmi.n	8013c00 <_vfiprintf_r+0x4c>
 8013c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c26:	f7ff fd56 	bl	80136d6 <__retarget_lock_release_recursive>
 8013c2a:	e7e9      	b.n	8013c00 <_vfiprintf_r+0x4c>
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8013c30:	2320      	movs	r3, #32
 8013c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c3a:	2330      	movs	r3, #48	; 0x30
 8013c3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013e00 <_vfiprintf_r+0x24c>
 8013c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c44:	f04f 0901 	mov.w	r9, #1
 8013c48:	4623      	mov	r3, r4
 8013c4a:	469a      	mov	sl, r3
 8013c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c50:	b10a      	cbz	r2, 8013c56 <_vfiprintf_r+0xa2>
 8013c52:	2a25      	cmp	r2, #37	; 0x25
 8013c54:	d1f9      	bne.n	8013c4a <_vfiprintf_r+0x96>
 8013c56:	ebba 0b04 	subs.w	fp, sl, r4
 8013c5a:	d00b      	beq.n	8013c74 <_vfiprintf_r+0xc0>
 8013c5c:	465b      	mov	r3, fp
 8013c5e:	4622      	mov	r2, r4
 8013c60:	4629      	mov	r1, r5
 8013c62:	4630      	mov	r0, r6
 8013c64:	f7ff ff93 	bl	8013b8e <__sfputs_r>
 8013c68:	3001      	adds	r0, #1
 8013c6a:	f000 80aa 	beq.w	8013dc2 <_vfiprintf_r+0x20e>
 8013c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c70:	445a      	add	r2, fp
 8013c72:	9209      	str	r2, [sp, #36]	; 0x24
 8013c74:	f89a 3000 	ldrb.w	r3, [sl]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f000 80a2 	beq.w	8013dc2 <_vfiprintf_r+0x20e>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	f04f 32ff 	mov.w	r2, #4294967295
 8013c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c88:	f10a 0a01 	add.w	sl, sl, #1
 8013c8c:	9304      	str	r3, [sp, #16]
 8013c8e:	9307      	str	r3, [sp, #28]
 8013c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c94:	931a      	str	r3, [sp, #104]	; 0x68
 8013c96:	4654      	mov	r4, sl
 8013c98:	2205      	movs	r2, #5
 8013c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c9e:	4858      	ldr	r0, [pc, #352]	; (8013e00 <_vfiprintf_r+0x24c>)
 8013ca0:	f7ec faa6 	bl	80001f0 <memchr>
 8013ca4:	9a04      	ldr	r2, [sp, #16]
 8013ca6:	b9d8      	cbnz	r0, 8013ce0 <_vfiprintf_r+0x12c>
 8013ca8:	06d1      	lsls	r1, r2, #27
 8013caa:	bf44      	itt	mi
 8013cac:	2320      	movmi	r3, #32
 8013cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cb2:	0713      	lsls	r3, r2, #28
 8013cb4:	bf44      	itt	mi
 8013cb6:	232b      	movmi	r3, #43	; 0x2b
 8013cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8013cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8013cc2:	d015      	beq.n	8013cf0 <_vfiprintf_r+0x13c>
 8013cc4:	9a07      	ldr	r2, [sp, #28]
 8013cc6:	4654      	mov	r4, sl
 8013cc8:	2000      	movs	r0, #0
 8013cca:	f04f 0c0a 	mov.w	ip, #10
 8013cce:	4621      	mov	r1, r4
 8013cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013cd4:	3b30      	subs	r3, #48	; 0x30
 8013cd6:	2b09      	cmp	r3, #9
 8013cd8:	d94e      	bls.n	8013d78 <_vfiprintf_r+0x1c4>
 8013cda:	b1b0      	cbz	r0, 8013d0a <_vfiprintf_r+0x156>
 8013cdc:	9207      	str	r2, [sp, #28]
 8013cde:	e014      	b.n	8013d0a <_vfiprintf_r+0x156>
 8013ce0:	eba0 0308 	sub.w	r3, r0, r8
 8013ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8013ce8:	4313      	orrs	r3, r2
 8013cea:	9304      	str	r3, [sp, #16]
 8013cec:	46a2      	mov	sl, r4
 8013cee:	e7d2      	b.n	8013c96 <_vfiprintf_r+0xe2>
 8013cf0:	9b03      	ldr	r3, [sp, #12]
 8013cf2:	1d19      	adds	r1, r3, #4
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	9103      	str	r1, [sp, #12]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	bfbb      	ittet	lt
 8013cfc:	425b      	neglt	r3, r3
 8013cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8013d02:	9307      	strge	r3, [sp, #28]
 8013d04:	9307      	strlt	r3, [sp, #28]
 8013d06:	bfb8      	it	lt
 8013d08:	9204      	strlt	r2, [sp, #16]
 8013d0a:	7823      	ldrb	r3, [r4, #0]
 8013d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8013d0e:	d10c      	bne.n	8013d2a <_vfiprintf_r+0x176>
 8013d10:	7863      	ldrb	r3, [r4, #1]
 8013d12:	2b2a      	cmp	r3, #42	; 0x2a
 8013d14:	d135      	bne.n	8013d82 <_vfiprintf_r+0x1ce>
 8013d16:	9b03      	ldr	r3, [sp, #12]
 8013d18:	1d1a      	adds	r2, r3, #4
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	9203      	str	r2, [sp, #12]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	bfb8      	it	lt
 8013d22:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d26:	3402      	adds	r4, #2
 8013d28:	9305      	str	r3, [sp, #20]
 8013d2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013e10 <_vfiprintf_r+0x25c>
 8013d2e:	7821      	ldrb	r1, [r4, #0]
 8013d30:	2203      	movs	r2, #3
 8013d32:	4650      	mov	r0, sl
 8013d34:	f7ec fa5c 	bl	80001f0 <memchr>
 8013d38:	b140      	cbz	r0, 8013d4c <_vfiprintf_r+0x198>
 8013d3a:	2340      	movs	r3, #64	; 0x40
 8013d3c:	eba0 000a 	sub.w	r0, r0, sl
 8013d40:	fa03 f000 	lsl.w	r0, r3, r0
 8013d44:	9b04      	ldr	r3, [sp, #16]
 8013d46:	4303      	orrs	r3, r0
 8013d48:	3401      	adds	r4, #1
 8013d4a:	9304      	str	r3, [sp, #16]
 8013d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d50:	482c      	ldr	r0, [pc, #176]	; (8013e04 <_vfiprintf_r+0x250>)
 8013d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d56:	2206      	movs	r2, #6
 8013d58:	f7ec fa4a 	bl	80001f0 <memchr>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	d03f      	beq.n	8013de0 <_vfiprintf_r+0x22c>
 8013d60:	4b29      	ldr	r3, [pc, #164]	; (8013e08 <_vfiprintf_r+0x254>)
 8013d62:	bb1b      	cbnz	r3, 8013dac <_vfiprintf_r+0x1f8>
 8013d64:	9b03      	ldr	r3, [sp, #12]
 8013d66:	3307      	adds	r3, #7
 8013d68:	f023 0307 	bic.w	r3, r3, #7
 8013d6c:	3308      	adds	r3, #8
 8013d6e:	9303      	str	r3, [sp, #12]
 8013d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d72:	443b      	add	r3, r7
 8013d74:	9309      	str	r3, [sp, #36]	; 0x24
 8013d76:	e767      	b.n	8013c48 <_vfiprintf_r+0x94>
 8013d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d7c:	460c      	mov	r4, r1
 8013d7e:	2001      	movs	r0, #1
 8013d80:	e7a5      	b.n	8013cce <_vfiprintf_r+0x11a>
 8013d82:	2300      	movs	r3, #0
 8013d84:	3401      	adds	r4, #1
 8013d86:	9305      	str	r3, [sp, #20]
 8013d88:	4619      	mov	r1, r3
 8013d8a:	f04f 0c0a 	mov.w	ip, #10
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d94:	3a30      	subs	r2, #48	; 0x30
 8013d96:	2a09      	cmp	r2, #9
 8013d98:	d903      	bls.n	8013da2 <_vfiprintf_r+0x1ee>
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d0c5      	beq.n	8013d2a <_vfiprintf_r+0x176>
 8013d9e:	9105      	str	r1, [sp, #20]
 8013da0:	e7c3      	b.n	8013d2a <_vfiprintf_r+0x176>
 8013da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8013da6:	4604      	mov	r4, r0
 8013da8:	2301      	movs	r3, #1
 8013daa:	e7f0      	b.n	8013d8e <_vfiprintf_r+0x1da>
 8013dac:	ab03      	add	r3, sp, #12
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	462a      	mov	r2, r5
 8013db2:	4b16      	ldr	r3, [pc, #88]	; (8013e0c <_vfiprintf_r+0x258>)
 8013db4:	a904      	add	r1, sp, #16
 8013db6:	4630      	mov	r0, r6
 8013db8:	f3af 8000 	nop.w
 8013dbc:	4607      	mov	r7, r0
 8013dbe:	1c78      	adds	r0, r7, #1
 8013dc0:	d1d6      	bne.n	8013d70 <_vfiprintf_r+0x1bc>
 8013dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dc4:	07d9      	lsls	r1, r3, #31
 8013dc6:	d405      	bmi.n	8013dd4 <_vfiprintf_r+0x220>
 8013dc8:	89ab      	ldrh	r3, [r5, #12]
 8013dca:	059a      	lsls	r2, r3, #22
 8013dcc:	d402      	bmi.n	8013dd4 <_vfiprintf_r+0x220>
 8013dce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dd0:	f7ff fc81 	bl	80136d6 <__retarget_lock_release_recursive>
 8013dd4:	89ab      	ldrh	r3, [r5, #12]
 8013dd6:	065b      	lsls	r3, r3, #25
 8013dd8:	f53f af12 	bmi.w	8013c00 <_vfiprintf_r+0x4c>
 8013ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dde:	e711      	b.n	8013c04 <_vfiprintf_r+0x50>
 8013de0:	ab03      	add	r3, sp, #12
 8013de2:	9300      	str	r3, [sp, #0]
 8013de4:	462a      	mov	r2, r5
 8013de6:	4b09      	ldr	r3, [pc, #36]	; (8013e0c <_vfiprintf_r+0x258>)
 8013de8:	a904      	add	r1, sp, #16
 8013dea:	4630      	mov	r0, r6
 8013dec:	f000 f880 	bl	8013ef0 <_printf_i>
 8013df0:	e7e4      	b.n	8013dbc <_vfiprintf_r+0x208>
 8013df2:	bf00      	nop
 8013df4:	080173a0 	.word	0x080173a0
 8013df8:	080173c0 	.word	0x080173c0
 8013dfc:	08017380 	.word	0x08017380
 8013e00:	080173e0 	.word	0x080173e0
 8013e04:	080173ea 	.word	0x080173ea
 8013e08:	00000000 	.word	0x00000000
 8013e0c:	08013b8f 	.word	0x08013b8f
 8013e10:	080173e6 	.word	0x080173e6

08013e14 <_printf_common>:
 8013e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e18:	4616      	mov	r6, r2
 8013e1a:	4699      	mov	r9, r3
 8013e1c:	688a      	ldr	r2, [r1, #8]
 8013e1e:	690b      	ldr	r3, [r1, #16]
 8013e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e24:	4293      	cmp	r3, r2
 8013e26:	bfb8      	it	lt
 8013e28:	4613      	movlt	r3, r2
 8013e2a:	6033      	str	r3, [r6, #0]
 8013e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013e30:	4607      	mov	r7, r0
 8013e32:	460c      	mov	r4, r1
 8013e34:	b10a      	cbz	r2, 8013e3a <_printf_common+0x26>
 8013e36:	3301      	adds	r3, #1
 8013e38:	6033      	str	r3, [r6, #0]
 8013e3a:	6823      	ldr	r3, [r4, #0]
 8013e3c:	0699      	lsls	r1, r3, #26
 8013e3e:	bf42      	ittt	mi
 8013e40:	6833      	ldrmi	r3, [r6, #0]
 8013e42:	3302      	addmi	r3, #2
 8013e44:	6033      	strmi	r3, [r6, #0]
 8013e46:	6825      	ldr	r5, [r4, #0]
 8013e48:	f015 0506 	ands.w	r5, r5, #6
 8013e4c:	d106      	bne.n	8013e5c <_printf_common+0x48>
 8013e4e:	f104 0a19 	add.w	sl, r4, #25
 8013e52:	68e3      	ldr	r3, [r4, #12]
 8013e54:	6832      	ldr	r2, [r6, #0]
 8013e56:	1a9b      	subs	r3, r3, r2
 8013e58:	42ab      	cmp	r3, r5
 8013e5a:	dc26      	bgt.n	8013eaa <_printf_common+0x96>
 8013e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013e60:	1e13      	subs	r3, r2, #0
 8013e62:	6822      	ldr	r2, [r4, #0]
 8013e64:	bf18      	it	ne
 8013e66:	2301      	movne	r3, #1
 8013e68:	0692      	lsls	r2, r2, #26
 8013e6a:	d42b      	bmi.n	8013ec4 <_printf_common+0xb0>
 8013e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e70:	4649      	mov	r1, r9
 8013e72:	4638      	mov	r0, r7
 8013e74:	47c0      	blx	r8
 8013e76:	3001      	adds	r0, #1
 8013e78:	d01e      	beq.n	8013eb8 <_printf_common+0xa4>
 8013e7a:	6823      	ldr	r3, [r4, #0]
 8013e7c:	68e5      	ldr	r5, [r4, #12]
 8013e7e:	6832      	ldr	r2, [r6, #0]
 8013e80:	f003 0306 	and.w	r3, r3, #6
 8013e84:	2b04      	cmp	r3, #4
 8013e86:	bf08      	it	eq
 8013e88:	1aad      	subeq	r5, r5, r2
 8013e8a:	68a3      	ldr	r3, [r4, #8]
 8013e8c:	6922      	ldr	r2, [r4, #16]
 8013e8e:	bf0c      	ite	eq
 8013e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e94:	2500      	movne	r5, #0
 8013e96:	4293      	cmp	r3, r2
 8013e98:	bfc4      	itt	gt
 8013e9a:	1a9b      	subgt	r3, r3, r2
 8013e9c:	18ed      	addgt	r5, r5, r3
 8013e9e:	2600      	movs	r6, #0
 8013ea0:	341a      	adds	r4, #26
 8013ea2:	42b5      	cmp	r5, r6
 8013ea4:	d11a      	bne.n	8013edc <_printf_common+0xc8>
 8013ea6:	2000      	movs	r0, #0
 8013ea8:	e008      	b.n	8013ebc <_printf_common+0xa8>
 8013eaa:	2301      	movs	r3, #1
 8013eac:	4652      	mov	r2, sl
 8013eae:	4649      	mov	r1, r9
 8013eb0:	4638      	mov	r0, r7
 8013eb2:	47c0      	blx	r8
 8013eb4:	3001      	adds	r0, #1
 8013eb6:	d103      	bne.n	8013ec0 <_printf_common+0xac>
 8013eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8013ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ec0:	3501      	adds	r5, #1
 8013ec2:	e7c6      	b.n	8013e52 <_printf_common+0x3e>
 8013ec4:	18e1      	adds	r1, r4, r3
 8013ec6:	1c5a      	adds	r2, r3, #1
 8013ec8:	2030      	movs	r0, #48	; 0x30
 8013eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ece:	4422      	add	r2, r4
 8013ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ed8:	3302      	adds	r3, #2
 8013eda:	e7c7      	b.n	8013e6c <_printf_common+0x58>
 8013edc:	2301      	movs	r3, #1
 8013ede:	4622      	mov	r2, r4
 8013ee0:	4649      	mov	r1, r9
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	47c0      	blx	r8
 8013ee6:	3001      	adds	r0, #1
 8013ee8:	d0e6      	beq.n	8013eb8 <_printf_common+0xa4>
 8013eea:	3601      	adds	r6, #1
 8013eec:	e7d9      	b.n	8013ea2 <_printf_common+0x8e>
	...

08013ef0 <_printf_i>:
 8013ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef4:	7e0f      	ldrb	r7, [r1, #24]
 8013ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013ef8:	2f78      	cmp	r7, #120	; 0x78
 8013efa:	4691      	mov	r9, r2
 8013efc:	4680      	mov	r8, r0
 8013efe:	460c      	mov	r4, r1
 8013f00:	469a      	mov	sl, r3
 8013f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f06:	d807      	bhi.n	8013f18 <_printf_i+0x28>
 8013f08:	2f62      	cmp	r7, #98	; 0x62
 8013f0a:	d80a      	bhi.n	8013f22 <_printf_i+0x32>
 8013f0c:	2f00      	cmp	r7, #0
 8013f0e:	f000 80d8 	beq.w	80140c2 <_printf_i+0x1d2>
 8013f12:	2f58      	cmp	r7, #88	; 0x58
 8013f14:	f000 80a3 	beq.w	801405e <_printf_i+0x16e>
 8013f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f20:	e03a      	b.n	8013f98 <_printf_i+0xa8>
 8013f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f26:	2b15      	cmp	r3, #21
 8013f28:	d8f6      	bhi.n	8013f18 <_printf_i+0x28>
 8013f2a:	a101      	add	r1, pc, #4	; (adr r1, 8013f30 <_printf_i+0x40>)
 8013f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f30:	08013f89 	.word	0x08013f89
 8013f34:	08013f9d 	.word	0x08013f9d
 8013f38:	08013f19 	.word	0x08013f19
 8013f3c:	08013f19 	.word	0x08013f19
 8013f40:	08013f19 	.word	0x08013f19
 8013f44:	08013f19 	.word	0x08013f19
 8013f48:	08013f9d 	.word	0x08013f9d
 8013f4c:	08013f19 	.word	0x08013f19
 8013f50:	08013f19 	.word	0x08013f19
 8013f54:	08013f19 	.word	0x08013f19
 8013f58:	08013f19 	.word	0x08013f19
 8013f5c:	080140a9 	.word	0x080140a9
 8013f60:	08013fcd 	.word	0x08013fcd
 8013f64:	0801408b 	.word	0x0801408b
 8013f68:	08013f19 	.word	0x08013f19
 8013f6c:	08013f19 	.word	0x08013f19
 8013f70:	080140cb 	.word	0x080140cb
 8013f74:	08013f19 	.word	0x08013f19
 8013f78:	08013fcd 	.word	0x08013fcd
 8013f7c:	08013f19 	.word	0x08013f19
 8013f80:	08013f19 	.word	0x08013f19
 8013f84:	08014093 	.word	0x08014093
 8013f88:	682b      	ldr	r3, [r5, #0]
 8013f8a:	1d1a      	adds	r2, r3, #4
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	602a      	str	r2, [r5, #0]
 8013f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f98:	2301      	movs	r3, #1
 8013f9a:	e0a3      	b.n	80140e4 <_printf_i+0x1f4>
 8013f9c:	6820      	ldr	r0, [r4, #0]
 8013f9e:	6829      	ldr	r1, [r5, #0]
 8013fa0:	0606      	lsls	r6, r0, #24
 8013fa2:	f101 0304 	add.w	r3, r1, #4
 8013fa6:	d50a      	bpl.n	8013fbe <_printf_i+0xce>
 8013fa8:	680e      	ldr	r6, [r1, #0]
 8013faa:	602b      	str	r3, [r5, #0]
 8013fac:	2e00      	cmp	r6, #0
 8013fae:	da03      	bge.n	8013fb8 <_printf_i+0xc8>
 8013fb0:	232d      	movs	r3, #45	; 0x2d
 8013fb2:	4276      	negs	r6, r6
 8013fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fb8:	485e      	ldr	r0, [pc, #376]	; (8014134 <_printf_i+0x244>)
 8013fba:	230a      	movs	r3, #10
 8013fbc:	e019      	b.n	8013ff2 <_printf_i+0x102>
 8013fbe:	680e      	ldr	r6, [r1, #0]
 8013fc0:	602b      	str	r3, [r5, #0]
 8013fc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013fc6:	bf18      	it	ne
 8013fc8:	b236      	sxthne	r6, r6
 8013fca:	e7ef      	b.n	8013fac <_printf_i+0xbc>
 8013fcc:	682b      	ldr	r3, [r5, #0]
 8013fce:	6820      	ldr	r0, [r4, #0]
 8013fd0:	1d19      	adds	r1, r3, #4
 8013fd2:	6029      	str	r1, [r5, #0]
 8013fd4:	0601      	lsls	r1, r0, #24
 8013fd6:	d501      	bpl.n	8013fdc <_printf_i+0xec>
 8013fd8:	681e      	ldr	r6, [r3, #0]
 8013fda:	e002      	b.n	8013fe2 <_printf_i+0xf2>
 8013fdc:	0646      	lsls	r6, r0, #25
 8013fde:	d5fb      	bpl.n	8013fd8 <_printf_i+0xe8>
 8013fe0:	881e      	ldrh	r6, [r3, #0]
 8013fe2:	4854      	ldr	r0, [pc, #336]	; (8014134 <_printf_i+0x244>)
 8013fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8013fe6:	bf0c      	ite	eq
 8013fe8:	2308      	moveq	r3, #8
 8013fea:	230a      	movne	r3, #10
 8013fec:	2100      	movs	r1, #0
 8013fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013ff2:	6865      	ldr	r5, [r4, #4]
 8013ff4:	60a5      	str	r5, [r4, #8]
 8013ff6:	2d00      	cmp	r5, #0
 8013ff8:	bfa2      	ittt	ge
 8013ffa:	6821      	ldrge	r1, [r4, #0]
 8013ffc:	f021 0104 	bicge.w	r1, r1, #4
 8014000:	6021      	strge	r1, [r4, #0]
 8014002:	b90e      	cbnz	r6, 8014008 <_printf_i+0x118>
 8014004:	2d00      	cmp	r5, #0
 8014006:	d04d      	beq.n	80140a4 <_printf_i+0x1b4>
 8014008:	4615      	mov	r5, r2
 801400a:	fbb6 f1f3 	udiv	r1, r6, r3
 801400e:	fb03 6711 	mls	r7, r3, r1, r6
 8014012:	5dc7      	ldrb	r7, [r0, r7]
 8014014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014018:	4637      	mov	r7, r6
 801401a:	42bb      	cmp	r3, r7
 801401c:	460e      	mov	r6, r1
 801401e:	d9f4      	bls.n	801400a <_printf_i+0x11a>
 8014020:	2b08      	cmp	r3, #8
 8014022:	d10b      	bne.n	801403c <_printf_i+0x14c>
 8014024:	6823      	ldr	r3, [r4, #0]
 8014026:	07de      	lsls	r6, r3, #31
 8014028:	d508      	bpl.n	801403c <_printf_i+0x14c>
 801402a:	6923      	ldr	r3, [r4, #16]
 801402c:	6861      	ldr	r1, [r4, #4]
 801402e:	4299      	cmp	r1, r3
 8014030:	bfde      	ittt	le
 8014032:	2330      	movle	r3, #48	; 0x30
 8014034:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014038:	f105 35ff 	addle.w	r5, r5, #4294967295
 801403c:	1b52      	subs	r2, r2, r5
 801403e:	6122      	str	r2, [r4, #16]
 8014040:	f8cd a000 	str.w	sl, [sp]
 8014044:	464b      	mov	r3, r9
 8014046:	aa03      	add	r2, sp, #12
 8014048:	4621      	mov	r1, r4
 801404a:	4640      	mov	r0, r8
 801404c:	f7ff fee2 	bl	8013e14 <_printf_common>
 8014050:	3001      	adds	r0, #1
 8014052:	d14c      	bne.n	80140ee <_printf_i+0x1fe>
 8014054:	f04f 30ff 	mov.w	r0, #4294967295
 8014058:	b004      	add	sp, #16
 801405a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801405e:	4835      	ldr	r0, [pc, #212]	; (8014134 <_printf_i+0x244>)
 8014060:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014064:	6829      	ldr	r1, [r5, #0]
 8014066:	6823      	ldr	r3, [r4, #0]
 8014068:	f851 6b04 	ldr.w	r6, [r1], #4
 801406c:	6029      	str	r1, [r5, #0]
 801406e:	061d      	lsls	r5, r3, #24
 8014070:	d514      	bpl.n	801409c <_printf_i+0x1ac>
 8014072:	07df      	lsls	r7, r3, #31
 8014074:	bf44      	itt	mi
 8014076:	f043 0320 	orrmi.w	r3, r3, #32
 801407a:	6023      	strmi	r3, [r4, #0]
 801407c:	b91e      	cbnz	r6, 8014086 <_printf_i+0x196>
 801407e:	6823      	ldr	r3, [r4, #0]
 8014080:	f023 0320 	bic.w	r3, r3, #32
 8014084:	6023      	str	r3, [r4, #0]
 8014086:	2310      	movs	r3, #16
 8014088:	e7b0      	b.n	8013fec <_printf_i+0xfc>
 801408a:	6823      	ldr	r3, [r4, #0]
 801408c:	f043 0320 	orr.w	r3, r3, #32
 8014090:	6023      	str	r3, [r4, #0]
 8014092:	2378      	movs	r3, #120	; 0x78
 8014094:	4828      	ldr	r0, [pc, #160]	; (8014138 <_printf_i+0x248>)
 8014096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801409a:	e7e3      	b.n	8014064 <_printf_i+0x174>
 801409c:	0659      	lsls	r1, r3, #25
 801409e:	bf48      	it	mi
 80140a0:	b2b6      	uxthmi	r6, r6
 80140a2:	e7e6      	b.n	8014072 <_printf_i+0x182>
 80140a4:	4615      	mov	r5, r2
 80140a6:	e7bb      	b.n	8014020 <_printf_i+0x130>
 80140a8:	682b      	ldr	r3, [r5, #0]
 80140aa:	6826      	ldr	r6, [r4, #0]
 80140ac:	6961      	ldr	r1, [r4, #20]
 80140ae:	1d18      	adds	r0, r3, #4
 80140b0:	6028      	str	r0, [r5, #0]
 80140b2:	0635      	lsls	r5, r6, #24
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	d501      	bpl.n	80140bc <_printf_i+0x1cc>
 80140b8:	6019      	str	r1, [r3, #0]
 80140ba:	e002      	b.n	80140c2 <_printf_i+0x1d2>
 80140bc:	0670      	lsls	r0, r6, #25
 80140be:	d5fb      	bpl.n	80140b8 <_printf_i+0x1c8>
 80140c0:	8019      	strh	r1, [r3, #0]
 80140c2:	2300      	movs	r3, #0
 80140c4:	6123      	str	r3, [r4, #16]
 80140c6:	4615      	mov	r5, r2
 80140c8:	e7ba      	b.n	8014040 <_printf_i+0x150>
 80140ca:	682b      	ldr	r3, [r5, #0]
 80140cc:	1d1a      	adds	r2, r3, #4
 80140ce:	602a      	str	r2, [r5, #0]
 80140d0:	681d      	ldr	r5, [r3, #0]
 80140d2:	6862      	ldr	r2, [r4, #4]
 80140d4:	2100      	movs	r1, #0
 80140d6:	4628      	mov	r0, r5
 80140d8:	f7ec f88a 	bl	80001f0 <memchr>
 80140dc:	b108      	cbz	r0, 80140e2 <_printf_i+0x1f2>
 80140de:	1b40      	subs	r0, r0, r5
 80140e0:	6060      	str	r0, [r4, #4]
 80140e2:	6863      	ldr	r3, [r4, #4]
 80140e4:	6123      	str	r3, [r4, #16]
 80140e6:	2300      	movs	r3, #0
 80140e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140ec:	e7a8      	b.n	8014040 <_printf_i+0x150>
 80140ee:	6923      	ldr	r3, [r4, #16]
 80140f0:	462a      	mov	r2, r5
 80140f2:	4649      	mov	r1, r9
 80140f4:	4640      	mov	r0, r8
 80140f6:	47d0      	blx	sl
 80140f8:	3001      	adds	r0, #1
 80140fa:	d0ab      	beq.n	8014054 <_printf_i+0x164>
 80140fc:	6823      	ldr	r3, [r4, #0]
 80140fe:	079b      	lsls	r3, r3, #30
 8014100:	d413      	bmi.n	801412a <_printf_i+0x23a>
 8014102:	68e0      	ldr	r0, [r4, #12]
 8014104:	9b03      	ldr	r3, [sp, #12]
 8014106:	4298      	cmp	r0, r3
 8014108:	bfb8      	it	lt
 801410a:	4618      	movlt	r0, r3
 801410c:	e7a4      	b.n	8014058 <_printf_i+0x168>
 801410e:	2301      	movs	r3, #1
 8014110:	4632      	mov	r2, r6
 8014112:	4649      	mov	r1, r9
 8014114:	4640      	mov	r0, r8
 8014116:	47d0      	blx	sl
 8014118:	3001      	adds	r0, #1
 801411a:	d09b      	beq.n	8014054 <_printf_i+0x164>
 801411c:	3501      	adds	r5, #1
 801411e:	68e3      	ldr	r3, [r4, #12]
 8014120:	9903      	ldr	r1, [sp, #12]
 8014122:	1a5b      	subs	r3, r3, r1
 8014124:	42ab      	cmp	r3, r5
 8014126:	dcf2      	bgt.n	801410e <_printf_i+0x21e>
 8014128:	e7eb      	b.n	8014102 <_printf_i+0x212>
 801412a:	2500      	movs	r5, #0
 801412c:	f104 0619 	add.w	r6, r4, #25
 8014130:	e7f5      	b.n	801411e <_printf_i+0x22e>
 8014132:	bf00      	nop
 8014134:	080173f1 	.word	0x080173f1
 8014138:	08017402 	.word	0x08017402

0801413c <_sbrk_r>:
 801413c:	b538      	push	{r3, r4, r5, lr}
 801413e:	4d06      	ldr	r5, [pc, #24]	; (8014158 <_sbrk_r+0x1c>)
 8014140:	2300      	movs	r3, #0
 8014142:	4604      	mov	r4, r0
 8014144:	4608      	mov	r0, r1
 8014146:	602b      	str	r3, [r5, #0]
 8014148:	f7ed fb7a 	bl	8001840 <_sbrk>
 801414c:	1c43      	adds	r3, r0, #1
 801414e:	d102      	bne.n	8014156 <_sbrk_r+0x1a>
 8014150:	682b      	ldr	r3, [r5, #0]
 8014152:	b103      	cbz	r3, 8014156 <_sbrk_r+0x1a>
 8014154:	6023      	str	r3, [r4, #0]
 8014156:	bd38      	pop	{r3, r4, r5, pc}
 8014158:	20009010 	.word	0x20009010

0801415c <__sread>:
 801415c:	b510      	push	{r4, lr}
 801415e:	460c      	mov	r4, r1
 8014160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014164:	f000 fa9e 	bl	80146a4 <_read_r>
 8014168:	2800      	cmp	r0, #0
 801416a:	bfab      	itete	ge
 801416c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801416e:	89a3      	ldrhlt	r3, [r4, #12]
 8014170:	181b      	addge	r3, r3, r0
 8014172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014176:	bfac      	ite	ge
 8014178:	6563      	strge	r3, [r4, #84]	; 0x54
 801417a:	81a3      	strhlt	r3, [r4, #12]
 801417c:	bd10      	pop	{r4, pc}

0801417e <__swrite>:
 801417e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014182:	461f      	mov	r7, r3
 8014184:	898b      	ldrh	r3, [r1, #12]
 8014186:	05db      	lsls	r3, r3, #23
 8014188:	4605      	mov	r5, r0
 801418a:	460c      	mov	r4, r1
 801418c:	4616      	mov	r6, r2
 801418e:	d505      	bpl.n	801419c <__swrite+0x1e>
 8014190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014194:	2302      	movs	r3, #2
 8014196:	2200      	movs	r2, #0
 8014198:	f000 f9d0 	bl	801453c <_lseek_r>
 801419c:	89a3      	ldrh	r3, [r4, #12]
 801419e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80141a6:	81a3      	strh	r3, [r4, #12]
 80141a8:	4632      	mov	r2, r6
 80141aa:	463b      	mov	r3, r7
 80141ac:	4628      	mov	r0, r5
 80141ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141b2:	f000 b869 	b.w	8014288 <_write_r>

080141b6 <__sseek>:
 80141b6:	b510      	push	{r4, lr}
 80141b8:	460c      	mov	r4, r1
 80141ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141be:	f000 f9bd 	bl	801453c <_lseek_r>
 80141c2:	1c43      	adds	r3, r0, #1
 80141c4:	89a3      	ldrh	r3, [r4, #12]
 80141c6:	bf15      	itete	ne
 80141c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80141ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80141ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80141d2:	81a3      	strheq	r3, [r4, #12]
 80141d4:	bf18      	it	ne
 80141d6:	81a3      	strhne	r3, [r4, #12]
 80141d8:	bd10      	pop	{r4, pc}

080141da <__sclose>:
 80141da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141de:	f000 b8db 	b.w	8014398 <_close_r>
	...

080141e4 <__swbuf_r>:
 80141e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141e6:	460e      	mov	r6, r1
 80141e8:	4614      	mov	r4, r2
 80141ea:	4605      	mov	r5, r0
 80141ec:	b118      	cbz	r0, 80141f6 <__swbuf_r+0x12>
 80141ee:	6983      	ldr	r3, [r0, #24]
 80141f0:	b90b      	cbnz	r3, 80141f6 <__swbuf_r+0x12>
 80141f2:	f7ff f9bf 	bl	8013574 <__sinit>
 80141f6:	4b21      	ldr	r3, [pc, #132]	; (801427c <__swbuf_r+0x98>)
 80141f8:	429c      	cmp	r4, r3
 80141fa:	d12b      	bne.n	8014254 <__swbuf_r+0x70>
 80141fc:	686c      	ldr	r4, [r5, #4]
 80141fe:	69a3      	ldr	r3, [r4, #24]
 8014200:	60a3      	str	r3, [r4, #8]
 8014202:	89a3      	ldrh	r3, [r4, #12]
 8014204:	071a      	lsls	r2, r3, #28
 8014206:	d52f      	bpl.n	8014268 <__swbuf_r+0x84>
 8014208:	6923      	ldr	r3, [r4, #16]
 801420a:	b36b      	cbz	r3, 8014268 <__swbuf_r+0x84>
 801420c:	6923      	ldr	r3, [r4, #16]
 801420e:	6820      	ldr	r0, [r4, #0]
 8014210:	1ac0      	subs	r0, r0, r3
 8014212:	6963      	ldr	r3, [r4, #20]
 8014214:	b2f6      	uxtb	r6, r6
 8014216:	4283      	cmp	r3, r0
 8014218:	4637      	mov	r7, r6
 801421a:	dc04      	bgt.n	8014226 <__swbuf_r+0x42>
 801421c:	4621      	mov	r1, r4
 801421e:	4628      	mov	r0, r5
 8014220:	f000 f950 	bl	80144c4 <_fflush_r>
 8014224:	bb30      	cbnz	r0, 8014274 <__swbuf_r+0x90>
 8014226:	68a3      	ldr	r3, [r4, #8]
 8014228:	3b01      	subs	r3, #1
 801422a:	60a3      	str	r3, [r4, #8]
 801422c:	6823      	ldr	r3, [r4, #0]
 801422e:	1c5a      	adds	r2, r3, #1
 8014230:	6022      	str	r2, [r4, #0]
 8014232:	701e      	strb	r6, [r3, #0]
 8014234:	6963      	ldr	r3, [r4, #20]
 8014236:	3001      	adds	r0, #1
 8014238:	4283      	cmp	r3, r0
 801423a:	d004      	beq.n	8014246 <__swbuf_r+0x62>
 801423c:	89a3      	ldrh	r3, [r4, #12]
 801423e:	07db      	lsls	r3, r3, #31
 8014240:	d506      	bpl.n	8014250 <__swbuf_r+0x6c>
 8014242:	2e0a      	cmp	r6, #10
 8014244:	d104      	bne.n	8014250 <__swbuf_r+0x6c>
 8014246:	4621      	mov	r1, r4
 8014248:	4628      	mov	r0, r5
 801424a:	f000 f93b 	bl	80144c4 <_fflush_r>
 801424e:	b988      	cbnz	r0, 8014274 <__swbuf_r+0x90>
 8014250:	4638      	mov	r0, r7
 8014252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014254:	4b0a      	ldr	r3, [pc, #40]	; (8014280 <__swbuf_r+0x9c>)
 8014256:	429c      	cmp	r4, r3
 8014258:	d101      	bne.n	801425e <__swbuf_r+0x7a>
 801425a:	68ac      	ldr	r4, [r5, #8]
 801425c:	e7cf      	b.n	80141fe <__swbuf_r+0x1a>
 801425e:	4b09      	ldr	r3, [pc, #36]	; (8014284 <__swbuf_r+0xa0>)
 8014260:	429c      	cmp	r4, r3
 8014262:	bf08      	it	eq
 8014264:	68ec      	ldreq	r4, [r5, #12]
 8014266:	e7ca      	b.n	80141fe <__swbuf_r+0x1a>
 8014268:	4621      	mov	r1, r4
 801426a:	4628      	mov	r0, r5
 801426c:	f000 f81e 	bl	80142ac <__swsetup_r>
 8014270:	2800      	cmp	r0, #0
 8014272:	d0cb      	beq.n	801420c <__swbuf_r+0x28>
 8014274:	f04f 37ff 	mov.w	r7, #4294967295
 8014278:	e7ea      	b.n	8014250 <__swbuf_r+0x6c>
 801427a:	bf00      	nop
 801427c:	080173a0 	.word	0x080173a0
 8014280:	080173c0 	.word	0x080173c0
 8014284:	08017380 	.word	0x08017380

08014288 <_write_r>:
 8014288:	b538      	push	{r3, r4, r5, lr}
 801428a:	4d07      	ldr	r5, [pc, #28]	; (80142a8 <_write_r+0x20>)
 801428c:	4604      	mov	r4, r0
 801428e:	4608      	mov	r0, r1
 8014290:	4611      	mov	r1, r2
 8014292:	2200      	movs	r2, #0
 8014294:	602a      	str	r2, [r5, #0]
 8014296:	461a      	mov	r2, r3
 8014298:	f7ed fa81 	bl	800179e <_write>
 801429c:	1c43      	adds	r3, r0, #1
 801429e:	d102      	bne.n	80142a6 <_write_r+0x1e>
 80142a0:	682b      	ldr	r3, [r5, #0]
 80142a2:	b103      	cbz	r3, 80142a6 <_write_r+0x1e>
 80142a4:	6023      	str	r3, [r4, #0]
 80142a6:	bd38      	pop	{r3, r4, r5, pc}
 80142a8:	20009010 	.word	0x20009010

080142ac <__swsetup_r>:
 80142ac:	4b32      	ldr	r3, [pc, #200]	; (8014378 <__swsetup_r+0xcc>)
 80142ae:	b570      	push	{r4, r5, r6, lr}
 80142b0:	681d      	ldr	r5, [r3, #0]
 80142b2:	4606      	mov	r6, r0
 80142b4:	460c      	mov	r4, r1
 80142b6:	b125      	cbz	r5, 80142c2 <__swsetup_r+0x16>
 80142b8:	69ab      	ldr	r3, [r5, #24]
 80142ba:	b913      	cbnz	r3, 80142c2 <__swsetup_r+0x16>
 80142bc:	4628      	mov	r0, r5
 80142be:	f7ff f959 	bl	8013574 <__sinit>
 80142c2:	4b2e      	ldr	r3, [pc, #184]	; (801437c <__swsetup_r+0xd0>)
 80142c4:	429c      	cmp	r4, r3
 80142c6:	d10f      	bne.n	80142e8 <__swsetup_r+0x3c>
 80142c8:	686c      	ldr	r4, [r5, #4]
 80142ca:	89a3      	ldrh	r3, [r4, #12]
 80142cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80142d0:	0719      	lsls	r1, r3, #28
 80142d2:	d42c      	bmi.n	801432e <__swsetup_r+0x82>
 80142d4:	06dd      	lsls	r5, r3, #27
 80142d6:	d411      	bmi.n	80142fc <__swsetup_r+0x50>
 80142d8:	2309      	movs	r3, #9
 80142da:	6033      	str	r3, [r6, #0]
 80142dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80142e0:	81a3      	strh	r3, [r4, #12]
 80142e2:	f04f 30ff 	mov.w	r0, #4294967295
 80142e6:	e03e      	b.n	8014366 <__swsetup_r+0xba>
 80142e8:	4b25      	ldr	r3, [pc, #148]	; (8014380 <__swsetup_r+0xd4>)
 80142ea:	429c      	cmp	r4, r3
 80142ec:	d101      	bne.n	80142f2 <__swsetup_r+0x46>
 80142ee:	68ac      	ldr	r4, [r5, #8]
 80142f0:	e7eb      	b.n	80142ca <__swsetup_r+0x1e>
 80142f2:	4b24      	ldr	r3, [pc, #144]	; (8014384 <__swsetup_r+0xd8>)
 80142f4:	429c      	cmp	r4, r3
 80142f6:	bf08      	it	eq
 80142f8:	68ec      	ldreq	r4, [r5, #12]
 80142fa:	e7e6      	b.n	80142ca <__swsetup_r+0x1e>
 80142fc:	0758      	lsls	r0, r3, #29
 80142fe:	d512      	bpl.n	8014326 <__swsetup_r+0x7a>
 8014300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014302:	b141      	cbz	r1, 8014316 <__swsetup_r+0x6a>
 8014304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014308:	4299      	cmp	r1, r3
 801430a:	d002      	beq.n	8014312 <__swsetup_r+0x66>
 801430c:	4630      	mov	r0, r6
 801430e:	f7ff f9eb 	bl	80136e8 <_free_r>
 8014312:	2300      	movs	r3, #0
 8014314:	6363      	str	r3, [r4, #52]	; 0x34
 8014316:	89a3      	ldrh	r3, [r4, #12]
 8014318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801431c:	81a3      	strh	r3, [r4, #12]
 801431e:	2300      	movs	r3, #0
 8014320:	6063      	str	r3, [r4, #4]
 8014322:	6923      	ldr	r3, [r4, #16]
 8014324:	6023      	str	r3, [r4, #0]
 8014326:	89a3      	ldrh	r3, [r4, #12]
 8014328:	f043 0308 	orr.w	r3, r3, #8
 801432c:	81a3      	strh	r3, [r4, #12]
 801432e:	6923      	ldr	r3, [r4, #16]
 8014330:	b94b      	cbnz	r3, 8014346 <__swsetup_r+0x9a>
 8014332:	89a3      	ldrh	r3, [r4, #12]
 8014334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801433c:	d003      	beq.n	8014346 <__swsetup_r+0x9a>
 801433e:	4621      	mov	r1, r4
 8014340:	4630      	mov	r0, r6
 8014342:	f000 f933 	bl	80145ac <__smakebuf_r>
 8014346:	89a0      	ldrh	r0, [r4, #12]
 8014348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801434c:	f010 0301 	ands.w	r3, r0, #1
 8014350:	d00a      	beq.n	8014368 <__swsetup_r+0xbc>
 8014352:	2300      	movs	r3, #0
 8014354:	60a3      	str	r3, [r4, #8]
 8014356:	6963      	ldr	r3, [r4, #20]
 8014358:	425b      	negs	r3, r3
 801435a:	61a3      	str	r3, [r4, #24]
 801435c:	6923      	ldr	r3, [r4, #16]
 801435e:	b943      	cbnz	r3, 8014372 <__swsetup_r+0xc6>
 8014360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014364:	d1ba      	bne.n	80142dc <__swsetup_r+0x30>
 8014366:	bd70      	pop	{r4, r5, r6, pc}
 8014368:	0781      	lsls	r1, r0, #30
 801436a:	bf58      	it	pl
 801436c:	6963      	ldrpl	r3, [r4, #20]
 801436e:	60a3      	str	r3, [r4, #8]
 8014370:	e7f4      	b.n	801435c <__swsetup_r+0xb0>
 8014372:	2000      	movs	r0, #0
 8014374:	e7f7      	b.n	8014366 <__swsetup_r+0xba>
 8014376:	bf00      	nop
 8014378:	20000018 	.word	0x20000018
 801437c:	080173a0 	.word	0x080173a0
 8014380:	080173c0 	.word	0x080173c0
 8014384:	08017380 	.word	0x08017380

08014388 <abort>:
 8014388:	b508      	push	{r3, lr}
 801438a:	2006      	movs	r0, #6
 801438c:	f000 f9c4 	bl	8014718 <raise>
 8014390:	2001      	movs	r0, #1
 8014392:	f7ed f9dd 	bl	8001750 <_exit>
	...

08014398 <_close_r>:
 8014398:	b538      	push	{r3, r4, r5, lr}
 801439a:	4d06      	ldr	r5, [pc, #24]	; (80143b4 <_close_r+0x1c>)
 801439c:	2300      	movs	r3, #0
 801439e:	4604      	mov	r4, r0
 80143a0:	4608      	mov	r0, r1
 80143a2:	602b      	str	r3, [r5, #0]
 80143a4:	f7ed fa17 	bl	80017d6 <_close>
 80143a8:	1c43      	adds	r3, r0, #1
 80143aa:	d102      	bne.n	80143b2 <_close_r+0x1a>
 80143ac:	682b      	ldr	r3, [r5, #0]
 80143ae:	b103      	cbz	r3, 80143b2 <_close_r+0x1a>
 80143b0:	6023      	str	r3, [r4, #0]
 80143b2:	bd38      	pop	{r3, r4, r5, pc}
 80143b4:	20009010 	.word	0x20009010

080143b8 <__sflush_r>:
 80143b8:	898a      	ldrh	r2, [r1, #12]
 80143ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143be:	4605      	mov	r5, r0
 80143c0:	0710      	lsls	r0, r2, #28
 80143c2:	460c      	mov	r4, r1
 80143c4:	d458      	bmi.n	8014478 <__sflush_r+0xc0>
 80143c6:	684b      	ldr	r3, [r1, #4]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	dc05      	bgt.n	80143d8 <__sflush_r+0x20>
 80143cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	dc02      	bgt.n	80143d8 <__sflush_r+0x20>
 80143d2:	2000      	movs	r0, #0
 80143d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143da:	2e00      	cmp	r6, #0
 80143dc:	d0f9      	beq.n	80143d2 <__sflush_r+0x1a>
 80143de:	2300      	movs	r3, #0
 80143e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80143e4:	682f      	ldr	r7, [r5, #0]
 80143e6:	602b      	str	r3, [r5, #0]
 80143e8:	d032      	beq.n	8014450 <__sflush_r+0x98>
 80143ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80143ec:	89a3      	ldrh	r3, [r4, #12]
 80143ee:	075a      	lsls	r2, r3, #29
 80143f0:	d505      	bpl.n	80143fe <__sflush_r+0x46>
 80143f2:	6863      	ldr	r3, [r4, #4]
 80143f4:	1ac0      	subs	r0, r0, r3
 80143f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143f8:	b10b      	cbz	r3, 80143fe <__sflush_r+0x46>
 80143fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80143fc:	1ac0      	subs	r0, r0, r3
 80143fe:	2300      	movs	r3, #0
 8014400:	4602      	mov	r2, r0
 8014402:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014404:	6a21      	ldr	r1, [r4, #32]
 8014406:	4628      	mov	r0, r5
 8014408:	47b0      	blx	r6
 801440a:	1c43      	adds	r3, r0, #1
 801440c:	89a3      	ldrh	r3, [r4, #12]
 801440e:	d106      	bne.n	801441e <__sflush_r+0x66>
 8014410:	6829      	ldr	r1, [r5, #0]
 8014412:	291d      	cmp	r1, #29
 8014414:	d82c      	bhi.n	8014470 <__sflush_r+0xb8>
 8014416:	4a2a      	ldr	r2, [pc, #168]	; (80144c0 <__sflush_r+0x108>)
 8014418:	40ca      	lsrs	r2, r1
 801441a:	07d6      	lsls	r6, r2, #31
 801441c:	d528      	bpl.n	8014470 <__sflush_r+0xb8>
 801441e:	2200      	movs	r2, #0
 8014420:	6062      	str	r2, [r4, #4]
 8014422:	04d9      	lsls	r1, r3, #19
 8014424:	6922      	ldr	r2, [r4, #16]
 8014426:	6022      	str	r2, [r4, #0]
 8014428:	d504      	bpl.n	8014434 <__sflush_r+0x7c>
 801442a:	1c42      	adds	r2, r0, #1
 801442c:	d101      	bne.n	8014432 <__sflush_r+0x7a>
 801442e:	682b      	ldr	r3, [r5, #0]
 8014430:	b903      	cbnz	r3, 8014434 <__sflush_r+0x7c>
 8014432:	6560      	str	r0, [r4, #84]	; 0x54
 8014434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014436:	602f      	str	r7, [r5, #0]
 8014438:	2900      	cmp	r1, #0
 801443a:	d0ca      	beq.n	80143d2 <__sflush_r+0x1a>
 801443c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014440:	4299      	cmp	r1, r3
 8014442:	d002      	beq.n	801444a <__sflush_r+0x92>
 8014444:	4628      	mov	r0, r5
 8014446:	f7ff f94f 	bl	80136e8 <_free_r>
 801444a:	2000      	movs	r0, #0
 801444c:	6360      	str	r0, [r4, #52]	; 0x34
 801444e:	e7c1      	b.n	80143d4 <__sflush_r+0x1c>
 8014450:	6a21      	ldr	r1, [r4, #32]
 8014452:	2301      	movs	r3, #1
 8014454:	4628      	mov	r0, r5
 8014456:	47b0      	blx	r6
 8014458:	1c41      	adds	r1, r0, #1
 801445a:	d1c7      	bne.n	80143ec <__sflush_r+0x34>
 801445c:	682b      	ldr	r3, [r5, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d0c4      	beq.n	80143ec <__sflush_r+0x34>
 8014462:	2b1d      	cmp	r3, #29
 8014464:	d001      	beq.n	801446a <__sflush_r+0xb2>
 8014466:	2b16      	cmp	r3, #22
 8014468:	d101      	bne.n	801446e <__sflush_r+0xb6>
 801446a:	602f      	str	r7, [r5, #0]
 801446c:	e7b1      	b.n	80143d2 <__sflush_r+0x1a>
 801446e:	89a3      	ldrh	r3, [r4, #12]
 8014470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014474:	81a3      	strh	r3, [r4, #12]
 8014476:	e7ad      	b.n	80143d4 <__sflush_r+0x1c>
 8014478:	690f      	ldr	r7, [r1, #16]
 801447a:	2f00      	cmp	r7, #0
 801447c:	d0a9      	beq.n	80143d2 <__sflush_r+0x1a>
 801447e:	0793      	lsls	r3, r2, #30
 8014480:	680e      	ldr	r6, [r1, #0]
 8014482:	bf08      	it	eq
 8014484:	694b      	ldreq	r3, [r1, #20]
 8014486:	600f      	str	r7, [r1, #0]
 8014488:	bf18      	it	ne
 801448a:	2300      	movne	r3, #0
 801448c:	eba6 0807 	sub.w	r8, r6, r7
 8014490:	608b      	str	r3, [r1, #8]
 8014492:	f1b8 0f00 	cmp.w	r8, #0
 8014496:	dd9c      	ble.n	80143d2 <__sflush_r+0x1a>
 8014498:	6a21      	ldr	r1, [r4, #32]
 801449a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801449c:	4643      	mov	r3, r8
 801449e:	463a      	mov	r2, r7
 80144a0:	4628      	mov	r0, r5
 80144a2:	47b0      	blx	r6
 80144a4:	2800      	cmp	r0, #0
 80144a6:	dc06      	bgt.n	80144b6 <__sflush_r+0xfe>
 80144a8:	89a3      	ldrh	r3, [r4, #12]
 80144aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144ae:	81a3      	strh	r3, [r4, #12]
 80144b0:	f04f 30ff 	mov.w	r0, #4294967295
 80144b4:	e78e      	b.n	80143d4 <__sflush_r+0x1c>
 80144b6:	4407      	add	r7, r0
 80144b8:	eba8 0800 	sub.w	r8, r8, r0
 80144bc:	e7e9      	b.n	8014492 <__sflush_r+0xda>
 80144be:	bf00      	nop
 80144c0:	20400001 	.word	0x20400001

080144c4 <_fflush_r>:
 80144c4:	b538      	push	{r3, r4, r5, lr}
 80144c6:	690b      	ldr	r3, [r1, #16]
 80144c8:	4605      	mov	r5, r0
 80144ca:	460c      	mov	r4, r1
 80144cc:	b913      	cbnz	r3, 80144d4 <_fflush_r+0x10>
 80144ce:	2500      	movs	r5, #0
 80144d0:	4628      	mov	r0, r5
 80144d2:	bd38      	pop	{r3, r4, r5, pc}
 80144d4:	b118      	cbz	r0, 80144de <_fflush_r+0x1a>
 80144d6:	6983      	ldr	r3, [r0, #24]
 80144d8:	b90b      	cbnz	r3, 80144de <_fflush_r+0x1a>
 80144da:	f7ff f84b 	bl	8013574 <__sinit>
 80144de:	4b14      	ldr	r3, [pc, #80]	; (8014530 <_fflush_r+0x6c>)
 80144e0:	429c      	cmp	r4, r3
 80144e2:	d11b      	bne.n	801451c <_fflush_r+0x58>
 80144e4:	686c      	ldr	r4, [r5, #4]
 80144e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d0ef      	beq.n	80144ce <_fflush_r+0xa>
 80144ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80144f0:	07d0      	lsls	r0, r2, #31
 80144f2:	d404      	bmi.n	80144fe <_fflush_r+0x3a>
 80144f4:	0599      	lsls	r1, r3, #22
 80144f6:	d402      	bmi.n	80144fe <_fflush_r+0x3a>
 80144f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144fa:	f7ff f8eb 	bl	80136d4 <__retarget_lock_acquire_recursive>
 80144fe:	4628      	mov	r0, r5
 8014500:	4621      	mov	r1, r4
 8014502:	f7ff ff59 	bl	80143b8 <__sflush_r>
 8014506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014508:	07da      	lsls	r2, r3, #31
 801450a:	4605      	mov	r5, r0
 801450c:	d4e0      	bmi.n	80144d0 <_fflush_r+0xc>
 801450e:	89a3      	ldrh	r3, [r4, #12]
 8014510:	059b      	lsls	r3, r3, #22
 8014512:	d4dd      	bmi.n	80144d0 <_fflush_r+0xc>
 8014514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014516:	f7ff f8de 	bl	80136d6 <__retarget_lock_release_recursive>
 801451a:	e7d9      	b.n	80144d0 <_fflush_r+0xc>
 801451c:	4b05      	ldr	r3, [pc, #20]	; (8014534 <_fflush_r+0x70>)
 801451e:	429c      	cmp	r4, r3
 8014520:	d101      	bne.n	8014526 <_fflush_r+0x62>
 8014522:	68ac      	ldr	r4, [r5, #8]
 8014524:	e7df      	b.n	80144e6 <_fflush_r+0x22>
 8014526:	4b04      	ldr	r3, [pc, #16]	; (8014538 <_fflush_r+0x74>)
 8014528:	429c      	cmp	r4, r3
 801452a:	bf08      	it	eq
 801452c:	68ec      	ldreq	r4, [r5, #12]
 801452e:	e7da      	b.n	80144e6 <_fflush_r+0x22>
 8014530:	080173a0 	.word	0x080173a0
 8014534:	080173c0 	.word	0x080173c0
 8014538:	08017380 	.word	0x08017380

0801453c <_lseek_r>:
 801453c:	b538      	push	{r3, r4, r5, lr}
 801453e:	4d07      	ldr	r5, [pc, #28]	; (801455c <_lseek_r+0x20>)
 8014540:	4604      	mov	r4, r0
 8014542:	4608      	mov	r0, r1
 8014544:	4611      	mov	r1, r2
 8014546:	2200      	movs	r2, #0
 8014548:	602a      	str	r2, [r5, #0]
 801454a:	461a      	mov	r2, r3
 801454c:	f7ed f96a 	bl	8001824 <_lseek>
 8014550:	1c43      	adds	r3, r0, #1
 8014552:	d102      	bne.n	801455a <_lseek_r+0x1e>
 8014554:	682b      	ldr	r3, [r5, #0]
 8014556:	b103      	cbz	r3, 801455a <_lseek_r+0x1e>
 8014558:	6023      	str	r3, [r4, #0]
 801455a:	bd38      	pop	{r3, r4, r5, pc}
 801455c:	20009010 	.word	0x20009010

08014560 <__swhatbuf_r>:
 8014560:	b570      	push	{r4, r5, r6, lr}
 8014562:	460e      	mov	r6, r1
 8014564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014568:	2900      	cmp	r1, #0
 801456a:	b096      	sub	sp, #88	; 0x58
 801456c:	4614      	mov	r4, r2
 801456e:	461d      	mov	r5, r3
 8014570:	da08      	bge.n	8014584 <__swhatbuf_r+0x24>
 8014572:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014576:	2200      	movs	r2, #0
 8014578:	602a      	str	r2, [r5, #0]
 801457a:	061a      	lsls	r2, r3, #24
 801457c:	d410      	bmi.n	80145a0 <__swhatbuf_r+0x40>
 801457e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014582:	e00e      	b.n	80145a2 <__swhatbuf_r+0x42>
 8014584:	466a      	mov	r2, sp
 8014586:	f000 f8e3 	bl	8014750 <_fstat_r>
 801458a:	2800      	cmp	r0, #0
 801458c:	dbf1      	blt.n	8014572 <__swhatbuf_r+0x12>
 801458e:	9a01      	ldr	r2, [sp, #4]
 8014590:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014594:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014598:	425a      	negs	r2, r3
 801459a:	415a      	adcs	r2, r3
 801459c:	602a      	str	r2, [r5, #0]
 801459e:	e7ee      	b.n	801457e <__swhatbuf_r+0x1e>
 80145a0:	2340      	movs	r3, #64	; 0x40
 80145a2:	2000      	movs	r0, #0
 80145a4:	6023      	str	r3, [r4, #0]
 80145a6:	b016      	add	sp, #88	; 0x58
 80145a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080145ac <__smakebuf_r>:
 80145ac:	898b      	ldrh	r3, [r1, #12]
 80145ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145b0:	079d      	lsls	r5, r3, #30
 80145b2:	4606      	mov	r6, r0
 80145b4:	460c      	mov	r4, r1
 80145b6:	d507      	bpl.n	80145c8 <__smakebuf_r+0x1c>
 80145b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145bc:	6023      	str	r3, [r4, #0]
 80145be:	6123      	str	r3, [r4, #16]
 80145c0:	2301      	movs	r3, #1
 80145c2:	6163      	str	r3, [r4, #20]
 80145c4:	b002      	add	sp, #8
 80145c6:	bd70      	pop	{r4, r5, r6, pc}
 80145c8:	ab01      	add	r3, sp, #4
 80145ca:	466a      	mov	r2, sp
 80145cc:	f7ff ffc8 	bl	8014560 <__swhatbuf_r>
 80145d0:	9900      	ldr	r1, [sp, #0]
 80145d2:	4605      	mov	r5, r0
 80145d4:	4630      	mov	r0, r6
 80145d6:	f7ff f8f3 	bl	80137c0 <_malloc_r>
 80145da:	b948      	cbnz	r0, 80145f0 <__smakebuf_r+0x44>
 80145dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145e0:	059a      	lsls	r2, r3, #22
 80145e2:	d4ef      	bmi.n	80145c4 <__smakebuf_r+0x18>
 80145e4:	f023 0303 	bic.w	r3, r3, #3
 80145e8:	f043 0302 	orr.w	r3, r3, #2
 80145ec:	81a3      	strh	r3, [r4, #12]
 80145ee:	e7e3      	b.n	80145b8 <__smakebuf_r+0xc>
 80145f0:	4b0d      	ldr	r3, [pc, #52]	; (8014628 <__smakebuf_r+0x7c>)
 80145f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80145f4:	89a3      	ldrh	r3, [r4, #12]
 80145f6:	6020      	str	r0, [r4, #0]
 80145f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145fc:	81a3      	strh	r3, [r4, #12]
 80145fe:	9b00      	ldr	r3, [sp, #0]
 8014600:	6163      	str	r3, [r4, #20]
 8014602:	9b01      	ldr	r3, [sp, #4]
 8014604:	6120      	str	r0, [r4, #16]
 8014606:	b15b      	cbz	r3, 8014620 <__smakebuf_r+0x74>
 8014608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801460c:	4630      	mov	r0, r6
 801460e:	f000 f8b1 	bl	8014774 <_isatty_r>
 8014612:	b128      	cbz	r0, 8014620 <__smakebuf_r+0x74>
 8014614:	89a3      	ldrh	r3, [r4, #12]
 8014616:	f023 0303 	bic.w	r3, r3, #3
 801461a:	f043 0301 	orr.w	r3, r3, #1
 801461e:	81a3      	strh	r3, [r4, #12]
 8014620:	89a0      	ldrh	r0, [r4, #12]
 8014622:	4305      	orrs	r5, r0
 8014624:	81a5      	strh	r5, [r4, #12]
 8014626:	e7cd      	b.n	80145c4 <__smakebuf_r+0x18>
 8014628:	0801350d 	.word	0x0801350d

0801462c <__malloc_lock>:
 801462c:	4801      	ldr	r0, [pc, #4]	; (8014634 <__malloc_lock+0x8>)
 801462e:	f7ff b851 	b.w	80136d4 <__retarget_lock_acquire_recursive>
 8014632:	bf00      	nop
 8014634:	20009014 	.word	0x20009014

08014638 <__malloc_unlock>:
 8014638:	4801      	ldr	r0, [pc, #4]	; (8014640 <__malloc_unlock+0x8>)
 801463a:	f7ff b84c 	b.w	80136d6 <__retarget_lock_release_recursive>
 801463e:	bf00      	nop
 8014640:	20009014 	.word	0x20009014

08014644 <_realloc_r>:
 8014644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014648:	4680      	mov	r8, r0
 801464a:	4614      	mov	r4, r2
 801464c:	460e      	mov	r6, r1
 801464e:	b921      	cbnz	r1, 801465a <_realloc_r+0x16>
 8014650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014654:	4611      	mov	r1, r2
 8014656:	f7ff b8b3 	b.w	80137c0 <_malloc_r>
 801465a:	b92a      	cbnz	r2, 8014668 <_realloc_r+0x24>
 801465c:	f7ff f844 	bl	80136e8 <_free_r>
 8014660:	4625      	mov	r5, r4
 8014662:	4628      	mov	r0, r5
 8014664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014668:	f000 f894 	bl	8014794 <_malloc_usable_size_r>
 801466c:	4284      	cmp	r4, r0
 801466e:	4607      	mov	r7, r0
 8014670:	d802      	bhi.n	8014678 <_realloc_r+0x34>
 8014672:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014676:	d812      	bhi.n	801469e <_realloc_r+0x5a>
 8014678:	4621      	mov	r1, r4
 801467a:	4640      	mov	r0, r8
 801467c:	f7ff f8a0 	bl	80137c0 <_malloc_r>
 8014680:	4605      	mov	r5, r0
 8014682:	2800      	cmp	r0, #0
 8014684:	d0ed      	beq.n	8014662 <_realloc_r+0x1e>
 8014686:	42bc      	cmp	r4, r7
 8014688:	4622      	mov	r2, r4
 801468a:	4631      	mov	r1, r6
 801468c:	bf28      	it	cs
 801468e:	463a      	movcs	r2, r7
 8014690:	f7fe fe54 	bl	801333c <memcpy>
 8014694:	4631      	mov	r1, r6
 8014696:	4640      	mov	r0, r8
 8014698:	f7ff f826 	bl	80136e8 <_free_r>
 801469c:	e7e1      	b.n	8014662 <_realloc_r+0x1e>
 801469e:	4635      	mov	r5, r6
 80146a0:	e7df      	b.n	8014662 <_realloc_r+0x1e>
	...

080146a4 <_read_r>:
 80146a4:	b538      	push	{r3, r4, r5, lr}
 80146a6:	4d07      	ldr	r5, [pc, #28]	; (80146c4 <_read_r+0x20>)
 80146a8:	4604      	mov	r4, r0
 80146aa:	4608      	mov	r0, r1
 80146ac:	4611      	mov	r1, r2
 80146ae:	2200      	movs	r2, #0
 80146b0:	602a      	str	r2, [r5, #0]
 80146b2:	461a      	mov	r2, r3
 80146b4:	f7ed f856 	bl	8001764 <_read>
 80146b8:	1c43      	adds	r3, r0, #1
 80146ba:	d102      	bne.n	80146c2 <_read_r+0x1e>
 80146bc:	682b      	ldr	r3, [r5, #0]
 80146be:	b103      	cbz	r3, 80146c2 <_read_r+0x1e>
 80146c0:	6023      	str	r3, [r4, #0]
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	20009010 	.word	0x20009010

080146c8 <_raise_r>:
 80146c8:	291f      	cmp	r1, #31
 80146ca:	b538      	push	{r3, r4, r5, lr}
 80146cc:	4604      	mov	r4, r0
 80146ce:	460d      	mov	r5, r1
 80146d0:	d904      	bls.n	80146dc <_raise_r+0x14>
 80146d2:	2316      	movs	r3, #22
 80146d4:	6003      	str	r3, [r0, #0]
 80146d6:	f04f 30ff 	mov.w	r0, #4294967295
 80146da:	bd38      	pop	{r3, r4, r5, pc}
 80146dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80146de:	b112      	cbz	r2, 80146e6 <_raise_r+0x1e>
 80146e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80146e4:	b94b      	cbnz	r3, 80146fa <_raise_r+0x32>
 80146e6:	4620      	mov	r0, r4
 80146e8:	f000 f830 	bl	801474c <_getpid_r>
 80146ec:	462a      	mov	r2, r5
 80146ee:	4601      	mov	r1, r0
 80146f0:	4620      	mov	r0, r4
 80146f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146f6:	f000 b817 	b.w	8014728 <_kill_r>
 80146fa:	2b01      	cmp	r3, #1
 80146fc:	d00a      	beq.n	8014714 <_raise_r+0x4c>
 80146fe:	1c59      	adds	r1, r3, #1
 8014700:	d103      	bne.n	801470a <_raise_r+0x42>
 8014702:	2316      	movs	r3, #22
 8014704:	6003      	str	r3, [r0, #0]
 8014706:	2001      	movs	r0, #1
 8014708:	e7e7      	b.n	80146da <_raise_r+0x12>
 801470a:	2400      	movs	r4, #0
 801470c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014710:	4628      	mov	r0, r5
 8014712:	4798      	blx	r3
 8014714:	2000      	movs	r0, #0
 8014716:	e7e0      	b.n	80146da <_raise_r+0x12>

08014718 <raise>:
 8014718:	4b02      	ldr	r3, [pc, #8]	; (8014724 <raise+0xc>)
 801471a:	4601      	mov	r1, r0
 801471c:	6818      	ldr	r0, [r3, #0]
 801471e:	f7ff bfd3 	b.w	80146c8 <_raise_r>
 8014722:	bf00      	nop
 8014724:	20000018 	.word	0x20000018

08014728 <_kill_r>:
 8014728:	b538      	push	{r3, r4, r5, lr}
 801472a:	4d07      	ldr	r5, [pc, #28]	; (8014748 <_kill_r+0x20>)
 801472c:	2300      	movs	r3, #0
 801472e:	4604      	mov	r4, r0
 8014730:	4608      	mov	r0, r1
 8014732:	4611      	mov	r1, r2
 8014734:	602b      	str	r3, [r5, #0]
 8014736:	f7ec fff9 	bl	800172c <_kill>
 801473a:	1c43      	adds	r3, r0, #1
 801473c:	d102      	bne.n	8014744 <_kill_r+0x1c>
 801473e:	682b      	ldr	r3, [r5, #0]
 8014740:	b103      	cbz	r3, 8014744 <_kill_r+0x1c>
 8014742:	6023      	str	r3, [r4, #0]
 8014744:	bd38      	pop	{r3, r4, r5, pc}
 8014746:	bf00      	nop
 8014748:	20009010 	.word	0x20009010

0801474c <_getpid_r>:
 801474c:	f7ec bfe6 	b.w	800171c <_getpid>

08014750 <_fstat_r>:
 8014750:	b538      	push	{r3, r4, r5, lr}
 8014752:	4d07      	ldr	r5, [pc, #28]	; (8014770 <_fstat_r+0x20>)
 8014754:	2300      	movs	r3, #0
 8014756:	4604      	mov	r4, r0
 8014758:	4608      	mov	r0, r1
 801475a:	4611      	mov	r1, r2
 801475c:	602b      	str	r3, [r5, #0]
 801475e:	f7ed f846 	bl	80017ee <_fstat>
 8014762:	1c43      	adds	r3, r0, #1
 8014764:	d102      	bne.n	801476c <_fstat_r+0x1c>
 8014766:	682b      	ldr	r3, [r5, #0]
 8014768:	b103      	cbz	r3, 801476c <_fstat_r+0x1c>
 801476a:	6023      	str	r3, [r4, #0]
 801476c:	bd38      	pop	{r3, r4, r5, pc}
 801476e:	bf00      	nop
 8014770:	20009010 	.word	0x20009010

08014774 <_isatty_r>:
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	4d06      	ldr	r5, [pc, #24]	; (8014790 <_isatty_r+0x1c>)
 8014778:	2300      	movs	r3, #0
 801477a:	4604      	mov	r4, r0
 801477c:	4608      	mov	r0, r1
 801477e:	602b      	str	r3, [r5, #0]
 8014780:	f7ed f845 	bl	800180e <_isatty>
 8014784:	1c43      	adds	r3, r0, #1
 8014786:	d102      	bne.n	801478e <_isatty_r+0x1a>
 8014788:	682b      	ldr	r3, [r5, #0]
 801478a:	b103      	cbz	r3, 801478e <_isatty_r+0x1a>
 801478c:	6023      	str	r3, [r4, #0]
 801478e:	bd38      	pop	{r3, r4, r5, pc}
 8014790:	20009010 	.word	0x20009010

08014794 <_malloc_usable_size_r>:
 8014794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014798:	1f18      	subs	r0, r3, #4
 801479a:	2b00      	cmp	r3, #0
 801479c:	bfbc      	itt	lt
 801479e:	580b      	ldrlt	r3, [r1, r0]
 80147a0:	18c0      	addlt	r0, r0, r3
 80147a2:	4770      	bx	lr

080147a4 <_init>:
 80147a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147a6:	bf00      	nop
 80147a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147aa:	bc08      	pop	{r3}
 80147ac:	469e      	mov	lr, r3
 80147ae:	4770      	bx	lr

080147b0 <_fini>:
 80147b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147b2:	bf00      	nop
 80147b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147b6:	bc08      	pop	{r3}
 80147b8:	469e      	mov	lr, r3
 80147ba:	4770      	bx	lr
